!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=157)}([function(e,t,n){"use strict";e.exports=n(32)},function(e,t,n){e.exports=n(40)()},function(e,t,n){e.exports=n(38)()},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"d",function(){return l}),n.d(t,"a",function(){return c}),n.d(t,"c",function(){return u});n(26);var r,o=n(1),i=n.n(o);function a(e,t){return void 0===e&&(e=""),void 0===t&&(t=r),t?e.split(" ").map(function(e){return t[e]||e}).join(" "):e}var s={};function l(e){s[e]||("undefined"!=typeof console&&console.error(e),s[e]=!0)}function c(e,t){return function(n,r,o){null!==n[r]&&void 0!==n[r]&&l('"'+r+'" property of "'+o+'" has been deprecated.\n'+t);for(var i=arguments.length,a=new Array(i>3?i-3:0),s=3;s<i;s++)a[s-3]=arguments[s];return e.apply(void 0,[n,r,o].concat(a))}}i.a.oneOfType([i.a.string,i.a.func,function(e,t,n){if(!(e[t]instanceof Element))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`. Expected prop to be an instance of Element. Validation failed.")},i.a.shape({current:i.a.any})]);var u=i.a.oneOfType([i.a.func,i.a.string,i.a.shape({$$typeof:i.a.symbol,render:i.a.func}),i.a.arrayOf(i.a.oneOfType([i.a.func,i.a.string,i.a.shape({$$typeof:i.a.symbol,render:i.a.func})]))]);"undefined"==typeof window||!window.document||window.document.createElement},function(e,t,n){"use strict";(function(e){var r=n(15),o=n.n(r),i=n(24),a=n.n(i),s=n(0),l=n.n(s),c=n(25),u=n(10),d=n(16),p=(n(2),n(12),n(28)),f=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},g=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},y=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},w=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},x=function(e){return"object"===(void 0===e?"undefined":h(e))&&e.constructor===Object},_=Object.freeze([]),k=Object.freeze({});function E(e){return"function"==typeof e}function C(e){return e.displayName||e.name||"Component"}function T(e){return e&&"string"==typeof e.styledComponentId}var S=void 0!==e&&e.env.SC_ATTR||"data-styled",I="undefined"!=typeof window&&"HTMLElement"in window,N="boolean"==typeof SC_DISABLE_SPEEDY&&SC_DISABLE_SPEEDY||!1;var O=function(e){function t(n){m(this,t);for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];var a=w(this,e.call(this,"An error occurred. See https://github.com/styled-components/styled-components/blob/master/src/utils/errors.md#"+n+" for more information. "+(o?"Additional arguments: "+o.join(", "):"")));return w(a)}return v(t,e),t}(Error),P=/^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm,A=function(e){var t=""+(e||""),n=[];return t.replace(P,function(e,t,r){return n.push({componentId:t,matchIndex:r}),e}),n.map(function(e,r){var o=e.componentId,i=e.matchIndex,a=n[r+1];return{componentId:o,cssFromDOM:a?t.slice(i,a.matchIndex):t.slice(i)}})},R=/^\s*\/\/.*$/gm,D=new o.a({global:!1,cascade:!0,keyframe:!1,prefix:!1,compress:!1,semicolon:!0}),L=new o.a({global:!1,cascade:!0,keyframe:!1,prefix:!0,compress:!1,semicolon:!1}),j=[],M=function(e){if(-2===e){var t=j;return j=[],t}},F=a()(function(e){j.push(e)}),U=void 0,z=void 0,W=void 0,V=function(e,t,n){return t>0&&-1!==n.slice(0,t).indexOf(z)&&n.slice(t-z.length,t)!==z?"."+U:e};L.use([function(e,t,n){2===e&&n.length&&n[0].lastIndexOf(z)>0&&(n[0]=n[0].replace(W,V))},F,M]),D.use([F,M]);function B(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"&",o=e.join("").replace(R,""),i=t&&n?n+" "+t+" { "+o+" }":o;return U=r,z=t,W=new RegExp("\\"+z+"\\b","g"),L(n||!t?"":t,i)}var q=function(){return n.nc},H=function(e,t,n){n&&((e[t]||(e[t]=Object.create(null)))[n]=!0)},Q=function(e,t){e[t]=Object.create(null)},K=function(e){return function(t,n){return void 0!==e[t]&&e[t][n]}},G=function(e){var t="";for(var n in e)t+=Object.keys(e[n]).join(" ")+" ";return t.trim()},$=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets.length,n=0;n<t;n+=1){var r=document.styleSheets[n];if(r.ownerNode===e)return r}throw new O(10)},Y=function(e,t,n){if(!t)return!1;var r=e.cssRules.length;try{e.insertRule(t,n<=r?n:r)}catch(e){return!1}return!0},X=function(e){return"\n/* sc-component-id: "+e+" */\n"},J=function(e,t){for(var n=0,r=0;r<=t;r+=1)n+=e[r];return n},Z=function(e,t){return function(n){var r=q();return"<style "+[r&&'nonce="'+r+'"',S+'="'+G(t)+'"','data-styled-version="4.1.3"',n].filter(Boolean).join(" ")+">"+e()+"</style>"}},ee=function(e,t){return function(){var n,r=((n={})[S]=G(t),n["data-styled-version"]="4.1.3",n),o=q();return o&&(r.nonce=o),l.a.createElement("style",b({},r,{dangerouslySetInnerHTML:{__html:e()}}))}},te=function(e){return function(){return Object.keys(e)}},ne=function(e){return document.createTextNode(X(e))},re=function e(t,n){var r=void 0===t?Object.create(null):t,o=void 0===n?Object.create(null):n,i=function(e){var t=o[e];return void 0!==t?t:o[e]=[""]},a=function(){var e="";for(var t in o){var n=o[t][0];n&&(e+=X(t)+n)}return e};return{clone:function(){var t=function(e){var t=Object.create(null);for(var n in e)t[n]=b({},e[n]);return t}(r),n=Object.create(null);for(var i in o)n[i]=[o[i][0]];return e(t,n)},css:a,getIds:te(o),hasNameForId:K(r),insertMarker:i,insertRules:function(e,t,n){i(e)[0]+=t.join(" "),H(r,e,n)},removeRules:function(e){var t=o[e];void 0!==t&&(t[0]="",Q(r,e))},sealed:!1,styleTag:null,toElement:ee(a,r),toHTML:Z(a,r)}},oe=function(e,t,n,r,o){if(I&&!n){var i=function(e,t,n){var r=document.createElement("style");r.setAttribute(S,""),r.setAttribute("data-styled-version","4.1.3");var o=q();if(o&&r.setAttribute("nonce",o),r.appendChild(document.createTextNode("")),e&&!t)e.appendChild(r);else{if(!t||!e||!t.parentNode)throw new O(6);t.parentNode.insertBefore(r,n?t:t.nextSibling)}return r}(e,t,r);return N?function(e,t){var n=Object.create(null),r=Object.create(null),o=void 0!==t,i=!1,a=function(t){var o=r[t];return void 0!==o?o:(r[t]=ne(t),e.appendChild(r[t]),n[t]=Object.create(null),r[t])},s=function(){var e="";for(var t in r)e+=r[t].data;return e};return{clone:function(){throw new O(5)},css:s,getIds:te(r),hasNameForId:K(n),insertMarker:a,insertRules:function(e,r,s){for(var l=a(e),c=[],u=r.length,d=0;d<u;d+=1){var p=r[d],f=o;if(f&&-1!==p.indexOf("@import"))c.push(p);else{f=!1;var h=d===u-1?"":" ";l.appendData(""+p+h)}}H(n,e,s),o&&c.length>0&&(i=!0,t().insertRules(e+"-import",c))},removeRules:function(a){var s=r[a];if(void 0!==s){var l=ne(a);e.replaceChild(l,s),r[a]=l,Q(n,a),o&&i&&t().removeRules(a+"-import")}},sealed:!1,styleTag:e,toElement:ee(s,n),toHTML:Z(s,n)}}(i,o):function(e,t){var n=Object.create(null),r=Object.create(null),o=[],i=void 0!==t,a=!1,s=function(e){var t=r[e];return void 0!==t?t:(r[e]=o.length,o.push(0),Q(n,e),r[e])},l=function(){var t=$(e).cssRules,n="";for(var i in r){n+=X(i);for(var a=r[i],s=J(o,a),l=s-o[a];l<s;l+=1){var c=t[l];void 0!==c&&(n+=c.cssText)}}return n};return{clone:function(){throw new O(5)},css:l,getIds:te(r),hasNameForId:K(n),insertMarker:s,insertRules:function(r,l,c){for(var u=s(r),d=$(e),p=J(o,u),f=0,h=[],m=l.length,g=0;g<m;g+=1){var b=l[g],v=i;v&&-1!==b.indexOf("@import")?h.push(b):Y(d,b,p+f)&&(v=!1,f+=1)}i&&h.length>0&&(a=!0,t().insertRules(r+"-import",h)),o[u]+=f,H(n,r,c)},removeRules:function(s){var l=r[s];if(void 0!==l){var c=o[l];!function(e,t,n){for(var r=t-n,o=t;o>r;o-=1)e.deleteRule(o)}($(e),J(o,l)-1,c),o[l]=0,Q(n,s),i&&a&&t().removeRules(s+"-import")}},sealed:!1,styleTag:e,toElement:ee(l,n),toHTML:Z(l,n)}}(i,o)}return re()},ie=/\s+/,ae=void 0;ae=I?N?40:1e3:-1;var se=0,le=void 0,ce=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:I?document.head:null,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];m(this,e),this.getImportRuleTag=function(){var e=t.importRuleTag;if(void 0!==e)return e;var n=t.tags[0];return t.importRuleTag=oe(t.target,n?n.styleTag:null,t.forceServer,!0)},se+=1,this.id=se,this.forceServer=r,this.target=r?null:n,this.tagMap={},this.deferred={},this.rehydratedNames={},this.ignoreRehydratedNames={},this.tags=[],this.capacity=1,this.clones=[]}return e.prototype.rehydrate=function(){if(!I||this.forceServer)return this;var e=[],t=[],n=!1,r=document.querySelectorAll("style["+S+'][data-styled-version="4.1.3"]'),o=r.length;if(!o)return this;for(var i=0;i<o;i+=1){var a=r[i];n||(n=!!a.getAttribute("data-styled-streamed"));for(var s,l=(a.getAttribute(S)||"").trim().split(ie),c=l.length,u=0;u<c;u+=1)s=l[u],this.rehydratedNames[s]=!0;t.push.apply(t,A(a.textContent)),e.push(a)}var d=t.length;if(!d)return this;var p=this.makeTag(null);!function(e,t,n){for(var r=0,o=n.length;r<o;r+=1){var i=n[r],a=i.componentId,s=i.cssFromDOM,l=D("",s);e.insertRules(a,l)}for(var c=0,u=t.length;c<u;c+=1){var d=t[c];d.parentNode&&d.parentNode.removeChild(d)}}(p,e,t),this.capacity=Math.max(1,ae-d),this.tags.push(p);for(var f=0;f<d;f+=1)this.tagMap[t[f].componentId]=p;return this},e.reset=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];le=new e(void 0,t).rehydrate()},e.prototype.clone=function(){var t=new e(this.target,this.forceServer);return this.clones.push(t),t.tags=this.tags.map(function(e){for(var n=e.getIds(),r=e.clone(),o=0;o<n.length;o+=1)t.tagMap[n[o]]=r;return r}),t.rehydratedNames=b({},this.rehydratedNames),t.deferred=b({},this.deferred),t},e.prototype.sealAllTags=function(){this.capacity=1,this.tags.forEach(function(e){e.sealed=!0})},e.prototype.makeTag=function(e){var t=e?e.styleTag:null;return oe(this.target,t,this.forceServer,!1,this.getImportRuleTag)},e.prototype.getTagForId=function(e){var t=this.tagMap[e];if(void 0!==t&&!t.sealed)return t;var n=this.tags[this.tags.length-1];return this.capacity-=1,0===this.capacity&&(this.capacity=ae,n=this.makeTag(n),this.tags.push(n)),this.tagMap[e]=n},e.prototype.hasId=function(e){return void 0!==this.tagMap[e]},e.prototype.hasNameForId=function(e,t){if(void 0===this.ignoreRehydratedNames[e]&&this.rehydratedNames[t])return!0;var n=this.tagMap[e];return void 0!==n&&n.hasNameForId(e,t)},e.prototype.deferredInject=function(e,t){if(void 0===this.tagMap[e]){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].deferredInject(e,t);this.getTagForId(e).insertMarker(e),this.deferred[e]=t}},e.prototype.inject=function(e,t,n){for(var r=this.clones,o=0;o<r.length;o+=1)r[o].inject(e,t,n);var i=this.getTagForId(e);if(void 0!==this.deferred[e]){var a=this.deferred[e].concat(t);i.insertRules(e,a,n),this.deferred[e]=void 0}else i.insertRules(e,t,n)},e.prototype.remove=function(e){var t=this.tagMap[e];if(void 0!==t){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].remove(e);t.removeRules(e),this.ignoreRehydratedNames[e]=!0,this.deferred[e]=void 0}},e.prototype.toHTML=function(){return this.tags.map(function(e){return e.toHTML()}).join("")},e.prototype.toReactElements=function(){var e=this.id;return this.tags.map(function(t,n){var r="sc-"+e+"-"+n;return Object(s.cloneElement)(t.toElement(),{key:r})})},g(e,null,[{key:"master",get:function(){return le||(le=(new e).rehydrate())}},{key:"instance",get:function(){return e.master}}]),e}(),ue=function(){function e(t,n){var r=this;m(this,e),this.inject=function(e){e.hasNameForId(r.id,r.name)||e.inject(r.id,r.rules,r.name)},this.toString=function(){throw new O(12,String(r.name))},this.name=t,this.rules=n,this.id="sc-keyframes-"+t}return e.prototype.getName=function(){return this.name},e}(),de=/([A-Z])/g,pe=/^ms-/;var fe=function(e){return null==e||!1===e||""===e},he=function e(t,n){var r=Object.keys(t).filter(function(e){return!fe(t[e])}).map(function(n){return x(t[n])?e(t[n],n):n.replace(de,"-$1").toLowerCase().replace(pe,"-ms-")+": "+(r=n,null==(o=t[n])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in c.a?String(o).trim():o+"px")+";";var r,o}).join(" ");return n?n+" {\n  "+r+"\n}":r};function me(e,t,n){if(Array.isArray(e)){for(var r,o=[],i=0,a=e.length;i<a;i+=1)null!==(r=me(e[i],t,n))&&(Array.isArray(r)?o.push.apply(o,r):o.push(r));return o}if(fe(e))return null;if(T(e))return"."+e.styledComponentId;if(E(e)){if(t){var s=!1;try{Object(u.isElement)(new e(t))&&(s=!0)}catch(e){}if(s)throw new O(13,C(e));return me(e(t),t,n)}return e}return e instanceof ue?n?(e.inject(n),e.getName()):e:x(e)?he(e):e.toString()}function ge(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return E(e)||x(e)?me(f(_,[e].concat(n))):me(f(e,n))}function be(e){for(var t,n=0|e.length,r=0|n,o=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(o)|(255&e.charCodeAt(++o))<<8|(255&e.charCodeAt(++o))<<16|(255&e.charCodeAt(++o))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++o;switch(n){case 3:r^=(255&e.charCodeAt(o+2))<<16;case 2:r^=(255&e.charCodeAt(o+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(o)))+((1540483477*(r>>>16)&65535)<<16)}return((r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16))^r>>>15)>>>0}var ve=52,ye=function(e){return String.fromCharCode(e+(e>25?39:97))};function we(e){var t="",n=void 0;for(n=e;n>ve;n=Math.floor(n/ve))t=ye(n%ve)+t;return ye(n%ve)+t}function xe(e,t){for(var n=0;n<e.length;n+=1){var r=e[n];if(Array.isArray(r)&&!xe(r,t))return!1;if(E(r)&&!T(r))return!1}return!t.some(function(e){return E(e)||function(e){for(var t in e)if(E(e[t]))return!0;return!1}(e)})}var _e,ke=!1,Ee=function(e){return we(be(e))},Ce=function(){function e(t,n,r){m(this,e),this.rules=t,this.isStatic=!ke&&xe(t,n),this.componentId=r,ce.master.hasId(r)||ce.master.deferredInject(r,[])}return e.prototype.generateAndInjectStyles=function(e,t){var n=this.isStatic,r=this.componentId,o=this.lastClassName;if(I&&n&&"string"==typeof o&&t.hasNameForId(r,o))return o;var i=me(this.rules,e,t),a=Ee(this.componentId+i.join(""));return t.hasNameForId(r,a)||t.inject(this.componentId,B(i,"."+a,void 0,r),a),this.lastClassName=a,a},e.generateName=function(e){return Ee(e)},e}(),Te=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k,r=!!n&&e.theme===n.theme;return e.theme&&!r?e.theme:t||n.theme},Se=/[[\].#*$><+~=|^:(),"'`-]+/g,Ie=/(^-|-$)/g;function Ne(e){return e.replace(Se,"-").replace(Ie,"")}function Oe(e){return"string"==typeof e&&!0}var Pe={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDerivedStateFromProps:!0,propTypes:!0,type:!0},Ae={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Re=((_e={})[u.ForwardRef]={$$typeof:!0,render:!0},_e),De=Object.defineProperty,Le=Object.getOwnPropertyNames,je=Object.getOwnPropertySymbols,Me=void 0===je?function(){return[]}:je,Fe=Object.getOwnPropertyDescriptor,Ue=Object.getPrototypeOf,ze=Object.prototype,We=Array.prototype;function Ve(e,t,n){if("string"!=typeof t){var r=Ue(t);r&&r!==ze&&Ve(e,r,n);for(var o=We.concat(Le(t),Me(t)),i=Re[e.$$typeof]||Pe,a=Re[t.$$typeof]||Pe,s=o.length,l=void 0,c=void 0;s--;)if(c=o[s],!(Ae[c]||n&&n[c]||a&&a[c]||i&&i[c])&&(l=Fe(t,c)))try{De(e,c,l)}catch(e){}return e}return e}var Be=Object(s.createContext)(),qe=Be.Consumer,He=(function(e){function t(n){m(this,t);var r=w(this,e.call(this,n));return r.getContext=Object(d.a)(r.getContext.bind(r)),r.renderInner=r.renderInner.bind(r),r}v(t,e),t.prototype.render=function(){return this.props.children?l.a.createElement(Be.Consumer,null,this.renderInner):null},t.prototype.renderInner=function(e){var t=this.getContext(this.props.theme,e);return l.a.createElement(Be.Provider,{value:t},l.a.Children.only(this.props.children))},t.prototype.getTheme=function(e,t){if(E(e))return e(t);if(null===e||Array.isArray(e)||"object"!==(void 0===e?"undefined":h(e)))throw new O(8);return b({},t,e)},t.prototype.getContext=function(e,t){return this.getTheme(e,t)}}(s.Component),function(){function e(){m(this,e),this.masterSheet=ce.master,this.instance=this.masterSheet.clone(),this.sealed=!1}e.prototype.seal=function(){if(!this.sealed){var e=this.masterSheet.clones.indexOf(this.instance);this.masterSheet.clones.splice(e,1),this.sealed=!0}},e.prototype.collectStyles=function(e){if(this.sealed)throw new O(2);return l.a.createElement(Ke,{sheet:this.instance},e)},e.prototype.getStyleTags=function(){return this.seal(),this.instance.toHTML()},e.prototype.getStyleElement=function(){return this.seal(),this.instance.toReactElements()},e.prototype.interleaveWithNodeStream=function(e){throw new O(3)}}(),Object(s.createContext)()),Qe=He.Consumer,Ke=function(e){function t(n){m(this,t);var r=w(this,e.call(this,n));return r.getContext=Object(d.a)(r.getContext),r}return v(t,e),t.prototype.getContext=function(e,t){if(e)return e;if(t)return new ce(t);throw new O(4)},t.prototype.render=function(){var e=this.props,t=e.children,n=e.sheet,r=e.target;return l.a.createElement(He.Provider,{value:this.getContext(n,r)},t)},t}(s.Component),Ge=(new Set,{});var $e=function(e){function t(){m(this,t);var n=w(this,e.call(this));return n.attrs={},n.renderOuter=n.renderOuter.bind(n),n.renderInner=n.renderInner.bind(n),n}return v(t,e),t.prototype.render=function(){return l.a.createElement(Qe,null,this.renderOuter)},t.prototype.renderOuter=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ce.master;return this.styleSheet=e,this.props.forwardedComponent.componentStyle.isStatic?this.renderInner():l.a.createElement(qe,null,this.renderInner)},t.prototype.renderInner=function(e){var t=this.props.forwardedComponent,n=t.componentStyle,r=t.defaultProps,o=(t.displayName,t.foldedComponentIds),i=t.styledComponentId,a=t.target,l=void 0;l=n.isStatic?this.generateAndInjectStyles(k,this.props):void 0!==e?this.generateAndInjectStyles(Te(this.props,e,r),this.props):this.generateAndInjectStyles(this.props.theme||k,this.props);var c=this.props.as||this.attrs.as||a,u=Oe(c),d={},f=b({},this.attrs,this.props),h=void 0;for(h in f)"forwardedComponent"!==h&&"as"!==h&&("forwardedRef"===h?d.ref=f[h]:u&&!Object(p.a)(h)||(d[h]=f[h]));return this.props.style&&this.attrs.style&&(d.style=b({},this.attrs.style,this.props.style)),d.className=Array.prototype.concat(o,this.props.className,i,this.attrs.className,l).filter(Boolean).join(" "),Object(s.createElement)(c,d)},t.prototype.buildExecutionContext=function(e,t,n){var r=this,o=b({},t,{theme:e});return n.length?(this.attrs={},n.forEach(function(e){var t,n=e,i=!1,a=void 0,s=void 0;for(s in E(n)&&(n=n(o),i=!0),n)a=n[s],i||!E(a)||(t=a)&&t.prototype&&t.prototype.isReactComponent||T(a)||(a=a(o)),r.attrs[s]=a,o[s]=a}),o):o},t.prototype.generateAndInjectStyles=function(e,t){var n=t.forwardedComponent,r=n.attrs,o=n.componentStyle;n.warnTooManyClasses;return o.isStatic&&!r.length?o.generateAndInjectStyles(k,this.styleSheet):o.generateAndInjectStyles(this.buildExecutionContext(e,t,r),this.styleSheet)},t}(s.Component);function Ye(e,t,n){var r=T(e),o=!Oe(e),i=t.displayName,a=void 0===i?function(e){return Oe(e)?"styled."+e:"Styled("+C(e)+")"}(e):i,s=t.componentId,c=void 0===s?function(e,t,n){var r="string"!=typeof t?"sc":Ne(t),o=(Ge[r]||0)+1;Ge[r]=o;var i=r+"-"+e.generateName(r+o);return n?n+"-"+i:i}(Ce,t.displayName,t.parentComponentId):s,u=t.ParentComponent,d=void 0===u?$e:u,p=t.attrs,f=void 0===p?_:p,h=t.displayName&&t.componentId?Ne(t.displayName)+"-"+t.componentId:t.componentId||c,m=r&&e.attrs?Array.prototype.concat(e.attrs,f).filter(Boolean):f,g=new Ce(r?e.componentStyle.rules.concat(n):n,m,h),v=l.a.forwardRef(function(e,t){return l.a.createElement(d,b({},e,{forwardedComponent:v,forwardedRef:t}))});return v.attrs=m,v.componentStyle=g,v.displayName=a,v.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):_,v.styledComponentId=h,v.target=r?e.target:e,v.withComponent=function(e){var r=t.componentId,o=y(t,["componentId"]),i=r&&r+"-"+(Oe(e)?e:Ne(C(e)));return Ye(e,b({},o,{attrs:m,componentId:i,ParentComponent:d}),n)},v.toString=function(){return"."+v.styledComponentId},o&&Ve(v,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,styledComponentId:!0,target:!0,withComponent:!0}),v}var Xe=function(e){return function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k;if(!Object(u.isValidElementType)(n))throw new O(1,String(n));var o=function(){return t(n,r,ge.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,b({},r,o))},o.attrs=function(o){return e(t,n,b({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(Ye,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach(function(e){Xe[e]=Xe(e)});!function(){function e(t,n){m(this,e),this.rules=t,this.componentId=n,this.isStatic=xe(t,_),ce.master.hasId(n)||ce.master.deferredInject(n,[])}e.prototype.createStyles=function(e,t){var n=B(me(this.rules,e,t),"");t.inject(this.componentId,n)},e.prototype.removeStyles=function(e){var t=this.componentId;e.hasId(t)&&e.remove(t)},e.prototype.renderStyles=function(e,t){this.removeStyles(t),this.createStyles(e,t)}}();I&&(window.scCGSHMRCache={});t.a=Xe}).call(this,n(31))},function(e,t,n){"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */t.parse=function(e,t){if("string"!=typeof e)throw new TypeError("argument str must be a string");for(var n={},o=t||{},a=e.split(i),l=o.decode||r,c=0;c<a.length;c++){var u=a[c],d=u.indexOf("=");if(!(d<0)){var p=u.substr(0,d).trim(),f=u.substr(++d,u.length).trim();'"'==f[0]&&(f=f.slice(1,-1)),null==n[p]&&(n[p]=s(f,l))}}return n},t.serialize=function(e,t,n){var r=n||{},i=r.encode||o;if("function"!=typeof i)throw new TypeError("option encode is invalid");if(!a.test(e))throw new TypeError("argument name is invalid");var s=i(t);if(s&&!a.test(s))throw new TypeError("argument val is invalid");var l=e+"="+s;if(null!=r.maxAge){var c=r.maxAge-0;if(isNaN(c))throw new Error("maxAge should be a Number");l+="; Max-Age="+Math.floor(c)}if(r.domain){if(!a.test(r.domain))throw new TypeError("option domain is invalid");l+="; Domain="+r.domain}if(r.path){if(!a.test(r.path))throw new TypeError("option path is invalid");l+="; Path="+r.path}if(r.expires){if("function"!=typeof r.expires.toUTCString)throw new TypeError("option expires is invalid");l+="; Expires="+r.expires.toUTCString()}r.httpOnly&&(l+="; HttpOnly");r.secure&&(l+="; Secure");if(r.sameSite){var u="string"==typeof r.sameSite?r.sameSite.toLowerCase():r.sameSite;switch(u){case!0:l+="; SameSite=Strict";break;case"lax":l+="; SameSite=Lax";break;case"strict":l+="; SameSite=Strict";break;default:throw new TypeError("option sameSite is invalid")}}return l};var r=decodeURIComponent,o=encodeURIComponent,i=/; */,a=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function s(e,t){try{return t(e)}catch(t){return e}}},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",function(){return r})},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var s in r)n.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";e.exports=n(37)},function(e,t,n){"use strict";var r=n(6);function o(e,t){void 0===t&&(t={});var n=function(e){if(e&&"j"===e[0]&&":"===e[1])return e.substr(2);return e}(e);if(function(e,t){return void 0===t&&(t=!e||"{"!==e[0]&&"["!==e[0]&&'"'!==e[0]),!t}(n,t.doNotParse))try{return JSON.parse(n)}catch(e){}return e}var i,a,s=n(14),l=function(){function e(e){this.changeListeners=[],this.cookies=function(e){return"string"==typeof e?r.parse(e):"object"==typeof e&&null!==e?e:{}}(e),this.HAS_DOCUMENT_COOKIE="object"==typeof document&&"string"==typeof document.cookie}return e.prototype._updateBrowserValues=function(){this.HAS_DOCUMENT_COOKIE&&(this.cookies=r.parse(document.cookie))},e.prototype._emitChange=function(e){for(var t=0;t<this.changeListeners.length;++t)this.changeListeners[t](e)},e.prototype.get=function(e,t){return void 0===t&&(t={}),this._updateBrowserValues(),o(this.cookies[e],t)},e.prototype.getAll=function(e){void 0===e&&(e={}),this._updateBrowserValues();var t={};for(var n in this.cookies)t[n]=o(this.cookies[n],e);return t},e.prototype.set=function(e,t,n){var o;"object"==typeof t&&(t=JSON.stringify(t)),this.cookies=s({},this.cookies,((o={})[e]=t,o)),this.HAS_DOCUMENT_COOKIE&&(document.cookie=r.serialize(e,t,n)),this._emitChange({name:e,value:t,options:n})},e.prototype.remove=function(e,t){var n=t=s({},t,{expires:new Date(1970,1,1,0,0,1),maxAge:0});this.cookies=s({},this.cookies),delete this.cookies[e],this.HAS_DOCUMENT_COOKIE&&(document.cookie=r.serialize(e,"",n)),this._emitChange({name:e,value:void 0,options:t})},e.prototype.addChangeListener=function(e){this.changeListeners.push(e)},e.prototype.removeChangeListener=function(e){var t=this.changeListeners.indexOf(e);t>=0&&this.changeListeners.splice(t,1)},e}(),c=n(0),u=(i=c.createContext(new l)).Provider,d=i.Consumer,p=(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),f=function(e){function t(t){var n=e.call(this,t)||this;return t.cookies?n.cookies=t.cookies:n.cookies=new l,n}return p(t,e),t.prototype.render=function(){return c.createElement(u,{value:this.cookies},this.props.children)},t}(c.Component),h=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),m=function(){return(m=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},g=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]])}return n},b=n(36);function v(e){var t=e.displayName||e.name,n=function(n){function r(){var e=null!==n&&n.apply(this,arguments)||this;return e.onChange=function(){e.forceUpdate()},e}return h(r,n),r.prototype.listen=function(){this.props.cookies.addChangeListener(this.onChange)},r.prototype.unlisten=function(e){(e||this.props.cookies).removeChangeListener(this.onChange)},r.prototype.componentDidMount=function(){this.listen()},r.prototype.componentDidUpdate=function(e){e.cookies!==this.props.cookies&&(this.unlisten(e.cookies),this.listen())},r.prototype.componentWillUnmount=function(){this.unlisten()},r.prototype.render=function(){var t=this.props,n=t.forwardedRef,r=t.cookies,o=g(t,["forwardedRef","cookies"]),i=r.getAll();return c.createElement(e,m({},o,{ref:n,cookies:r,allCookies:i}))},r.displayName="withCookies("+t+")",r.WrapperComponent=e,r}(c.Component),r=c.forwardRef(function(e,t){return c.createElement(d,null,function(r){return c.createElement(n,m({cookies:r},e,{forwardedRef:t}))})});return b(r,e,{WrappedComponent:!0})}n.d(t,"a",function(){return f}),n.d(t,"b",function(){return v})},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(33)},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(s[c]=n[c]);if(r){a=r(n);for(var u=0;u<a.length;u++)i.call(n,a[u])&&(s[a[u]]=n[a[u]])}}return s}},function(e,t,n){e.exports=function e(t){"use strict";var n=/^\0+/g,r=/[\0\r\f]/g,o=/: */g,i=/zoo|gra/,a=/([,: ])(transform)/g,s=/,+\s*(?![^(]*[)])/g,l=/ +\s*(?![^(]*[)])/g,c=/ *[\0] */g,u=/,\r+?/g,d=/([\t\r\n ])*\f?&/g,p=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,f=/\W+/g,h=/@(k\w+)\s*(\S*)\s*/,m=/::(place)/g,g=/:(read-only)/g,b=/\s+(?=[{\];=:>])/g,v=/([[}=:>])\s+/g,y=/(\{[^{]+?);(?=\})/g,w=/\s{2,}/g,x=/([^\(])(:+) */g,_=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,E=/([\s\S]*?);/g,C=/-self|flex-/g,T=/[^]*?(:[rp][el]a[\w-]+)[^]*/,S=/stretch|:\s*\w+\-(?:conte|avail)/,I=/([^-])(image-set\()/,N="-webkit-",O="-moz-",P="-ms-",A=59,R=125,D=123,L=40,j=41,M=91,F=93,U=10,z=13,W=9,V=64,B=32,q=38,H=45,Q=95,K=42,G=44,$=58,Y=39,X=34,J=47,Z=62,ee=43,te=126,ne=0,re=12,oe=11,ie=107,ae=109,se=115,le=112,ce=111,ue=105,de=99,pe=100,fe=112,he=1,me=1,ge=0,be=1,ve=1,ye=1,we=0,xe=0,_e=0,ke=[],Ee=[],Ce=0,Te=null,Se=-2,Ie=-1,Ne=0,Oe=1,Pe=2,Ae=3,Re=0,De=1,Le="",je="",Me="";function Fe(e,t,o,i,a){for(var s,l,u=0,d=0,p=0,f=0,b=0,v=0,y=0,w=0,_=0,E=0,C=0,T=0,S=0,I=0,Q=0,we=0,Ee=0,Te=0,Se=0,Ie=o.length,ze=Ie-1,Qe="",Ke="",Ge="",$e="",Ye="",Xe="";Q<Ie;){if(y=o.charCodeAt(Q),Q===ze&&d+f+p+u!==0&&(0!==d&&(y=d===J?U:J),f=p=u=0,Ie++,ze++),d+f+p+u===0){if(Q===ze&&(we>0&&(Ke=Ke.replace(r,"")),Ke.trim().length>0)){switch(y){case B:case W:case A:case z:case U:break;default:Ke+=o.charAt(Q)}y=A}if(1===Ee)switch(y){case D:case R:case A:case X:case Y:case L:case j:case G:Ee=0;case W:case z:case U:case B:break;default:for(Ee=0,Se=Q,b=y,Q--,y=A;Se<Ie;)switch(o.charCodeAt(Se++)){case U:case z:case A:++Q,y=b,Se=Ie;break;case $:we>0&&(++Q,y=b);case D:Se=Ie}}switch(y){case D:for(b=(Ke=Ke.trim()).charCodeAt(0),C=1,Se=++Q;Q<Ie;){switch(y=o.charCodeAt(Q)){case D:C++;break;case R:C--;break;case J:switch(v=o.charCodeAt(Q+1)){case K:case J:Q=He(v,Q,ze,o)}break;case M:y++;case L:y++;case X:case Y:for(;Q++<ze&&o.charCodeAt(Q)!==y;);}if(0===C)break;Q++}switch(Ge=o.substring(Se,Q),b===ne&&(b=(Ke=Ke.replace(n,"").trim()).charCodeAt(0)),b){case V:switch(we>0&&(Ke=Ke.replace(r,"")),v=Ke.charCodeAt(1)){case pe:case ae:case se:case H:s=t;break;default:s=ke}if(Se=(Ge=Fe(t,s,Ge,v,a+1)).length,_e>0&&0===Se&&(Se=Ke.length),Ce>0&&(s=Ue(ke,Ke,Te),l=qe(Ae,Ge,s,t,me,he,Se,v,a,i),Ke=s.join(""),void 0!==l&&0===(Se=(Ge=l.trim()).length)&&(v=0,Ge="")),Se>0)switch(v){case se:Ke=Ke.replace(k,Be);case pe:case ae:case H:Ge=Ke+"{"+Ge+"}";break;case ie:Ge=(Ke=Ke.replace(h,"$1 $2"+(De>0?Le:"")))+"{"+Ge+"}",Ge=1===ve||2===ve&&Ve("@"+Ge,3)?"@"+N+Ge+"@"+Ge:"@"+Ge;break;default:Ge=Ke+Ge,i===fe&&($e+=Ge,Ge="")}else Ge="";break;default:Ge=Fe(t,Ue(t,Ke,Te),Ge,i,a+1)}Ye+=Ge,T=0,Ee=0,I=0,we=0,Te=0,S=0,Ke="",Ge="",y=o.charCodeAt(++Q);break;case R:case A:if((Se=(Ke=(we>0?Ke.replace(r,""):Ke).trim()).length)>1)switch(0===I&&((b=Ke.charCodeAt(0))===H||b>96&&b<123)&&(Se=(Ke=Ke.replace(" ",":")).length),Ce>0&&void 0!==(l=qe(Oe,Ke,t,e,me,he,$e.length,i,a,i))&&0===(Se=(Ke=l.trim()).length)&&(Ke="\0\0"),b=Ke.charCodeAt(0),v=Ke.charCodeAt(1),b){case ne:break;case V:if(v===ue||v===de){Xe+=Ke+o.charAt(Q);break}default:if(Ke.charCodeAt(Se-1)===$)break;$e+=We(Ke,b,v,Ke.charCodeAt(2))}T=0,Ee=0,I=0,we=0,Te=0,Ke="",y=o.charCodeAt(++Q)}}switch(y){case z:case U:if(d+f+p+u+xe===0)switch(E){case j:case Y:case X:case V:case te:case Z:case K:case ee:case J:case H:case $:case G:case A:case D:case R:break;default:I>0&&(Ee=1)}d===J?d=0:be+T===0&&i!==ie&&Ke.length>0&&(we=1,Ke+="\0"),Ce*Re>0&&qe(Ne,Ke,t,e,me,he,$e.length,i,a,i),he=1,me++;break;case A:case R:if(d+f+p+u===0){he++;break}default:switch(he++,Qe=o.charAt(Q),y){case W:case B:if(f+u+d===0)switch(w){case G:case $:case W:case B:Qe="";break;default:y!==B&&(Qe=" ")}break;case ne:Qe="\\0";break;case re:Qe="\\f";break;case oe:Qe="\\v";break;case q:f+d+u===0&&be>0&&(Te=1,we=1,Qe="\f"+Qe);break;case 108:if(f+d+u+ge===0&&I>0)switch(Q-I){case 2:w===le&&o.charCodeAt(Q-3)===$&&(ge=w);case 8:_===ce&&(ge=_)}break;case $:f+d+u===0&&(I=Q);break;case G:d+p+f+u===0&&(we=1,Qe+="\r");break;case X:case Y:0===d&&(f=f===y?0:0===f?y:f);break;case M:f+d+p===0&&u++;break;case F:f+d+p===0&&u--;break;case j:f+d+u===0&&p--;break;case L:if(f+d+u===0){if(0===T)switch(2*w+3*_){case 533:break;default:C=0,T=1}p++}break;case V:d+p+f+u+I+S===0&&(S=1);break;case K:case J:if(f+u+p>0)break;switch(d){case 0:switch(2*y+3*o.charCodeAt(Q+1)){case 235:d=J;break;case 220:Se=Q,d=K}break;case K:y===J&&w===K&&Se+2!==Q&&(33===o.charCodeAt(Se+2)&&($e+=o.substring(Se,Q+1)),Qe="",d=0)}}if(0===d){if(be+f+u+S===0&&i!==ie&&y!==A)switch(y){case G:case te:case Z:case ee:case j:case L:if(0===T){switch(w){case W:case B:case U:case z:Qe+="\0";break;default:Qe="\0"+Qe+(y===G?"":"\0")}we=1}else switch(y){case L:I+7===Q&&108===w&&(I=0),T=++C;break;case j:0==(T=--C)&&(we=1,Qe+="\0")}break;case W:case B:switch(w){case ne:case D:case R:case A:case G:case re:case W:case B:case U:case z:break;default:0===T&&(we=1,Qe+="\0")}}Ke+=Qe,y!==B&&y!==W&&(E=y)}}_=w,w=y,Q++}if(Se=$e.length,_e>0&&0===Se&&0===Ye.length&&0===t[0].length==0&&(i!==ae||1===t.length&&(be>0?je:Me)===t[0])&&(Se=t.join(",").length+2),Se>0){if(s=0===be&&i!==ie?function(e){for(var t,n,o=0,i=e.length,a=Array(i);o<i;++o){for(var s=e[o].split(c),l="",u=0,d=0,p=0,f=0,h=s.length;u<h;++u)if(!(0===(d=(n=s[u]).length)&&h>1)){if(p=l.charCodeAt(l.length-1),f=n.charCodeAt(0),t="",0!==u)switch(p){case K:case te:case Z:case ee:case B:case L:break;default:t=" "}switch(f){case q:n=t+je;case te:case Z:case ee:case B:case j:case L:break;case M:n=t+n+je;break;case $:switch(2*n.charCodeAt(1)+3*n.charCodeAt(2)){case 530:if(ye>0){n=t+n.substring(8,d-1);break}default:(u<1||s[u-1].length<1)&&(n=t+je+n)}break;case G:t="";default:n=d>1&&n.indexOf(":")>0?t+n.replace(x,"$1"+je+"$2"):t+n+je}l+=n}a[o]=l.replace(r,"").trim()}return a}(t):t,Ce>0&&void 0!==(l=qe(Pe,$e,s,e,me,he,Se,i,a,i))&&0===($e=l).length)return Xe+$e+Ye;if($e=s.join(",")+"{"+$e+"}",ve*ge!=0){switch(2!==ve||Ve($e,2)||(ge=0),ge){case ce:$e=$e.replace(g,":"+O+"$1")+$e;break;case le:$e=$e.replace(m,"::"+N+"input-$1")+$e.replace(m,"::"+O+"$1")+$e.replace(m,":"+P+"input-$1")+$e}ge=0}}return Xe+$e+Ye}function Ue(e,t,n){var r=t.trim().split(u),o=r,i=r.length,a=e.length;switch(a){case 0:case 1:for(var s=0,l=0===a?"":e[0]+" ";s<i;++s)o[s]=ze(l,o[s],n,a).trim();break;default:s=0;var c=0;for(o=[];s<i;++s)for(var d=0;d<a;++d)o[c++]=ze(e[d]+" ",r[s],n,a).trim()}return o}function ze(e,t,n,r){var o=t,i=o.charCodeAt(0);switch(i<33&&(i=(o=o.trim()).charCodeAt(0)),i){case q:switch(be+r){case 0:case 1:if(0===e.trim().length)break;default:return o.replace(d,"$1"+e.trim())}break;case $:switch(o.charCodeAt(1)){case 103:if(ye>0&&be>0)return o.replace(p,"$1").replace(d,"$1"+Me);break;default:return e.trim()+o.replace(d,"$1"+e.trim())}default:if(n*be>0&&o.indexOf("\f")>0)return o.replace(d,(e.charCodeAt(0)===$?"":"$1")+e.trim())}return e+o}function We(e,t,n,r){var c,u=0,d=e+";",p=2*t+3*n+4*r;if(944===p)return function(e){var t=e.length,n=e.indexOf(":",9)+1,r=e.substring(0,n).trim(),o=e.substring(n,t-1).trim();switch(e.charCodeAt(9)*De){case 0:break;case H:if(110!==e.charCodeAt(10))break;default:for(var i=o.split((o="",s)),a=0,n=0,t=i.length;a<t;n=0,++a){for(var c=i[a],u=c.split(l);c=u[n];){var d=c.charCodeAt(0);if(1===De&&(d>V&&d<90||d>96&&d<123||d===Q||d===H&&c.charCodeAt(1)!==H))switch(isNaN(parseFloat(c))+(-1!==c.indexOf("("))){case 1:switch(c){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:c+=Le}}u[n++]=c}o+=(0===a?"":",")+u.join(" ")}}return o=r+o+";",1===ve||2===ve&&Ve(o,1)?N+o+o:o}(d);if(0===ve||2===ve&&!Ve(d,1))return d;switch(p){case 1015:return 97===d.charCodeAt(10)?N+d+d:d;case 951:return 116===d.charCodeAt(3)?N+d+d:d;case 963:return 110===d.charCodeAt(5)?N+d+d:d;case 1009:if(100!==d.charCodeAt(4))break;case 969:case 942:return N+d+d;case 978:return N+d+O+d+d;case 1019:case 983:return N+d+O+d+P+d+d;case 883:return d.charCodeAt(8)===H?N+d+d:d.indexOf("image-set(",11)>0?d.replace(I,"$1"+N+"$2")+d:d;case 932:if(d.charCodeAt(4)===H)switch(d.charCodeAt(5)){case 103:return N+"box-"+d.replace("-grow","")+N+d+P+d.replace("grow","positive")+d;case 115:return N+d+P+d.replace("shrink","negative")+d;case 98:return N+d+P+d.replace("basis","preferred-size")+d}return N+d+P+d+d;case 964:return N+d+P+"flex-"+d+d;case 1023:if(99!==d.charCodeAt(8))break;return c=d.substring(d.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),N+"box-pack"+c+N+d+P+"flex-pack"+c+d;case 1005:return i.test(d)?d.replace(o,":"+N)+d.replace(o,":"+O)+d:d;case 1e3:switch(u=(c=d.substring(13).trim()).indexOf("-")+1,c.charCodeAt(0)+c.charCodeAt(u)){case 226:c=d.replace(_,"tb");break;case 232:c=d.replace(_,"tb-rl");break;case 220:c=d.replace(_,"lr");break;default:return d}return N+d+P+c+d;case 1017:if(-1===d.indexOf("sticky",9))return d;case 975:switch(u=(d=e).length-10,p=(c=(33===d.charCodeAt(u)?d.substring(0,u):d).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|c.charCodeAt(7))){case 203:if(c.charCodeAt(8)<111)break;case 115:d=d.replace(c,N+c)+";"+d;break;case 207:case 102:d=d.replace(c,N+(p>102?"inline-":"")+"box")+";"+d.replace(c,N+c)+";"+d.replace(c,P+c+"box")+";"+d}return d+";";case 938:if(d.charCodeAt(5)===H)switch(d.charCodeAt(6)){case 105:return c=d.replace("-items",""),N+d+N+"box-"+c+P+"flex-"+c+d;case 115:return N+d+P+"flex-item-"+d.replace(C,"")+d;default:return N+d+P+"flex-line-pack"+d.replace("align-content","").replace(C,"")+d}break;case 973:case 989:if(d.charCodeAt(3)!==H||122===d.charCodeAt(4))break;case 931:case 953:if(!0===S.test(e))return 115===(c=e.substring(e.indexOf(":")+1)).charCodeAt(0)?We(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):d.replace(c,N+c)+d.replace(c,O+c.replace("fill-",""))+d;break;case 962:if(d=N+d+(102===d.charCodeAt(5)?P+d:"")+d,n+r===211&&105===d.charCodeAt(13)&&d.indexOf("transform",10)>0)return d.substring(0,d.indexOf(";",27)+1).replace(a,"$1"+N+"$2")+d}return d}function Ve(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10),o=e.substring(n+1,e.length-1);return Te(2!==t?r:r.replace(T,"$1"),o,t)}function Be(e,t){var n=We(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(E," or ($1)").substring(4):"("+t+")"}function qe(e,t,n,r,o,i,a,s,l,c){for(var u,d=0,p=t;d<Ce;++d)switch(u=Ee[d].call(Ke,e,p,n,r,o,i,a,s,l,c)){case void 0:case!1:case!0:case null:break;default:p=u}if(p!==t)return p}function He(e,t,n,r){for(var o=t+1;o<n;++o)switch(r.charCodeAt(o)){case J:if(e===K&&r.charCodeAt(o-1)===K&&t+2!==o)return o+1;break;case U:if(e===J)return o+1}return o}function Qe(e){for(var t in e){var n=e[t];switch(t){case"keyframe":De=0|n;break;case"global":ye=0|n;break;case"cascade":be=0|n;break;case"compress":we=0|n;break;case"semicolon":xe=0|n;break;case"preserve":_e=0|n;break;case"prefix":Te=null,n?"function"!=typeof n?ve=1:(ve=2,Te=n):ve=0}}return Qe}function Ke(t,n){if(void 0!==this&&this.constructor===Ke)return e(t);var o=t,i=o.charCodeAt(0);i<33&&(i=(o=o.trim()).charCodeAt(0)),De>0&&(Le=o.replace(f,i===M?"":"-")),i=1,1===be?Me=o:je=o;var a,s=[Me];Ce>0&&void 0!==(a=qe(Ie,n,s,s,me,he,0,0,0,0))&&"string"==typeof a&&(n=a);var l=Fe(ke,s,n,0,0);return Ce>0&&void 0!==(a=qe(Se,l,s,s,me,he,l.length,0,0,0))&&"string"!=typeof(l=a)&&(i=0),Le="",Me="",je="",ge=0,me=1,he=1,we*i==0?l:l.replace(r,"").replace(b,"").replace(v,"$1").replace(y,"$1").replace(w," ")}return Ke.use=function e(t){switch(t){case void 0:case null:Ce=Ee.length=0;break;default:if("function"==typeof t)Ee[Ce++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else Re=0|!!t}return e},Ke.set=Qe,void 0!==t&&Qe(t),Ke}(null)},function(e,t,n){"use strict";var r=function(e,t){return e===t};t.a=function(e,t){var n;void 0===t&&(t=r);var o,i=[],a=!1,s=function(e,n){return t(e,i[n],n)};return function(){for(var t=arguments.length,r=new Array(t),l=0;l<t;l++)r[l]=arguments[l];return a&&n===this&&r.length===i.length&&r.every(s)?o:(o=e.apply(this,r),a=!0,n=this,i=r,o)}}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=n(96),o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i="[DEFAULT]",a=[],s=function(){function e(e,t,n){this.firebase_=n,this.isDeleted_=!1,this.services_={},this.name_=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled||!1,this.options_=r.deepCopy(e),this.INTERNAL={getUid:function(){return null},getToken:function(){return Promise.resolve(null)},addAuthTokenListener:function(e){a.push(e),setTimeout(function(){return e(null)},0)},removeAuthTokenListener:function(e){a=a.filter(function(t){return t!==e})}}}return Object.defineProperty(e.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this._automaticDataCollectionEnabled},set:function(e){this.checkDestroyed_(),this._automaticDataCollectionEnabled=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),e.prototype.delete=function(){var e=this;return new Promise(function(t){e.checkDestroyed_(),t()}).then(function(){e.firebase_.INTERNAL.removeApp(e.name_);var t=[];return Object.keys(e.services_).forEach(function(n){Object.keys(e.services_[n]).forEach(function(r){t.push(e.services_[n][r])})}),Promise.all(t.map(function(e){return e.INTERNAL.delete()}))}).then(function(){e.isDeleted_=!0,e.services_={}})},e.prototype._getService=function(e,t){if(void 0===t&&(t=i),this.checkDestroyed_(),this.services_[e]||(this.services_[e]={}),!this.services_[e][t]){var n=t!==i?t:void 0,r=this.firebase_.INTERNAL.factories[e](this,this.extendApp.bind(this),n);this.services_[e][t]=r}return this.services_[e][t]},e.prototype.extendApp=function(e){var t=this;r.deepExtend(this,e),e.INTERNAL&&e.INTERNAL.addAuthTokenListener&&(a.forEach(function(e){t.INTERNAL.addAuthTokenListener(e)}),a=[])},e.prototype.checkDestroyed_=function(){this.isDeleted_&&l("app-deleted",{name:this.name_})},e}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function l(e,t){throw c.create(e,t)}s.prototype.name&&s.prototype.options||s.prototype.delete||console.log("dc");var c=new r.ErrorFactory("app","Firebase",{"no-app":"No Firebase App '{$name}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$name}","duplicate-app":"Firebase App named '{$name}' already exists","app-deleted":"Firebase App named '{$name}' already deleted","duplicate-service":"Firebase service named '{$name}' already registered","sa-not-supported":"Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain","invalid-app-argument":"firebase.{$name}() takes either no argument or a Firebase App instance."}),u=!1;try{u="[object process]"===Object.prototype.toString.call(e.process)}catch(e){}u&&console.warn('\nWarning: This is a browser-targeted Firebase bundle but it appears it is being\nrun in a Node environment.  If running in a Node environment, make sure you\nare using the bundle specified by the "main" field in package.json.\n\nIf you are using Webpack, you can specify "main" as the first item in\n"resolve.mainFields":\nhttps://webpack.js.org/configuration/resolve/#resolvemainfields\n\nIf using Rollup, use the rollup-plugin-node-resolve plugin and set "module"\nto false and "main" to true:\nhttps://github.com/rollup/rollup-plugin-node-resolve\n');var d=function e(){var t={},n={},a={},c={__esModule:!0,initializeApp:function(e,n){if(void 0===n&&(n={}),"object"!=typeof n||null===n){var r=n;n={name:r}}var a=n;void 0===a.name&&(a.name=i);var u=a.name;"string"==typeof u&&u||l("bad-app-name",{name:u+""}),o(t,u)&&l("duplicate-app",{name:u});var d=new s(e,a,c);return t[u]=d,p(d,"create"),d},app:u,apps:null,Promise:Promise,SDK_VERSION:"5.8.6",INTERNAL:{registerService:function(e,t,o,i,p){n[e]&&l("duplicate-service",{name:e}),n[e]=t,i&&(a[e]=i,d().forEach(function(e){i("create",e)}));var f=function(t){return void 0===t&&(t=u()),"function"!=typeof t[e]&&l("invalid-app-argument",{name:e}),t[e]()};return void 0!==o&&r.deepExtend(f,o),c[e]=f,s.prototype[e]=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return this._getService.bind(this,e).apply(this,p?t:[])},f},createFirebaseNamespace:e,extendNamespace:function(e){r.deepExtend(c,e)},createSubscribe:r.createSubscribe,ErrorFactory:r.ErrorFactory,removeApp:function(e){p(t[e],"delete"),delete t[e]},factories:n,useAsService:f,Promise:Promise,deepExtend:r.deepExtend}};function u(e){return o(t,e=e||i)||l("no-app",{name:e}),t[e]}function d(){return Object.keys(t).map(function(e){return t[e]})}function p(e,t){Object.keys(n).forEach(function(n){var r=f(e,n);null!==r&&a[r]&&a[r](t,e)})}function f(e,t){if("serverAuth"===t)return null;var n=t;return e.options,n}return r.patchProperty(c,"default",c),Object.defineProperty(c,"apps",{get:d}),r.patchProperty(u,"App",s),c}();t.firebase=d,t.default=d}).call(this,n(19))},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var r=n(0),o=n.n(r),i=n(2),a=n.n(i);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),c(this,u(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,r["Component"]),n=t,(i=[{key:"componentDidMount",value:function(){var e=this.props,t=e.sketch,n=e.p5Props,r=e.onSetAppState;this.canvas=new window.p5(t,this.wrapper),this.canvas.wrapper=this.wrapper,this.canvas.props=n,this.canvas.onSetAppState=r}},{key:"shouldComponentUpdate",value:function(e){return this.canvas.props=e.p5Props,!1}},{key:"componentWillUnmount",value:function(){this.canvas.remove()}},{key:"render",value:function(){var e=this;return o.a.createElement("div",{id:"canvas-container",className:"d-flex justify-content-start align-items-start w-100 h-100 bg-dark position-relative",ref:function(t){e.wrapper=t}})}}])&&l(n.prototype,i),a&&l(n,a),t}();p.propTypes={sketch:a.a.func.isRequired,p5Props:a.a.object.isRequired,onSetAppState:a.a.func.isRequired}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(2),a=n.n(i),s=n(4),l=n(7),c=n(8),u=n(1),d=n.n(u),p=n(9),f=n.n(p),h=n(3),m={tag:h.c,type:d.a.string,size:d.a.string,color:d.a.string,className:d.a.string,cssModule:d.a.object,children:d.a.string},g=function(e){var t=e.className,n=e.cssModule,r=e.type,i=e.size,a=e.color,s=e.children,u=e.tag,d=Object(c.a)(e,["className","cssModule","type","size","color","children","tag"]),p=Object(h.b)(f()(t,!!i&&"spinner-"+r+"-"+i,"spinner-"+r,!!a&&"text-"+a),n);return o.a.createElement(u,Object(l.a)({role:"status"},d,{className:p}),s&&o.a.createElement("span",{className:Object(h.b)("sr-only",n)},s))};g.propTypes=m,g.defaultProps={tag:"div",type:"border",children:"Loading..."};var b=g;function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _(e,t){return(_=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  padding: 5px 10px;\n  position: absolute;\n  ","\n  cursor: pointer;\n  top: 20px;\n  right: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-box-shadow: 5px -5px 0px 0px rgba(0,0,0,0.7);\n  -moz-box-shadow: 5px -5px 0px 0px rgba(0,0,0,0.7);\n  box-shadow: 5px -5px 0px 0px rgba(0,0,0,0.7);\n  transition: 0.2s;\n  :hover {\n    opacity: 0.9;\n  }\n  :active {\n    opacity: 0.8;\n    transform: scale(0.9);\n  }\n"]);return k=function(){return e},e}var E=s.a.div(k(),""),C=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),w(this,x(t).apply(this,arguments))}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}(t,r["Component"]),n=t,(i=[{key:"render",value:function(){var e=this.props,t=e.changeLanguage,n=e.current_lang;return o.a.createElement(E,{id:"language",className:"bg-warning",onClick:t},o.a.createElement("span",{className:"ru"===n?"font-weight-bold":""},"RU"),"/",o.a.createElement("span",{className:"en"===n?"font-weight-bold":""},"EN"))}}])&&y(n.prototype,i),a&&y(n,a),t}();function T(){var e=N(["\n  overflow: auto;\n  -ms-overflow-style: none;\n  overflow: -moz-scrollbars-none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n"]);return T=function(){return e},e}function S(){var e=N(["\n  min-width: 500px;\n  height: 500px;\n  -webkit-box-shadow: 10px -10px 0px 0px rgba(0,0,0,0.7);\n  -moz-box-shadow: 10px -10px 0px 0px rgba(0,0,0,0.7);\n  box-shadow: 10px -10px 0px 0px rgba(0,0,0,0.7);\n"]);return S=function(){return e},e}function I(){var e=N(["\n  background: rgba(0,0,0,0.7);\n  position: absolute;\n  left: 20%;\n  width: 80%;\n  height: 100%;\n  transform: translateY(",");\n  opacity: ",";\n  ","\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  z-index: 2;\n"]);return I=function(){return e},e}function N(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var O=s.a.div(I(),function(e){return e.visible?"0":"-100%"},function(e){return e.visible?"1":"0"},""),P=s.a.div(S()),A=s.a.div(T()),R=function(e){var t=e.lang,n=e.changeLanguage,r=e.current_lang,i=e.user,a=e.results,s=e.Result,l=e.newGame,c=e.isLoading;return o.a.createElement(O,{id:"filter",visible:!l},o.a.createElement(P,{id:"results_container",className:"bg-warning pt-4 pb-3 px-3 d-flex flex-column"},o.a.createElement("h3",{className:"text-center text-uppercase mb-3 font-weight-bold"},"".concat(t.last_results,":")),o.a.createElement(A,{id:"results",className:"flex-fill bg-dark text-light py-3 text-center px-4"},c?o.a.createElement("div",{className:"d-flex justify-content-center align-items-center h-75"},o.a.createElement(b,{style:{width:"3rem",height:"3rem"}})):o.a.createElement("div",null,o.a.createElement("p",{className:"mt-2 mb-3"},"".concat(i.email)),o.a.createElement("ul",{className:"m-0 p-0",style:{listStylePosition:"inside"}},a.map(function(e){return o.a.createElement(s,{key:e.id,result:e})})),o.a.createElement("div",null,"...")))),o.a.createElement(C,{current_lang:r,changeLanguage:n}))};R.propTypes={newGame:a.a.bool.isRequired,isLoading:a.a.bool.isRequired,user:a.a.shape({email:a.a.string.isRequired}),results:a.a.arrayOf(a.a.object),current_lang:a.a.string.isRequired,lang:a.a.objectOf(a.a.string).isRequired,changeLanguage:a.a.func.isRequired,Result:a.a.func.isRequired};t.a=R},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),l=null,c=0,u=[],d=n(44);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(v(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertAt.before,n);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return b(t,e.attrs),h(e,t),t}function b(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=l||(l=g(t)),r=x.bind(null,n,a,!1),o=x.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&p(f(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var y,w=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function x(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,s,l,c,u,d){switch(n){case 1:if(0===u&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){"use strict";t.a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1}},function(e,t,n){(function(t){var n="[object AsyncFunction]",r="[object Function]",o="[object GeneratorFunction]",i="[object Null]",a="[object Proxy]",s="[object Undefined]",l="object"==typeof t&&t&&t.Object===Object&&t,c="object"==typeof self&&self&&self.Object===Object&&self,u=l||c||Function("return this")(),d=Object.prototype,p=d.hasOwnProperty,f=d.toString,h=u.Symbol,m=h?h.toStringTag:void 0;function g(e){return null==e?void 0===e?s:i:m&&m in Object(e)?function(e){var t=p.call(e,m),n=e[m];try{e[m]=void 0;var r=!0}catch(e){}var o=f.call(e);r&&(t?e[m]=n:delete e[m]);return o}(e):function(e){return f.call(e)}(e)}e.exports=function(e){if(!function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}(e))return!1;var t=g(e);return t==r||t==o||t==n||t==a}}).call(this,n(19))},function(e,t,n){"use strict";var r=n(0),o=n(2),i=n.n(o);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=new Array(i),c=0;c<i;c++)s[c]=arguments[c];return r=this,o=(e=l(t)).call.apply(e,[this].concat(s)),n=!o||"object"!==a(o)&&"function"!=typeof o?u(r):o,d(u(u(n)),"changeLanguage",function(){var e=n.state.current_lang;e="ru"===e?"en":"ru",n.props.cookies.set("language",e,{path:"/"}),n.setState({current_lang:e})}),d(u(u(n)),"goHome",function(){var e=window.location.href;window.location.href=e.split("games")[0]}),d(u(u(n)),"newGameButtonClick",function(){var e=n.state.startNewGame;n.setState({newGame:!0},e)}),d(u(u(n)),"onSetAppState",function(e,t){return n.setState(e,t)}),n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,r["Component"]),n=t,(o=[{key:"componentDidMount",value:function(){var e=this,t=this.props.firebase;this.firebaseListener=t.auth.onAuthStateChanged(function(t){return e.setState({user:t,isLoading:!1})})}}])&&s(n.prototype,o),i&&s(n,i),t}();p.propTypes={firebase:i.a.object.isRequired},t.a=p},function(e,t,n){"use strict";var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,o=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}(function(e){return r.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91});t.a=o},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(0),o=n.n(r),i=n(2),a=n.n(i),s=n(30);function l(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  background: rgb(8, 0, 47);\n  height: 100%;\n  flex: 0 0 20%;\n  max-width: 20%;\n  overflow: auto;\n  -ms-overflow-style: none;\n  overflow: -moz-scrollbars-none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n"]);return l=function(){return e},e}var c=n(4).a.div(l()),u=function(e){var t=e.lang,n=e.current_level,r=e.radius,i=e.newGameButtonClick,a=e.goHome;return o.a.createElement(c,{id:"menu",className:"px-3 py-5"},o.a.createElement("div",{className:"text-light mb-5"},o.a.createElement("h5",{className:"font-weight-bold text-center"},t.header),o.a.createElement("p",{className:"small",dangerouslySetInnerHTML:{__html:t.description}})),o.a.createElement("div",{className:"text-light mb-5"},o.a.createElement("h5",{className:"font-weight-bold text-center"},"".concat(t.current_level," – ").concat(n.level,":")),o.a.createElement("div",null,"".concat(t.balls,": ").concat(n.balls)),o.a.createElement("div",null,"".concat(t.speed,": ").concat(n.speed)),o.a.createElement("div",null,"".concat(t.red_balls,": ").concat(n.red_balls)),o.a.createElement("div",null,"".concat(t.balls_radius,": ").concat(r))),o.a.createElement(s.a,{className:"btn btn-warning w-100 mb-1 text-uppercase",id:"newGameButton",onClick:i},t.new_game),o.a.createElement(s.a,{onClick:a,className:"btn btn-warning w-100 text-uppercase"},t.home))};u.propTypes={current_level:a.a.objectOf(a.a.number).isRequired,radius:a.a.number.isRequired,lang:a.a.object.isRequired,newGameButtonClick:a.a.func.isRequired,goHome:a.a.func.isRequired},t.b=u},function(e,t,n){"use strict";var r=n(7),o=n(8),i=n(13),a=n(5),s=n(0),l=n.n(s),c=n(1),u=n.n(c),d=n(9),p=n.n(d),f=n(3),h={active:u.a.bool,"aria-label":u.a.string,block:u.a.bool,color:u.a.string,disabled:u.a.bool,outline:u.a.bool,tag:f.c,innerRef:u.a.oneOfType([u.a.object,u.a.func,u.a.string]),onClick:u.a.func,size:u.a.string,children:u.a.node,className:u.a.string,cssModule:u.a.object,close:u.a.bool},m=function(e){function t(t){var n;return(n=e.call(this,t)||this).onClick=n.onClick.bind(Object(a.a)(Object(a.a)(n))),n}Object(i.a)(t,e);var n=t.prototype;return n.onClick=function(e){this.props.disabled?e.preventDefault():this.props.onClick&&this.props.onClick(e)},n.render=function(){var e=this.props,t=e.active,n=e["aria-label"],i=e.block,a=e.className,s=e.close,c=e.cssModule,u=e.color,d=e.outline,h=e.size,m=e.tag,g=e.innerRef,b=Object(o.a)(e,["active","aria-label","block","className","close","cssModule","color","outline","size","tag","innerRef"]);s&&void 0===b.children&&(b.children=l.a.createElement("span",{"aria-hidden":!0},"×"));var v="btn"+(d?"-outline":"")+"-"+u,y=Object(f.b)(p()(a,{close:s},s||"btn",s||v,!!h&&"btn-"+h,!!i&&"btn-block",{active:t,disabled:this.props.disabled}),c);b.href&&"button"===m&&(m="a");var w=s?"Close":null;return l.a.createElement(m,Object(r.a)({type:"button"===m&&b.onClick?"button":void 0},b,{className:y,ref:g,onClick:this.onClick,"aria-label":n||w}))},t}(l.a.Component);m.propTypes=h,m.defaultProps={color:"secondary",tag:"button"},t.a=m},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,c=[],u=!1,d=-1;function p(){u&&l&&(u=!1,l.length?c=l.concat(c):d=-1,c.length&&f())}function f(){if(!u){var e=s(p);u=!0;for(var t=c.length;t;){for(l=c,c=[];++d<t;)l&&l[d].run();d=-1,t=c.length}l=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||u||s(f)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";
/** @license React v16.8.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(14),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,s=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,u=o?Symbol.for("react.provider"):60109,d=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,f=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,g=o?Symbol.for("react.lazy"):60116,b="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,s){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,s],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||y}function _(){}function k(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||y}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=x.prototype;var E=k.prototype=new _;E.constructor=k,r(E,x.prototype),E.isPureReactComponent=!0;var C={current:null},T={current:null},S=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};function N(e,t,n){var r=void 0,o={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!I.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:s,props:o,_owner:T.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var P=/\/+/g,A=[];function R(e,t,n,r){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function D(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function L(e,t,n){return null==e?0:function e(t,n,r,o){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var l=!1;if(null===t)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+j(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var u=n+j(s=t[c],c);l+=e(s,u,r,o)}else if(u=null===t||"object"!=typeof t?null:"function"==typeof(u=b&&t[b]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),c=0;!(s=t.next()).done;)l+=e(s=s.value,u=n+j(s,c++),r,o);else"object"===s&&v("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,function(e){return e}):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(P,"$&/")+"/"),L(e,F,t=R(t,i,r,o)),D(t)}function z(){var e=C.current;return null===e&&v("307"),e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;L(e,M,t=R(null,null,t,n)),D(t)},count:function(e){return L(e,function(){return null},null)},toArray:function(e){var t=[];return U(e,t,null,function(e){return e}),t},only:function(e){return O(e)||v("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:f,render:e}},lazy:function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:s,StrictMode:l,Suspense:h,createElement:N,cloneElement:function(e,t,n){null==e&&v("267",e);var o=void 0,a=r({},e.props),s=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=T.current),void 0!==t.key&&(s=""+t.key);var u=void 0;for(o in e.type&&e.type.defaultProps&&(u=e.type.defaultProps),t)S.call(t,o)&&!I.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==u?u[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){u=Array(o);for(var d=0;d<o;d++)u[d]=arguments[d+2];a.children=u}return{$$typeof:i,type:e.type,key:s,ref:l,props:a,_owner:c}},createFactory:function(e){var t=N.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.8.1",unstable_ConcurrentMode:p,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:C,ReactCurrentOwner:T,assign:r}},V={default:W},B=V&&W||V;e.exports=B.default||B},function(e,t,n){"use strict";
/** @license React v16.8.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(14),i=n(34);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,s){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,s],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var s=!1,l=null,c=!1,u=null,d={onError:function(e){s=!0,l=e}};function p(e,t,n,r,o,i,a,c,u){s=!1,l=null,function(e,t,n,r,o,i,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(d,arguments)}var f=null,h={};function m(){if(f)for(var e in h){var t=h[e],n=f.indexOf(e);if(-1<n||a("96",e),!b[n])for(var r in t.extractEvents||a("97",e),b[n]=t,n=t.eventTypes){var o=void 0,i=n[r],s=t,l=r;v.hasOwnProperty(l)&&a("99",l),v[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&g(c[o],s,l);o=!0}else i.registrationName?(g(i.registrationName,s,l),o=!0):o=!1;o||a("98",r,e)}}}function g(e,t,n){y[e]&&a("100",e),y[e]=t,w[e]=t.eventTypes[n].dependencies}var b=[],v={},y={},w={},x=null,_=null,k=null;function E(e,t,n){var r=e.type||"unknown-event";e.currentTarget=k(n),function(e,t,n,r,o,i,d,f,h){if(p.apply(this,arguments),s){if(s){var m=l;s=!1,l=null}else a("198"),m=void 0;c||(c=!0,u=m)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var S=null;function I(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)E(e,t[r],n[r]);else t&&E(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var N={injectEventPluginOrder:function(e){f&&a("101"),f=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function O(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function P(e){if(null!==e&&(S=C(S,e)),e=S,S=null,e&&(T(e,I),S&&a("95"),c))throw e=u,c=!1,u=null,e}var A=Math.random().toString(36).slice(2),R="__reactInternalInstance$"+A,D="__reactEventHandlers$"+A;function L(e){if(e[R])return e[R];for(;!e[R];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[R]).tag||6===e.tag?e:null}function j(e){return!(e=e[R])||5!==e.tag&&6!==e.tag?null:e}function M(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function F(e){return e[D]||null}function U(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function z(e,t,n){(t=O(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=U(t);for(t=n.length;0<t--;)z(n[t],"captured",e);for(t=0;t<n.length;t++)z(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=O(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function q(e){T(e,W)}var H=!("undefined"==typeof window||!window.document||!window.document.createElement);function Q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var K={animationend:Q("Animation","AnimationEnd"),animationiteration:Q("Animation","AnimationIteration"),animationstart:Q("Animation","AnimationStart"),transitionend:Q("Transition","TransitionEnd")},G={},$={};function Y(e){if(G[e])return G[e];if(!K[e])return e;var t,n=K[e];for(t in n)if(n.hasOwnProperty(t)&&t in $)return G[e]=n[t];return e}H&&($=document.createElement("div").style,"AnimationEvent"in window||(delete K.animationend.animation,delete K.animationiteration.animation,delete K.animationstart.animation),"TransitionEvent"in window||delete K.transitionend.transition);var X=Y("animationend"),J=Y("animationiteration"),Z=Y("animationstart"),ee=Y("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function se(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:se,this.isPropagationStopped=se,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ue(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=ce,e.release=ue}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:se,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=se,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,de(n),n},de(le);var pe=le.extend({data:null}),fe=le.extend({data:null}),he=[9,13,27,32],me=H&&"CompositionEvent"in window,ge=null;H&&"documentMode"in document&&(ge=document.documentMode);var be=H&&"TextEvent"in window&&!ge,ve=H&&(!me||ge&&8<ge&&11>=ge),ye=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},xe=!1;function _e(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ee=!1;var Ce={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(me)e:{switch(e){case"compositionstart":o=we.compositionStart;break e;case"compositionend":o=we.compositionEnd;break e;case"compositionupdate":o=we.compositionUpdate;break e}o=void 0}else Ee?_e(e,n)&&(o=we.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(ve&&"ko"!==n.locale&&(Ee||o!==we.compositionStart?o===we.compositionEnd&&Ee&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,Ee=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=ke(n))&&(o.data=i),q(o),i=o):i=null,(e=be?function(e,t){switch(e){case"compositionend":return ke(t);case"keypress":return 32!==t.which?null:(xe=!0,ye);case"textInput":return(e=t.data)===ye&&xe?null:e;default:return null}}(e,n):function(e,t){if(Ee)return"compositionend"===e||!me&&_e(e,t)?(e=ie(),oe=re=ne=null,Ee=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ve&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=fe.getPooled(we.beforeInput,t,n,r)).data=e,q(t)):t=null,null===i?t:null===t?i:[i,t]}},Te=null,Se=null,Ie=null;function Ne(e){if(e=_(e)){"function"!=typeof Te&&a("280");var t=x(e.stateNode);Te(e.stateNode,e.type,t)}}function Oe(e){Se?Ie?Ie.push(e):Ie=[e]:Se=e}function Pe(){if(Se){var e=Se,t=Ie;if(Ie=Se=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function Ae(e,t){return e(t)}function Re(e,t,n){return e(t,n)}function De(){}var Le=!1;function je(e,t){if(Le)return e(t);Le=!0;try{return Ae(e,t)}finally{Le=!1,(null!==Se||null!==Ie)&&(De(),Pe())}}var Me={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Fe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Me[e.type]:"textarea"===t}function Ue(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ze(e){if(!H)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var qe=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;qe.hasOwnProperty("ReactCurrentDispatcher")||(qe.ReactCurrentDispatcher={current:null});var He=/^(.*)[\\\/]/,Qe="function"==typeof Symbol&&Symbol.for,Ke=Qe?Symbol.for("react.element"):60103,Ge=Qe?Symbol.for("react.portal"):60106,$e=Qe?Symbol.for("react.fragment"):60107,Ye=Qe?Symbol.for("react.strict_mode"):60108,Xe=Qe?Symbol.for("react.profiler"):60114,Je=Qe?Symbol.for("react.provider"):60109,Ze=Qe?Symbol.for("react.context"):60110,et=Qe?Symbol.for("react.concurrent_mode"):60111,tt=Qe?Symbol.for("react.forward_ref"):60112,nt=Qe?Symbol.for("react.suspense"):60113,rt=Qe?Symbol.for("react.memo"):60115,ot=Qe?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function st(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case $e:return"Fragment";case Ge:return"Portal";case Xe:return"Profiler";case Ye:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return st(e.type);case ot:if(e=1===e._status?e._result:null)return st(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=st(e.type);n=null,r&&(n=st(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(He,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ut=Object.prototype.hasOwnProperty,dt={},pt={};function ft(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new ft(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new ft(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new ft(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new ft(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new ft(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new ft(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new ft(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new ft(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new ft(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function bt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ut.call(pt,e)||!ut.call(dt,e)&&(ct.test(e)?pt[e]=!0:(dt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function vt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function yt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function wt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=vt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function _t(e,t){xt(e,t);var n=vt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Et(e,t.type,n):t.hasOwnProperty("defaultValue")&&Et(e,t.type,vt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function kt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Et(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new ft(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new ft(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,gt);ht[t]=new ft(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new ft("tabIndex",1,!1,"tabindex",null);var Ct={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Tt(e,t,n){return(e=le.getPooled(Ct.change,e,t,n)).type="change",Oe(n),q(e),e}var St=null,It=null;function Nt(e){P(e)}function Ot(e){if(Be(M(e)))return e}function Pt(e,t){if("change"===e)return t}var At=!1;function Rt(){St&&(St.detachEvent("onpropertychange",Dt),It=St=null)}function Dt(e){"value"===e.propertyName&&Ot(It)&&je(Nt,e=Tt(It,e,Ue(e)))}function Lt(e,t,n){"focus"===e?(Rt(),It=n,(St=t).attachEvent("onpropertychange",Dt)):"blur"===e&&Rt()}function jt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Ot(It)}function Mt(e,t){if("click"===e)return Ot(t)}function Ft(e,t){if("input"===e||"change"===e)return Ot(t)}H&&(At=ze("input")&&(!document.documentMode||9<document.documentMode));var Ut={eventTypes:Ct,_isInputEventSupported:At,extractEvents:function(e,t,n,r){var o=t?M(t):window,i=void 0,a=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?i=Pt:Fe(o)?At?i=Ft:(i=jt,a=Lt):(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Mt),i&&(i=i(e,t)))return Tt(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Et(o,"number",o.value)}},zt=le.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Vt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Bt(){return Vt}var qt=0,Ht=0,Qt=!1,Kt=!1,Gt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=qt;return qt=e.screenX,Qt?"mousemove"===e.type?e.screenX-t:0:(Qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Ht;return Ht=e.screenY,Kt?"mousemove"===e.type?e.screenY-t:0:(Kt=!0,0)}}),$t=Gt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Yt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?L(t):null):i=null,i===t)return null;var a=void 0,s=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Gt,s=Yt.mouseLeave,l=Yt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=$t,s=Yt.pointerLeave,l=Yt.pointerEnter,c="pointer");var u=null==i?o:M(i);if(o=null==t?o:M(t),(e=a.getPooled(s,i,n,r)).type=c+"leave",e.target=u,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=u,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=U(a))c++;for(a=0,l=o;l;l=U(l))a++;for(;0<c-a;)t=U(t),c--;for(;0<a-c;)o=U(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=U(t),o=U(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=U(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=U(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=i.length;0<r--;)V(i[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var s=o.child;s;){if(s===n)return nn(o),e;if(s===r)return nn(o),t;s=s.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{s=!1;for(var l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}s||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),sn=zt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},un={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn=zt.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?un[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Gt.extend({dataTransfer:null}),fn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Gt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),gn=[["abort","abort"],[X,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],bn={},vn={};function yn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},bn[e]=t,vn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){yn(e,!0)}),gn.forEach(function(e){yn(e,!1)});var wn={eventTypes:bn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=vn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=vn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=dn;break;case"blur":case"focus":e=sn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Gt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=fn;break;case X:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=zt;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=$t;break;default:e=le}return q(t=e.getPooled(o,t,n,r)),t}},xn=wn.isInteractiveTopLevelEventType,_n=[];function kn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=L(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Ue(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,s=0;s<b.length;s++){var l=b[s];l&&(l=l.extractEvents(r,t,i,o))&&(a=C(a,l))}P(a)}}var En=!0;function Cn(e,t){if(!t)return null;var n=(xn(e)?Sn:In).bind(null,e);t.addEventListener(e,n,!1)}function Tn(e,t){if(!t)return null;var n=(xn(e)?Sn:In).bind(null,e);t.addEventListener(e,n,!0)}function Sn(e,t){Re(In,e,t)}function In(e,t){if(En){var n=Ue(t);if(null===(n=L(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),_n.length){var r=_n.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{je(kn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>_n.length&&_n.push(e)}}}var Nn={},On=0,Pn="_reactListenersID"+(""+Math.random()).slice(2);function An(e){return Object.prototype.hasOwnProperty.call(e,Pn)||(e[Pn]=On++,Nn[e[Pn]]={}),Nn[e[Pn]]}function Rn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Dn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ln(e,t){var n,r=Dn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Dn(r)}}function jn(){for(var e=window,t=Rn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Rn(e.document)}return t}function Mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Fn=H&&"documentMode"in document&&11>=document.documentMode,Un={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},zn=null,Wn=null,Vn=null,Bn=!1;function qn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Bn||null==zn||zn!==Rn(n)?null:("selectionStart"in(n=zn)&&Mn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vn&&en(Vn,n)?null:(Vn=n,(e=le.getPooled(Un.select,Wn,e,t)).type="select",e.target=zn,q(e),e))}var Hn={eventTypes:Un,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=An(i),o=w.onSelect;for(var a=0;a<o.length;a++){var s=o[a];if(!i.hasOwnProperty(s)||!i[s]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?M(t):window,e){case"focus":(Fe(i)||"true"===i.contentEditable)&&(zn=i,Wn=t,Vn=null);break;case"blur":Vn=Wn=zn=null;break;case"mousedown":Bn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Bn=!1,qn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return qn(n,r)}return null}};function Qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+vt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Gn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function $n(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:vt(n)}}function Yn(e,t){var n=vt(t.value),r=vt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Xn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=F,_=j,k=M,N.injectEventPluginsByName({SimpleEventPlugin:wn,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:Ut,SelectEventPlugin:Hn,BeforeInputEventPlugin:Ce});var Jn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Zn(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function er(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Zn(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var tr,nr=void 0,rr=(tr=function(e,t){if(e.namespaceURI!==Jn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return tr(e,t)})}:tr);function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function sr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ir.hasOwnProperty(e)&&ir[e]?(""+t).trim():t+"px"}function lr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=sr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ir).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var cr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ur(e,t){t&&(cr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function dr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Tn("scroll",e);break;case"focus":case"blur":Tn("focus",e),Tn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":ze(o)&&Tn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Cn(o,e)}n[o]=!0}}}function fr(){}var hr=null,mr=null;function gr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var vr="function"==typeof setTimeout?setTimeout:void 0,yr="function"==typeof clearTimeout?clearTimeout:void 0,wr=i.unstable_scheduleCallback,xr=i.unstable_cancelCallback;function _r(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function kr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Er=[],Cr=-1;function Tr(e){0>Cr||(e.current=Er[Cr],Er[Cr]=null,Cr--)}function Sr(e,t){Er[++Cr]=e.current,e.current=t}var Ir={},Nr={current:Ir},Or={current:!1},Pr=Ir;function Ar(e,t){var n=e.type.contextTypes;if(!n)return Ir;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Rr(e){return null!=(e=e.childContextTypes)}function Dr(e){Tr(Or),Tr(Nr)}function Lr(e){Tr(Or),Tr(Nr)}function jr(e,t,n){Nr.current!==Ir&&a("168"),Sr(Nr,t),Sr(Or,n)}function Mr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",st(t)||"Unknown",i);return o({},n,r)}function Fr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Ir,Pr=Nr.current,Sr(Nr,t),Sr(Or,Or.current),!0}function Ur(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Mr(e,t,Pr),r.__reactInternalMemoizedMergedChildContext=t,Tr(Or),Tr(Nr),Sr(Nr,t)):Tr(Or),Sr(Or,n)}var zr=null,Wr=null;function Vr(e){return function(t){try{return e(t)}catch(e){}}}function Br(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function qr(e,t,n,r){return new Br(e,t,n,r)}function Hr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Qr(e,t){var n=e.alternate;return null===n?((n=qr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Kr(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)Hr(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case $e:return Gr(n.children,o,i,t);case et:return $r(n,3|o,i,t);case Ye:return $r(n,2|o,i,t);case Xe:return(e=qr(12,n,t,4|o)).elementType=Xe,e.type=Xe,e.expirationTime=i,e;case nt:return(e=qr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:s=10;break e;case Ze:s=9;break e;case tt:s=11;break e;case rt:s=14;break e;case ot:s=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=qr(s,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Gr(e,t,n,r){return(e=qr(7,e,r,t)).expirationTime=n,e}function $r(e,t,n,r){return e=qr(8,e,r,t),t=0==(1&t)?Ye:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Yr(e,t,n){return(e=qr(6,e,null,t)).expirationTime=n,e}function Xr(e,t,n){return(t=qr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Jr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),to(t,e)}function Zr(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),to(t,e)}function eo(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function to(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function no(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ro=(new r.Component).refs;function oo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var io={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ys(),o=$i(r=Ha(r,e));o.payload=t,null!=n&&(o.callback=n),za(),Xi(e,o),Ga(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ys(),o=$i(r=Ha(r,e));o.tag=Bi,o.payload=t,null!=n&&(o.callback=n),za(),Xi(e,o),Ga(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ys(),r=$i(n=Ha(n,e));r.tag=qi,null!=t&&(r.callback=t),za(),Xi(e,r),Ga(e,n)}};function ao(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function so(e,t,n){var r=!1,o=Ir,i=t.contextType;return"object"==typeof i&&null!==i?i=Wi(i):(o=Rr(t)?Pr:Nr.current,i=(r=null!=(r=t.contextTypes))?Ar(e,o):Ir),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=io,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function lo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&io.enqueueReplaceState(t,t.state,null)}function co(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ro;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Wi(i):(i=Rr(t)?Pr:Nr.current,o.context=Ar(e,i)),null!==(i=e.updateQueue)&&(ta(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(oo(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&io.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(ta(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var uo=Array.isArray;function po(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ro&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function fo(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ho(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Qr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Yr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=po(e,t,n),r.return=e,r):((r=Kr(n.type,n.key,n.props,null,e.mode,r)).ref=po(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=Gr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Yr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ke:return(n=Kr(t.type,t.key,t.props,null,e.mode,n)).ref=po(e,null,t),n.return=e,n;case Ge:return(t=Xr(t,e.mode,n)).return=e,t}if(uo(t)||at(t))return(t=Gr(t,e.mode,n,null)).return=e,t;fo(e,t)}return null}function f(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ke:return n.key===o?n.type===$e?d(e,t,n.props.children,r,o):c(e,t,n,r):null;case Ge:return n.key===o?u(e,t,n,r):null}if(uo(n)||at(n))return null!==o?null:d(e,t,n,r,null);fo(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ke:return e=e.get(null===r.key?n:r.key)||null,r.type===$e?d(t,e,r.props.children,o,r.key):c(t,e,r,o);case Ge:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(uo(r)||at(r))return d(t,e=e.get(n)||null,r,o,null);fo(t,r)}return null}function m(o,a,s,l){for(var c=null,u=null,d=a,m=a=0,g=null;null!==d&&m<s.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var b=f(o,d,s[m],l);if(null===b){null===d&&(d=g);break}e&&d&&null===b.alternate&&t(o,d),a=i(b,a,m),null===u?c=b:u.sibling=b,u=b,d=g}if(m===s.length)return n(o,d),c;if(null===d){for(;m<s.length;m++)(d=p(o,s[m],l))&&(a=i(d,a,m),null===u?c=d:u.sibling=d,u=d);return c}for(d=r(o,d);m<s.length;m++)(g=h(d,o,m,s[m],l))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),a=i(g,a,m),null===u?c=g:u.sibling=g,u=g);return e&&d.forEach(function(e){return t(o,e)}),c}function g(o,s,l,c){var u=at(l);"function"!=typeof u&&a("150"),null==(l=u.call(l))&&a("151");for(var d=u=null,m=s,g=s=0,b=null,v=l.next();null!==m&&!v.done;g++,v=l.next()){m.index>g?(b=m,m=null):b=m.sibling;var y=f(o,m,v.value,c);if(null===y){m||(m=b);break}e&&m&&null===y.alternate&&t(o,m),s=i(y,s,g),null===d?u=y:d.sibling=y,d=y,m=b}if(v.done)return n(o,m),u;if(null===m){for(;!v.done;g++,v=l.next())null!==(v=p(o,v.value,c))&&(s=i(v,s,g),null===d?u=v:d.sibling=v,d=v);return u}for(m=r(o,m);!v.done;g++,v=l.next())null!==(v=h(m,o,g,v.value,c))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),s=i(v,s,g),null===d?u=v:d.sibling=v,d=v);return e&&m.forEach(function(e){return t(o,e)}),u}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===$e&&null===i.key;c&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case Ke:e:{for(u=i.key,c=r;null!==c;){if(c.key===u){if(7===c.tag?i.type===$e:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===$e?i.props.children:i.props)).ref=po(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===$e?((r=Gr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Kr(i.type,i.key,i.props,null,e.mode,l)).ref=po(e,r,i),l.return=e,e=l)}return s(e);case Ge:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xr(i,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Yr(i,e.mode,l)).return=e,e=r),s(e);if(uo(i))return m(e,r,i,l);if(at(i))return g(e,r,i,l);if(u&&fo(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:a("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var mo=ho(!0),go=ho(!1),bo={},vo={current:bo},yo={current:bo},wo={current:bo};function xo(e){return e===bo&&a("174"),e}function _o(e,t){Sr(wo,t),Sr(yo,e),Sr(vo,bo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:er(null,"");break;default:t=er(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Tr(vo),Sr(vo,t)}function ko(e){Tr(vo),Tr(yo),Tr(wo)}function Eo(e){xo(wo.current);var t=xo(vo.current),n=er(t,e.type);t!==n&&(Sr(yo,e),Sr(vo,n))}function Co(e){yo.current===e&&(Tr(vo),Tr(yo))}var To=0,So=2,Io=4,No=8,Oo=16,Po=32,Ao=64,Ro=128,Do=qe.ReactCurrentDispatcher,Lo=0,jo=null,Mo=null,Fo=null,Uo=null,zo=null,Wo=null,Vo=0,Bo=null,qo=0,Ho=!1,Qo=null,Ko=0;function Go(){a("307")}function $o(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Yo(e,t,n,r,o,i){if(Lo=i,jo=t,Fo=null!==e?e.memoizedState:null,Do.current=null===Fo?ci:ui,t=n(r,o),Ho){do{Ho=!1,Ko+=1,Fo=null!==e?e.memoizedState:null,Wo=Uo,Bo=zo=Mo=null,Do.current=ui,t=n(r,o)}while(Ho);Qo=null,Ko=0}return Do.current=li,(e=jo).memoizedState=Uo,e.expirationTime=Vo,e.updateQueue=Bo,e.effectTag|=qo,e=null!==Mo&&null!==Mo.next,Lo=0,Wo=zo=Uo=Fo=Mo=jo=null,Vo=0,Bo=null,qo=0,e&&a("300"),t}function Xo(){Do.current=li,Lo=0,Wo=zo=Uo=Fo=Mo=jo=null,Vo=0,Bo=null,qo=0,Ho=!1,Qo=null,Ko=0}function Jo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===zo?Uo=zo=e:zo=zo.next=e,zo}function Zo(){if(null!==Wo)Wo=(zo=Wo).next,Fo=null!==(Mo=Fo)?Mo.next:null;else{null===Fo&&a("310");var e={memoizedState:(Mo=Fo).memoizedState,baseState:Mo.baseState,queue:Mo.queue,baseUpdate:Mo.baseUpdate,next:null};zo=null===zo?Uo=e:zo.next=e,Fo=Mo.next}return zo}function ei(e,t){return"function"==typeof t?t(e):t}function ti(e){var t=Zo(),n=t.queue;if(null===n&&a("311"),0<Ko){var r=n.dispatch;if(null!==Qo){var o=Qo.get(n);if(void 0!==o){Qo.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Jt(i,t.memoizedState)||(xi=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),[i,r]}}return[t.memoizedState,r]}r=n.last;var s=t.baseUpdate;if(i=t.baseState,null!==s?(null!==r&&(r.next=null),r=s.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,u=!1;do{var d=c.expirationTime;d<Lo?(u||(u=!0,l=s,o=i),d>Vo&&(Vo=d)):i=c.eagerReducer===e?c.eagerState:e(i,c.action),s=c,c=c.next}while(null!==c&&c!==r);u||(l=s,o=i),Jt(i,t.memoizedState)||(xi=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.eagerReducer=e,n.eagerState=i}return[t.memoizedState,n.dispatch]}function ni(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Bo?(Bo={lastEffect:null}).lastEffect=e.next=e:null===(t=Bo.lastEffect)?Bo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Bo.lastEffect=e),e}function ri(e,t,n,r){var o=Jo();qo|=e,o.memoizedState=ni(t,n,void 0,void 0===r?null:r)}function oi(e,t,n,r){var o=Zo();r=void 0===r?null:r;var i=void 0;if(null!==Mo){var a=Mo.memoizedState;if(i=a.destroy,null!==r&&$o(r,a.deps))return void ni(To,n,i,r)}qo|=e,o.memoizedState=ni(t,n,i,r)}function ii(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ai(){}function si(e,t,n){25>Ko||a("301");var r=e.alternate;if(e===jo||null!==r&&r===jo)if(Ho=!0,e={expirationTime:Lo,action:n,eagerReducer:null,eagerState:null,next:null},null===Qo&&(Qo=new Map),void 0===(n=Qo.get(t)))Qo.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{za();var o=ys(),i={expirationTime:o=Ha(o,e),action:n,eagerReducer:null,eagerState:null,next:null},s=t.last;if(null===s)i.next=i;else{var l=s.next;null!==l&&(i.next=l),s.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.eagerReducer))try{var c=t.eagerState,u=r(c,n);if(i.eagerReducer=r,i.eagerState=u,Jt(u,c))return}catch(e){}Ga(e,o)}}var li={readContext:Wi,useCallback:Go,useContext:Go,useEffect:Go,useImperativeHandle:Go,useLayoutEffect:Go,useMemo:Go,useReducer:Go,useRef:Go,useState:Go,useDebugValue:Go},ci={readContext:Wi,useCallback:function(e,t){return Jo().memoizedState=[e,void 0===t?null:t],e},useContext:Wi,useEffect:function(e,t){return ri(516,Ro|Ao,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):[e],ri(4,Io|Po,ii.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,Io|Po,e,t)},useMemo:function(e,t){var n=Jo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Jo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,eagerReducer:e,eagerState:t}).dispatch=si.bind(null,jo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Jo().memoizedState=e},useState:function(e){var t=Jo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,eagerReducer:ei,eagerState:e}).dispatch=si.bind(null,jo,e),[t.memoizedState,e]},useDebugValue:ai},ui={readContext:Wi,useCallback:function(e,t){var n=Zo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$o(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Wi,useEffect:function(e,t){return oi(516,Ro|Ao,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):[e],oi(4,Io|Po,ii.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oi(4,Io|Po,e,t)},useMemo:function(e,t){var n=Zo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$o(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ti,useRef:function(){return Zo().memoizedState},useState:function(e){return ti(ei)},useDebugValue:ai},di=null,pi=null,fi=!1;function hi(e,t){var n=qr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function mi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function gi(e){if(fi){var t=pi;if(t){var n=t;if(!mi(e,t)){if(!(t=_r(n))||!mi(e,t))return e.effectTag|=2,fi=!1,void(di=e);hi(di,n)}di=e,pi=kr(t)}else e.effectTag|=2,fi=!1,di=e}}function bi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;di=e}function vi(e){if(e!==di)return!1;if(!fi)return bi(e),fi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!br(t,e.memoizedProps))for(t=pi;t;)hi(e,t),t=_r(t);return bi(e),pi=di?_r(e.stateNode):null,!0}function yi(){pi=di=null,fi=!1}var wi=qe.ReactCurrentOwner,xi=!1;function _i(e,t,n,r){t.child=null===e?go(t,null,n,r):mo(t,e.child,n,r)}function ki(e,t,n,r,o){n=n.render;var i=t.ref;return zi(t,o),r=Yo(e,t,n,r,i,o),null===e||xi?(t.effectTag|=1,_i(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ai(e,t,o))}function Ei(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Hr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Kr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ci(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Ai(e,t,i):(t.effectTag|=1,(e=Qr(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ci(e,t,n,r,o,i){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(xi=!1,o<i)?Ai(e,t,i):Si(e,t,n,r,i)}function Ti(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Si(e,t,n,r,o){var i=Rr(n)?Pr:Nr.current;return i=Ar(t,i),zi(t,o),n=Yo(e,t,n,r,i,o),null===e||xi?(t.effectTag|=1,_i(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ai(e,t,o))}function Ii(e,t,n,r,o){if(Rr(n)){var i=!0;Fr(t)}else i=!1;if(zi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),so(t,n,r),co(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Wi(c):c=Ar(t,c=Rr(n)?Pr:Nr.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&lo(t,a,r,c),Qi=!1;var p=t.memoizedState;l=a.state=p;var f=t.updateQueue;null!==f&&(ta(t,f,r,a,o),l=t.memoizedState),s!==r||p!==l||Or.current||Qi?("function"==typeof u&&(oo(t,n,u,r),l=t.memoizedState),(s=Qi||ao(t,n,s,r,p,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,s=t.memoizedProps,a.props=t.type===t.elementType?s:no(t.type,s),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Wi(c):c=Ar(t,c=Rr(n)?Pr:Nr.current),(d="function"==typeof(u=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&lo(t,a,r,c),Qi=!1,l=t.memoizedState,p=a.state=l,null!==(f=t.updateQueue)&&(ta(t,f,r,a,o),p=t.memoizedState),s!==r||l!==p||Or.current||Qi?("function"==typeof u&&(oo(t,n,u,r),p=t.memoizedState),(u=Qi||ao(t,n,s,r,l,p,c))?(d||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=c,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Ni(e,t,n,r,i,o)}function Ni(e,t,n,r,o,i){Ti(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Ur(t,n,!1),Ai(e,t,i);r=t.stateNode,wi.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=mo(t,e.child,null,i),t.child=mo(t,null,s,i)):_i(e,t,s,i),t.memoizedState=r.state,o&&Ur(t,n,!0),t.child}function Oi(e){var t=e.stateNode;t.pendingContext?jr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&jr(0,t.context,!1),_o(e,t.containerInfo)}function Pi(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var s=o.fallback;e=Gr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Gr(s,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=go(t,null,o.children,n);else null!==e.memoizedState?(s=(r=e.child).sibling,a?(n=o.fallback,o=Qr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Qr(s,n,s.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=mo(t,r.child,o.children,n)):(s=e.child,a?(a=o.fallback,(o=Gr(null,r,0,null)).child=s,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Gr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=mo(t,s,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function Ai(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Qr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Qr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ri(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Or.current)xi=!0;else if(r<n){switch(xi=!1,t.tag){case 3:Oi(t),yi();break;case 5:Eo(t);break;case 1:Rr(t.type)&&Fr(t);break;case 4:_o(t,t.stateNode.containerInfo);break;case 10:Fi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Pi(e,t,n):null!==(t=Ai(e,t,n))?t.sibling:null}return Ai(e,t,n)}}else xi=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Ar(t,Nr.current);if(zi(t,n),o=Yo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Xo(),Rr(r)){var i=!0;Fr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var s=r.getDerivedStateFromProps;"function"==typeof s&&oo(t,r,s,e),o.updater=io,t.stateNode=o,o._reactInternalFiber=t,co(t,r,e,n),t=Ni(null,t,r,!0,i,n)}else t.tag=0,_i(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Hr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=no(e,i),s=void 0,o){case 0:s=Si(null,t,e,i,n);break;case 1:s=Ii(null,t,e,i,n);break;case 11:s=ki(null,t,e,i,n);break;case 14:s=Ei(null,t,e,no(e.type,i),r,n);break;default:a("306",e,"")}return s;case 0:return r=t.type,o=t.pendingProps,Si(e,t,r,o=t.elementType===r?o:no(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ii(e,t,r,o=t.elementType===r?o:no(r,o),n);case 3:return Oi(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,ta(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(yi(),t=Ai(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(pi=kr(t.stateNode.containerInfo),di=t,o=fi=!0),o?(t.effectTag|=2,t.child=go(t,null,r,n)):(_i(e,t,r,n),yi()),t=t.child),t;case 5:return Eo(t),null===e&&gi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,br(r,o)?s=null:null!==i&&br(r,i)&&(t.effectTag|=16),Ti(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(_i(e,t,s,n),t=t.child),t;case 6:return null===e&&gi(t),null;case 13:return Pi(e,t,n);case 4:return _o(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=mo(t,null,r,n):_i(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ki(e,t,r,o=t.elementType===r?o:no(r,o),n);case 7:return _i(e,t,t.pendingProps,n),t.child;case 8:case 12:return _i(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,s=t.memoizedProps,Fi(t,i=o.value),null!==s){var l=s.value;if(0===(i=Jt(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(s.children===o.children&&!Or.current){t=Ai(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.contextDependencies;if(null!==c){s=l.child;for(var u=c.first;null!==u;){if(u.context===r&&0!=(u.observedBits&i)){1===l.tag&&((u=$i(n)).tag=qi,Xi(l,u)),l.expirationTime<n&&(l.expirationTime=n),null!==(u=l.alternate)&&u.expirationTime<n&&(u.expirationTime=n);for(var d=l.return;null!==d;){if(u=d.alternate,d.childExpirationTime<n)d.childExpirationTime=n,null!==u&&u.childExpirationTime<n&&(u.childExpirationTime=n);else{if(!(null!==u&&u.childExpirationTime<n))break;u.childExpirationTime=n}d=d.return}c.expirationTime<n&&(c.expirationTime=n);break}u=u.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}}_i(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,zi(t,n),r=r(o=Wi(o,i.unstable_observedBits)),t.effectTag|=1,_i(e,t,r,n),t.child;case 14:return i=no(o=t.type,t.pendingProps),Ei(e,t,o,i=no(o.type,i),r,n);case 15:return Ci(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:no(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Rr(r)?(e=!0,Fr(t)):e=!1,zi(t,n),so(t,r,o),co(t,r,o,n),Ni(null,t,r,!0,e,n);default:a("156")}}var Di={current:null},Li=null,ji=null,Mi=null;function Fi(e,t){var n=e.type._context;Sr(Di,n._currentValue),n._currentValue=t}function Ui(e){var t=Di.current;Tr(Di),e.type._context._currentValue=t}function zi(e,t){Li=e,Mi=ji=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(xi=!0),e.contextDependencies=null}function Wi(e,t){return Mi!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Mi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ji?(null===Li&&a("308"),ji=t,Li.contextDependencies={first:t,expirationTime:0}):ji=ji.next=t),e._currentValue}var Vi=0,Bi=1,qi=2,Hi=3,Qi=!1;function Ki(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Gi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function $i(e){return{expirationTime:e,tag:Vi,payload:null,callback:null,next:null,nextEffect:null}}function Yi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Xi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Ki(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Ki(e.memoizedState),o=n.updateQueue=Ki(n.memoizedState)):r=e.updateQueue=Gi(o):null===o&&(o=n.updateQueue=Gi(r));null===o||r===o?Yi(r,t):null===r.lastUpdate||null===o.lastUpdate?(Yi(r,t),Yi(o,t)):(Yi(r,t),o.lastUpdate=t)}function Ji(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Ki(e.memoizedState):Zi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Zi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Gi(t)),t}function ea(e,t,n,r,i,a){switch(n.tag){case Bi:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case Hi:e.effectTag=-2049&e.effectTag|64;case Vi:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case qi:Qi=!0}return r}function ta(e,t,n,r,o){Qi=!1;for(var i=(t=Zi(e,t)).baseState,a=null,s=0,l=t.firstUpdate,c=i;null!==l;){var u=l.expirationTime;u<o?(null===a&&(a=l,i=c),s<u&&(s=u)):(c=ea(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(u=null,l=t.firstCapturedUpdate;null!==l;){var d=l.expirationTime;d<o?(null===u&&(u=l,null===a&&(i=c)),s<d&&(s=d)):(c=ea(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===u?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===u&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=u,e.expirationTime=s,e.memoizedState=c}function na(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ra(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ra(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ra(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function oa(e,t){return{value:e,source:t,stack:lt(t)}}function ia(e){e.effectTag|=4}var aa=void 0,sa=void 0,la=void 0,ca=void 0;aa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},sa=function(){},la=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var s=t.stateNode;switch(xo(vo.current),e=null,n){case"input":a=yt(s,a),r=yt(s,r),e=[];break;case"option":a=Qn(s,a),r=Qn(s,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Gn(s,a),r=Gn(s,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(s.onclick=fr)}ur(n,r),s=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(s in c)c.hasOwnProperty(s)&&(l||(l={}),l[s]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(y.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var u=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&u!==c&&(null!=u||null!=c))if("style"===n)if(c){for(s in c)!c.hasOwnProperty(s)||u&&u.hasOwnProperty(s)||(l||(l={}),l[s]="");for(s in u)u.hasOwnProperty(s)&&c[s]!==u[s]&&(l||(l={}),l[s]=u[s])}else l||(e||(e=[]),e.push(n,l)),l=u;else"dangerouslySetInnerHTML"===n?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(e=e||[]).push(n,""+u)):"children"===n?c===u||"string"!=typeof u&&"number"!=typeof u||(e=e||[]).push(n,""+u):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(y.hasOwnProperty(n)?(null!=u&&pr(i,n),e||c===u||(e=[])):(e=e||[]).push(n,u))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&ia(t)}},ca=function(e,t,n,r){n!==r&&ia(t)};var ua="function"==typeof WeakSet?WeakSet:Set;function da(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&st(n.type),t=t.value,null!==e&&1===e.tag&&st(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function pa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){qa(e,t)}else t.current=null}function fa(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==To){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==To&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function ha(e){switch("function"==typeof Wr&&Wr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){qa(o,e)}}n=n.next}while(n!==t)}break;case 1:if(pa(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){qa(e,t)}break;case 5:pa(e);break;case 4:ba(e)}}function ma(e){return 5===e.tag||3===e.tag||4===e.tag}function ga(e){e:{for(var t=e.return;null!==t;){if(ma(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ma(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,s=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(s,l):i.insertBefore(s,l)}else t.insertBefore(o.stateNode,n);else r?(s=t,l=o.stateNode,8===s.nodeType?(i=s.parentNode).insertBefore(l,s):(i=s).appendChild(l),null!=(s=s._reactRootContainer)||null!==i.onclick||(i.onclick=fr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function ba(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,s=i;;)if(ha(s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===i)break;for(;null===s.sibling;){if(null===s.return||s.return===i)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}o?(i=r,s=t.stateNode,8===i.nodeType?i.parentNode.removeChild(s):i.removeChild(s)):r.removeChild(t.stateNode)}else if(4===t.tag?(r=t.stateNode.containerInfo,o=!0):ha(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function va(e,t){switch(t.tag){case 0:case 11:case 14:case 15:fa(Io,No,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[D]=o,"input"===n&&"radio"===o.type&&null!=o.name&&xt(e,o),dr(n,r),r=dr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],s=t[i+1];"style"===a?lr(e,s):"dangerouslySetInnerHTML"===a?rr(e,s):"children"===a?or(e,s):bt(e,a,s,r)}switch(n){case"input":_t(e,o);break;case"textarea":Yn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Kn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Kn(e,!!o.multiple,o.defaultValue,!0):Kn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=ys())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=sr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var s=t.stateNode;null===s&&(s=t.stateNode=new ua),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Ha(t=ys(),e),null!==(e=Ka(e,t))&&(Jr(e,t),0!==(t=e.expirationTime)&&ws(e,t))}.bind(null,t,e);s.has(e)||(s.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var ya="function"==typeof WeakMap?WeakMap:Map;function wa(e,t,n){(n=$i(n)).tag=Hi,n.payload={element:null};var r=t.value;return n.callback=function(){Ns(r),da(e,t)},n}function xa(e,t,n){(n=$i(n)).tag=Hi;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Fa?Fa=new Set([this]):Fa.add(this));var n=t.value,o=t.stack;da(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function _a(e){switch(e.tag){case 1:Rr(e.type)&&Dr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return ko(),Lr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Co(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 4:return ko(),null;case 10:return Ui(e),null;default:return null}}var ka=qe.ReactCurrentDispatcher,Ea=qe.ReactCurrentOwner,Ca=1073741822,Ta=0,Sa=!1,Ia=null,Na=null,Oa=0,Pa=-1,Aa=!1,Ra=null,Da=!1,La=null,ja=null,Ma=null,Fa=null;function Ua(){if(null!==Ia)for(var e=Ia.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Dr();break;case 3:ko(),Lr();break;case 5:Co(t);break;case 4:ko();break;case 10:Ui(t)}e=e.return}Na=null,Oa=0,Pa=-1,Aa=!1,Ia=null}function za(){null!==ja&&xr(ja),null!==Ma&&Ma()}function Wa(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Ia=e;e:{var i=t,s=Oa,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Rr(t.type)&&Dr();break;case 3:ko(),Lr(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==i&&null!==i.child||(vi(t),t.effectTag&=-3),sa(t);break;case 5:Co(t);var c=xo(wo.current);if(s=t.type,null!==i&&null!=t.stateNode)la(i,t,s,l,c),i.ref!==t.ref&&(t.effectTag|=128);else if(l){var u=xo(vo.current);if(vi(t)){i=(l=t).stateNode;var d=l.type,p=l.memoizedProps,f=c;switch(i[R]=l,i[D]=p,s=void 0,c=d){case"iframe":case"object":Cn("load",i);break;case"video":case"audio":for(d=0;d<te.length;d++)Cn(te[d],i);break;case"source":Cn("error",i);break;case"img":case"image":case"link":Cn("error",i),Cn("load",i);break;case"form":Cn("reset",i),Cn("submit",i);break;case"details":Cn("toggle",i);break;case"input":wt(i,p),Cn("invalid",i),pr(f,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},Cn("invalid",i),pr(f,"onChange");break;case"textarea":$n(i,p),Cn("invalid",i),pr(f,"onChange")}for(s in ur(c,p),d=null,p)p.hasOwnProperty(s)&&(u=p[s],"children"===s?"string"==typeof u?i.textContent!==u&&(d=["children",u]):"number"==typeof u&&i.textContent!==""+u&&(d=["children",""+u]):y.hasOwnProperty(s)&&null!=u&&pr(f,s));switch(c){case"input":Ve(i),kt(i,p,!0);break;case"textarea":Ve(i),Xn(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=fr)}s=d,l.updateQueue=s,(l=null!==s)&&ia(t)}else{p=t,i=s,f=l,d=9===c.nodeType?c:c.ownerDocument,u===Jn.html&&(u=Zn(i)),u===Jn.html?"script"===i?((i=d.createElement("div")).innerHTML="<script><\/script>",d=i.removeChild(i.firstChild)):"string"==typeof f.is?d=d.createElement(i,{is:f.is}):(d=d.createElement(i),"select"===i&&f.multiple&&(d.multiple=!0)):d=d.createElementNS(u,i),(i=d)[R]=p,i[D]=l,aa(i,t,!1,!1),f=i;var h=c,m=dr(d=s,p=l);switch(d){case"iframe":case"object":Cn("load",f),c=p;break;case"video":case"audio":for(c=0;c<te.length;c++)Cn(te[c],f);c=p;break;case"source":Cn("error",f),c=p;break;case"img":case"image":case"link":Cn("error",f),Cn("load",f),c=p;break;case"form":Cn("reset",f),Cn("submit",f),c=p;break;case"details":Cn("toggle",f),c=p;break;case"input":wt(f,p),c=yt(f,p),Cn("invalid",f),pr(h,"onChange");break;case"option":c=Qn(f,p);break;case"select":f._wrapperState={wasMultiple:!!p.multiple},c=o({},p,{value:void 0}),Cn("invalid",f),pr(h,"onChange");break;case"textarea":$n(f,p),c=Gn(f,p),Cn("invalid",f),pr(h,"onChange");break;default:c=p}ur(d,c),u=void 0;var g=d,b=f,v=c;for(u in v)if(v.hasOwnProperty(u)){var w=v[u];"style"===u?lr(b,w):"dangerouslySetInnerHTML"===u?null!=(w=w?w.__html:void 0)&&rr(b,w):"children"===u?"string"==typeof w?("textarea"!==g||""!==w)&&or(b,w):"number"==typeof w&&or(b,""+w):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(y.hasOwnProperty(u)?null!=w&&pr(h,u):null!=w&&bt(b,u,w,m))}switch(d){case"input":Ve(f),kt(f,p,!1);break;case"textarea":Ve(f),Xn(f);break;case"option":null!=p.value&&f.setAttribute("value",""+vt(p.value));break;case"select":(c=f).multiple=!!p.multiple,null!=(f=p.value)?Kn(c,!!p.multiple,f,!1):null!=p.defaultValue&&Kn(c,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof c.onClick&&(f.onclick=fr)}(l=gr(s,l))&&ia(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?ca(i,t,i.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&a("166")),i=xo(wo.current),xo(vo.current),vi(t)?(s=(l=t).stateNode,i=l.memoizedProps,s[R]=l,(l=s.nodeValue!==i)&&ia(t)):(s=t,(l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[R]=t,s.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=s,Ia=t;break e}l=null!==l,s=null!==i&&null!==i.memoizedState,null!==i&&!l&&s&&(null!==(i=i.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=i,i.nextEffect=c):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(l||s)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:ko(),sa(t);break;case 10:Ui(t);break;case 9:case 14:break;case 17:Rr(t.type)&&Dr();break;default:a("156")}Ia=null}if(t=e,1===Oa||1!==t.childExpirationTime){for(l=0,s=t.child;null!==s;)(i=s.expirationTime)>l&&(l=i),(c=s.childExpirationTime)>l&&(l=c),s=s.sibling;t.childExpirationTime=l}if(null!==Ia)return Ia;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=_a(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Va(e){var t=Ri(e.alternate,e,Oa);return e.memoizedProps=e.pendingProps,null===t&&(t=Wa(e)),Ea.current=null,t}function Ba(e,t){Sa&&a("243"),za(),Sa=!0;var n=ka.current;ka.current=li;var r=e.nextExpirationTimeToWorkOn;r===Oa&&e===Na&&null!==Ia||(Ua(),Oa=r,Ia=Qr((Na=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==Ia&&!ks();)Ia=Va(Ia);else for(;null!==Ia;)Ia=Va(Ia)}catch(t){if(Mi=ji=Li=null,Xo(),null===Ia)o=!0,Ns(t);else{null===Ia&&a("271");var i=Ia,s=i.return;if(null!==s){e:{var l=e,c=s,u=i,d=t;if(s=Oa,u.effectTag|=1024,u.firstEffect=u.lastEffect=null,null!==d&&"object"==typeof d&&"function"==typeof d.then){var p=d;d=c;var f=-1,h=-1;do{if(13===d.tag){var m=d.alternate;if(null!==m&&null!==(m=m.memoizedState)){h=10*(1073741822-m.timedOutAt);break}"number"==typeof(m=d.pendingProps.maxDuration)&&(0>=m?f=0:(-1===f||m<f)&&(f=m))}d=d.return}while(null!==d);d=c;do{if((m=13===d.tag)&&(m=void 0!==d.memoizedProps.fallback&&null===d.memoizedState),m){if(null===(c=d.updateQueue)?((c=new Set).add(p),d.updateQueue=c):c.add(p),0==(1&d.mode)){d.effectTag|=64,u.effectTag&=-1957,1===u.tag&&(null===u.alternate?u.tag=17:((s=$i(1073741823)).tag=qi,Xi(u,s))),u.expirationTime=1073741823;break e}null===(u=l.pingCache)?(u=l.pingCache=new ya,c=new Set,u.set(p,c)):void 0===(c=u.get(p))&&(c=new Set,u.set(p,c)),c.has(s)||(c.add(s),u=Qa.bind(null,l,p,s),p.then(u,u)),-1===f?l=1073741823:(-1===h&&(h=10*(1073741822-eo(l,s))-5e3),l=h+f),0<=l&&Pa<l&&(Pa=l),d.effectTag|=2048,d.expirationTime=s;break e}d=d.return}while(null!==d);d=Error((st(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(u))}Aa=!0,d=oa(d,u),l=c;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=s,Ji(l,s=wa(l,d,s));break e;case 1:if(p=d,f=l.type,h=l.stateNode,0==(64&l.effectTag)&&("function"==typeof f.getDerivedStateFromError||null!==h&&"function"==typeof h.componentDidCatch&&(null===Fa||!Fa.has(h)))){l.effectTag|=2048,l.expirationTime=s,Ji(l,s=xa(l,p,s));break e}}l=l.return}while(null!==l)}Ia=Wa(i);continue}o=!0,Ns(t)}}break}if(Sa=!1,ka.current=n,Mi=ji=Li=null,Xo(),o)Na=null,e.finishedWork=null;else if(null!==Ia)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&a("281"),Na=null,Aa){if(o=e.latestPendingTime,i=e.latestSuspendedTime,s=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==s&&s<r)return Zr(e,r),void vs(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void vs(e,n,r,t,-1)}t&&-1!==Pa?(Zr(e,r),(t=10*(1073741822-eo(e,r)))<Pa&&(Pa=t),t=10*(1073741822-ys()),t=Pa-t,vs(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function qa(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Fa||!Fa.has(r)))return Xi(n,e=xa(n,e=oa(t,e),1073741823)),void Ga(n,1073741823);break;case 3:return Xi(n,e=wa(n,e=oa(t,e),1073741823)),void Ga(n,1073741823)}n=n.return}3===e.tag&&(Xi(e,n=wa(e,n=oa(t,e),1073741823)),Ga(e,1073741823))}function Ha(e,t){return 0!==Ta?e=Ta:Sa?e=Da?1073741823:Oa:1&t.mode?(e=ls?1073741822-10*(1+((1073741822-e+15)/10|0)):1073741822-25*(1+((1073741822-e+500)/25|0)),null!==Na&&e===Oa&&--e):e=1073741823,ls&&(0===rs||e<rs)&&(rs=e),e}function Qa(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Na&&Oa===n?Na=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),to(n,e),0!==(n=e.expirationTime)&&ws(e,n)))}function Ka(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Ga(e,t){null!==(e=Ka(e,t))&&(!Sa&&0!==Oa&&t>Oa&&Ua(),Jr(e,t),Sa&&!Da&&Na===e||ws(e,e.expirationTime),hs>fs&&(hs=0,a("185")))}function $a(e,t,n,r,o){var i=Ta;Ta=1073741823;try{return e(t,n,r,o)}finally{Ta=i}}var Ya=null,Xa=null,Ja=0,Za=void 0,es=!1,ts=null,ns=0,rs=0,os=!1,is=null,as=!1,ss=!1,ls=!1,cs=null,us=i.unstable_now(),ds=1073741822-(us/10|0),ps=ds,fs=50,hs=0,ms=null;function gs(){ds=1073741822-((i.unstable_now()-us)/10|0)}function bs(e,t){if(0!==Ja){if(t<Ja)return;null!==Za&&i.unstable_cancelCallback(Za)}Ja=t,e=i.unstable_now()-us,Za=i.unstable_scheduleCallback(Es,{timeout:10*(1073741822-t)-e})}function vs(e,t,n,r,o){e.expirationTime=r,0!==o||ks()?0<o&&(e.timeoutHandle=vr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,gs(),ps=ds,Ts(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function ys(){return es?ps:(xs(),0!==ns&&1!==ns||(gs(),ps=ds),ps)}function ws(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===Xa?(Ya=Xa=e,e.nextScheduledRoot=e):(Xa=Xa.nextScheduledRoot=e).nextScheduledRoot=Ya):t>e.expirationTime&&(e.expirationTime=t),es||(as?ss&&(ts=e,ns=1073741823,Ss(e,1073741823,!1)):1073741823===t?Cs(1073741823,!1):bs(e,t))}function xs(){var e=0,t=null;if(null!==Xa)for(var n=Xa,r=Ya;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===Xa)&&a("244"),r===r.nextScheduledRoot){Ya=Xa=r.nextScheduledRoot=null;break}if(r===Ya)Ya=o=r.nextScheduledRoot,Xa.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Xa){(Xa=n).nextScheduledRoot=Ya,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===Xa)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ts=t,ns=e}var _s=!1;function ks(){return!!_s||!!i.unstable_shouldYield()&&(_s=!0)}function Es(){try{if(!ks()&&null!==Ya){gs();var e=Ya;do{var t=e.expirationTime;0!==t&&ds<=t&&(e.nextExpirationTimeToWorkOn=ds),e=e.nextScheduledRoot}while(e!==Ya)}Cs(0,!0)}finally{_s=!1}}function Cs(e,t){if(xs(),t)for(gs(),ps=ds;null!==ts&&0!==ns&&e<=ns&&!(_s&&ds>ns);)Ss(ts,ns,ds>ns),xs(),gs(),ps=ds;else for(;null!==ts&&0!==ns&&e<=ns;)Ss(ts,ns,!1),xs();if(t&&(Ja=0,Za=null),0!==ns&&bs(ts,ns),hs=0,ms=null,null!==cs)for(e=cs,cs=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){os||(os=!0,is=e)}}if(os)throw e=is,is=null,os=!1,e}function Ts(e,t){es&&a("253"),ts=e,ns=t,Ss(e,t,!1),Cs(1073741823,!1)}function Ss(e,t,n){if(es&&a("245"),es=!0,n){var r=e.finishedWork;null!==r?Is(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,yr(r)),Ba(e,n),null!==(r=e.finishedWork)&&(ks()?e.finishedWork=r:Is(e,r,t)))}else null!==(r=e.finishedWork)?Is(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,yr(r)),Ba(e,n),null!==(r=e.finishedWork)&&Is(e,r,t));es=!1}function Is(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===cs?cs=[r]:cs.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===ms?hs++:(ms=e,hs=0),Da=Sa=!0,e.current===t&&a("177"),0===(n=e.pendingCommitExpirationTime)&&a("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=o>r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(r<e.latestPingedTime&&(e.latestPingedTime=0),0!==(o=e.latestPendingTime)&&(o>r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Jr(e,r):r<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Jr(e,r)):r>o&&Jr(e,r)),to(0,e),Ea.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=En,Mn(o=jn())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else e:{var s=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(s&&0!==s.rangeCount){i=s.anchorNode;var l=s.anchorOffset,c=s.focusNode;s=s.focusOffset;try{i.nodeType,c.nodeType}catch(e){i=null;break e}var u=0,d=-1,p=-1,f=0,h=0,m=o,g=null;t:for(;;){for(var b;m!==i||0!==l&&3!==m.nodeType||(d=u+l),m!==c||0!==s&&3!==m.nodeType||(p=u+s),3===m.nodeType&&(u+=m.nodeValue.length),null!==(b=m.firstChild);)g=m,m=b;for(;;){if(m===o)break t;if(g===i&&++f===l&&(d=u),g===c&&++h===s&&(p=u),null!==(b=m.nextSibling))break;g=(m=g).parentNode}m=b}i=-1===d||-1===p?null:{start:d,end:p}}else i=null}i=i||{start:0,end:0}}else i=null;for(mr={focusedElem:o,selectionRange:i},En=!1,Ra=r;null!==Ra;){o=!1,i=void 0;try{for(;null!==Ra;){if(256&Ra.effectTag)e:{var v=Ra.alternate;switch((l=Ra).tag){case 0:case 11:case 15:fa(So,To,l);break e;case 1:if(256&l.effectTag&&null!==v){var y=v.memoizedProps,w=v.memoizedState,x=l.stateNode,_=x.getSnapshotBeforeUpdate(l.elementType===l.type?y:no(l.type,y),w);x.__reactInternalSnapshotBeforeUpdate=_}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Ra=Ra.nextEffect}}catch(e){o=!0,i=e}o&&(null===Ra&&a("178"),qa(Ra,i),null!==Ra&&(Ra=Ra.nextEffect))}for(Ra=r;null!==Ra;){v=!1,y=void 0;try{for(;null!==Ra;){var k=Ra.effectTag;if(16&k&&or(Ra.stateNode,""),128&k){var E=Ra.alternate;if(null!==E){var C=E.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(14&k){case 2:ga(Ra),Ra.effectTag&=-3;break;case 6:ga(Ra),Ra.effectTag&=-3,va(Ra.alternate,Ra);break;case 4:va(Ra.alternate,Ra);break;case 8:ba(w=Ra),w.return=null,w.child=null,w.memoizedState=null,w.updateQueue=null;var T=w.alternate;null!==T&&(T.return=null,T.child=null,T.memoizedState=null,T.updateQueue=null)}Ra=Ra.nextEffect}}catch(e){v=!0,y=e}v&&(null===Ra&&a("178"),qa(Ra,y),null!==Ra&&(Ra=Ra.nextEffect))}if(C=mr,E=jn(),k=C.focusedElem,v=C.selectionRange,E!==k&&k&&k.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(k.ownerDocument.documentElement,k)){null!==v&&Mn(k)&&(E=v.start,void 0===(C=v.end)&&(C=E),"selectionStart"in k?(k.selectionStart=E,k.selectionEnd=Math.min(C,k.value.length)):(C=(E=k.ownerDocument||document)&&E.defaultView||window).getSelection&&(C=C.getSelection(),y=k.textContent.length,T=Math.min(v.start,y),v=void 0===v.end?T:Math.min(v.end,y),!C.extend&&T>v&&(y=v,v=T,T=y),y=Ln(k,T),w=Ln(k,v),y&&w&&(1!==C.rangeCount||C.anchorNode!==y.node||C.anchorOffset!==y.offset||C.focusNode!==w.node||C.focusOffset!==w.offset)&&((E=E.createRange()).setStart(y.node,y.offset),C.removeAllRanges(),T>v?(C.addRange(E),C.extend(w.node,w.offset)):(E.setEnd(w.node,w.offset),C.addRange(E))))),E=[];for(C=k;C=C.parentNode;)1===C.nodeType&&E.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof k.focus&&k.focus(),k=0;k<E.length;k++)(C=E[k]).element.scrollLeft=C.left,C.element.scrollTop=C.top}for(mr=null,En=!!hr,hr=null,e.current=t,Ra=r;null!==Ra;){k=!1,E=void 0;try{for(C=e,T=n;null!==Ra;){var S=Ra.effectTag;if(36&S){var I=Ra.alternate;switch(y=T,(v=Ra).tag){case 0:case 11:case 15:fa(Oo,Po,v);break;case 1:var N=v.stateNode;if(4&v.effectTag)if(null===I)N.componentDidMount();else{var O=v.elementType===v.type?I.memoizedProps:no(v.type,I.memoizedProps);N.componentDidUpdate(O,I.memoizedState,N.__reactInternalSnapshotBeforeUpdate)}var P=v.updateQueue;null!==P&&na(0,P,N);break;case 3:var A=v.updateQueue;if(null!==A){if(w=null,null!==v.child)switch(v.child.tag){case 5:w=v.child.stateNode;break;case 1:w=v.child.stateNode}na(0,A,w)}break;case 5:var R=v.stateNode;null===I&&4&v.effectTag&&gr(v.type,v.memoizedProps)&&R.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}if(128&S){var D=Ra.ref;if(null!==D){var L=Ra.stateNode;switch(Ra.tag){case 5:var j=L;break;default:j=L}"function"==typeof D?D(j):D.current=j}}512&S&&(La=C),Ra=Ra.nextEffect}}catch(e){k=!0,E=e}k&&(null===Ra&&a("178"),qa(Ra,E),null!==Ra&&(Ra=Ra.nextEffect))}null!==r&&null!==La&&(S=function(e,t){Ma=ja=La=null;var n=es;es=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;fa(Ro,To,i),fa(To,Ao,i)}catch(e){r=!0,o=e}r&&qa(t,o)}t=t.nextEffect}while(null!==t);es=n,0!==(n=e.expirationTime)&&ws(e,n)}.bind(null,e,r),ja=wr(S),Ma=S),Sa=Da=!1,"function"==typeof zr&&zr(t.stateNode),S=t.expirationTime,0===(t=(t=t.childExpirationTime)>S?t:S)&&(Fa=null),e.expirationTime=t,e.finishedWork=null}function Ns(e){null===ts&&a("246"),ts.expirationTime=0,os||(os=!0,is=e)}function Os(e,t){var n=as;as=!0;try{return e(t)}finally{(as=n)||es||Cs(1073741823,!1)}}function Ps(e,t){if(as&&!ss){ss=!0;try{return e(t)}finally{ss=!1}}return e(t)}function As(e,t,n){if(ls)return e(t,n);as||es||0===rs||(Cs(rs,!1),rs=0);var r=ls,o=as;as=ls=!0;try{return e(t,n)}finally{ls=r,(as=o)||es||Cs(1073741823,!1)}}function Rs(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(Rr(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);a("171"),s=void 0}if(1===n.tag){var l=n.type;if(Rr(l)){n=Mr(n,l,s);break e}}n=s}else n=Ir;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=$i(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),za(),Xi(i,o),Ga(i,r),r}function Ds(e,t,n,r){var o=t.current;return Rs(e,t,n,o=Ha(ys(),o),r)}function Ls(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function js(e){var t=1073741822-25*(1+((1073741822-ys()+500)/25|0));t>=Ca&&(t=Ca-1),this._expirationTime=Ca=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Ms(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Fs(e,t,n){e={current:t=qr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Us(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function zs(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Ls(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Fs(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=Ls(i._internalRoot);s.call(e)}}Ps(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Ls(i._internalRoot)}function Ws(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Us(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ge,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(_t(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=F(r);o||a("90"),Be(r),_t(r,o)}}}break;case"textarea":Yn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},js.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Ms;return Rs(e,t,null,n,r._onCommit),r},js.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},js.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Ts(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},js.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Ms.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Ms.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Fs.prototype.render=function(e,t){var n=this._internalRoot,r=new Ms;return null!==(t=void 0===t?null:t)&&r.then(t),Ds(e,n,null,r._onCommit),r},Fs.prototype.unmount=function(e){var t=this._internalRoot,n=new Ms;return null!==(e=void 0===e?null:e)&&n.then(e),Ds(null,t,null,n._onCommit),n},Fs.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Ms;return null!==(n=void 0===n?null:n)&&o.then(n),Ds(t,r,e,o._onCommit),o},Fs.prototype.createBatch=function(){var e=new js(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ae=Os,Re=As,De=function(){es||0===rs||(Cs(rs,!1),rs=0)};var Vs={createPortal:Ws,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Us(t)||a("200"),zs(null,e,t,!0,n)},render:function(e,t,n){return Us(t)||a("200"),zs(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Us(n)||a("200"),(null==e||void 0===e._reactInternalFiber)&&a("38"),zs(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Us(e)||a("40"),!!e._reactRootContainer&&(Ps(function(){zs(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ws.apply(void 0,arguments)},unstable_batchedUpdates:Os,unstable_interactiveUpdates:As,flushSync:function(e,t){es&&a("187");var n=as;as=!0;try{return $a(e,t)}finally{as=n,Cs(1073741823,!1)}},unstable_createRoot:function(e,t){return Us(e)||a("299","unstable_createRoot"),new Fs(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=as;as=!0;try{$a(e)}finally{(as=t)||es||Cs(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[j,M,F,N.injectEventPluginsByName,v,q,function(e){T(e,B)},Oe,Pe,In,P]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);zr=Vr(function(e){return t.onCommitFiberRoot(n,e)}),Wr=Vr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,currentDispatcherRef:qe.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:L,bundleType:0,version:"16.8.1",rendererPackageName:"react-dom"});var Bs={default:Vs},qs=Bs&&Vs||Bs;e.exports=qs.default||qs},function(e,t,n){"use strict";e.exports=n(35)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,s=!1,l=!1;function c(){if(!s){var e=n.expirationTime;l?k():l=!0,_(p,e)}}function u(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,s=a;o=e,a=t;try{var l=r()}finally{o=i,a=s}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,c()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function d(){if(-1===i&&null!==n&&1===n.priorityLevel){s=!0;try{do{u()}while(null!==n&&1===n.priorityLevel)}finally{s=!1,null!==n?c():l=!1}}}function p(e){s=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{u()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{u()}while(null!==n&&!E())}finally{s=!1,r=o,null!==n?c():l=!1,d()}}var f,h,m=Date,g="function"==typeof setTimeout?setTimeout:void 0,b="function"==typeof clearTimeout?clearTimeout:void 0,v="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,y="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(e){f=v(function(t){b(h),e(t)}),h=g(function(){y(f),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var x=performance;t.unstable_now=function(){return x.now()}}else t.unstable_now=function(){return m.now()};var _,k,E,C=null;if("undefined"!=typeof window?C=window:void 0!==e&&(C=e),C&&C._schedMock){var T=C._schedMock;_=T[0],k=T[1],E=T[2],t.unstable_now=T[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var S=null,I=function(e){if(null!==S)try{S(e)}finally{S=null}};_=function(e){null!==S?setTimeout(_,0,e):(S=e,setTimeout(I,0,!1))},k=function(){S=null},E=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof v&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof y&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var N=null,O=!1,P=-1,A=!1,R=!1,D=0,L=33,j=33;E=function(){return D<=t.unstable_now()};var M=new MessageChannel,F=M.port2;M.port1.onmessage=function(){O=!1;var e=N,n=P;N=null,P=-1;var r=t.unstable_now(),o=!1;if(0>=D-r){if(!(-1!==n&&n<=r))return A||(A=!0,w(U)),N=e,void(P=n);o=!0}if(null!==e){R=!0;try{e(o)}finally{R=!1}}};var U=function(e){if(null!==N){w(U);var t=e-D+j;t<j&&L<j?(8>t&&(t=8),j=t<L?L:t):L=t,D=e+j,O||(O=!0,F.postMessage(void 0))}else A=!1};_=function(e,t){N=e,P=t,R||0>t?F.postMessage(void 0):A||(A=!0,w(U))},k=function(){N=null,O=!1,P=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,d()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{a=null;var s=n;do{if(s.expirationTime>r){a=s;break}s=s.next}while(s!==n);null===a?a=n:a===n&&(n=e,c()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,d()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||E())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(19))},function(e,t,n){"use strict";var r=n(10),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=f(n);o&&o!==h&&e(t,o,r)}var a=u(n);d&&(a=a.concat(d(n)));for(var s=l(t),m=l(n),g=0;g<a.length;++g){var b=a[g];if(!(i[b]||r&&r[b]||m&&m[b]||s&&s[b])){var v=p(n,b);try{c(t,b,v)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";
/** @license React v16.8.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,f=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116;function b(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case d:case p:case a:case l:case s:case h:return e;default:switch(e=e&&e.$$typeof){case u:case f:case c:return e;default:return t}}case g:case m:case i:return t}}}function v(e){return b(e)===p}t.typeOf=b,t.AsyncMode=d,t.ConcurrentMode=p,t.ContextConsumer=u,t.ContextProvider=c,t.Element=o,t.ForwardRef=f,t.Fragment=a,t.Lazy=g,t.Memo=m,t.Portal=i,t.Profiler=l,t.StrictMode=s,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===l||e===s||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===c||e.$$typeof===u||e.$$typeof===f)},t.isAsyncMode=function(e){return v(e)||b(e)===d},t.isConcurrentMode=v,t.isContextConsumer=function(e){return b(e)===u},t.isContextProvider=function(e){return b(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return b(e)===f},t.isFragment=function(e){return b(e)===a},t.isLazy=function(e){return b(e)===g},t.isMemo=function(e){return b(e)===m},t.isPortal=function(e){return b(e)===i},t.isProfiler=function(e){return b(e)===l},t.isStrictMode=function(e){return b(e)===s},t.isSuspense=function(e){return b(e)===h}},function(e,t,n){"use strict";var r=n(39);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(41);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(43);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(23)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(22)(!1)).push([e.i,"/*!\n * Bootstrap v4.3.1 (https://getbootstrap.com/)\n * Copyright 2011-2019 The Bootstrap Authors\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */:root{--blue:#007bff;--indigo:#6610f2;--purple:#6f42c1;--pink:#e83e8c;--red:#dc3545;--orange:#fd7e14;--yellow:#ffc107;--green:#28a745;--teal:#20c997;--cyan:#17a2b8;--white:#fff;--gray:#6c757d;--gray-dark:#343a40;--primary:#007bff;--secondary:#6c757d;--success:#28a745;--info:#17a2b8;--warning:#ffc107;--danger:#dc3545;--light:#f8f9fa;--dark:#343a40;--breakpoint-xs:0;--breakpoint-sm:576px;--breakpoint-md:768px;--breakpoint-lg:992px;--breakpoint-xl:1200px;--font-family-sans-serif:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--font-family-monospace:SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace}*,::after,::before{box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:transparent}article,aside,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";font-size:1rem;font-weight:400;line-height:1.5;color:#212529;text-align:left;background-color:#fff}[tabindex=\"-1\"]:focus{outline:0!important}hr{box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem}p{margin-top:0;margin-bottom:1rem}abbr[data-original-title],abbr[title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0;-webkit-text-decoration-skip-ink:none;text-decoration-skip-ink:none}address{margin-bottom:1rem;font-style:normal;line-height:inherit}dl,ol,ul{margin-top:0;margin-bottom:1rem}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#007bff;text-decoration:none;background-color:transparent}a:hover{color:#0056b3;text-decoration:underline}a:not([href]):not([tabindex]){color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus,a:not([href]):not([tabindex]):hover{color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus{outline:0}code,kbd,pre,samp{font-family:SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto}figure{margin:0 0 1rem}img{vertical-align:middle;border-style:none}svg{overflow:hidden;vertical-align:middle}table{border-collapse:collapse}caption{padding-top:.75rem;padding-bottom:.75rem;color:#6c757d;text-align:left;caption-side:bottom}th{text-align:inherit}label{display:inline-block;margin-bottom:.5rem}button{border-radius:0}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}select{word-wrap:normal}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]:not(:disabled),[type=reset]:not(:disabled),[type=submit]:not(:disabled),button:not(:disabled){cursor:pointer}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{padding:0;border-style:none}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=date],input[type=datetime-local],input[type=month],input[type=time]{-webkit-appearance:listbox}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:none}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none!important}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{margin-bottom:.5rem;font-weight:500;line-height:1.2}.h1,h1{font-size:2.5rem}.h2,h2{font-size:2rem}.h3,h3{font-size:1.75rem}.h4,h4{font-size:1.5rem}.h5,h5{font-size:1.25rem}.h6,h6{font-size:1rem}.lead{font-size:1.25rem;font-weight:300}.display-1{font-size:6rem;font-weight:300;line-height:1.2}.display-2{font-size:5.5rem;font-weight:300;line-height:1.2}.display-3{font-size:4.5rem;font-weight:300;line-height:1.2}.display-4{font-size:3.5rem;font-weight:300;line-height:1.2}hr{margin-top:1rem;margin-bottom:1rem;border:0;border-top:1px solid rgba(0,0,0,.1)}.small,small{font-size:80%;font-weight:400}.mark,mark{padding:.2em;background-color:#fcf8e3}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:.5rem}.initialism{font-size:90%;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.25rem}.blockquote-footer{display:block;font-size:80%;color:#6c757d}.blockquote-footer::before{content:\"\\2014\\00A0\"}.img-fluid{max-width:100%;height:auto}.img-thumbnail{padding:.25rem;background-color:#fff;border:1px solid #dee2e6;border-radius:.25rem;max-width:100%;height:auto}.figure{display:inline-block}.figure-img{margin-bottom:.5rem;line-height:1}.figure-caption{font-size:90%;color:#6c757d}code{font-size:87.5%;color:#e83e8c;word-break:break-word}a>code{color:inherit}kbd{padding:.2rem .4rem;font-size:87.5%;color:#fff;background-color:#212529;border-radius:.2rem}kbd kbd{padding:0;font-size:100%;font-weight:700}pre{display:block;font-size:87.5%;color:#212529}pre code{font-size:inherit;color:inherit;word-break:normal}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:576px){.container{max-width:540px}}@media (min-width:768px){.container{max-width:720px}}@media (min-width:992px){.container{max-width:960px}}@media (min-width:1200px){.container{max-width:1140px}}.container-fluid{width:100%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-15px;margin-left:-15px}.no-gutters{margin-right:0;margin-left:0}.no-gutters>.col,.no-gutters>[class*=col-]{padding-right:0;padding-left:0}.col,.col-1,.col-10,.col-11,.col-12,.col-2,.col-3,.col-4,.col-5,.col-6,.col-7,.col-8,.col-9,.col-auto,.col-lg,.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-lg-auto,.col-md,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-md-auto,.col-sm,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-sm-auto,.col-xl,.col-xl-1,.col-xl-10,.col-xl-11,.col-xl-12,.col-xl-2,.col-xl-3,.col-xl-4,.col-xl-5,.col-xl-6,.col-xl-7,.col-xl-8,.col-xl-9,.col-xl-auto{position:relative;width:100%;padding-right:15px;padding-left:15px}.col{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-first{-ms-flex-order:-1;order:-1}.order-last{-ms-flex-order:13;order:13}.order-0{-ms-flex-order:0;order:0}.order-1{-ms-flex-order:1;order:1}.order-2{-ms-flex-order:2;order:2}.order-3{-ms-flex-order:3;order:3}.order-4{-ms-flex-order:4;order:4}.order-5{-ms-flex-order:5;order:5}.order-6{-ms-flex-order:6;order:6}.order-7{-ms-flex-order:7;order:7}.order-8{-ms-flex-order:8;order:8}.order-9{-ms-flex-order:9;order:9}.order-10{-ms-flex-order:10;order:10}.order-11{-ms-flex-order:11;order:11}.order-12{-ms-flex-order:12;order:12}.offset-1{margin-left:8.333333%}.offset-2{margin-left:16.666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.333333%}.offset-5{margin-left:41.666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.333333%}.offset-8{margin-left:66.666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.333333%}.offset-11{margin-left:91.666667%}@media (min-width:576px){.col-sm{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-sm-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-sm-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-sm-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-sm-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-sm-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-sm-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-sm-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-sm-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-sm-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-sm-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-sm-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-sm-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-sm-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-sm-first{-ms-flex-order:-1;order:-1}.order-sm-last{-ms-flex-order:13;order:13}.order-sm-0{-ms-flex-order:0;order:0}.order-sm-1{-ms-flex-order:1;order:1}.order-sm-2{-ms-flex-order:2;order:2}.order-sm-3{-ms-flex-order:3;order:3}.order-sm-4{-ms-flex-order:4;order:4}.order-sm-5{-ms-flex-order:5;order:5}.order-sm-6{-ms-flex-order:6;order:6}.order-sm-7{-ms-flex-order:7;order:7}.order-sm-8{-ms-flex-order:8;order:8}.order-sm-9{-ms-flex-order:9;order:9}.order-sm-10{-ms-flex-order:10;order:10}.order-sm-11{-ms-flex-order:11;order:11}.order-sm-12{-ms-flex-order:12;order:12}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.333333%}.offset-sm-2{margin-left:16.666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.333333%}.offset-sm-5{margin-left:41.666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.333333%}.offset-sm-8{margin-left:66.666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.333333%}.offset-sm-11{margin-left:91.666667%}}@media (min-width:768px){.col-md{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-md-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-md-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-md-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-md-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-md-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-md-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-md-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-md-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-md-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-md-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-md-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-md-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-md-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-md-first{-ms-flex-order:-1;order:-1}.order-md-last{-ms-flex-order:13;order:13}.order-md-0{-ms-flex-order:0;order:0}.order-md-1{-ms-flex-order:1;order:1}.order-md-2{-ms-flex-order:2;order:2}.order-md-3{-ms-flex-order:3;order:3}.order-md-4{-ms-flex-order:4;order:4}.order-md-5{-ms-flex-order:5;order:5}.order-md-6{-ms-flex-order:6;order:6}.order-md-7{-ms-flex-order:7;order:7}.order-md-8{-ms-flex-order:8;order:8}.order-md-9{-ms-flex-order:9;order:9}.order-md-10{-ms-flex-order:10;order:10}.order-md-11{-ms-flex-order:11;order:11}.order-md-12{-ms-flex-order:12;order:12}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.333333%}.offset-md-2{margin-left:16.666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.333333%}.offset-md-5{margin-left:41.666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.333333%}.offset-md-8{margin-left:66.666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.333333%}.offset-md-11{margin-left:91.666667%}}@media (min-width:992px){.col-lg{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-lg-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-lg-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-lg-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-lg-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-lg-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-lg-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-lg-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-lg-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-lg-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-lg-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-lg-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-lg-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-lg-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-lg-first{-ms-flex-order:-1;order:-1}.order-lg-last{-ms-flex-order:13;order:13}.order-lg-0{-ms-flex-order:0;order:0}.order-lg-1{-ms-flex-order:1;order:1}.order-lg-2{-ms-flex-order:2;order:2}.order-lg-3{-ms-flex-order:3;order:3}.order-lg-4{-ms-flex-order:4;order:4}.order-lg-5{-ms-flex-order:5;order:5}.order-lg-6{-ms-flex-order:6;order:6}.order-lg-7{-ms-flex-order:7;order:7}.order-lg-8{-ms-flex-order:8;order:8}.order-lg-9{-ms-flex-order:9;order:9}.order-lg-10{-ms-flex-order:10;order:10}.order-lg-11{-ms-flex-order:11;order:11}.order-lg-12{-ms-flex-order:12;order:12}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.333333%}.offset-lg-2{margin-left:16.666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.333333%}.offset-lg-5{margin-left:41.666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.333333%}.offset-lg-8{margin-left:66.666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.333333%}.offset-lg-11{margin-left:91.666667%}}@media (min-width:1200px){.col-xl{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;max-width:100%}.col-xl-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto;max-width:100%}.col-xl-1{-ms-flex:0 0 8.333333%;flex:0 0 8.333333%;max-width:8.333333%}.col-xl-2{-ms-flex:0 0 16.666667%;flex:0 0 16.666667%;max-width:16.666667%}.col-xl-3{-ms-flex:0 0 25%;flex:0 0 25%;max-width:25%}.col-xl-4{-ms-flex:0 0 33.333333%;flex:0 0 33.333333%;max-width:33.333333%}.col-xl-5{-ms-flex:0 0 41.666667%;flex:0 0 41.666667%;max-width:41.666667%}.col-xl-6{-ms-flex:0 0 50%;flex:0 0 50%;max-width:50%}.col-xl-7{-ms-flex:0 0 58.333333%;flex:0 0 58.333333%;max-width:58.333333%}.col-xl-8{-ms-flex:0 0 66.666667%;flex:0 0 66.666667%;max-width:66.666667%}.col-xl-9{-ms-flex:0 0 75%;flex:0 0 75%;max-width:75%}.col-xl-10{-ms-flex:0 0 83.333333%;flex:0 0 83.333333%;max-width:83.333333%}.col-xl-11{-ms-flex:0 0 91.666667%;flex:0 0 91.666667%;max-width:91.666667%}.col-xl-12{-ms-flex:0 0 100%;flex:0 0 100%;max-width:100%}.order-xl-first{-ms-flex-order:-1;order:-1}.order-xl-last{-ms-flex-order:13;order:13}.order-xl-0{-ms-flex-order:0;order:0}.order-xl-1{-ms-flex-order:1;order:1}.order-xl-2{-ms-flex-order:2;order:2}.order-xl-3{-ms-flex-order:3;order:3}.order-xl-4{-ms-flex-order:4;order:4}.order-xl-5{-ms-flex-order:5;order:5}.order-xl-6{-ms-flex-order:6;order:6}.order-xl-7{-ms-flex-order:7;order:7}.order-xl-8{-ms-flex-order:8;order:8}.order-xl-9{-ms-flex-order:9;order:9}.order-xl-10{-ms-flex-order:10;order:10}.order-xl-11{-ms-flex-order:11;order:11}.order-xl-12{-ms-flex-order:12;order:12}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.333333%}.offset-xl-2{margin-left:16.666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.333333%}.offset-xl-5{margin-left:41.666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.333333%}.offset-xl-8{margin-left:66.666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.333333%}.offset-xl-11{margin-left:91.666667%}}.table{width:100%;margin-bottom:1rem;color:#212529}.table td,.table th{padding:.75rem;vertical-align:top;border-top:1px solid #dee2e6}.table thead th{vertical-align:bottom;border-bottom:2px solid #dee2e6}.table tbody+tbody{border-top:2px solid #dee2e6}.table-sm td,.table-sm th{padding:.3rem}.table-bordered{border:1px solid #dee2e6}.table-bordered td,.table-bordered th{border:1px solid #dee2e6}.table-bordered thead td,.table-bordered thead th{border-bottom-width:2px}.table-borderless tbody+tbody,.table-borderless td,.table-borderless th,.table-borderless thead th{border:0}.table-striped tbody tr:nth-of-type(odd){background-color:rgba(0,0,0,.05)}.table-hover tbody tr:hover{color:#212529;background-color:rgba(0,0,0,.075)}.table-primary,.table-primary>td,.table-primary>th{background-color:#b8daff}.table-primary tbody+tbody,.table-primary td,.table-primary th,.table-primary thead th{border-color:#7abaff}.table-hover .table-primary:hover{background-color:#9fcdff}.table-hover .table-primary:hover>td,.table-hover .table-primary:hover>th{background-color:#9fcdff}.table-secondary,.table-secondary>td,.table-secondary>th{background-color:#d6d8db}.table-secondary tbody+tbody,.table-secondary td,.table-secondary th,.table-secondary thead th{border-color:#b3b7bb}.table-hover .table-secondary:hover{background-color:#c8cbcf}.table-hover .table-secondary:hover>td,.table-hover .table-secondary:hover>th{background-color:#c8cbcf}.table-success,.table-success>td,.table-success>th{background-color:#c3e6cb}.table-success tbody+tbody,.table-success td,.table-success th,.table-success thead th{border-color:#8fd19e}.table-hover .table-success:hover{background-color:#b1dfbb}.table-hover .table-success:hover>td,.table-hover .table-success:hover>th{background-color:#b1dfbb}.table-info,.table-info>td,.table-info>th{background-color:#bee5eb}.table-info tbody+tbody,.table-info td,.table-info th,.table-info thead th{border-color:#86cfda}.table-hover .table-info:hover{background-color:#abdde5}.table-hover .table-info:hover>td,.table-hover .table-info:hover>th{background-color:#abdde5}.table-warning,.table-warning>td,.table-warning>th{background-color:#ffeeba}.table-warning tbody+tbody,.table-warning td,.table-warning th,.table-warning thead th{border-color:#ffdf7e}.table-hover .table-warning:hover{background-color:#ffe8a1}.table-hover .table-warning:hover>td,.table-hover .table-warning:hover>th{background-color:#ffe8a1}.table-danger,.table-danger>td,.table-danger>th{background-color:#f5c6cb}.table-danger tbody+tbody,.table-danger td,.table-danger th,.table-danger thead th{border-color:#ed969e}.table-hover .table-danger:hover{background-color:#f1b0b7}.table-hover .table-danger:hover>td,.table-hover .table-danger:hover>th{background-color:#f1b0b7}.table-light,.table-light>td,.table-light>th{background-color:#fdfdfe}.table-light tbody+tbody,.table-light td,.table-light th,.table-light thead th{border-color:#fbfcfc}.table-hover .table-light:hover{background-color:#ececf6}.table-hover .table-light:hover>td,.table-hover .table-light:hover>th{background-color:#ececf6}.table-dark,.table-dark>td,.table-dark>th{background-color:#c6c8ca}.table-dark tbody+tbody,.table-dark td,.table-dark th,.table-dark thead th{border-color:#95999c}.table-hover .table-dark:hover{background-color:#b9bbbe}.table-hover .table-dark:hover>td,.table-hover .table-dark:hover>th{background-color:#b9bbbe}.table-active,.table-active>td,.table-active>th{background-color:rgba(0,0,0,.075)}.table-hover .table-active:hover{background-color:rgba(0,0,0,.075)}.table-hover .table-active:hover>td,.table-hover .table-active:hover>th{background-color:rgba(0,0,0,.075)}.table .thead-dark th{color:#fff;background-color:#343a40;border-color:#454d55}.table .thead-light th{color:#495057;background-color:#e9ecef;border-color:#dee2e6}.table-dark{color:#fff;background-color:#343a40}.table-dark td,.table-dark th,.table-dark thead th{border-color:#454d55}.table-dark.table-bordered{border:0}.table-dark.table-striped tbody tr:nth-of-type(odd){background-color:rgba(255,255,255,.05)}.table-dark.table-hover tbody tr:hover{color:#fff;background-color:rgba(255,255,255,.075)}@media (max-width:575.98px){.table-responsive-sm{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-sm>.table-bordered{border:0}}@media (max-width:767.98px){.table-responsive-md{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-md>.table-bordered{border:0}}@media (max-width:991.98px){.table-responsive-lg{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-lg>.table-bordered{border:0}}@media (max-width:1199.98px){.table-responsive-xl{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive-xl>.table-bordered{border:0}}.table-responsive{display:block;width:100%;overflow-x:auto;-webkit-overflow-scrolling:touch}.table-responsive>.table-bordered{border:0}.form-control{display:block;width:100%;height:calc(1.5em + .75rem + 2px);padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:.25rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-control{transition:none}}.form-control::-ms-expand{background-color:transparent;border:0}.form-control:focus{color:#495057;background-color:#fff;border-color:#80bdff;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.form-control::-webkit-input-placeholder{color:#6c757d;opacity:1}.form-control::-moz-placeholder{color:#6c757d;opacity:1}.form-control:-ms-input-placeholder{color:#6c757d;opacity:1}.form-control::-ms-input-placeholder{color:#6c757d;opacity:1}.form-control::placeholder{color:#6c757d;opacity:1}.form-control:disabled,.form-control[readonly]{background-color:#e9ecef;opacity:1}select.form-control:focus::-ms-value{color:#495057;background-color:#fff}.form-control-file,.form-control-range{display:block;width:100%}.col-form-label{padding-top:calc(.375rem + 1px);padding-bottom:calc(.375rem + 1px);margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(.5rem + 1px);padding-bottom:calc(.5rem + 1px);font-size:1.25rem;line-height:1.5}.col-form-label-sm{padding-top:calc(.25rem + 1px);padding-bottom:calc(.25rem + 1px);font-size:.875rem;line-height:1.5}.form-control-plaintext{display:block;width:100%;padding-top:.375rem;padding-bottom:.375rem;margin-bottom:0;line-height:1.5;color:#212529;background-color:transparent;border:solid transparent;border-width:1px 0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm{padding-right:0;padding-left:0}.form-control-sm{height:calc(1.5em + .5rem + 2px);padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.form-control-lg{height:calc(1.5em + 1rem + 2px);padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}select.form-control[multiple],select.form-control[size]{height:auto}textarea.form-control{height:auto}.form-group{margin-bottom:1rem}.form-text{display:block;margin-top:.25rem}.form-row{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-right:-5px;margin-left:-5px}.form-row>.col,.form-row>[class*=col-]{padding-right:5px;padding-left:5px}.form-check{position:relative;display:block;padding-left:1.25rem}.form-check-input{position:absolute;margin-top:.3rem;margin-left:-1.25rem}.form-check-input:disabled~.form-check-label{color:#6c757d}.form-check-label{margin-bottom:0}.form-check-inline{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center;padding-left:0;margin-right:.75rem}.form-check-inline .form-check-input{position:static;margin-top:0;margin-right:.3125rem;margin-left:0}.valid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#28a745}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;line-height:1.5;color:#fff;background-color:rgba(40,167,69,.9);border-radius:.25rem}.form-control.is-valid,.was-validated .form-control:valid{border-color:#28a745;padding-right:calc(1.5em + .75rem);background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\");background-repeat:no-repeat;background-position:center right calc(.375em + .1875rem);background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-valid:focus,.was-validated .form-control:valid:focus{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.form-control.is-valid~.valid-feedback,.form-control.is-valid~.valid-tooltip,.was-validated .form-control:valid~.valid-feedback,.was-validated .form-control:valid~.valid-tooltip{display:block}.was-validated textarea.form-control:valid,textarea.form-control.is-valid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.custom-select.is-valid,.was-validated .custom-select:valid{border-color:#28a745;padding-right:calc((1em + .75rem) * 3 / 4 + 1.75rem);background:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e\") no-repeat right .75rem center/8px 10px,url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\") #fff no-repeat center right 1.75rem/calc(.75em + .375rem) calc(.75em + .375rem)}.custom-select.is-valid:focus,.was-validated .custom-select:valid:focus{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.custom-select.is-valid~.valid-feedback,.custom-select.is-valid~.valid-tooltip,.was-validated .custom-select:valid~.valid-feedback,.was-validated .custom-select:valid~.valid-tooltip{display:block}.form-control-file.is-valid~.valid-feedback,.form-control-file.is-valid~.valid-tooltip,.was-validated .form-control-file:valid~.valid-feedback,.was-validated .form-control-file:valid~.valid-tooltip{display:block}.form-check-input.is-valid~.form-check-label,.was-validated .form-check-input:valid~.form-check-label{color:#28a745}.form-check-input.is-valid~.valid-feedback,.form-check-input.is-valid~.valid-tooltip,.was-validated .form-check-input:valid~.valid-feedback,.was-validated .form-check-input:valid~.valid-tooltip{display:block}.custom-control-input.is-valid~.custom-control-label,.was-validated .custom-control-input:valid~.custom-control-label{color:#28a745}.custom-control-input.is-valid~.custom-control-label::before,.was-validated .custom-control-input:valid~.custom-control-label::before{border-color:#28a745}.custom-control-input.is-valid~.valid-feedback,.custom-control-input.is-valid~.valid-tooltip,.was-validated .custom-control-input:valid~.valid-feedback,.was-validated .custom-control-input:valid~.valid-tooltip{display:block}.custom-control-input.is-valid:checked~.custom-control-label::before,.was-validated .custom-control-input:valid:checked~.custom-control-label::before{border-color:#34ce57;background-color:#34ce57}.custom-control-input.is-valid:focus~.custom-control-label::before,.was-validated .custom-control-input:valid:focus~.custom-control-label::before{box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.custom-control-input.is-valid:focus:not(:checked)~.custom-control-label::before,.was-validated .custom-control-input:valid:focus:not(:checked)~.custom-control-label::before{border-color:#28a745}.custom-file-input.is-valid~.custom-file-label,.was-validated .custom-file-input:valid~.custom-file-label{border-color:#28a745}.custom-file-input.is-valid~.valid-feedback,.custom-file-input.is-valid~.valid-tooltip,.was-validated .custom-file-input:valid~.valid-feedback,.was-validated .custom-file-input:valid~.valid-tooltip{display:block}.custom-file-input.is-valid:focus~.custom-file-label,.was-validated .custom-file-input:valid:focus~.custom-file-label{border-color:#28a745;box-shadow:0 0 0 .2rem rgba(40,167,69,.25)}.invalid-feedback{display:none;width:100%;margin-top:.25rem;font-size:80%;color:#dc3545}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;line-height:1.5;color:#fff;background-color:rgba(220,53,69,.9);border-radius:.25rem}.form-control.is-invalid,.was-validated .form-control:invalid{border-color:#dc3545;padding-right:calc(1.5em + .75rem);background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='%23dc3545' viewBox='-2 -2 7 7'%3e%3cpath stroke='%23dc3545' d='M0 0l3 3m0-3L0 3'/%3e%3ccircle r='.5'/%3e%3ccircle cx='3' r='.5'/%3e%3ccircle cy='3' r='.5'/%3e%3ccircle cx='3' cy='3' r='.5'/%3e%3c/svg%3E\");background-repeat:no-repeat;background-position:center right calc(.375em + .1875rem);background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-invalid:focus,.was-validated .form-control:invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.form-control.is-invalid~.invalid-feedback,.form-control.is-invalid~.invalid-tooltip,.was-validated .form-control:invalid~.invalid-feedback,.was-validated .form-control:invalid~.invalid-tooltip{display:block}.was-validated textarea.form-control:invalid,textarea.form-control.is-invalid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.custom-select.is-invalid,.was-validated .custom-select:invalid{border-color:#dc3545;padding-right:calc((1em + .75rem) * 3 / 4 + 1.75rem);background:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e\") no-repeat right .75rem center/8px 10px,url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='%23dc3545' viewBox='-2 -2 7 7'%3e%3cpath stroke='%23dc3545' d='M0 0l3 3m0-3L0 3'/%3e%3ccircle r='.5'/%3e%3ccircle cx='3' r='.5'/%3e%3ccircle cy='3' r='.5'/%3e%3ccircle cx='3' cy='3' r='.5'/%3e%3c/svg%3E\") #fff no-repeat center right 1.75rem/calc(.75em + .375rem) calc(.75em + .375rem)}.custom-select.is-invalid:focus,.was-validated .custom-select:invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.custom-select.is-invalid~.invalid-feedback,.custom-select.is-invalid~.invalid-tooltip,.was-validated .custom-select:invalid~.invalid-feedback,.was-validated .custom-select:invalid~.invalid-tooltip{display:block}.form-control-file.is-invalid~.invalid-feedback,.form-control-file.is-invalid~.invalid-tooltip,.was-validated .form-control-file:invalid~.invalid-feedback,.was-validated .form-control-file:invalid~.invalid-tooltip{display:block}.form-check-input.is-invalid~.form-check-label,.was-validated .form-check-input:invalid~.form-check-label{color:#dc3545}.form-check-input.is-invalid~.invalid-feedback,.form-check-input.is-invalid~.invalid-tooltip,.was-validated .form-check-input:invalid~.invalid-feedback,.was-validated .form-check-input:invalid~.invalid-tooltip{display:block}.custom-control-input.is-invalid~.custom-control-label,.was-validated .custom-control-input:invalid~.custom-control-label{color:#dc3545}.custom-control-input.is-invalid~.custom-control-label::before,.was-validated .custom-control-input:invalid~.custom-control-label::before{border-color:#dc3545}.custom-control-input.is-invalid~.invalid-feedback,.custom-control-input.is-invalid~.invalid-tooltip,.was-validated .custom-control-input:invalid~.invalid-feedback,.was-validated .custom-control-input:invalid~.invalid-tooltip{display:block}.custom-control-input.is-invalid:checked~.custom-control-label::before,.was-validated .custom-control-input:invalid:checked~.custom-control-label::before{border-color:#e4606d;background-color:#e4606d}.custom-control-input.is-invalid:focus~.custom-control-label::before,.was-validated .custom-control-input:invalid:focus~.custom-control-label::before{box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.custom-control-input.is-invalid:focus:not(:checked)~.custom-control-label::before,.was-validated .custom-control-input:invalid:focus:not(:checked)~.custom-control-label::before{border-color:#dc3545}.custom-file-input.is-invalid~.custom-file-label,.was-validated .custom-file-input:invalid~.custom-file-label{border-color:#dc3545}.custom-file-input.is-invalid~.invalid-feedback,.custom-file-input.is-invalid~.invalid-tooltip,.was-validated .custom-file-input:invalid~.invalid-feedback,.was-validated .custom-file-input:invalid~.invalid-tooltip{display:block}.custom-file-input.is-invalid:focus~.custom-file-label,.was-validated .custom-file-input:invalid:focus~.custom-file-label{border-color:#dc3545;box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.form-inline{display:-ms-flexbox;display:flex;-ms-flex-flow:row wrap;flex-flow:row wrap;-ms-flex-align:center;align-items:center}.form-inline .form-check{width:100%}@media (min-width:576px){.form-inline label{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;margin-bottom:0}.form-inline .form-group{display:-ms-flexbox;display:flex;-ms-flex:0 0 auto;flex:0 0 auto;-ms-flex-flow:row wrap;flex-flow:row wrap;-ms-flex-align:center;align-items:center;margin-bottom:0}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-plaintext{display:inline-block}.form-inline .custom-select,.form-inline .input-group{width:auto}.form-inline .form-check{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:auto;padding-left:0}.form-inline .form-check-input{position:relative;-ms-flex-negative:0;flex-shrink:0;margin-top:0;margin-right:.25rem;margin-left:0}.form-inline .custom-control{-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.form-inline .custom-control-label{margin-bottom:0}}.btn{display:inline-block;font-weight:400;color:#212529;text-align:center;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:transparent;border:1px solid transparent;padding:.375rem .75rem;font-size:1rem;line-height:1.5;border-radius:.25rem;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.btn{transition:none}}.btn:hover{color:#212529;text-decoration:none}.btn.focus,.btn:focus{outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.btn.disabled,.btn:disabled{opacity:.65}a.btn.disabled,fieldset:disabled a.btn{pointer-events:none}.btn-primary{color:#fff;background-color:#007bff;border-color:#007bff}.btn-primary:hover{color:#fff;background-color:#0069d9;border-color:#0062cc}.btn-primary.focus,.btn-primary:focus{box-shadow:0 0 0 .2rem rgba(38,143,255,.5)}.btn-primary.disabled,.btn-primary:disabled{color:#fff;background-color:#007bff;border-color:#007bff}.btn-primary:not(:disabled):not(.disabled).active,.btn-primary:not(:disabled):not(.disabled):active,.show>.btn-primary.dropdown-toggle{color:#fff;background-color:#0062cc;border-color:#005cbf}.btn-primary:not(:disabled):not(.disabled).active:focus,.btn-primary:not(:disabled):not(.disabled):active:focus,.show>.btn-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(38,143,255,.5)}.btn-secondary{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:hover{color:#fff;background-color:#5a6268;border-color:#545b62}.btn-secondary.focus,.btn-secondary:focus{box-shadow:0 0 0 .2rem rgba(130,138,145,.5)}.btn-secondary.disabled,.btn-secondary:disabled{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:not(:disabled):not(.disabled).active,.btn-secondary:not(:disabled):not(.disabled):active,.show>.btn-secondary.dropdown-toggle{color:#fff;background-color:#545b62;border-color:#4e555b}.btn-secondary:not(:disabled):not(.disabled).active:focus,.btn-secondary:not(:disabled):not(.disabled):active:focus,.show>.btn-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(130,138,145,.5)}.btn-success{color:#fff;background-color:#28a745;border-color:#28a745}.btn-success:hover{color:#fff;background-color:#218838;border-color:#1e7e34}.btn-success.focus,.btn-success:focus{box-shadow:0 0 0 .2rem rgba(72,180,97,.5)}.btn-success.disabled,.btn-success:disabled{color:#fff;background-color:#28a745;border-color:#28a745}.btn-success:not(:disabled):not(.disabled).active,.btn-success:not(:disabled):not(.disabled):active,.show>.btn-success.dropdown-toggle{color:#fff;background-color:#1e7e34;border-color:#1c7430}.btn-success:not(:disabled):not(.disabled).active:focus,.btn-success:not(:disabled):not(.disabled):active:focus,.show>.btn-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(72,180,97,.5)}.btn-info{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:hover{color:#fff;background-color:#138496;border-color:#117a8b}.btn-info.focus,.btn-info:focus{box-shadow:0 0 0 .2rem rgba(58,176,195,.5)}.btn-info.disabled,.btn-info:disabled{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-info:not(:disabled):not(.disabled).active,.btn-info:not(:disabled):not(.disabled):active,.show>.btn-info.dropdown-toggle{color:#fff;background-color:#117a8b;border-color:#10707f}.btn-info:not(:disabled):not(.disabled).active:focus,.btn-info:not(:disabled):not(.disabled):active:focus,.show>.btn-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(58,176,195,.5)}.btn-warning{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-warning:hover{color:#212529;background-color:#e0a800;border-color:#d39e00}.btn-warning.focus,.btn-warning:focus{box-shadow:0 0 0 .2rem rgba(222,170,12,.5)}.btn-warning.disabled,.btn-warning:disabled{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-warning:not(:disabled):not(.disabled).active,.btn-warning:not(:disabled):not(.disabled):active,.show>.btn-warning.dropdown-toggle{color:#212529;background-color:#d39e00;border-color:#c69500}.btn-warning:not(:disabled):not(.disabled).active:focus,.btn-warning:not(:disabled):not(.disabled):active:focus,.show>.btn-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(222,170,12,.5)}.btn-danger{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-danger:hover{color:#fff;background-color:#c82333;border-color:#bd2130}.btn-danger.focus,.btn-danger:focus{box-shadow:0 0 0 .2rem rgba(225,83,97,.5)}.btn-danger.disabled,.btn-danger:disabled{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-danger:not(:disabled):not(.disabled).active,.btn-danger:not(:disabled):not(.disabled):active,.show>.btn-danger.dropdown-toggle{color:#fff;background-color:#bd2130;border-color:#b21f2d}.btn-danger:not(:disabled):not(.disabled).active:focus,.btn-danger:not(:disabled):not(.disabled):active:focus,.show>.btn-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(225,83,97,.5)}.btn-light{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:hover{color:#212529;background-color:#e2e6ea;border-color:#dae0e5}.btn-light.focus,.btn-light:focus{box-shadow:0 0 0 .2rem rgba(216,217,219,.5)}.btn-light.disabled,.btn-light:disabled{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:not(:disabled):not(.disabled).active,.btn-light:not(:disabled):not(.disabled):active,.show>.btn-light.dropdown-toggle{color:#212529;background-color:#dae0e5;border-color:#d3d9df}.btn-light:not(:disabled):not(.disabled).active:focus,.btn-light:not(:disabled):not(.disabled):active:focus,.show>.btn-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(216,217,219,.5)}.btn-dark{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:hover{color:#fff;background-color:#23272b;border-color:#1d2124}.btn-dark.focus,.btn-dark:focus{box-shadow:0 0 0 .2rem rgba(82,88,93,.5)}.btn-dark.disabled,.btn-dark:disabled{color:#fff;background-color:#343a40;border-color:#343a40}.btn-dark:not(:disabled):not(.disabled).active,.btn-dark:not(:disabled):not(.disabled):active,.show>.btn-dark.dropdown-toggle{color:#fff;background-color:#1d2124;border-color:#171a1d}.btn-dark:not(:disabled):not(.disabled).active:focus,.btn-dark:not(:disabled):not(.disabled):active:focus,.show>.btn-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(82,88,93,.5)}.btn-outline-primary{color:#007bff;border-color:#007bff}.btn-outline-primary:hover{color:#fff;background-color:#007bff;border-color:#007bff}.btn-outline-primary.focus,.btn-outline-primary:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-outline-primary.disabled,.btn-outline-primary:disabled{color:#007bff;background-color:transparent}.btn-outline-primary:not(:disabled):not(.disabled).active,.btn-outline-primary:not(:disabled):not(.disabled):active,.show>.btn-outline-primary.dropdown-toggle{color:#fff;background-color:#007bff;border-color:#007bff}.btn-outline-primary:not(:disabled):not(.disabled).active:focus,.btn-outline-primary:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-primary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.btn-outline-secondary{color:#6c757d;border-color:#6c757d}.btn-outline-secondary:hover{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-secondary.focus,.btn-outline-secondary:focus{box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.btn-outline-secondary.disabled,.btn-outline-secondary:disabled{color:#6c757d;background-color:transparent}.btn-outline-secondary:not(:disabled):not(.disabled).active,.btn-outline-secondary:not(:disabled):not(.disabled):active,.show>.btn-outline-secondary.dropdown-toggle{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-secondary:not(:disabled):not(.disabled).active:focus,.btn-outline-secondary:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.btn-outline-success{color:#28a745;border-color:#28a745}.btn-outline-success:hover{color:#fff;background-color:#28a745;border-color:#28a745}.btn-outline-success.focus,.btn-outline-success:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-outline-success.disabled,.btn-outline-success:disabled{color:#28a745;background-color:transparent}.btn-outline-success:not(:disabled):not(.disabled).active,.btn-outline-success:not(:disabled):not(.disabled):active,.show>.btn-outline-success.dropdown-toggle{color:#fff;background-color:#28a745;border-color:#28a745}.btn-outline-success:not(:disabled):not(.disabled).active:focus,.btn-outline-success:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-success.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.btn-outline-info{color:#17a2b8;border-color:#17a2b8}.btn-outline-info:hover{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info.focus,.btn-outline-info:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-outline-info.disabled,.btn-outline-info:disabled{color:#17a2b8;background-color:transparent}.btn-outline-info:not(:disabled):not(.disabled).active,.btn-outline-info:not(:disabled):not(.disabled):active,.show>.btn-outline-info.dropdown-toggle{color:#fff;background-color:#17a2b8;border-color:#17a2b8}.btn-outline-info:not(:disabled):not(.disabled).active:focus,.btn-outline-info:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-info.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.btn-outline-warning{color:#ffc107;border-color:#ffc107}.btn-outline-warning:hover{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-outline-warning.focus,.btn-outline-warning:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-outline-warning.disabled,.btn-outline-warning:disabled{color:#ffc107;background-color:transparent}.btn-outline-warning:not(:disabled):not(.disabled).active,.btn-outline-warning:not(:disabled):not(.disabled):active,.show>.btn-outline-warning.dropdown-toggle{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-outline-warning:not(:disabled):not(.disabled).active:focus,.btn-outline-warning:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-warning.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.btn-outline-danger{color:#dc3545;border-color:#dc3545}.btn-outline-danger:hover{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-outline-danger.focus,.btn-outline-danger:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-outline-danger.disabled,.btn-outline-danger:disabled{color:#dc3545;background-color:transparent}.btn-outline-danger:not(:disabled):not(.disabled).active,.btn-outline-danger:not(:disabled):not(.disabled):active,.show>.btn-outline-danger.dropdown-toggle{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-outline-danger:not(:disabled):not(.disabled).active:focus,.btn-outline-danger:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-danger.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.btn-outline-light{color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:hover{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light.focus,.btn-outline-light:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-light.disabled,.btn-outline-light:disabled{color:#f8f9fa;background-color:transparent}.btn-outline-light:not(:disabled):not(.disabled).active,.btn-outline-light:not(:disabled):not(.disabled):active,.show>.btn-outline-light.dropdown-toggle{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:not(:disabled):not(.disabled).active:focus,.btn-outline-light:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-light.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.btn-outline-dark{color:#343a40;border-color:#343a40}.btn-outline-dark:hover{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark.focus,.btn-outline-dark:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-outline-dark.disabled,.btn-outline-dark:disabled{color:#343a40;background-color:transparent}.btn-outline-dark:not(:disabled):not(.disabled).active,.btn-outline-dark:not(:disabled):not(.disabled):active,.show>.btn-outline-dark.dropdown-toggle{color:#fff;background-color:#343a40;border-color:#343a40}.btn-outline-dark:not(:disabled):not(.disabled).active:focus,.btn-outline-dark:not(:disabled):not(.disabled):active:focus,.show>.btn-outline-dark.dropdown-toggle:focus{box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.btn-link{font-weight:400;color:#007bff;text-decoration:none}.btn-link:hover{color:#0056b3;text-decoration:underline}.btn-link.focus,.btn-link:focus{text-decoration:underline;box-shadow:none}.btn-link.disabled,.btn-link:disabled{color:#6c757d;pointer-events:none}.btn-group-lg>.btn,.btn-lg{padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.btn-group-sm>.btn,.btn-sm{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:.5rem}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{transition:opacity .15s linear}@media (prefers-reduced-motion:reduce){.fade{transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{position:relative;height:0;overflow:hidden;transition:height .35s ease}@media (prefers-reduced-motion:reduce){.collapsing{transition:none}}.dropdown,.dropleft,.dropright,.dropup{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty::after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-menu-left{right:auto;left:0}.dropdown-menu-right{right:0;left:auto}@media (min-width:576px){.dropdown-menu-sm-left{right:auto;left:0}.dropdown-menu-sm-right{right:0;left:auto}}@media (min-width:768px){.dropdown-menu-md-left{right:auto;left:0}.dropdown-menu-md-right{right:0;left:auto}}@media (min-width:992px){.dropdown-menu-lg-left{right:auto;left:0}.dropdown-menu-lg-right{right:0;left:auto}}@media (min-width:1200px){.dropdown-menu-xl-left{right:auto;left:0}.dropdown-menu-xl-right{right:0;left:auto}}.dropup .dropdown-menu{top:auto;bottom:100%;margin-top:0;margin-bottom:.125rem}.dropup .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty::after{margin-left:0}.dropright .dropdown-menu{top:0;right:auto;left:100%;margin-top:0;margin-left:.125rem}.dropright .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright .dropdown-toggle:empty::after{margin-left:0}.dropright .dropdown-toggle::after{vertical-align:0}.dropleft .dropdown-menu{top:0;right:100%;left:auto;margin-top:0;margin-right:.125rem}.dropleft .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\"}.dropleft .dropdown-toggle::after{display:none}.dropleft .dropdown-toggle::before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft .dropdown-toggle:empty::after{margin-left:0}.dropleft .dropdown-toggle::before{vertical-align:0}.dropdown-menu[x-placement^=bottom],.dropdown-menu[x-placement^=left],.dropdown-menu[x-placement^=right],.dropdown-menu[x-placement^=top]{right:auto;bottom:auto}.dropdown-divider{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:focus,.dropdown-item:hover{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#007bff}.dropdown-item.disabled,.dropdown-item:disabled{color:#6c757d;pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.875rem;color:#6c757d;white-space:nowrap}.dropdown-item-text{display:block;padding:.25rem 1.5rem;color:#212529}.btn-group,.btn-group-vertical{position:relative;display:-ms-inline-flexbox;display:inline-flex;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;-ms-flex:1 1 auto;flex:1 1 auto}.btn-group-vertical>.btn:hover,.btn-group>.btn:hover{z-index:1}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus{z-index:1}.btn-toolbar{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:start;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group>.btn-group:not(:first-child),.btn-group>.btn:not(:first-child){margin-left:-1px}.btn-group>.btn-group:not(:last-child)>.btn,.btn-group>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:not(:first-child)>.btn,.btn-group>.btn:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:.5625rem;padding-left:.5625rem}.dropdown-toggle-split::after,.dropright .dropdown-toggle-split::after,.dropup .dropdown-toggle-split::after{margin-left:0}.dropleft .dropdown-toggle-split::before{margin-right:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-right:.375rem;padding-left:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-right:.75rem;padding-left:.75rem}.btn-group-vertical{-ms-flex-direction:column;flex-direction:column;-ms-flex-align:start;align-items:flex-start;-ms-flex-pack:center;justify-content:center}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group{width:100%}.btn-group-vertical>.btn-group:not(:first-child),.btn-group-vertical>.btn:not(:first-child){margin-top:-1px}.btn-group-vertical>.btn-group:not(:last-child)>.btn,.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child)>.btn,.btn-group-vertical>.btn:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.btn-group-toggle>.btn,.btn-group-toggle>.btn-group>.btn{margin-bottom:0}.btn-group-toggle>.btn input[type=checkbox],.btn-group-toggle>.btn input[type=radio],.btn-group-toggle>.btn-group>.btn input[type=checkbox],.btn-group-toggle>.btn-group>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:stretch;align-items:stretch;width:100%}.input-group>.custom-file,.input-group>.custom-select,.input-group>.form-control,.input-group>.form-control-plaintext{position:relative;-ms-flex:1 1 auto;flex:1 1 auto;width:1%;margin-bottom:0}.input-group>.custom-file+.custom-file,.input-group>.custom-file+.custom-select,.input-group>.custom-file+.form-control,.input-group>.custom-select+.custom-file,.input-group>.custom-select+.custom-select,.input-group>.custom-select+.form-control,.input-group>.form-control+.custom-file,.input-group>.form-control+.custom-select,.input-group>.form-control+.form-control,.input-group>.form-control-plaintext+.custom-file,.input-group>.form-control-plaintext+.custom-select,.input-group>.form-control-plaintext+.form-control{margin-left:-1px}.input-group>.custom-file .custom-file-input:focus~.custom-file-label,.input-group>.custom-select:focus,.input-group>.form-control:focus{z-index:3}.input-group>.custom-file .custom-file-input:focus{z-index:4}.input-group>.custom-select:not(:last-child),.input-group>.form-control:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.custom-select:not(:first-child),.input-group>.form-control:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.input-group>.custom-file{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.input-group>.custom-file:not(:last-child) .custom-file-label,.input-group>.custom-file:not(:last-child) .custom-file-label::after{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.custom-file:not(:first-child) .custom-file-label{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-append,.input-group-prepend{display:-ms-flexbox;display:flex}.input-group-append .btn,.input-group-prepend .btn{position:relative;z-index:2}.input-group-append .btn:focus,.input-group-prepend .btn:focus{z-index:3}.input-group-append .btn+.btn,.input-group-append .btn+.input-group-text,.input-group-append .input-group-text+.btn,.input-group-append .input-group-text+.input-group-text,.input-group-prepend .btn+.btn,.input-group-prepend .btn+.input-group-text,.input-group-prepend .input-group-text+.btn,.input-group-prepend .input-group-text+.input-group-text{margin-left:-1px}.input-group-prepend{margin-right:-1px}.input-group-append{margin-left:-1px}.input-group-text{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;padding:.375rem .75rem;margin-bottom:0;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;text-align:center;white-space:nowrap;background-color:#e9ecef;border:1px solid #ced4da;border-radius:.25rem}.input-group-text input[type=checkbox],.input-group-text input[type=radio]{margin-top:0}.input-group-lg>.custom-select,.input-group-lg>.form-control:not(textarea){height:calc(1.5em + 1rem + 2px)}.input-group-lg>.custom-select,.input-group-lg>.form-control,.input-group-lg>.input-group-append>.btn,.input-group-lg>.input-group-append>.input-group-text,.input-group-lg>.input-group-prepend>.btn,.input-group-lg>.input-group-prepend>.input-group-text{padding:.5rem 1rem;font-size:1.25rem;line-height:1.5;border-radius:.3rem}.input-group-sm>.custom-select,.input-group-sm>.form-control:not(textarea){height:calc(1.5em + .5rem + 2px)}.input-group-sm>.custom-select,.input-group-sm>.form-control,.input-group-sm>.input-group-append>.btn,.input-group-sm>.input-group-append>.input-group-text,.input-group-sm>.input-group-prepend>.btn,.input-group-sm>.input-group-prepend>.input-group-text{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}.input-group-lg>.custom-select,.input-group-sm>.custom-select{padding-right:1.75rem}.input-group>.input-group-append:last-child>.btn:not(:last-child):not(.dropdown-toggle),.input-group>.input-group-append:last-child>.input-group-text:not(:last-child),.input-group>.input-group-append:not(:last-child)>.btn,.input-group>.input-group-append:not(:last-child)>.input-group-text,.input-group>.input-group-prepend>.btn,.input-group>.input-group-prepend>.input-group-text{border-top-right-radius:0;border-bottom-right-radius:0}.input-group>.input-group-append>.btn,.input-group>.input-group-append>.input-group-text,.input-group>.input-group-prepend:first-child>.btn:not(:first-child),.input-group>.input-group-prepend:first-child>.input-group-text:not(:first-child),.input-group>.input-group-prepend:not(:first-child)>.btn,.input-group>.input-group-prepend:not(:first-child)>.input-group-text{border-top-left-radius:0;border-bottom-left-radius:0}.custom-control{position:relative;display:block;min-height:1.5rem;padding-left:1.5rem}.custom-control-inline{display:-ms-inline-flexbox;display:inline-flex;margin-right:1rem}.custom-control-input{position:absolute;z-index:-1;opacity:0}.custom-control-input:checked~.custom-control-label::before{color:#fff;border-color:#007bff;background-color:#007bff}.custom-control-input:focus~.custom-control-label::before{box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-control-input:focus:not(:checked)~.custom-control-label::before{border-color:#80bdff}.custom-control-input:not(:disabled):active~.custom-control-label::before{color:#fff;background-color:#b3d7ff;border-color:#b3d7ff}.custom-control-input:disabled~.custom-control-label{color:#6c757d}.custom-control-input:disabled~.custom-control-label::before{background-color:#e9ecef}.custom-control-label{position:relative;margin-bottom:0;vertical-align:top}.custom-control-label::before{position:absolute;top:.25rem;left:-1.5rem;display:block;width:1rem;height:1rem;pointer-events:none;content:\"\";background-color:#fff;border:#adb5bd solid 1px}.custom-control-label::after{position:absolute;top:.25rem;left:-1.5rem;display:block;width:1rem;height:1rem;content:\"\";background:no-repeat 50%/50% 50%}.custom-checkbox .custom-control-label::before{border-radius:.25rem}.custom-checkbox .custom-control-input:checked~.custom-control-label::after{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3e%3c/svg%3e\")}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label::before{border-color:#007bff;background-color:#007bff}.custom-checkbox .custom-control-input:indeterminate~.custom-control-label::after{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3e%3cpath stroke='%23fff' d='M0 2h4'/%3e%3c/svg%3e\")}.custom-checkbox .custom-control-input:disabled:checked~.custom-control-label::before{background-color:rgba(0,123,255,.5)}.custom-checkbox .custom-control-input:disabled:indeterminate~.custom-control-label::before{background-color:rgba(0,123,255,.5)}.custom-radio .custom-control-label::before{border-radius:50%}.custom-radio .custom-control-input:checked~.custom-control-label::after{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e\")}.custom-radio .custom-control-input:disabled:checked~.custom-control-label::before{background-color:rgba(0,123,255,.5)}.custom-switch{padding-left:2.25rem}.custom-switch .custom-control-label::before{left:-2.25rem;width:1.75rem;pointer-events:all;border-radius:.5rem}.custom-switch .custom-control-label::after{top:calc(.25rem + 2px);left:calc(-2.25rem + 2px);width:calc(1rem - 4px);height:calc(1rem - 4px);background-color:#adb5bd;border-radius:.5rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-transform .15s ease-in-out;transition:transform .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:transform .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-transform .15s ease-in-out}@media (prefers-reduced-motion:reduce){.custom-switch .custom-control-label::after{transition:none}}.custom-switch .custom-control-input:checked~.custom-control-label::after{background-color:#fff;-webkit-transform:translateX(.75rem);transform:translateX(.75rem)}.custom-switch .custom-control-input:disabled:checked~.custom-control-label::before{background-color:rgba(0,123,255,.5)}.custom-select{display:inline-block;width:100%;height:calc(1.5em + .75rem + 2px);padding:.375rem 1.75rem .375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#495057;vertical-align:middle;background:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e\") no-repeat right .75rem center/8px 10px;background-color:#fff;border:1px solid #ced4da;border-radius:.25rem;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-select:focus{border-color:#80bdff;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-select:focus::-ms-value{color:#495057;background-color:#fff}.custom-select[multiple],.custom-select[size]:not([size=\"1\"]){height:auto;padding-right:.75rem;background-image:none}.custom-select:disabled{color:#6c757d;background-color:#e9ecef}.custom-select::-ms-expand{display:none}.custom-select-sm{height:calc(1.5em + .5rem + 2px);padding-top:.25rem;padding-bottom:.25rem;padding-left:.5rem;font-size:.875rem}.custom-select-lg{height:calc(1.5em + 1rem + 2px);padding-top:.5rem;padding-bottom:.5rem;padding-left:1rem;font-size:1.25rem}.custom-file{position:relative;display:inline-block;width:100%;height:calc(1.5em + .75rem + 2px);margin-bottom:0}.custom-file-input{position:relative;z-index:2;width:100%;height:calc(1.5em + .75rem + 2px);margin:0;opacity:0}.custom-file-input:focus~.custom-file-label{border-color:#80bdff;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.custom-file-input:disabled~.custom-file-label{background-color:#e9ecef}.custom-file-input:lang(en)~.custom-file-label::after{content:\"Browse\"}.custom-file-input~.custom-file-label[data-browse]::after{content:attr(data-browse)}.custom-file-label{position:absolute;top:0;right:0;left:0;z-index:1;height:calc(1.5em + .75rem + 2px);padding:.375rem .75rem;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;border:1px solid #ced4da;border-radius:.25rem}.custom-file-label::after{position:absolute;top:0;right:0;bottom:0;z-index:3;display:block;height:calc(1.5em + .75rem);padding:.375rem .75rem;line-height:1.5;color:#495057;content:\"Browse\";background-color:#e9ecef;border-left:inherit;border-radius:0 .25rem .25rem 0}.custom-range{width:100%;height:calc(1rem + .4rem);padding:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;appearance:none}.custom-range:focus{outline:0}.custom-range:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-range:focus::-ms-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .2rem rgba(0,123,255,.25)}.custom-range::-moz-focus-outer{border:0}.custom-range::-webkit-slider-thumb{width:1rem;height:1rem;margin-top:-.25rem;background-color:#007bff;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;-webkit-appearance:none;appearance:none}@media (prefers-reduced-motion:reduce){.custom-range::-webkit-slider-thumb{transition:none}}.custom-range::-webkit-slider-thumb:active{background-color:#b3d7ff}.custom-range::-webkit-slider-runnable-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.custom-range::-moz-range-thumb{width:1rem;height:1rem;background-color:#007bff;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;-moz-appearance:none;appearance:none}@media (prefers-reduced-motion:reduce){.custom-range::-moz-range-thumb{transition:none}}.custom-range::-moz-range-thumb:active{background-color:#b3d7ff}.custom-range::-moz-range-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.custom-range::-ms-thumb{width:1rem;height:1rem;margin-top:0;margin-right:.2rem;margin-left:.2rem;background-color:#007bff;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;appearance:none}@media (prefers-reduced-motion:reduce){.custom-range::-ms-thumb{transition:none}}.custom-range::-ms-thumb:active{background-color:#b3d7ff}.custom-range::-ms-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:transparent;border-color:transparent;border-width:.5rem}.custom-range::-ms-fill-lower{background-color:#dee2e6;border-radius:1rem}.custom-range::-ms-fill-upper{margin-right:15px;background-color:#dee2e6;border-radius:1rem}.custom-range:disabled::-webkit-slider-thumb{background-color:#adb5bd}.custom-range:disabled::-webkit-slider-runnable-track{cursor:default}.custom-range:disabled::-moz-range-thumb{background-color:#adb5bd}.custom-range:disabled::-moz-range-track{cursor:default}.custom-range:disabled::-ms-thumb{background-color:#adb5bd}.custom-control-label::before,.custom-file-label,.custom-select{transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.custom-control-label::before,.custom-file-label,.custom-select{transition:none}}.nav{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:.5rem 1rem}.nav-link:focus,.nav-link:hover{text-decoration:none}.nav-link.disabled{color:#6c757d;pointer-events:none;cursor:default}.nav-tabs{border-bottom:1px solid #dee2e6}.nav-tabs .nav-item{margin-bottom:-1px}.nav-tabs .nav-link{border:1px solid transparent;border-top-left-radius:.25rem;border-top-right-radius:.25rem}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{border-color:#e9ecef #e9ecef #dee2e6}.nav-tabs .nav-link.disabled{color:#6c757d;background-color:transparent;border-color:transparent}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{color:#495057;background-color:#fff;border-color:#dee2e6 #dee2e6 #fff}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.nav-pills .nav-link{border-radius:.25rem}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{color:#fff;background-color:#007bff}.nav-fill .nav-item{-ms-flex:1 1 auto;flex:1 1 auto;text-align:center}.nav-justified .nav-item{-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-positive:1;flex-grow:1;text-align:center}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{position:relative;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between;padding:.5rem 1rem}.navbar>.container,.navbar>.container-fluid{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}.navbar-brand{display:inline-block;padding-top:.3125rem;padding-bottom:.3125rem;margin-right:1rem;font-size:1.25rem;line-height:inherit;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-nav{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link{padding-right:0;padding-left:0}.navbar-nav .dropdown-menu{position:static;float:none}.navbar-text{display:inline-block;padding-top:.5rem;padding-bottom:.5rem}.navbar-collapse{-ms-flex-preferred-size:100%;flex-basis:100%;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center}.navbar-toggler{padding:.25rem .75rem;font-size:1.25rem;line-height:1;background-color:transparent;border:1px solid transparent;border-radius:.25rem}.navbar-toggler:focus,.navbar-toggler:hover{text-decoration:none}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;content:\"\";background:no-repeat center center;background-size:100% 100%}@media (max-width:575.98px){.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:576px){.navbar-expand-sm{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-sm .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-sm>.container,.navbar-expand-sm>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-sm .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}}@media (max-width:767.98px){.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:768px){.navbar-expand-md{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-md .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-md>.container,.navbar-expand-md>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-md .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}}@media (max-width:991.98px){.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:992px){.navbar-expand-lg{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-lg .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-lg>.container,.navbar-expand-lg>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-lg .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}}@media (max-width:1199.98px){.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{padding-right:0;padding-left:0}}@media (min-width:1200px){.navbar-expand-xl{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand-xl .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-xl>.container,.navbar-expand-xl>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand-xl .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}}.navbar-expand{-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-pack:start;justify-content:flex-start}.navbar-expand>.container,.navbar-expand>.container-fluid{padding-right:0;padding-left:0}.navbar-expand .navbar-nav{-ms-flex-direction:row;flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand>.container,.navbar-expand>.container-fluid{-ms-flex-wrap:nowrap;flex-wrap:nowrap}.navbar-expand .navbar-collapse{display:-ms-flexbox!important;display:flex!important;-ms-flex-preferred-size:auto;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-light .navbar-brand{color:rgba(0,0,0,.9)}.navbar-light .navbar-brand:focus,.navbar-light .navbar-brand:hover{color:rgba(0,0,0,.9)}.navbar-light .navbar-nav .nav-link{color:rgba(0,0,0,.5)}.navbar-light .navbar-nav .nav-link:focus,.navbar-light .navbar-nav .nav-link:hover{color:rgba(0,0,0,.7)}.navbar-light .navbar-nav .nav-link.disabled{color:rgba(0,0,0,.3)}.navbar-light .navbar-nav .active>.nav-link,.navbar-light .navbar-nav .nav-link.active,.navbar-light .navbar-nav .nav-link.show,.navbar-light .navbar-nav .show>.nav-link{color:rgba(0,0,0,.9)}.navbar-light .navbar-toggler{color:rgba(0,0,0,.5);border-color:rgba(0,0,0,.1)}.navbar-light .navbar-toggler-icon{background-image:url(\"data:image/svg+xml,%3csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3e%3cpath stroke='rgba(0, 0, 0, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\")}.navbar-light .navbar-text{color:rgba(0,0,0,.5)}.navbar-light .navbar-text a{color:rgba(0,0,0,.9)}.navbar-light .navbar-text a:focus,.navbar-light .navbar-text a:hover{color:rgba(0,0,0,.9)}.navbar-dark .navbar-brand{color:#fff}.navbar-dark .navbar-brand:focus,.navbar-dark .navbar-brand:hover{color:#fff}.navbar-dark .navbar-nav .nav-link{color:rgba(255,255,255,.5)}.navbar-dark .navbar-nav .nav-link:focus,.navbar-dark .navbar-nav .nav-link:hover{color:rgba(255,255,255,.75)}.navbar-dark .navbar-nav .nav-link.disabled{color:rgba(255,255,255,.25)}.navbar-dark .navbar-nav .active>.nav-link,.navbar-dark .navbar-nav .nav-link.active,.navbar-dark .navbar-nav .nav-link.show,.navbar-dark .navbar-nav .show>.nav-link{color:#fff}.navbar-dark .navbar-toggler{color:rgba(255,255,255,.5);border-color:rgba(255,255,255,.1)}.navbar-dark .navbar-toggler-icon{background-image:url(\"data:image/svg+xml,%3csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3e%3cpath stroke='rgba(255, 255, 255, 0.5)' stroke-width='2' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\")}.navbar-dark .navbar-text{color:rgba(255,255,255,.5)}.navbar-dark .navbar-text a{color:#fff}.navbar-dark .navbar-text a:focus,.navbar-dark .navbar-text a:hover{color:#fff}.card{position:relative;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#fff;background-clip:border-box;border:1px solid rgba(0,0,0,.125);border-radius:.25rem}.card>hr{margin-right:0;margin-left:0}.card>.list-group:first-child .list-group-item:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.card>.list-group:last-child .list-group-item:last-child{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.card-body{-ms-flex:1 1 auto;flex:1 1 auto;padding:1.25rem}.card-title{margin-bottom:.75rem}.card-subtitle{margin-top:-.375rem;margin-bottom:0}.card-text:last-child{margin-bottom:0}.card-link:hover{text-decoration:none}.card-link+.card-link{margin-left:1.25rem}.card-header{padding:.75rem 1.25rem;margin-bottom:0;background-color:rgba(0,0,0,.03);border-bottom:1px solid rgba(0,0,0,.125)}.card-header:first-child{border-radius:calc(.25rem - 1px) calc(.25rem - 1px) 0 0}.card-header+.list-group .list-group-item:first-child{border-top:0}.card-footer{padding:.75rem 1.25rem;background-color:rgba(0,0,0,.03);border-top:1px solid rgba(0,0,0,.125)}.card-footer:last-child{border-radius:0 0 calc(.25rem - 1px) calc(.25rem - 1px)}.card-header-tabs{margin-right:-.625rem;margin-bottom:-.75rem;margin-left:-.625rem;border-bottom:0}.card-header-pills{margin-right:-.625rem;margin-left:-.625rem}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:1.25rem}.card-img{width:100%;border-radius:calc(.25rem - 1px)}.card-img-top{width:100%;border-top-left-radius:calc(.25rem - 1px);border-top-right-radius:calc(.25rem - 1px)}.card-img-bottom{width:100%;border-bottom-right-radius:calc(.25rem - 1px);border-bottom-left-radius:calc(.25rem - 1px)}.card-deck{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.card-deck .card{margin-bottom:15px}@media (min-width:576px){.card-deck{-ms-flex-flow:row wrap;flex-flow:row wrap;margin-right:-15px;margin-left:-15px}.card-deck .card{display:-ms-flexbox;display:flex;-ms-flex:1 0 0%;flex:1 0 0%;-ms-flex-direction:column;flex-direction:column;margin-right:15px;margin-bottom:0;margin-left:15px}}.card-group{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column}.card-group>.card{margin-bottom:15px}@media (min-width:576px){.card-group{-ms-flex-flow:row wrap;flex-flow:row wrap}.card-group>.card{-ms-flex:1 0 0%;flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{margin-left:0;border-left:0}.card-group>.card:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.card-group>.card:not(:last-child) .card-header,.card-group>.card:not(:last-child) .card-img-top{border-top-right-radius:0}.card-group>.card:not(:last-child) .card-footer,.card-group>.card:not(:last-child) .card-img-bottom{border-bottom-right-radius:0}.card-group>.card:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.card-group>.card:not(:first-child) .card-header,.card-group>.card:not(:first-child) .card-img-top{border-top-left-radius:0}.card-group>.card:not(:first-child) .card-footer,.card-group>.card:not(:first-child) .card-img-bottom{border-bottom-left-radius:0}}.card-columns .card{margin-bottom:.75rem}@media (min-width:576px){.card-columns{-webkit-column-count:3;-moz-column-count:3;column-count:3;-webkit-column-gap:1.25rem;-moz-column-gap:1.25rem;column-gap:1.25rem;orphans:1;widows:1}.card-columns .card{display:inline-block;width:100%}}.accordion>.card{overflow:hidden}.accordion>.card:not(:first-of-type) .card-header:first-child{border-radius:0}.accordion>.card:not(:first-of-type):not(:last-of-type){border-bottom:0;border-radius:0}.accordion>.card:first-of-type{border-bottom:0;border-bottom-right-radius:0;border-bottom-left-radius:0}.accordion>.card:last-of-type{border-top-left-radius:0;border-top-right-radius:0}.accordion>.card .card-header{margin-bottom:-1px}.breadcrumb{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:.75rem 1rem;margin-bottom:1rem;list-style:none;background-color:#e9ecef;border-radius:.25rem}.breadcrumb-item+.breadcrumb-item{padding-left:.5rem}.breadcrumb-item+.breadcrumb-item::before{display:inline-block;padding-right:.5rem;color:#6c757d;content:\"/\"}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:underline}.breadcrumb-item+.breadcrumb-item:hover::before{text-decoration:none}.breadcrumb-item.active{color:#6c757d}.pagination{display:-ms-flexbox;display:flex;padding-left:0;list-style:none;border-radius:.25rem}.page-link{position:relative;display:block;padding:.5rem .75rem;margin-left:-1px;line-height:1.25;color:#007bff;background-color:#fff;border:1px solid #dee2e6}.page-link:hover{z-index:2;color:#0056b3;text-decoration:none;background-color:#e9ecef;border-color:#dee2e6}.page-link:focus{z-index:2;outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.25)}.page-item:first-child .page-link{margin-left:0;border-top-left-radius:.25rem;border-bottom-left-radius:.25rem}.page-item:last-child .page-link{border-top-right-radius:.25rem;border-bottom-right-radius:.25rem}.page-item.active .page-link{z-index:1;color:#fff;background-color:#007bff;border-color:#007bff}.page-item.disabled .page-link{color:#6c757d;pointer-events:none;cursor:auto;background-color:#fff;border-color:#dee2e6}.pagination-lg .page-link{padding:.75rem 1.5rem;font-size:1.25rem;line-height:1.5}.pagination-lg .page-item:first-child .page-link{border-top-left-radius:.3rem;border-bottom-left-radius:.3rem}.pagination-lg .page-item:last-child .page-link{border-top-right-radius:.3rem;border-bottom-right-radius:.3rem}.pagination-sm .page-link{padding:.25rem .5rem;font-size:.875rem;line-height:1.5}.pagination-sm .page-item:first-child .page-link{border-top-left-radius:.2rem;border-bottom-left-radius:.2rem}.pagination-sm .page-item:last-child .page-link{border-top-right-radius:.2rem;border-bottom-right-radius:.2rem}.badge{display:inline-block;padding:.25em .4em;font-size:75%;font-weight:700;line-height:1;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25rem;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.badge{transition:none}}a.badge:focus,a.badge:hover{text-decoration:none}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.badge-pill{padding-right:.6em;padding-left:.6em;border-radius:10rem}.badge-primary{color:#fff;background-color:#007bff}a.badge-primary:focus,a.badge-primary:hover{color:#fff;background-color:#0062cc}a.badge-primary.focus,a.badge-primary:focus{outline:0;box-shadow:0 0 0 .2rem rgba(0,123,255,.5)}.badge-secondary{color:#fff;background-color:#6c757d}a.badge-secondary:focus,a.badge-secondary:hover{color:#fff;background-color:#545b62}a.badge-secondary.focus,a.badge-secondary:focus{outline:0;box-shadow:0 0 0 .2rem rgba(108,117,125,.5)}.badge-success{color:#fff;background-color:#28a745}a.badge-success:focus,a.badge-success:hover{color:#fff;background-color:#1e7e34}a.badge-success.focus,a.badge-success:focus{outline:0;box-shadow:0 0 0 .2rem rgba(40,167,69,.5)}.badge-info{color:#fff;background-color:#17a2b8}a.badge-info:focus,a.badge-info:hover{color:#fff;background-color:#117a8b}a.badge-info.focus,a.badge-info:focus{outline:0;box-shadow:0 0 0 .2rem rgba(23,162,184,.5)}.badge-warning{color:#212529;background-color:#ffc107}a.badge-warning:focus,a.badge-warning:hover{color:#212529;background-color:#d39e00}a.badge-warning.focus,a.badge-warning:focus{outline:0;box-shadow:0 0 0 .2rem rgba(255,193,7,.5)}.badge-danger{color:#fff;background-color:#dc3545}a.badge-danger:focus,a.badge-danger:hover{color:#fff;background-color:#bd2130}a.badge-danger.focus,a.badge-danger:focus{outline:0;box-shadow:0 0 0 .2rem rgba(220,53,69,.5)}.badge-light{color:#212529;background-color:#f8f9fa}a.badge-light:focus,a.badge-light:hover{color:#212529;background-color:#dae0e5}a.badge-light.focus,a.badge-light:focus{outline:0;box-shadow:0 0 0 .2rem rgba(248,249,250,.5)}.badge-dark{color:#fff;background-color:#343a40}a.badge-dark:focus,a.badge-dark:hover{color:#fff;background-color:#1d2124}a.badge-dark.focus,a.badge-dark:focus{outline:0;box-shadow:0 0 0 .2rem rgba(52,58,64,.5)}.jumbotron{padding:2rem 1rem;margin-bottom:2rem;background-color:#e9ecef;border-radius:.3rem}@media (min-width:576px){.jumbotron{padding:4rem 2rem}}.jumbotron-fluid{padding-right:0;padding-left:0;border-radius:0}.alert{position:relative;padding:.75rem 1.25rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.alert-heading{color:inherit}.alert-link{font-weight:700}.alert-dismissible{padding-right:4rem}.alert-dismissible .close{position:absolute;top:0;right:0;padding:.75rem 1.25rem;color:inherit}.alert-primary{color:#004085;background-color:#cce5ff;border-color:#b8daff}.alert-primary hr{border-top-color:#9fcdff}.alert-primary .alert-link{color:#002752}.alert-secondary{color:#383d41;background-color:#e2e3e5;border-color:#d6d8db}.alert-secondary hr{border-top-color:#c8cbcf}.alert-secondary .alert-link{color:#202326}.alert-success{color:#155724;background-color:#d4edda;border-color:#c3e6cb}.alert-success hr{border-top-color:#b1dfbb}.alert-success .alert-link{color:#0b2e13}.alert-info{color:#0c5460;background-color:#d1ecf1;border-color:#bee5eb}.alert-info hr{border-top-color:#abdde5}.alert-info .alert-link{color:#062c33}.alert-warning{color:#856404;background-color:#fff3cd;border-color:#ffeeba}.alert-warning hr{border-top-color:#ffe8a1}.alert-warning .alert-link{color:#533f03}.alert-danger{color:#721c24;background-color:#f8d7da;border-color:#f5c6cb}.alert-danger hr{border-top-color:#f1b0b7}.alert-danger .alert-link{color:#491217}.alert-light{color:#818182;background-color:#fefefe;border-color:#fdfdfe}.alert-light hr{border-top-color:#ececf6}.alert-light .alert-link{color:#686868}.alert-dark{color:#1b1e21;background-color:#d6d8d9;border-color:#c6c8ca}.alert-dark hr{border-top-color:#b9bbbe}.alert-dark .alert-link{color:#040505}@-webkit-keyframes progress-bar-stripes{from{background-position:1rem 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:1rem 0}to{background-position:0 0}}.progress{display:-ms-flexbox;display:flex;height:1rem;overflow:hidden;font-size:.75rem;background-color:#e9ecef;border-radius:.25rem}.progress-bar{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;color:#fff;text-align:center;white-space:nowrap;background-color:#007bff;transition:width .6s ease}@media (prefers-reduced-motion:reduce){.progress-bar{transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-size:1rem 1rem}.progress-bar-animated{-webkit-animation:progress-bar-stripes 1s linear infinite;animation:progress-bar-stripes 1s linear infinite}@media (prefers-reduced-motion:reduce){.progress-bar-animated{-webkit-animation:none;animation:none}}.media{display:-ms-flexbox;display:flex;-ms-flex-align:start;align-items:flex-start}.media-body{-ms-flex:1;flex:1}.list-group{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;padding-left:0;margin-bottom:0}.list-group-item-action{width:100%;color:#495057;text-align:inherit}.list-group-item-action:focus,.list-group-item-action:hover{z-index:1;color:#495057;text-decoration:none;background-color:#f8f9fa}.list-group-item-action:active{color:#212529;background-color:#e9ecef}.list-group-item{position:relative;display:block;padding:.75rem 1.25rem;margin-bottom:-1px;background-color:#fff;border:1px solid rgba(0,0,0,.125)}.list-group-item:first-child{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.list-group-item.disabled,.list-group-item:disabled{color:#6c757d;pointer-events:none;background-color:#fff}.list-group-item.active{z-index:2;color:#fff;background-color:#007bff;border-color:#007bff}.list-group-horizontal{-ms-flex-direction:row;flex-direction:row}.list-group-horizontal .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal .list-group-item:first-child{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal .list-group-item:last-child{margin-right:0;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0}@media (min-width:576px){.list-group-horizontal-sm{-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-sm .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-sm .list-group-item:first-child{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-sm .list-group-item:last-child{margin-right:0;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0}}@media (min-width:768px){.list-group-horizontal-md{-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-md .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-md .list-group-item:first-child{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-md .list-group-item:last-child{margin-right:0;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0}}@media (min-width:992px){.list-group-horizontal-lg{-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-lg .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-lg .list-group-item:first-child{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-lg .list-group-item:last-child{margin-right:0;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0}}@media (min-width:1200px){.list-group-horizontal-xl{-ms-flex-direction:row;flex-direction:row}.list-group-horizontal-xl .list-group-item{margin-right:-1px;margin-bottom:0}.list-group-horizontal-xl .list-group-item:first-child{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-xl .list-group-item:last-child{margin-right:0;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0}}.list-group-flush .list-group-item{border-right:0;border-left:0;border-radius:0}.list-group-flush .list-group-item:last-child{margin-bottom:-1px}.list-group-flush:first-child .list-group-item:first-child{border-top:0}.list-group-flush:last-child .list-group-item:last-child{margin-bottom:0;border-bottom:0}.list-group-item-primary{color:#004085;background-color:#b8daff}.list-group-item-primary.list-group-item-action:focus,.list-group-item-primary.list-group-item-action:hover{color:#004085;background-color:#9fcdff}.list-group-item-primary.list-group-item-action.active{color:#fff;background-color:#004085;border-color:#004085}.list-group-item-secondary{color:#383d41;background-color:#d6d8db}.list-group-item-secondary.list-group-item-action:focus,.list-group-item-secondary.list-group-item-action:hover{color:#383d41;background-color:#c8cbcf}.list-group-item-secondary.list-group-item-action.active{color:#fff;background-color:#383d41;border-color:#383d41}.list-group-item-success{color:#155724;background-color:#c3e6cb}.list-group-item-success.list-group-item-action:focus,.list-group-item-success.list-group-item-action:hover{color:#155724;background-color:#b1dfbb}.list-group-item-success.list-group-item-action.active{color:#fff;background-color:#155724;border-color:#155724}.list-group-item-info{color:#0c5460;background-color:#bee5eb}.list-group-item-info.list-group-item-action:focus,.list-group-item-info.list-group-item-action:hover{color:#0c5460;background-color:#abdde5}.list-group-item-info.list-group-item-action.active{color:#fff;background-color:#0c5460;border-color:#0c5460}.list-group-item-warning{color:#856404;background-color:#ffeeba}.list-group-item-warning.list-group-item-action:focus,.list-group-item-warning.list-group-item-action:hover{color:#856404;background-color:#ffe8a1}.list-group-item-warning.list-group-item-action.active{color:#fff;background-color:#856404;border-color:#856404}.list-group-item-danger{color:#721c24;background-color:#f5c6cb}.list-group-item-danger.list-group-item-action:focus,.list-group-item-danger.list-group-item-action:hover{color:#721c24;background-color:#f1b0b7}.list-group-item-danger.list-group-item-action.active{color:#fff;background-color:#721c24;border-color:#721c24}.list-group-item-light{color:#818182;background-color:#fdfdfe}.list-group-item-light.list-group-item-action:focus,.list-group-item-light.list-group-item-action:hover{color:#818182;background-color:#ececf6}.list-group-item-light.list-group-item-action.active{color:#fff;background-color:#818182;border-color:#818182}.list-group-item-dark{color:#1b1e21;background-color:#c6c8ca}.list-group-item-dark.list-group-item-action:focus,.list-group-item-dark.list-group-item-action:hover{color:#1b1e21;background-color:#b9bbbe}.list-group-item-dark.list-group-item-action.active{color:#fff;background-color:#1b1e21;border-color:#1b1e21}.close{float:right;font-size:1.5rem;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.5}.close:hover{color:#000;text-decoration:none}.close:not(:disabled):not(.disabled):focus,.close:not(:disabled):not(.disabled):hover{opacity:.75}button.close{padding:0;background-color:transparent;border:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}a.close.disabled{pointer-events:none}.toast{max-width:350px;overflow:hidden;font-size:.875rem;background-color:rgba(255,255,255,.85);background-clip:padding-box;border:1px solid rgba(0,0,0,.1);box-shadow:0 .25rem .75rem rgba(0,0,0,.1);-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px);opacity:0;border-radius:.25rem}.toast:not(:last-child){margin-bottom:.75rem}.toast.showing{opacity:1}.toast.show{display:block;opacity:1}.toast.hide{display:none}.toast-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;padding:.25rem .75rem;color:#6c757d;background-color:rgba(255,255,255,.85);background-clip:padding-box;border-bottom:1px solid rgba(0,0,0,.05)}.toast-body{padding:.75rem}.modal-open{overflow:hidden}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal{position:fixed;top:0;left:0;z-index:1050;display:none;width:100%;height:100%;overflow:hidden;outline:0}.modal-dialog{position:relative;width:auto;margin:.5rem;pointer-events:none}.modal.fade .modal-dialog{transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out;transition:transform .3s ease-out,-webkit-transform .3s ease-out;-webkit-transform:translate(0,-50px);transform:translate(0,-50px)}@media (prefers-reduced-motion:reduce){.modal.fade .modal-dialog{transition:none}}.modal.show .modal-dialog{-webkit-transform:none;transform:none}.modal-dialog-scrollable{display:-ms-flexbox;display:flex;max-height:calc(100% - 1rem)}.modal-dialog-scrollable .modal-content{max-height:calc(100vh - 1rem);overflow:hidden}.modal-dialog-scrollable .modal-footer,.modal-dialog-scrollable .modal-header{-ms-flex-negative:0;flex-shrink:0}.modal-dialog-scrollable .modal-body{overflow-y:auto}.modal-dialog-centered{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;min-height:calc(100% - 1rem)}.modal-dialog-centered::before{display:block;height:calc(100vh - 1rem);content:\"\"}.modal-dialog-centered.modal-dialog-scrollable{-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.modal-dialog-centered.modal-dialog-scrollable .modal-content{max-height:none}.modal-dialog-centered.modal-dialog-scrollable::before{content:none}.modal-content{position:relative;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;width:100%;pointer-events:auto;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem;outline:0}.modal-backdrop{position:fixed;top:0;left:0;z-index:1040;width:100vw;height:100vh;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:.5}.modal-header{display:-ms-flexbox;display:flex;-ms-flex-align:start;align-items:flex-start;-ms-flex-pack:justify;justify-content:space-between;padding:1rem 1rem;border-bottom:1px solid #dee2e6;border-top-left-radius:.3rem;border-top-right-radius:.3rem}.modal-header .close{padding:1rem 1rem;margin:-1rem -1rem -1rem auto}.modal-title{margin-bottom:0;line-height:1.5}.modal-body{position:relative;-ms-flex:1 1 auto;flex:1 1 auto;padding:1rem}.modal-footer{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:end;justify-content:flex-end;padding:1rem;border-top:1px solid #dee2e6;border-bottom-right-radius:.3rem;border-bottom-left-radius:.3rem}.modal-footer>:not(:first-child){margin-left:.25rem}.modal-footer>:not(:last-child){margin-right:.25rem}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:576px){.modal-dialog{max-width:500px;margin:1.75rem auto}.modal-dialog-scrollable{max-height:calc(100% - 3.5rem)}.modal-dialog-scrollable .modal-content{max-height:calc(100vh - 3.5rem)}.modal-dialog-centered{min-height:calc(100% - 3.5rem)}.modal-dialog-centered::before{height:calc(100vh - 3.5rem)}.modal-sm{max-width:300px}}@media (min-width:992px){.modal-lg,.modal-xl{max-width:800px}}@media (min-width:1200px){.modal-xl{max-width:1140px}}.tooltip{position:absolute;z-index:1070;display:block;margin:0;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;opacity:0}.tooltip.show{opacity:.9}.tooltip .arrow{position:absolute;display:block;width:.8rem;height:.4rem}.tooltip .arrow::before{position:absolute;content:\"\";border-color:transparent;border-style:solid}.bs-tooltip-auto[x-placement^=top],.bs-tooltip-top{padding:.4rem 0}.bs-tooltip-auto[x-placement^=top] .arrow,.bs-tooltip-top .arrow{bottom:0}.bs-tooltip-auto[x-placement^=top] .arrow::before,.bs-tooltip-top .arrow::before{top:0;border-width:.4rem .4rem 0;border-top-color:#000}.bs-tooltip-auto[x-placement^=right],.bs-tooltip-right{padding:0 .4rem}.bs-tooltip-auto[x-placement^=right] .arrow,.bs-tooltip-right .arrow{left:0;width:.4rem;height:.8rem}.bs-tooltip-auto[x-placement^=right] .arrow::before,.bs-tooltip-right .arrow::before{right:0;border-width:.4rem .4rem .4rem 0;border-right-color:#000}.bs-tooltip-auto[x-placement^=bottom],.bs-tooltip-bottom{padding:.4rem 0}.bs-tooltip-auto[x-placement^=bottom] .arrow,.bs-tooltip-bottom .arrow{top:0}.bs-tooltip-auto[x-placement^=bottom] .arrow::before,.bs-tooltip-bottom .arrow::before{bottom:0;border-width:0 .4rem .4rem;border-bottom-color:#000}.bs-tooltip-auto[x-placement^=left],.bs-tooltip-left{padding:0 .4rem}.bs-tooltip-auto[x-placement^=left] .arrow,.bs-tooltip-left .arrow{right:0;width:.4rem;height:.8rem}.bs-tooltip-auto[x-placement^=left] .arrow::before,.bs-tooltip-left .arrow::before{left:0;border-width:.4rem 0 .4rem .4rem;border-left-color:#000}.tooltip-inner{max-width:200px;padding:.25rem .5rem;color:#fff;text-align:center;background-color:#000;border-radius:.25rem}.popover{position:absolute;top:0;left:0;z-index:1060;display:block;max-width:276px;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem}.popover .arrow{position:absolute;display:block;width:1rem;height:.5rem;margin:0 .3rem}.popover .arrow::after,.popover .arrow::before{position:absolute;display:block;content:\"\";border-color:transparent;border-style:solid}.bs-popover-auto[x-placement^=top],.bs-popover-top{margin-bottom:.5rem}.bs-popover-auto[x-placement^=top]>.arrow,.bs-popover-top>.arrow{bottom:calc((.5rem + 1px) * -1)}.bs-popover-auto[x-placement^=top]>.arrow::before,.bs-popover-top>.arrow::before{bottom:0;border-width:.5rem .5rem 0;border-top-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=top]>.arrow::after,.bs-popover-top>.arrow::after{bottom:1px;border-width:.5rem .5rem 0;border-top-color:#fff}.bs-popover-auto[x-placement^=right],.bs-popover-right{margin-left:.5rem}.bs-popover-auto[x-placement^=right]>.arrow,.bs-popover-right>.arrow{left:calc((.5rem + 1px) * -1);width:.5rem;height:1rem;margin:.3rem 0}.bs-popover-auto[x-placement^=right]>.arrow::before,.bs-popover-right>.arrow::before{left:0;border-width:.5rem .5rem .5rem 0;border-right-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=right]>.arrow::after,.bs-popover-right>.arrow::after{left:1px;border-width:.5rem .5rem .5rem 0;border-right-color:#fff}.bs-popover-auto[x-placement^=bottom],.bs-popover-bottom{margin-top:.5rem}.bs-popover-auto[x-placement^=bottom]>.arrow,.bs-popover-bottom>.arrow{top:calc((.5rem + 1px) * -1)}.bs-popover-auto[x-placement^=bottom]>.arrow::before,.bs-popover-bottom>.arrow::before{top:0;border-width:0 .5rem .5rem .5rem;border-bottom-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=bottom]>.arrow::after,.bs-popover-bottom>.arrow::after{top:1px;border-width:0 .5rem .5rem .5rem;border-bottom-color:#fff}.bs-popover-auto[x-placement^=bottom] .popover-header::before,.bs-popover-bottom .popover-header::before{position:absolute;top:0;left:50%;display:block;width:1rem;margin-left:-.5rem;content:\"\";border-bottom:1px solid #f7f7f7}.bs-popover-auto[x-placement^=left],.bs-popover-left{margin-right:.5rem}.bs-popover-auto[x-placement^=left]>.arrow,.bs-popover-left>.arrow{right:calc((.5rem + 1px) * -1);width:.5rem;height:1rem;margin:.3rem 0}.bs-popover-auto[x-placement^=left]>.arrow::before,.bs-popover-left>.arrow::before{right:0;border-width:.5rem 0 .5rem .5rem;border-left-color:rgba(0,0,0,.25)}.bs-popover-auto[x-placement^=left]>.arrow::after,.bs-popover-left>.arrow::after{right:1px;border-width:.5rem 0 .5rem .5rem;border-left-color:#fff}.popover-header{padding:.5rem .75rem;margin-bottom:0;font-size:1rem;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-top-left-radius:calc(.3rem - 1px);border-top-right-radius:calc(.3rem - 1px)}.popover-header:empty{display:none}.popover-body{padding:.5rem .75rem;color:#212529}.carousel{position:relative}.carousel.pointer-event{-ms-touch-action:pan-y;touch-action:pan-y}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner::after{display:block;clear:both;content:\"\"}.carousel-item{position:relative;display:none;float:left;width:100%;margin-right:-100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;transition:-webkit-transform .6s ease-in-out;transition:transform .6s ease-in-out;transition:transform .6s ease-in-out,-webkit-transform .6s ease-in-out}@media (prefers-reduced-motion:reduce){.carousel-item{transition:none}}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block}.active.carousel-item-right,.carousel-item-next:not(.carousel-item-left){-webkit-transform:translateX(100%);transform:translateX(100%)}.active.carousel-item-left,.carousel-item-prev:not(.carousel-item-right){-webkit-transform:translateX(-100%);transform:translateX(-100%)}.carousel-fade .carousel-item{opacity:0;transition-property:opacity;-webkit-transform:none;transform:none}.carousel-fade .carousel-item-next.carousel-item-left,.carousel-fade .carousel-item-prev.carousel-item-right,.carousel-fade .carousel-item.active{z-index:1;opacity:1}.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-right{z-index:0;opacity:0;transition:0s .6s opacity}@media (prefers-reduced-motion:reduce){.carousel-fade .active.carousel-item-left,.carousel-fade .active.carousel-item-right{transition:none}}.carousel-control-next,.carousel-control-prev{position:absolute;top:0;bottom:0;z-index:1;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:15%;color:#fff;text-align:center;opacity:.5;transition:opacity .15s ease}@media (prefers-reduced-motion:reduce){.carousel-control-next,.carousel-control-prev{transition:none}}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{display:inline-block;width:20px;height:20px;background:no-repeat 50%/100% 100%}.carousel-control-prev-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3e%3cpath d='M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z'/%3e%3c/svg%3e\")}.carousel-control-next-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='%23fff' viewBox='0 0 8 8'%3e%3cpath d='M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z'/%3e%3c/svg%3e\")}.carousel-indicators{position:absolute;right:0;bottom:0;left:0;z-index:15;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;padding-left:0;margin-right:15%;margin-left:15%;list-style:none}.carousel-indicators li{box-sizing:content-box;-ms-flex:0 1 auto;flex:0 1 auto;width:30px;height:3px;margin-right:3px;margin-left:3px;text-indent:-999px;cursor:pointer;background-color:#fff;background-clip:padding-box;border-top:10px solid transparent;border-bottom:10px solid transparent;opacity:.5;transition:opacity .6s ease}@media (prefers-reduced-motion:reduce){.carousel-indicators li{transition:none}}.carousel-indicators .active{opacity:1}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center}@-webkit-keyframes spinner-border{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spinner-border{to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.spinner-border{display:inline-block;width:2rem;height:2rem;vertical-align:text-bottom;border:.25em solid currentColor;border-right-color:transparent;border-radius:50%;-webkit-animation:spinner-border .75s linear infinite;animation:spinner-border .75s linear infinite}.spinner-border-sm{width:1rem;height:1rem;border-width:.2em}@-webkit-keyframes spinner-grow{0%{-webkit-transform:scale(0);transform:scale(0)}50%{opacity:1}}@keyframes spinner-grow{0%{-webkit-transform:scale(0);transform:scale(0)}50%{opacity:1}}.spinner-grow{display:inline-block;width:2rem;height:2rem;vertical-align:text-bottom;background-color:currentColor;border-radius:50%;opacity:0;-webkit-animation:spinner-grow .75s linear infinite;animation:spinner-grow .75s linear infinite}.spinner-grow-sm{width:1rem;height:1rem}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.bg-primary{background-color:#007bff!important}a.bg-primary:focus,a.bg-primary:hover,button.bg-primary:focus,button.bg-primary:hover{background-color:#0062cc!important}.bg-secondary{background-color:#6c757d!important}a.bg-secondary:focus,a.bg-secondary:hover,button.bg-secondary:focus,button.bg-secondary:hover{background-color:#545b62!important}.bg-success{background-color:#28a745!important}a.bg-success:focus,a.bg-success:hover,button.bg-success:focus,button.bg-success:hover{background-color:#1e7e34!important}.bg-info{background-color:#17a2b8!important}a.bg-info:focus,a.bg-info:hover,button.bg-info:focus,button.bg-info:hover{background-color:#117a8b!important}.bg-warning{background-color:#ffc107!important}a.bg-warning:focus,a.bg-warning:hover,button.bg-warning:focus,button.bg-warning:hover{background-color:#d39e00!important}.bg-danger{background-color:#dc3545!important}a.bg-danger:focus,a.bg-danger:hover,button.bg-danger:focus,button.bg-danger:hover{background-color:#bd2130!important}.bg-light{background-color:#f8f9fa!important}a.bg-light:focus,a.bg-light:hover,button.bg-light:focus,button.bg-light:hover{background-color:#dae0e5!important}.bg-dark{background-color:#343a40!important}a.bg-dark:focus,a.bg-dark:hover,button.bg-dark:focus,button.bg-dark:hover{background-color:#1d2124!important}.bg-white{background-color:#fff!important}.bg-transparent{background-color:transparent!important}.border{border:1px solid #dee2e6!important}.border-top{border-top:1px solid #dee2e6!important}.border-right{border-right:1px solid #dee2e6!important}.border-bottom{border-bottom:1px solid #dee2e6!important}.border-left{border-left:1px solid #dee2e6!important}.border-0{border:0!important}.border-top-0{border-top:0!important}.border-right-0{border-right:0!important}.border-bottom-0{border-bottom:0!important}.border-left-0{border-left:0!important}.border-primary{border-color:#007bff!important}.border-secondary{border-color:#6c757d!important}.border-success{border-color:#28a745!important}.border-info{border-color:#17a2b8!important}.border-warning{border-color:#ffc107!important}.border-danger{border-color:#dc3545!important}.border-light{border-color:#f8f9fa!important}.border-dark{border-color:#343a40!important}.border-white{border-color:#fff!important}.rounded-sm{border-radius:.2rem!important}.rounded{border-radius:.25rem!important}.rounded-top{border-top-left-radius:.25rem!important;border-top-right-radius:.25rem!important}.rounded-right{border-top-right-radius:.25rem!important;border-bottom-right-radius:.25rem!important}.rounded-bottom{border-bottom-right-radius:.25rem!important;border-bottom-left-radius:.25rem!important}.rounded-left{border-top-left-radius:.25rem!important;border-bottom-left-radius:.25rem!important}.rounded-lg{border-radius:.3rem!important}.rounded-circle{border-radius:50%!important}.rounded-pill{border-radius:50rem!important}.rounded-0{border-radius:0!important}.clearfix::after{display:block;clear:both;content:\"\"}.d-none{display:none!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-table{display:table!important}.d-table-row{display:table-row!important}.d-table-cell{display:table-cell!important}.d-flex{display:-ms-flexbox!important;display:flex!important}.d-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}@media (min-width:576px){.d-sm-none{display:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-table{display:table!important}.d-sm-table-row{display:table-row!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:-ms-flexbox!important;display:flex!important}.d-sm-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:768px){.d-md-none{display:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-table{display:table!important}.d-md-table-row{display:table-row!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:-ms-flexbox!important;display:flex!important}.d-md-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:992px){.d-lg-none{display:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-table{display:table!important}.d-lg-table-row{display:table-row!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:-ms-flexbox!important;display:flex!important}.d-lg-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media (min-width:1200px){.d-xl-none{display:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-table{display:table!important}.d-xl-table-row{display:table-row!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:-ms-flexbox!important;display:flex!important}.d-xl-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}@media print{.d-print-none{display:none!important}.d-print-inline{display:inline!important}.d-print-inline-block{display:inline-block!important}.d-print-block{display:block!important}.d-print-table{display:table!important}.d-print-table-row{display:table-row!important}.d-print-table-cell{display:table-cell!important}.d-print-flex{display:-ms-flexbox!important;display:flex!important}.d-print-inline-flex{display:-ms-inline-flexbox!important;display:inline-flex!important}}.embed-responsive{position:relative;display:block;width:100%;padding:0;overflow:hidden}.embed-responsive::before{display:block;content:\"\"}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-21by9::before{padding-top:42.857143%}.embed-responsive-16by9::before{padding-top:56.25%}.embed-responsive-4by3::before{padding-top:75%}.embed-responsive-1by1::before{padding-top:100%}.flex-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.flex-fill{-ms-flex:1 1 auto!important;flex:1 1 auto!important}.flex-grow-0{-ms-flex-positive:0!important;flex-grow:0!important}.flex-grow-1{-ms-flex-positive:1!important;flex-grow:1!important}.flex-shrink-0{-ms-flex-negative:0!important;flex-shrink:0!important}.flex-shrink-1{-ms-flex-negative:1!important;flex-shrink:1!important}.justify-content-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-center{-ms-flex-align:center!important;align-items:center!important}.align-items-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}@media (min-width:576px){.flex-sm-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-sm-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-sm-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-sm-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-sm-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-sm-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-sm-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.flex-sm-fill{-ms-flex:1 1 auto!important;flex:1 1 auto!important}.flex-sm-grow-0{-ms-flex-positive:0!important;flex-grow:0!important}.flex-sm-grow-1{-ms-flex-positive:1!important;flex-grow:1!important}.flex-sm-shrink-0{-ms-flex-negative:0!important;flex-shrink:0!important}.flex-sm-shrink-1{-ms-flex-negative:1!important;flex-shrink:1!important}.justify-content-sm-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-sm-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-sm-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-sm-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-sm-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-sm-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-sm-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-sm-center{-ms-flex-align:center!important;align-items:center!important}.align-items-sm-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-sm-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-sm-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-sm-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-sm-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-sm-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-sm-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-sm-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-sm-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-sm-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-sm-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-sm-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-sm-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-sm-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:768px){.flex-md-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-md-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-md-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-md-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-md-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-md-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-md-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.flex-md-fill{-ms-flex:1 1 auto!important;flex:1 1 auto!important}.flex-md-grow-0{-ms-flex-positive:0!important;flex-grow:0!important}.flex-md-grow-1{-ms-flex-positive:1!important;flex-grow:1!important}.flex-md-shrink-0{-ms-flex-negative:0!important;flex-shrink:0!important}.flex-md-shrink-1{-ms-flex-negative:1!important;flex-shrink:1!important}.justify-content-md-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-md-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-md-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-md-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-md-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-md-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-md-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-md-center{-ms-flex-align:center!important;align-items:center!important}.align-items-md-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-md-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-md-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-md-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-md-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-md-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-md-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-md-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-md-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-md-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-md-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-md-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-md-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-md-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:992px){.flex-lg-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-lg-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-lg-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-lg-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-lg-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-lg-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-lg-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.flex-lg-fill{-ms-flex:1 1 auto!important;flex:1 1 auto!important}.flex-lg-grow-0{-ms-flex-positive:0!important;flex-grow:0!important}.flex-lg-grow-1{-ms-flex-positive:1!important;flex-grow:1!important}.flex-lg-shrink-0{-ms-flex-negative:0!important;flex-shrink:0!important}.flex-lg-shrink-1{-ms-flex-negative:1!important;flex-shrink:1!important}.justify-content-lg-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-lg-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-lg-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-lg-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-lg-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-lg-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-lg-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-lg-center{-ms-flex-align:center!important;align-items:center!important}.align-items-lg-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-lg-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-lg-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-lg-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-lg-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-lg-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-lg-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-lg-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-lg-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-lg-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-lg-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-lg-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-lg-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-lg-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}@media (min-width:1200px){.flex-xl-row{-ms-flex-direction:row!important;flex-direction:row!important}.flex-xl-column{-ms-flex-direction:column!important;flex-direction:column!important}.flex-xl-row-reverse{-ms-flex-direction:row-reverse!important;flex-direction:row-reverse!important}.flex-xl-column-reverse{-ms-flex-direction:column-reverse!important;flex-direction:column-reverse!important}.flex-xl-wrap{-ms-flex-wrap:wrap!important;flex-wrap:wrap!important}.flex-xl-nowrap{-ms-flex-wrap:nowrap!important;flex-wrap:nowrap!important}.flex-xl-wrap-reverse{-ms-flex-wrap:wrap-reverse!important;flex-wrap:wrap-reverse!important}.flex-xl-fill{-ms-flex:1 1 auto!important;flex:1 1 auto!important}.flex-xl-grow-0{-ms-flex-positive:0!important;flex-grow:0!important}.flex-xl-grow-1{-ms-flex-positive:1!important;flex-grow:1!important}.flex-xl-shrink-0{-ms-flex-negative:0!important;flex-shrink:0!important}.flex-xl-shrink-1{-ms-flex-negative:1!important;flex-shrink:1!important}.justify-content-xl-start{-ms-flex-pack:start!important;justify-content:flex-start!important}.justify-content-xl-end{-ms-flex-pack:end!important;justify-content:flex-end!important}.justify-content-xl-center{-ms-flex-pack:center!important;justify-content:center!important}.justify-content-xl-between{-ms-flex-pack:justify!important;justify-content:space-between!important}.justify-content-xl-around{-ms-flex-pack:distribute!important;justify-content:space-around!important}.align-items-xl-start{-ms-flex-align:start!important;align-items:flex-start!important}.align-items-xl-end{-ms-flex-align:end!important;align-items:flex-end!important}.align-items-xl-center{-ms-flex-align:center!important;align-items:center!important}.align-items-xl-baseline{-ms-flex-align:baseline!important;align-items:baseline!important}.align-items-xl-stretch{-ms-flex-align:stretch!important;align-items:stretch!important}.align-content-xl-start{-ms-flex-line-pack:start!important;align-content:flex-start!important}.align-content-xl-end{-ms-flex-line-pack:end!important;align-content:flex-end!important}.align-content-xl-center{-ms-flex-line-pack:center!important;align-content:center!important}.align-content-xl-between{-ms-flex-line-pack:justify!important;align-content:space-between!important}.align-content-xl-around{-ms-flex-line-pack:distribute!important;align-content:space-around!important}.align-content-xl-stretch{-ms-flex-line-pack:stretch!important;align-content:stretch!important}.align-self-xl-auto{-ms-flex-item-align:auto!important;align-self:auto!important}.align-self-xl-start{-ms-flex-item-align:start!important;align-self:flex-start!important}.align-self-xl-end{-ms-flex-item-align:end!important;align-self:flex-end!important}.align-self-xl-center{-ms-flex-item-align:center!important;align-self:center!important}.align-self-xl-baseline{-ms-flex-item-align:baseline!important;align-self:baseline!important}.align-self-xl-stretch{-ms-flex-item-align:stretch!important;align-self:stretch!important}}.float-left{float:left!important}.float-right{float:right!important}.float-none{float:none!important}@media (min-width:576px){.float-sm-left{float:left!important}.float-sm-right{float:right!important}.float-sm-none{float:none!important}}@media (min-width:768px){.float-md-left{float:left!important}.float-md-right{float:right!important}.float-md-none{float:none!important}}@media (min-width:992px){.float-lg-left{float:left!important}.float-lg-right{float:right!important}.float-lg-none{float:none!important}}@media (min-width:1200px){.float-xl-left{float:left!important}.float-xl-right{float:right!important}.float-xl-none{float:none!important}}.overflow-auto{overflow:auto!important}.overflow-hidden{overflow:hidden!important}.position-static{position:static!important}.position-relative{position:relative!important}.position-absolute{position:absolute!important}.position-fixed{position:fixed!important}.position-sticky{position:-webkit-sticky!important;position:sticky!important}.fixed-top{position:fixed;top:0;right:0;left:0;z-index:1030}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}@supports ((position:-webkit-sticky) or (position:sticky)){.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}}.sr-only{position:absolute;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;overflow:visible;clip:auto;white-space:normal}.shadow-sm{box-shadow:0 .125rem .25rem rgba(0,0,0,.075)!important}.shadow{box-shadow:0 .5rem 1rem rgba(0,0,0,.15)!important}.shadow-lg{box-shadow:0 1rem 3rem rgba(0,0,0,.175)!important}.shadow-none{box-shadow:none!important}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.w-auto{width:auto!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.h-auto{height:auto!important}.mw-100{max-width:100%!important}.mh-100{max-height:100%!important}.min-vw-100{min-width:100vw!important}.min-vh-100{min-height:100vh!important}.vw-100{width:100vw!important}.vh-100{height:100vh!important}.stretched-link::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;pointer-events:auto;content:\"\";background-color:rgba(0,0,0,0)}.m-0{margin:0!important}.mt-0,.my-0{margin-top:0!important}.mr-0,.mx-0{margin-right:0!important}.mb-0,.my-0{margin-bottom:0!important}.ml-0,.mx-0{margin-left:0!important}.m-1{margin:.25rem!important}.mt-1,.my-1{margin-top:.25rem!important}.mr-1,.mx-1{margin-right:.25rem!important}.mb-1,.my-1{margin-bottom:.25rem!important}.ml-1,.mx-1{margin-left:.25rem!important}.m-2{margin:.5rem!important}.mt-2,.my-2{margin-top:.5rem!important}.mr-2,.mx-2{margin-right:.5rem!important}.mb-2,.my-2{margin-bottom:.5rem!important}.ml-2,.mx-2{margin-left:.5rem!important}.m-3{margin:1rem!important}.mt-3,.my-3{margin-top:1rem!important}.mr-3,.mx-3{margin-right:1rem!important}.mb-3,.my-3{margin-bottom:1rem!important}.ml-3,.mx-3{margin-left:1rem!important}.m-4{margin:1.5rem!important}.mt-4,.my-4{margin-top:1.5rem!important}.mr-4,.mx-4{margin-right:1.5rem!important}.mb-4,.my-4{margin-bottom:1.5rem!important}.ml-4,.mx-4{margin-left:1.5rem!important}.m-5{margin:3rem!important}.mt-5,.my-5{margin-top:3rem!important}.mr-5,.mx-5{margin-right:3rem!important}.mb-5,.my-5{margin-bottom:3rem!important}.ml-5,.mx-5{margin-left:3rem!important}.p-0{padding:0!important}.pt-0,.py-0{padding-top:0!important}.pr-0,.px-0{padding-right:0!important}.pb-0,.py-0{padding-bottom:0!important}.pl-0,.px-0{padding-left:0!important}.p-1{padding:.25rem!important}.pt-1,.py-1{padding-top:.25rem!important}.pr-1,.px-1{padding-right:.25rem!important}.pb-1,.py-1{padding-bottom:.25rem!important}.pl-1,.px-1{padding-left:.25rem!important}.p-2{padding:.5rem!important}.pt-2,.py-2{padding-top:.5rem!important}.pr-2,.px-2{padding-right:.5rem!important}.pb-2,.py-2{padding-bottom:.5rem!important}.pl-2,.px-2{padding-left:.5rem!important}.p-3{padding:1rem!important}.pt-3,.py-3{padding-top:1rem!important}.pr-3,.px-3{padding-right:1rem!important}.pb-3,.py-3{padding-bottom:1rem!important}.pl-3,.px-3{padding-left:1rem!important}.p-4{padding:1.5rem!important}.pt-4,.py-4{padding-top:1.5rem!important}.pr-4,.px-4{padding-right:1.5rem!important}.pb-4,.py-4{padding-bottom:1.5rem!important}.pl-4,.px-4{padding-left:1.5rem!important}.p-5{padding:3rem!important}.pt-5,.py-5{padding-top:3rem!important}.pr-5,.px-5{padding-right:3rem!important}.pb-5,.py-5{padding-bottom:3rem!important}.pl-5,.px-5{padding-left:3rem!important}.m-n1{margin:-.25rem!important}.mt-n1,.my-n1{margin-top:-.25rem!important}.mr-n1,.mx-n1{margin-right:-.25rem!important}.mb-n1,.my-n1{margin-bottom:-.25rem!important}.ml-n1,.mx-n1{margin-left:-.25rem!important}.m-n2{margin:-.5rem!important}.mt-n2,.my-n2{margin-top:-.5rem!important}.mr-n2,.mx-n2{margin-right:-.5rem!important}.mb-n2,.my-n2{margin-bottom:-.5rem!important}.ml-n2,.mx-n2{margin-left:-.5rem!important}.m-n3{margin:-1rem!important}.mt-n3,.my-n3{margin-top:-1rem!important}.mr-n3,.mx-n3{margin-right:-1rem!important}.mb-n3,.my-n3{margin-bottom:-1rem!important}.ml-n3,.mx-n3{margin-left:-1rem!important}.m-n4{margin:-1.5rem!important}.mt-n4,.my-n4{margin-top:-1.5rem!important}.mr-n4,.mx-n4{margin-right:-1.5rem!important}.mb-n4,.my-n4{margin-bottom:-1.5rem!important}.ml-n4,.mx-n4{margin-left:-1.5rem!important}.m-n5{margin:-3rem!important}.mt-n5,.my-n5{margin-top:-3rem!important}.mr-n5,.mx-n5{margin-right:-3rem!important}.mb-n5,.my-n5{margin-bottom:-3rem!important}.ml-n5,.mx-n5{margin-left:-3rem!important}.m-auto{margin:auto!important}.mt-auto,.my-auto{margin-top:auto!important}.mr-auto,.mx-auto{margin-right:auto!important}.mb-auto,.my-auto{margin-bottom:auto!important}.ml-auto,.mx-auto{margin-left:auto!important}@media (min-width:576px){.m-sm-0{margin:0!important}.mt-sm-0,.my-sm-0{margin-top:0!important}.mr-sm-0,.mx-sm-0{margin-right:0!important}.mb-sm-0,.my-sm-0{margin-bottom:0!important}.ml-sm-0,.mx-sm-0{margin-left:0!important}.m-sm-1{margin:.25rem!important}.mt-sm-1,.my-sm-1{margin-top:.25rem!important}.mr-sm-1,.mx-sm-1{margin-right:.25rem!important}.mb-sm-1,.my-sm-1{margin-bottom:.25rem!important}.ml-sm-1,.mx-sm-1{margin-left:.25rem!important}.m-sm-2{margin:.5rem!important}.mt-sm-2,.my-sm-2{margin-top:.5rem!important}.mr-sm-2,.mx-sm-2{margin-right:.5rem!important}.mb-sm-2,.my-sm-2{margin-bottom:.5rem!important}.ml-sm-2,.mx-sm-2{margin-left:.5rem!important}.m-sm-3{margin:1rem!important}.mt-sm-3,.my-sm-3{margin-top:1rem!important}.mr-sm-3,.mx-sm-3{margin-right:1rem!important}.mb-sm-3,.my-sm-3{margin-bottom:1rem!important}.ml-sm-3,.mx-sm-3{margin-left:1rem!important}.m-sm-4{margin:1.5rem!important}.mt-sm-4,.my-sm-4{margin-top:1.5rem!important}.mr-sm-4,.mx-sm-4{margin-right:1.5rem!important}.mb-sm-4,.my-sm-4{margin-bottom:1.5rem!important}.ml-sm-4,.mx-sm-4{margin-left:1.5rem!important}.m-sm-5{margin:3rem!important}.mt-sm-5,.my-sm-5{margin-top:3rem!important}.mr-sm-5,.mx-sm-5{margin-right:3rem!important}.mb-sm-5,.my-sm-5{margin-bottom:3rem!important}.ml-sm-5,.mx-sm-5{margin-left:3rem!important}.p-sm-0{padding:0!important}.pt-sm-0,.py-sm-0{padding-top:0!important}.pr-sm-0,.px-sm-0{padding-right:0!important}.pb-sm-0,.py-sm-0{padding-bottom:0!important}.pl-sm-0,.px-sm-0{padding-left:0!important}.p-sm-1{padding:.25rem!important}.pt-sm-1,.py-sm-1{padding-top:.25rem!important}.pr-sm-1,.px-sm-1{padding-right:.25rem!important}.pb-sm-1,.py-sm-1{padding-bottom:.25rem!important}.pl-sm-1,.px-sm-1{padding-left:.25rem!important}.p-sm-2{padding:.5rem!important}.pt-sm-2,.py-sm-2{padding-top:.5rem!important}.pr-sm-2,.px-sm-2{padding-right:.5rem!important}.pb-sm-2,.py-sm-2{padding-bottom:.5rem!important}.pl-sm-2,.px-sm-2{padding-left:.5rem!important}.p-sm-3{padding:1rem!important}.pt-sm-3,.py-sm-3{padding-top:1rem!important}.pr-sm-3,.px-sm-3{padding-right:1rem!important}.pb-sm-3,.py-sm-3{padding-bottom:1rem!important}.pl-sm-3,.px-sm-3{padding-left:1rem!important}.p-sm-4{padding:1.5rem!important}.pt-sm-4,.py-sm-4{padding-top:1.5rem!important}.pr-sm-4,.px-sm-4{padding-right:1.5rem!important}.pb-sm-4,.py-sm-4{padding-bottom:1.5rem!important}.pl-sm-4,.px-sm-4{padding-left:1.5rem!important}.p-sm-5{padding:3rem!important}.pt-sm-5,.py-sm-5{padding-top:3rem!important}.pr-sm-5,.px-sm-5{padding-right:3rem!important}.pb-sm-5,.py-sm-5{padding-bottom:3rem!important}.pl-sm-5,.px-sm-5{padding-left:3rem!important}.m-sm-n1{margin:-.25rem!important}.mt-sm-n1,.my-sm-n1{margin-top:-.25rem!important}.mr-sm-n1,.mx-sm-n1{margin-right:-.25rem!important}.mb-sm-n1,.my-sm-n1{margin-bottom:-.25rem!important}.ml-sm-n1,.mx-sm-n1{margin-left:-.25rem!important}.m-sm-n2{margin:-.5rem!important}.mt-sm-n2,.my-sm-n2{margin-top:-.5rem!important}.mr-sm-n2,.mx-sm-n2{margin-right:-.5rem!important}.mb-sm-n2,.my-sm-n2{margin-bottom:-.5rem!important}.ml-sm-n2,.mx-sm-n2{margin-left:-.5rem!important}.m-sm-n3{margin:-1rem!important}.mt-sm-n3,.my-sm-n3{margin-top:-1rem!important}.mr-sm-n3,.mx-sm-n3{margin-right:-1rem!important}.mb-sm-n3,.my-sm-n3{margin-bottom:-1rem!important}.ml-sm-n3,.mx-sm-n3{margin-left:-1rem!important}.m-sm-n4{margin:-1.5rem!important}.mt-sm-n4,.my-sm-n4{margin-top:-1.5rem!important}.mr-sm-n4,.mx-sm-n4{margin-right:-1.5rem!important}.mb-sm-n4,.my-sm-n4{margin-bottom:-1.5rem!important}.ml-sm-n4,.mx-sm-n4{margin-left:-1.5rem!important}.m-sm-n5{margin:-3rem!important}.mt-sm-n5,.my-sm-n5{margin-top:-3rem!important}.mr-sm-n5,.mx-sm-n5{margin-right:-3rem!important}.mb-sm-n5,.my-sm-n5{margin-bottom:-3rem!important}.ml-sm-n5,.mx-sm-n5{margin-left:-3rem!important}.m-sm-auto{margin:auto!important}.mt-sm-auto,.my-sm-auto{margin-top:auto!important}.mr-sm-auto,.mx-sm-auto{margin-right:auto!important}.mb-sm-auto,.my-sm-auto{margin-bottom:auto!important}.ml-sm-auto,.mx-sm-auto{margin-left:auto!important}}@media (min-width:768px){.m-md-0{margin:0!important}.mt-md-0,.my-md-0{margin-top:0!important}.mr-md-0,.mx-md-0{margin-right:0!important}.mb-md-0,.my-md-0{margin-bottom:0!important}.ml-md-0,.mx-md-0{margin-left:0!important}.m-md-1{margin:.25rem!important}.mt-md-1,.my-md-1{margin-top:.25rem!important}.mr-md-1,.mx-md-1{margin-right:.25rem!important}.mb-md-1,.my-md-1{margin-bottom:.25rem!important}.ml-md-1,.mx-md-1{margin-left:.25rem!important}.m-md-2{margin:.5rem!important}.mt-md-2,.my-md-2{margin-top:.5rem!important}.mr-md-2,.mx-md-2{margin-right:.5rem!important}.mb-md-2,.my-md-2{margin-bottom:.5rem!important}.ml-md-2,.mx-md-2{margin-left:.5rem!important}.m-md-3{margin:1rem!important}.mt-md-3,.my-md-3{margin-top:1rem!important}.mr-md-3,.mx-md-3{margin-right:1rem!important}.mb-md-3,.my-md-3{margin-bottom:1rem!important}.ml-md-3,.mx-md-3{margin-left:1rem!important}.m-md-4{margin:1.5rem!important}.mt-md-4,.my-md-4{margin-top:1.5rem!important}.mr-md-4,.mx-md-4{margin-right:1.5rem!important}.mb-md-4,.my-md-4{margin-bottom:1.5rem!important}.ml-md-4,.mx-md-4{margin-left:1.5rem!important}.m-md-5{margin:3rem!important}.mt-md-5,.my-md-5{margin-top:3rem!important}.mr-md-5,.mx-md-5{margin-right:3rem!important}.mb-md-5,.my-md-5{margin-bottom:3rem!important}.ml-md-5,.mx-md-5{margin-left:3rem!important}.p-md-0{padding:0!important}.pt-md-0,.py-md-0{padding-top:0!important}.pr-md-0,.px-md-0{padding-right:0!important}.pb-md-0,.py-md-0{padding-bottom:0!important}.pl-md-0,.px-md-0{padding-left:0!important}.p-md-1{padding:.25rem!important}.pt-md-1,.py-md-1{padding-top:.25rem!important}.pr-md-1,.px-md-1{padding-right:.25rem!important}.pb-md-1,.py-md-1{padding-bottom:.25rem!important}.pl-md-1,.px-md-1{padding-left:.25rem!important}.p-md-2{padding:.5rem!important}.pt-md-2,.py-md-2{padding-top:.5rem!important}.pr-md-2,.px-md-2{padding-right:.5rem!important}.pb-md-2,.py-md-2{padding-bottom:.5rem!important}.pl-md-2,.px-md-2{padding-left:.5rem!important}.p-md-3{padding:1rem!important}.pt-md-3,.py-md-3{padding-top:1rem!important}.pr-md-3,.px-md-3{padding-right:1rem!important}.pb-md-3,.py-md-3{padding-bottom:1rem!important}.pl-md-3,.px-md-3{padding-left:1rem!important}.p-md-4{padding:1.5rem!important}.pt-md-4,.py-md-4{padding-top:1.5rem!important}.pr-md-4,.px-md-4{padding-right:1.5rem!important}.pb-md-4,.py-md-4{padding-bottom:1.5rem!important}.pl-md-4,.px-md-4{padding-left:1.5rem!important}.p-md-5{padding:3rem!important}.pt-md-5,.py-md-5{padding-top:3rem!important}.pr-md-5,.px-md-5{padding-right:3rem!important}.pb-md-5,.py-md-5{padding-bottom:3rem!important}.pl-md-5,.px-md-5{padding-left:3rem!important}.m-md-n1{margin:-.25rem!important}.mt-md-n1,.my-md-n1{margin-top:-.25rem!important}.mr-md-n1,.mx-md-n1{margin-right:-.25rem!important}.mb-md-n1,.my-md-n1{margin-bottom:-.25rem!important}.ml-md-n1,.mx-md-n1{margin-left:-.25rem!important}.m-md-n2{margin:-.5rem!important}.mt-md-n2,.my-md-n2{margin-top:-.5rem!important}.mr-md-n2,.mx-md-n2{margin-right:-.5rem!important}.mb-md-n2,.my-md-n2{margin-bottom:-.5rem!important}.ml-md-n2,.mx-md-n2{margin-left:-.5rem!important}.m-md-n3{margin:-1rem!important}.mt-md-n3,.my-md-n3{margin-top:-1rem!important}.mr-md-n3,.mx-md-n3{margin-right:-1rem!important}.mb-md-n3,.my-md-n3{margin-bottom:-1rem!important}.ml-md-n3,.mx-md-n3{margin-left:-1rem!important}.m-md-n4{margin:-1.5rem!important}.mt-md-n4,.my-md-n4{margin-top:-1.5rem!important}.mr-md-n4,.mx-md-n4{margin-right:-1.5rem!important}.mb-md-n4,.my-md-n4{margin-bottom:-1.5rem!important}.ml-md-n4,.mx-md-n4{margin-left:-1.5rem!important}.m-md-n5{margin:-3rem!important}.mt-md-n5,.my-md-n5{margin-top:-3rem!important}.mr-md-n5,.mx-md-n5{margin-right:-3rem!important}.mb-md-n5,.my-md-n5{margin-bottom:-3rem!important}.ml-md-n5,.mx-md-n5{margin-left:-3rem!important}.m-md-auto{margin:auto!important}.mt-md-auto,.my-md-auto{margin-top:auto!important}.mr-md-auto,.mx-md-auto{margin-right:auto!important}.mb-md-auto,.my-md-auto{margin-bottom:auto!important}.ml-md-auto,.mx-md-auto{margin-left:auto!important}}@media (min-width:992px){.m-lg-0{margin:0!important}.mt-lg-0,.my-lg-0{margin-top:0!important}.mr-lg-0,.mx-lg-0{margin-right:0!important}.mb-lg-0,.my-lg-0{margin-bottom:0!important}.ml-lg-0,.mx-lg-0{margin-left:0!important}.m-lg-1{margin:.25rem!important}.mt-lg-1,.my-lg-1{margin-top:.25rem!important}.mr-lg-1,.mx-lg-1{margin-right:.25rem!important}.mb-lg-1,.my-lg-1{margin-bottom:.25rem!important}.ml-lg-1,.mx-lg-1{margin-left:.25rem!important}.m-lg-2{margin:.5rem!important}.mt-lg-2,.my-lg-2{margin-top:.5rem!important}.mr-lg-2,.mx-lg-2{margin-right:.5rem!important}.mb-lg-2,.my-lg-2{margin-bottom:.5rem!important}.ml-lg-2,.mx-lg-2{margin-left:.5rem!important}.m-lg-3{margin:1rem!important}.mt-lg-3,.my-lg-3{margin-top:1rem!important}.mr-lg-3,.mx-lg-3{margin-right:1rem!important}.mb-lg-3,.my-lg-3{margin-bottom:1rem!important}.ml-lg-3,.mx-lg-3{margin-left:1rem!important}.m-lg-4{margin:1.5rem!important}.mt-lg-4,.my-lg-4{margin-top:1.5rem!important}.mr-lg-4,.mx-lg-4{margin-right:1.5rem!important}.mb-lg-4,.my-lg-4{margin-bottom:1.5rem!important}.ml-lg-4,.mx-lg-4{margin-left:1.5rem!important}.m-lg-5{margin:3rem!important}.mt-lg-5,.my-lg-5{margin-top:3rem!important}.mr-lg-5,.mx-lg-5{margin-right:3rem!important}.mb-lg-5,.my-lg-5{margin-bottom:3rem!important}.ml-lg-5,.mx-lg-5{margin-left:3rem!important}.p-lg-0{padding:0!important}.pt-lg-0,.py-lg-0{padding-top:0!important}.pr-lg-0,.px-lg-0{padding-right:0!important}.pb-lg-0,.py-lg-0{padding-bottom:0!important}.pl-lg-0,.px-lg-0{padding-left:0!important}.p-lg-1{padding:.25rem!important}.pt-lg-1,.py-lg-1{padding-top:.25rem!important}.pr-lg-1,.px-lg-1{padding-right:.25rem!important}.pb-lg-1,.py-lg-1{padding-bottom:.25rem!important}.pl-lg-1,.px-lg-1{padding-left:.25rem!important}.p-lg-2{padding:.5rem!important}.pt-lg-2,.py-lg-2{padding-top:.5rem!important}.pr-lg-2,.px-lg-2{padding-right:.5rem!important}.pb-lg-2,.py-lg-2{padding-bottom:.5rem!important}.pl-lg-2,.px-lg-2{padding-left:.5rem!important}.p-lg-3{padding:1rem!important}.pt-lg-3,.py-lg-3{padding-top:1rem!important}.pr-lg-3,.px-lg-3{padding-right:1rem!important}.pb-lg-3,.py-lg-3{padding-bottom:1rem!important}.pl-lg-3,.px-lg-3{padding-left:1rem!important}.p-lg-4{padding:1.5rem!important}.pt-lg-4,.py-lg-4{padding-top:1.5rem!important}.pr-lg-4,.px-lg-4{padding-right:1.5rem!important}.pb-lg-4,.py-lg-4{padding-bottom:1.5rem!important}.pl-lg-4,.px-lg-4{padding-left:1.5rem!important}.p-lg-5{padding:3rem!important}.pt-lg-5,.py-lg-5{padding-top:3rem!important}.pr-lg-5,.px-lg-5{padding-right:3rem!important}.pb-lg-5,.py-lg-5{padding-bottom:3rem!important}.pl-lg-5,.px-lg-5{padding-left:3rem!important}.m-lg-n1{margin:-.25rem!important}.mt-lg-n1,.my-lg-n1{margin-top:-.25rem!important}.mr-lg-n1,.mx-lg-n1{margin-right:-.25rem!important}.mb-lg-n1,.my-lg-n1{margin-bottom:-.25rem!important}.ml-lg-n1,.mx-lg-n1{margin-left:-.25rem!important}.m-lg-n2{margin:-.5rem!important}.mt-lg-n2,.my-lg-n2{margin-top:-.5rem!important}.mr-lg-n2,.mx-lg-n2{margin-right:-.5rem!important}.mb-lg-n2,.my-lg-n2{margin-bottom:-.5rem!important}.ml-lg-n2,.mx-lg-n2{margin-left:-.5rem!important}.m-lg-n3{margin:-1rem!important}.mt-lg-n3,.my-lg-n3{margin-top:-1rem!important}.mr-lg-n3,.mx-lg-n3{margin-right:-1rem!important}.mb-lg-n3,.my-lg-n3{margin-bottom:-1rem!important}.ml-lg-n3,.mx-lg-n3{margin-left:-1rem!important}.m-lg-n4{margin:-1.5rem!important}.mt-lg-n4,.my-lg-n4{margin-top:-1.5rem!important}.mr-lg-n4,.mx-lg-n4{margin-right:-1.5rem!important}.mb-lg-n4,.my-lg-n4{margin-bottom:-1.5rem!important}.ml-lg-n4,.mx-lg-n4{margin-left:-1.5rem!important}.m-lg-n5{margin:-3rem!important}.mt-lg-n5,.my-lg-n5{margin-top:-3rem!important}.mr-lg-n5,.mx-lg-n5{margin-right:-3rem!important}.mb-lg-n5,.my-lg-n5{margin-bottom:-3rem!important}.ml-lg-n5,.mx-lg-n5{margin-left:-3rem!important}.m-lg-auto{margin:auto!important}.mt-lg-auto,.my-lg-auto{margin-top:auto!important}.mr-lg-auto,.mx-lg-auto{margin-right:auto!important}.mb-lg-auto,.my-lg-auto{margin-bottom:auto!important}.ml-lg-auto,.mx-lg-auto{margin-left:auto!important}}@media (min-width:1200px){.m-xl-0{margin:0!important}.mt-xl-0,.my-xl-0{margin-top:0!important}.mr-xl-0,.mx-xl-0{margin-right:0!important}.mb-xl-0,.my-xl-0{margin-bottom:0!important}.ml-xl-0,.mx-xl-0{margin-left:0!important}.m-xl-1{margin:.25rem!important}.mt-xl-1,.my-xl-1{margin-top:.25rem!important}.mr-xl-1,.mx-xl-1{margin-right:.25rem!important}.mb-xl-1,.my-xl-1{margin-bottom:.25rem!important}.ml-xl-1,.mx-xl-1{margin-left:.25rem!important}.m-xl-2{margin:.5rem!important}.mt-xl-2,.my-xl-2{margin-top:.5rem!important}.mr-xl-2,.mx-xl-2{margin-right:.5rem!important}.mb-xl-2,.my-xl-2{margin-bottom:.5rem!important}.ml-xl-2,.mx-xl-2{margin-left:.5rem!important}.m-xl-3{margin:1rem!important}.mt-xl-3,.my-xl-3{margin-top:1rem!important}.mr-xl-3,.mx-xl-3{margin-right:1rem!important}.mb-xl-3,.my-xl-3{margin-bottom:1rem!important}.ml-xl-3,.mx-xl-3{margin-left:1rem!important}.m-xl-4{margin:1.5rem!important}.mt-xl-4,.my-xl-4{margin-top:1.5rem!important}.mr-xl-4,.mx-xl-4{margin-right:1.5rem!important}.mb-xl-4,.my-xl-4{margin-bottom:1.5rem!important}.ml-xl-4,.mx-xl-4{margin-left:1.5rem!important}.m-xl-5{margin:3rem!important}.mt-xl-5,.my-xl-5{margin-top:3rem!important}.mr-xl-5,.mx-xl-5{margin-right:3rem!important}.mb-xl-5,.my-xl-5{margin-bottom:3rem!important}.ml-xl-5,.mx-xl-5{margin-left:3rem!important}.p-xl-0{padding:0!important}.pt-xl-0,.py-xl-0{padding-top:0!important}.pr-xl-0,.px-xl-0{padding-right:0!important}.pb-xl-0,.py-xl-0{padding-bottom:0!important}.pl-xl-0,.px-xl-0{padding-left:0!important}.p-xl-1{padding:.25rem!important}.pt-xl-1,.py-xl-1{padding-top:.25rem!important}.pr-xl-1,.px-xl-1{padding-right:.25rem!important}.pb-xl-1,.py-xl-1{padding-bottom:.25rem!important}.pl-xl-1,.px-xl-1{padding-left:.25rem!important}.p-xl-2{padding:.5rem!important}.pt-xl-2,.py-xl-2{padding-top:.5rem!important}.pr-xl-2,.px-xl-2{padding-right:.5rem!important}.pb-xl-2,.py-xl-2{padding-bottom:.5rem!important}.pl-xl-2,.px-xl-2{padding-left:.5rem!important}.p-xl-3{padding:1rem!important}.pt-xl-3,.py-xl-3{padding-top:1rem!important}.pr-xl-3,.px-xl-3{padding-right:1rem!important}.pb-xl-3,.py-xl-3{padding-bottom:1rem!important}.pl-xl-3,.px-xl-3{padding-left:1rem!important}.p-xl-4{padding:1.5rem!important}.pt-xl-4,.py-xl-4{padding-top:1.5rem!important}.pr-xl-4,.px-xl-4{padding-right:1.5rem!important}.pb-xl-4,.py-xl-4{padding-bottom:1.5rem!important}.pl-xl-4,.px-xl-4{padding-left:1.5rem!important}.p-xl-5{padding:3rem!important}.pt-xl-5,.py-xl-5{padding-top:3rem!important}.pr-xl-5,.px-xl-5{padding-right:3rem!important}.pb-xl-5,.py-xl-5{padding-bottom:3rem!important}.pl-xl-5,.px-xl-5{padding-left:3rem!important}.m-xl-n1{margin:-.25rem!important}.mt-xl-n1,.my-xl-n1{margin-top:-.25rem!important}.mr-xl-n1,.mx-xl-n1{margin-right:-.25rem!important}.mb-xl-n1,.my-xl-n1{margin-bottom:-.25rem!important}.ml-xl-n1,.mx-xl-n1{margin-left:-.25rem!important}.m-xl-n2{margin:-.5rem!important}.mt-xl-n2,.my-xl-n2{margin-top:-.5rem!important}.mr-xl-n2,.mx-xl-n2{margin-right:-.5rem!important}.mb-xl-n2,.my-xl-n2{margin-bottom:-.5rem!important}.ml-xl-n2,.mx-xl-n2{margin-left:-.5rem!important}.m-xl-n3{margin:-1rem!important}.mt-xl-n3,.my-xl-n3{margin-top:-1rem!important}.mr-xl-n3,.mx-xl-n3{margin-right:-1rem!important}.mb-xl-n3,.my-xl-n3{margin-bottom:-1rem!important}.ml-xl-n3,.mx-xl-n3{margin-left:-1rem!important}.m-xl-n4{margin:-1.5rem!important}.mt-xl-n4,.my-xl-n4{margin-top:-1.5rem!important}.mr-xl-n4,.mx-xl-n4{margin-right:-1.5rem!important}.mb-xl-n4,.my-xl-n4{margin-bottom:-1.5rem!important}.ml-xl-n4,.mx-xl-n4{margin-left:-1.5rem!important}.m-xl-n5{margin:-3rem!important}.mt-xl-n5,.my-xl-n5{margin-top:-3rem!important}.mr-xl-n5,.mx-xl-n5{margin-right:-3rem!important}.mb-xl-n5,.my-xl-n5{margin-bottom:-3rem!important}.ml-xl-n5,.mx-xl-n5{margin-left:-3rem!important}.m-xl-auto{margin:auto!important}.mt-xl-auto,.my-xl-auto{margin-top:auto!important}.mr-xl-auto,.mx-xl-auto{margin-right:auto!important}.mb-xl-auto,.my-xl-auto{margin-bottom:auto!important}.ml-xl-auto,.mx-xl-auto{margin-left:auto!important}}.text-monospace{font-family:SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace!important}.text-justify{text-align:justify!important}.text-wrap{white-space:normal!important}.text-nowrap{white-space:nowrap!important}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}@media (min-width:576px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}}@media (min-width:768px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}}@media (min-width:992px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}}@media (min-width:1200px){.text-xl-left{text-align:left!important}.text-xl-right{text-align:right!important}.text-xl-center{text-align:center!important}}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.font-weight-light{font-weight:300!important}.font-weight-lighter{font-weight:lighter!important}.font-weight-normal{font-weight:400!important}.font-weight-bold{font-weight:700!important}.font-weight-bolder{font-weight:bolder!important}.font-italic{font-style:italic!important}.text-white{color:#fff!important}.text-primary{color:#007bff!important}a.text-primary:focus,a.text-primary:hover{color:#0056b3!important}.text-secondary{color:#6c757d!important}a.text-secondary:focus,a.text-secondary:hover{color:#494f54!important}.text-success{color:#28a745!important}a.text-success:focus,a.text-success:hover{color:#19692c!important}.text-info{color:#17a2b8!important}a.text-info:focus,a.text-info:hover{color:#0f6674!important}.text-warning{color:#ffc107!important}a.text-warning:focus,a.text-warning:hover{color:#ba8b00!important}.text-danger{color:#dc3545!important}a.text-danger:focus,a.text-danger:hover{color:#a71d2a!important}.text-light{color:#f8f9fa!important}a.text-light:focus,a.text-light:hover{color:#cbd3da!important}.text-dark{color:#343a40!important}a.text-dark:focus,a.text-dark:hover{color:#121416!important}.text-body{color:#212529!important}.text-muted{color:#6c757d!important}.text-black-50{color:rgba(0,0,0,.5)!important}.text-white-50{color:rgba(255,255,255,.5)!important}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.text-decoration-none{text-decoration:none!important}.text-break{word-break:break-word!important;overflow-wrap:break-word!important}.text-reset{color:inherit!important}.visible{visibility:visible!important}.invisible{visibility:hidden!important}@media print{*,::after,::before{text-shadow:none!important;box-shadow:none!important}a:not(.btn){text-decoration:underline}abbr[title]::after{content:\" (\" attr(title) \")\"}pre{white-space:pre-wrap!important}blockquote,pre{border:1px solid #adb5bd;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}@page{size:a3}body{min-width:992px!important}.container{min-width:992px!important}.navbar{display:none}.badge{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #dee2e6!important}.table-dark{color:inherit}.table-dark tbody+tbody,.table-dark td,.table-dark th,.table-dark thead th{border-color:#dee2e6}.table .thead-dark th{color:inherit;border-color:#dee2e6}}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r=n(46);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(23)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(22)(!1)).push([e.i,'html, body {\n  height: 100%;\n}\nbody {\n  margin: 0;\n  overflow: hidden;\n  font-family: "Courier New";\n  /* font-size: 40; */\n  -webkit-touch-callout: none; /* iOS Safari */\n  -webkit-user-select: none; /* Safari */\n  -khtml-user-select: none; /* Konqueror HTML */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n  user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome and Opera */\n}\n#app {\n  height: 100vh;\n  width: 100vw;\n  /* position: absolute; */\n  z-index: 0;\n}\n',""])},,,,function(e,t,n){var r=n(77)("wks"),o=n(63),i=n(51).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){var n=e.exports={version:"2.5.5"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(51),o=n(52),i=n(54),a=n(62),s=n(89),l=function(e,t,n){var c,u,d,p,f=e&l.F,h=e&l.G,m=e&l.S,g=e&l.P,b=e&l.B,v=h?r:m?r[t]||(r[t]={}):(r[t]||{}).prototype,y=h?o:o[t]||(o[t]={}),w=y.prototype||(y.prototype={});for(c in h&&(n=t),n)d=((u=!f&&v&&void 0!==v[c])?v:n)[c],p=b&&u?s(d,r):g&&"function"==typeof d?s(Function.call,d):d,v&&a(v,c,d,e&l.U),y[c]!=d&&i(y,c,p),g&&w[c]!=d&&(w[c]=d)};r.core=o,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){var r=n(58),o=n(68);e.exports=n(59)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},,function(e,t,n){var r=n(67),o=n(87),i=n(73),a=Object.defineProperty;t.f=n(59)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){e.exports=!n(61)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(74),o=n(64);e.exports=function(e){return r(o(e))}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(51),o=n(54),i=n(56),a=n(63)("src"),s=Function.toString,l=(""+s).split("toString");n(52).inspectSource=function(e){return s.call(e)},(e.exports=function(e,t,n,s){var c="function"==typeof n;c&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(c&&(i(n,a)||o(n,a,e[t]?""+e[t]:l.join(String(t)))),e===r?e[t]=n:s?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||s.call(this)})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(92),o=n(80);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(11),a=n(29),s=n(21),l=n(2),c=function(e){var t=e.result;return o.a.createElement("li",{className:"".concat(t.success?"text-success":"text-danger")},o.a.createElement("span",{className:"text-light"},o.a.createElement("span",null,t.created_at," – "),o.a.createElement("b",{className:"text-success ml-1"},t.true_balls," "),o.a.createElement("b",{className:"text-danger mr-1"},t.false_balls," "),o.a.createElement("span",null,"Level: ",t.level,", "),o.a.createElement("span",null,"Balls: ",t.balls,", "),o.a.createElement("span",null,"Speed: ",t.speed,", "),o.a.createElement("span",null,"Red Balls: ",t.red_balls)))};c.propTypes={result:n.n(l).a.object.isRequired};var u=c,d=n(20);function p(e,t,n,r){var o=this;this.id=t,this.rad=e.props.radius,this.x=e.random(3*this.rad,e.width-3*this.rad),this.y=e.random(3*this.rad,e.height-3*this.rad),this.xspeed=e.random(0,1),this.yspeed=1-this.xspeed,this.xdirection=e.random(0,1)>.5?-1:1,this.ydirection=e.random(0,1)>.5?-1:1,this.color=n,this.selected=!1,this.move=function(){o.x+=o.xspeed*o.xdirection*r,o.y+=o.yspeed*o.ydirection*r,(o.x>e.width-o.rad||o.x<o.rad)&&(o.xdirection*=-1),(o.y>e.height-o.rad||o.y<o.rad)&&(o.ydirection*=-1)},this.hover=function(){o.d=e.dist(e.mouseX,e.mouseY,o.x,o.y),o.d<o.rad&&e.cursor(e.HAND)},this.clicked=function(){o.d<o.rad&&(o.selected=!o.selected),o.color=o.selected?e.selectedColor:e.defaultColor;var t=setInterval(function(){o.rad+=o.selected?.1:-.1});if(setTimeout(function(){clearInterval(t)},100),o.selected)e.selectedBalls.push(o);else{var n=e.selectedBalls.indexOf(o);n>-1&&e.selectedBalls.splice(n,1)}},this.display=function(){e.push(),e.fill(o.color),e.strokeWeight(2),e.ellipse(o.x,o.y,o.rad,o.rad),e.pop()}}function f(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function h(e){function t(t){var n=e.props,r=n.ballsCount,o=n.targetBallsCount;e.minTargetId=r-o,e.balls=[];for(var i=0;i<r;i++)e.balls[i]=new p(e,i,i>=e.minTargetId?e.targetColor:e.defaultColor,t)}function n(){var n=e.props,r=n.newGame,o=n.speed,i=n.ballsCount;t(r?o:e.demoSpeed),e.reversedBalls=[],e.selectedBalls=[],e.moveBalls=!0,e.startGame=!1,r&&(e.moveBalls=!1,e.timeOut1=setTimeout(function(){e.moveBalls=!0;for(var t=e.minTargetId;t<i;t++)e.balls[t].color=e.defaultColor;e.timeOut2=setTimeout(function(){e.moveBalls=!1,e.startGame=!0},1e3*e.gameTime)},1e3*e.startTime))}e.props={},e.fps=0,e.selectedBalls=[],e.moveBalls=!0,e.startTime=1,e.gameTime=3,e.demoSpeed=1,e.defaultColor=e.color("blue"),e.targetColor=e.color("red"),e.selectedColor=e.color(0,255,0),e.setup=function(){e.createCanvas(e.wrapper.offsetWidth,e.wrapper.offsetHeight),e.frameRate(60),e.ellipseMode(e.RADIUS),e.textFont("Courier New"),e.textStyle(e.BOLD),e.textSize(15),e.onSetAppState({startNewGame:n}),t(e.demoSpeed)},e.draw=function(){if(e.background(230),e.cursor(e.ARROW),e.selectedBalls.length!==e.props.targetBallsCount)e.balls.forEach(function(t){t.display(),e.moveBalls&&t.move(),e.startGame&&t.hover()});else{var t={},n=!0,r=!1,o=void 0;try{for(var i,a=e.reversedBalls.slice(0,e.props.targetBallsCount)[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var s=i.value;t[s.id]={x:s.x.toFixed(3),y:s.y.toFixed(3)}}}catch(e){r=!0,o=e}finally{try{n||null==a.return||a.return()}finally{if(r)throw o}}e.onSetAppState({targetBalls:t,selectedBalls:e.selectedBalls},e.props.generateResult),e.balls=[],e.reversedBalls=[],e.selectedBalls=[]}e.text("Level: ".concat(e.props.level),30,30),e.text("Trials: ".concat(e.props.playedGames,"/").concat(e.props.countOfGames),30,50),e.frameCount%20==0&&(e.fps=e.frameRate()),e.text("FPS: ".concat(e.fps.toFixed(1)),30,70)},e.mousePressed=function(){if(e.startGame){e.reversedBalls=f(e.balls).reverse();var t=!0,n=!1,r=void 0;try{for(var o,i=e.reversedBalls[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;if(a.d<a.rad){a.clicked();break}}}catch(e){n=!0,r=e}finally{try{t||null==i.return||i.return()}finally{if(n)throw r}}}},e.windowResized=function(){e.resizeCanvas(e.wrapper.offsetWidth,e.wrapper.offsetHeight),clearInterval(e.timeOut1),clearInterval(e.timeOut2),e.onSetAppState({newGame:!1},n)}}var m={en:{header:"Instruction",description:"A number of blue circles is first shown to you. Among them half of the circles are randomly selected as «Targets» and indicated for you by red color. Then, all circles turn blue again and start moving with random direction and speed. All circles stop moving after few seconds, and you should identify which of the circles are the «Targets».",current_level:"Current level",balls:"Balls",speed:"Speed",red_balls:"Red Balls",balls_radius:"Balls Radius",new_game:"New Game",home:"Home",last_results:"Your last results"},ru:{header:"Инструкция",description:"---",current_level:"Текущий уровень",balls:"Количество шаров",speed:"Скорость",red_balls:"Красные шары",balls_radius:"Радиус",new_game:"Новая игра",home:"Домой",last_results:"Ваши последние результаты"}},g=n(27);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"a",function(){return _});var _=function(e){function t(e){var n,r,o,i,a,s;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=y(t).call(this,e),n=!o||"object"!==b(o)&&"function"!=typeof o?x(r):o,i=x(x(n)),s=function(){var e=n.state,t=e.ballsCount,r=e.targetBallsCount,o=(e.targetBalls,e.selectedBalls),i=(e.level,e.speed,e.radius,{}),a=!0,s=!1,l=void 0;try{for(var c,u=o[Symbol.iterator]();!(a=(c=u.next()).done);a=!0){var d=c.value;d.id>=t-r?0:0,i[d.id]={x:d.x.toFixed(3),y:d.y.toFixed(3)}}}catch(e){s=!0,l=e}finally{try{a||null==u.return||u.return()}finally{if(s)throw l}}},(a="generateResult")in i?Object.defineProperty(i,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):i[a]=s,n.state={isLoading:!0,current_lang:e.cookies.get("language")||"en",results:[],newGame:!1,level:1,ballsCount:12,speed:3,targetBallsCount:4,radius:50,playedGames:0,countOfGames:5},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(t,g["a"]),n=t,(r=[{key:"render",value:function(){var e=this.state,t=e.newGame,n=e.ballsCount,r=e.targetBallsCount,i=e.speed,l=e.level,c=e.radius,p=e.playedGames,f=e.countOfGames,g=e.current_lang,b=e.results,v=e.user,y=e.isLoading;return o.a.createElement("div",{className:"w-100 h-100 d-flex"},o.a.createElement(a.b,{current_level:{level:l,balls:n,speed:i,red_balls:r},radius:c,lang:m[g],newGameButtonClick:this.newGameButtonClick,goHome:this.goHome}),o.a.createElement(s.a,{newGame:t,user:v,results:b,isLoading:y,current_lang:g,lang:m[g],changeLanguage:this.changeLanguage,Result:u}),o.a.createElement(d.a,{p5Props:{newGame:t,ballsCount:n,targetBallsCount:r,speed:i,level:l,radius:c,playedGames:p,countOfGames:f,generateResult:this.generateResult},sketch:h,onSetAppState:this.onSetAppState}))}}])&&v(n.prototype,r),i&&v(n,i),t}();t.b=Object(i.b)(_)},function(e,t,n){var r=n(55);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){"use strict";n(98);var r,o=(r=n(17))&&"object"==typeof r&&"default"in r?r.default:r;
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */e.exports=o},function(e,t,n){var r=n(55);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(69);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(64);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(70),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(51),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,t,n){var r=n(50)("unscopables"),o=Array.prototype;null==o[r]&&n(54)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t,n){var r=n(77)("keys"),o=n(63);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(58).f,o=n(56),i=n(50)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){t.f=n(50)},function(e,t,n){var r=n(51),o=n(52),i=n(85),a=n(83),s=n(58).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},function(e,t){e.exports=!1},function(e,t){e.exports={}},function(e,t,n){e.exports=!n(59)&&!n(61)(function(){return 7!=Object.defineProperty(n(88)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(55),o=n(51).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(105);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(89),o=n(74),i=n(75),a=n(76),s=n(106);e.exports=function(e,t){var n=1==e,l=2==e,c=3==e,u=4==e,d=6==e,p=5==e||d,f=t||s;return function(t,s,h){for(var m,g,b=i(t),v=o(b),y=r(s,h,3),w=a(v.length),x=0,_=n?f(t,w):l?f(t,0):void 0;w>x;x++)if((p||x in v)&&(g=y(m=v[x],x,b),e))if(n)_[x]=g;else if(g)switch(e){case 3:return!0;case 5:return m;case 6:return x;case 2:_.push(m)}else if(u)return!1;return d?-1:c||u?u:_}}},function(e,t,n){var r=n(69);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(56),o=n(60),i=n(113)(!1),a=n(79)("IE_PROTO");e.exports=function(e,t){var n,s=o(e),l=0,c=[];for(n in s)n!=a&&r(s,n)&&c.push(n);for(;t.length>l;)r(s,n=t[l++])&&(~i(c,n)||c.push(n));return c}},function(e,t,n){var r=n(67),o=n(127),i=n(80),a=n(79)("IE_PROTO"),s=function(){},l=function(){var e,t=n(88)("iframe"),r=i.length;for(t.style.display="none",n(128).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l.prototype[i[r]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=r(e),n=new s,s.prototype=null,n[a]=e):n=l(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(92),o=n(80).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){"use strict";var r=n(85),o=n(53),i=n(62),a=n(54),s=n(86),l=n(138),c=n(82),u=n(139),d=n(50)("iterator"),p=!([].keys&&"next"in[].keys()),f=function(){return this};e.exports=function(e,t,n,h,m,g,b){l(n,t,h);var v,y,w,x=function(e){if(!p&&e in C)return C[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},_=t+" Iterator",k="values"==m,E=!1,C=e.prototype,T=C[d]||C["@@iterator"]||m&&C[m],S=T||x(m),I=m?k?x("entries"):S:void 0,N="Array"==t&&C.entries||T;if(N&&(w=u(N.call(new e)))!==Object.prototype&&w.next&&(c(w,_,!0),r||"function"==typeof w[d]||a(w,d,f)),k&&T&&"values"!==T.name&&(E=!0,S=function(){return T.call(this)}),r&&!b||!p&&!E&&C[d]||a(C,d,S),s[t]=S,s[_]=f,m)if(v={values:k?S:x("values"),keys:g?S:x("keys"),entries:I},b)for(y in v)y in C||i(C,y,v[y]);else o(o.P+o.F*(p||E),t,v);return v}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(97),o={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},i=function(e,t){if(!e)throw a(t)},a=function(e){return new Error("Firebase Database ("+o.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},s=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var o=e.charCodeAt(r);o<128?t[n++]=o:o<2048?(t[n++]=o>>6|192,t[n++]=63&o|128):55296==(64512&o)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(o=65536+((1023&o)<<10)+(1023&e.charCodeAt(++r)),t[n++]=o>>18|240,t[n++]=o>>12&63|128,t[n++]=o>>6&63|128,t[n++]=63&o|128):(t[n++]=o>>12|224,t[n++]=o>>6&63|128,t[n++]=63&o|128)}return t},l={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],o=0;o<e.length;o+=3){var i=e[o],a=o+1<e.length,s=a?e[o+1]:0,l=o+2<e.length,c=l?e[o+2]:0,u=i>>2,d=(3&i)<<4|s>>4,p=(15&s)<<2|c>>6,f=63&c;l||(f=64,a||(p=64)),r.push(n[u],n[d],n[p],n[f])}return r.join("")},encodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(s(e),t)},decodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){for(var t=[],n=0,r=0;n<e.length;){var o=e[n++];if(o<128)t[r++]=String.fromCharCode(o);else if(o>191&&o<224){var i=e[n++];t[r++]=String.fromCharCode((31&o)<<6|63&i)}else if(o>239&&o<365){var a=((7&o)<<18|(63&(i=e[n++]))<<12|(63&(s=e[n++]))<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(a>>10)),t[r++]=String.fromCharCode(56320+(1023&a))}else{i=e[n++];var s=e[n++];t[r++]=String.fromCharCode((15&o)<<12|(63&i)<<6|63&s)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray:function(e,t){this.init_();for(var n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],o=0;o<e.length;){var i=n[e.charAt(o++)],a=o<e.length?n[e.charAt(o)]:0,s=++o<e.length?n[e.charAt(o)]:64,l=++o<e.length?n[e.charAt(o)]:64;if(++o,null==i||null==a||null==s||null==l)throw Error();var c=i<<2|a>>4;if(r.push(c),64!=s){var u=a<<4&240|s>>2;if(r.push(u),64!=l){var d=s<<6&192|l;r.push(d)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},c=function(e){try{return l.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function u(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(var n in t)t.hasOwnProperty(n)&&(e[n]=u(e[n],t[n]));return e}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var d=function(){function e(){var e=this;this.promise=new Promise(function(t,n){e.resolve=t,e.reject=n})}return e.prototype.wrapCallback=function(e){var t=this;return function(n,r){n?t.reject(n):t.resolve(r),"function"==typeof e&&(t.promise.catch(function(){}),1===e.length?e(n):e(n,r))}},e}(),p=function(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""},f="FirebaseError",h=Error.captureStackTrace;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var m=function(){return function(e,t){if(this.code=e,this.message=t,h)h(this,g.prototype.create);else try{throw Error.apply(this,arguments)}catch(e){this.name=f,Object.defineProperty(this,"stack",{get:function(){return e.stack}})}}}();m.prototype=Object.create(Error.prototype),m.prototype.constructor=m,m.prototype.name=f;var g=function(){function e(e,t,n){this.service=e,this.serviceName=t,this.errors=n,this.pattern=/\{\$([^}]+)}/g}return e.prototype.create=function(e,t){void 0===t&&(t={});var n,r=this.errors[e],o=this.service+"/"+e;n=void 0===r?"Error":r.replace(this.pattern,function(e,n){var r=t[n];return void 0!==r?r.toString():"<"+n+"?>"}),n=this.serviceName+": "+n+" ("+o+").";var i=new m(o,n);for(var a in t)t.hasOwnProperty(a)&&"_"!==a.slice(-1)&&(i[a]=t[a]);return i},e}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function b(e){return JSON.parse(e)}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var v=function(e){var t={},n={},r={},o="";try{var i=e.split(".");t=b(c(i[0])||""),n=b(c(i[1])||""),o=i[2],r=n.d||{},delete n.d}catch(e){}return{header:t,claims:n,data:r,signature:o}},y=function(e,t){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t(n,e[n])},w=function(e,t){return y(t,function(t,n){e[t]=n}),e},x=function(e,t,n){for(var r in e)if(t.call(n,e[r],r,e))return r},_=function(e){function t(){var t=e.call(this)||this;t.chain_=[],t.buf_=[],t.W_=[],t.pad_=[],t.inbuf_=0,t.total_=0,t.blockSize=64,t.pad_[0]=128;for(var n=1;n<t.blockSize;++n)t.pad_[n]=0;return t.reset(),t}return r.__extends(t,e),t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(e,t){t||(t=0);var n=this.W_;if("string"==typeof e)for(var r=0;r<16;r++)n[r]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(r=0;r<16;r++)n[r]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(r=16;r<80;r++){var o=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(o<<1|o>>>31)}var i,a,s=this.chain_[0],l=this.chain_[1],c=this.chain_[2],u=this.chain_[3],d=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(i=u^l&(c^u),a=1518500249):(i=l^c^u,a=1859775393):r<60?(i=l&c|u&(l|c),a=2400959708):(i=l^c^u,a=3395469782);o=(s<<5|s>>>27)+i+d+a+n[r]&4294967295;d=u,u=c,c=4294967295&(l<<30|l>>>2),l=s,s=o}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+l&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+u&4294967295,this.chain_[4]=this.chain_[4]+d&4294967295},t.prototype.update=function(e,t){if(null!=e){void 0===t&&(t=e.length);for(var n=t-this.blockSize,r=0,o=this.buf_,i=this.inbuf_;r<t;){if(0==i)for(;r<=n;)this.compress_(e,r),r+=this.blockSize;if("string"==typeof e){for(;r<t;)if(o[i]=e.charCodeAt(r),++r,++i==this.blockSize){this.compress_(o),i=0;break}}else for(;r<t;)if(o[i]=e[r],++r,++i==this.blockSize){this.compress_(o),i=0;break}}this.inbuf_=i,this.total_+=t}},t.prototype.digest=function(){var e=[],t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&t,t/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var o=24;o>=0;o-=8)e[r]=this.chain_[n]>>o&255,++r;return e},t}(function(){return function(){this.blockSize=-1}}());var k=function(){function e(e,t){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then(function(){e(n)}).catch(function(e){n.error(e)})}return e.prototype.next=function(e){this.forEachObserver(function(t){t.next(e)})},e.prototype.error=function(e){this.forEachObserver(function(t){t.error(e)}),this.close(e)},e.prototype.complete=function(){this.forEachObserver(function(e){e.complete()}),this.close()},e.prototype.subscribe=function(e,t,n){var r,o=this;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(e,t){if("object"!=typeof e||null===e)return!1;for(var n=0,r=t;n<r.length;n++){var o=r[n];if(o in e&&"function"==typeof e[o])return!0}return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:n}).next&&(r.next=E),void 0===r.error&&(r.error=E),void 0===r.complete&&(r.complete=E);var i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then(function(){try{o.finalError?r.error(o.finalError):r.complete()}catch(e){}}),this.observers.push(r),i},e.prototype.unsubscribeOne=function(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},e.prototype.forEachObserver=function(e){if(!this.finalized)for(var t=0;t<this.observers.length;t++)this.sendOne(t,e)},e.prototype.sendOne=function(e,t){var n=this;this.task.then(function(){if(void 0!==n.observers&&void 0!==n.observers[e])try{t(n.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}})},e.prototype.close=function(e){var t=this;this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then(function(){t.observers=void 0,t.onNoObservers=void 0}))},e}();function E(){}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function C(e,t,n){var r="";switch(t){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var o=e+" failed: ";return o+=r+" argument "}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
t.assert=i,t.assertionError=a,t.base64=l,t.base64Decode=c,t.base64Encode=function(e){var t=s(e);return l.encodeByteArray(t,!0)},t.CONSTANTS=o,t.deepCopy=
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e){return u(void 0,e)},t.deepExtend=u,t.patchProperty=function(e,t,n){e[t]=n},t.Deferred=d,t.getUA=p,t.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(p())},t.isNodeSdk=function(){return!0===o.NODE_CLIENT||!0===o.NODE_ADMIN},t.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},t.ErrorFactory=g,t.FirebaseError=m,t.patchCapture=function(e){var t=h;return h=e,t},t.jsonEval=b,t.stringify=function(e){return JSON.stringify(e)},t.decode=v,t.isAdmin=function(e){var t=v(e).claims;return"object"==typeof t&&!0===t.admin},t.issuedAtTime=function(e){var t=v(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},t.isValidFormat=function(e){var t=v(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},t.isValidTimestamp=function(e){var t,n,r=v(e).claims,o=Math.floor((new Date).getTime()/1e3);return"object"==typeof r&&(r.hasOwnProperty("nbf")?t=r.nbf:r.hasOwnProperty("iat")&&(t=r.iat),n=r.hasOwnProperty("exp")?r.exp:t+86400),o&&t&&n&&o>=t&&o<=n},t.clone=function(e){return w({},e)},t.contains=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.every=function(e,t){for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&!t(n,e[n]))return!1;return!0},t.extend=w,t.findKey=x,t.findValue=function(e,t,n){var r=x(e,t,n);return r&&e[r]},t.forEach=y,t.getAnyKey=function(e){for(var t in e)return t},t.getCount=function(e){var t=0;for(var n in e)t++;return t},t.getValues=function(e){var t=[],n=0;for(var r in e)t[n++]=e[r];return t},t.isEmpty=function(e){for(var t in e)return!1;return!0},t.isNonNullObject=function(e){return"object"==typeof e&&null!==e},t.map=function(e,t,n){var r={};for(var o in e)r[o]=t.call(n,e[o],o,e);return r},t.safeGet=function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]},t.querystring=function(e){var t=[];return y(e,function(e,n){Array.isArray(n)?n.forEach(function(n){t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))}):t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))}),t.length?"&"+t.join("&"):""},t.querystringDecode=function(e){var t={};return e.replace(/^\?/,"").split("&").forEach(function(e){if(e){var n=e.split("=");t[n[0]]=n[1]}}),t},t.Sha1=_,t.async=function(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then(function(){e.apply(void 0,n)}).catch(function(e){t&&t(e)})}},t.createSubscribe=function(e,t){var n=new k(e,t);return n.subscribe.bind(n)},t.errorPrefix=C,t.validateArgCount=function(e,t,n,r){var o;if(r<t?o="at least "+t:r>n&&(o=0===n?"none":"no more than "+n),o)throw new Error(e+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+o+".")},t.validateCallback=function(e,t,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(C(e,t,r)+"must be a valid function.")},t.validateContextObject=function(e,t,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(C(e,t,r)+"must be a valid context object.")}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */,t.validateNamespace=function(e,t,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(C(e,t,r)+"must be a valid firebase namespace.")},t.stringLength=function(e){for(var t=0,n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t++:r<2048?t+=2:r>=55296&&r<=56319?(t+=4,n++):t+=3}return t},t.stringToByteArray=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var o=e.charCodeAt(r);if(o>=55296&&o<=56319){var a=o-55296;i(++r<e.length,"Surrogate pair missing trail surrogate."),o=65536+(a<<10)+(e.charCodeAt(r)-56320)}o<128?t[n++]=o:o<2048?(t[n++]=o>>6|192,t[n++]=63&o|128):o<65536?(t[n++]=o>>12|224,t[n++]=o>>6&63|128,t[n++]=63&o|128):(t[n++]=o>>18|240,t[n++]=o>>12&63|128,t[n++]=o>>6&63|128,t[n++]=63&o|128)}return t}},function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",function(){return o}),n.d(t,"__assign",function(){return i}),n.d(t,"__rest",function(){return a}),n.d(t,"__decorate",function(){return s}),n.d(t,"__param",function(){return l}),n.d(t,"__metadata",function(){return c}),n.d(t,"__awaiter",function(){return u}),n.d(t,"__generator",function(){return d}),n.d(t,"__exportStar",function(){return p}),n.d(t,"__values",function(){return f}),n.d(t,"__read",function(){return h}),n.d(t,"__spread",function(){return m}),n.d(t,"__await",function(){return g}),n.d(t,"__asyncGenerator",function(){return b}),n.d(t,"__asyncDelegator",function(){return v}),n.d(t,"__asyncValues",function(){return y}),n.d(t,"__makeTemplateObject",function(){return w}),n.d(t,"__importStar",function(){return x}),n.d(t,"__importDefault",function(){return _});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]])}return n}function s(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function l(e,t){return function(n,r){t(n,r,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function u(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}l((r=r.apply(e,t||[])).next())})}function d(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[0,o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function p(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function f(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function h(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function m(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e}function g(e){return this instanceof g?(this.v=e,this):new g(e)}function b(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise(function(n,r){i.push([e,t,n,r])>1||s(e,t)})})}function s(e,t){try{(n=o[e](t)).value instanceof g?Promise.resolve(n.value.v).then(l,c):u(i[0][2],n)}catch(e){u(i[0][3],e)}var n}function l(e){s("next",e)}function c(e){s("throw",e)}function u(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}}function v(e){var t,n;return t={},r("next"),r("throw",function(e){throw e}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){e[r]&&(t[r]=function(t){return(n=!n)?{value:g(e[r](t)),done:"return"===r}:o?o(t):t})}}function y(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator];return t?t.call(e):f(e)}function w(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function x(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function _(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";n.r(t);n(99),n(100),n(103),n(108),n(110),n(115),n(120),n(123),n(135)},function(e,t){!function(e){"use strict";if(!e.fetch){var t={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(t.arrayBuffer)var n=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],r=function(e){return e&&DataView.prototype.isPrototypeOf(e)},o=ArrayBuffer.isView||function(e){return e&&n.indexOf(Object.prototype.toString.call(e))>-1};u.prototype.append=function(e,t){e=s(e),t=l(t);var n=this.map[e];this.map[e]=n?n+","+t:t},u.prototype.delete=function(e){delete this.map[s(e)]},u.prototype.get=function(e){return e=s(e),this.has(e)?this.map[e]:null},u.prototype.has=function(e){return this.map.hasOwnProperty(s(e))},u.prototype.set=function(e,t){this.map[s(e)]=l(t)},u.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},u.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),c(e)},u.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),c(e)},u.prototype.entries=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),c(e)},t.iterable&&(u.prototype[Symbol.iterator]=u.prototype.entries);var i=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},m.call(g.prototype),m.call(v.prototype),v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new u(this.headers),url:this.url})},v.error=function(){var e=new v(null,{status:0,statusText:""});return e.type="error",e};var a=[301,302,303,307,308];v.redirect=function(e,t){if(-1===a.indexOf(t))throw new RangeError("Invalid status code");return new v(null,{status:t,headers:{location:e}})},e.Headers=u,e.Request=g,e.Response=v,e.fetch=function(e,n){return new Promise(function(r,o){var i=new g(e,n),a=new XMLHttpRequest;a.onload=function(){var e,t,n={status:a.status,statusText:a.statusText,headers:(e=a.getAllResponseHeaders()||"",t=new u,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(e){var n=e.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();t.append(r,o)}}),t)};n.url="responseURL"in a?a.responseURL:n.headers.get("X-Request-URL");var o="response"in a?a.response:a.responseText;r(new v(o,n))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&t.blob&&(a.responseType="blob"),i.headers.forEach(function(e,t){a.setRequestHeader(t,e)}),a.send(void 0===i._bodyInit?null:i._bodyInit)})},e.fetch.polyfill=!0}function s(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function l(e){return"string"!=typeof e&&(e=String(e)),e}function c(e){var n={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return t.iterable&&(n[Symbol.iterator]=function(){return n}),n}function u(e){this.map={},e instanceof u?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function d(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function p(e){return new Promise(function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function f(e){var t=new FileReader,n=p(t);return t.readAsArrayBuffer(e),n}function h(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(t.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(t.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(t.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(t.arrayBuffer&&t.blob&&r(e))this._bodyArrayBuffer=h(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!t.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!o(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=h(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):t.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},t.blob&&(this.blob=function(){var e=d(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?d(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(f)}),this.text=function(){var e,t,n,r=d(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,n=p(t),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},t.formData&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}function g(e,t){var n,r,o=(t=t||{}).body;if(e instanceof g){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new u(e.headers)),this.method=e.method,this.mode=e.mode,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new u(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),i.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function b(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(o))}}),t}function v(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new u(t.headers),this.url=t.url||"",this._initBody(e)}}("undefined"!=typeof self?self:this)},function(e,t,n){"use strict";(function(e,t){var n=setTimeout;function r(){}function o(e){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],u(e,this)}function i(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,o._immediateFn(function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var r;try{r=n(e._value)}catch(e){return void s(t.promise,e)}a(t.promise,r)}else(1===e._state?a:s)(t.promise,e._value)})):e._deferreds.push(t)}function a(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof o)return e._state=3,e._value=t,void l(e);if("function"==typeof n)return void u((r=n,i=t,function(){r.apply(i,arguments)}),e)}e._state=1,e._value=t,l(e)}catch(t){s(e,t)}var r,i}function s(e,t){e._state=2,e._value=t,l(e)}function l(e){2===e._state&&0===e._deferreds.length&&o._immediateFn(function(){e._handled||o._unhandledRejectionFn(e._value)});for(var t=0,n=e._deferreds.length;t<n;t++)i(e,e._deferreds[t]);e._deferreds=null}function c(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function u(e,t){var n=!1;try{e(function(e){n||(n=!0,a(t,e))},function(e){n||(n=!0,s(t,e))})}catch(e){if(n)return;n=!0,s(t,e)}}o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){var n=new this.constructor(r);return i(this,new c(e,t,n)),n},o.prototype.finally=function(e){var t=this.constructor;return this.then(function(n){return t.resolve(e()).then(function(){return n})},function(n){return t.resolve(e()).then(function(){return t.reject(n)})})},o.all=function(e){return new o(function(t,n){if(!e||void 0===e.length)throw new TypeError("Promise.all accepts an array");var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function i(e,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(t){i(e,t)},n)}r[e]=a,0==--o&&t(r)}catch(e){n(e)}}for(var a=0;a<r.length;a++)i(a,r[a])})},o.resolve=function(e){return e&&"object"==typeof e&&e.constructor===o?e:new o(function(t){t(e)})},o.reject=function(e){return new o(function(t,n){n(e)})},o.race=function(e){return new o(function(t,n){for(var r=0,o=e.length;r<o;r++)e[r].then(t,n)})},o._immediateFn="function"==typeof e&&function(t){e(t)}||function(e){n(e,0)},o._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};var d=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t)return t;throw new Error("unable to locate global object")}();d.Promise||(d.Promise=o)}).call(this,n(101).setImmediate,n(19))},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(102),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(19))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o,i,a,s,l=1,c={},u=!1,d=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){h(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){h(e.data)},r=function(e){i.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(o=d.documentElement,r=function(e){var t=d.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):r=function(e){setTimeout(h,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),r=function(t){e.postMessage(a+t,"*")}),p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return c[l]=o,r(l),l++},p.clearImmediate=f}function f(e){delete c[e]}function h(e){if(u)setTimeout(h,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{f(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(19),n(31))},function(e,t,n){n(104),e.exports=n(52).Array.find},function(e,t,n){"use strict";var r=n(53),o=n(90)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(78)("find")},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(107);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(55),o=n(91),i=n(50)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){n(109),e.exports=n(52).Array.findIndex},function(e,t,n){"use strict";var r=n(53),o=n(90)(6),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(78)(i)},function(e,t,n){n(111),e.exports=n(52).Object.assign},function(e,t,n){var r=n(53);r(r.S+r.F,"Object",{assign:n(112)})},function(e,t,n){"use strict";var r=n(65),o=n(81),i=n(71),a=n(75),s=n(74),l=Object.assign;e.exports=!l||n(61)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=l({},e)[n]||Object.keys(l({},t)).join("")!=r})?function(e,t){for(var n=a(e),l=arguments.length,c=1,u=o.f,d=i.f;l>c;)for(var p,f=s(arguments[c++]),h=u?r(f).concat(u(f)):r(f),m=h.length,g=0;m>g;)d.call(f,p=h[g++])&&(n[p]=f[p]);return n}:l},function(e,t,n){var r=n(60),o=n(76),i=n(114);e.exports=function(e){return function(t,n,a){var s,l=r(t),c=o(l.length),u=i(a,c);if(e&&n!=n){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((e||u in l)&&l[u]===n)return e||u||0;return!e&&-1}}},function(e,t,n){var r=n(70),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){n(116),e.exports=n(52).String.startsWith},function(e,t,n){"use strict";var r=n(53),o=n(76),i=n(117),a="".startsWith;r(r.P+r.F*n(119)("startsWith"),"String",{startsWith:function(e){var t=i(this,e,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return a?a.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){var r=n(118),o=n(64);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){var r=n(55),o=n(69),i=n(50)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(50)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){n(121),e.exports=n(52).String.repeat},function(e,t,n){var r=n(53);r(r.P,"String",{repeat:n(122)})},function(e,t,n){"use strict";var r=n(70),o=n(64);e.exports=function(e){var t=String(o(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},function(e,t,n){n(124),n(131),n(133),n(134),e.exports=n(52).Symbol},function(e,t,n){"use strict";var r=n(51),o=n(56),i=n(59),a=n(53),s=n(62),l=n(125).KEY,c=n(61),u=n(77),d=n(82),p=n(63),f=n(50),h=n(83),m=n(84),g=n(126),b=n(91),v=n(67),y=n(55),w=n(60),x=n(73),_=n(68),k=n(93),E=n(129),C=n(130),T=n(58),S=n(65),I=C.f,N=T.f,O=E.f,P=r.Symbol,A=r.JSON,R=A&&A.stringify,D=f("_hidden"),L=f("toPrimitive"),j={}.propertyIsEnumerable,M=u("symbol-registry"),F=u("symbols"),U=u("op-symbols"),z=Object.prototype,W="function"==typeof P,V=r.QObject,B=!V||!V.prototype||!V.prototype.findChild,q=i&&c(function(){return 7!=k(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=I(z,t);r&&delete z[t],N(e,t,n),r&&e!==z&&N(z,t,r)}:N,H=function(e){var t=F[e]=k(P.prototype);return t._k=e,t},Q=W&&"symbol"==typeof P.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof P},K=function(e,t,n){return e===z&&K(U,t,n),v(e),t=x(t,!0),v(n),o(F,t)?(n.enumerable?(o(e,D)&&e[D][t]&&(e[D][t]=!1),n=k(n,{enumerable:_(0,!1)})):(o(e,D)||N(e,D,_(1,{})),e[D][t]=!0),q(e,t,n)):N(e,t,n)},G=function(e,t){v(e);for(var n,r=g(t=w(t)),o=0,i=r.length;i>o;)K(e,n=r[o++],t[n]);return e},$=function(e){var t=j.call(this,e=x(e,!0));return!(this===z&&o(F,e)&&!o(U,e))&&(!(t||!o(this,e)||!o(F,e)||o(this,D)&&this[D][e])||t)},Y=function(e,t){if(e=w(e),t=x(t,!0),e!==z||!o(F,t)||o(U,t)){var n=I(e,t);return!n||!o(F,t)||o(e,D)&&e[D][t]||(n.enumerable=!0),n}},X=function(e){for(var t,n=O(w(e)),r=[],i=0;n.length>i;)o(F,t=n[i++])||t==D||t==l||r.push(t);return r},J=function(e){for(var t,n=e===z,r=O(n?U:w(e)),i=[],a=0;r.length>a;)!o(F,t=r[a++])||n&&!o(z,t)||i.push(F[t]);return i};W||(s((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===z&&t.call(U,n),o(this,D)&&o(this[D],e)&&(this[D][e]=!1),q(this,e,_(1,n))};return i&&B&&q(z,e,{configurable:!0,set:t}),H(e)}).prototype,"toString",function(){return this._k}),C.f=Y,T.f=K,n(94).f=E.f=X,n(71).f=$,n(81).f=J,i&&!n(85)&&s(z,"propertyIsEnumerable",$,!0),h.f=function(e){return H(f(e))}),a(a.G+a.W+a.F*!W,{Symbol:P});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Z.length>ee;)f(Z[ee++]);for(var te=S(f.store),ne=0;te.length>ne;)m(te[ne++]);a(a.S+a.F*!W,"Symbol",{for:function(e){return o(M,e+="")?M[e]:M[e]=P(e)},keyFor:function(e){if(!Q(e))throw TypeError(e+" is not a symbol!");for(var t in M)if(M[t]===e)return t},useSetter:function(){B=!0},useSimple:function(){B=!1}}),a(a.S+a.F*!W,"Object",{create:function(e,t){return void 0===t?k(e):G(k(e),t)},defineProperty:K,defineProperties:G,getOwnPropertyDescriptor:Y,getOwnPropertyNames:X,getOwnPropertySymbols:J}),A&&a(a.S+a.F*(!W||c(function(){var e=P();return"[null]"!=R([e])||"{}"!=R({a:e})||"{}"!=R(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(y(t)||void 0!==e)&&!Q(e))return b(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!Q(t))return t}),r[1]=t,R.apply(A,r)}}),P.prototype[L]||n(54)(P.prototype,L,P.prototype.valueOf),d(P,"Symbol"),d(Math,"Math",!0),d(r.JSON,"JSON",!0)},function(e,t,n){var r=n(63)("meta"),o=n(55),i=n(56),a=n(58).f,s=0,l=Object.isExtensible||function(){return!0},c=!n(61)(function(){return l(Object.preventExtensions({}))}),u=function(e){a(e,r,{value:{i:"O"+ ++s,w:{}}})},d=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!l(e))return"F";if(!t)return"E";u(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!l(e))return!0;if(!t)return!1;u(e)}return e[r].w},onFreeze:function(e){return c&&d.NEED&&l(e)&&!i(e,r)&&u(e),e}}},function(e,t,n){var r=n(65),o=n(81),i=n(71);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,s=n(e),l=i.f,c=0;s.length>c;)l.call(e,a=s[c++])&&t.push(a);return t}},function(e,t,n){var r=n(58),o=n(67),i=n(65);e.exports=n(59)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),s=a.length,l=0;s>l;)r.f(e,n=a[l++],t[n]);return e}},function(e,t,n){var r=n(51).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(60),o=n(94).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},function(e,t,n){var r=n(71),o=n(68),i=n(60),a=n(73),s=n(56),l=n(87),c=Object.getOwnPropertyDescriptor;t.f=n(59)?c:function(e,t){if(e=i(e),t=a(t,!0),l)try{return c(e,t)}catch(e){}if(s(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){"use strict";var r=n(132),o={};o[n(50)("toStringTag")]="z",o+""!="[object z]"&&n(62)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(e,t,n){var r=n(69),o=n(50)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){n(84)("asyncIterator")},function(e,t,n){n(84)("observable")},function(e,t,n){n(136),n(140),e.exports=n(83).f("iterator")},function(e,t,n){"use strict";var r=n(137)(!0);n(95)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){var r=n(70),o=n(64);e.exports=function(e){return function(t,n){var i,a,s=String(o(t)),l=r(n),c=s.length;return l<0||l>=c?e?"":void 0:(i=s.charCodeAt(l))<55296||i>56319||l+1===c||(a=s.charCodeAt(l+1))<56320||a>57343?e?s.charAt(l):i:e?s.slice(l,l+2):a-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(93),o=n(68),i=n(82),a={};n(54)(a,n(50)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(56),o=n(75),i=n(79)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){for(var r=n(141),o=n(65),i=n(62),a=n(51),s=n(54),l=n(86),c=n(50),u=c("iterator"),d=c("toStringTag"),p=l.Array,f={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(f),m=0;m<h.length;m++){var g,b=h[m],v=f[b],y=a[b],w=y&&y.prototype;if(w&&(w[u]||s(w,u,p),w[d]||s(w,d,b),l[b]=p,v))for(g in r)w[g]||i(w,g,r[g],!0)}},function(e,t,n){"use strict";var r=n(78),o=n(142),i=n(86),a=n(60);e.exports=n(95)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";(function(e){var t=n(17),r=n.n(t);(function(){var e,t=t||{},n=this;function o(e){return"string"==typeof e}function i(e){return"boolean"==typeof e}function a(){}function s(e){var t=typeof e;if("object"==t){if(!e)return"null";if(e instanceof Array)return"array";if(e instanceof Object)return t;var n=Object.prototype.toString.call(e);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof e.length&&void 0!==e.splice&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==e.call&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("call"))return"function"}else if("function"==t&&void 0===e.call)return"object";return t}function l(e){return null===e}function c(e){return"array"==s(e)}function u(e){var t=s(e);return"array"==t||"object"==t&&"number"==typeof e.length}function d(e){return"function"==s(e)}function p(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}var f="closure_uid_"+(1e9*Math.random()>>>0),h=0;function m(e,t,n){return e.call.apply(e.bind,arguments)}function g(e,t,n){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function b(e,t,n){return(b=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?m:g).apply(null,arguments)}function v(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}var y=Date.now||function(){return+new Date};function w(e,t){function n(){}n.prototype=t.prototype,e.ob=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.ed=function(e,n,r){for(var o=Array(arguments.length-2),i=2;i<arguments.length;i++)o[i-2]=arguments[i];return t.prototype[n].apply(e,o)}}function x(e){e.prototype.then=e.prototype.then,e.prototype.$goog_Thenable=!0}function _(e){if(!e)return!1;try{return!!e.$goog_Thenable}catch(e){return!1}}function k(e){if(Error.captureStackTrace)Error.captureStackTrace(this,k);else{var t=Error().stack;t&&(this.stack=t)}e&&(this.message=String(e))}function E(e,t){for(var n="",r=(e=e.split("%s")).length-1,o=0;o<r;o++)n+=e[o]+(o<t.length?t[o]:"%s");k.call(this,n+e[r])}function C(e,t){throw new E("Failure"+(e?": "+e:""),Array.prototype.slice.call(arguments,1))}function T(e,t){this.c=e,this.f=t,this.b=0,this.a=null}function S(e,t){e.f(t),100>e.b&&(e.b++,t.next=e.a,e.a=t)}function I(){this.b=this.a=null}w(k,Error),k.prototype.name="CustomError",w(E,k),E.prototype.name="AssertionError",T.prototype.get=function(){if(0<this.b){this.b--;var e=this.a;this.a=e.next,e.next=null}else e=this.c();return e};var N=new T(function(){return new P},function(e){e.reset()});function O(){var e=fe,t=null;return e.a&&(t=e.a,e.a=e.a.next,e.a||(e.b=null),t.next=null),t}function P(){this.next=this.b=this.a=null}I.prototype.add=function(e,t){var n=N.get();n.set(e,t),this.b?this.b.next=n:this.a=n,this.b=n},P.prototype.set=function(e,t){this.a=e,this.b=t,this.next=null},P.prototype.reset=function(){this.next=this.b=this.a=null};var A=Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t,void 0)}:function(e,t){if(o(e))return o(t)&&1==t.length?e.indexOf(t,0):-1;for(var n=0;n<e.length;n++)if(n in e&&e[n]===t)return n;return-1},R=Array.prototype.forEach?function(e,t,n){Array.prototype.forEach.call(e,t,n)}:function(e,t,n){for(var r=e.length,i=o(e)?e.split(""):e,a=0;a<r;a++)a in i&&t.call(n,i[a],a,e)};var D=Array.prototype.map?function(e,t){return Array.prototype.map.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=Array(n),i=o(e)?e.split(""):e,a=0;a<n;a++)a in i&&(r[a]=t.call(void 0,i[a],a,e));return r},L=Array.prototype.some?function(e,t){return Array.prototype.some.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=o(e)?e.split(""):e,i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e))return!0;return!1};function j(e,t){return 0<=A(e,t)}function M(e,t){var n;return(n=0<=(t=A(e,t)))&&Array.prototype.splice.call(e,t,1),n}function F(e,t){!function(e,t){var n=e.length,r=o(e)?e.split(""):e;for(--n;0<=n;--n)n in r&&t.call(void 0,r[n],n,e)}(e,function(n,r){t.call(void 0,n,r,e)&&1==Array.prototype.splice.call(e,r,1).length&&0})}function U(e){return Array.prototype.concat.apply([],arguments)}function z(e){var t=e.length;if(0<t){for(var n=Array(t),r=0;r<t;r++)n[r]=e[r];return n}return[]}function W(e,t){for(var n=e.split("%s"),r="",o=Array.prototype.slice.call(arguments,1);o.length&&1<n.length;)r+=n.shift()+o.shift();return r+n.join("%s")}var V=String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]};function B(e){return X.test(e)?(-1!=e.indexOf("&")&&(e=e.replace(H,"&amp;")),-1!=e.indexOf("<")&&(e=e.replace(Q,"&lt;")),-1!=e.indexOf(">")&&(e=e.replace(K,"&gt;")),-1!=e.indexOf('"')&&(e=e.replace(G,"&quot;")),-1!=e.indexOf("'")&&(e=e.replace($,"&#39;")),-1!=e.indexOf("\0")&&(e=e.replace(Y,"&#0;")),e):e}var q,H=/&/g,Q=/</g,K=/>/g,G=/"/g,$=/'/g,Y=/\x00/g,X=/[\x00&<>"']/;function J(e,t){return-1!=e.indexOf(t)}function Z(e,t){return e<t?-1:e>t?1:0}e:{var ee=n.navigator;if(ee){var te=ee.userAgent;if(te){q=te;break e}}q=""}function ne(e){return J(q,e)}function re(e,t){for(var n in e)t.call(void 0,e[n],n,e)}function oe(e){for(var t in e)return!1;return!0}function ie(e){var t,n={};for(t in e)n[t]=e[t];return n}var ae,se,le="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function ce(e,t){for(var n,r,o=1;o<arguments.length;o++){for(n in r=arguments[o])e[n]=r[n];for(var i=0;i<le.length;i++)n=le[i],Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}}function ue(e){n.setTimeout(function(){throw e},0)}function de(e,t){se||function(){if(n.Promise&&n.Promise.resolve){var e=n.Promise.resolve(void 0);se=function(){e.then(he)}}else se=function(){var e=he;!d(n.setImmediate)||n.Window&&n.Window.prototype&&!ne("Edge")&&n.Window.prototype.setImmediate==n.setImmediate?(ae||(ae=function(){var e=n.MessageChannel;if(void 0===e&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!ne("Presto")&&(e=function(){var e=document.createElement("IFRAME");e.style.display="none",e.src="",document.documentElement.appendChild(e);var t=e.contentWindow;(e=t.document).open(),e.write(""),e.close();var n="callImmediate"+Math.random(),r="file:"==t.location.protocol?"*":t.location.protocol+"//"+t.location.host;e=b(function(e){"*"!=r&&e.origin!=r||e.data!=n||this.port1.onmessage()},this),t.addEventListener("message",e,!1),this.port1={},this.port2={postMessage:function(){t.postMessage(n,r)}}}),void 0!==e&&!ne("Trident")&&!ne("MSIE")){var t=new e,r={},o=r;return t.port1.onmessage=function(){if(void 0!==r.next){var e=(r=r.next).wb;r.wb=null,e()}},function(e){o.next={wb:e},o=o.next,t.port2.postMessage(0)}}return"undefined"!=typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(e){var t=document.createElement("SCRIPT");t.onreadystatechange=function(){t.onreadystatechange=null,t.parentNode.removeChild(t),t=null,e(),e=null},document.documentElement.appendChild(t)}:function(e){n.setTimeout(e,0)}}()),ae(e)):n.setImmediate(e)}}(),pe||(se(),pe=!0),fe.add(e,t)}var pe=!1,fe=new I;function he(){for(var e;e=O();){try{e.a.call(e.b)}catch(e){ue(e)}S(N,e)}pe=!1}function me(e,t){if(this.a=ge,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,e!=a)try{var n=this;e.call(t,function(e){Ie(n,be,e)},function(e){if(!(e instanceof Le))try{if(e instanceof Error)throw e;throw Error("Promise rejected.")}catch(e){}Ie(n,ve,e)})}catch(e){Ie(this,ve,e)}}var ge=0,be=2,ve=3;function ye(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}ye.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var we=new T(function(){return new ye},function(e){e.reset()});function xe(e,t,n){var r=we.get();return r.g=e,r.b=t,r.f=n,r}function _e(e){if(e instanceof me)return e;var t=new me(a);return Ie(t,be,e),t}function ke(e){return new me(function(t,n){n(e)})}function Ee(e,t,n){Ne(e,t,n,null)||de(v(t,e))}function Ce(e){return new me(function(t){var n=e.length,r=[];if(n)for(var o=function(e,o,i){n--,r[e]=o?{Db:!0,value:i}:{Db:!1,reason:i},0==n&&t(r)},i=0;i<e.length;i++)Ee(e[i],v(o,i,!0),v(o,i,!1));else t(r)})}function Te(e,t){e.b||e.a!=be&&e.a!=ve||Oe(e),e.f?e.f.next=t:e.b=t,e.f=t}function Se(e,t,n,r){var o=xe(null,null,null);return o.a=new me(function(e,i){o.g=t?function(n){try{var o=t.call(r,n);e(o)}catch(e){i(e)}}:e,o.b=n?function(t){try{var o=n.call(r,t);void 0===o&&t instanceof Le?i(t):e(o)}catch(e){i(e)}}:i}),o.a.c=e,Te(e,o),o.a}function Ie(e,t,n){e.a==ge&&(e===n&&(t=ve,n=new TypeError("Promise cannot resolve to itself")),e.a=1,Ne(n,e.Nc,e.Oc,e)||(e.i=n,e.a=t,e.c=null,Oe(e),t!=ve||n instanceof Le||function(e,t){e.g=!0,de(function(){e.g&&De.call(null,t)})}(e,n)))}function Ne(e,t,n,r){if(e instanceof me)return Te(e,xe(t||a,n||null,r)),!0;if(_(e))return e.then(t,n,r),!0;if(p(e))try{var o=e.then;if(d(o))return function(e,t,n,r,o){function i(e){a||(a=!0,r.call(o,e))}var a=!1;try{t.call(e,function(e){a||(a=!0,n.call(o,e))},i)}catch(e){i(e)}}(e,o,t,n,r),!0}catch(e){return n.call(r,e),!0}return!1}function Oe(e){e.h||(e.h=!0,de(e.Yb,e))}function Pe(e){var t=null;return e.b&&(t=e.b,e.b=t.next,t.next=null),e.b||(e.f=null),t}function Ae(e,t,n,r){if(n==ve&&t.b&&!t.c)for(;e&&e.g;e=e.c)e.g=!1;if(t.a)t.a.c=null,Re(t,n,r);else try{t.c?t.g.call(t.f):Re(t,n,r)}catch(e){De.call(null,e)}S(we,t)}function Re(e,t,n){t==be?e.g.call(e.f,n):e.b&&e.b.call(e.f,n)}me.prototype.then=function(e,t,n){return Se(this,d(e)?e:null,d(t)?t:null,n)},x(me),(e=me.prototype).ia=function(e,t){return(e=xe(e,e,t)).c=!0,Te(this,e),this},e.s=function(e,t){return Se(this,null,e,t)},e.cancel=function(e){this.a==ge&&de(function(){!function e(t,n){if(t.a==ge)if(t.c){var r=t.c;if(r.b){for(var o=0,i=null,a=null,s=r.b;s&&(s.c||(o++,s.a==t&&(i=s),!(i&&1<o)));s=s.next)i||(a=s);i&&(r.a==ge&&1==o?e(r,n):(a?((o=a).next==r.f&&(r.f=o),o.next=o.next.next):Pe(r),Ae(r,i,ve,n)))}t.c=null}else Ie(t,ve,n)}(this,new Le(e))},this)},e.Nc=function(e){this.a=ge,Ie(this,be,e)},e.Oc=function(e){this.a=ge,Ie(this,ve,e)},e.Yb=function(){for(var e;e=Pe(this);)Ae(this,e,this.a,this.i);this.h=!1};var De=ue;function Le(e){k.call(this,e)}function je(){0!=Me&&(Fe[this[f]||(this[f]=++h)]=this),this.qa=this.qa,this.ja=this.ja}w(Le,k),Le.prototype.name="cancel";var Me=0,Fe={};function Ue(e){if(!e.qa&&(e.qa=!0,e.va(),0!=Me)){var t=e[f]||(e[f]=++h);if(0!=Me&&e.ja&&0<e.ja.length)throw Error(e+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete Fe[t]}}function ze(e){return ze[" "](e),e}je.prototype.qa=!1,je.prototype.va=function(){if(this.ja)for(;this.ja.length;)this.ja.shift()()},ze[" "]=a;var We,Ve,Be=ne("Opera"),qe=ne("Trident")||ne("MSIE"),He=ne("Edge"),Qe=He||qe,Ke=ne("Gecko")&&!(J(q.toLowerCase(),"webkit")&&!ne("Edge"))&&!(ne("Trident")||ne("MSIE"))&&!ne("Edge"),Ge=J(q.toLowerCase(),"webkit")&&!ne("Edge");function $e(){var e=n.document;return e?e.documentMode:void 0}e:{var Ye="",Xe=(Ve=q,Ke?/rv:([^\);]+)(\)|;)/.exec(Ve):He?/Edge\/([\d\.]+)/.exec(Ve):qe?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Ve):Ge?/WebKit\/(\S+)/.exec(Ve):Be?/(?:Version)[ \/]?(\S+)/.exec(Ve):void 0);if(Xe&&(Ye=Xe?Xe[1]:""),qe){var Je=$e();if(null!=Je&&Je>parseFloat(Ye)){We=String(Je);break e}}We=Ye}var Ze,et={};function tt(e){return function(e,t){var n=et;return Object.prototype.hasOwnProperty.call(n,e)?n[e]:n[e]=t(e)}(e,function(){for(var t=0,n=V(String(We)).split("."),r=V(String(e)).split("."),o=Math.max(n.length,r.length),i=0;0==t&&i<o;i++){var a=n[i]||"",s=r[i]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;t=Z(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||Z(0==a[2].length,0==s[2].length)||Z(a[2],s[2]),a=a[3],s=s[3]}while(0==t)}return 0<=t})}var nt=n.document;Ze=nt&&qe?$e()||("CSS1Compat"==nt.compatMode?parseInt(We,10):5):void 0;var rt=Object.freeze||function(e){return e},ot=!qe||9<=Number(Ze),it=qe&&!tt("9"),at=function(){if(!n.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});return n.addEventListener("test",a,t),n.removeEventListener("test",a,t),e}();function st(e,t){this.type=e,this.b=this.target=t,this.Kb=!0}function lt(e,t){if(st.call(this,e?e.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,e){var n=this.type=e.type,r=e.changedTouches?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.b=t,t=e.relatedTarget){if(Ke){e:{try{ze(t.nodeName);var i=!0;break e}catch(e){}i=!1}i||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,null===r?(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0):(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType=o(e.pointerType)?e.pointerType:ct[e.pointerType]||"",this.a=e,e.defaultPrevented&&this.preventDefault()}}st.prototype.preventDefault=function(){this.Kb=!1},w(lt,st);var ct=rt({2:"touch",3:"pen",4:"mouse"});lt.prototype.preventDefault=function(){lt.ob.preventDefault.call(this);var e=this.a;if(e.preventDefault)e.preventDefault();else if(e.returnValue=!1,it)try{(e.ctrlKey||112<=e.keyCode&&123>=e.keyCode)&&(e.keyCode=-1)}catch(e){}},lt.prototype.f=function(){return this.a};var ut="closure_listenable_"+(1e6*Math.random()|0),dt=0;function pt(e,t,n,r,o){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!r,this.La=o,this.key=++dt,this.oa=this.Ia=!1}function ft(e){e.oa=!0,e.listener=null,e.proxy=null,e.src=null,e.La=null}function ht(e){this.src=e,this.a={},this.b=0}function mt(e,t){var n=t.type;n in e.a&&M(e.a[n],t)&&(ft(t),0==e.a[n].length&&(delete e.a[n],e.b--))}function gt(e,t,n,r){for(var o=0;o<e.length;++o){var i=e[o];if(!i.oa&&i.listener==t&&i.capture==!!n&&i.La==r)return o}return-1}ht.prototype.add=function(e,t,n,r,o){var i=e.toString();(e=this.a[i])||(e=this.a[i]=[],this.b++);var a=gt(e,t,r,o);return-1<a?(t=e[a],n||(t.Ia=!1)):((t=new pt(t,this.src,i,!!r,o)).Ia=n,e.push(t)),t};var bt="closure_lm_"+(1e6*Math.random()|0),vt={};function yt(e,t,n,r,o){if(r&&r.once)xt(e,t,n,r,o);else if(c(t))for(var i=0;i<t.length;i++)yt(e,t[i],n,r,o);else n=Ot(n),e&&e[ut]?At(e,t,n,p(r)?!!r.capture:!!r,o):wt(e,t,n,!1,r,o)}function wt(e,t,n,r,o,i){if(!t)throw Error("Invalid event type");var a=p(o)?!!o.capture:!!o,s=It(e);if(s||(e[bt]=s=new ht(e)),!(n=s.add(t,n,r,a,i)).proxy){if(r=function(){var e=St,t=ot?function(n){return e.call(t.src,t.listener,n)}:function(n){if(!(n=e.call(t.src,t.listener,n)))return n};return t}(),n.proxy=r,r.src=e,r.listener=n,e.addEventListener)at||(o=a),void 0===o&&(o=!1),e.addEventListener(t.toString(),r,o);else if(e.attachEvent)e.attachEvent(Et(t.toString()),r);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(r)}0}}function xt(e,t,n,r,o){if(c(t))for(var i=0;i<t.length;i++)xt(e,t[i],n,r,o);else n=Ot(n),e&&e[ut]?Rt(e,t,n,p(r)?!!r.capture:!!r,o):wt(e,t,n,!0,r,o)}function _t(e,t,n,r,o){if(c(t))for(var i=0;i<t.length;i++)_t(e,t[i],n,r,o);else r=p(r)?!!r.capture:!!r,n=Ot(n),e&&e[ut]?(e=e.l,(t=String(t).toString())in e.a&&(-1<(n=gt(i=e.a[t],n,r,o))&&(ft(i[n]),Array.prototype.splice.call(i,n,1),0==i.length&&(delete e.a[t],e.b--)))):e&&(e=It(e))&&(t=e.a[t.toString()],e=-1,t&&(e=gt(t,n,r,o)),(n=-1<e?t[e]:null)&&kt(n))}function kt(e){if("number"!=typeof e&&e&&!e.oa){var t=e.src;if(t&&t[ut])mt(t.l,e);else{var n=e.type,r=e.proxy;t.removeEventListener?t.removeEventListener(n,r,e.capture):t.detachEvent?t.detachEvent(Et(n),r):t.addListener&&t.removeListener&&t.removeListener(r),0,(n=It(t))?(mt(n,e),0==n.b&&(n.src=null,t[bt]=null)):ft(e)}}}function Et(e){return e in vt?vt[e]:vt[e]="on"+e}function Ct(e,t,n,r){var o=!0;if((e=It(e))&&(t=e.a[t.toString()]))for(t=t.concat(),e=0;e<t.length;e++){var i=t[e];i&&i.capture==n&&!i.oa&&(i=Tt(i,r),o=o&&!1!==i)}return o}function Tt(e,t){var n=e.listener,r=e.La||e.src;return e.Ia&&kt(e),n.call(r,t)}function St(e,t){if(e.oa)return!0;if(!ot){if(!t)e:{t=["window","event"];for(var r=n,o=0;o<t.length;o++)if(null==(r=r[t[o]])){t=null;break e}t=r}if(t=new lt(o=t,this),r=!0,!(0>o.keyCode||null!=o.returnValue)){e:{var i=!1;if(0==o.keyCode)try{o.keyCode=-1;break e}catch(e){i=!0}(i||null==o.returnValue)&&(o.returnValue=!0)}for(o=[],i=t.b;i;i=i.parentNode)o.push(i);for(e=e.type,i=o.length-1;0<=i;i--){t.b=o[i];var a=Ct(o[i],e,!0,t);r=r&&a}for(i=0;i<o.length;i++)t.b=o[i],a=Ct(o[i],e,!1,t),r=r&&a}return r}return Tt(e,new lt(t,this))}function It(e){return(e=e[bt])instanceof ht?e:null}var Nt="__closure_events_fn_"+(1e9*Math.random()>>>0);function Ot(e){return d(e)?e:(e[Nt]||(e[Nt]=function(t){return e.handleEvent(t)}),e[Nt])}function Pt(){je.call(this),this.l=new ht(this),this.Rb=this,this.Va=null}function At(e,t,n,r,o){e.l.add(String(t),n,!1,r,o)}function Rt(e,t,n,r,o){e.l.add(String(t),n,!0,r,o)}function Dt(e,t,n,r){if(!(t=e.l.a[String(t)]))return!0;t=t.concat();for(var o=!0,i=0;i<t.length;++i){var a=t[i];if(a&&!a.oa&&a.capture==n){var s=a.listener,l=a.La||a.src;a.Ia&&mt(e.l,a),o=!1!==s.call(l,r)&&o}}return o&&0!=r.Kb}function Lt(e,t,r){if(d(e))r&&(e=b(e,r));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=b(e.handleEvent,e)}return 2147483647<Number(t)?-1:n.setTimeout(e,t||0)}function jt(e){var t=null;return new me(function(n,r){-1==(t=Lt(function(){n(void 0)},e))&&r(Error("Failed to schedule timer."))}).s(function(e){throw n.clearTimeout(t),e})}function Mt(e){if(e.S&&"function"==typeof e.S)return e.S();if(o(e))return e.split("");if(u(e)){for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t}for(r in t=[],n=0,e)t[n++]=e[r];return t}function Ft(e){if(e.U&&"function"==typeof e.U)return e.U();if(!e.S||"function"!=typeof e.S){if(u(e)||o(e)){var t=[];e=e.length;for(var n=0;n<e;n++)t.push(n);return t}for(var r in t=[],n=0,e)t[n++]=r;return t}}function Ut(e,t){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(e)if(e instanceof Ut)for(n=e.U(),r=0;r<n.length;r++)this.set(n[r],e.get(n[r]));else for(r in e)this.set(r,e[r])}function zt(e){if(e.c!=e.a.length){for(var t=0,n=0;t<e.a.length;){var r=e.a[t];Wt(e.b,r)&&(e.a[n++]=r),t++}e.a.length=n}if(e.c!=e.a.length){var o={};for(n=t=0;t<e.a.length;)Wt(o,r=e.a[t])||(e.a[n++]=r,o[r]=1),t++;e.a.length=n}}function Wt(e,t){return Object.prototype.hasOwnProperty.call(e,t)}w(Pt,je),Pt.prototype[ut]=!0,Pt.prototype.addEventListener=function(e,t,n,r){yt(this,e,t,n,r)},Pt.prototype.removeEventListener=function(e,t,n,r){_t(this,e,t,n,r)},Pt.prototype.dispatchEvent=function(e){var t,n=this.Va;if(n)for(t=[];n;n=n.Va)t.push(n);n=this.Rb;var r=e.type||e;if(o(e))e=new st(e,n);else if(e instanceof st)e.target=e.target||n;else{var i=e;ce(e=new st(r,n),i)}if(i=!0,t)for(var a=t.length-1;0<=a;a--){var s=e.b=t[a];i=Dt(s,r,!0,e)&&i}if(i=Dt(s=e.b=n,r,!0,e)&&i,i=Dt(s,r,!1,e)&&i,t)for(a=0;a<t.length;a++)i=Dt(s=e.b=t[a],r,!1,e)&&i;return i},Pt.prototype.va=function(){if(Pt.ob.va.call(this),this.l){var e,t=this.l;for(e in t.a){for(var n=t.a[e],r=0;r<n.length;r++)0,ft(n[r]);delete t.a[e],t.b--}}this.Va=null},(e=Ut.prototype).S=function(){zt(this);for(var e=[],t=0;t<this.a.length;t++)e.push(this.b[this.a[t]]);return e},e.U=function(){return zt(this),this.a.concat()},e.clear=function(){this.b={},this.c=this.a.length=0},e.get=function(e,t){return Wt(this.b,e)?this.b[e]:t},e.set=function(e,t){Wt(this.b,e)||(this.c++,this.a.push(e)),this.b[e]=t},e.forEach=function(e,t){for(var n=this.U(),r=0;r<n.length;r++){var o=n[r],i=this.get(o);e.call(t,i,o,this)}};var Vt=/^(?:([^:\/?#.]+):)?(?:\/\/(?:([^\/?#]*)@)?([^\/#?]*?)(?::([0-9]+))?(?=[\/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Bt(e,t){if(this.b=this.l=this.c="",this.i=null,this.h=this.g="",this.f=!1,e instanceof Bt){this.f=void 0!==t?t:e.f,qt(this,e.c),this.l=e.l,this.b=e.b,Ht(this,e.i),this.g=e.g,t=e.a;var n=new an;n.c=t.c,t.a&&(n.a=new Ut(t.a),n.b=t.b),Qt(this,n),this.h=e.h}else e&&(n=String(e).match(Vt))?(this.f=!!t,qt(this,n[1]||"",!0),this.l=Xt(n[2]||""),this.b=Xt(n[3]||"",!0),Ht(this,n[4]),this.g=Xt(n[5]||"",!0),Qt(this,n[6]||"",!0),this.h=Xt(n[7]||"")):(this.f=!!t,this.a=new an(null,this.f))}function qt(e,t,n){e.c=n?Xt(t,!0):t,e.c&&(e.c=e.c.replace(/:$/,""))}function Ht(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.i=t}else e.i=null}function Qt(e,t,n){t instanceof an?(e.a=t,function(e,t){t&&!e.f&&(sn(e),e.c=null,e.a.forEach(function(e,t){var n=t.toLowerCase();t!=n&&(cn(this,t),dn(this,n,e))},e)),e.f=t}(e.a,e.f)):(n||(t=Jt(t,rn)),e.a=new an(t,e.f))}function Kt(e,t,n){e.a.set(t,n)}function Gt(e,t){return e.a.get(t)}function $t(e){return e instanceof Bt?new Bt(e):new Bt(e,void 0)}function Yt(e,t){var n=new Bt(null,void 0);return qt(n,"https"),e&&(n.b=e),t&&(n.g=t),n}function Xt(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function Jt(e,t,n){return o(e)?(e=encodeURI(e).replace(t,Zt),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function Zt(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}Bt.prototype.toString=function(){var e=[],t=this.c;t&&e.push(Jt(t,en,!0),":");var n=this.b;return(n||"file"==t)&&(e.push("//"),(t=this.l)&&e.push(Jt(t,en,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.i)&&e.push(":",String(n))),(n=this.g)&&(this.b&&"/"!=n.charAt(0)&&e.push("/"),e.push(Jt(n,"/"==n.charAt(0)?nn:tn,!0))),(n=this.a.toString())&&e.push("?",n),(n=this.h)&&e.push("#",Jt(n,on)),e.join("")};var en=/[#\/\?@]/g,tn=/[#\?:]/g,nn=/[#\?]/g,rn=/[#\?@]/g,on=/#/g;function an(e,t){this.b=this.a=null,this.c=e||null,this.f=!!t}function sn(e){e.a||(e.a=new Ut,e.b=0,e.c&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var r=e[n].indexOf("="),o=null;if(0<=r){var i=e[n].substring(0,r);o=e[n].substring(r+1)}else i=e[n];t(i,o?decodeURIComponent(o.replace(/\+/g," ")):"")}}}(e.c,function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)}))}function ln(e){var t=Ft(e);if(void 0===t)throw Error("Keys are undefined");var n=new an(null,void 0);e=Mt(e);for(var r=0;r<t.length;r++){var o=t[r],i=e[r];c(i)?dn(n,o,i):n.add(o,i)}return n}function cn(e,t){sn(e),t=pn(e,t),Wt(e.a.b,t)&&(e.c=null,e.b-=e.a.get(t).length,Wt((e=e.a).b,t)&&(delete e.b[t],e.c--,e.a.length>2*e.c&&zt(e)))}function un(e,t){return sn(e),t=pn(e,t),Wt(e.a.b,t)}function dn(e,t,n){cn(e,t),0<n.length&&(e.c=null,e.a.set(pn(e,t),z(n)),e.b+=n.length)}function pn(e,t){return t=String(t),e.f&&(t=t.toLowerCase()),t}(e=an.prototype).add=function(e,t){sn(this),this.c=null,e=pn(this,e);var n=this.a.get(e);return n||this.a.set(e,n=[]),n.push(t),this.b+=1,this},e.clear=function(){this.a=this.c=null,this.b=0},e.forEach=function(e,t){sn(this),this.a.forEach(function(n,r){R(n,function(n){e.call(t,n,r,this)},this)},this)},e.U=function(){sn(this);for(var e=this.a.S(),t=this.a.U(),n=[],r=0;r<t.length;r++)for(var o=e[r],i=0;i<o.length;i++)n.push(t[r]);return n},e.S=function(e){sn(this);var t=[];if(o(e))un(this,e)&&(t=U(t,this.a.get(pn(this,e))));else{e=this.a.S();for(var n=0;n<e.length;n++)t=U(t,e[n])}return t},e.set=function(e,t){return sn(this),this.c=null,un(this,e=pn(this,e))&&(this.b-=this.a.get(e).length),this.a.set(e,[t]),this.b+=1,this},e.get=function(e,t){return 0<(e=e?this.S(e):[]).length?String(e[0]):t},e.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var e=[],t=this.a.U(),n=0;n<t.length;n++){var r=t[n],o=encodeURIComponent(String(r));r=this.S(r);for(var i=0;i<r.length;i++){var a=o;""!==r[i]&&(a+="="+encodeURIComponent(String(r[i]))),e.push(a)}}return this.c=e.join("&")};var fn=!qe||9<=Number(Ze);function hn(){this.a="",this.b=gn}function mn(e){return e instanceof hn&&e.constructor===hn&&e.b===gn?e.a:(C("expected object of type Const, got '"+e+"'"),"type_error:Const")}hn.prototype.na=!0,hn.prototype.ma=function(){return this.a},hn.prototype.toString=function(){return"Const{"+this.a+"}"};var gn={};function bn(e){var t=new hn;return t.a=e,t}function vn(){this.a="",this.b=kn}function yn(e){return e instanceof vn&&e.constructor===vn&&e.b===kn?e.a:(C("expected object of type TrustedResourceUrl, got '"+e+"' of type "+s(e)),"type_error:TrustedResourceUrl")}function wn(e,t){var n=mn(e);if(!_n.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(e){var t=new vn;return t.a=e,t}(e=n.replace(xn,function(e,r){if(!Object.prototype.hasOwnProperty.call(t,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(t));return(e=t[r])instanceof hn?mn(e):encodeURIComponent(String(e))}))}bn(""),vn.prototype.na=!0,vn.prototype.ma=function(){return this.a},vn.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var xn=/%{(\w+)}/g,_n=/^(?:https:)?\/\/[0-9a-z.:[\]-]+\/|^\/[^\/\\]|^about:blank#/i,kn={};function En(){this.a="",this.b=In}function Cn(e){return e instanceof En&&e.constructor===En&&e.b===In?e.a:(C("expected object of type SafeUrl, got '"+e+"' of type "+s(e)),"type_error:SafeUrl")}En.prototype.na=!0,En.prototype.ma=function(){return this.a},En.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Tn=/^(?:(?:https?|mailto|ftp):|[^:\/?#]*(?:[\/?#]|$))/i;function Sn(e){return e instanceof En?e:(e=e.na?e.ma():String(e),Tn.test(e)||(e="about:invalid#zClosurez"),Nn(e))}var In={};function Nn(e){var t=new En;return t.a=e,t}function On(){this.a="",this.b=Pn}Nn("about:blank"),On.prototype.na=!0,On.prototype.ma=function(){return this.a},On.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var Pn={};function An(e){var t=new On;return t.a=e,t}function Rn(e){var t=document;return o(e)?t.getElementById(e):e}function Dn(e,t){re(t,function(t,n){t&&t.na&&(t=t.ma()),"style"==n?e.style.cssText=t:"class"==n?e.className=t:"for"==n?e.htmlFor=t:Ln.hasOwnProperty(n)?e.setAttribute(Ln[n],t):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?e.setAttribute(n,t):e[n]=t})}An("<!DOCTYPE html>"),An(""),An("<br>");var Ln={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function jn(e,t,n){var r=arguments,i=document,a=String(r[0]),s=r[1];if(!fn&&s&&(s.name||s.type)){if(a=["<",a],s.name&&a.push(' name="',B(s.name),'"'),s.type){a.push(' type="',B(s.type),'"');var l={};ce(l,s),delete l.type,s=l}a.push(">"),a=a.join("")}return a=i.createElement(a),s&&(o(s)?a.className=s:c(s)?a.className=s.join(" "):Dn(a,s)),2<r.length&&function(e,t,n){function r(n){n&&t.appendChild(o(n)?e.createTextNode(n):n)}for(var i=2;i<n.length;i++){var a=n[i];!u(a)||p(a)&&0<a.nodeType?r(a):R(Mn(a)?z(a):a,r)}}(i,a,r),a}function Mn(e){if(e&&"number"==typeof e.length){if(p(e))return"function"==typeof e.item||"string"==typeof e.item;if(d(e))return"function"==typeof e.item}return!1}function Fn(e){var t=[];return function e(t,n,r){if(null==n)r.push("null");else{if("object"==typeof n){if(c(n)){var o=n;n=o.length,r.push("[");for(var i="",a=0;a<n;a++)r.push(i),e(t,o[a],r),i=",";return void r.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(o in r.push("{"),i="",n)Object.prototype.hasOwnProperty.call(n,o)&&("function"!=typeof(a=n[o])&&(r.push(i),Vn(o,r),r.push(":"),e(t,a,r),i=","));return void r.push("}")}n=n.valueOf()}switch(typeof n){case"string":Vn(n,r);break;case"number":r.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":r.push(String(n));break;case"function":r.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new Un,e,t),t.join("")}function Un(){}var zn={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},Wn=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function Vn(e,t){t.push('"',e.replace(Wn,function(e){var t=zn[e];return t||(t="\\u"+(65536|e.charCodeAt(0)).toString(16).substr(1),zn[e]=t),t}),'"')}function Bn(){var e=lr();return qe&&!!Ze&&11==Ze||/Edge\/\d+/.test(e)}function qn(){return n.window&&n.window.location.href||self&&self.location&&self.location.href||""}function Hn(e,t){t=t||n.window;var r="about:blank";e&&(r=Cn(Sn(e))),t.location.href=r}function Qn(e){return!!((e=(e||lr()).toLowerCase()).match(/android/)||e.match(/webos/)||e.match(/iphone|ipad|ipod/)||e.match(/blackberry/)||e.match(/windows phone/)||e.match(/iemobile/))}function Kn(e){e=e||n.window;try{e.close()}catch(e){}}function Gn(e,t,n){var r=Math.floor(1e9*Math.random()).toString();t=t||500,n=n||600;var o=(window.screen.availHeight-n)/2,i=(window.screen.availWidth-t)/2;for(a in t={width:t,height:n,top:0<o?o:0,left:0<i?i:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=lr().toLowerCase(),r&&(t.target=r,J(n,"crios/")&&(t.target="_blank")),ir(lr())==rr&&(e=e||"http://localhost",t.scrollbars=!0),n=e||"",(e=t)||(e={}),r=window,t=n instanceof En?n:Sn(void 0!==n.href?n.href:String(n)),n=e.target||n.target,o=[],e)switch(a){case"width":case"height":case"top":case"left":o.push(a+"="+e[a]);break;case"target":case"noopener":case"noreferrer":break;default:o.push(a+"="+(e[a]?1:0))}var a=o.join(",");if((ne("iPhone")&&!ne("iPod")&&!ne("iPad")||ne("iPad")||ne("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(a=r.document.createElement("A"),t instanceof En||t instanceof En||(t=t.na?t.ma():String(t),Tn.test(t)||(t="about:invalid#zClosurez"),t=Nn(t)),a.href=Cn(t),a.setAttribute("target",n),e.noreferrer&&a.setAttribute("rel","noreferrer"),(e=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(e),a={}):e.noreferrer?(a=r.open("",n,a),e=Cn(t),a&&(Qe&&J(e,";")&&(e="'"+e.replace(/'/g,"%27")+"'"),a.opener=null,bn("b/12014412, meta tag with sanitized URL"),e=An(e='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+B(e)+'">'),a.document.write(function(e){return e instanceof On&&e.constructor===On&&e.b===Pn?e.a:(C("expected object of type SafeHtml, got '"+e+"' of type "+s(e)),"type_error:SafeHtml")}(e)),a.document.close())):(a=r.open(Cn(t),n,a))&&e.noopener&&(a.opener=null),a)try{a.focus()}catch(e){}return a}var $n=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,Yn=/^[^@]+@[^@]+$/;function Xn(){var e=null;return new me(function(t){"complete"==n.document.readyState?t():(e=function(){t()},xt(window,"load",e))}).s(function(t){throw _t(window,"load",e),t})}function Jn(e){return e=e||lr(),!("file:"!==fr()||!e.toLowerCase().match(/iphone|ipad|ipod|android/))}function Zn(){var e=n.window;try{return!(!e||e==e.top)}catch(e){return!1}}function er(){return"object"!=typeof n.window&&"function"==typeof n.importScripts}function tr(){return r.a.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":r.a.INTERNAL.hasOwnProperty("node")?"Node":er()?"Worker":"Browser"}function nr(){var e=tr();return"ReactNative"===e||"Node"===e}var rr="Firefox",or="Chrome";function ir(e){var t=e.toLowerCase();return J(t,"opera/")||J(t,"opr/")||J(t,"opios/")?"Opera":J(t,"iemobile")?"IEMobile":J(t,"msie")||J(t,"trident/")?"IE":J(t,"edge/")?"Edge":J(t,"firefox/")?rr:J(t,"silk/")?"Silk":J(t,"blackberry")?"Blackberry":J(t,"webos")?"Webos":!J(t,"safari/")||J(t,"chrome/")||J(t,"crios/")||J(t,"android")?!J(t,"chrome/")&&!J(t,"crios/")||J(t,"edge/")?J(t,"android")?"Android":(e=e.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==e.length?e[1]:"Other":or:"Safari"}var ar={Uc:"FirebaseCore-web",Wc:"FirebaseUI-web"};function sr(e,t){t=t||[];var n,r=[],o={};for(n in ar)o[ar[n]]=!0;for(n=0;n<t.length;n++)void 0!==o[t[n]]&&(delete o[t[n]],r.push(t[n]));return r.sort(),(t=r).length||(t=["FirebaseCore-web"]),"Browser"===(r=tr())?r=ir(o=lr()):"Worker"===r&&(r=ir(o=lr())+"-"+r),r+"/JsCore/"+e+"/"+t.join(",")}function lr(){return n.navigator&&n.navigator.userAgent||""}function cr(e,t){e=e.split("."),t=t||n;for(var r=0;r<e.length&&"object"==typeof t&&null!=t;r++)t=t[e[r]];return r!=e.length&&(t=void 0),t}function ur(){try{var e=n.localStorage,t=vr();if(e)return e.setItem(t,"1"),e.removeItem(t),!Bn()||!!n.indexedDB}catch(e){return er()&&!!n.indexedDB}return!1}function dr(){return(pr()||"chrome-extension:"===fr()||Jn())&&!nr()&&ur()&&!er()}function pr(){return"http:"===fr()||"https:"===fr()}function fr(){return n.location&&n.location.protocol||null}function hr(e){return!Qn(e=e||lr())&&ir(e)!=rr}function mr(e){return void 0===e?null:Fn(e)}function gr(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&null!==e[t]&&void 0!==e[t]&&(n[t]=e[t]);return n}function br(e){if(null!==e)return JSON.parse(e)}function vr(e){return e||Math.floor(1e9*Math.random()).toString()}function yr(e){return"Safari"!=ir(e=e||lr())&&!e.toLowerCase().match(/iphone|ipad|ipod/)}function wr(){var e=n.___jsl;if(e&&e.H)for(var t in e.H)if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=e.H[t].L.concat(),e.CP)for(var r=0;r<e.CP.length;r++)e.CP[r]=null}function xr(e,t){if(e>t)throw Error("Short delay should be less than long delay!");this.a=e,this.c=t,e=lr(),t=tr(),this.b=Qn(e)||"ReactNative"===t}function _r(){var e=n.document;return!e||void 0===e.visibilityState||"visible"==e.visibilityState}function kr(e){try{var t=new Date(parseInt(e,10));if(!isNaN(t.getTime())&&!/[^0-9]/.test(e))return t.toUTCString()}catch(e){}return null}function Er(){return!(!cr("fireauth.oauthhelper",n)&&!cr("fireauth.iframe",n))}xr.prototype.get=function(){var e=n.navigator;return!e||"boolean"!=typeof e.onLine||!pr()&&"chrome-extension:"!==fr()&&void 0===e.connection||e.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Cr,Tr={};function Sr(e){Tr[e]||(Tr[e]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(e))}try{var Ir={};Object.defineProperty(Ir,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Ir,"abcd",{configurable:!0,enumerable:!0,value:2}),Cr=2==Ir.abcd}catch(Ve){Cr=!1}function Nr(e,t,n){Cr?Object.defineProperty(e,t,{configurable:!0,enumerable:!0,value:n}):e[t]=n}function Or(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&Nr(e,n,t[n])}function Pr(e){var t={};return Or(t,e),t}function Ar(e){var t=e;if("object"==typeof e&&null!=e)for(var n in t="length"in e?[]:{},e)Nr(t,n,Ar(e[n]));return t}function Rr(e){var t={},n=e[Lr],r=e[jr];if(!(e=e[Mr])||e!=Dr&&!n)throw Error("Invalid provider user info!");t[Ur]=r||null,t[Fr]=n||null,Nr(this,Wr,e),Nr(this,zr,Ar(t))}var Dr="EMAIL_SIGNIN",Lr="email",jr="newEmail",Mr="requestType",Fr="email",Ur="fromEmail",zr="data",Wr="operation";function Vr(e,t){this.code=qr+e,this.message=t||Hr[e]||""}function Br(e){var t=e&&e.code;return t?new Vr(t.substring(qr.length),e.message):null}w(Vr,Error),Vr.prototype.C=function(){return{code:this.code,message:this.message}},Vr.prototype.toJSON=function(){return this.C()};var qr="auth/",Hr={"argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-or-invalid-nonce":"The OIDC ID token requires a valid unhashed nonce.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","user-cancelled":"User did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function Qr(e){var t=e[Xr];if(void 0===t)throw new Vr("missing-continue-uri");if("string"!=typeof t||"string"==typeof t&&!t.length)throw new Vr("invalid-continue-uri");this.h=t,this.b=this.a=null,this.g=!1;var n=e[Kr];if(n&&"object"==typeof n){t=n[eo];var r=n[Jr];if(n=n[Zr],"string"==typeof t&&t.length){if(this.a=t,void 0!==r&&"boolean"!=typeof r)throw new Vr("argument-error",Jr+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new Vr("argument-error",Zr+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==t)throw new Vr("argument-error",eo+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new Vr("missing-android-pkg-name")}}else if(void 0!==n)throw new Vr("argument-error",Kr+" property must be a non null object when specified.");if(this.f=null,(t=e[Yr])&&"object"==typeof t){if("string"==typeof(t=t[to])&&t.length)this.f=t;else if(void 0!==t)throw new Vr("argument-error",to+" property must be a non empty string when specified.")}else if(void 0!==t)throw new Vr("argument-error",Yr+" property must be a non null object when specified.");if(void 0!==(t=e[$r])&&"boolean"!=typeof t)throw new Vr("argument-error",$r+" property must be a boolean when specified.");if(this.c=!!t,void 0!==(e=e[Gr])&&("string"!=typeof e||"string"==typeof e&&!e.length))throw new Vr("argument-error",Gr+" property must be a non empty string when specified.");this.i=e||null}var Kr="android",Gr="dynamicLinkDomain",$r="handleCodeInApp",Yr="iOS",Xr="url",Jr="installApp",Zr="minimumVersion",eo="packageName",to="bundleId";function no(e){var t={};for(var n in t.continueUrl=e.h,t.canHandleCodeInApp=e.c,(t.androidPackageName=e.a)&&(t.androidMinimumVersion=e.b,t.androidInstallApp=e.g),t.iOSBundleId=e.f,t.dynamicLinkDomain=e.i,t)null===t[n]&&delete t[n];return t}var ro=null,oo=null;function io(e){var t="";return function(e,t){function n(t){for(;r<e.length;){var n=e.charAt(r++),o=oo[n];if(null!=o)return o;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return t}!function(){if(!ro){ro={},oo={};for(var e=0;65>e;e++)ro[e]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e),oo[ro[e]]=e,62<=e&&(oo["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(e)]=e)}}();for(var r=0;;){var o=n(-1),i=n(0),a=n(64),s=n(64);if(64===s&&-1===o)break;t(o<<2|i>>4),64!=a&&(t(i<<4&240|a>>2),64!=s&&t(a<<6&192|s))}}(e,function(e){t+=String.fromCharCode(e)}),t}function ao(e){this.c=e.sub,y(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function so(e){return(e=lo(e))&&e.sub&&e.iss&&e.aud&&e.exp?new ao(e):null}function lo(e){if(!e)return null;if(3!=(e=e.split(".")).length)return null;for(var t=(4-(e=e[1]).length%4)%4,n=0;n<t;n++)e+=".";try{return JSON.parse(io(e))}catch(e){}return null}ao.prototype.f=function(){return this.b};var co,uo={$c:{ab:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",ib:"https://securetoken.googleapis.com/v1/token",id:"p"},bd:{ab:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",ib:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},cd:{ab:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",ib:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};function po(e){for(var t in uo)if(uo[t].id===e)return{firebaseEndpoint:(e=uo[t]).ab,secureTokenEndpoint:e.ib};return null}co=po("__EID__")?"__EID__":void 0;var fo="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),ho=["client_id","response_type","scope","redirect_uri","state"],mo={Vc:{Ma:"locale",Ba:500,Aa:600,Na:"facebook.com",hb:ho},Xc:{Ma:null,Ba:500,Aa:620,Na:"github.com",hb:ho},Yc:{Ma:"hl",Ba:515,Aa:680,Na:"google.com",hb:ho},dd:{Ma:"lang",Ba:485,Aa:705,Na:"twitter.com",hb:fo}};function go(e){for(var t in mo)if(mo[t].Na==e)return mo[t];return null}function bo(e){var t={};t["facebook.com"]=_o,t["google.com"]=Eo,t["github.com"]=ko,t["twitter.com"]=Co;var n=e&&e[yo];try{if(n)return t[n]?new t[n](e):new xo(e);if(void 0!==e[vo])return new wo(e)}catch(e){}return null}var vo="idToken",yo="providerId";function wo(e){var t=e[yo];if(!t&&e[vo]){var n=so(e[vo]);n&&n.a&&(t=n.a)}if(!t)throw Error("Invalid additional user info!");"anonymous"!=t&&"custom"!=t||(t=null),n=!1,void 0!==e.isNewUser?n=!!e.isNewUser:"identitytoolkit#SignupNewUserResponse"===e.kind&&(n=!0),Nr(this,"providerId",t),Nr(this,"isNewUser",n)}function xo(e){wo.call(this,e),Nr(this,"profile",Ar((e=br(e.rawUserInfo||"{}"))||{}))}function _o(e){if(xo.call(this,e),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function ko(e){if(xo.call(this,e),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Nr(this,"username",this.profile&&this.profile.login||null)}function Eo(e){if(xo.call(this,e),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function Co(e){if(xo.call(this,e),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Nr(this,"username",e.screenName||null)}function To(e){this.a=$t(e)}function So(e){var t=$t(e),n=Gt(t,"link"),r=Gt($t(n),"link");return t=Gt(t,"deep_link_id"),Gt($t(t),"link")||t||r||n||e}function Io(e,t){return e.then(function(e){if(e[ca]){var n=so(e[ca]);if(!n||t!=n.c)throw new Vr("user-mismatch");return e}throw new Vr("user-mismatch")}).s(function(e){throw e&&e.code&&e.code==qr+"user-not-found"?new Vr("user-mismatch"):e})}function No(e,t){if(!t)throw new Vr("internal-error","failed to construct a credential");this.a=t,Nr(this,"providerId",e),Nr(this,"signInMethod",e)}function Oo(e){return{pendingToken:e.a,requestUri:"http://localhost"}}function Po(e,t,n){if(this.a=null,t.idToken||t.accessToken)t.idToken&&Nr(this,"idToken",t.idToken),t.accessToken&&Nr(this,"accessToken",t.accessToken),t.nonce&&!t.pendingToken&&Nr(this,"nonce",t.nonce),t.pendingToken&&(this.a=t.pendingToken);else{if(!t.oauthToken||!t.oauthTokenSecret)throw new Vr("internal-error","failed to construct a credential");Nr(this,"accessToken",t.oauthToken),Nr(this,"secret",t.oauthTokenSecret)}Nr(this,"providerId",e),Nr(this,"signInMethod",n)}function Ao(e){var t={};return e.idToken&&(t.id_token=e.idToken),e.accessToken&&(t.access_token=e.accessToken),e.secret&&(t.oauth_token_secret=e.secret),t.providerId=e.providerId,e.nonce&&!e.a&&(t.nonce=e.nonce),t={postBody:ln(t).toString(),requestUri:"http://localhost"},e.a&&(delete t.postBody,t.pendingToken=e.a),t}function Ro(e,t){this.Dc=t||[],Or(this,{providerId:e,isOAuthProvider:!0}),this.yb={},this.cb=(go(e)||{}).Ma||null,this.$a=null}function Do(e){if("string"!=typeof e||0!=e.indexOf("saml."))throw new Vr("argument-error",'SAML provider IDs must be prefixed with "saml."');Ro.call(this,e,[])}function Lo(e){Ro.call(this,e,ho),this.a=[]}function jo(){Lo.call(this,"facebook.com")}function Mo(e){if(!e)throw new Vr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return p(e)&&(t=e.accessToken),(new jo).credential(null,t)}function Fo(){Lo.call(this,"github.com")}function Uo(e){if(!e)throw new Vr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return p(e)&&(t=e.accessToken),(new Fo).credential(null,t)}function zo(){Lo.call(this,"google.com"),this.ua("profile")}function Wo(e,t){var n=e;return p(e)&&(n=e.idToken,t=e.accessToken),(new zo).credential(n,t)}function Vo(){Ro.call(this,"twitter.com",fo)}function Bo(e,t){var n=e;if(p(n)||(n={oauthToken:e,oauthTokenSecret:t}),!n.oauthToken||!n.oauthTokenSecret)throw new Vr("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Po("twitter.com",n,"twitter.com")}function qo(e,t,n){this.a=e,this.c=t,Nr(this,"providerId","password"),Nr(this,"signInMethod",n===Ho.EMAIL_LINK_SIGN_IN_METHOD?Ho.EMAIL_LINK_SIGN_IN_METHOD:Ho.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Ho(){Or(this,{providerId:"password",isOAuthProvider:!1})}function Qo(e,t){if(!(t=Ko(t)))throw new Vr("argument-error","Invalid email link!");return new qo(e,t,Ho.EMAIL_LINK_SIGN_IN_METHOD)}function Ko(e){var t=Gt((e=new To(e=So(e))).a,"oobCode")||null;return"signIn"===(Gt(e.a,"mode")||null)&&t?t:null}function Go(e){if(!(e.Ta&&e.Sa||e.Fa&&e.$))throw new Vr("internal-error");this.a=e,Nr(this,"providerId","phone"),Nr(this,"signInMethod","phone")}function $o(e){return e.a.Fa&&e.a.$?{temporaryProof:e.a.Fa,phoneNumber:e.a.$}:{sessionInfo:e.a.Ta,code:e.a.Sa}}function Yo(e){try{this.a=e||r.a.auth()}catch(e){throw new Vr("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Or(this,{providerId:"phone",isOAuthProvider:!1})}function Xo(e,t){if(!e)throw new Vr("missing-verification-id");if(!t)throw new Vr("missing-verification-code");return new Go({Ta:e,Sa:t})}function Jo(e){if(e.temporaryProof&&e.phoneNumber)return new Go({Fa:e.temporaryProof,$:e.phoneNumber});var t=e&&e.providerId;if(!t||"password"===t)return null;var n=e&&e.oauthAccessToken,r=e&&e.oauthTokenSecret,o=e&&e.nonce,i=e&&e.oauthIdToken,a=e&&e.pendingToken;try{switch(t){case"google.com":return Wo(i,n);case"facebook.com":return Mo(n);case"github.com":return Uo(n);case"twitter.com":return Bo(n,r);default:return n||r||i||a?a?0==t.indexOf("saml.")?new No(t,a):new Po(t,{pendingToken:a,idToken:e.oauthIdToken,accessToken:e.oauthAccessToken},t):new Lo(t).credential(i,n,o):null}}catch(e){return null}}function Zo(e){if(!e.isOAuthProvider)throw new Vr("invalid-oauth-provider")}function ei(e,t,n,r,o,i){if(this.b=e,this.c=t||null,this.f=n||null,this.g=r||null,this.h=i||null,this.a=o||null,!this.f&&!this.a)throw new Vr("invalid-auth-event");if(this.f&&this.a)throw new Vr("invalid-auth-event");if(this.f&&!this.g)throw new Vr("invalid-auth-event")}function ti(e){return(e=e||{}).type?new ei(e.type,e.eventId,e.urlResponse,e.sessionId,e.error&&Br(e.error),e.postBody):null}function ni(){this.b=null,this.a=[]}w(xo,wo),w(_o,xo),w(ko,xo),w(Eo,xo),w(Co,xo),No.prototype.la=function(e){return Sa(e,Oo(this))},No.prototype.b=function(e,t){var n=Oo(this);return n.idToken=t,Ia(e,n)},No.prototype.f=function(e,t){return Io(Na(e,Oo(this)),t)},No.prototype.C=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},Po.prototype.la=function(e){return Sa(e,Ao(this))},Po.prototype.b=function(e,t){var n=Ao(this);return n.idToken=t,Ia(e,n)},Po.prototype.f=function(e,t){return Io(Na(e,Ao(this)),t)},Po.prototype.C=function(){var e={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(e.oauthIdToken=this.idToken),this.accessToken&&(e.oauthAccessToken=this.accessToken),this.secret&&(e.oauthTokenSecret=this.secret),this.nonce&&(e.nonce=this.nonce),this.a&&(e.pendingToken=this.a),e},Ro.prototype.Da=function(e){return this.yb=ie(e),this},w(Do,Ro),w(Lo,Ro),Lo.prototype.ua=function(e){return j(this.a,e)||this.a.push(e),this},Lo.prototype.Eb=function(){return z(this.a)},Lo.prototype.credential=function(e,t,n){if(!e&&!t)throw new Vr("argument-error","credential failed: must provide the ID token and/or the access token.");return new Po(this.providerId,{idToken:e||null,accessToken:t||null,nonce:n||null},this.providerId)},w(jo,Lo),Nr(jo,"PROVIDER_ID","facebook.com"),Nr(jo,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),w(Fo,Lo),Nr(Fo,"PROVIDER_ID","github.com"),Nr(Fo,"GITHUB_SIGN_IN_METHOD","github.com"),w(zo,Lo),Nr(zo,"PROVIDER_ID","google.com"),Nr(zo,"GOOGLE_SIGN_IN_METHOD","google.com"),w(Vo,Ro),Nr(Vo,"PROVIDER_ID","twitter.com"),Nr(Vo,"TWITTER_SIGN_IN_METHOD","twitter.com"),qo.prototype.la=function(e){return this.signInMethod==Ho.EMAIL_LINK_SIGN_IN_METHOD?os(e,Ma,{email:this.a,oobCode:this.c}):os(e,es,{email:this.a,password:this.c})},qo.prototype.b=function(e,t){return this.signInMethod==Ho.EMAIL_LINK_SIGN_IN_METHOD?os(e,Fa,{idToken:t,email:this.a,oobCode:this.c}):os(e,Ga,{idToken:t,email:this.a,password:this.c})},qo.prototype.f=function(e,t){return Io(this.la(e),t)},qo.prototype.C=function(){return{email:this.a,password:this.c,signInMethod:this.signInMethod}},Or(Ho,{PROVIDER_ID:"password"}),Or(Ho,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Or(Ho,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Go.prototype.la=function(e){return e.Ua($o(this))},Go.prototype.b=function(e,t){var n=$o(this);return n.idToken=t,os(e,ns,n)},Go.prototype.f=function(e,t){var n=$o(this);return n.operation="REAUTH",Io(e=os(e,rs,n),t)},Go.prototype.C=function(){var e={providerId:"phone"};return this.a.Ta&&(e.verificationId=this.a.Ta),this.a.Sa&&(e.verificationCode=this.a.Sa),this.a.Fa&&(e.temporaryProof=this.a.Fa),this.a.$&&(e.phoneNumber=this.a.$),e},Yo.prototype.Ua=function(e,t){var n=this.a.b;return _e(t.verify()).then(function(r){if(!o(r))throw new Vr("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(t.type){case"recaptcha":return function(e,t){return os(e,Qa,t)}(n,{phoneNumber:e,recaptchaToken:r}).then(function(e){return"function"==typeof t.reset&&t.reset(),e},function(e){throw"function"==typeof t.reset&&t.reset(),e});default:throw new Vr("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}})},Or(Yo,{PROVIDER_ID:"phone"}),Or(Yo,{PHONE_SIGN_IN_METHOD:"phone"}),ei.prototype.C=function(){return{type:this.b,eventId:this.c,urlResponse:this.f,sessionId:this.g,postBody:this.h,error:this.a&&this.a.C()}};var ri,oi=null;function ii(e){var t="unauthorized-domain",n=void 0,r=$t(e);e=r.b,"chrome-extension"==(r=r.c)?n=W("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):"http"==r||"https"==r?n=W("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):t="operation-not-supported-in-this-environment",Vr.call(this,t,n)}function ai(e,t,n){Vr.call(this,e,n),(e=t||{}).zb&&Nr(this,"email",e.zb),e.$&&Nr(this,"phoneNumber",e.$),e.credential&&Nr(this,"credential",e.credential)}function si(e){if(e.code){var t=e.code||"";0==t.indexOf(qr)&&(t=t.substring(qr.length));var n={credential:Jo(e)};if(e.email)n.zb=e.email;else if(e.phoneNumber)n.$=e.phoneNumber;else if(!n.credential)return new Vr(t,e.message||void 0);return new ai(t,n,e.message)}return null}function li(){}function ci(e){return e.c||(e.c=e.b())}function ui(){}function di(e){if(!e.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var t=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<t.length;n++){var r=t[n];try{return new ActiveXObject(r),e.f=r}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return e.f}function pi(){}function fi(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseText="",this.status=-1,this.statusText="",this.a.onload=b(this.ec,this),this.a.onerror=b(this.Fb,this),this.a.onprogress=b(this.fc,this),this.a.ontimeout=b(this.ic,this)}function hi(e,t){e.readyState=t,e.onreadystatechange&&e.onreadystatechange()}function mi(e,t,n){this.reset(e,t,n,void 0,void 0)}ni.prototype.subscribe=function(e){var t=this;this.a.push(e),this.b||(this.b=function(e){for(var n=0;n<t.a.length;n++)t.a[n](e)},"function"==typeof(e=cr("universalLinks.subscribe",n))&&e(null,this.b))},ni.prototype.unsubscribe=function(e){F(this.a,function(t){return t==e})},w(ii,Vr),w(ai,Vr),ai.prototype.C=function(){var e={code:this.code,message:this.message};this.email&&(e.email=this.email),this.phoneNumber&&(e.phoneNumber=this.phoneNumber);var t=this.credential&&this.credential.C();return t&&ce(e,t),e},ai.prototype.toJSON=function(){return this.C()},li.prototype.c=null,w(ui,li),ui.prototype.a=function(){var e=di(this);return e?new ActiveXObject(e):new XMLHttpRequest},ui.prototype.b=function(){var e={};return di(this)&&(e[0]=!0,e[1]=!0),e},ri=new ui,w(pi,li),pi.prototype.a=function(){var e=new XMLHttpRequest;if("withCredentials"in e)return e;if("undefined"!=typeof XDomainRequest)return new fi;throw Error("Unsupported browser")},pi.prototype.b=function(){return{}},(e=fi.prototype).open=function(e,t,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(e,t)},e.send=function(e){if(e){if("string"!=typeof e)throw Error("Only string data is supported");this.a.send(e)}else this.a.send()},e.abort=function(){this.a.abort()},e.setRequestHeader=function(){},e.getResponseHeader=function(e){return"content-type"==e.toLowerCase()?this.a.contentType:""},e.ec=function(){this.status=200,this.responseText=this.a.responseText,hi(this,4)},e.Fb=function(){this.status=500,this.responseText="",hi(this,4)},e.ic=function(){this.Fb()},e.fc=function(){this.status=200,hi(this,1)},e.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},mi.prototype.a=null;function gi(e){this.f=e,this.b=this.c=this.a=null}function bi(e,t){this.name=e,this.value=t}mi.prototype.reset=function(e,t,n,r,o){"number"==typeof o||0,r||y(),delete this.a},bi.prototype.toString=function(){return this.name};var vi=new bi("SEVERE",1e3),yi=new bi("WARNING",900),wi=new bi("CONFIG",700),xi=new bi("FINE",500);gi.prototype.log=function(e,t,n){if(e.value>=function e(t){return t.c?t.c:t.a?e(t.a):(C("Root logger has no level set."),null)}(this).value)for(d(t)&&(t=t()),e=new mi(e,String(t),this.f),n&&(e.a=n),n=this;n;)n=n.a};var _i={},ki=null;function Ei(e){var t;if(ki||(ki=new gi(""),_i[""]=ki,ki.c=wi),!(t=_i[e])){t=new gi(e);var n=e.lastIndexOf("."),r=e.substr(n+1);(n=Ei(e.substr(0,n))).b||(n.b={}),n.b[r]=t,t.a=n,_i[e]=t}return t}function Ci(e,t){e&&e.log(xi,t,void 0)}function Ti(e){this.f=e}function Si(e){Pt.call(this),this.i=e,this.readyState=Ii,this.status=0,this.responseText=this.statusText="",this.onreadystatechange=null,this.g=new Headers,this.b=null,this.h="GET",this.c="",this.a=!1,this.f=Ei("goog.net.FetchXmlHttp")}w(Ti,li),Ti.prototype.a=function(){return new Si(this.f)},Ti.prototype.b=function(e){return function(){return e}}({}),w(Si,Pt);var Ii=0;function Ni(e){e.onreadystatechange&&e.onreadystatechange.call(e)}function Oi(e){Pt.call(this),this.headers=new Ut,this.D=e||null,this.c=!1,this.w=this.a=null,this.h=this.N=this.m="",this.f=this.I=this.i=this.G=!1,this.g=0,this.u=null,this.o=Pi,this.v=this.O=!1}(e=Si.prototype).open=function(e,t){if(this.readyState!=Ii)throw this.abort(),Error("Error reopening a connection");this.h=e,this.c=t,this.readyState=1,Ni(this)},e.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var t={headers:this.g,method:this.h,credentials:void 0,cache:void 0};e&&(t.body=e),this.i.fetch(new Request(this.c,t)).then(this.hc.bind(this),this.Gb.bind(this))},e.abort=function(){this.responseText="",this.g=new Headers,this.status=0,1<=this.readyState&&this.a&&4!=this.readyState&&(this.readyState=4,this.a=!1,Ni(this)),this.readyState=Ii},e.hc=function(e){this.a&&(this.b||(this.b=e.headers,this.readyState=2,Ni(this)),this.a&&(this.readyState=3,Ni(this),this.a&&e.text().then(this.gc.bind(this,e),this.Gb.bind(this))))},e.gc=function(e,t){this.a&&(this.status=e.status,this.statusText=e.statusText,this.responseText=t,this.readyState=4,Ni(this))},e.Gb=function(e){var t=this.f;t&&t.log(yi,"Failed to fetch url "+this.c,e instanceof Error?e:Error(e)),this.a&&(this.readyState=4,Ni(this))},e.setRequestHeader=function(e,t){this.g.append(e,t)},e.getResponseHeader=function(e){return this.b?this.b.get(e.toLowerCase())||"":((e=this.f)&&e.log(yi,"Attempting to get response header but no headers have been received for url: "+this.c,void 0),"")},e.getAllResponseHeaders=function(){if(!this.b){var e=this.f;return e&&e.log(yi,"Attempting to get all response headers but no headers have been received for url: "+this.c,void 0),""}e=[];for(var t=this.b.entries(),n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},w(Oi,Pt);var Pi="";Oi.prototype.b=Ei("goog.net.XhrIo");var Ai=/^https?$/i,Ri=["POST","PUT"];function Di(e,t,r,i,a){if(e.a)throw Error("[goog.net.XhrIo] Object is active with another request="+e.m+"; newUri="+t);r=r?r.toUpperCase():"GET",e.m=t,e.h="",e.N=r,e.G=!1,e.c=!0,e.a=e.D?e.D.a():ri.a(),e.w=e.D?ci(e.D):ci(ri),e.a.onreadystatechange=b(e.Jb,e);try{Ci(e.b,Bi(e,"Opening Xhr")),e.I=!0,e.a.open(r,String(t),!0),e.I=!1}catch(t){return Ci(e.b,Bi(e,"Error opening Xhr: "+t.message)),void ji(e,t)}t=i||"";var s=new Ut(e.headers);a&&function(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(u(e)||o(e))R(e,t,void 0);else for(var n=Ft(e),r=Mt(e),i=r.length,a=0;a<i;a++)t.call(void 0,r[a],n&&n[a],e)}(a,function(e,t){s.set(t,e)}),a=function(e){e:{for(var t=Li,n=e.length,r=o(e)?e.split(""):e,i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e)){t=i;break e}t=-1}return 0>t?null:o(e)?e.charAt(t):e[t]}(s.U()),i=n.FormData&&t instanceof n.FormData,!j(Ri,r)||a||i||s.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),s.forEach(function(e,t){this.a.setRequestHeader(t,e)},e),e.o&&(e.a.responseType=e.o),"withCredentials"in e.a&&e.a.withCredentials!==e.O&&(e.a.withCredentials=e.O);try{zi(e),0<e.g&&(e.v=function(e){return qe&&tt(9)&&"number"==typeof e.timeout&&void 0!==e.ontimeout}(e.a),Ci(e.b,Bi(e,"Will abort after "+e.g+"ms if incomplete, xhr2 "+e.v)),e.v?(e.a.timeout=e.g,e.a.ontimeout=b(e.Ga,e)):e.u=Lt(e.Ga,e.g,e)),Ci(e.b,Bi(e,"Sending request")),e.i=!0,e.a.send(t),e.i=!1}catch(t){Ci(e.b,Bi(e,"Send error: "+t.message)),ji(e,t)}}function Li(e){return"content-type"==e.toLowerCase()}function ji(e,t){e.c=!1,e.a&&(e.f=!0,e.a.abort(),e.f=!1),e.h=t,Mi(e),Ui(e)}function Mi(e){e.G||(e.G=!0,e.dispatchEvent("complete"),e.dispatchEvent("error"))}function Fi(e){if(e.c&&void 0!==t)if(e.w[1]&&4==Wi(e)&&2==Vi(e))Ci(e.b,Bi(e,"Local request error detected and ignored"));else if(e.i&&4==Wi(e))Lt(e.Jb,0,e);else if(e.dispatchEvent("readystatechange"),4==Wi(e)){Ci(e.b,Bi(e,"Request complete")),e.c=!1;try{var r,o=Vi(e);e:switch(o){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var i=!0;break e;default:i=!1}if(!(r=i)){var a;if(a=0===o){var s=String(e.m).match(Vt)[1]||null;if(!s&&n.self&&n.self.location){var l=n.self.location.protocol;s=l.substr(0,l.length-1)}a=!Ai.test(s?s.toLowerCase():"")}r=a}if(r)e.dispatchEvent("complete"),e.dispatchEvent("success");else{try{var c=2<Wi(e)?e.a.statusText:""}catch(t){Ci(e.b,"Can not get status: "+t.message),c=""}e.h=c+" ["+Vi(e)+"]",Mi(e)}}finally{Ui(e)}}}function Ui(e,t){if(e.a){zi(e);var n=e.a,r=e.w[0]?a:null;e.a=null,e.w=null,t||e.dispatchEvent("ready");try{n.onreadystatechange=r}catch(t){(e=e.b)&&e.log(vi,"Problem encountered resetting onreadystatechange: "+t.message,void 0)}}}function zi(e){e.a&&e.v&&(e.a.ontimeout=null),e.u&&(n.clearTimeout(e.u),e.u=null)}function Wi(e){return e.a?e.a.readyState:0}function Vi(e){try{return 2<Wi(e)?e.a.status:-1}catch(e){return-1}}function Bi(e,t){return t+" ["+e.N+" "+e.m+" "+Vi(e)+"]"}function qi(e,t){this.g=[],this.v=e,this.u=t||null,this.f=this.a=!1,this.c=void 0,this.m=this.w=this.i=!1,this.h=0,this.b=null,this.l=0}function Hi(e,t,n){e.a=!0,e.c=n,e.f=!t,$i(e)}function Qi(e){if(e.a){if(!e.m)throw new Yi(e);e.m=!1}}function Ki(e,t,n,r){e.g.push([t,n,r]),e.a&&$i(e)}function Gi(e){return L(e.g,function(e){return d(e[1])})}function $i(e){if(e.h&&e.a&&Gi(e)){var t=e.h,r=Zi[t];r&&(n.clearTimeout(r.a),delete Zi[t]),e.h=0}e.b&&(e.b.l--,delete e.b),t=e.c;for(var o=r=!1;e.g.length&&!e.i;){var i=e.g.shift(),a=i[0],s=i[1];if(i=i[2],a=e.f?s:a)try{var l=a.call(i||e.u,t);void 0!==l&&(e.f=e.f&&(l==t||l instanceof Error),e.c=t=l),(_(t)||"function"==typeof n.Promise&&t instanceof n.Promise)&&(o=!0,e.i=!0)}catch(n){t=n,e.f=!0,Gi(e)||(r=!0)}}e.c=t,o&&(l=b(e.o,e,!0),o=b(e.o,e,!1),t instanceof qi?(Ki(t,l,o),t.w=!0):t.then(l,o)),r&&(t=new Ji(t),Zi[t.a]=t,e.h=t.a)}function Yi(){k.call(this)}function Xi(){k.call(this)}function Ji(e){this.a=n.setTimeout(b(this.c,this),0),this.b=e}(e=Oi.prototype).Ga=function(){void 0!==t&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",Ci(this.b,Bi(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},e.abort=function(){this.a&&this.c&&(Ci(this.b,Bi(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Ui(this))},e.va=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),Ui(this,!0)),Oi.ob.va.call(this)},e.Jb=function(){this.qa||(this.I||this.i||this.f?Fi(this):this.wc())},e.wc=function(){Fi(this)},e.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.o){case Pi:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var e=this.b;return e&&e.log(vi,"Response type "+this.o+" is not supported on this browser",void 0),null}catch(e){return Ci(this.b,"Can not get response: "+e.message),null}},qi.prototype.cancel=function(e){if(this.a)this.c instanceof qi&&this.c.cancel();else{if(this.b){var t=this.b;delete this.b,e?t.cancel(e):(t.l--,0>=t.l&&t.cancel())}this.v?this.v.call(this.u,this):this.m=!0,this.a||(e=new Xi(this),Qi(this),Hi(this,!1,e))}},qi.prototype.o=function(e,t){this.i=!1,Hi(this,e,t)},qi.prototype.D=function(){Qi(this),Hi(this,!0,null)},qi.prototype.then=function(e,t,n){var r,o,i=new me(function(e,t){r=e,o=t});return Ki(this,r,function(e){e instanceof Xi?i.cancel():o(e)}),i.then(e,t,n)},x(qi),w(Yi,k),Yi.prototype.message="Deferred has already fired",Yi.prototype.name="AlreadyCalledError",w(Xi,k),Xi.prototype.message="Deferred was canceled",Xi.prototype.name="CanceledError",Ji.prototype.c=function(){throw delete Zi[this.a],this.b};var Zi={};function ea(e){var t={},n=t.document||document,r=yn(e),o=document.createElement("SCRIPT"),i={Lb:o,Ga:void 0},a=new qi(ta,i),s=null,l=null!=t.timeout?t.timeout:5e3;return 0<l&&(s=window.setTimeout(function(){na(o,!0);var e=new ia(oa,"Timeout reached for loading script "+r);Qi(a),Hi(a,!1,e)},l),i.Ga=s),o.onload=o.onreadystatechange=function(){o.readyState&&"loaded"!=o.readyState&&"complete"!=o.readyState||(na(o,t.fd||!1,s),a.D())},o.onerror=function(){na(o,!0,s);var e=new ia(ra,"Error while loading script "+r);Qi(a),Hi(a,!1,e)},ce(i=t.attributes||{},{type:"text/javascript",charset:"UTF-8"}),Dn(o,i),o.src=yn(e),function(e){var t;return(t=(e||document).getElementsByTagName("HEAD"))&&0!=t.length?t[0]:e.documentElement}(n).appendChild(o),a}function ta(){if(this&&this.Lb){var e=this.Lb;e&&"SCRIPT"==e.tagName&&na(e,!0,this.Ga)}}function na(e,t,r){null!=r&&n.clearTimeout(r),e.onload=a,e.onerror=a,e.onreadystatechange=a,t&&window.setTimeout(function(){e&&e.parentNode&&e.parentNode.removeChild(e)},0)}var ra=0,oa=1;function ia(e,t){var n="Jsloader error (code #"+e+")";t&&(n+=": "+t),k.call(this,n),this.code=e}function aa(e){this.f=e}function sa(e,t,o){if(this.b=e,e=t||{},this.i=e.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.l=e.secureTokenTimeout||ua,this.f=ie(e.secureTokenHeaders||da),this.g=e.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.h=e.firebaseTimeout||pa,this.a=ie(e.firebaseHeaders||fa),o&&(this.a["X-Client-Version"]=o,this.f["X-Client-Version"]=o),o="Node"==tr(),!(o=n.XMLHttpRequest||o&&r.a.INTERNAL.node&&r.a.INTERNAL.node.XMLHttpRequest)&&!er())throw new Vr("internal-error","The XMLHttpRequest compatibility library was not found.");this.c=void 0,er()?this.c=new Ti(self):nr()?this.c=new aa(o):this.c=new pi}w(ia,k),w(aa,li),aa.prototype.a=function(){return new this.f},aa.prototype.b=function(){return{}};var la,ca="idToken",ua=new xr(3e4,6e4),da={"Content-Type":"application/x-www-form-urlencoded"},pa=new xr(3e4,6e4),fa={"Content-Type":"application/json"};function ha(e,t){t?e.a["X-Firebase-Locale"]=t:delete e.a["X-Firebase-Locale"]}function ma(e,t){t?(e.a["X-Client-Version"]=t,e.f["X-Client-Version"]=t):(delete e.a["X-Client-Version"],delete e.f["X-Client-Version"])}function ga(e,t,r,o,i,a,s){(function(){var e=lr();return!((e=ir(e)!=or?null:(e=e.match(/\sChrome\/(\d+)/i))&&2==e.length?parseInt(e[1],10):null)&&30>e||qe&&Ze&&!(9<Ze))})()||er()?e=b(e.o,e):(la||(la=new me(function(e,t){!function(e,t){if(((window.gapi||{}).client||{}).request)e();else{n[va]=function(){((window.gapi||{}).client||{}).request?e():t(Error("CORS_UNSUPPORTED"))};var r=wn(ba,{onload:va});!function(e,t){Ki(e,null,t,void 0)}(ea(r),function(){t(Error("CORS_UNSUPPORTED"))})}}(e,t)})),e=b(e.m,e)),e(t,r,o,i,a,s)}sa.prototype.o=function(e,t,r,o,i,a){if(er()&&(void 0===n.fetch||void 0===n.Headers||void 0===n.Request))throw new Vr("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var s=new Oi(this.c);if(a){s.g=Math.max(0,a);var l=setTimeout(function(){s.dispatchEvent("timeout")},a)}At(s,"complete",function(){l&&clearTimeout(l);var e=null;try{e=JSON.parse(function(e){try{return e.a?e.a.responseText:""}catch(t){return Ci(e.b,"Can not get responseText: "+t.message),""}}(this))||null}catch(t){e=null}t&&t(e)}),Rt(s,"ready",function(){l&&clearTimeout(l),Ue(this)}),Rt(s,"timeout",function(){l&&clearTimeout(l),Ue(this),t&&t(null)}),Di(s,e,r,o,i)};var ba=bn("https://apis.google.com/js/client.js?onload=%{onload}"),va="__fcb"+Math.floor(1e6*Math.random()).toString();function ya(e){if(!o(e=e.email)||!Yn.test(e))throw new Vr("invalid-email")}function wa(e){"email"in e&&ya(e)}function xa(e){if(!e[ca])throw new Vr("internal-error")}function _a(e){if(e.phoneNumber||e.temporaryProof){if(!e.phoneNumber||!e.temporaryProof)throw new Vr("internal-error")}else{if(!e.sessionInfo)throw new Vr("missing-verification-id");if(!e.code)throw new Vr("missing-verification-code")}}sa.prototype.m=function(e,t,n,r,o){var i=this;la.then(function(){window.gapi.client.setApiKey(i.b);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:e,method:n,body:r,headers:o,authType:"none",callback:function(e){window.gapi.auth.setToken(a),t&&t(e)}})}).s(function(e){t&&t({error:{message:e&&e.message||"CORS_UNSUPPORTED"}})})},sa.prototype.Qa=function(){return os(this,$a,{})},sa.prototype.pb=function(e,t){return os(this,Ka,{idToken:e,email:t})},sa.prototype.qb=function(e,t){return os(this,Ga,{idToken:e,password:t})};var ka={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function Ea(e){if(!e.requestUri||!e.sessionId&&!e.postBody&&!e.pendingToken)throw new Vr("internal-error")}function Ca(e,t){return t.oauthIdToken&&t.providerId&&0==t.providerId.indexOf("oidc.")&&!t.pendingToken&&(e.sessionId?t.nonce=e.sessionId:e.postBody&&(un(e=new an(e.postBody),"nonce")&&(t.nonce=e.get("nonce")))),t}function Ta(e){var t=null;if(e.needConfirmation?(e.code="account-exists-with-different-credential",t=si(e)):"FEDERATED_USER_ID_ALREADY_LINKED"==e.errorMessage?(e.code="credential-already-in-use",t=si(e)):"EMAIL_EXISTS"==e.errorMessage?(e.code="email-already-in-use",t=si(e)):e.errorMessage&&(t=is(e.errorMessage)),t)throw t;if(!e[ca])throw new Vr("internal-error")}function Sa(e,t){return t.returnIdpCredential=!0,os(e,Ya,t)}function Ia(e,t){return t.returnIdpCredential=!0,os(e,Ja,t)}function Na(e,t){return t.returnIdpCredential=!0,t.autoCreate=!1,os(e,Xa,t)}function Oa(e){if(!e.oobCode)throw new Vr("invalid-action-code")}(e=sa.prototype).rb=function(e,t){var n={idToken:e},r=[];return re(ka,function(e,o){var i=t[o];null===i?r.push(e):o in t&&(n[o]=i)}),r.length&&(n.deleteAttribute=r),os(this,Ka,n)},e.kb=function(e,t){return ce(e={requestType:"PASSWORD_RESET",email:e},t),os(this,Va,e)},e.lb=function(e,t){return ce(e={requestType:"EMAIL_SIGNIN",email:e},t),os(this,za,e)},e.jb=function(e,t){return ce(e={requestType:"VERIFY_EMAIL",idToken:e},t),os(this,Wa,e)},e.Ua=function(e){return os(this,ts,e)},e.Za=function(e,t){return os(this,Ha,{oobCode:e,newPassword:t})},e.Ja=function(e){return os(this,Aa,{oobCode:e})},e.Wa=function(e){return os(this,Pa,{oobCode:e})};var Pa={endpoint:"setAccountInfo",B:Oa,da:"email"},Aa={endpoint:"resetPassword",B:Oa,J:function(e){var t=e.requestType;if(!t||!e.email&&"EMAIL_SIGNIN"!=t)throw new Vr("internal-error")}},Ra={endpoint:"signupNewUser",B:function(e){if(ya(e),!e.password)throw new Vr("weak-password")},J:xa,R:!0},Da={endpoint:"createAuthUri"},La={endpoint:"deleteAccount",T:["idToken"]},ja={endpoint:"setAccountInfo",T:["idToken","deleteProvider"],B:function(e){if(!c(e.deleteProvider))throw new Vr("internal-error")}},Ma={endpoint:"emailLinkSignin",T:["email","oobCode"],B:ya,J:xa,R:!0},Fa={endpoint:"emailLinkSignin",T:["idToken","email","oobCode"],B:ya,J:xa,R:!0},Ua={endpoint:"getAccountInfo"},za={endpoint:"getOobConfirmationCode",T:["requestType"],B:function(e){if("EMAIL_SIGNIN"!=e.requestType)throw new Vr("internal-error");ya(e)},da:"email"},Wa={endpoint:"getOobConfirmationCode",T:["idToken","requestType"],B:function(e){if("VERIFY_EMAIL"!=e.requestType)throw new Vr("internal-error")},da:"email"},Va={endpoint:"getOobConfirmationCode",T:["requestType"],B:function(e){if("PASSWORD_RESET"!=e.requestType)throw new Vr("internal-error");ya(e)},da:"email"},Ba={ub:!0,endpoint:"getProjectConfig",Ib:"GET"},qa={ub:!0,endpoint:"getRecaptchaParam",Ib:"GET",J:function(e){if(!e.recaptchaSiteKey)throw new Vr("internal-error")}},Ha={endpoint:"resetPassword",B:Oa,da:"email"},Qa={endpoint:"sendVerificationCode",T:["phoneNumber","recaptchaToken"],da:"sessionInfo"},Ka={endpoint:"setAccountInfo",T:["idToken"],B:wa,R:!0},Ga={endpoint:"setAccountInfo",T:["idToken"],B:function(e){if(wa(e),!e.password)throw new Vr("weak-password")},J:xa,R:!0},$a={endpoint:"signupNewUser",J:xa,R:!0},Ya={endpoint:"verifyAssertion",B:Ea,Oa:Ca,J:Ta,R:!0},Xa={endpoint:"verifyAssertion",B:Ea,Oa:Ca,J:function(e){if(e.errorMessage&&"USER_NOT_FOUND"==e.errorMessage)throw new Vr("user-not-found");if(e.errorMessage)throw is(e.errorMessage);if(!e[ca])throw new Vr("internal-error")},R:!0},Ja={endpoint:"verifyAssertion",B:function(e){if(Ea(e),!e.idToken)throw new Vr("internal-error")},Oa:Ca,J:Ta,R:!0},Za={endpoint:"verifyCustomToken",B:function(e){if(!e.token)throw new Vr("invalid-custom-token")},J:xa,R:!0},es={endpoint:"verifyPassword",B:function(e){if(ya(e),!e.password)throw new Vr("wrong-password")},J:xa,R:!0},ts={endpoint:"verifyPhoneNumber",B:_a,J:xa},ns={endpoint:"verifyPhoneNumber",B:function(e){if(!e.idToken)throw new Vr("internal-error");_a(e)},J:function(e){if(e.temporaryProof)throw e.code="credential-already-in-use",si(e);xa(e)}},rs={Xb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",B:_a,J:xa};function os(e,t,n){if(!function(e,t){if(!t||!t.length)return!0;if(!e)return!1;for(var n=0;n<t.length;n++){var r=e[t[n]];if(null==r||""===r)return!1}return!0}(n,t.T))return ke(new Vr("internal-error"));var r,o=t.Ib||"POST";return _e(n).then(t.B).then(function(){return t.R&&(n.returnSecureToken=!0),function(e,t,n,r,o,i){var a=$t(e.g+t);Kt(a,"key",e.b),i&&Kt(a,"cb",y().toString());var s="GET"==n;if(s)for(var l in r)r.hasOwnProperty(l)&&Kt(a,l,r[l]);return new me(function(t,i){ga(e,a.toString(),function(e){e?e.error?i(as(e,o||{})):t(e):i(new Vr("network-request-failed"))},n,s?void 0:Fn(gr(r)),e.a,e.h.get())})}(e,t.endpoint,o,n,t.Xb,t.ub||!1)}).then(function(e){return r=e,t.Oa?t.Oa(n,r):r}).then(t.J).then(function(){if(!t.da)return r;if(!(t.da in r))throw new Vr("internal-error");return r[t.da]})}function is(e){return as({error:{errors:[{message:e}],code:400,message:e}})}function as(e,t){var n=(e.error&&e.error.errors&&e.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new Vr(r[n]):null)return n;for(var o in n=e.error&&e.error.message||"",ce(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash"},t||{}),t=(t=n.match(/^[^\s]+\s*:\s*(.*)$/))&&1<t.length?t[1]:void 0,r)if(0===n.indexOf(o))return new Vr(r[o],t);return!t&&e&&(t=mr(e)),new Vr("internal-error",t)}function ss(e){this.b=e,this.a=null,this.fb=function(e){return(ds||(ds=new me(function(e,t){function r(){wr(),cr("gapi.load")("gapi.iframes",{callback:e,ontimeout:function(){wr(),t(Error("Network Error"))},timeout:cs.get()})}if(cr("gapi.iframes.Iframe"))e();else if(cr("gapi.load"))r();else{var o="__iframefcb"+Math.floor(1e6*Math.random()).toString();n[o]=function(){cr("gapi.load")?r():t(Error("Network Error"))},_e(ea(o=wn(ls,{onload:o}))).s(function(){t(Error("Network Error"))})}}).s(function(e){throw ds=null,e}))).then(function(){return new me(function(t,n){cr("gapi.iframes.getContext")().open({where:document.body,url:e.b,messageHandlersFilter:cr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(r){function o(){clearTimeout(i),t()}e.a=r,e.a.restyle({setHideOnLeave:!1});var i=setTimeout(function(){n(Error("Network Error"))},us.get());r.ping(o).then(o,function(){n(Error("Network Error"))})})})})}(this)}var ls=bn("https://apis.google.com/js/api.js?onload=%{onload}"),cs=new xr(3e4,6e4),us=new xr(5e3,15e3),ds=null;function ps(e,t,n){this.i=e,this.g=t,this.h=n,this.f=null,this.a=Yt(this.i,"/__/auth/iframe"),Kt(this.a,"apiKey",this.g),Kt(this.a,"appName",this.h),this.b=null,this.c=[]}function fs(e,t,n,r,o){this.o=e,this.m=t,this.c=n,this.l=r,this.h=this.g=this.i=null,this.a=o,this.f=null}function hs(e){try{return r.a.app(e).auth().ya()}catch(e){return[]}}function ms(e,t,n,r,o){this.m=e,this.f=t,this.b=n,this.c=r||null,this.h=o||null,this.o=this.u=this.v=null,this.g=[],this.l=this.a=null}function gs(e){var t=qn();return function(e){return os(e,Ba,{}).then(function(e){return e.authorizedDomains||[]})}(e).then(function(e){e:{var n=$t(t),r=n.c;n=n.b;for(var o=0;o<e.length;o++){var i=e[o],a=n,s=r;if(0==i.indexOf("chrome-extension://")?a=$t(i).b==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:$n.test(i)?a=a==i:(i=i.split(".").join("\\."),a=new RegExp("^(.+\\."+i+"|"+i+")$","i").test(a)),a){e=!0;break e}}e=!1}if(!e)throw new ii(qn())})}function bs(e){return e.l?e.l:(e.l=Xn().then(function(){if(!e.u){var t=e.c,n=e.h,r=hs(e.b),o=new ps(e.m,e.f,e.b);o.f=t,o.b=n,o.c=z(r||[]),e.u=o.toString()}e.i=new ss(e.u),function(e){if(!e.i)throw Error("IfcHandler must be initialized!");!function(e,t){e.fb.then(function(){e.a.register("authEvent",t,cr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})}(e.i,function(t){var n={};if(t&&t.authEvent){var r=!1;for(t=ti(t.authEvent),n=0;n<e.g.length;n++)r=e.g[n](t)||r;return(n={}).status=r?"ACK":"ERROR",_e(n)}return n.status="ERROR",_e(n)})}(e)}),e.l)}function vs(e){return e.o||(e.v=e.c?sr(e.c,hs(e.b)):null,e.o=new sa(e.f,po(e.h),e.v)),e.o}function ys(e,t,n,r,o,i,a,s,l,c){return(e=new fs(e,t,n,r,o)).i=i,e.g=a,e.h=s,e.b=ie(l||null),e.f=c,e.toString()}function ws(e){if(this.a=e||r.a.INTERNAL.reactNative&&r.a.INTERNAL.reactNative.AsyncStorage,!this.a)throw new Vr("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function xs(e){this.b=e,this.a={},this.c=b(this.f,this)}ps.prototype.toString=function(){return this.f?Kt(this.a,"v",this.f):cn(this.a.a,"v"),this.b?Kt(this.a,"eid",this.b):cn(this.a.a,"eid"),this.c.length?Kt(this.a,"fw",this.c.join(",")):cn(this.a.a,"fw"),this.a.toString()},fs.prototype.toString=function(){var e=Yt(this.o,"/__/auth/handler");if(Kt(e,"apiKey",this.m),Kt(e,"appName",this.c),Kt(e,"authType",this.l),this.a.isOAuthProvider){var t=this.a;try{var n=r.a.app(this.c).auth().ea()}catch(e){n=null}for(var o in t.$a=n,Kt(e,"providerId",this.a.providerId),n=gr((t=this.a).yb))n[o]=n[o].toString();o=t.Dc,n=ie(n);for(var i=0;i<o.length;i++){var a=o[i];a in n&&delete n[a]}t.cb&&t.$a&&!n[t.cb]&&(n[t.cb]=t.$a),oe(n)||Kt(e,"customParameters",mr(n))}if("function"==typeof this.a.Eb&&((t=this.a.Eb()).length&&Kt(e,"scopes",t.join(","))),this.i?Kt(e,"redirectUrl",this.i):cn(e.a,"redirectUrl"),this.g?Kt(e,"eventId",this.g):cn(e.a,"eventId"),this.h?Kt(e,"v",this.h):cn(e.a,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Gt(e,s)&&Kt(e,s,this.b[s]);return this.f?Kt(e,"eid",this.f):cn(e.a,"eid"),(s=hs(this.c)).length&&Kt(e,"fw",s.join(",")),e.toString()},(e=ms.prototype).Ea=function(e,t,n){var r=new Vr("popup-closed-by-user"),o=new Vr("web-storage-unsupported"),i=this,a=!1;return this.ga().then(function(){(function(e){var t={type:"webStorageSupport"};return bs(e).then(function(){return function(e,t){return e.fb.then(function(){return new me(function(n){e.a.send(t.type,t,n,cr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})})}(e.i,t)}).then(function(e){if(e&&e.length&&void 0!==e[0].webStorageSupport)return e[0].webStorageSupport;throw Error()})})(i).then(function(n){n||(e&&Kn(e),t(o),a=!0)})}).s(function(){}).then(function(){if(!a)return function(e){return new me(function(t){return function n(){jt(2e3).then(function(){if(e&&!e.closed)return n();t()})}()})}(e)}).then(function(){if(!a)return jt(n).then(function(){t(r)})})},e.Mb=function(){var e=lr();return!hr(e)&&!yr(e)},e.Hb=function(){return!1},e.Cb=function(e,t,n,r,o,i,a){if(!e)return ke(new Vr("popup-blocked"));if(a&&!hr())return this.ga().s(function(t){Kn(e),o(t)}),r(),_e();this.a||(this.a=gs(vs(this)));var s=this;return this.a.then(function(){var t=s.ga().s(function(t){throw Kn(e),o(t),t});return r(),t}).then(function(){(Zo(n),a)||Hn(ys(s.m,s.f,s.b,t,n,null,i,s.c,void 0,s.h),e)}).s(function(e){throw"auth/network-request-failed"==e.code&&(s.a=null),e})},e.Ca=function(e,t,n){this.a||(this.a=gs(vs(this)));var r=this;return this.a.then(function(){Zo(t),Hn(ys(r.m,r.f,r.b,e,t,qn(),n,r.c,void 0,r.h))}).s(function(e){throw"auth/network-request-failed"==e.code&&(r.a=null),e})},e.ga=function(){var e=this;return bs(this).then(function(){return e.i.fb}).s(function(){throw e.a=null,new Vr("network-request-failed")})},e.Qb=function(){return!0},e.wa=function(e){this.g.push(e)},e.Ka=function(e){F(this.g,function(t){return t==e})},(e=ws.prototype).get=function(e){return _e(this.a.getItem(e)).then(function(e){return e&&br(e)})},e.set=function(e,t){return _e(this.a.setItem(e,mr(t)))},e.P=function(e){return _e(this.a.removeItem(e))},e.Y=function(){},e.ca=function(){};var _s,ks=[];function Es(e){this.a=e}function Cs(e){this.c=e,this.b=!1,this.a=[]}function Ts(e,t,n,r){var o,i,a,s,l=n||{},c=null;if(e.b)return ke(Error("connection_unavailable"));var u=r?800:50,d="undefined"!=typeof MessageChannel?new MessageChannel:null;return new me(function(n,r){d?(o=Math.floor(Math.random()*Math.pow(10,20)).toString(),d.port1.start(),a=setTimeout(function(){r(Error("unsupported_event"))},u),c={messageChannel:d,onMessage:i=function(e){e.data.eventId===o&&("ack"===e.data.status?(clearTimeout(a),s=setTimeout(function(){r(Error("timeout"))},3e3)):"done"===e.data.status?(clearTimeout(s),void 0!==e.data.response?n(e.data.response):r(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),r(Error("invalid_response"))))}},e.a.push(c),d.port1.addEventListener("message",i),e.c.postMessage({eventType:t,eventId:o,data:l},[d.port2])):r(Error("connection_unavailable"))}).then(function(t){return Ss(e,c),t}).s(function(t){throw Ss(e,c),t})}function Ss(e,t){if(t){var n=t.messageChannel,r=t.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),F(e.a,function(e){return e==t})}}function Is(){if(!Ps())throw new Vr("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.m=n.indexedDB,this.type="indexedDB",this.g=this.l=this.f=this.i=null,this.u=!1,this.h=null;var e=this;er()&&self?(this.l=function(){var e=er()?self:null;if(R(ks,function(n){n.b==e&&(t=n)}),!t){var t=new xs(e);ks.push(t)}return t}(),this.l.subscribe("keyChanged",function(t,n){return js(e).then(function(t){return 0<t.length&&R(e.a,function(e){e(t)}),{keyProcessed:j(t,n.key)}})}),this.l.subscribe("ping",function(){return _e(["keyChanged"])})):function(){var e=n.navigator;return e&&e.serviceWorker?_e().then(function(){return e.serviceWorker.ready}).then(function(e){return e.active||null}).s(function(){return null}):_e(null)}().then(function(t){(e.h=t)&&(e.g=new Cs(new Es(t)),Ts(e.g,"ping",null,!0).then(function(t){t[0].fulfilled&&j(t[0].value,"keyChanged")&&(e.u=!0)}).s(function(){}))})}function Ns(e){return new me(function(t,n){var r=e.m.open("firebaseLocalStorageDb",1);r.onerror=function(e){try{e.preventDefault()}catch(e){}n(Error(e.target.error))},r.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(e){n(e)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?t(r):function(e){return new me(function(t,n){var r=e.m.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){t()},r.onerror=function(e){n(Error(e.target.error))}})}(e).then(function(){return Ns(e)}).then(function(e){t(e)}).s(function(e){n(e)})}})}function Os(e){return e.o||(e.o=Ns(e)),e.o}function Ps(){try{return!!n.indexedDB}catch(e){return!1}}function As(e){return e.objectStore("firebaseLocalStorage")}function Rs(e,t){return e.transaction(["firebaseLocalStorage"],t?"readwrite":"readonly")}function Ds(e){return new me(function(t,n){e.onsuccess=function(e){e&&e.target?t(e.target.result):t()},e.onerror=function(e){n(e.target.error)}})}function Ls(e,t){return e.g&&e.h&&function(){var e=n.navigator;return e&&e.serviceWorker&&e.serviceWorker.controller||null}()===e.h?Ts(e.g,"keyChanged",{key:t},e.u).then(function(){}).s(function(){}):_e()}function js(e){return Os(e).then(function(e){var t=As(Rs(e,!1));return t.getAll?Ds(t.getAll()):new me(function(e,n){var r=[],o=t.openCursor();o.onsuccess=function(t){(t=t.target.result)?(r.push(t.value),t.continue()):e(r)},o.onerror=function(e){n(e.target.error)}})}).then(function(t){var n={},r=[];if(0==e.b){for(r=0;r<t.length;r++)n[t[r].fbase_key]=t[r].value;r=function e(t,n){var r,o=[];for(r in t)r in n?typeof t[r]!=typeof n[r]?o.push(r):"object"==typeof t[r]&&null!=t[r]&&null!=n[r]?0<e(t[r],n[r]).length&&o.push(r):t[r]!==n[r]&&o.push(r):o.push(r);for(r in n)r in t||o.push(r);return o}(e.c,n),e.c=n}return r})}function Ms(e){e.i&&e.i.cancel("STOP_EVENT"),e.f&&(clearTimeout(e.f),e.f=null)}function Fs(e){var t=this,n=null;this.a=[],this.type="indexedDB",this.c=e,this.b=_e().then(function(){if(Ps()){var e=vr(),r="__sak"+e;return _s||(_s=new Is),(n=_s).set(r,e).then(function(){return n.get(r)}).then(function(t){if(t!==e)throw Error("indexedDB not supported!");return n.P(r)}).then(function(){return n}).s(function(){return t.c})}return t.c}).then(function(e){return t.type=e.type,e.Y(function(e){R(t.a,function(t){t(e)})}),e})}function Us(){this.a={},this.type="inMemory"}function zs(){if(!function(){var e="Node"==tr();if(!(e=Ws()||e&&r.a.INTERNAL.node&&r.a.INTERNAL.node.localStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==tr())throw new Vr("internal-error","The LocalStorage compatibility library was not found.");throw new Vr("web-storage-unsupported")}this.a=Ws()||r.a.INTERNAL.node.localStorage,this.type="localStorage"}function Ws(){try{var e=n.localStorage,t=vr();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function Vs(){this.type="nullStorage"}function Bs(){if(!function(){var e="Node"==tr();if(!(e=qs()||e&&r.a.INTERNAL.node&&r.a.INTERNAL.node.sessionStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==tr())throw new Vr("internal-error","The SessionStorage compatibility library was not found.");throw new Vr("web-storage-unsupported")}this.a=qs()||r.a.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function qs(){try{var e=n.sessionStorage,t=vr();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function Hs(){var e={};e.Browser=Gs,e.Node=$s,e.ReactNative=Ys,e.Worker=Xs,this.a=e[tr()]}xs.prototype.f=function(e){var t=e.data.eventType,n=e.data.eventId,r=this.a[t];if(r&&0<r.length){e.ports[0].postMessage({status:"ack",eventId:n,eventType:t,response:null});var o=[];R(r,function(t){o.push(_e().then(function(){return t(e.origin,e.data.data)}))}),Ce(o).then(function(r){var o=[];R(r,function(e){o.push({fulfilled:e.Db,value:e.value,reason:e.reason?e.reason.message:void 0})}),R(o,function(e){for(var t in e)void 0===e[t]&&delete e[t]}),e.ports[0].postMessage({status:"done",eventId:n,eventType:t,response:o})})}},xs.prototype.subscribe=function(e,t){oe(this.a)&&this.b.addEventListener("message",this.c),void 0===this.a[e]&&(this.a[e]=[]),this.a[e].push(t)},xs.prototype.unsubscribe=function(e,t){void 0!==this.a[e]&&t?(F(this.a[e],function(e){return e==t}),0==this.a[e].length&&delete this.a[e]):t||delete this.a[e],oe(this.a)&&this.b.removeEventListener("message",this.c)},Es.prototype.postMessage=function(e,t){this.a.postMessage(e,t)},Cs.prototype.close=function(){for(;0<this.a.length;)Ss(this,this.a[0]);this.b=!0},(e=Is.prototype).set=function(e,t){var n,r=!1,o=this;return Os(this).then(function(t){return Ds((t=As(Rs(n=t,!0))).get(e))}).then(function(i){var a=As(Rs(n,!0));return i?(i.value=t,Ds(a.put(i))):(o.b++,r=!0,(i={}).fbase_key=e,i.value=t,Ds(a.add(i)))}).then(function(){return o.c[e]=t,Ls(o,e)}).ia(function(){r&&o.b--})},e.get=function(e){return Os(this).then(function(t){return Ds(As(Rs(t,!1)).get(e))}).then(function(e){return e&&e.value})},e.P=function(e){var t=!1,n=this;return Os(this).then(function(r){return t=!0,n.b++,Ds(As(Rs(r,!0)).delete(e))}).then(function(){return delete n.c[e],Ls(n,e)}).ia(function(){t&&n.b--})},e.Y=function(e){0==this.a.length&&function(e){Ms(e),function t(){e.f=setTimeout(function(){e.i=js(e).then(function(t){0<t.length&&R(e.a,function(e){e(t)})}).then(function(){t()}).s(function(e){"STOP_EVENT"!=e.message&&t()})},800)}()}(this),this.a.push(e)},e.ca=function(e){F(this.a,function(t){return t==e}),0==this.a.length&&Ms(this)},(e=Fs.prototype).get=function(e){return this.b.then(function(t){return t.get(e)})},e.set=function(e,t){return this.b.then(function(n){return n.set(e,t)})},e.P=function(e){return this.b.then(function(t){return t.P(e)})},e.Y=function(e){this.a.push(e)},e.ca=function(e){F(this.a,function(t){return t==e})},(e=Us.prototype).get=function(e){return _e(this.a[e])},e.set=function(e,t){return this.a[e]=t,_e()},e.P=function(e){return delete this.a[e],_e()},e.Y=function(){},e.ca=function(){},(e=zs.prototype).get=function(e){var t=this;return _e().then(function(){return br(t.a.getItem(e))})},e.set=function(e,t){var n=this;return _e().then(function(){var r=mr(t);null===r?n.P(e):n.a.setItem(e,r)})},e.P=function(e){var t=this;return _e().then(function(){t.a.removeItem(e)})},e.Y=function(e){n.window&&yt(n.window,"storage",e)},e.ca=function(e){n.window&&_t(n.window,"storage",e)},(e=Vs.prototype).get=function(){return _e(null)},e.set=function(){return _e()},e.P=function(){return _e()},e.Y=function(){},e.ca=function(){},(e=Bs.prototype).get=function(e){var t=this;return _e().then(function(){return br(t.a.getItem(e))})},e.set=function(e,t){var n=this;return _e().then(function(){var r=mr(t);null===r?n.P(e):n.a.setItem(e,r)})},e.P=function(e){var t=this;return _e().then(function(){t.a.removeItem(e)})},e.Y=function(){},e.ca=function(){};var Qs,Ks,Gs={A:zs,Ra:Bs},$s={A:zs,Ra:Bs},Ys={A:ws,Ra:Vs},Xs={A:zs,Ra:Vs},Js={Zc:"local",NONE:"none",ad:"session"};function Zs(){var e=!(yr(lr())||!Zn()),t=hr(),r=ur();this.o=e,this.h=t,this.l=r,this.a={},Qs||(Qs=new Hs),e=Qs;try{this.g=!Bn()&&Er()||!n.indexedDB?new e.a.A:new Fs(er()?new Us:new e.a.A)}catch(e){this.g=new Us,this.h=!0}try{this.i=new e.a.Ra}catch(e){this.i=new Us}this.m=new Us,this.f=b(this.Pb,this),this.b={}}function el(){return Ks||(Ks=new Zs),Ks}function tl(e,t){switch(t){case"session":return e.i;case"none":return e.m;default:return e.g}}function nl(e,t){return"firebase:"+e.name+(t?":"+t:"")}function rl(e,t,n){return n=nl(t,n),"local"==t.A&&(e.b[n]=null),tl(e,t.A).P(n)}function ol(e){e.c&&(clearInterval(e.c),e.c=null)}function il(e){this.a=e,this.b=el()}(e=Zs.prototype).get=function(e,t){return tl(this,e.A).get(nl(e,t))},e.set=function(e,t,n){var r=nl(e,n),o=this,i=tl(this,e.A);return i.set(r,t).then(function(){return i.get(r)}).then(function(t){"local"==e.A&&(o.b[r]=t)})},e.addListener=function(e,t,r){e=nl(e,t),this.l&&(this.b[e]=n.localStorage.getItem(e)),oe(this.a)&&(tl(this,"local").Y(this.f),this.h||(Bn()||!Er())&&n.indexedDB||!this.l||function(e){ol(e),e.c=setInterval(function(){for(var t in e.a){var r=n.localStorage.getItem(t),o=e.b[t];r!=o&&(e.b[t]=r,r=new lt({type:"storage",key:t,target:window,oldValue:o,newValue:r,a:!0}),e.Pb(r))}},1e3)}(this)),this.a[e]||(this.a[e]=[]),this.a[e].push(r)},e.removeListener=function(e,t,n){e=nl(e,t),this.a[e]&&(F(this.a[e],function(e){return e==n}),0==this.a[e].length&&delete this.a[e]),oe(this.a)&&(tl(this,"local").ca(this.f),ol(this))},e.Pb=function(e){if(e&&e.f){var t=e.a.key;if(null==t)for(var r in this.a){var o=this.b[r];void 0===o&&(o=null);var i=n.localStorage.getItem(r);i!==o&&(this.b[r]=i,this.Xa(r))}else if(0==t.indexOf("firebase:")&&this.a[t]){if(void 0!==e.a.a?tl(this,"local").ca(this.f):ol(this),this.o)if(r=n.localStorage.getItem(t),(o=e.a.newValue)!==r)null!==o?n.localStorage.setItem(t,o):n.localStorage.removeItem(t);else if(this.b[t]===o&&void 0===e.a.a)return;var a=this;r=function(){void 0===e.a.a&&a.b[t]===n.localStorage.getItem(t)||(a.b[t]=n.localStorage.getItem(t),a.Xa(t))},qe&&Ze&&10==Ze&&n.localStorage.getItem(t)!==e.a.newValue&&e.a.newValue!==e.a.oldValue?setTimeout(r,10):r()}}else R(e,b(this.Xa,this))},e.Xa=function(e){this.a[e]&&R(this.a[e],function(e){e()})};var al,sl={name:"authEvent",A:"local"};function ll(){this.a=el()}function cl(e,t){this.b=ul,this.f=n.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=e,this.h=t,this.l=n.Int32Array?new Int32Array(64):Array(64),void 0!==al||(al=n.Int32Array?new Int32Array(bl):bl),this.reset()}w(cl,function(){this.b=-1});for(var ul=64,dl=ul-1,pl=[],fl=0;fl<dl;fl++)pl[fl]=0;var hl=U(128,pl);function ml(e){for(var t=e.f,n=e.l,r=0,o=0;o<t.length;)n[r++]=t[o]<<24|t[o+1]<<16|t[o+2]<<8|t[o+3],o=4*r;for(t=16;64>t;t++){o=0|n[t-15],r=0|n[t-2];var i=(0|n[t-16])+((o>>>7|o<<25)^(o>>>18|o<<14)^o>>>3)|0,a=(0|n[t-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[t]=i+a|0}r=0|e.a[0],o=0|e.a[1];var s=0|e.a[2],l=0|e.a[3],c=0|e.a[4],u=0|e.a[5],d=0|e.a[6];for(i=0|e.a[7],t=0;64>t;t++){var p=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&o^r&s^o&s)|0;a=(i=i+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&u^~c&d)+(0|al[t])|0)+(0|n[t])|0)|0,i=d,d=u,u=c,c=l+a|0,l=s,s=o,o=r,r=a+p|0}e.a[0]=e.a[0]+r|0,e.a[1]=e.a[1]+o|0,e.a[2]=e.a[2]+s|0,e.a[3]=e.a[3]+l|0,e.a[4]=e.a[4]+c|0,e.a[5]=e.a[5]+u|0,e.a[6]=e.a[6]+d|0,e.a[7]=e.a[7]+i|0}function gl(e,t,n){void 0===n&&(n=t.length);var r=0,i=e.c;if(o(t))for(;r<n;)e.f[i++]=t.charCodeAt(r++),i==e.b&&(ml(e),i=0);else{if(!u(t))throw Error("message must be string or array");for(;r<n;){var a=t[r++];if(!("number"==typeof a&&0<=a&&255>=a&&a==(0|a)))throw Error("message must be a byte array");e.f[i++]=a,i==e.b&&(ml(e),i=0)}}e.c=i,e.g+=n}cl.prototype.reset=function(){this.g=this.c=0,this.a=n.Int32Array?new Int32Array(this.h):z(this.h)};var bl=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function vl(){cl.call(this,8,yl)}w(vl,cl);var yl=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function wl(e,t,n,r,o){this.m=e,this.i=t,this.l=n,this.o=r||null,this.u=o||null,this.h=t+":"+n,this.v=new ll,this.g=new il(this.h),this.f=null,this.b=[],this.a=this.c=null}function xl(e){return new Vr("invalid-cordova-configuration",e)}function _l(e){var t=new vl;gl(t,e),e=[];var n=8*t.g;56>t.c?gl(t,hl,56-t.c):gl(t,hl,t.b-(t.c-56));for(var r=63;56<=r;r--)t.f[r]=255&n,n/=256;for(ml(t),r=n=0;r<t.i;r++)for(var o=24;0<=o;o-=8)e[n++]=t.a[r]>>o&255;return function(e){return D(e,function(e){return 1<(e=e.toString(16)).length?e:"0"+e}).join("")}(e)}function kl(e,t){for(var n=0;n<e.b.length;n++)try{e.b[n](t)}catch(e){}}function El(e){return e.f||(e.f=e.ga().then(function(){return new me(function(t){e.wa(function n(r){return t(r),e.Ka(n),!1}),function(e){function t(t){o=!0,i&&i.cancel(),Cl(e).then(function(n){var o=r;if(n&&t&&t.url){var i=null;-1!=(o=So(t.url)).indexOf("/__/auth/callback")&&(i=(i="object"==typeof(i=br(Gt(i=$t(o),"firebaseError")||null))?Br(i):null)?new ei(n.b,n.c,null,null,i):new ei(n.b,n.c,o,n.g)),o=i||r}kl(e,o)})}var r=new ei("unknown",null,null,null,new Vr("no-auth-event")),o=!1,i=jt(500).then(function(){return Cl(e).then(function(){o||kl(e,r)})}),a=n.handleOpenURL;n.handleOpenURL=function(e){if(0==e.toLowerCase().indexOf(cr("BuildInfo.packageName",n).toLowerCase()+"://")&&t({url:e}),"function"==typeof a)try{a(e)}catch(e){console.error(e)}},oi||(oi=new ni),oi.subscribe(t)}(e)})})),e.f}function Cl(e){var t=null;return function(e){return e.b.get(sl,e.a).then(function(e){return ti(e)})}(e.g).then(function(n){return t=n,rl((n=e.g).b,sl,n.a)}).then(function(){return t})}function Tl(e){this.a=e,this.b=el()}(e=wl.prototype).ga=function(){return this.za?this.za:this.za=(Jn(void 0)?Xn().then(function(){return new me(function(e,t){var r=n.document,o=setTimeout(function(){t(Error("Cordova framework is not ready."))},1e3);r.addEventListener("deviceready",function(){clearTimeout(o),e()},!1)})}):ke(Error("Cordova must run in an Android or iOS file scheme."))).then(function(){if("function"!=typeof cr("universalLinks.subscribe",n))throw xl("cordova-universal-links-plugin-fix is not installed");if(void 0===cr("BuildInfo.packageName",n))throw xl("cordova-plugin-buildinfo is not installed");if("function"!=typeof cr("cordova.plugins.browsertab.openUrl",n))throw xl("cordova-plugin-browsertab is not installed");if("function"!=typeof cr("cordova.InAppBrowser.open",n))throw xl("cordova-plugin-inappbrowser is not installed")},function(){throw new Vr("cordova-not-ready")})},e.Ea=function(e,t){return t(new Vr("operation-not-supported-in-this-environment")),_e()},e.Cb=function(){return ke(new Vr("operation-not-supported-in-this-environment"))},e.Qb=function(){return!1},e.Mb=function(){return!0},e.Hb=function(){return!0},e.Ca=function(e,t,r){if(this.c)return ke(new Vr("redirect-operation-pending"));var o=this,i=n.document,a=null,s=null,l=null,c=null;return this.c=_e().then(function(){return Zo(t),El(o)}).then(function(){return function(e,t,r,o){var i=function(){for(var e=20,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}(),a=new ei(t,o,null,i,new Vr("no-auth-event")),s=cr("BuildInfo.packageName",n);if("string"!=typeof s)throw new Vr("invalid-cordova-configuration");var l=cr("BuildInfo.displayName",n),c={};if(lr().toLowerCase().match(/iphone|ipad|ipod/))c.ibi=s;else{if(!lr().toLowerCase().match(/android/))return ke(new Vr("operation-not-supported-in-this-environment"));c.apn=s}l&&(c.appDisplayName=l),i=_l(i),c.sessionId=i;var u=ys(e.m,e.i,e.l,t,r,null,o,e.o,c,e.u);return e.ga().then(function(){var t=e.h;return e.v.a.set(sl,a.C(),t)}).then(function(){var t=cr("cordova.plugins.browsertab.isAvailable",n);if("function"!=typeof t)throw new Vr("invalid-cordova-configuration");var r=null;t(function(t){if(t){if("function"!=typeof(r=cr("cordova.plugins.browsertab.openUrl",n)))throw new Vr("invalid-cordova-configuration");r(u)}else{if("function"!=typeof(r=cr("cordova.InAppBrowser.open",n)))throw new Vr("invalid-cordova-configuration");t=!(!(t=lr()).match(/(iPad|iPhone|iPod).*OS 7_\d/i)&&!t.match(/(iPad|iPhone|iPod).*OS 8_\d/i)),e.a=r(u,t?"_blank":"_system","location=yes")}})})}(o,e,t,r)}).then(function(){return new me(function(e,t){s=function(){var t=cr("cordova.plugins.browsertab.close",n);return e(),"function"==typeof t&&t(),o.a&&"function"==typeof o.a.close&&(o.a.close(),o.a=null),!1},o.wa(s),l=function(){a||(a=jt(2e3).then(function(){t(new Vr("redirect-cancelled-by-user"))}))},c=function(){_r()&&l()},i.addEventListener("resume",l,!1),lr().toLowerCase().match(/android/)||i.addEventListener("visibilitychange",c,!1)}).s(function(e){return Cl(o).then(function(){throw e})})}).ia(function(){l&&i.removeEventListener("resume",l,!1),c&&i.removeEventListener("visibilitychange",c,!1),a&&a.cancel(),s&&o.Ka(s),o.c=null})},e.wa=function(e){this.b.push(e),El(this).s(function(t){"auth/invalid-cordova-configuration"===t.code&&(t=new ei("unknown",null,null,null,new Vr("no-auth-event")),e(t))})},e.Ka=function(e){F(this.b,function(t){return t==e})};var Sl={name:"pendingRedirect",A:"session"};function Il(e){return rl(e.b,Sl,e.a)}function Nl(e,t,n){this.u=e,this.l=t,this.m=n,this.h=[],this.f=!1,this.i=b(this.bb,this),this.b=new Ul,this.o=new Bl,this.g=new Tl(this.l+":"+this.m),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.o,this.c.linkViaPopup=this.o,this.c.reauthViaPopup=this.o,this.a=Ol(this.u,this.l,this.m,co)}function Ol(e,t,n,o){var i=r.a.SDK_VERSION||null;return Jn()?new wl(e,t,n,i,o):new ms(e,t,n,i,o)}function Pl(e){e.f||(e.f=!0,e.a.wa(e.i));var t=e.a;return e.a.ga().s(function(n){throw e.a==t&&e.reset(),n})}function Al(e){e.a.Mb()&&Pl(e).s(function(t){var n=new ei("unknown",null,null,null,new Vr("operation-not-supported-in-this-environment"));jl(t)&&e.bb(n)}),e.a.Hb()||zl(e.b)}(e=Nl.prototype).reset=function(){this.f=!1,this.a.Ka(this.i),this.a=Ol(this.u,this.l,this.m)},e.Ya=function(){this.b.Ya()},e.subscribe=function(e){if(j(this.h,e)||this.h.push(e),!this.f){var t=this;(function(e){return e.b.get(Sl,e.a).then(function(e){return"pending"==e})})(this.g).then(function(e){e?Il(t.g).then(function(){Pl(t).s(function(e){var n=new ei("unknown",null,null,null,new Vr("operation-not-supported-in-this-environment"));jl(e)&&t.bb(n)})}):Al(t)}).s(function(){Al(t)})}},e.unsubscribe=function(e){F(this.h,function(t){return t==e})},e.bb=function(e){if(!e)throw new Vr("invalid-auth-event");for(var t=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.vb(e.b,e.c)){(t=this.c[e.b])&&t.h(e,r),t=!0;break}}return zl(this.b),t};var Rl=new xr(2e3,1e4),Dl=new xr(3e4,6e4);function Ll(e,t,n,r,o,i){return e.a.Cb(t,n,r,function(){e.f||(e.f=!0,e.a.wa(e.i))},function(){e.reset()},o,i)}function jl(e){return!(!e||"auth/cordova-not-ready"!=e.code)}Nl.prototype.fa=function(){return this.b.fa()},Nl.prototype.Ca=function(e,t,n){var r,o=this;return function(e){return e.b.set(Sl,"pending",e.a)}(this.g).then(function(){return o.a.Ca(e,t,n).s(function(e){if(jl(e))throw new Vr("operation-not-supported-in-this-environment");return r=e,Il(o.g).then(function(){throw r})}).then(function(){return o.a.Qb()?new me(function(){}):Il(o.g).then(function(){return o.fa()}).then(function(){}).s(function(){})})})},Nl.prototype.Ea=function(e,t,n,r){return this.a.Ea(n,function(n){e.ha(t,null,n,r)},Rl.get())};var Ml={};function Fl(e,t,n){var r=t+":"+n;return Ml[r]||(Ml[r]=new Nl(e,t,n)),Ml[r]}function Ul(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function zl(e){e.g||(e.g=!0,Vl(e,!1,null,null))}function Wl(e,t){if(e.b=function(){return _e(t)},e.f.length)for(var n=0;n<e.f.length;n++)e.f[n](t)}function Vl(e,t,n,r){t?r?function(e,t){if(e.b=function(){return ke(t)},e.c.length)for(var n=0;n<e.c.length;n++)e.c[n](t)}(e,r):Wl(e,n):Wl(e,{user:null}),e.f=[],e.c=[]}function Bl(){}function ql(){this.sb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.sb},set:function(e){this.sb=e},enumerable:!1})}function Hl(e,t){this.a=t,Nr(this,"verificationId",e)}function Ql(e,t,n,r){return new Yo(e).Ua(t,n).then(function(e){return new Hl(e,r)})}function Kl(e){var t=lo(e);if(!(t&&t.exp&&t.auth_time&&t.iat))throw new Vr("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");Or(this,{token:e,expirationTime:kr(1e3*t.exp),authTime:kr(1e3*t.auth_time),issuedAtTime:kr(1e3*t.iat),signInProvider:t.firebase&&t.firebase.sign_in_provider?t.firebase.sign_in_provider:null,claims:t})}function Gl(e,t,n){if(this.h=e,this.i=t,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function $l(e){this.f=e,this.b=this.a=null,this.c=0}function Yl(e,t){var n=t[ca],r=t.refreshToken;t=Xl(t.expiresIn),e.b=n,e.c=t,e.a=r}function Xl(e){return y()+1e3*parseInt(e,10)}function Jl(e,t){return function(e,t){return new me(function(n,r){"refresh_token"==t.grant_type&&t.refresh_token||"authorization_code"==t.grant_type&&t.code?ga(e,e.i+"?key="+encodeURIComponent(e.b),function(e){e?e.error?r(as(e)):e.access_token&&e.refresh_token?n(e):r(new Vr("internal-error")):r(new Vr("network-request-failed"))},"POST",ln(t).toString(),e.f,e.l.get()):r(new Vr("internal-error"))})}(e.f,t).then(function(t){return e.b=t.access_token,e.c=Xl(t.expires_in),e.a=t.refresh_token,{accessToken:e.b,expirationTime:e.c,refreshToken:e.a}}).s(function(t){throw"auth/user-token-expired"==t.code&&(e.a=null),t})}function Zl(e,t){this.a=e||null,this.b=t||null,Or(this,{lastSignInTime:kr(t||null),creationTime:kr(e||null)})}function ec(e,t,n,r,o,i){Or(this,{uid:e,displayName:r||null,photoURL:o||null,email:n||null,phoneNumber:i||null,providerId:t})}function tc(e,t){for(var n in st.call(this,e),t)this[n]=t[n]}function nc(e,t,n){this.G=[],this.m=e.apiKey,this.o=e.appName,this.u=e.authDomain||null,e=r.a.SDK_VERSION?sr(r.a.SDK_VERSION):null,this.b=new sa(this.m,po(co),e),this.h=new $l(this.b),cc(this,t[ca]),Yl(this.h,t),Nr(this,"refreshToken",this.h.a),pc(this,n||{}),Pt.call(this),this.I=!1,this.u&&dr()&&(this.a=Fl(this.u,this.m,this.o)),this.N=[],this.i=null,this.w=function(e){return new Gl(function(){return e.F(!0)},function(e){return!(!e||"auth/network-request-failed"!=e.code)},function(){var t=e.h.c-y()-3e5;return 0<t?t:0})}(this),this.V=b(this.Ha,this);var o=this;this.ka=null,this.ta=function(e){o.pa(e.g)},this.X=null,this.O=[],this.sa=function(e){oc(o,e.c)},this.W=null}function rc(e,t){e.X&&_t(e.X,"languageCodeChanged",e.ta),(e.X=t)&&yt(t,"languageCodeChanged",e.ta)}function oc(e,t){e.O=t,ma(e.b,r.a.SDK_VERSION?sr(r.a.SDK_VERSION,e.O):null)}function ic(e,t){e.W&&_t(e.W,"frameworkChanged",e.sa),(e.W=t)&&yt(t,"frameworkChanged",e.sa)}function ac(e){try{return r.a.app(e.o).auth()}catch(t){throw new Vr("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+e.o+"'!")}}function sc(e){e.D||e.w.b||(e.w.start(),_t(e,"tokenChanged",e.V),yt(e,"tokenChanged",e.V))}function lc(e){_t(e,"tokenChanged",e.V),e.w.stop()}function cc(e,t){e.ra=t,Nr(e,"_lat",t)}function uc(e){for(var t=[],n=0;n<e.N.length;n++)t.push(e.N[n](e));return Ce(t).then(function(){return e})}function dc(e){e.a&&!e.I&&(e.I=!0,e.a.subscribe(e))}function pc(e,t){Or(e,{uid:t.uid,displayName:t.displayName||null,photoURL:t.photoURL||null,email:t.email||null,emailVerified:t.emailVerified||!1,phoneNumber:t.phoneNumber||null,isAnonymous:t.isAnonymous||!1,metadata:new Zl(t.createdAt,t.lastLoginAt),providerData:[]})}function fc(){}function hc(e){return _e().then(function(){if(e.D)throw new Vr("app-deleted")})}function mc(e){return D(e.providerData,function(e){return e.providerId})}function gc(e,t){t&&(bc(e,t.providerId),e.providerData.push(t))}function bc(e,t){F(e.providerData,function(e){return e.providerId==t})}function vc(e,t,n){("uid"!=t||n)&&e.hasOwnProperty(t)&&Nr(e,t,n)}function yc(e,t){e!=t&&(Or(e,{uid:t.uid,displayName:t.displayName,photoURL:t.photoURL,email:t.email,emailVerified:t.emailVerified,phoneNumber:t.phoneNumber,isAnonymous:t.isAnonymous,providerData:[]}),t.metadata?Nr(e,"metadata",function(e){return new Zl(e.a,e.b)}(t.metadata)):Nr(e,"metadata",new Zl),R(t.providerData,function(t){gc(e,t)}),function(e,t){e.b=t.b,e.a=t.a,e.c=t.c}(e.h,t.h),Nr(e,"refreshToken",e.h.a))}function wc(e){return e.F().then(function(t){var n=e.isAnonymous;return function(e,t){return os(e.b,Ua,{idToken:t}).then(b(e.xc,e))}(e,t).then(function(){return n||vc(e,"isAnonymous",!1),t})})}function xc(e,t){t[ca]&&e.ra!=t[ca]&&(Yl(e.h,t),e.dispatchEvent(new tc("tokenChanged")),cc(e,t[ca]),vc(e,"refreshToken",e.h.a))}function _c(e,t){return wc(e).then(function(){if(j(mc(e),t))return uc(e).then(function(){throw new Vr("provider-already-linked")})})}function kc(e,t,n){return Pr({user:e,credential:Jo(t),additionalUserInfo:t=bo(t),operationType:n})}function Ec(e,t){return xc(e,t),e.reload().then(function(){return e})}function Cc(e,t,n,o,i){if(!dr())return ke(new Vr("operation-not-supported-in-this-environment"));if(e.i&&!i)return ke(e.i);var a=go(n.providerId),s=vr(e.uid+":::"),l=null;(!hr()||Zn())&&e.u&&n.isOAuthProvider&&(l=ys(e.u,e.m,e.o,t,n,null,s,r.a.SDK_VERSION||null));var c=Gn(l,a&&a.Ba,a&&a.Aa);return o=o().then(function(){if(Sc(e),!i)return e.F().then(function(){})}).then(function(){return Ll(e.a,c,t,n,s,!!l)}).then(function(){return new me(function(n,r){e.ha(t,null,new Vr("cancelled-popup-request"),e.g||null),e.f=n,e.v=r,e.g=s,e.c=e.a.Ea(e,t,c,s)})}).then(function(e){return c&&Kn(c),e?Pr(e):null}).s(function(e){throw c&&Kn(c),e}),Ic(e,o,i)}function Tc(e,t,n,r,o){if(!dr())return ke(new Vr("operation-not-supported-in-this-environment"));if(e.i&&!o)return ke(e.i);var i=null,a=vr(e.uid+":::");return r=r().then(function(){if(Sc(e),!o)return e.F().then(function(){})}).then(function(){return e.aa=a,uc(e)}).then(function(t){return e.ba&&(t=(t=e.ba).b.set(Pc,e.C(),t.a)),t}).then(function(){return e.a.Ca(t,n,a)}).s(function(t){if(i=t,e.ba)return Ac(e.ba);throw i}).then(function(){if(i)throw i}),Ic(e,r,o)}function Sc(e){if(!e.a||!e.I){if(e.a&&!e.I)throw new Vr("internal-error");throw new Vr("auth-domain-config-required")}}function Ic(e,t,n){var r=function(e,t,n){return e.i&&!n?(t.cancel(),ke(e.i)):t.s(function(t){throw!t||"auth/user-disabled"!=t.code&&"auth/user-token-expired"!=t.code||(e.i||e.dispatchEvent(new tc("userInvalidated")),e.i=t),t})}(e,t,n);return e.G.push(r),r.ia(function(){M(e.G,r)}),r}function Nc(e){if(!e.apiKey)return null;var t={apiKey:e.apiKey,authDomain:e.authDomain,appName:e.appName},n={};if(!(e.stsTokenManager&&e.stsTokenManager.accessToken&&e.stsTokenManager.expirationTime))return null;n[ca]=e.stsTokenManager.accessToken,n.refreshToken=e.stsTokenManager.refreshToken||null,n.expiresIn=(e.stsTokenManager.expirationTime-y())/1e3;var r=new nc(t,n,e);return e.providerData&&R(e.providerData,function(e){e&&gc(r,Pr(e))}),e.redirectEventId&&(r.aa=e.redirectEventId),r}function Oc(e){this.a=e,this.b=el()}Ul.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},Ul.prototype.h=function(e,t){if(e){this.reset(),this.g=!0;var n=e.b,r=e.c,o=e.a&&"auth/web-storage-unsupported"==e.a.code,i=e.a&&"auth/operation-not-supported-in-this-environment"==e.a.code;this.i=!(!o&&!i),"unknown"!=n||o||i?e.a?(Vl(this,!0,null,e.a),_e()):t.xa(n,r)?function(e,t,n){n=n.xa(t.b,t.c);var r=t.f,o=t.g,i=t.h,a=!!t.b.match(/Redirect$/);n(r,o,i).then(function(t){Vl(e,a,t,null)}).s(function(t){Vl(e,a,null,t)})}(this,e,t):ke(new Vr("invalid-auth-event")):(Vl(this,!1,null,null),_e())}else ke(new Vr("invalid-auth-event"))},Ul.prototype.Ya=function(){this.g&&!this.i&&Vl(this,!1,null,null)},Ul.prototype.fa=function(){var e=this;return new me(function(t,n){e.b?e.b().then(t,n):(e.f.push(t),e.c.push(n),function(e){var t=new Vr("timeout");e.a&&e.a.cancel(),e.a=jt(Dl.get()).then(function(){e.b||(e.g=!0,Vl(e,!0,null,t))})}(e))})},Bl.prototype.h=function(e,t){if(e){var n=e.b,r=e.c;e.a?(t.ha(e.b,null,e.a,e.c),_e()):t.xa(n,r)?function(e,t){var n=e.c,r=e.b;t.xa(r,n)(e.f,e.g,e.h).then(function(e){t.ha(r,e,null,n)}).s(function(e){t.ha(r,null,e,n)})}(e,t):ke(new Vr("invalid-auth-event"))}else ke(new Vr("invalid-auth-event"))},Hl.prototype.confirm=function(e){return e=Xo(this.verificationId,e),this.a(e)},Gl.prototype.start=function(){this.a=this.c,function e(t,r){t.stop();t.b=jt(function(e,t){return t?(e.a=e.c,e.g()):(t=e.a,e.a*=2,e.a>e.f&&(e.a=e.f),t)}(t,r)).then(function(){return e=n.document,t=null,_r()||!e?_e():new me(function(n){t=function(){_r()&&(e.removeEventListener("visibilitychange",t,!1),n())},e.addEventListener("visibilitychange",t,!1)}).s(function(n){throw e.removeEventListener("visibilitychange",t,!1),n});var e,t}).then(function(){return t.h()}).then(function(){e(t,!0)}).s(function(n){t.i(n)&&e(t,!1)})}(this,!0)},Gl.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},$l.prototype.C=function(){return{apiKey:this.f.b,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}},$l.prototype.getToken=function(e){return e=!!e,this.b&&!this.a?ke(new Vr("user-token-expired")):e||!this.b||y()>this.c-3e4?this.a?Jl(this,{grant_type:"refresh_token",refresh_token:this.a}):_e(null):_e({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})},Zl.prototype.C=function(){return{lastLoginAt:this.b,createdAt:this.a}},w(tc,st),w(nc,Pt),nc.prototype.pa=function(e){this.ka=e,ha(this.b,e)},nc.prototype.ea=function(){return this.ka},nc.prototype.ya=function(){return z(this.O)},nc.prototype.Ha=function(){this.w.b&&(this.w.stop(),this.w.start())},Nr(nc.prototype,"providerId","firebase"),(e=nc.prototype).reload=function(){var e=this;return Ic(this,hc(this).then(function(){return wc(e).then(function(){return uc(e)}).then(fc)}))},e.dc=function(e){return this.F(e).then(function(e){return new Kl(e)})},e.F=function(e){var t=this;return Ic(this,hc(this).then(function(){return t.h.getToken(e)}).then(function(e){if(!e)throw new Vr("internal-error");return e.accessToken!=t.ra&&(cc(t,e.accessToken),t.dispatchEvent(new tc("tokenChanged"))),vc(t,"refreshToken",e.refreshToken),e.accessToken}))},e.xc=function(e){if(!(e=e.users)||!e.length)throw new Vr("internal-error");pc(this,{uid:(e=e[0]).localId,displayName:e.displayName,photoURL:e.photoUrl,email:e.email,emailVerified:!!e.emailVerified,phoneNumber:e.phoneNumber,lastLoginAt:e.lastLoginAt,createdAt:e.createdAt});for(var t=function(e){return(e=e.providerUserInfo)&&e.length?D(e,function(e){return new ec(e.rawId,e.providerId,e.email,e.displayName,e.photoUrl,e.phoneNumber)}):[]}(e),n=0;n<t.length;n++)gc(this,t[n]);vc(this,"isAnonymous",!(this.email&&e.passwordHash||this.providerData&&this.providerData.length))},e.gb=function(e){var t=this,n=null;return Ic(this,e.f(this.b,this.uid).then(function(e){return xc(t,e),n=kc(t,e,"reauthenticate"),t.i=null,t.reload()}).then(function(){return n}),!0)},e.yc=function(e){return Sr("firebase.User.prototype.reauthenticateWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential instead."),this.gb(e).then(function(){})},e.eb=function(e){var t=this,n=null;return Ic(this,_c(this,e.providerId).then(function(){return t.F()}).then(function(n){return e.b(t.b,n)}).then(function(e){return n=kc(t,e,"link"),Ec(t,e)}).then(function(){return n}))},e.pc=function(e){return Sr("firebase.User.prototype.linkWithCredential is deprecated. Please use firebase.User.prototype.linkAndRetrieveDataWithCredential instead."),this.eb(e).then(function(e){return e.user})},e.qc=function(e,t){var n=this;return Ic(this,_c(this,"phone").then(function(){return Ql(ac(n),e,t,b(n.eb,n))}))},e.zc=function(e,t){var n=this;return Ic(this,_e().then(function(){return Ql(ac(n),e,t,b(n.gb,n))}),!0)},e.pb=function(e){var t=this;return Ic(this,this.F().then(function(n){return t.b.pb(n,e)}).then(function(e){return xc(t,e),t.reload()}))},e.Rc=function(e){var t=this;return Ic(this,this.F().then(function(n){return e.b(t.b,n)}).then(function(e){return xc(t,e),t.reload()}))},e.qb=function(e){var t=this;return Ic(this,this.F().then(function(n){return t.b.qb(n,e)}).then(function(e){return xc(t,e),t.reload()}))},e.rb=function(e){if(void 0===e.displayName&&void 0===e.photoURL)return hc(this);var t=this;return Ic(this,this.F().then(function(n){return t.b.rb(n,{displayName:e.displayName,photoUrl:e.photoURL})}).then(function(e){return xc(t,e),vc(t,"displayName",e.displayName||null),vc(t,"photoURL",e.photoUrl||null),R(t.providerData,function(e){"password"===e.providerId&&(Nr(e,"displayName",t.displayName),Nr(e,"photoURL",t.photoURL))}),uc(t)}).then(fc))},e.Pc=function(e){var t=this;return Ic(this,wc(this).then(function(n){return j(mc(t),e)?function(e,t,n){return os(e,ja,{idToken:t,deleteProvider:n})}(t.b,n,[e]).then(function(e){var n={};return R(e.providerUserInfo||[],function(e){n[e.providerId]=!0}),R(mc(t),function(e){n[e]||bc(t,e)}),n[Yo.PROVIDER_ID]||Nr(t,"phoneNumber",null),uc(t)}):uc(t).then(function(){throw new Vr("no-such-provider")})}))},e.delete=function(){var e=this;return Ic(this,this.F().then(function(t){return os(e.b,La,{idToken:t})}).then(function(){e.dispatchEvent(new tc("userDeleted"))})).then(function(){for(var t=0;t<e.G.length;t++)e.G[t].cancel("app-deleted");rc(e,null),ic(e,null),e.G=[],e.D=!0,lc(e),Nr(e,"refreshToken",null),e.a&&e.a.unsubscribe(e)})},e.vb=function(e,t){return!!("linkViaPopup"==e&&(this.g||null)==t&&this.f||"reauthViaPopup"==e&&(this.g||null)==t&&this.f||"linkViaRedirect"==e&&(this.aa||null)==t||"reauthViaRedirect"==e&&(this.aa||null)==t)},e.ha=function(e,t,n,r){"linkViaPopup"!=e&&"reauthViaPopup"!=e||r!=(this.g||null)||(n&&this.v?this.v(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},e.xa=function(e,t){return"linkViaPopup"==e&&t==(this.g||null)?b(this.Ab,this):"reauthViaPopup"==e&&t==(this.g||null)?b(this.Bb,this):"linkViaRedirect"==e&&(this.aa||null)==t?b(this.Ab,this):"reauthViaRedirect"==e&&(this.aa||null)==t?b(this.Bb,this):null},e.rc=function(e){var t=this;return Cc(this,"linkViaPopup",e,function(){return _c(t,e.providerId).then(function(){return uc(t)})},!1)},e.Ac=function(e){return Cc(this,"reauthViaPopup",e,function(){return _e()},!0)},e.sc=function(e){var t=this;return Tc(this,"linkViaRedirect",e,function(){return _c(t,e.providerId)},!1)},e.Bc=function(e){return Tc(this,"reauthViaRedirect",e,function(){return _e()},!0)},e.Ab=function(e,t,n){var r=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Ic(this,this.F().then(function(o){return Ia(r.b,{requestUri:e,postBody:n,sessionId:t,idToken:o})}).then(function(e){return o=kc(r,e,"link"),Ec(r,e)}).then(function(){return o}))},e.Bb=function(e,t,n){var r=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Ic(this,_e().then(function(){return Io(Na(r.b,{requestUri:e,sessionId:t,postBody:n}),r.uid)}).then(function(e){return o=kc(r,e,"reauthenticate"),xc(r,e),r.i=null,r.reload()}).then(function(){return o}),!0)},e.jb=function(e){var t=this,n=null;return Ic(this,this.F().then(function(t){return n=t,void 0===e||oe(e)?{}:no(new Qr(e))}).then(function(e){return t.b.jb(n,e)}).then(function(e){if(t.email!=e)return t.reload()}).then(function(){}))},e.toJSON=function(){return this.C()},e.C=function(){var e={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,providerData:[],apiKey:this.m,appName:this.o,authDomain:this.u,stsTokenManager:this.h.C(),redirectEventId:this.aa||null};return this.metadata&&ce(e,this.metadata.C()),R(this.providerData,function(t){e.providerData.push(function(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n}(t))}),e};var Pc={name:"redirectUser",A:"session"};function Ac(e){return rl(e.b,Pc,e.a)}function Rc(e){this.a=e,this.b=el(),this.c=null,this.f=function(e){var t=jc("local"),r=jc("session"),o=jc("none");return function(e,t,r){var o=nl(t,r),i=tl(e,t.A);return e.get(t,r).then(function(a){var s=null;try{s=br(n.localStorage.getItem(o))}catch(e){}if(s&&!a)return n.localStorage.removeItem(o),e.set(t,s,r);s&&a&&"localStorage"!=i.type&&n.localStorage.removeItem(o)})}(e.b,t,e.a).then(function(){return e.b.get(r,e.a)}).then(function(n){return n?r:e.b.get(o,e.a).then(function(n){return n?o:e.b.get(t,e.a).then(function(n){return n?t:e.b.get(Lc,e.a).then(function(e){return e?jc(e):t})})})}).then(function(t){return e.c=t,Dc(e,t.A)}).s(function(){e.c||(e.c=t)})}(this),this.b.addListener(jc("local"),this.a,b(this.g,this))}function Dc(e,t){var n,r=[];for(n in Js)Js[n]!==t&&r.push(rl(e.b,jc(Js[n]),e.a));return r.push(rl(e.b,Lc,e.a)),function(e){return new me(function(t,n){var r=e.length,o=[];if(r)for(var i=function(e,n){r--,o[e]=n,0==r&&t(o)},a=function(e){n(e)},s=0;s<e.length;s++)Ee(e[s],v(i,s),a);else t(o)})}(r)}Rc.prototype.g=function(){var e=this,t=jc("local");zc(this,function(){return _e().then(function(){return e.c&&"local"!=e.c.A?e.b.get(t,e.a):null}).then(function(n){if(n)return Dc(e,"local").then(function(){e.c=t})})})};var Lc={name:"persistence",A:"session"};function jc(e){return{name:"authUser",A:e}}function Mc(e,t){return zc(e,function(){return e.b.set(e.c,t.C(),e.a)})}function Fc(e){return zc(e,function(){return rl(e.b,e.c,e.a)})}function Uc(e,t){return zc(e,function(){return e.b.get(e.c,e.a).then(function(e){return e&&t&&(e.authDomain=t),Nc(e||{})})})}function zc(e,t){return e.f=e.f.then(t,t),e.f}function Wc(e){if(this.m=!1,Nr(this,"settings",new ql),Nr(this,"app",e),!Gc(this).options||!Gc(this).options.apiKey)throw new Vr("invalid-api-key");e=r.a.SDK_VERSION?sr(r.a.SDK_VERSION):null,this.b=new sa(Gc(this).options&&Gc(this).options.apiKey,po(co),e),this.N=[],this.o=[],this.I=[],this.Tb=r.a.INTERNAL.createSubscribe(b(this.mc,this)),this.O=void 0,this.Ub=r.a.INTERNAL.createSubscribe(b(this.nc,this)),Qc(this,null),this.h=new Rc(Gc(this).options.apiKey+":"+Gc(this).name),this.w=new Oc(Gc(this).options.apiKey+":"+Gc(this).name),this.V=Jc(this,function(e){var t=Gc(e).options.authDomain,n=function(e){var t=function(e,t){return e.b.get(Pc,e.a).then(function(e){return e&&t&&(e.authDomain=t),Nc(e||{})})}(e.w,Gc(e).options.authDomain).then(function(t){return(e.D=t)&&(t.ba=e.w),Ac(e.w)});return Jc(e,t)}(e).then(function(){return Uc(e.h,t)}).then(function(t){return t?(t.ba=e.w,e.D&&(e.D.aa||null)==(t.aa||null)?t:t.reload().then(function(){return Mc(e.h,t).then(function(){return t})}).s(function(n){return"auth/network-request-failed"==n.code?t:Fc(e.h)})):null}).then(function(t){Qc(e,t||null)});return Jc(e,n)}(this)),this.i=Jc(this,function(e){return e.V.then(function(){return e.fa()}).s(function(){}).then(function(){if(!e.m)return e.ka()}).s(function(){}).then(function(){if(!e.m){e.X=!0;var t=e.h;t.b.addListener(jc("local"),t.a,e.ka)}})}(this)),this.X=!1,this.ka=b(this.Mc,this),this.Ha=b(this.Z,this),this.ra=b(this.bc,this),this.sa=b(this.jc,this),this.ta=b(this.kc,this),function(e){var t=Gc(e).options.authDomain,n=Gc(e).options.apiKey;t&&dr()&&(e.Sb=e.V.then(function(){if(!e.m){if(e.a=Fl(t,n,Gc(e).name),e.a.subscribe(e),$c(e)&&dc($c(e)),e.D){dc(e.D);var r=e.D;r.pa(e.ea()),rc(r,e),oc(r=e.D,e.G),ic(r,e),e.D=null}return e.a}}))}(this),this.INTERNAL={},this.INTERNAL.delete=b(this.delete,this),this.INTERNAL.logFramework=b(this.tc,this),this.u=0,Pt.call(this),function(e){Object.defineProperty(e,"lc",{get:function(){return this.ea()},set:function(e){this.pa(e)},enumerable:!1}),e.W=null}(this),this.G=[]}function Vc(e){st.call(this,"languageCodeChanged"),this.g=e}function Bc(e){st.call(this,"frameworkChanged"),this.c=e}function qc(e){return e.Sb||ke(new Vr("auth-domain-config-required"))}function Hc(e,t){var n={};return n.apiKey=Gc(e).options.apiKey,n.authDomain=Gc(e).options.authDomain,n.appName=Gc(e).name,e.V.then(function(){return function(e,t,n,r){var o=new nc(e,t);return n&&(o.ba=n),r&&oc(o,r),o.reload().then(function(){return o})}(n,t,e.w,e.ya())}).then(function(t){return $c(e)&&t.uid==$c(e).uid?(yc($c(e),t),e.Z(t)):(Qc(e,t),dc(t),e.Z(t))}).then(function(){Xc(e)})}function Qc(e,t){$c(e)&&(function(e,t){F(e.N,function(e){return e==t})}($c(e),e.Ha),_t($c(e),"tokenChanged",e.ra),_t($c(e),"userDeleted",e.sa),_t($c(e),"userInvalidated",e.ta),lc($c(e))),t&&(t.N.push(e.Ha),yt(t,"tokenChanged",e.ra),yt(t,"userDeleted",e.sa),yt(t,"userInvalidated",e.ta),0<e.u&&sc(t)),Nr(e,"currentUser",t),t&&(t.pa(e.ea()),rc(t,e),oc(t,e.G),ic(t,e))}function Kc(e,t){var n=null,r=null;return Jc(e,t.then(function(t){return n=Jo(t),r=bo(t),Hc(e,t)}).then(function(){return Pr({user:$c(e),credential:n,additionalUserInfo:r,operationType:"signIn"})}))}function Gc(e){return e.app}function $c(e){return e.currentUser}function Yc(e){return $c(e)&&$c(e)._lat||null}function Xc(e){if(e.X){for(var t=0;t<e.o.length;t++)e.o[t]&&e.o[t](Yc(e));if(e.O!==e.getUid()&&e.I.length)for(e.O=e.getUid(),t=0;t<e.I.length;t++)e.I[t]&&e.I[t](Yc(e))}}function Jc(e,t){return e.N.push(t),t.ia(function(){M(e.N,t)}),t}function Zc(){}function eu(){this.a={},this.b=1e12}Rc.prototype.mb=function(e){var t=null,n=this;return function(e){var t=new Vr("invalid-persistence-type"),n=new Vr("unsupported-persistence-type");e:{for(r in Js)if(Js[r]==e){var r=!0;break e}r=!1}if(!r||"string"!=typeof e)throw t;switch(tr()){case"ReactNative":if("session"===e)throw n;break;case"Node":if("none"!==e)throw n;break;default:if(!ur()&&"none"!==e)throw n}}(e),zc(this,function(){return e!=n.c.A?n.b.get(n.c,n.a).then(function(r){return t=r,Dc(n,e)}).then(function(){if(n.c=jc(e),t)return n.b.set(n.c,t,n.a)}):_e()})},w(Wc,Pt),w(Vc,st),w(Bc,st),(e=Wc.prototype).mb=function(e){return Jc(this,e=this.h.mb(e))},e.pa=function(e){this.W===e||this.m||(this.W=e,ha(this.b,this.W),this.dispatchEvent(new Vc(this.ea())))},e.ea=function(){return this.W},e.Sc=function(){var e=n.navigator;this.pa(e&&(e.languages&&e.languages[0]||e.language||e.userLanguage)||null)},e.tc=function(e){this.G.push(e),ma(this.b,r.a.SDK_VERSION?sr(r.a.SDK_VERSION,this.G):null),this.dispatchEvent(new Bc(this.G))},e.ya=function(){return z(this.G)},e.toJSON=function(){return{apiKey:Gc(this).options.apiKey,authDomain:Gc(this).options.authDomain,appName:Gc(this).name,currentUser:$c(this)&&$c(this).C()}},e.vb=function(e,t){switch(e){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==t&&!!this.f;default:return!1}},e.ha=function(e,t,n,r){"signInViaPopup"==e&&this.g==r&&(n&&this.v?this.v(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},e.xa=function(e,t){return"signInViaRedirect"==e||"signInViaPopup"==e&&this.g==t&&this.f?b(this.ac,this):null},e.ac=function(e,t,n){var r=this;e={requestUri:e,postBody:n,sessionId:t},this.c&&(this.c.cancel(),this.c=null);var o=null,i=null,a=Sa(r.b,e).then(function(e){return o=Jo(e),i=bo(e),e});return Jc(this,e=r.V.then(function(){return a}).then(function(e){return Hc(r,e)}).then(function(){return Pr({user:$c(r),credential:o,additionalUserInfo:i,operationType:"signIn"})}))},e.Kc=function(e){if(!dr())return ke(new Vr("operation-not-supported-in-this-environment"));var t=this,n=go(e.providerId),o=vr(),i=null;(!hr()||Zn())&&Gc(this).options.authDomain&&e.isOAuthProvider&&(i=ys(Gc(this).options.authDomain,Gc(this).options.apiKey,Gc(this).name,"signInViaPopup",e,null,o,r.a.SDK_VERSION||null));var a=Gn(i,n&&n.Ba,n&&n.Aa);return Jc(this,n=qc(this).then(function(t){return Ll(t,a,"signInViaPopup",e,o,!!i)}).then(function(){return new me(function(e,n){t.ha("signInViaPopup",null,new Vr("cancelled-popup-request"),t.g),t.f=e,t.v=n,t.g=o,t.c=t.a.Ea(t,"signInViaPopup",a,o)})}).then(function(e){return a&&Kn(a),e?Pr(e):null}).s(function(e){throw a&&Kn(a),e}))},e.Lc=function(e){if(!dr())return ke(new Vr("operation-not-supported-in-this-environment"));var t=this;return Jc(this,qc(this).then(function(){return zc(e=t.h,function(){return e.b.set(Lc,e.c.A,e.a)});var e}).then(function(){return t.a.Ca("signInViaRedirect",e)}))},e.fa=function(){if(!dr())return ke(new Vr("operation-not-supported-in-this-environment"));var e=this;return Jc(this,qc(this).then(function(){return e.a.fa()}).then(function(e){return e?Pr(e):null}))},e.Qc=function(e){if(!e)return ke(new Vr("null-user"));var t=this,n={};n.apiKey=Gc(this).options.apiKey,n.authDomain=Gc(this).options.authDomain,n.appName=Gc(this).name;var r=function(e,t,n,r){t=t||{apiKey:e.m,authDomain:e.u,appName:e.o};var o=e.h,i={};return i[ca]=o.b,i.refreshToken=o.a,i.expiresIn=(o.c-y())/1e3,t=new nc(t,i),n&&(t.ba=n),r&&oc(t,r),yc(t,e),t}(e,n,t.w,t.ya());return Jc(this,this.i.then(function(){if(Gc(t).options.apiKey!=e.m)return r.reload()}).then(function(){return $c(t)&&e.uid==$c(t).uid?(yc($c(t),e),t.Z(e)):(Qc(t,r),dc(r),t.Z(r))}).then(function(){Xc(t)}))},e.nb=function(){var e=this;return Jc(this,this.i.then(function(){return $c(e)?(Qc(e,null),Fc(e.h).then(function(){Xc(e)})):_e()}))},e.Mc=function(){var e=this;return Uc(this.h,Gc(this).options.authDomain).then(function(t){if(!e.m){var n;if(n=$c(e)&&t){n=$c(e).uid;var r=t.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return yc($c(e),t),$c(e).F();($c(e)||t)&&(Qc(e,t),t&&(dc(t),t.ba=e.w),e.a&&e.a.subscribe(e),Xc(e))}})},e.Z=function(e){return Mc(this.h,e)},e.bc=function(){Xc(this),this.Z($c(this))},e.jc=function(){this.nb()},e.kc=function(){this.nb()},e.mc=function(e){var t=this;this.addAuthTokenListener(function(){e.next($c(t))})},e.nc=function(e){var t=this;!function(e,t){e.I.push(t),Jc(e,e.i.then(function(){!e.m&&j(e.I,t)&&e.O!==e.getUid()&&(e.O=e.getUid(),t(Yc(e)))}))}(this,function(){e.next($c(t))})},e.vc=function(e,t,n){var o=this;return this.X&&r.a.Promise.resolve().then(function(){d(e)?e($c(o)):d(e.next)&&e.next($c(o))}),this.Tb(e,t,n)},e.uc=function(e,t,n){var o=this;return this.X&&r.a.Promise.resolve().then(function(){o.O=o.getUid(),d(e)?e($c(o)):d(e.next)&&e.next($c(o))}),this.Ub(e,t,n)},e.cc=function(e){var t=this;return Jc(this,this.i.then(function(){return $c(t)?$c(t).F(e).then(function(e){return{accessToken:e}}):null}))},e.Nb=function(e){var t=this;return this.i.then(function(){return Kc(t,os(t.b,Za,{token:e}))}).then(function(e){var n=e.user;return vc(n,"isAnonymous",!1),t.Z(n),e})},e.Ec=function(e){return Sr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCustomToken is deprecated. Please use firebase.auth.Auth.prototype.signInWithCustomToken instead."),this.Nb(e)},e.Fc=function(e,t){return Sr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithEmailAndPassword is deprecated. Please use firebase.auth.Auth.prototype.signInWithEmailAndPassword instead."),this.Ob(e,t)},e.Ob=function(e,t){var n=this;return this.i.then(function(){return Kc(n,os(n.b,es,{email:e,password:t}))})},e.xb=function(e,t){var n=this;return this.i.then(function(){return Kc(n,os(n.b,Ra,{email:e,password:t}))})},e.Wb=function(e,t){return Sr("firebase.auth.Auth.prototype.createUserAndRetrieveDataWithEmailAndPassword is deprecated. Please use firebase.auth.Auth.prototype.createUserWithEmailAndPassword instead."),this.xb(e,t)},e.Hc=function(e){return Sr("firebase.auth.Auth.prototype.signInWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential instead."),this.Pa(e).then(function(e){return e.user})},e.Pa=function(e){var t=this;return this.i.then(function(){return Kc(t,e.la(t.b))})},e.Qa=function(){var e=this;return this.i.then(function(){var t=$c(e);if(t&&t.isAnonymous){var n=Pr({providerId:null,isNewUser:!1});return Pr({user:t,credential:null,additionalUserInfo:n,operationType:"signIn"})}return Kc(e,e.b.Qa()).then(function(t){var n=t.user;return vc(n,"isAnonymous",!0),e.Z(n),t})})},e.Gc=function(){return Sr("firebase.auth.Auth.prototype.signInAnonymouslyAndRetrieveData is deprecated. Please use firebase.auth.Auth.prototype.signInAnonymously instead."),this.Qa()},e.getUid=function(){return $c(this)&&$c(this).uid||null},e.Vb=function(e){this.addAuthTokenListener(e),this.u++,0<this.u&&$c(this)&&sc($c(this))},e.Cc=function(e){var t=this;R(this.o,function(n){n==e&&t.u--}),0>this.u&&(this.u=0),0==this.u&&$c(this)&&lc($c(this)),this.removeAuthTokenListener(e)},e.addAuthTokenListener=function(e){var t=this;this.o.push(e),Jc(this,this.i.then(function(){t.m||j(t.o,e)&&e(Yc(t))}))},e.removeAuthTokenListener=function(e){F(this.o,function(t){return t==e})},e.delete=function(){this.m=!0;for(var e=0;e<this.N.length;e++)this.N[e].cancel("app-deleted");return this.N=[],this.h&&(e=this.h).b.removeListener(jc("local"),e.a,this.ka),this.a&&(this.a.unsubscribe(this),this.a.Ya()),r.a.Promise.resolve()},e.Zb=function(e){return Sr("firebase.auth.Auth.prototype.fetchProvidersForEmail is deprecated. Please use firebase.auth.Auth.prototype.fetchSignInMethodsForEmail instead."),Jc(this,function(e,t){return os(e,Da,{identifier:t,continueUri:pr()?qn():"http://localhost"}).then(function(e){return e.allProviders||[]})}(this.b,e))},e.$b=function(e){return Jc(this,function(e,t){return os(e,Da,{identifier:t,continueUri:pr()?qn():"http://localhost"}).then(function(e){return e.signinMethods||[]})}(this.b,e))},e.oc=function(e){return!!Ko(e)},e.lb=function(e,t){var n=this;return Jc(this,_e().then(function(){var e=new Qr(t);if(!e.c)throw new Vr("argument-error",$r+" must be true when sending sign in link to email");return no(e)}).then(function(t){return n.b.lb(e,t)}).then(function(){}))},e.Tc=function(e){return this.Ja(e).then(function(e){return e.data.email})},e.Za=function(e,t){return Jc(this,this.b.Za(e,t).then(function(){}))},e.Ja=function(e){return Jc(this,this.b.Ja(e).then(function(e){return new Rr(e)}))},e.Wa=function(e){return Jc(this,this.b.Wa(e).then(function(){}))},e.kb=function(e,t){var n=this;return Jc(this,_e().then(function(){return void 0===t||oe(t)?{}:no(new Qr(t))}).then(function(t){return n.b.kb(e,t)}).then(function(){}))},e.Jc=function(e,t){return Jc(this,Ql(this,e,t,b(this.Pa,this)))},e.Ic=function(e,t){var n=this;return Jc(this,_e().then(function(){var r=Qo(e,t||qn());return n.Pa(r)}))},Zc.prototype.render=function(){},Zc.prototype.reset=function(){},Zc.prototype.getResponse=function(){},Zc.prototype.execute=function(){};var tu=null;function nu(e,t){return(t=ru(t))&&e.a[t]||null}function ru(e){return(e=void 0===e?1e12:e)?e.toString():null}function ou(e,t){this.g=!1,this.c=t,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=Rn(e);var n=this;this.i=function(){n.execute()},this.h?this.execute():yt(this.f,"click",this.i)}function iu(e){if(e.g)throw Error("reCAPTCHA mock was already deleted!")}function au(){}eu.prototype.render=function(e,t){return this.a[this.b.toString()]=new ou(e,t),this.b++},eu.prototype.reset=function(e){var t=nu(this,e);e=ru(e),t&&e&&(t.delete(),delete this.a[e])},eu.prototype.getResponse=function(e){return(e=nu(this,e))?e.getResponse():null},eu.prototype.execute=function(e){(e=nu(this,e))&&e.execute()},ou.prototype.getResponse=function(){return iu(this),this.b},ou.prototype.execute=function(){iu(this);var e=this;this.a||(this.a=setTimeout(function(){e.b=function(){for(var e=50,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}();var t=e.c.callback,n=e.c["expired-callback"];if(t)try{t(e.b)}catch(e){}e.a=setTimeout(function(){if(e.a=null,e.b=null,n)try{n()}catch(e){}e.h&&e.execute()},6e4)},500))},ou.prototype.delete=function(){iu(this),this.g=!0,clearTimeout(this.a),this.a=null,_t(this.f,"click",this.i)},au.prototype.g=function(){return tu||(tu=new eu),_e(tu)},au.prototype.c=function(){};var su=null;function lu(){this.b=n.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var cu=bn("https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),uu=new xr(3e4,6e4);lu.prototype.g=function(e){var t=this;return new me(function(r,o){var i=setTimeout(function(){o(new Vr("network-request-failed"))},uu.get());!n.grecaptcha||e!==t.f&&!t.b?(n[t.a]=function(){if(n.grecaptcha){t.f=e;var a=n.grecaptcha.render;n.grecaptcha.render=function(e,n){return e=a(e,n),t.b++,e},clearTimeout(i),r(n.grecaptcha)}else clearTimeout(i),o(new Vr("internal-error"));delete n[t.a]},_e(ea(wn(cu,{onload:t.a,hl:e||""}))).s(function(){clearTimeout(i),o(new Vr("internal-error","Unable to load external reCAPTCHA dependencies!"))})):(clearTimeout(i),r(n.grecaptcha))})},lu.prototype.c=function(){this.b--};var du=null;function pu(e,t,r,o,i,a,s){if(Nr(this,"type","recaptcha"),this.c=this.f=null,this.D=!1,this.m=t,this.g=null,s?(su||(su=new au),s=su):(du||(du=new lu),s=du),this.o=s,this.a=r||{theme:"light",type:"image"},this.h=[],this.a[mu])throw new Vr("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[gu],!n.document)throw new Vr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!Rn(t)||!this.i&&Rn(t).hasChildNodes())throw new Vr("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.u=new sa(e,a||null,i||null),this.v=o||function(){return null};var l=this;this.l=[];var c=this.a[fu];this.a[fu]=function(e){if(bu(l,e),"function"==typeof c)c(e);else if("string"==typeof c){var t=cr(c,n);"function"==typeof t&&t(e)}};var u=this.a[hu];this.a[hu]=function(){if(bu(l,null),"function"==typeof u)u();else if("string"==typeof u){var e=cr(u,n);"function"==typeof e&&e()}}}var fu="callback",hu="expired-callback",mu="sitekey",gu="size";function bu(e,t){for(var n=0;n<e.l.length;n++)try{e.l[n](t)}catch(e){}}function vu(e,t){return e.h.push(t),t.ia(function(){M(e.h,t)}),t}function yu(e){if(e.D)throw new Vr("internal-error","RecaptchaVerifier instance has been destroyed.")}function wu(e,t,n){var o=!1;try{this.b=n||r.a.app()}catch(e){throw new Vr("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new Vr("invalid-api-key");n=this.b.options.apiKey;var i=this,a=null;try{a=this.b.auth().ya()}catch(e){}try{o=this.b.auth().settings.appVerificationDisabledForTesting}catch(e){}a=r.a.SDK_VERSION?sr(r.a.SDK_VERSION,a):null,pu.call(this,n,e,t,function(){try{var e=i.b.auth().ea()}catch(t){e=null}return e},a,po(co),o)}function xu(e,t,n,r){e:{n=Array.prototype.slice.call(n);for(var o=0,i=!1,a=0;a<t.length;a++)if(t[a].optional)i=!0;else{if(i)throw new Vr("internal-error","Argument validator encountered a required argument after an optional argument.");o++}if(i=t.length,n.length<o||i<n.length)r="Expected "+(o==i?1==o?"1 argument":o+" arguments":o+"-"+i+" arguments")+" but got "+n.length+".";else{for(o=0;o<n.length;o++)if(i=t[o].optional&&void 0===n[o],!t[o].M(n[o])&&!i){if(t=t[o],0>o||o>=_u.length)throw new Vr("internal-error","Argument validator received an unsupported number of arguments.");n=_u[o],r=(r?"":n+" argument ")+(t.name?'"'+t.name+'" ':"")+"must be "+t.K+".";break e}r=null}}if(r)throw new Vr("argument-error",e+" failed: "+r)}(e=pu.prototype).za=function(){var e=this;return this.f?this.f:this.f=vu(this,_e().then(function(){if(pr()&&!er())return Xn();throw new Vr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")}).then(function(){return e.o.g(e.v())}).then(function(t){return e.g=t,os(e.u,qa,{})}).then(function(t){e.a[mu]=t.recaptchaSiteKey}).s(function(t){throw e.f=null,t}))},e.render=function(){yu(this);var e=this;return vu(this,this.za().then(function(){if(null===e.c){var t=e.m;if(!e.i){var n=Rn(t);t=jn("DIV"),n.appendChild(t)}e.c=e.g.render(t,e.a)}return e.c}))},e.verify=function(){yu(this);var e=this;return vu(this,this.render().then(function(t){return new me(function(n){var r=e.g.getResponse(t);if(r)n(r);else{var o=function(t){t&&(function(e,t){F(e.l,function(e){return e==t})}(e,o),n(t))};e.l.push(o),e.i&&e.g.execute(e.c)}})}))},e.reset=function(){yu(this),null!==this.c&&this.g.reset(this.c)},e.clear=function(){yu(this),this.D=!0,this.o.c();for(var e=0;e<this.h.length;e++)this.h[e].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){e=Rn(this.m);for(var t;t=e.firstChild;)e.removeChild(t)}},w(wu,pu);var _u="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function ku(e,t){return{name:e||"",K:"a valid string",optional:!!t,M:o}}function Eu(e,t){return{name:e||"",K:"a boolean",optional:!!t,M:i}}function Cu(e,t){return{name:e||"",K:"a valid object",optional:!!t,M:p}}function Tu(e,t){return{name:e||"",K:"a function",optional:!!t,M:d}}function Su(e,t){return{name:e||"",K:"null",optional:!!t,M:l}}function Iu(e){return{name:e?e+"Credential":"credential",K:e?"a valid "+e+" credential":"a valid credential",optional:!1,M:function(t){if(!t)return!1;var n=!e||t.providerId===e;return!(!t.la||!n)}}}function Nu(){return{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(e){return!!(e&&o(e.type)&&d(e.verify))}}}function Ou(e,t,n,r){return{name:n||"",K:e.K+" or "+t.K,optional:!!r,M:function(n){return e.M(n)||t.M(n)}}}function Pu(e,t){for(var n in t){var r=t[n].name;e[r]=Du(r,e[n],t[n].j)}}function Au(e,t){for(var n in t){var r=t[n].name;r!==n&&Object.defineProperty(e,r,{get:v(function(e){return this[e]},n),set:v(function(e,t,n,r){xu(e,[n],[r],!0),this[t]=r},r,n,t[n].tb),enumerable:!0})}}function Ru(e,t,n,r){e[t]=Du(t,n,r)}function Du(e,t,n){function r(){var e=Array.prototype.slice.call(arguments);return xu(i,n,e),t.apply(this,e)}if(!n)return t;var o,i=function(e){return(e=e.split("."))[e.length-1]}(e);for(o in t)r[o]=t[o];for(o in t.prototype)r.prototype[o]=t.prototype[o];return r}Pu(Wc.prototype,{Wa:{name:"applyActionCode",j:[ku("code")]},Ja:{name:"checkActionCode",j:[ku("code")]},Za:{name:"confirmPasswordReset",j:[ku("code"),ku("newPassword")]},xb:{name:"createUserWithEmailAndPassword",j:[ku("email"),ku("password")]},Wb:{name:"createUserAndRetrieveDataWithEmailAndPassword",j:[ku("email"),ku("password")]},Zb:{name:"fetchProvidersForEmail",j:[ku("email")]},$b:{name:"fetchSignInMethodsForEmail",j:[ku("email")]},fa:{name:"getRedirectResult",j:[]},oc:{name:"isSignInWithEmailLink",j:[ku("emailLink")]},uc:{name:"onAuthStateChanged",j:[Ou(Cu(),Tu(),"nextOrObserver"),Tu("opt_error",!0),Tu("opt_completed",!0)]},vc:{name:"onIdTokenChanged",j:[Ou(Cu(),Tu(),"nextOrObserver"),Tu("opt_error",!0),Tu("opt_completed",!0)]},kb:{name:"sendPasswordResetEmail",j:[ku("email"),Ou(Cu("opt_actionCodeSettings",!0),Su(null,!0),"opt_actionCodeSettings",!0)]},lb:{name:"sendSignInLinkToEmail",j:[ku("email"),Cu("actionCodeSettings")]},mb:{name:"setPersistence",j:[ku("persistence")]},Pa:{name:"signInAndRetrieveDataWithCredential",j:[Iu()]},Qa:{name:"signInAnonymously",j:[]},Gc:{name:"signInAnonymouslyAndRetrieveData",j:[]},Hc:{name:"signInWithCredential",j:[Iu()]},Nb:{name:"signInWithCustomToken",j:[ku("token")]},Ec:{name:"signInAndRetrieveDataWithCustomToken",j:[ku("token")]},Ob:{name:"signInWithEmailAndPassword",j:[ku("email"),ku("password")]},Ic:{name:"signInWithEmailLink",j:[ku("email"),ku("emailLink",!0)]},Fc:{name:"signInAndRetrieveDataWithEmailAndPassword",j:[ku("email"),ku("password")]},Jc:{name:"signInWithPhoneNumber",j:[ku("phoneNumber"),Nu()]},Kc:{name:"signInWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Lc:{name:"signInWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Qc:{name:"updateCurrentUser",j:[Ou({name:"user",K:"an instance of Firebase User",optional:!1,M:function(e){return!!(e&&e instanceof nc)}},Su(),"user")]},nb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[ku(null,!0)]},Sc:{name:"useDeviceLanguage",j:[]},Tc:{name:"verifyPasswordResetCode",j:[ku("code")]}}),Au(Wc.prototype,{lc:{name:"languageCode",tb:Ou(ku(),Su(),"languageCode")}}),Wc.Persistence=Js,Wc.Persistence.LOCAL="local",Wc.Persistence.SESSION="session",Wc.Persistence.NONE="none",Pu(nc.prototype,{delete:{name:"delete",j:[]},dc:{name:"getIdTokenResult",j:[Eu("opt_forceRefresh",!0)]},F:{name:"getIdToken",j:[Eu("opt_forceRefresh",!0)]},eb:{name:"linkAndRetrieveDataWithCredential",j:[Iu()]},pc:{name:"linkWithCredential",j:[Iu()]},qc:{name:"linkWithPhoneNumber",j:[ku("phoneNumber"),Nu()]},rc:{name:"linkWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},sc:{name:"linkWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},gb:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Iu()]},yc:{name:"reauthenticateWithCredential",j:[Iu()]},zc:{name:"reauthenticateWithPhoneNumber",j:[ku("phoneNumber"),Nu()]},Ac:{name:"reauthenticateWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Bc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},jb:{name:"sendEmailVerification",j:[Ou(Cu("opt_actionCodeSettings",!0),Su(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[ku(null,!0)]},Pc:{name:"unlink",j:[ku("provider")]},pb:{name:"updateEmail",j:[ku("email")]},qb:{name:"updatePassword",j:[ku("password")]},Rc:{name:"updatePhoneNumber",j:[Iu("phone")]},rb:{name:"updateProfile",j:[Cu("profile")]}}),Pu(eu.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Pu(Zc.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Pu(me.prototype,{ia:{name:"finally"},s:{name:"catch"},then:{name:"then"}}),Au(ql.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",tb:Eu("appVerificationDisabledForTesting")}}),Pu(Hl.prototype,{confirm:{name:"confirm",j:[ku("verificationCode")]}}),Ru(Ho,"credential",function(e,t){return new qo(e,t)},[ku("email"),ku("password")]),Pu(jo.prototype,{ua:{name:"addScope",j:[ku("scope")]},Da:{name:"setCustomParameters",j:[Cu("customOAuthParameters")]}}),Ru(jo,"credential",Mo,[Ou(ku(),Cu(),"token")]),Ru(Ho,"credentialWithLink",Qo,[ku("email"),ku("emailLink")]),Pu(Fo.prototype,{ua:{name:"addScope",j:[ku("scope")]},Da:{name:"setCustomParameters",j:[Cu("customOAuthParameters")]}}),Ru(Fo,"credential",Uo,[Ou(ku(),Cu(),"token")]),Pu(zo.prototype,{ua:{name:"addScope",j:[ku("scope")]},Da:{name:"setCustomParameters",j:[Cu("customOAuthParameters")]}}),Ru(zo,"credential",Wo,[Ou(ku(),Ou(Cu(),Su()),"idToken"),Ou(ku(),Su(),"accessToken",!0)]),Pu(Vo.prototype,{Da:{name:"setCustomParameters",j:[Cu("customOAuthParameters")]}}),Ru(Vo,"credential",Bo,[Ou(ku(),Cu(),"token"),ku("secret",!0)]),Pu(Lo.prototype,{ua:{name:"addScope",j:[ku("scope")]},credential:{name:"credential",j:[Ou(ku(),Su(),"idToken",!0),Ou(ku(),Su(),"accessToken",!0),Ou(ku(),Su(),"nonce",!0)]},Da:{name:"setCustomParameters",j:[Cu("customOAuthParameters")]}}),Ru(Yo,"credential",Xo,[ku("verificationId"),ku("verificationCode")]),Pu(Yo.prototype,{Ua:{name:"verifyPhoneNumber",j:[ku("phoneNumber"),Nu()]}}),Pu(Vr.prototype,{toJSON:{name:"toJSON",j:[ku(null,!0)]}}),Pu(ai.prototype,{toJSON:{name:"toJSON",j:[ku(null,!0)]}}),Pu(ii.prototype,{toJSON:{name:"toJSON",j:[ku(null,!0)]}}),Pu(wu.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),function(){if(void 0===r.a||!r.a.INTERNAL||!r.a.INTERNAL.registerService)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var e={Auth:Wc,Error:Vr};Ru(e,"EmailAuthProvider",Ho,[]),Ru(e,"FacebookAuthProvider",jo,[]),Ru(e,"GithubAuthProvider",Fo,[]),Ru(e,"GoogleAuthProvider",zo,[]),Ru(e,"TwitterAuthProvider",Vo,[]),Ru(e,"OAuthProvider",Lo,[ku("providerId")]),Ru(e,"SAMLAuthProvider",Do,[ku("providerId")]),Ru(e,"PhoneAuthProvider",Yo,[{name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(e){return!!(e&&e instanceof Wc)}}]),Ru(e,"RecaptchaVerifier",wu,[Ou(ku(),{name:"",K:"an HTML element",optional:!1,M:function(e){return!!(e&&e instanceof Element)}},"recaptchaContainer"),Cu("recaptchaParameters",!0),{name:"app",K:"an instance of Firebase App",optional:!0,M:function(e){return!!(e&&e instanceof r.a.app.App)}}]),r.a.INTERNAL.registerService("auth",function(e,t){return t({INTERNAL:{getUid:b((e=new Wc(e)).getUid,e),getToken:b(e.cc,e),addAuthTokenListener:b(e.Vb,e),removeAuthTokenListener:b(e.Cc,e)}}),e},e,function(e,t){if("create"===e)try{t.auth()}catch(e){}}),r.a.INTERNAL.extendNamespace({User:nc})}()}).apply(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(19))},function(e,t,n){"use strict";(function(r){Object.defineProperty(t,"__esModule",{value:!0});var o,i,a=(o=n(17))&&"object"==typeof o&&"default"in o?o.default:o,s=n(97),l=n(96),c=n(145),u=function(){function e(e){this.domStorage_=e,this.prefix_="firebase:"}return e.prototype.set=function(e,t){null==t?this.domStorage_.removeItem(this.prefixedName_(e)):this.domStorage_.setItem(this.prefixedName_(e),l.stringify(t))},e.prototype.get=function(e){var t=this.domStorage_.getItem(this.prefixedName_(e));return null==t?null:l.jsonEval(t)},e.prototype.remove=function(e){this.domStorage_.removeItem(this.prefixedName_(e))},e.prototype.prefixedName_=function(e){return this.prefix_+e},e.prototype.toString=function(){return this.domStorage_.toString()},e}(),d=function(){function e(){this.cache_={},this.isInMemoryStorage=!0}return e.prototype.set=function(e,t){null==t?delete this.cache_[e]:this.cache_[e]=t},e.prototype.get=function(e){return l.contains(this.cache_,e)?this.cache_[e]:null},e.prototype.remove=function(e){delete this.cache_[e]},e}(),p=function(e){try{if("undefined"!=typeof window&&void 0!==window[e]){var t=window[e];return t.setItem("firebase:sentinel","cache"),t.removeItem("firebase:sentinel"),new u(t)}}catch(e){}return new d},f=p("localStorage"),h=p("sessionStorage"),m=new c.Logger("@firebase/database"),g=(i=1,function(){return i++}),b=function(e){var t=l.stringToByteArray(e),n=new l.Sha1;n.update(t);var r=n.digest();return l.base64.encodeByteArray(r)},v=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n="",r=0;r<e.length;r++)Array.isArray(e[r])||e[r]&&"object"==typeof e[r]&&"number"==typeof e[r].length?n+=v.apply(null,e[r]):"object"==typeof e[r]?n+=l.stringify(e[r]):n+=e[r],n+=" ";return n},y=null,w=!0,x=function(e,t){l.assert(!t||!0===e||!1===e,"Can't turn on custom loggers persistently."),!0===e?(m.logLevel=c.LogLevel.VERBOSE,y=m.log.bind(m),t&&h.set("logging_enabled",!0)):"function"==typeof e?y=e:(y=null,h.remove("logging_enabled"))},_=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!0===w&&(w=!1,null===y&&!0===h.get("logging_enabled")&&x(!0)),y){var n=v.apply(null,e);y(n)}},k=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];_.apply(void 0,[e].concat(t))}},E=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE INTERNAL ERROR: "+v.apply(void 0,e);m.error(n)},C=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE FATAL ERROR: "+v.apply(void 0,e);throw m.error(n),new Error(n)},T=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE WARNING: "+v.apply(void 0,e);m.warn(n)},S=function(e){return"number"==typeof e&&(e!=e||e==Number.POSITIVE_INFINITY||e==Number.NEGATIVE_INFINITY)},I="[MIN_NAME]",N="[MAX_NAME]",O=function(e,t){if(e===t)return 0;if(e===I||t===N)return-1;if(t===I||e===N)return 1;var n=F(e),r=F(t);return null!==n?null!==r?n-r==0?e.length-t.length:n-r:-1:null!==r?1:e<t?-1:1},P=function(e,t){return e===t?0:e<t?-1:1},A=function(e,t){if(t&&e in t)return t[e];throw new Error("Missing required key ("+e+") in object: "+l.stringify(t))},R=function(e){if("object"!=typeof e||null===e)return l.stringify(e);var t=[];for(var n in e)t.push(n);t.sort();for(var r="{",o=0;o<t.length;o++)0!==o&&(r+=","),r+=l.stringify(t[o]),r+=":",r+=R(e[t[o]]);return r+="}"},D=function(e,t){var n=e.length;if(n<=t)return[e];for(var r=[],o=0;o<n;o+=t)o+t>n?r.push(e.substring(o,n)):r.push(e.substring(o,o+t));return r},L=function(e,t){if(Array.isArray(e))for(var n=0;n<e.length;++n)t(n,e[n]);else l.forEach(e,function(e,n){return t(n,e)})},j=function(e){l.assert(!S(e),"Invalid JSON number");var t,n,r,o,i,a,s;for(0===e?(n=0,r=0,t=1/e==-1/0?1:0):(t=e<0,(e=Math.abs(e))>=Math.pow(2,-1022)?(n=(o=Math.min(Math.floor(Math.log(e)/Math.LN2),1023))+1023,r=Math.round(e*Math.pow(2,52-o)-Math.pow(2,52))):(n=0,r=Math.round(e/Math.pow(2,-1074)))),a=[],i=52;i;i-=1)a.push(r%2?1:0),r=Math.floor(r/2);for(i=11;i;i-=1)a.push(n%2?1:0),n=Math.floor(n/2);a.push(t?1:0),a.reverse(),s=a.join("");var c="";for(i=0;i<64;i+=8){var u=parseInt(s.substr(i,8),2).toString(16);1===u.length&&(u="0"+u),c+=u}return c.toLowerCase()},M=new RegExp("^-?\\d{1,10}$"),F=function(e){if(M.test(e)){var t=Number(e);if(t>=-2147483648&&t<=2147483647)return t}return null},U=function(e){try{e()}catch(e){setTimeout(function(){var t=e.stack||"";throw T("Exception was thrown by user callback.",t),e},Math.floor(0))}},z=function(){return("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0},W=function(e,t){var n=setTimeout(e,t);return"object"==typeof n&&n.unref&&n.unref(),n},V=function(){function e(e,t){if(void 0===t){this.pieces_=e.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=e,this.pieceNum_=t}return Object.defineProperty(e,"Empty",{get:function(){return new e("")},enumerable:!0,configurable:!0}),e.prototype.getFront=function(){return this.pieceNum_>=this.pieces_.length?null:this.pieces_[this.pieceNum_]},e.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_},e.prototype.popFront=function(){var t=this.pieceNum_;return t<this.pieces_.length&&t++,new e(this.pieces_,t)},e.prototype.getBack=function(){return this.pieceNum_<this.pieces_.length?this.pieces_[this.pieces_.length-1]:null},e.prototype.toString=function(){for(var e="",t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+this.pieces_[t]);return e||"/"},e.prototype.toUrlEncodedString=function(){for(var e="",t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+encodeURIComponent(String(this.pieces_[t])));return e||"/"},e.prototype.slice=function(e){return void 0===e&&(e=0),this.pieces_.slice(this.pieceNum_+e)},e.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length)return null;for(var t=[],n=this.pieceNum_;n<this.pieces_.length-1;n++)t.push(this.pieces_[n]);return new e(t,0)},e.prototype.child=function(t){for(var n=[],r=this.pieceNum_;r<this.pieces_.length;r++)n.push(this.pieces_[r]);if(t instanceof e)for(r=t.pieceNum_;r<t.pieces_.length;r++)n.push(t.pieces_[r]);else{var o=t.split("/");for(r=0;r<o.length;r++)o[r].length>0&&n.push(o[r])}return new e(n,0)},e.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length},e.relativePath=function(t,n){var r=t.getFront(),o=n.getFront();if(null===r)return n;if(r===o)return e.relativePath(t.popFront(),n.popFront());throw new Error("INTERNAL ERROR: innerPath ("+n+") is not within outerPath ("+t+")")},e.comparePaths=function(e,t){for(var n=e.slice(),r=t.slice(),o=0;o<n.length&&o<r.length;o++){var i=O(n[o],r[o]);if(0!==i)return i}return n.length===r.length?0:n.length<r.length?-1:1},e.prototype.equals=function(e){if(this.getLength()!==e.getLength())return!1;for(var t=this.pieceNum_,n=e.pieceNum_;t<=this.pieces_.length;t++,n++)if(this.pieces_[t]!==e.pieces_[n])return!1;return!0},e.prototype.contains=function(e){var t=this.pieceNum_,n=e.pieceNum_;if(this.getLength()>e.getLength())return!1;for(;t<this.pieces_.length;){if(this.pieces_[t]!==e.pieces_[n])return!1;++t,++n}return!0},e}(),B=function(){function e(e,t){this.errorPrefix_=t,this.parts_=e.slice(),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=l.stringLength(this.parts_[n]);this.checkValid_()}return Object.defineProperty(e,"MAX_PATH_DEPTH",{get:function(){return 32},enumerable:!0,configurable:!0}),Object.defineProperty(e,"MAX_PATH_LENGTH_BYTES",{get:function(){return 768},enumerable:!0,configurable:!0}),e.prototype.push=function(e){this.parts_.length>0&&(this.byteLength_+=1),this.parts_.push(e),this.byteLength_+=l.stringLength(e),this.checkValid_()},e.prototype.pop=function(){var e=this.parts_.pop();this.byteLength_-=l.stringLength(e),this.parts_.length>0&&(this.byteLength_-=1)},e.prototype.checkValid_=function(){if(this.byteLength_>e.MAX_PATH_LENGTH_BYTES)throw new Error(this.errorPrefix_+"has a key path longer than "+e.MAX_PATH_LENGTH_BYTES+" bytes ("+this.byteLength_+").");if(this.parts_.length>e.MAX_PATH_DEPTH)throw new Error(this.errorPrefix_+"path specified exceeds the maximum depth that can be written ("+e.MAX_PATH_DEPTH+") or object contains a cycle "+this.toErrorString())},e.prototype.toErrorString=function(){return 0==this.parts_.length?"":"in property '"+this.parts_.join(".")+"'"},e}(),q="long_polling",H=function(){function e(e,t,n,r,o){void 0===o&&(o=""),this.secure=t,this.namespace=n,this.webSocketOnly=r,this.persistenceKey=o,this.host=e.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.internalHost=f.get("host:"+e)||this.host}return e.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()},e.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},e.prototype.isDemoHost=function(){return"firebaseio-demo.com"===this.domain},e.prototype.isCustomHost=function(){return"firebaseio.com"!==this.domain&&"firebaseio-demo.com"!==this.domain},e.prototype.updateHost=function(e){e!==this.internalHost&&(this.internalHost=e,this.isCacheableHost()&&f.set("host:"+this.host,this.internalHost))},e.prototype.connectionURL=function(e,t){var n;if(l.assert("string"==typeof e,"typeof type must == string"),l.assert("object"==typeof t,"typeof params must == object"),"websocket"===e)n=(this.secure?"wss://":"ws://")+this.internalHost+"/.ws?";else{if(e!==q)throw new Error("Unknown connection type: "+e);n=(this.secure?"https://":"http://")+this.internalHost+"/.lp?"}this.needsQueryParam()&&(t.ns=this.namespace);var r=[];return l.forEach(t,function(e,t){r.push(e+"="+t)}),n+r.join("&")},e.prototype.toString=function(){var e=this.toURLString();return this.persistenceKey&&(e+="<"+this.persistenceKey+">"),e},e.prototype.toURLString=function(){return(this.secure?"https://":"http://")+this.host},e}();var Q,K,G,$,Y,X=function(e){var t=J(e),n=t.subdomain;"firebase"===t.domain&&C(t.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),n&&"undefined"!=n||"localhost"===t.domain||C("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),t.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&T("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var r="ws"===t.scheme||"wss"===t.scheme;return{repoInfo:new H(t.host,t.secure,n,r),path:new V(t.pathString)}},J=function(e){var t="",n="",r="",o="",i=!0,a="https",s=443;if("string"==typeof e){var l=e.indexOf("//");l>=0&&(a=e.substring(0,l-1),e=e.substring(l+2));var c=e.indexOf("/");-1===c&&(c=e.length);var u=e.indexOf("?");-1===u&&(u=e.length),t=e.substring(0,Math.min(c,u)),c<u&&(o=
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e){for(var t="",n=e.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var o=n[r];try{o=decodeURIComponent(o.replace(/\+/g," "))}catch(e){}t+="/"+o}return t}(e.substring(c,u)));var d=function(e){var t={};"?"===e.charAt(0)&&(e=e.substring(1));for(var n=0,r=e.split("&");n<r.length;n++){var o=r[n];if(0!==o.length){var i=o.split("=");2===i.length?t[decodeURIComponent(i[0])]=decodeURIComponent(i[1]):T("Invalid query segment '"+o+"' in query '"+e+"'")}}return t}(e.substring(Math.min(e.length,u)));(l=t.indexOf(":"))>=0?(i="https"===a||"wss"===a,s=parseInt(t.substring(l+1),10)):l=e.length;var p=t.split(".");3===p.length?(n=p[1],r=p[0].toLowerCase()):2===p.length?n=p[0]:"localhost"===p[0].slice(0,l).toLowerCase()&&(n="localhost"),""===r&&"ns"in d&&(r=d.ns)}return{host:t,port:s,domain:n,subdomain:r,secure:i,scheme:a,pathString:o}},Z=/[\[\].#$\/\u0000-\u001F\u007F]/,ee=/[\[\].#$\u0000-\u001F\u007F]/,te=function(e){return"string"==typeof e&&0!==e.length&&!Z.test(e)},ne=function(e){return"string"==typeof e&&0!==e.length&&!ee.test(e)},re=function(e){return null===e||"string"==typeof e||"number"==typeof e&&!S(e)||e&&"object"==typeof e&&l.contains(e,".sv")},oe=function(e,t,n,r,o){o&&void 0===n||ie(l.errorPrefix(e,t,o),n,r)},ie=function(e,t,n){var r=n instanceof V?new B(n,e):n;if(void 0===t)throw new Error(e+"contains undefined "+r.toErrorString());if("function"==typeof t)throw new Error(e+"contains a function "+r.toErrorString()+" with contents = "+t.toString());if(S(t))throw new Error(e+"contains "+t.toString()+" "+r.toErrorString());if("string"==typeof t&&t.length>10485760/3&&l.stringLength(t)>10485760)throw new Error(e+"contains a string greater than 10485760 utf8 bytes "+r.toErrorString()+" ('"+t.substring(0,50)+"...')");if(t&&"object"==typeof t){var o=!1,i=!1;if(l.forEach(t,function(t,n){if(".value"===t)o=!0;else if(".priority"!==t&&".sv"!==t&&(i=!0,!te(t)))throw new Error(e+" contains an invalid key ("+t+") "+r.toErrorString()+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');r.push(t),ie(e,n,r),r.pop()}),o&&i)throw new Error(e+' contains ".value" child '+r.toErrorString()+" in addition to actual children.")}},ae=function(e,t,n,r,o){if(!o||void 0!==n){var i=l.errorPrefix(e,t,o);if(!n||"object"!=typeof n||Array.isArray(n))throw new Error(i+" must be an object containing the children to replace.");var a=[];l.forEach(n,function(e,t){var n=new V(e);if(ie(i,t,r.child(n)),".priority"===n.getBack()&&!re(t))throw new Error(i+"contains an invalid value for '"+n.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");a.push(n)}),function(e,t){var n,r;for(n=0;n<t.length;n++)for(var o=(r=t[n]).slice(),i=0;i<o.length;i++)if(".priority"===o[i]&&i===o.length-1);else if(!te(o[i]))throw new Error(e+"contains an invalid key ("+o[i]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');t.sort(V.comparePaths);var a=null;for(n=0;n<t.length;n++){if(r=t[n],null!==a&&a.contains(r))throw new Error(e+"contains a path "+a.toString()+" that is ancestor of another path "+r.toString());a=r}}(i,a)}},se=function(e,t,n,r){if(!r||void 0!==n){if(S(n))throw new Error(l.errorPrefix(e,t,r)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!re(n))throw new Error(l.errorPrefix(e,t,r)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},le=function(e,t,n,r){if(!r||void 0!==n)switch(n){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error(l.errorPrefix(e,t,r)+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},ce=function(e,t,n,r){if(!(r&&void 0===n||te(n)))throw new Error(l.errorPrefix(e,t,r)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},ue=function(e,t,n,r){if(!(r&&void 0===n||ne(n)))throw new Error(l.errorPrefix(e,t,r)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},de=function(e,t){if(".info"===t.getFront())throw new Error(e+" failed = Can't modify data under /.info/")},pe=function(e,t,n){var r=n.path.toString();if("string"!=typeof n.repoInfo.host||0===n.repoInfo.host.length||!te(n.repoInfo.namespace)&&"localhost"!==n.repoInfo.host.split(":")[0]||0!==r.length&&!function(e){return e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),ne(e)}(r))throw new Error(l.errorPrefix(e,t,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},fe=function(){function e(e,t){this.repo_=e,this.path_=t}return e.prototype.cancel=function(e){l.validateArgCount("OnDisconnect.cancel",0,1,arguments.length),l.validateCallback("OnDisconnect.cancel",1,e,!0);var t=new l.Deferred;return this.repo_.onDisconnectCancel(this.path_,t.wrapCallback(e)),t.promise},e.prototype.remove=function(e){l.validateArgCount("OnDisconnect.remove",0,1,arguments.length),de("OnDisconnect.remove",this.path_),l.validateCallback("OnDisconnect.remove",1,e,!0);var t=new l.Deferred;return this.repo_.onDisconnectSet(this.path_,null,t.wrapCallback(e)),t.promise},e.prototype.set=function(e,t){l.validateArgCount("OnDisconnect.set",1,2,arguments.length),de("OnDisconnect.set",this.path_),oe("OnDisconnect.set",1,e,this.path_,!1),l.validateCallback("OnDisconnect.set",2,t,!0);var n=new l.Deferred;return this.repo_.onDisconnectSet(this.path_,e,n.wrapCallback(t)),n.promise},e.prototype.setWithPriority=function(e,t,n){l.validateArgCount("OnDisconnect.setWithPriority",2,3,arguments.length),de("OnDisconnect.setWithPriority",this.path_),oe("OnDisconnect.setWithPriority",1,e,this.path_,!1),se("OnDisconnect.setWithPriority",2,t,!1),l.validateCallback("OnDisconnect.setWithPriority",3,n,!0);var r=new l.Deferred;return this.repo_.onDisconnectSetWithPriority(this.path_,e,t,r.wrapCallback(n)),r.promise},e.prototype.update=function(e,t){if(l.validateArgCount("OnDisconnect.update",1,2,arguments.length),de("OnDisconnect.update",this.path_),Array.isArray(e)){for(var n={},r=0;r<e.length;++r)n[""+r]=e[r];e=n,T("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}ae("OnDisconnect.update",1,e,this.path_,!1),l.validateCallback("OnDisconnect.update",2,t,!0);var o=new l.Deferred;return this.repo_.onDisconnectUpdate(this.path_,e,o.wrapCallback(t)),o.promise},e}(),he=function(){function e(e,t){this.committed=e,this.snapshot=t}return e.prototype.toJSON=function(){return l.validateArgCount("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},e}(),me=(Q="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",K=0,G=[],function(e){var t,n=e===K;K=e;var r=new Array(8);for(t=7;t>=0;t--)r[t]=Q.charAt(e%64),e=Math.floor(e/64);l.assert(0===e,"Cannot push at time == 0");var o=r.join("");if(n){for(t=11;t>=0&&63===G[t];t--)G[t]=0;G[t]++}else for(t=0;t<12;t++)G[t]=Math.floor(64*Math.random());for(t=0;t<12;t++)o+=Q.charAt(G[t]);return l.assert(20===o.length,"nextPushId: Length should be 20."),o}),ge=function(){function e(e,t){this.name=e,this.node=t}return e.Wrap=function(t,n){return new e(t,n)},e}(),be=function(){function e(){}return e.prototype.getCompare=function(){return this.compare.bind(this)},e.prototype.indexedValueChanged=function(e,t){var n=new ge(I,e),r=new ge(I,t);return 0!==this.compare(n,r)},e.prototype.minPost=function(){return ge.MIN},e}(),ve=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s.__extends(t,e),Object.defineProperty(t,"__EMPTY_NODE",{get:function(){return $},set:function(e){$=e},enumerable:!0,configurable:!0}),t.prototype.compare=function(e,t){return O(e.name,t.name)},t.prototype.isDefinedOn=function(e){throw l.assertionError("KeyIndex.isDefinedOn not expected to be called.")},t.prototype.indexedValueChanged=function(e,t){return!1},t.prototype.minPost=function(){return ge.MIN},t.prototype.maxPost=function(){return new ge(N,$)},t.prototype.makePost=function(e,t){return l.assert("string"==typeof e,"KeyIndex indexValue must always be a string."),new ge(e,$)},t.prototype.toString=function(){return".key"},t}(be),ye=new ve;var we,xe,_e,ke=function(e){return"number"==typeof e?"number:"+j(e):"string:"+e},Ee=function(e){if(e.isLeafNode()){var t=e.val();l.assert("string"==typeof t||"number"==typeof t||"object"==typeof t&&l.contains(t,".sv"),"Priority must be a string or number.")}else l.assert(e===Y||e.isEmpty(),"priority of unexpected type.");l.assert(e===Y||e.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},Ce=function(){function e(t,n){void 0===n&&(n=e.__childrenNodeConstructor.EMPTY_NODE),this.value_=t,this.priorityNode_=n,this.lazyHash_=null,l.assert(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),Ee(this.priorityNode_)}return Object.defineProperty(e,"__childrenNodeConstructor",{get:function(){return we},set:function(e){we=e},enumerable:!0,configurable:!0}),e.prototype.isLeafNode=function(){return!0},e.prototype.getPriority=function(){return this.priorityNode_},e.prototype.updatePriority=function(t){return new e(this.value_,t)},e.prototype.getImmediateChild=function(t){return".priority"===t?this.priorityNode_:e.__childrenNodeConstructor.EMPTY_NODE},e.prototype.getChild=function(t){return t.isEmpty()?this:".priority"===t.getFront()?this.priorityNode_:e.__childrenNodeConstructor.EMPTY_NODE},e.prototype.hasChild=function(){return!1},e.prototype.getPredecessorChildName=function(e,t){return null},e.prototype.updateImmediateChild=function(t,n){return".priority"===t?this.updatePriority(n):n.isEmpty()&&".priority"!==t?this:e.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(t,n).updatePriority(this.priorityNode_)},e.prototype.updateChild=function(t,n){var r=t.getFront();return null===r?n:n.isEmpty()&&".priority"!==r?this:(l.assert(".priority"!==r||1===t.getLength(),".priority must be the last token in a path"),this.updateImmediateChild(r,e.__childrenNodeConstructor.EMPTY_NODE.updateChild(t.popFront(),n)))},e.prototype.isEmpty=function(){return!1},e.prototype.numChildren=function(){return 0},e.prototype.forEachChild=function(e,t){return!1},e.prototype.val=function(e){return e&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},e.prototype.hash=function(){if(null===this.lazyHash_){var e="";this.priorityNode_.isEmpty()||(e+="priority:"+ke(this.priorityNode_.val())+":");var t=typeof this.value_;e+=t+":",e+="number"===t?j(this.value_):this.value_,this.lazyHash_=b(e)}return this.lazyHash_},e.prototype.getValue=function(){return this.value_},e.prototype.compareTo=function(t){return t===e.__childrenNodeConstructor.EMPTY_NODE?1:t instanceof e.__childrenNodeConstructor?-1:(l.assert(t.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(t))},e.prototype.compareToLeafNode_=function(t){var n=typeof t.value_,r=typeof this.value_,o=e.VALUE_TYPE_ORDER.indexOf(n),i=e.VALUE_TYPE_ORDER.indexOf(r);return l.assert(o>=0,"Unknown leaf type: "+n),l.assert(i>=0,"Unknown leaf type: "+r),o===i?"object"===r?0:this.value_<t.value_?-1:this.value_===t.value_?0:1:i-o},e.prototype.withIndex=function(){return this},e.prototype.isIndexed=function(){return!0},e.prototype.equals=function(e){if(e===this)return!0;if(e.isLeafNode()){var t=e;return this.value_===t.value_&&this.priorityNode_.equals(t.priorityNode_)}return!1},e.VALUE_TYPE_ORDER=["object","boolean","number","string"],e}();var Te,Se,Ie=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s.__extends(t,e),t.prototype.compare=function(e,t){var n=e.node.getPriority(),r=t.node.getPriority(),o=n.compareTo(r);return 0===o?O(e.name,t.name):o},t.prototype.isDefinedOn=function(e){return!e.getPriority().isEmpty()},t.prototype.indexedValueChanged=function(e,t){return!e.getPriority().equals(t.getPriority())},t.prototype.minPost=function(){return ge.MIN},t.prototype.maxPost=function(){return new ge(N,new Ce("[PRIORITY-POST]",_e))},t.prototype.makePost=function(e,t){var n=xe(e);return new ge(t,new Ce("[PRIORITY-POST]",n))},t.prototype.toString=function(){return".priority"},t}(be)),Ne=function(){function e(e,t,n,r,o){void 0===o&&(o=null),this.isReverse_=r,this.resultGenerator_=o,this.nodeStack_=[];for(var i=1;!e.isEmpty();)if(e=e,i=t?n(e.key,t):1,r&&(i*=-1),i<0)e=this.isReverse_?e.left:e.right;else{if(0===i){this.nodeStack_.push(e);break}this.nodeStack_.push(e),e=this.isReverse_?e.right:e.left}}return e.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var e,t=this.nodeStack_.pop();if(e=this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value},this.isReverse_)for(t=t.left;!t.isEmpty();)this.nodeStack_.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack_.push(t),t=t.left;return e},e.prototype.hasNext=function(){return this.nodeStack_.length>0},e.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var e=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value}},e}(),Oe=function(){function e(t,n,r,o,i){this.key=t,this.value=n,this.color=null!=r?r:e.RED,this.left=null!=o?o:Ae.EMPTY_NODE,this.right=null!=i?i:Ae.EMPTY_NODE}return e.prototype.copy=function(t,n,r,o,i){return new e(null!=t?t:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=o?o:this.left,null!=i?i:this.right)},e.prototype.count=function(){return this.left.count()+1+this.right.count()},e.prototype.isEmpty=function(){return!1},e.prototype.inorderTraversal=function(e){return this.left.inorderTraversal(e)||e(this.key,this.value)||this.right.inorderTraversal(e)},e.prototype.reverseTraversal=function(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)},e.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},e.prototype.minKey=function(){return this.min_().key},e.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},e.prototype.insert=function(e,t,n){var r,o;return(o=(r=n(e,(o=this).key))<0?o.copy(null,null,null,o.left.insert(e,t,n),null):0===r?o.copy(null,t,null,null,null):o.copy(null,null,null,null,o.right.insert(e,t,n))).fixUp_()},e.prototype.removeMin_=function(){if(this.left.isEmpty())return Ae.EMPTY_NODE;var e=this;return e.left.isRed_()||e.left.left.isRed_()||(e=e.moveRedLeft_()),(e=e.copy(null,null,null,e.left.removeMin_(),null)).fixUp_()},e.prototype.remove=function(e,t){var n,r;if(t(e,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(e,t),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===t(e,n.key)){if(n.right.isEmpty())return Ae.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(e,t))}return n.fixUp_()},e.prototype.isRed_=function(){return this.color},e.prototype.fixUp_=function(){var e=this;return e.right.isRed_()&&!e.left.isRed_()&&(e=e.rotateLeft_()),e.left.isRed_()&&e.left.left.isRed_()&&(e=e.rotateRight_()),e.left.isRed_()&&e.right.isRed_()&&(e=e.colorFlip_()),e},e.prototype.moveRedLeft_=function(){var e=this.colorFlip_();return e.right.left.isRed_()&&(e=(e=(e=e.copy(null,null,null,null,e.right.rotateRight_())).rotateLeft_()).colorFlip_()),e},e.prototype.moveRedRight_=function(){var e=this.colorFlip_();return e.left.left.isRed_()&&(e=(e=e.rotateRight_()).colorFlip_()),e},e.prototype.rotateLeft_=function(){var t=this.copy(null,null,e.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)},e.prototype.rotateRight_=function(){var t=this.copy(null,null,e.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)},e.prototype.colorFlip_=function(){var e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)},e.prototype.checkMaxDepth_=function(){var e=this.check_();return Math.pow(2,e)<=this.count()+1},e.prototype.check_=function(){var e;if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");if((e=this.left.check_())!==this.right.check_())throw new Error("Black depths differ");return e+(this.isRed_()?0:1)},e.RED=!0,e.BLACK=!1,e}(),Pe=function(){function e(){}return e.prototype.copy=function(e,t,n,r,o){return this},e.prototype.insert=function(e,t,n){return new Oe(e,t,null)},e.prototype.remove=function(e,t){return this},e.prototype.count=function(){return 0},e.prototype.isEmpty=function(){return!0},e.prototype.inorderTraversal=function(e){return!1},e.prototype.reverseTraversal=function(e){return!1},e.prototype.minKey=function(){return null},e.prototype.maxKey=function(){return null},e.prototype.check_=function(){return 0},e.prototype.isRed_=function(){return!1},e}(),Ae=function(){function e(t,n){void 0===n&&(n=e.EMPTY_NODE),this.comparator_=t,this.root_=n}return e.prototype.insert=function(t,n){return new e(this.comparator_,this.root_.insert(t,n,this.comparator_).copy(null,null,Oe.BLACK,null,null))},e.prototype.remove=function(t){return new e(this.comparator_,this.root_.remove(t,this.comparator_).copy(null,null,Oe.BLACK,null,null))},e.prototype.get=function(e){for(var t,n=this.root_;!n.isEmpty();){if(0===(t=this.comparator_(e,n.key)))return n.value;t<0?n=n.left:t>0&&(n=n.right)}return null},e.prototype.getPredecessorKey=function(e){for(var t,n=this.root_,r=null;!n.isEmpty();){if(0===(t=this.comparator_(e,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}t<0?n=n.left:t>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},e.prototype.isEmpty=function(){return this.root_.isEmpty()},e.prototype.count=function(){return this.root_.count()},e.prototype.minKey=function(){return this.root_.minKey()},e.prototype.maxKey=function(){return this.root_.maxKey()},e.prototype.inorderTraversal=function(e){return this.root_.inorderTraversal(e)},e.prototype.reverseTraversal=function(e){return this.root_.reverseTraversal(e)},e.prototype.getIterator=function(e){return new Ne(this.root_,null,this.comparator_,!1,e)},e.prototype.getIteratorFrom=function(e,t){return new Ne(this.root_,e,this.comparator_,!1,t)},e.prototype.getReverseIteratorFrom=function(e,t){return new Ne(this.root_,e,this.comparator_,!0,t)},e.prototype.getReverseIterator=function(e){return new Ne(this.root_,null,this.comparator_,!0,e)},e.EMPTY_NODE=new Pe,e}(),Re=Math.log(2),De=function(){function e(e){var t;this.count=(t=e+1,parseInt(Math.log(t)/Re,10)),this.current_=this.count-1;var n,r=(n=this.count,parseInt(Array(n+1).join("1"),2));this.bits_=e+1&r}return e.prototype.nextBitIsOne=function(){var e=!(this.bits_&1<<this.current_);return this.current_--,e},e}(),Le=function(e,t,n,r){e.sort(t);var o=function(t,r){var i,a,s=r-t;if(0==s)return null;if(1==s)return i=e[t],a=n?n(i):i,new Oe(a,i.node,Oe.BLACK,null,null);var l=parseInt(s/2,10)+t,c=o(t,l),u=o(l+1,r);return i=e[l],a=n?n(i):i,new Oe(a,i.node,Oe.BLACK,c,u)},i=function(t){for(var r=null,i=null,a=e.length,s=function(t,r){var i=a-t,s=a;a-=t;var c=o(i+1,s),u=e[i],d=n?n(u):u;l(new Oe(d,u.node,r,null,c))},l=function(e){r?(r.left=e,r=e):(i=e,r=e)},c=0;c<t.count;++c){var u=t.nextBitIsOne(),d=Math.pow(2,t.count-(c+1));u?s(d,Oe.BLACK):(s(d,Oe.BLACK),s(d,Oe.RED))}return i}(new De(e.length));return new Ae(r||t,i)},je={},Me=function(){function e(e,t){this.indexes_=e,this.indexSet_=t}return Object.defineProperty(e,"Default",{get:function(){return l.assert(je&&Ie,"ChildrenNode.ts has not been loaded"),Te=Te||new e({".priority":je},{".priority":Ie})},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var t=l.safeGet(this.indexes_,e);if(!t)throw new Error("No index defined for "+e);return t===je?null:t},e.prototype.hasIndex=function(e){return l.contains(this.indexSet_,e.toString())},e.prototype.addIndex=function(t,n){l.assert(t!==ye,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,o=[],i=!1,a=n.getIterator(ge.Wrap),s=a.getNext();s;)i=i||t.isDefinedOn(s.node),o.push(s),s=a.getNext();r=i?Le(o,t.getCompare()):je;var c=t.toString(),u=l.clone(this.indexSet_);u[c]=t;var d=l.clone(this.indexes_);return d[c]=r,new e(d,u)},e.prototype.addToIndexes=function(t,n){var r=this;return new e(l.map(this.indexes_,function(e,o){var i=l.safeGet(r.indexSet_,o);if(l.assert(i,"Missing index implementation for "+o),e===je){if(i.isDefinedOn(t.node)){for(var a=[],s=n.getIterator(ge.Wrap),c=s.getNext();c;)c.name!=t.name&&a.push(c),c=s.getNext();return a.push(t),Le(a,i.getCompare())}return je}var u=n.get(t.name),d=e;return u&&(d=d.remove(new ge(t.name,u))),d.insert(t,t.node)}),this.indexSet_)},e.prototype.removeFromIndexes=function(t,n){return new e(l.map(this.indexes_,function(e){if(e===je)return e;var r=n.get(t.name);return r?e.remove(new ge(t.name,r)):e}),this.indexSet_)},e}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Fe(e,t){return O(e.name,t.name)}function Ue(e,t){return O(e,t)}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ze=function(){function e(e,t,n){this.children_=e,this.priorityNode_=t,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&Ee(this.priorityNode_),this.children_.isEmpty()&&l.assert(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(e,"EMPTY_NODE",{get:function(){return Se||(Se=new e(new Ae(Ue),null,Me.Default))},enumerable:!0,configurable:!0}),e.prototype.isLeafNode=function(){return!1},e.prototype.getPriority=function(){return this.priorityNode_||Se},e.prototype.updatePriority=function(t){return this.children_.isEmpty()?this:new e(this.children_,t,this.indexMap_)},e.prototype.getImmediateChild=function(e){if(".priority"===e)return this.getPriority();var t=this.children_.get(e);return null===t?Se:t},e.prototype.getChild=function(e){var t=e.getFront();return null===t?this:this.getImmediateChild(t).getChild(e.popFront())},e.prototype.hasChild=function(e){return null!==this.children_.get(e)},e.prototype.updateImmediateChild=function(t,n){if(l.assert(n,"We should always be passing snapshot nodes"),".priority"===t)return this.updatePriority(n);var r,o=new ge(t,n),i=void 0,a=void 0;return n.isEmpty()?(i=this.children_.remove(t),a=this.indexMap_.removeFromIndexes(o,this.children_)):(i=this.children_.insert(t,n),a=this.indexMap_.addToIndexes(o,this.children_)),r=i.isEmpty()?Se:this.priorityNode_,new e(i,r,a)},e.prototype.updateChild=function(e,t){var n=e.getFront();if(null===n)return t;l.assert(".priority"!==e.getFront()||1===e.getLength(),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(e.popFront(),t);return this.updateImmediateChild(n,r)},e.prototype.isEmpty=function(){return this.children_.isEmpty()},e.prototype.numChildren=function(){return this.children_.count()},e.prototype.val=function(t){if(this.isEmpty())return null;var n={},r=0,o=0,i=!0;if(this.forEachChild(Ie,function(a,s){n[a]=s.val(t),r++,i&&e.INTEGER_REGEXP_.test(a)?o=Math.max(o,Number(a)):i=!1}),!t&&i&&o<2*r){var a=[];for(var s in n)a[s]=n[s];return a}return t&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},e.prototype.hash=function(){if(null===this.lazyHash_){var e="";this.getPriority().isEmpty()||(e+="priority:"+ke(this.getPriority().val())+":"),this.forEachChild(Ie,function(t,n){var r=n.hash();""!==r&&(e+=":"+t+":"+r)}),this.lazyHash_=""===e?"":b(e)}return this.lazyHash_},e.prototype.getPredecessorChildName=function(e,t,n){var r=this.resolveIndex_(n);if(r){var o=r.getPredecessorKey(new ge(e,t));return o?o.name:null}return this.children_.getPredecessorKey(e)},e.prototype.getFirstChildName=function(e){var t=this.resolveIndex_(e);if(t){var n=t.minKey();return n&&n.name}return this.children_.minKey()},e.prototype.getFirstChild=function(e){var t=this.getFirstChildName(e);return t?new ge(t,this.children_.get(t)):null},e.prototype.getLastChildName=function(e){var t=this.resolveIndex_(e);if(t){var n=t.maxKey();return n&&n.name}return this.children_.maxKey()},e.prototype.getLastChild=function(e){var t=this.getLastChildName(e);return t?new ge(t,this.children_.get(t)):null},e.prototype.forEachChild=function(e,t){var n=this.resolveIndex_(e);return n?n.inorderTraversal(function(e){return t(e.name,e.node)}):this.children_.inorderTraversal(t)},e.prototype.getIterator=function(e){return this.getIteratorFrom(e.minPost(),e)},e.prototype.getIteratorFrom=function(e,t){var n=this.resolveIndex_(t);if(n)return n.getIteratorFrom(e,function(e){return e});for(var r=this.children_.getIteratorFrom(e.name,ge.Wrap),o=r.peek();null!=o&&t.compare(o,e)<0;)r.getNext(),o=r.peek();return r},e.prototype.getReverseIterator=function(e){return this.getReverseIteratorFrom(e.maxPost(),e)},e.prototype.getReverseIteratorFrom=function(e,t){var n=this.resolveIndex_(t);if(n)return n.getReverseIteratorFrom(e,function(e){return e});for(var r=this.children_.getReverseIteratorFrom(e.name,ge.Wrap),o=r.peek();null!=o&&t.compare(o,e)>0;)r.getNext(),o=r.peek();return r},e.prototype.compareTo=function(e){return this.isEmpty()?e.isEmpty()?0:-1:e.isLeafNode()||e.isEmpty()?1:e===We?-1:0},e.prototype.withIndex=function(t){if(t===ye||this.indexMap_.hasIndex(t))return this;var n=this.indexMap_.addIndex(t,this.children_);return new e(this.children_,this.priorityNode_,n)},e.prototype.isIndexed=function(e){return e===ye||this.indexMap_.hasIndex(e)},e.prototype.equals=function(e){if(e===this)return!0;if(e.isLeafNode())return!1;var t=e;if(this.getPriority().equals(t.getPriority())){if(this.children_.count()===t.children_.count()){for(var n=this.getIterator(Ie),r=t.getIterator(Ie),o=n.getNext(),i=r.getNext();o&&i;){if(o.name!==i.name||!o.node.equals(i.node))return!1;o=n.getNext(),i=r.getNext()}return null===o&&null===i}return!1}return!1},e.prototype.resolveIndex_=function(e){return e===ye?null:this.indexMap_.get(e.toString())},e.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,e}(),We=new(function(e){function t(){return e.call(this,new Ae(Ue),ze.EMPTY_NODE,Me.Default)||this}return s.__extends(t,e),t.prototype.compareTo=function(e){return e===this?0:1},t.prototype.equals=function(e){return e===this},t.prototype.getPriority=function(){return this},t.prototype.getImmediateChild=function(e){return ze.EMPTY_NODE},t.prototype.isEmpty=function(){return!1},t}(ze));Object.defineProperties(ge,{MIN:{value:new ge(I,ze.EMPTY_NODE)},MAX:{value:new ge(N,We)}}),ve.__EMPTY_NODE=ze.EMPTY_NODE,Ce.__childrenNodeConstructor=ze,Y=We,function(e){_e=e}(We);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Ve=!0;function Be(e,t){if(void 0===t&&(t=null),null===e)return ze.EMPTY_NODE;if("object"==typeof e&&".priority"in e&&(t=e[".priority"]),l.assert(null===t||"string"==typeof t||"number"==typeof t||"object"==typeof t&&".sv"in t,"Invalid priority type found: "+typeof t),"object"==typeof e&&".value"in e&&null!==e[".value"]&&(e=e[".value"]),"object"!=typeof e||".sv"in e)return new Ce(e,Be(t));if(e instanceof Array||!Ve){var n=ze.EMPTY_NODE,r=e;return l.forEach(r,function(e,t){if(l.contains(r,e)&&"."!==e.substring(0,1)){var o=Be(t);!o.isLeafNode()&&o.isEmpty()||(n=n.updateImmediateChild(e,o))}}),n.updatePriority(Be(t))}var o=[],i=!1,a=e;if(l.forEach(a,function(e,t){if("string"!=typeof e||"."!==e.substring(0,1)){var n=Be(a[e]);n.isEmpty()||(i=i||!n.getPriority().isEmpty(),o.push(new ge(e,n)))}}),0==o.length)return ze.EMPTY_NODE;var s=Le(o,Fe,function(e){return e.name},Ue);if(i){var c=Le(o,Ie.getCompare());return new ze(s,Be(t),new Me({".priority":c},{".priority":Ie}))}return new ze(s,Be(t),Me.Default)}!function(e){xe=e}(Be);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var qe,He,Qe=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s.__extends(t,e),t.prototype.compare=function(e,t){var n=e.node.compareTo(t.node);return 0===n?O(e.name,t.name):n},t.prototype.isDefinedOn=function(e){return!0},t.prototype.indexedValueChanged=function(e,t){return!e.equals(t)},t.prototype.minPost=function(){return ge.MIN},t.prototype.maxPost=function(){return ge.MAX},t.prototype.makePost=function(e,t){var n=Be(e);return new ge(t,n)},t.prototype.toString=function(){return".value"},t}(be)),Ke=function(e){function t(t){var n=e.call(this)||this;return n.indexPath_=t,l.assert(!t.isEmpty()&&".priority"!==t.getFront(),"Can't create PathIndex with empty path or .priority key"),n}return s.__extends(t,e),t.prototype.extractChild=function(e){return e.getChild(this.indexPath_)},t.prototype.isDefinedOn=function(e){return!e.getChild(this.indexPath_).isEmpty()},t.prototype.compare=function(e,t){var n=this.extractChild(e.node),r=this.extractChild(t.node),o=n.compareTo(r);return 0===o?O(e.name,t.name):o},t.prototype.makePost=function(e,t){var n=Be(e),r=ze.EMPTY_NODE.updateChild(this.indexPath_,n);return new ge(t,r)},t.prototype.maxPost=function(){var e=ze.EMPTY_NODE.updateChild(this.indexPath_,We);return new ge(N,e)},t.prototype.toString=function(){return this.indexPath_.slice().join("/")},t}(be),Ge=function(){function e(e,t,n){this.node_=e,this.ref_=t,this.index_=n}return e.prototype.val=function(){return l.validateArgCount("DataSnapshot.val",0,0,arguments.length),this.node_.val()},e.prototype.exportVal=function(){return l.validateArgCount("DataSnapshot.exportVal",0,0,arguments.length),this.node_.val(!0)},e.prototype.toJSON=function(){return l.validateArgCount("DataSnapshot.toJSON",0,1,arguments.length),this.exportVal()},e.prototype.exists=function(){return l.validateArgCount("DataSnapshot.exists",0,0,arguments.length),!this.node_.isEmpty()},e.prototype.child=function(t){l.validateArgCount("DataSnapshot.child",0,1,arguments.length),t=String(t),ue("DataSnapshot.child",1,t,!1);var n=new V(t),r=this.ref_.child(n);return new e(this.node_.getChild(n),r,Ie)},e.prototype.hasChild=function(e){l.validateArgCount("DataSnapshot.hasChild",1,1,arguments.length),ue("DataSnapshot.hasChild",1,e,!1);var t=new V(e);return!this.node_.getChild(t).isEmpty()},e.prototype.getPriority=function(){return l.validateArgCount("DataSnapshot.getPriority",0,0,arguments.length),this.node_.getPriority().val()},e.prototype.forEach=function(t){var n=this;return l.validateArgCount("DataSnapshot.forEach",1,1,arguments.length),l.validateCallback("DataSnapshot.forEach",1,t,!1),!this.node_.isLeafNode()&&!!this.node_.forEachChild(this.index_,function(r,o){return t(new e(o,n.ref_.child(r),Ie))})},e.prototype.hasChildren=function(){return l.validateArgCount("DataSnapshot.hasChildren",0,0,arguments.length),!this.node_.isLeafNode()&&!this.node_.isEmpty()},Object.defineProperty(e.prototype,"key",{get:function(){return this.ref_.getKey()},enumerable:!0,configurable:!0}),e.prototype.numChildren=function(){return l.validateArgCount("DataSnapshot.numChildren",0,0,arguments.length),this.node_.numChildren()},e.prototype.getRef=function(){return l.validateArgCount("DataSnapshot.ref",0,0,arguments.length),this.ref_},Object.defineProperty(e.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),e}(),$e=function(){function e(e,t,n,r){this.eventType=e,this.eventRegistration=t,this.snapshot=n,this.prevName=r}return e.prototype.getPath=function(){var e=this.snapshot.getRef();return"value"===this.eventType?e.path:e.getParent().path},e.prototype.getEventType=function(){return this.eventType},e.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},e.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+l.stringify(this.snapshot.exportVal())},e}(),Ye=function(){function e(e,t,n){this.eventRegistration=e,this.error=t,this.path=n}return e.prototype.getPath=function(){return this.path},e.prototype.getEventType=function(){return"cancel"},e.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},e.prototype.toString=function(){return this.path.toString()+":cancel"},e}(),Xe=function(){function e(e,t,n){this.callback_=e,this.cancelCallback_=t,this.context_=n}return e.prototype.respondsTo=function(e){return"value"===e},e.prototype.createEvent=function(e,t){var n=t.getQueryParams().getIndex();return new $e("value",this,new Ge(e.snapshotNode,t.getRef(),n))},e.prototype.getEventRunner=function(e){var t=this.context_;if("cancel"===e.getEventType()){l.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(t,e.error)}}var r=this.callback_;return function(){r.call(t,e.snapshot)}},e.prototype.createCancelEvent=function(e,t){return this.cancelCallback_?new Ye(this,e,t):null},e.prototype.matches=function(t){return t instanceof e&&(!t.callback_||!this.callback_||t.callback_===this.callback_&&t.context_===this.context_)},e.prototype.hasAnyCallback=function(){return null!==this.callback_},e}(),Je=function(){function e(e,t,n){this.callbacks_=e,this.cancelCallback_=t,this.context_=n}return e.prototype.respondsTo=function(e){var t="children_added"===e?"child_added":e;return t="children_removed"===t?"child_removed":t,l.contains(this.callbacks_,t)},e.prototype.createCancelEvent=function(e,t){return this.cancelCallback_?new Ye(this,e,t):null},e.prototype.createEvent=function(e,t){l.assert(null!=e.childName,"Child events should have a childName.");var n=t.getRef().child(e.childName),r=t.getQueryParams().getIndex();return new $e(e.type,this,new Ge(e.snapshotNode,n,r),e.prevName)},e.prototype.getEventRunner=function(e){var t=this.context_;if("cancel"===e.getEventType()){l.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(t,e.error)}}var r=this.callbacks_[e.eventType];return function(){r.call(t,e.snapshot,e.prevName)}},e.prototype.matches=function(t){if(t instanceof e){if(!this.callbacks_||!t.callbacks_)return!0;if(this.context_===t.context_){var n=l.getCount(t.callbacks_);if(n===l.getCount(this.callbacks_)){if(1===n){var r=l.getAnyKey(t.callbacks_),o=l.getAnyKey(this.callbacks_);return!(o!==r||t.callbacks_[r]&&this.callbacks_[o]&&t.callbacks_[r]!==this.callbacks_[o])}return l.every(this.callbacks_,function(e,n){return t.callbacks_[e]===n})}}}return!1},e.prototype.hasAnyCallback=function(){return null!==this.callbacks_},e}(),Ze=function(){function e(e,t,n,r){this.repo=e,this.path=t,this.queryParams_=n,this.orderByCalled_=r}return Object.defineProperty(e,"__referenceConstructor",{get:function(){return l.assert(qe,"Reference.ts has not been loaded"),qe},set:function(e){qe=e},enumerable:!0,configurable:!0}),e.validateQueryEndpoints_=function(e){var t=null,n=null;if(e.hasStart()&&(t=e.getIndexStartValue()),e.hasEnd()&&(n=e.getIndexEndValue()),e.getIndex()===ye){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",o="Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";if(e.hasStart()){if(e.getIndexStartName()!=I)throw new Error(r);if("string"!=typeof t)throw new Error(o)}if(e.hasEnd()){if(e.getIndexEndName()!=N)throw new Error(r);if("string"!=typeof n)throw new Error(o)}}else if(e.getIndex()===Ie){if(null!=t&&!re(t)||null!=n&&!re(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(l.assert(e.getIndex()instanceof Ke||e.getIndex()===Qe,"unknown index type."),null!=t&&"object"==typeof t||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")},e.validateLimit_=function(e){if(e.hasStart()&&e.hasEnd()&&e.hasLimit()&&!e.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")},e.prototype.validateNoPreviousOrderByCall_=function(e){if(!0===this.orderByCalled_)throw new Error(e+": You can't combine multiple orderBy calls.")},e.prototype.getQueryParams=function(){return this.queryParams_},e.prototype.getRef=function(){return l.validateArgCount("Query.ref",0,0,arguments.length),new e.__referenceConstructor(this.repo,this.path)},e.prototype.on=function(t,n,r,o){l.validateArgCount("Query.on",2,4,arguments.length),le("Query.on",1,t,!1),l.validateCallback("Query.on",2,n,!1);var i=e.getCancelAndContextArgs_("Query.on",r,o);if("value"===t)this.onValueEvent(n,i.cancel,i.context);else{var a={};a[t]=n,this.onChildEvent(a,i.cancel,i.context)}return n},e.prototype.onValueEvent=function(e,t,n){var r=new Xe(e,t||null,n||null);this.repo.addEventCallbackForQuery(this,r)},e.prototype.onChildEvent=function(e,t,n){var r=new Je(e,t,n);this.repo.addEventCallbackForQuery(this,r)},e.prototype.off=function(e,t,n){l.validateArgCount("Query.off",0,3,arguments.length),le("Query.off",1,e,!0),l.validateCallback("Query.off",2,t,!0),l.validateContextObject("Query.off",3,n,!0);var r=null,o=null;"value"===e?r=new Xe(t||null,null,n||null):e&&(t&&((o={})[e]=t),r=new Je(o,null,n||null));this.repo.removeEventCallbackForQuery(this,r)},e.prototype.once=function(t,n,r,o){var i=this;l.validateArgCount("Query.once",1,4,arguments.length),le("Query.once",1,t,!1),l.validateCallback("Query.once",2,n,!0);var a=e.getCancelAndContextArgs_("Query.once",r,o),s=!0,c=new l.Deferred;c.promise.catch(function(){});var u=function(e){s&&(s=!1,i.off(t,u),n&&n.bind(a.context)(e),c.resolve(e))};return this.on(t,u,function(e){i.off(t,u),a.cancel&&a.cancel.bind(a.context)(e),c.reject(e)}),c.promise},e.prototype.limitToFirst=function(t){if(l.validateArgCount("Query.limitToFirst",1,1,arguments.length),"number"!=typeof t||Math.floor(t)!==t||t<=0)throw new Error("Query.limitToFirst: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new e(this.repo,this.path,this.queryParams_.limitToFirst(t),this.orderByCalled_)},e.prototype.limitToLast=function(t){if(l.validateArgCount("Query.limitToLast",1,1,arguments.length),"number"!=typeof t||Math.floor(t)!==t||t<=0)throw new Error("Query.limitToLast: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new e(this.repo,this.path,this.queryParams_.limitToLast(t),this.orderByCalled_)},e.prototype.orderByChild=function(t){if(l.validateArgCount("Query.orderByChild",1,1,arguments.length),"$key"===t)throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===t)throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===t)throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');ue("Query.orderByChild",1,t,!1),this.validateNoPreviousOrderByCall_("Query.orderByChild");var n=new V(t);if(n.isEmpty())throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");var r=new Ke(n),o=this.queryParams_.orderBy(r);return e.validateQueryEndpoints_(o),new e(this.repo,this.path,o,!0)},e.prototype.orderByKey=function(){l.validateArgCount("Query.orderByKey",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByKey");var t=this.queryParams_.orderBy(ye);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.orderByPriority=function(){l.validateArgCount("Query.orderByPriority",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByPriority");var t=this.queryParams_.orderBy(Ie);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.orderByValue=function(){l.validateArgCount("Query.orderByValue",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByValue");var t=this.queryParams_.orderBy(Qe);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.startAt=function(t,n){void 0===t&&(t=null),l.validateArgCount("Query.startAt",0,2,arguments.length),oe("Query.startAt",1,t,this.path,!0),ce("Query.startAt",2,n,!0);var r=this.queryParams_.startAt(t,n);if(e.validateLimit_(r),e.validateQueryEndpoints_(r),this.queryParams_.hasStart())throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return void 0===t&&(t=null,n=null),new e(this.repo,this.path,r,this.orderByCalled_)},e.prototype.endAt=function(t,n){void 0===t&&(t=null),l.validateArgCount("Query.endAt",0,2,arguments.length),oe("Query.endAt",1,t,this.path,!0),ce("Query.endAt",2,n,!0);var r=this.queryParams_.endAt(t,n);if(e.validateLimit_(r),e.validateQueryEndpoints_(r),this.queryParams_.hasEnd())throw new Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new e(this.repo,this.path,r,this.orderByCalled_)},e.prototype.equalTo=function(e,t){if(l.validateArgCount("Query.equalTo",1,2,arguments.length),oe("Query.equalTo",1,e,this.path,!1),ce("Query.equalTo",2,t,!0),this.queryParams_.hasStart())throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.queryParams_.hasEnd())throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.startAt(e,t).endAt(e,t)},e.prototype.toString=function(){return l.validateArgCount("Query.toString",0,0,arguments.length),this.repo.toString()+this.path.toUrlEncodedString()},e.prototype.toJSON=function(){return l.validateArgCount("Query.toJSON",0,1,arguments.length),this.toString()},e.prototype.queryObject=function(){return this.queryParams_.getQueryObject()},e.prototype.queryIdentifier=function(){var e=this.queryObject(),t=R(e);return"{}"===t?"default":t},e.prototype.isEqual=function(t){if(l.validateArgCount("Query.isEqual",1,1,arguments.length),!(t instanceof e)){throw new Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.")}var n=this.repo===t.repo,r=this.path.equals(t.path),o=this.queryIdentifier()===t.queryIdentifier();return n&&r&&o},e.getCancelAndContextArgs_=function(e,t,n){var r={cancel:null,context:null};if(t&&n)r.cancel=t,l.validateCallback(e,3,r.cancel,!0),r.context=n,l.validateContextObject(e,4,r.context,!0);else if(t)if("object"==typeof t&&null!==t)r.context=t;else{if("function"!=typeof t)throw new Error(l.errorPrefix(e,3,!0)+" must either be a cancel callback or a context object.");r.cancel=t}return r},Object.defineProperty(e.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),e}(),et=function(){function e(){this.set={}}return e.prototype.add=function(e,t){this.set[e]=null===t||t},e.prototype.contains=function(e){return l.contains(this.set,e)},e.prototype.get=function(e){return this.contains(e)?this.set[e]:void 0},e.prototype.remove=function(e){delete this.set[e]},e.prototype.clear=function(){this.set={}},e.prototype.isEmpty=function(){return l.isEmpty(this.set)},e.prototype.count=function(){return l.getCount(this.set)},e.prototype.each=function(e){l.forEach(this.set,function(t,n){return e(t,n)})},e.prototype.keys=function(){var e=[];return l.forEach(this.set,function(t){e.push(t)}),e},e}(),tt=function(){function e(){this.value_=null,this.children_=null}return e.prototype.find=function(e){if(null!=this.value_)return this.value_.getChild(e);if(e.isEmpty()||null==this.children_)return null;var t=e.getFront();return e=e.popFront(),this.children_.contains(t)?this.children_.get(t).find(e):null},e.prototype.remember=function(t,n){if(t.isEmpty())this.value_=n,this.children_=null;else if(null!==this.value_)this.value_=this.value_.updateChild(t,n);else{null==this.children_&&(this.children_=new et);var r=t.getFront();this.children_.contains(r)||this.children_.add(r,new e);var o=this.children_.get(r);t=t.popFront(),o.remember(t,n)}},e.prototype.forget=function(e){if(e.isEmpty())return this.value_=null,this.children_=null,!0;if(null!==this.value_){if(this.value_.isLeafNode())return!1;var t=this.value_;this.value_=null;var n=this;return t.forEachChild(Ie,function(e,t){n.remember(new V(e),t)}),this.forget(e)}if(null!==this.children_){var r=e.getFront();if(e=e.popFront(),this.children_.contains(r))this.children_.get(r).forget(e)&&this.children_.remove(r);return!!this.children_.isEmpty()&&(this.children_=null,!0)}return!0},e.prototype.forEachTree=function(e,t){null!==this.value_?t(e,this.value_):this.forEachChild(function(n,r){var o=new V(e.toString()+"/"+n);r.forEachTree(o,t)})},e.prototype.forEachChild=function(e){null!==this.children_&&this.children_.each(function(t,n){e(t,n)})},e}(),nt=function(e,t){return e&&"object"==typeof e?(l.assert(".sv"in e,"Unexpected leaf node or priority contents"),t[e[".sv"]]):e},rt=function(e,t){var n,r=e.getPriority().val(),o=nt(r,t);if(e.isLeafNode()){var i=e,a=nt(i.getValue(),t);return a!==i.getValue()||o!==i.getPriority().val()?new Ce(a,Be(o)):e}var s=e;return n=s,o!==s.getPriority().val()&&(n=n.updatePriority(new Ce(o))),s.forEachChild(Ie,function(e,r){var o=rt(r,t);o!==r&&(n=n.updateImmediateChild(e,o))}),n};!function(e){e[e.OVERWRITE=0]="OVERWRITE",e[e.MERGE=1]="MERGE",e[e.ACK_USER_WRITE=2]="ACK_USER_WRITE",e[e.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(He||(He={}));var ot,it,at=function(){function e(e,t,n,r){this.fromUser=e,this.fromServer=t,this.queryId=n,this.tagged=r,l.assert(!r||t,"Tagged queries must be from server.")}return e.User=new e(!0,!1,null,!1),e.Server=new e(!1,!0,null,!1),e.forServerTaggedQuery=function(t){return new e(!1,!0,t,!0)},e}(),st=function(){function e(e,t,n){this.path=e,this.affectedTree=t,this.revert=n,this.type=He.ACK_USER_WRITE,this.source=at.User}return e.prototype.operationForChild=function(t){if(this.path.isEmpty()){if(null!=this.affectedTree.value)return l.assert(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new V(t));return new e(V.Empty,n,this.revert)}return l.assert(this.path.getFront()===t,"operationForChild called for unrelated child."),new e(this.path.popFront(),this.affectedTree,this.revert)},e}(),lt=function(){return ot||(ot=new Ae(P)),ot},ct=function(){function e(e,t){void 0===t&&(t=lt()),this.value=e,this.children=t}return e.fromObject=function(t){var n=e.Empty;return l.forEach(t,function(e,t){n=n.set(new V(e),t)}),n},e.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},e.prototype.findRootMostMatchingPathAndValue=function(e,t){if(null!=this.value&&t(this.value))return{path:V.Empty,value:this.value};if(e.isEmpty())return null;var n=e.getFront(),r=this.children.get(n);if(null!==r){var o=r.findRootMostMatchingPathAndValue(e.popFront(),t);return null!=o?{path:new V(n).child(o.path),value:o.value}:null}return null},e.prototype.findRootMostValueAndPath=function(e){return this.findRootMostMatchingPathAndValue(e,function(){return!0})},e.prototype.subtree=function(t){if(t.isEmpty())return this;var n=t.getFront(),r=this.children.get(n);return null!==r?r.subtree(t.popFront()):e.Empty},e.prototype.set=function(t,n){if(t.isEmpty())return new e(n,this.children);var r=t.getFront(),o=(this.children.get(r)||e.Empty).set(t.popFront(),n),i=this.children.insert(r,o);return new e(this.value,i)},e.prototype.remove=function(t){if(t.isEmpty())return this.children.isEmpty()?e.Empty:new e(null,this.children);var n=t.getFront(),r=this.children.get(n);if(r){var o=r.remove(t.popFront()),i=void 0;return i=o.isEmpty()?this.children.remove(n):this.children.insert(n,o),null===this.value&&i.isEmpty()?e.Empty:new e(this.value,i)}return this},e.prototype.get=function(e){if(e.isEmpty())return this.value;var t=e.getFront(),n=this.children.get(t);return n?n.get(e.popFront()):null},e.prototype.setTree=function(t,n){if(t.isEmpty())return n;var r=t.getFront(),o=(this.children.get(r)||e.Empty).setTree(t.popFront(),n),i=void 0;return i=o.isEmpty()?this.children.remove(r):this.children.insert(r,o),new e(this.value,i)},e.prototype.fold=function(e){return this.fold_(V.Empty,e)},e.prototype.fold_=function(e,t){var n={};return this.children.inorderTraversal(function(r,o){n[r]=o.fold_(e.child(r),t)}),t(e,this.value,n)},e.prototype.findOnPath=function(e,t){return this.findOnPath_(e,V.Empty,t)},e.prototype.findOnPath_=function(e,t,n){var r=!!this.value&&n(t,this.value);if(r)return r;if(e.isEmpty())return null;var o=e.getFront(),i=this.children.get(o);return i?i.findOnPath_(e.popFront(),t.child(o),n):null},e.prototype.foreachOnPath=function(e,t){return this.foreachOnPath_(e,V.Empty,t)},e.prototype.foreachOnPath_=function(t,n,r){if(t.isEmpty())return this;this.value&&r(n,this.value);var o=t.getFront(),i=this.children.get(o);return i?i.foreachOnPath_(t.popFront(),n.child(o),r):e.Empty},e.prototype.foreach=function(e){this.foreach_(V.Empty,e)},e.prototype.foreach_=function(e,t){this.children.inorderTraversal(function(n,r){r.foreach_(e.child(n),t)}),this.value&&t(e,this.value)},e.prototype.foreachChild=function(e){this.children.inorderTraversal(function(t,n){n.value&&e(t,n.value)})},e.Empty=new e(null),e}(),ut=function(){function e(e,t){this.source=e,this.path=t,this.type=He.LISTEN_COMPLETE}return e.prototype.operationForChild=function(t){return this.path.isEmpty()?new e(this.source,V.Empty):new e(this.source,this.path.popFront())},e}(),dt=function(){function e(e,t,n){this.source=e,this.path=t,this.snap=n,this.type=He.OVERWRITE}return e.prototype.operationForChild=function(t){return this.path.isEmpty()?new e(this.source,V.Empty,this.snap.getImmediateChild(t)):new e(this.source,this.path.popFront(),this.snap)},e}(),pt=function(){function e(e,t,n){this.source=e,this.path=t,this.children=n,this.type=He.MERGE}return e.prototype.operationForChild=function(t){if(this.path.isEmpty()){var n=this.children.subtree(new V(t));return n.isEmpty()?null:n.value?new dt(this.source,V.Empty,n.value):new e(this.source,V.Empty,n)}return l.assert(this.path.getFront()===t,"Can't get a merge for a child not on the path of the operation"),new e(this.source,this.path.popFront(),this.children)},e.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},e}(),ft=function(){function e(e,t,n){this.node_=e,this.fullyInitialized_=t,this.filtered_=n}return e.prototype.isFullyInitialized=function(){return this.fullyInitialized_},e.prototype.isFiltered=function(){return this.filtered_},e.prototype.isCompleteForPath=function(e){if(e.isEmpty())return this.isFullyInitialized()&&!this.filtered_;var t=e.getFront();return this.isCompleteForChild(t)},e.prototype.isCompleteForChild=function(e){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(e)},e.prototype.getNode=function(){return this.node_},e}(),ht=function(){function e(e,t){this.eventCache_=e,this.serverCache_=t}return e.prototype.updateEventSnap=function(t,n,r){return new e(new ft(t,n,r),this.serverCache_)},e.prototype.updateServerSnap=function(t,n,r){return new e(this.eventCache_,new ft(t,n,r))},e.prototype.getEventCache=function(){return this.eventCache_},e.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null},e.prototype.getServerCache=function(){return this.serverCache_},e.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null},e.Empty=new e(new ft(ze.EMPTY_NODE,!1,!1),new ft(ze.EMPTY_NODE,!1,!1)),e}(),mt=function(){function e(e,t,n,r,o){this.type=e,this.snapshotNode=t,this.childName=n,this.oldSnap=r,this.prevName=o}return e.valueChange=function(t){return new e(e.VALUE,t)},e.childAddedChange=function(t,n){return new e(e.CHILD_ADDED,n,t)},e.childRemovedChange=function(t,n){return new e(e.CHILD_REMOVED,n,t)},e.childChangedChange=function(t,n,r){return new e(e.CHILD_CHANGED,n,t,r)},e.childMovedChange=function(t,n){return new e(e.CHILD_MOVED,n,t)},e.CHILD_ADDED="child_added",e.CHILD_REMOVED="child_removed",e.CHILD_CHANGED="child_changed",e.CHILD_MOVED="child_moved",e.VALUE="value",e}(),gt=function(){function e(e){this.index_=e}return e.prototype.updateChild=function(e,t,n,r,o,i){l.assert(e.isIndexed(this.index_),"A node must be indexed if only a child is updated");var a=e.getImmediateChild(t);return a.getChild(r).equals(n.getChild(r))&&a.isEmpty()==n.isEmpty()?e:(null!=i&&(n.isEmpty()?e.hasChild(t)?i.trackChildChange(mt.childRemovedChange(t,a)):l.assert(e.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):a.isEmpty()?i.trackChildChange(mt.childAddedChange(t,n)):i.trackChildChange(mt.childChangedChange(t,n,a))),e.isLeafNode()&&n.isEmpty()?e:e.updateImmediateChild(t,n).withIndex(this.index_))},e.prototype.updateFullNode=function(e,t,n){return null!=n&&(e.isLeafNode()||e.forEachChild(Ie,function(e,r){t.hasChild(e)||n.trackChildChange(mt.childRemovedChange(e,r))}),t.isLeafNode()||t.forEachChild(Ie,function(t,r){if(e.hasChild(t)){var o=e.getImmediateChild(t);o.equals(r)||n.trackChildChange(mt.childChangedChange(t,r,o))}else n.trackChildChange(mt.childAddedChange(t,r))})),t.withIndex(this.index_)},e.prototype.updatePriority=function(e,t){return e.isEmpty()?ze.EMPTY_NODE:e.updatePriority(t)},e.prototype.filtersNodes=function(){return!1},e.prototype.getIndexedFilter=function(){return this},e.prototype.getIndex=function(){return this.index_},e}(),bt=function(){function e(){this.changeMap_={}}return e.prototype.trackChildChange=function(e){var t=e.type,n=e.childName;l.assert(t==mt.CHILD_ADDED||t==mt.CHILD_CHANGED||t==mt.CHILD_REMOVED,"Only child changes supported for tracking"),l.assert(".priority"!==n,"Only non-priority child changes can be tracked.");var r=l.safeGet(this.changeMap_,n);if(r){var o=r.type;if(t==mt.CHILD_ADDED&&o==mt.CHILD_REMOVED)this.changeMap_[n]=mt.childChangedChange(n,e.snapshotNode,r.snapshotNode);else if(t==mt.CHILD_REMOVED&&o==mt.CHILD_ADDED)delete this.changeMap_[n];else if(t==mt.CHILD_REMOVED&&o==mt.CHILD_CHANGED)this.changeMap_[n]=mt.childRemovedChange(n,r.oldSnap);else if(t==mt.CHILD_CHANGED&&o==mt.CHILD_ADDED)this.changeMap_[n]=mt.childAddedChange(n,e.snapshotNode);else{if(t!=mt.CHILD_CHANGED||o!=mt.CHILD_CHANGED)throw l.assertionError("Illegal combination of changes: "+e+" occurred after "+r);this.changeMap_[n]=mt.childChangedChange(n,e.snapshotNode,r.oldSnap)}}else this.changeMap_[n]=e},e.prototype.getChanges=function(){return l.getValues(this.changeMap_)},e}(),vt=new(function(){function e(){}return e.prototype.getCompleteChild=function(e){return null},e.prototype.getChildAfterChild=function(e,t,n){return null},e}()),yt=function(){function e(e,t,n){void 0===n&&(n=null),this.writes_=e,this.viewCache_=t,this.optCompleteServerCache_=n}return e.prototype.getCompleteChild=function(e){var t=this.viewCache_.getEventCache();if(t.isCompleteForChild(e))return t.getNode().getImmediateChild(e);var n=null!=this.optCompleteServerCache_?new ft(this.optCompleteServerCache_,!0,!1):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(e,n)},e.prototype.getChildAfterChild=function(e,t,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap(),o=this.writes_.calcIndexedSlice(r,t,1,n,e);return 0===o.length?null:o[0]},e}(),wt=function(){return function(e,t){this.viewCache=e,this.changes=t}}(),xt=function(){function e(e){this.filter_=e}return e.prototype.assertIndexed=function(e){l.assert(e.getEventCache().getNode().isIndexed(this.filter_.getIndex()),"Event snap not indexed"),l.assert(e.getServerCache().getNode().isIndexed(this.filter_.getIndex()),"Server snap not indexed")},e.prototype.applyOperation=function(t,n,r,o){var i,a,s=new bt;if(n.type===He.OVERWRITE){var c=n;c.source.fromUser?i=this.applyUserOverwrite_(t,c.path,c.snap,r,o,s):(l.assert(c.source.fromServer,"Unknown source."),a=c.source.tagged||t.getServerCache().isFiltered()&&!c.path.isEmpty(),i=this.applyServerOverwrite_(t,c.path,c.snap,r,o,a,s))}else if(n.type===He.MERGE){var u=n;u.source.fromUser?i=this.applyUserMerge_(t,u.path,u.children,r,o,s):(l.assert(u.source.fromServer,"Unknown source."),a=u.source.tagged||t.getServerCache().isFiltered(),i=this.applyServerMerge_(t,u.path,u.children,r,o,a,s))}else if(n.type===He.ACK_USER_WRITE){var d=n;i=d.revert?this.revertUserWrite_(t,d.path,r,o,s):this.ackUserWrite_(t,d.path,d.affectedTree,r,o,s)}else{if(n.type!==He.LISTEN_COMPLETE)throw l.assertionError("Unknown operation type: "+n.type);i=this.listenComplete_(t,n.path,r,s)}var p=s.getChanges();return e.maybeAddValueEvent_(t,i,p),new wt(i,p)},e.maybeAddValueEvent_=function(e,t,n){var r=t.getEventCache();if(r.isFullyInitialized()){var o=r.getNode().isLeafNode()||r.getNode().isEmpty(),i=e.getCompleteEventSnap();(n.length>0||!e.getEventCache().isFullyInitialized()||o&&!r.getNode().equals(i)||!r.getNode().getPriority().equals(i.getPriority()))&&n.push(mt.valueChange(t.getCompleteEventSnap()))}},e.prototype.generateEventCacheAfterServerEvent_=function(e,t,n,r,o){var i=e.getEventCache();if(null!=n.shadowingWrite(t))return e;var a=void 0,s=void 0;if(t.isEmpty())if(l.assert(e.getServerCache().isFullyInitialized(),"If change path is empty, we must have complete server data"),e.getServerCache().isFiltered()){var c=e.getCompleteServerSnap(),u=c instanceof ze?c:ze.EMPTY_NODE,d=n.calcCompleteEventChildren(u);a=this.filter_.updateFullNode(e.getEventCache().getNode(),d,o)}else{var p=n.calcCompleteEventCache(e.getCompleteServerSnap());a=this.filter_.updateFullNode(e.getEventCache().getNode(),p,o)}else{var f=t.getFront();if(".priority"==f){l.assert(1==t.getLength(),"Can't have a priority with additional path components");var h=i.getNode();s=e.getServerCache().getNode();var m=n.calcEventCacheAfterServerOverwrite(t,h,s);a=null!=m?this.filter_.updatePriority(h,m):i.getNode()}else{var g=t.popFront(),b=void 0;if(i.isCompleteForChild(f)){s=e.getServerCache().getNode();var v=n.calcEventCacheAfterServerOverwrite(t,i.getNode(),s);b=null!=v?i.getNode().getImmediateChild(f).updateChild(g,v):i.getNode().getImmediateChild(f)}else b=n.calcCompleteChild(f,e.getServerCache());a=null!=b?this.filter_.updateChild(i.getNode(),f,b,g,r,o):i.getNode()}}return e.updateEventSnap(a,i.isFullyInitialized()||t.isEmpty(),this.filter_.filtersNodes())},e.prototype.applyServerOverwrite_=function(e,t,n,r,o,i,a){var s,l=e.getServerCache(),c=i?this.filter_:this.filter_.getIndexedFilter();if(t.isEmpty())s=c.updateFullNode(l.getNode(),n,null);else if(c.filtersNodes()&&!l.isFiltered()){var u=l.getNode().updateChild(t,n);s=c.updateFullNode(l.getNode(),u,null)}else{var d=t.getFront();if(!l.isCompleteForPath(t)&&t.getLength()>1)return e;var p=t.popFront(),f=l.getNode().getImmediateChild(d).updateChild(p,n);s=".priority"==d?c.updatePriority(l.getNode(),f):c.updateChild(l.getNode(),d,f,p,vt,null)}var h=e.updateServerSnap(s,l.isFullyInitialized()||t.isEmpty(),c.filtersNodes()),m=new yt(r,h,o);return this.generateEventCacheAfterServerEvent_(h,t,r,m,a)},e.prototype.applyUserOverwrite_=function(e,t,n,r,o,i){var a,s,l=e.getEventCache(),c=new yt(r,e,o);if(t.isEmpty())s=this.filter_.updateFullNode(e.getEventCache().getNode(),n,i),a=e.updateEventSnap(s,!0,this.filter_.filtersNodes());else{var u=t.getFront();if(".priority"===u)s=this.filter_.updatePriority(e.getEventCache().getNode(),n),a=e.updateEventSnap(s,l.isFullyInitialized(),l.isFiltered());else{var d=t.popFront(),p=l.getNode().getImmediateChild(u),f=void 0;if(d.isEmpty())f=n;else{var h=c.getCompleteChild(u);f=null!=h?".priority"===d.getBack()&&h.getChild(d.parent()).isEmpty()?h:h.updateChild(d,n):ze.EMPTY_NODE}if(p.equals(f))a=e;else{var m=this.filter_.updateChild(l.getNode(),u,f,d,c,i);a=e.updateEventSnap(m,l.isFullyInitialized(),this.filter_.filtersNodes())}}}return a},e.cacheHasChild_=function(e,t){return e.getEventCache().isCompleteForChild(t)},e.prototype.applyUserMerge_=function(t,n,r,o,i,a){var s=this,l=t;return r.foreach(function(r,c){var u=n.child(r);e.cacheHasChild_(t,u.getFront())&&(l=s.applyUserOverwrite_(l,u,c,o,i,a))}),r.foreach(function(r,c){var u=n.child(r);e.cacheHasChild_(t,u.getFront())||(l=s.applyUserOverwrite_(l,u,c,o,i,a))}),l},e.prototype.applyMerge_=function(e,t){return t.foreach(function(t,n){e=e.updateChild(t,n)}),e},e.prototype.applyServerMerge_=function(e,t,n,r,o,i,a){var s=this;if(e.getServerCache().getNode().isEmpty()&&!e.getServerCache().isFullyInitialized())return e;var l,c=e;l=t.isEmpty()?n:ct.Empty.setTree(t,n);var u=e.getServerCache().getNode();return l.children.inorderTraversal(function(t,n){if(u.hasChild(t)){var l=e.getServerCache().getNode().getImmediateChild(t),d=s.applyMerge_(l,n);c=s.applyServerOverwrite_(c,new V(t),d,r,o,i,a)}}),l.children.inorderTraversal(function(t,n){var l=!e.getServerCache().isCompleteForChild(t)&&null==n.value;if(!u.hasChild(t)&&!l){var d=e.getServerCache().getNode().getImmediateChild(t),p=s.applyMerge_(d,n);c=s.applyServerOverwrite_(c,new V(t),p,r,o,i,a)}}),c},e.prototype.ackUserWrite_=function(e,t,n,r,o,i){if(null!=r.shadowingWrite(t))return e;var a=e.getServerCache().isFiltered(),s=e.getServerCache();if(null!=n.value){if(t.isEmpty()&&s.isFullyInitialized()||s.isCompleteForPath(t))return this.applyServerOverwrite_(e,t,s.getNode().getChild(t),r,o,a,i);if(t.isEmpty()){var l=ct.Empty;return s.getNode().forEachChild(ye,function(e,t){l=l.set(new V(e),t)}),this.applyServerMerge_(e,t,l,r,o,a,i)}return e}var c=ct.Empty;return n.foreach(function(e,n){var r=t.child(e);s.isCompleteForPath(r)&&(c=c.set(e,s.getNode().getChild(r)))}),this.applyServerMerge_(e,t,c,r,o,a,i)},e.prototype.listenComplete_=function(e,t,n,r){var o=e.getServerCache(),i=e.updateServerSnap(o.getNode(),o.isFullyInitialized()||t.isEmpty(),o.isFiltered());return this.generateEventCacheAfterServerEvent_(i,t,n,vt,r)},e.prototype.revertUserWrite_=function(e,t,n,r,o){var i;if(null!=n.shadowingWrite(t))return e;var a=new yt(n,e,r),s=e.getEventCache().getNode(),c=void 0;if(t.isEmpty()||".priority"===t.getFront()){var u=void 0;if(e.getServerCache().isFullyInitialized())u=n.calcCompleteEventCache(e.getCompleteServerSnap());else{var d=e.getServerCache().getNode();l.assert(d instanceof ze,"serverChildren would be complete if leaf node"),u=n.calcCompleteEventChildren(d)}u=u,c=this.filter_.updateFullNode(s,u,o)}else{var p=t.getFront(),f=n.calcCompleteChild(p,e.getServerCache());null==f&&e.getServerCache().isCompleteForChild(p)&&(f=s.getImmediateChild(p)),(c=null!=f?this.filter_.updateChild(s,p,f,t.popFront(),a,o):e.getEventCache().getNode().hasChild(p)?this.filter_.updateChild(s,p,ze.EMPTY_NODE,t.popFront(),a,o):s).isEmpty()&&e.getServerCache().isFullyInitialized()&&(i=n.calcCompleteEventCache(e.getCompleteServerSnap())).isLeafNode()&&(c=this.filter_.updateFullNode(c,i,o))}return i=e.getServerCache().isFullyInitialized()||null!=n.shadowingWrite(V.Empty),e.updateEventSnap(c,i,this.filter_.filtersNodes())},e}(),_t=function(){function e(e){this.query_=e,this.index_=this.query_.getQueryParams().getIndex()}return e.prototype.generateEventsForChanges=function(e,t,n){var r=this,o=[],i=[];return e.forEach(function(e){e.type===mt.CHILD_CHANGED&&r.index_.indexedValueChanged(e.oldSnap,e.snapshotNode)&&i.push(mt.childMovedChange(e.childName,e.snapshotNode))}),this.generateEventsForType_(o,mt.CHILD_REMOVED,e,n,t),this.generateEventsForType_(o,mt.CHILD_ADDED,e,n,t),this.generateEventsForType_(o,mt.CHILD_MOVED,i,n,t),this.generateEventsForType_(o,mt.CHILD_CHANGED,e,n,t),this.generateEventsForType_(o,mt.VALUE,e,n,t),o},e.prototype.generateEventsForType_=function(e,t,n,r,o){var i=this,a=n.filter(function(e){return e.type===t});a.sort(this.compareChanges_.bind(this)),a.forEach(function(t){var n=i.materializeSingleChange_(t,o);r.forEach(function(r){r.respondsTo(t.type)&&e.push(r.createEvent(n,i.query_))})})},e.prototype.materializeSingleChange_=function(e,t){return"value"===e.type||"child_removed"===e.type?e:(e.prevName=t.getPredecessorChildName(e.childName,e.snapshotNode,this.index_),e)},e.prototype.compareChanges_=function(e,t){if(null==e.childName||null==t.childName)throw l.assertionError("Should only compare child_ events.");var n=new ge(e.childName,e.snapshotNode),r=new ge(t.childName,t.snapshotNode);return this.index_.compare(n,r)},e}(),kt=function(){function e(e,t){this.query_=e,this.eventRegistrations_=[];var n=this.query_.getQueryParams(),r=new gt(n.getIndex()),o=n.getNodeFilter();this.processor_=new xt(o);var i=t.getServerCache(),a=t.getEventCache(),s=r.updateFullNode(ze.EMPTY_NODE,i.getNode(),null),l=o.updateFullNode(ze.EMPTY_NODE,a.getNode(),null),c=new ft(s,i.isFullyInitialized(),r.filtersNodes()),u=new ft(l,a.isFullyInitialized(),o.filtersNodes());this.viewCache_=new ht(u,c),this.eventGenerator_=new _t(this.query_)}return e.prototype.getQuery=function(){return this.query_},e.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode()},e.prototype.getCompleteServerCache=function(e){var t=this.viewCache_.getCompleteServerSnap();return t&&(this.query_.getQueryParams().loadsAllData()||!e.isEmpty()&&!t.getImmediateChild(e.getFront()).isEmpty())?t.getChild(e):null},e.prototype.isEmpty=function(){return 0===this.eventRegistrations_.length},e.prototype.addEventRegistration=function(e){this.eventRegistrations_.push(e)},e.prototype.removeEventRegistration=function(e,t){var n=[];if(t){l.assert(null==e,"A cancel should cancel all event registrations.");var r=this.query_.path;this.eventRegistrations_.forEach(function(e){t=t;var o=e.createCancelEvent(t,r);o&&n.push(o)})}if(e){for(var o=[],i=0;i<this.eventRegistrations_.length;++i){var a=this.eventRegistrations_[i];if(a.matches(e)){if(e.hasAnyCallback()){o=o.concat(this.eventRegistrations_.slice(i+1));break}}else o.push(a)}this.eventRegistrations_=o}else this.eventRegistrations_=[];return n},e.prototype.applyOperation=function(e,t,n){e.type===He.MERGE&&null!==e.source.queryId&&(l.assert(this.viewCache_.getCompleteServerSnap(),"We should always have a full cache before handling merges"),l.assert(this.viewCache_.getCompleteEventSnap(),"Missing event cache, even though we have a server cache"));var r=this.viewCache_,o=this.processor_.applyOperation(r,e,t,n);return this.processor_.assertIndexed(o.viewCache),l.assert(o.viewCache.getServerCache().isFullyInitialized()||!r.getServerCache().isFullyInitialized(),"Once a server snap is complete, it should never go back"),this.viewCache_=o.viewCache,this.generateEventsForChanges_(o.changes,o.viewCache.getEventCache().getNode(),null)},e.prototype.getInitialEvents=function(e){var t=this.viewCache_.getEventCache(),n=[];t.getNode().isLeafNode()||t.getNode().forEachChild(Ie,function(e,t){n.push(mt.childAddedChange(e,t))});return t.isFullyInitialized()&&n.push(mt.valueChange(t.getNode())),this.generateEventsForChanges_(n,t.getNode(),e)},e.prototype.generateEventsForChanges_=function(e,t,n){var r=n?[n]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(e,t,r)},e}(),Et=function(){function e(){this.views_={}}return Object.defineProperty(e,"__referenceConstructor",{get:function(){return l.assert(it,"Reference.ts has not been loaded"),it},set:function(e){l.assert(!it,"__referenceConstructor has already been defined"),it=e},enumerable:!0,configurable:!0}),e.prototype.isEmpty=function(){return l.isEmpty(this.views_)},e.prototype.applyOperation=function(e,t,n){var r=e.source.queryId;if(null!==r){var o=l.safeGet(this.views_,r);return l.assert(null!=o,"SyncTree gave us an op for an invalid query."),o.applyOperation(e,t,n)}var i=[];return l.forEach(this.views_,function(r,o){i=i.concat(o.applyOperation(e,t,n))}),i},e.prototype.addEventRegistration=function(e,t,n,r,o){var i=e.queryIdentifier(),a=l.safeGet(this.views_,i);if(!a){var s=n.calcCompleteEventCache(o?r:null),c=!1;s?c=!0:r instanceof ze?(s=n.calcCompleteEventChildren(r),c=!1):(s=ze.EMPTY_NODE,c=!1);var u=new ht(new ft(s,c,!1),new ft(r,o,!1));a=new kt(e,u),this.views_[i]=a}return a.addEventRegistration(t),a.getInitialEvents(t)},e.prototype.removeEventRegistration=function(t,n,r){var o=t.queryIdentifier(),i=[],a=[],s=this.hasCompleteView();if("default"===o){var c=this;l.forEach(this.views_,function(e,t){a=a.concat(t.removeEventRegistration(n,r)),t.isEmpty()&&(delete c.views_[e],t.getQuery().getQueryParams().loadsAllData()||i.push(t.getQuery()))})}else{var u=l.safeGet(this.views_,o);u&&(a=a.concat(u.removeEventRegistration(n,r)),u.isEmpty()&&(delete this.views_[o],u.getQuery().getQueryParams().loadsAllData()||i.push(u.getQuery())))}return s&&!this.hasCompleteView()&&i.push(new e.__referenceConstructor(t.repo,t.path)),{removed:i,events:a}},e.prototype.getQueryViews=function(){var e=this;return Object.keys(this.views_).map(function(t){return e.views_[t]}).filter(function(e){return!e.getQuery().getQueryParams().loadsAllData()})},e.prototype.getCompleteServerCache=function(e){var t=null;return l.forEach(this.views_,function(n,r){t=t||r.getCompleteServerCache(e)}),t},e.prototype.viewForQuery=function(e){if(e.getQueryParams().loadsAllData())return this.getCompleteView();var t=e.queryIdentifier();return l.safeGet(this.views_,t)},e.prototype.viewExistsForQuery=function(e){return null!=this.viewForQuery(e)},e.prototype.hasCompleteView=function(){return null!=this.getCompleteView()},e.prototype.getCompleteView=function(){return l.findValue(this.views_,function(e){return e.getQuery().getQueryParams().loadsAllData()})||null},e}(),Ct=function(){function e(e){this.writeTree_=e}return e.prototype.addWrite=function(t,n){if(t.isEmpty())return new e(new ct(n));var r=this.writeTree_.findRootMostValueAndPath(t);if(null!=r){var o=r.path,i=r.value,a=V.relativePath(o,t);return i=i.updateChild(a,n),new e(this.writeTree_.set(o,i))}var s=new ct(n);return new e(this.writeTree_.setTree(t,s))},e.prototype.addWrites=function(e,t){var n=this;return l.forEach(t,function(t,r){n=n.addWrite(e.child(t),r)}),n},e.prototype.removeWrite=function(t){return t.isEmpty()?e.Empty:new e(this.writeTree_.setTree(t,ct.Empty))},e.prototype.hasCompleteWrite=function(e){return null!=this.getCompleteNode(e)},e.prototype.getCompleteNode=function(e){var t=this.writeTree_.findRootMostValueAndPath(e);return null!=t?this.writeTree_.get(t.path).getChild(V.relativePath(t.path,e)):null},e.prototype.getCompleteChildren=function(){var e=[],t=this.writeTree_.value;return null!=t?t.isLeafNode()||t.forEachChild(Ie,function(t,n){e.push(new ge(t,n))}):this.writeTree_.children.inorderTraversal(function(t,n){null!=n.value&&e.push(new ge(t,n.value))}),e},e.prototype.childCompoundWrite=function(t){if(t.isEmpty())return this;var n=this.getCompleteNode(t);return new e(null!=n?new ct(n):this.writeTree_.subtree(t))},e.prototype.isEmpty=function(){return this.writeTree_.isEmpty()},e.prototype.apply=function(t){return e.applySubtreeWrite_(V.Empty,this.writeTree_,t)},e.Empty=new e(new ct(null)),e.applySubtreeWrite_=function(t,n,r){if(null!=n.value)return r.updateChild(t,n.value);var o=null;return n.children.inorderTraversal(function(n,i){".priority"===n?(l.assert(null!==i.value,"Priority writes must always be leaf nodes"),o=i.value):r=e.applySubtreeWrite_(t.child(n),i,r)}),r.getChild(t).isEmpty()||null===o||(r=r.updateChild(t.child(".priority"),o)),r},e}(),Tt=function(){function e(){this.visibleWrites_=Ct.Empty,this.allWrites_=[],this.lastWriteId_=-1}return e.prototype.childWrites=function(e){return new St(e,this)},e.prototype.addOverwrite=function(e,t,n,r){l.assert(n>this.lastWriteId_,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),this.allWrites_.push({path:e,snap:t,writeId:n,visible:r}),r&&(this.visibleWrites_=this.visibleWrites_.addWrite(e,t)),this.lastWriteId_=n},e.prototype.addMerge=function(e,t,n){l.assert(n>this.lastWriteId_,"Stacking an older merge on top of newer ones"),this.allWrites_.push({path:e,children:t,writeId:n,visible:!0}),this.visibleWrites_=this.visibleWrites_.addWrites(e,t),this.lastWriteId_=n},e.prototype.getWrite=function(e){for(var t=0;t<this.allWrites_.length;t++){var n=this.allWrites_[t];if(n.writeId===e)return n}return null},e.prototype.removeWrite=function(e){var t=this,n=this.allWrites_.findIndex(function(t){return t.writeId===e});l.assert(n>=0,"removeWrite called with nonexistent writeId.");var r=this.allWrites_[n];this.allWrites_.splice(n,1);for(var o=r.visible,i=!1,a=this.allWrites_.length-1;o&&a>=0;){var s=this.allWrites_[a];s.visible&&(a>=n&&this.recordContainsPath_(s,r.path)?o=!1:r.path.contains(s.path)&&(i=!0)),a--}if(o){if(i)return this.resetTree_(),!0;if(r.snap)this.visibleWrites_=this.visibleWrites_.removeWrite(r.path);else{var c=r.children;l.forEach(c,function(e){t.visibleWrites_=t.visibleWrites_.removeWrite(r.path.child(e))})}return!0}return!1},e.prototype.getCompleteWriteData=function(e){return this.visibleWrites_.getCompleteNode(e)},e.prototype.calcCompleteEventCache=function(t,n,r,o){if(r||o){var i=this.visibleWrites_.childCompoundWrite(t);if(!o&&i.isEmpty())return n;if(o||null!=n||i.hasCompleteWrite(V.Empty)){var a=e.layerTree_(this.allWrites_,function(e){return(e.visible||o)&&(!r||!~r.indexOf(e.writeId))&&(e.path.contains(t)||t.contains(e.path))},t);c=n||ze.EMPTY_NODE;return a.apply(c)}return null}var s=this.visibleWrites_.getCompleteNode(t);if(null!=s)return s;var l=this.visibleWrites_.childCompoundWrite(t);if(l.isEmpty())return n;if(null!=n||l.hasCompleteWrite(V.Empty)){var c=n||ze.EMPTY_NODE;return l.apply(c)}return null},e.prototype.calcCompleteEventChildren=function(e,t){var n=ze.EMPTY_NODE,r=this.visibleWrites_.getCompleteNode(e);if(r)return r.isLeafNode()||r.forEachChild(Ie,function(e,t){n=n.updateImmediateChild(e,t)}),n;if(t){var o=this.visibleWrites_.childCompoundWrite(e);return t.forEachChild(Ie,function(e,t){var r=o.childCompoundWrite(new V(e)).apply(t);n=n.updateImmediateChild(e,r)}),o.getCompleteChildren().forEach(function(e){n=n.updateImmediateChild(e.name,e.node)}),n}return this.visibleWrites_.childCompoundWrite(e).getCompleteChildren().forEach(function(e){n=n.updateImmediateChild(e.name,e.node)}),n},e.prototype.calcEventCacheAfterServerOverwrite=function(e,t,n,r){l.assert(n||r,"Either existingEventSnap or existingServerSnap must exist");var o=e.child(t);if(this.visibleWrites_.hasCompleteWrite(o))return null;var i=this.visibleWrites_.childCompoundWrite(o);return i.isEmpty()?r.getChild(t):i.apply(r.getChild(t))},e.prototype.calcCompleteChild=function(e,t,n){var r=e.child(t),o=this.visibleWrites_.getCompleteNode(r);return null!=o?o:n.isCompleteForChild(t)?this.visibleWrites_.childCompoundWrite(r).apply(n.getNode().getImmediateChild(t)):null},e.prototype.shadowingWrite=function(e){return this.visibleWrites_.getCompleteNode(e)},e.prototype.calcIndexedSlice=function(e,t,n,r,o,i){var a,s=this.visibleWrites_.childCompoundWrite(e),l=s.getCompleteNode(V.Empty);if(null!=l)a=l;else{if(null==t)return[];a=s.apply(t)}if((a=a.withIndex(i)).isEmpty()||a.isLeafNode())return[];for(var c=[],u=i.getCompare(),d=o?a.getReverseIteratorFrom(n,i):a.getIteratorFrom(n,i),p=d.getNext();p&&c.length<r;)0!==u(p,n)&&c.push(p),p=d.getNext();return c},e.prototype.recordContainsPath_=function(e,t){return e.snap?e.path.contains(t):!!l.findKey(e.children,function(n,r){return e.path.child(r).contains(t)})},e.prototype.resetTree_=function(){this.visibleWrites_=e.layerTree_(this.allWrites_,e.DefaultFilter_,V.Empty),this.allWrites_.length>0?this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId:this.lastWriteId_=-1},e.DefaultFilter_=function(e){return e.visible},e.layerTree_=function(e,t,n){for(var r=Ct.Empty,o=0;o<e.length;++o){var i=e[o];if(t(i)){var a=i.path,s=void 0;if(i.snap)n.contains(a)?(s=V.relativePath(n,a),r=r.addWrite(s,i.snap)):a.contains(n)&&(s=V.relativePath(a,n),r=r.addWrite(V.Empty,i.snap.getChild(s)));else{if(!i.children)throw l.assertionError("WriteRecord should have .snap or .children");if(n.contains(a))s=V.relativePath(n,a),r=r.addWrites(s,i.children);else if(a.contains(n))if((s=V.relativePath(a,n)).isEmpty())r=r.addWrites(V.Empty,i.children);else{var c=l.safeGet(i.children,s.getFront());if(c){var u=c.getChild(s.popFront());r=r.addWrite(V.Empty,u)}}}}}return r},e}(),St=function(){function e(e,t){this.treePath_=e,this.writeTree_=t}return e.prototype.calcCompleteEventCache=function(e,t,n){return this.writeTree_.calcCompleteEventCache(this.treePath_,e,t,n)},e.prototype.calcCompleteEventChildren=function(e){return this.writeTree_.calcCompleteEventChildren(this.treePath_,e)},e.prototype.calcEventCacheAfterServerOverwrite=function(e,t,n){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,e,t,n)},e.prototype.shadowingWrite=function(e){return this.writeTree_.shadowingWrite(this.treePath_.child(e))},e.prototype.calcIndexedSlice=function(e,t,n,r,o){return this.writeTree_.calcIndexedSlice(this.treePath_,e,t,n,r,o)},e.prototype.calcCompleteChild=function(e,t){return this.writeTree_.calcCompleteChild(this.treePath_,e,t)},e.prototype.child=function(t){return new e(this.treePath_.child(t),this.writeTree_)},e}(),It=function(){function e(e){this.listenProvider_=e,this.syncPointTree_=ct.Empty,this.pendingWriteTree_=new Tt,this.tagToQueryMap_={},this.queryToTagMap_={}}return e.prototype.applyUserOverwrite=function(e,t,n,r){return this.pendingWriteTree_.addOverwrite(e,t,n,r),r?this.applyOperationToSyncPoints_(new dt(at.User,e,t)):[]},e.prototype.applyUserMerge=function(e,t,n){this.pendingWriteTree_.addMerge(e,t,n);var r=ct.fromObject(t);return this.applyOperationToSyncPoints_(new pt(at.User,e,r))},e.prototype.ackUserWrite=function(e,t){void 0===t&&(t=!1);var n=this.pendingWriteTree_.getWrite(e);if(this.pendingWriteTree_.removeWrite(e)){var r=ct.Empty;return null!=n.snap?r=r.set(V.Empty,!0):l.forEach(n.children,function(e,t){r=r.set(new V(e),t)}),this.applyOperationToSyncPoints_(new st(n.path,r,t))}return[]},e.prototype.applyServerOverwrite=function(e,t){return this.applyOperationToSyncPoints_(new dt(at.Server,e,t))},e.prototype.applyServerMerge=function(e,t){var n=ct.fromObject(t);return this.applyOperationToSyncPoints_(new pt(at.Server,e,n))},e.prototype.applyListenComplete=function(e){return this.applyOperationToSyncPoints_(new ut(at.Server,e))},e.prototype.applyTaggedQueryOverwrite=function(t,n,r){var o=this.queryKeyForTag_(r);if(null!=o){var i=e.parseQueryKey_(o),a=i.path,s=i.queryId,l=V.relativePath(a,t),c=new dt(at.forServerTaggedQuery(s),l,n);return this.applyTaggedOperation_(a,c)}return[]},e.prototype.applyTaggedQueryMerge=function(t,n,r){var o=this.queryKeyForTag_(r);if(o){var i=e.parseQueryKey_(o),a=i.path,s=i.queryId,l=V.relativePath(a,t),c=ct.fromObject(n),u=new pt(at.forServerTaggedQuery(s),l,c);return this.applyTaggedOperation_(a,u)}return[]},e.prototype.applyTaggedListenComplete=function(t,n){var r=this.queryKeyForTag_(n);if(r){var o=e.parseQueryKey_(r),i=o.path,a=o.queryId,s=V.relativePath(i,t),l=new ut(at.forServerTaggedQuery(a),s);return this.applyTaggedOperation_(i,l)}return[]},e.prototype.addEventRegistration=function(t,n){var r=t.path,o=null,i=!1;this.syncPointTree_.foreachOnPath(r,function(e,t){var n=V.relativePath(e,r);o=o||t.getCompleteServerCache(n),i=i||t.hasCompleteView()});var a,s=this.syncPointTree_.get(r);(s?(i=i||s.hasCompleteView(),o=o||s.getCompleteServerCache(V.Empty)):(s=new Et,this.syncPointTree_=this.syncPointTree_.set(r,s)),null!=o)?a=!0:(a=!1,o=ze.EMPTY_NODE,this.syncPointTree_.subtree(r).foreachChild(function(e,t){var n=t.getCompleteServerCache(V.Empty);n&&(o=o.updateImmediateChild(e,n))}));var c=s.viewExistsForQuery(t);if(!c&&!t.getQueryParams().loadsAllData()){var u=e.makeQueryKey_(t);l.assert(!(u in this.queryToTagMap_),"View does not exist, but we have a tag");var d=e.getNextQueryTag_();this.queryToTagMap_[u]=d,this.tagToQueryMap_["_"+d]=u}var p=this.pendingWriteTree_.childWrites(r),f=s.addEventRegistration(t,n,p,o,a);if(!c&&!i){var h=s.viewForQuery(t);f=f.concat(this.setupListener_(t,h))}return f},e.prototype.removeEventRegistration=function(t,n,r){var o=this,i=t.path,a=this.syncPointTree_.get(i),s=[];if(a&&("default"===t.queryIdentifier()||a.viewExistsForQuery(t))){var l=a.removeEventRegistration(t,n,r);a.isEmpty()&&(this.syncPointTree_=this.syncPointTree_.remove(i));var c=l.removed;s=l.events;var u=-1!==c.findIndex(function(e){return e.getQueryParams().loadsAllData()}),d=this.syncPointTree_.findOnPath(i,function(e,t){return t.hasCompleteView()});if(u&&!d){var p=this.syncPointTree_.subtree(i);if(!p.isEmpty())for(var f=this.collectDistinctViewsForSubTree_(p),h=0;h<f.length;++h){var m=f[h],g=m.getQuery(),b=this.createListenerForView_(m);this.listenProvider_.startListening(e.queryForListening_(g),this.tagForQuery_(g),b.hashFn,b.onComplete)}}if(!d&&c.length>0&&!r)if(u){this.listenProvider_.stopListening(e.queryForListening_(t),null)}else c.forEach(function(t){var n=o.queryToTagMap_[e.makeQueryKey_(t)];o.listenProvider_.stopListening(e.queryForListening_(t),n)});this.removeTags_(c)}return s},e.prototype.calcCompleteEventCache=function(e,t){var n=this.pendingWriteTree_,r=this.syncPointTree_.findOnPath(e,function(t,n){var r=V.relativePath(t,e),o=n.getCompleteServerCache(r);if(o)return o});return n.calcCompleteEventCache(e,r,t,!0)},e.prototype.collectDistinctViewsForSubTree_=function(e){return e.fold(function(e,t,n){if(t&&t.hasCompleteView())return[t.getCompleteView()];var r=[];return t&&(r=t.getQueryViews()),l.forEach(n,function(e,t){r=r.concat(t)}),r})},e.prototype.removeTags_=function(t){for(var n=0;n<t.length;++n){var r=t[n];if(!r.getQueryParams().loadsAllData()){var o=e.makeQueryKey_(r),i=this.queryToTagMap_[o];delete this.queryToTagMap_[o],delete this.tagToQueryMap_["_"+i]}}},e.queryForListening_=function(e){return e.getQueryParams().loadsAllData()&&!e.getQueryParams().isDefault()?e.getRef():e},e.prototype.setupListener_=function(t,n){var r=t.path,o=this.tagForQuery_(t),i=this.createListenerForView_(n),a=this.listenProvider_.startListening(e.queryForListening_(t),o,i.hashFn,i.onComplete),s=this.syncPointTree_.subtree(r);if(o)l.assert(!s.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");else for(var c=s.fold(function(e,t,n){if(!e.isEmpty()&&t&&t.hasCompleteView())return[t.getCompleteView().getQuery()];var r=[];return t&&(r=r.concat(t.getQueryViews().map(function(e){return e.getQuery()}))),l.forEach(n,function(e,t){r=r.concat(t)}),r}),u=0;u<c.length;++u){var d=c[u];this.listenProvider_.stopListening(e.queryForListening_(d),this.tagForQuery_(d))}return a},e.prototype.createListenerForView_=function(e){var t=this,n=e.getQuery(),r=this.tagForQuery_(n);return{hashFn:function(){return(e.getServerCache()||ze.EMPTY_NODE).hash()},onComplete:function(e){if("ok"===e)return r?t.applyTaggedListenComplete(n.path,r):t.applyListenComplete(n.path);var o=function(e,t){var n="Unknown Error";"too_big"===e?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==e?n="Client doesn't have permission to access the desired data.":"unavailable"==e&&(n="The service is unavailable");var r=new Error(e+" at "+t.path.toString()+": "+n);return r.code=e.toUpperCase(),r}(e,n);return t.removeEventRegistration(n,null,o)}}},e.makeQueryKey_=function(e){return e.path.toString()+"$"+e.queryIdentifier()},e.parseQueryKey_=function(e){var t=e.indexOf("$");return l.assert(-1!==t&&t<e.length-1,"Bad queryKey."),{queryId:e.substr(t+1),path:new V(e.substr(0,t))}},e.prototype.queryKeyForTag_=function(e){return this.tagToQueryMap_["_"+e]},e.prototype.tagForQuery_=function(t){var n=e.makeQueryKey_(t);return l.safeGet(this.queryToTagMap_,n)},e.getNextQueryTag_=function(){return e.nextQueryTag_++},e.prototype.applyTaggedOperation_=function(e,t){var n=this.syncPointTree_.get(e);l.assert(n,"Missing sync point for query tag that we're tracking");var r=this.pendingWriteTree_.childWrites(e);return n.applyOperation(t,r,null)},e.prototype.applyOperationToSyncPoints_=function(e){return this.applyOperationHelper_(e,this.syncPointTree_,null,this.pendingWriteTree_.childWrites(V.Empty))},e.prototype.applyOperationHelper_=function(e,t,n,r){if(e.path.isEmpty())return this.applyOperationDescendantsHelper_(e,t,n,r);var o=t.get(V.Empty);null==n&&null!=o&&(n=o.getCompleteServerCache(V.Empty));var i=[],a=e.path.getFront(),s=e.operationForChild(a),l=t.children.get(a);if(l&&s){var c=n?n.getImmediateChild(a):null,u=r.child(a);i=i.concat(this.applyOperationHelper_(s,l,c,u))}return o&&(i=i.concat(o.applyOperation(e,r,n))),i},e.prototype.applyOperationDescendantsHelper_=function(e,t,n,r){var o=this,i=t.get(V.Empty);null==n&&null!=i&&(n=i.getCompleteServerCache(V.Empty));var a=[];return t.children.inorderTraversal(function(t,i){var s=n?n.getImmediateChild(t):null,l=r.child(t),c=e.operationForChild(t);c&&(a=a.concat(o.applyOperationDescendantsHelper_(c,i,s,l)))}),i&&(a=a.concat(i.applyOperation(e,r,n))),a},e.nextQueryTag_=1,e}(),Nt=function(){function e(){this.rootNode_=ze.EMPTY_NODE}return e.prototype.getNode=function(e){return this.rootNode_.getChild(e)},e.prototype.updateSnapshot=function(e,t){this.rootNode_=this.rootNode_.updateChild(e,t)},e}(),Ot=function(){function e(e){this.app_=e}return e.prototype.getToken=function(e){return this.app_.INTERNAL.getToken(e).then(null,function(e){return e&&"auth/token-not-initialized"===e.code?(_("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(e)})},e.prototype.addTokenChangeListener=function(e){this.app_.INTERNAL.addAuthTokenListener(e)},e.prototype.removeTokenChangeListener=function(e){this.app_.INTERNAL.removeAuthTokenListener(e)},e.prototype.notifyForInvalidToken=function(){var e='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.app_.options?e+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.app_.options?e+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':e+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',T(e)},e}(),Pt=function(){function e(){this.counters_={}}return e.prototype.incrementCounter=function(e,t){void 0===t&&(t=1),l.contains(this.counters_,e)||(this.counters_[e]=0),this.counters_[e]+=t},e.prototype.get=function(){return l.deepCopy(this.counters_)},e}(),At=function(){function e(){}return e.getCollection=function(e){var t=e.toString();return this.collections_[t]||(this.collections_[t]=new Pt),this.collections_[t]},e.getOrCreateReporter=function(e,t){var n=e.toString();return this.reporters_[n]||(this.reporters_[n]=t()),this.reporters_[n]},e.collections_={},e.reporters_={},e}(),Rt=function(){function e(e){this.collection_=e,this.last_=null}return e.prototype.get=function(){var e=this.collection_.get(),t=l.clone(e);return this.last_&&l.forEach(this.last_,function(e,n){t[e]=t[e]-n}),this.last_=e,t},e}(),Dt=1e4,Lt=3e4,jt=function(){function e(e,t){this.server_=t,this.statsToReport_={},this.statsListener_=new Rt(e);var n=Dt+(Lt-Dt)*Math.random();W(this.reportStats_.bind(this),Math.floor(n))}return e.prototype.includeStat=function(e){this.statsToReport_[e]=!0},e.prototype.reportStats_=function(){var e=this,t=this.statsListener_.get(),n={},r=!1;l.forEach(t,function(t,o){o>0&&l.contains(e.statsToReport_,t)&&(n[t]=o,r=!0)}),r&&this.server_.reportStats(n),W(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},e}(),Mt=function(){function e(){this.eventLists_=[],this.recursionDepth_=0}return e.prototype.queueEvents=function(e){for(var t=null,n=0;n<e.length;n++){var r=e[n],o=r.getPath();null===t||o.equals(t.getPath())||(this.eventLists_.push(t),t=null),null===t&&(t=new Ft(o)),t.add(r)}t&&this.eventLists_.push(t)},e.prototype.raiseEventsAtPath=function(e,t){this.queueEvents(t),this.raiseQueuedEventsMatchingPredicate_(function(t){return t.equals(e)})},e.prototype.raiseEventsForChangedPath=function(e,t){this.queueEvents(t),this.raiseQueuedEventsMatchingPredicate_(function(t){return t.contains(e)||e.contains(t)})},e.prototype.raiseQueuedEventsMatchingPredicate_=function(e){this.recursionDepth_++;for(var t=!0,n=0;n<this.eventLists_.length;n++){var r=this.eventLists_[n];if(r)e(r.getPath())?(this.eventLists_[n].raise(),this.eventLists_[n]=null):t=!1}t&&(this.eventLists_=[]),this.recursionDepth_--},e}(),Ft=function(){function e(e){this.path_=e,this.events_=[]}return e.prototype.add=function(e){this.events_.push(e)},e.prototype.raise=function(){for(var e=0;e<this.events_.length;e++){var t=this.events_[e];if(null!==t){this.events_[e]=null;var n=t.getEventRunner();y&&_("event: "+t.toString()),U(n)}}},e.prototype.getPath=function(){return this.path_},e}(),Ut=function(){function e(e){this.allowedEvents_=e,this.listeners_={},l.assert(Array.isArray(e)&&e.length>0,"Requires a non-empty array")}return e.prototype.trigger=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(Array.isArray(this.listeners_[e]))for(var r=this.listeners_[e].slice(),o=0;o<r.length;o++)r[o].callback.apply(r[o].context,t)},e.prototype.on=function(e,t,n){this.validateEventType_(e),this.listeners_[e]=this.listeners_[e]||[],this.listeners_[e].push({callback:t,context:n});var r=this.getInitialEvent(e);r&&t.apply(n,r)},e.prototype.off=function(e,t,n){this.validateEventType_(e);for(var r=this.listeners_[e]||[],o=0;o<r.length;o++)if(r[o].callback===t&&(!n||n===r[o].context))return void r.splice(o,1)},e.prototype.validateEventType_=function(e){l.assert(this.allowedEvents_.find(function(t){return t===e}),"Unknown event: "+e)},e}(),zt=function(e){function t(){var t,n,r=e.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",t="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",t="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",t="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",t="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,function(){var e=!document[t];e!==r.visible_&&(r.visible_=e,r.trigger("visible",e))},!1),r}return s.__extends(t,e),t.getInstance=function(){return new t},t.prototype.getInitialEvent=function(e){return l.assert("visible"===e,"Unknown event type: "+e),[this.visible_]},t}(Ut),Wt=function(e){function t(){var t=e.call(this,["online"])||this;return t.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||l.isMobileCordova()||(window.addEventListener("online",function(){t.online_||(t.online_=!0,t.trigger("online",!0))},!1),window.addEventListener("offline",function(){t.online_&&(t.online_=!1,t.trigger("online",!1))},!1)),t}return s.__extends(t,e),t.getInstance=function(){return new t},t.prototype.getInitialEvent=function(e){return l.assert("online"===e,"Unknown event type: "+e),[this.online_]},t.prototype.currentlyOnline=function(){return this.online_},t}(Ut),Vt=function(){function e(e){this.onMessage_=e,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return e.prototype.closeAfter=function(e,t){this.closeAfterResponse=e,this.onClose=t,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},e.prototype.handleResponse=function(e,t){var n=this;this.pendingResponses[e]=t;for(var r=function(){var e=o.pendingResponses[o.currentResponseNum];delete o.pendingResponses[o.currentResponseNum];for(var t=function(t){e[t]&&U(function(){n.onMessage_(e[t])})},r=0;r<e.length;++r)t(r);if(o.currentResponseNum===o.closeAfterResponse)return o.onClose&&(o.onClose(),o.onClose=null),"break";o.currentResponseNum++},o=this;this.pendingResponses[this.currentResponseNum];){if("break"===r())break}},e}(),Bt="pLPCommand",qt="pRTLPCB",Ht=function(){function e(e,t,n,r){this.connId=e,this.repoInfo=t,this.transportSessionId=n,this.lastSessionId=r,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=k(e),this.stats_=At.getCollection(t),this.urlFn=function(e){return t.connectionURL(q,e)}}return e.prototype.open=function(e,t){var n=this;this.curSegmentNum=0,this.onDisconnect_=t,this.myPacketOrderer=new Vt(e),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout(function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null},Math.floor(3e4)),function(e){if(l.isNodeSdk()||"complete"===document.readyState)e();else{var t=!1,n=function(){document.body?t||(t=!0,e()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&n()}),window.attachEvent("onload",n))}}(function(){if(!n.isClosed_){n.scriptTagHolder=new Qt(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],i=e[2];if(n.incrementIncomingBytes_(e),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,"start"==r)n.id=o,n.password=i;else{if("close"!==r)throw new Error("Unrecognized command received: "+r);o?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(o,function(){n.onClosed_()})):n.onClosed_()}},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1];n.incrementIncomingBytes_(e),n.myPacketOrderer.handleResponse(r,o)},function(){n.onClosed_()},n.urlFn);var e={start:"t"};e.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(e.cb=n.scriptTagHolder.uniqueCallbackIdentifier),e.v="5",n.transportSessionId&&(e.s=n.transportSessionId),n.lastSessionId&&(e.ls=n.lastSessionId),!l.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(e.r="f");var t=n.urlFn(e);n.log_("Connecting via long-poll to "+t),n.scriptTagHolder.addTag(t,function(){})}})},e.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},e.forceAllow=function(){e.forceAllow_=!0},e.forceDisallow=function(){e.forceDisallow_=!0},e.isAvailable=function(){return e.forceAllow_||!e.forceDisallow_&&"undefined"!=typeof document&&null!=document.createElement&&!("object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"==typeof Windows&&"object"==typeof Windows.UI)&&!l.isNodeSdk()},e.prototype.markConnectionHealthy=function(){},e.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},e.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},e.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},e.prototype.send=function(e){var t=l.stringify(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);for(var n=l.base64Encode(t),r=D(n,1840),o=0;o<r.length;o++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,r.length,r[o]),this.curSegmentNum++},e.prototype.addDisconnectPingFrame=function(e,t){if(!l.isNodeSdk()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=e,n.pw=t,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},e.prototype.incrementIncomingBytes_=function(e){var t=l.stringify(e).length;this.bytesReceived+=t,this.stats_.incrementCounter("bytes_received",t)},e}(),Qt=function(){function e(t,n,r,o){if(this.onDisconnect=r,this.urlFn=o,this.outstandingRequests=new et,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,l.isNodeSdk())this.commandCB=t,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=g(),window[Bt+this.uniqueCallbackIdentifier]=t,window[qt+this.uniqueCallbackIdentifier]=n,this.myIFrame=e.createIFrame_();var i="";if(this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length))i='<script>document.domain="'+document.domain+'";<\/script>';var a="<html><body>"+i+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(a),this.myIFrame.doc.close()}catch(e){_("frame writing exception"),e.stack&&_(e.stack),_(e)}}}return e.createIFrame_=function(){var e=document.createElement("iframe");if(e.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(e);try{e.contentWindow.document||_("No IE domain setting required")}catch(n){var t=document.domain;e.src="javascript:void((function(){document.open();document.domain='"+t+"';document.close();})())"}return e.contentDocument?e.doc=e.contentDocument:e.contentWindow?e.doc=e.contentWindow.document:e.document&&(e.doc=e.document),e},e.prototype.close=function(){var t=this;if(this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout(function(){null!==t.myIFrame&&(document.body.removeChild(t.myIFrame),t.myIFrame=null)},Math.floor(0))),l.isNodeSdk()&&this.myID){var n={disconn:"t"};n.id=this.myID,n.pw=this.myPW;var r=this.urlFn(n);e.nodeRestRequest(r)}var o=this.onDisconnect;o&&(this.onDisconnect=null,o())},e.prototype.startLongPoll=function(e,t){for(this.myID=e,this.myPW=t,this.alive=!0;this.newRequest_(););},e.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.count()<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var e={};e.id=this.myID,e.pw=this.myPW,e.ser=this.currentSerial;for(var t=this.urlFn(e),n="",r=0;this.pendingSegs.length>0;){if(!(this.pendingSegs[0].d.length+30+n.length<=1870))break;var o=this.pendingSegs.shift();n=n+"&seg"+r+"="+o.seg+"&ts"+r+"="+o.ts+"&d"+r+"="+o.d,r++}return t+=n,this.addLongPollTag_(t,this.currentSerial),!0}return!1},e.prototype.enqueueSegment=function(e,t,n){this.pendingSegs.push({seg:e,ts:t,d:n}),this.alive&&this.newRequest_()},e.prototype.addLongPollTag_=function(e,t){var n=this;this.outstandingRequests.add(t,1);var r=function(){n.outstandingRequests.remove(t),n.newRequest_()},o=setTimeout(r,Math.floor(25e3));this.addTag(e,function(){clearTimeout(o),r()})},e.prototype.addTag=function(e,t){var n=this;l.isNodeSdk()?this.doNodeLongPoll(e,t):setTimeout(function(){try{if(!n.sendNewPolls)return;var r=n.myIFrame.doc.createElement("script");r.type="text/javascript",r.async=!0,r.src=e,r.onload=r.onreadystatechange=function(){var e=r.readyState;e&&"loaded"!==e&&"complete"!==e||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),t())},r.onerror=function(){_("Long-poll script failed to load: "+e),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(r)}catch(e){}},Math.floor(1))},e}(),Kt=null;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"undefined"!=typeof MozWebSocket?Kt=MozWebSocket:"undefined"!=typeof WebSocket&&(Kt=WebSocket);var Gt=function(){function e(t,n,r,o){this.connId=t,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=k(this.connId),this.stats_=At.getCollection(n),this.connURL=e.connectionURL_(n,r,o)}return e.connectionURL_=function(e,t,n){var r={v:"5"};return!l.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(r.r="f"),t&&(r.s=t),n&&(r.ls=n),e.connectionURL("websocket",r)},e.prototype.open=function(e,t){var n=this;this.onDisconnect=t,this.onMessage=e,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,f.set("previous_websocket_failure",!0);try{if(l.isNodeSdk()){var o=l.CONSTANTS.NODE_ADMIN?"AdminNode":"Node",i={headers:{"User-Agent":"Firebase/5/"+a.SDK_VERSION+"/"+r.platform+"/"+o}},s=r.env,c=0==this.connURL.indexOf("wss://")?s.HTTPS_PROXY||s.https_proxy:s.HTTP_PROXY||s.http_proxy;c&&(i.proxy={origin:c}),this.mySock=new Kt(this.connURL,[],i)}else this.mySock=new Kt(this.connURL)}catch(e){this.log_("Error instantiating WebSocket.");var u=e.message||e.data;return u&&this.log_(u),void this.onClosed_()}this.mySock.onopen=function(){n.log_("Websocket connected."),n.everConnected_=!0},this.mySock.onclose=function(){n.log_("Websocket connection was disconnected."),n.mySock=null,n.onClosed_()},this.mySock.onmessage=function(e){n.handleIncomingFrame(e)},this.mySock.onerror=function(e){n.log_("WebSocket error.  Closing connection.");var t=e.message||e.data;t&&n.log_(t),n.onClosed_()}},e.prototype.start=function(){},e.forceDisallow=function(){e.forceDisallow_=!0},e.isAvailable=function(){var t=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(t=!0)}return!t&&null!==Kt&&!e.forceDisallow_},e.previouslyFailed=function(){return f.isInMemoryStorage||!0===f.get("previous_websocket_failure")},e.prototype.markConnectionHealthy=function(){f.remove("previous_websocket_failure")},e.prototype.appendFrame_=function(e){if(this.frames.push(e),this.frames.length==this.totalFrames){var t=this.frames.join("");this.frames=null;var n=l.jsonEval(t);this.onMessage(n)}},e.prototype.handleNewFrameCount_=function(e){this.totalFrames=e,this.frames=[]},e.prototype.extractFrameCount_=function(e){if(l.assert(null===this.frames,"We already have a frame buffer"),e.length<=6){var t=Number(e);if(!isNaN(t))return this.handleNewFrameCount_(t),null}return this.handleNewFrameCount_(1),e},e.prototype.handleIncomingFrame=function(e){if(null!==this.mySock){var t=e.data;if(this.bytesReceived+=t.length,this.stats_.incrementCounter("bytes_received",t.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(t);else{var n=this.extractFrameCount_(t);null!==n&&this.appendFrame_(n)}}},e.prototype.send=function(e){this.resetKeepAlive();var t=l.stringify(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);var n=D(t,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},e.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},e.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},e.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},e.prototype.resetKeepAlive=function(){var e=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval(function(){e.mySock&&e.sendString_("0"),e.resetKeepAlive()},Math.floor(45e3))},e.prototype.sendString_=function(e){try{this.mySock.send(e)}catch(e){this.log_("Exception thrown from WebSocket.send():",e.message||e.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},e.responsesRequiredToBeHealthy=2,e.healthyTimeout=3e4,e}(),$t=function(){function e(e){this.initTransports_(e)}return Object.defineProperty(e,"ALL_TRANSPORTS",{get:function(){return[Ht,Gt]},enumerable:!0,configurable:!0}),e.prototype.initTransports_=function(t){var n=Gt&&Gt.isAvailable(),r=n&&!Gt.previouslyFailed();if(t.webSocketOnly&&(n||T("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),r=!0),r)this.transports_=[Gt];else{var o=this.transports_=[];L(e.ALL_TRANSPORTS,function(e,t){t&&t.isAvailable()&&o.push(t)})}},e.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},e.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},e}(),Yt=function(){function e(e,t,n,r,o,i,a){this.id=e,this.repoInfo_=t,this.onMessage_=n,this.onReady_=r,this.onDisconnect_=o,this.onKill_=i,this.lastSessionId=a,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=k("c:"+this.id+":"),this.transportManager_=new $t(t),this.log_("Connection created"),this.start_()}return e.prototype.start_=function(){var e=this,t=this.transportManager_.initialTransport();this.conn_=new t(this.nextTransportId_(),this.repoInfo_,void 0,this.lastSessionId),this.primaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),r=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout(function(){e.conn_&&e.conn_.open(n,r)},Math.floor(0));var o=t.healthyTimeout||0;o>0&&(this.healthyTimeout_=W(function(){e.healthyTimeout_=null,e.isHealthy_||(e.conn_&&e.conn_.bytesReceived>102400?(e.log_("Connection exceeded healthy timeout but has received "+e.conn_.bytesReceived+" bytes.  Marking connection healthy."),e.isHealthy_=!0,e.conn_.markConnectionHealthy()):e.conn_&&e.conn_.bytesSent>10240?e.log_("Connection exceeded healthy timeout but has sent "+e.conn_.bytesSent+" bytes.  Leaving connection alive."):(e.log_("Closing unhealthy connection after timeout."),e.close()))},Math.floor(o)))},e.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},e.prototype.disconnReceiver_=function(e){var t=this;return function(n){e===t.conn_?t.onConnectionLost_(n):e===t.secondaryConn_?(t.log_("Secondary connection lost."),t.onSecondaryConnectionLost_()):t.log_("closing an old connection")}},e.prototype.connReceiver_=function(e){var t=this;return function(n){2!=t.state_&&(e===t.rx_?t.onPrimaryMessageReceived_(n):e===t.secondaryConn_?t.onSecondaryMessageReceived_(n):t.log_("message on old connection"))}},e.prototype.sendRequest=function(e){var t={t:"d",d:e};this.sendData_(t)},e.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},e.prototype.onSecondaryControl_=function(e){if("t"in e){var t=e.t;"a"===t?this.upgradeIfSecondaryHealthy_():"r"===t?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===t&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},e.prototype.onSecondaryMessageReceived_=function(e){var t=A("t",e),n=A("d",e);if("c"==t)this.onSecondaryControl_(n);else{if("d"!=t)throw new Error("Unknown protocol layer: "+t);this.pendingDataMessages.push(n)}},e.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},e.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},e.prototype.onPrimaryMessageReceived_=function(e){var t=A("t",e),n=A("d",e);"c"==t?this.onControl_(n):"d"==t&&this.onDataMessage_(n)},e.prototype.onDataMessage_=function(e){this.onPrimaryResponse_(),this.onMessage_(e)},e.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},e.prototype.onControl_=function(e){var t=A("t",e);if("d"in e){var n=e.d;if("h"===t)this.onHandshake_(n);else if("n"===t){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var r=0;r<this.pendingDataMessages.length;++r)this.onDataMessage_(this.pendingDataMessages[r]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===t?this.onConnectionShutdown_(n):"r"===t?this.onReset_(n):"e"===t?E("Server Error: "+n):"o"===t?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):E("Unknown control packet command: "+t)}},e.prototype.onHandshake_=function(e){var t=e.ts,n=e.v,r=e.h;this.sessionId=e.s,this.repoInfo_.updateHost(r),0==this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,t),"5"!==n&&T("Protocol version mismatch detected"),this.tryStartUpgrade_())},e.prototype.tryStartUpgrade_=function(){var e=this.transportManager_.upgradeTransport();e&&this.startUpgrade_(e)},e.prototype.startUpgrade_=function(e){var t=this;this.secondaryConn_=new e(this.nextTransportId_(),this.repoInfo_,this.sessionId),this.secondaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),r=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,r),W(function(){t.secondaryConn_&&(t.log_("Timed out trying to upgrade."),t.secondaryConn_.close())},Math.floor(6e4))},e.prototype.onReset_=function(e){this.log_("Reset packet received.  New host: "+e),this.repoInfo_.updateHost(e),1===this.state_?this.close():(this.closeConnections_(),this.start_())},e.prototype.onConnectionEstablished_=function(e,t){var n=this;this.log_("Realtime connection established."),this.conn_=e,this.state_=1,this.onReady_&&(this.onReady_(t,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):W(function(){n.sendPingOnPrimaryIfNecessary_()},Math.floor(5e3))},e.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},e.prototype.onSecondaryConnectionLost_=function(){var e=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==e&&this.rx_!==e||this.close()},e.prototype.onConnectionLost_=function(e){this.conn_=null,e||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(f.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},e.prototype.onConnectionShutdown_=function(e){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(e),this.onKill_=null),this.onDisconnect_=null,this.close()},e.prototype.sendData_=function(e){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(e)},e.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},e.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},e}(),Xt=function(){function e(){}return e.prototype.put=function(e,t,n,r){},e.prototype.merge=function(e,t,n,r){},e.prototype.refreshAuthToken=function(e){},e.prototype.onDisconnectPut=function(e,t,n){},e.prototype.onDisconnectMerge=function(e,t,n){},e.prototype.onDisconnectCancel=function(e,t){},e.prototype.reportStats=function(e){},e}(),Jt=1e3,Zt=3e5,en=function(e){function t(n,r,o,i,a,s){var c=e.call(this)||this;if(c.repoInfo_=n,c.onDataUpdate_=r,c.onConnectStatus_=o,c.onServerInfoUpdate_=i,c.authTokenProvider_=a,c.authOverride_=s,c.id=t.nextPersistentConnectionId_++,c.log_=k("p:"+c.id+":"),c.interruptReasons_={},c.listens_={},c.outstandingPuts_=[],c.outstandingPutCount_=0,c.onDisconnectRequestQueue_=[],c.connected_=!1,c.reconnectDelay_=Jt,c.maxReconnectDelay_=Zt,c.securityDebugCallback_=null,c.lastSessionId=null,c.establishConnectionTimer_=null,c.visible_=!1,c.requestCBHash_={},c.requestNumber_=0,c.realtime_=null,c.authToken_=null,c.forceTokenRefresh_=!1,c.invalidAuthTokenCount_=0,c.firstConnection_=!0,c.lastConnectionAttemptTime_=null,c.lastConnectionEstablishedTime_=null,s&&!l.isNodeSdk())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return c.scheduleConnect_(0),zt.getInstance().on("visible",c.onVisible_,c),-1===n.host.indexOf("fblocal")&&Wt.getInstance().on("online",c.onOnline_,c),c}return s.__extends(t,e),t.prototype.sendRequest=function(e,t,n){var r=++this.requestNumber_,o={r:r,a:e,b:t};this.log_(l.stringify(o)),l.assert(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(o),n&&(this.requestCBHash_[r]=n)},t.prototype.listen=function(e,t,n,r){var o=e.queryIdentifier(),i=e.path.toString();this.log_("Listen called for "+i+" "+o),this.listens_[i]=this.listens_[i]||{},l.assert(e.getQueryParams().isDefault()||!e.getQueryParams().loadsAllData(),"listen() called for non-default but complete query"),l.assert(!this.listens_[i][o],"listen() called twice for same path/queryId.");var a={onComplete:r,hashFn:t,query:e,tag:n};this.listens_[i][o]=a,this.connected_&&this.sendListen_(a)},t.prototype.sendListen_=function(e){var n=this,r=e.query,o=r.path.toString(),i=r.queryIdentifier();this.log_("Listen on "+o+" for "+i);var a={p:o};e.tag&&(a.q=r.queryObject(),a.t=e.tag),a.h=e.hashFn(),this.sendRequest("q",a,function(a){var s=a.d,l=a.s;t.warnOnListenWarnings_(s,r),(n.listens_[o]&&n.listens_[o][i])===e&&(n.log_("listen response",a),"ok"!==l&&n.removeListen_(o,i),e.onComplete&&e.onComplete(l,s))})},t.warnOnListenWarnings_=function(e,t){if(e&&"object"==typeof e&&l.contains(e,"w")){var n=l.safeGet(e,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+t.getQueryParams().getIndex().toString()+'"',o=t.path.toString();T("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+o+" to your security rules for better performance.")}}},t.prototype.refreshAuthToken=function(e){this.authToken_=e,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},function(){}),this.reduceReconnectDelayIfAdminCredential_(e)},t.prototype.reduceReconnectDelayIfAdminCredential_=function(e){(e&&40===e.length||l.isAdmin(e))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},t.prototype.tryAuth=function(){var e=this;if(this.connected_&&this.authToken_){var t=this.authToken_,n=l.isValidFormat(t)?"auth":"gauth",r={cred:t};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,function(n){var r=n.s,o=n.d||"error";e.authToken_===t&&("ok"===r?e.invalidAuthTokenCount_=0:e.onAuthRevoked_(r,o))})}},t.prototype.unlisten=function(e,t){var n=e.path.toString(),r=e.queryIdentifier();this.log_("Unlisten called for "+n+" "+r),l.assert(e.getQueryParams().isDefault()||!e.getQueryParams().loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,e.queryObject(),t)},t.prototype.sendUnlisten_=function(e,t,n,r){this.log_("Unlisten on "+e+" for "+t);var o={p:e};r&&(o.q=n,o.t=r),this.sendRequest("n",o)},t.prototype.onDisconnectPut=function(e,t,n){this.connected_?this.sendOnDisconnect_("o",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"o",data:t,onComplete:n})},t.prototype.onDisconnectMerge=function(e,t,n){this.connected_?this.sendOnDisconnect_("om",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"om",data:t,onComplete:n})},t.prototype.onDisconnectCancel=function(e,t){this.connected_?this.sendOnDisconnect_("oc",e,null,t):this.onDisconnectRequestQueue_.push({pathString:e,action:"oc",data:null,onComplete:t})},t.prototype.sendOnDisconnect_=function(e,t,n,r){var o={p:t,d:n};this.log_("onDisconnect "+e,o),this.sendRequest(e,o,function(e){r&&setTimeout(function(){r(e.s,e.d)},Math.floor(0))})},t.prototype.put=function(e,t,n,r){this.putInternal("p",e,t,n,r)},t.prototype.merge=function(e,t,n,r){this.putInternal("m",e,t,n,r)},t.prototype.putInternal=function(e,t,n,r,o){var i={p:t,d:n};void 0!==o&&(i.h=o),this.outstandingPuts_.push({action:e,request:i,onComplete:r}),this.outstandingPutCount_++;var a=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(a):this.log_("Buffering put: "+t)},t.prototype.sendPut_=function(e){var t=this,n=this.outstandingPuts_[e].action,r=this.outstandingPuts_[e].request,o=this.outstandingPuts_[e].onComplete;this.outstandingPuts_[e].queued=this.connected_,this.sendRequest(n,r,function(r){t.log_(n+" response",r),delete t.outstandingPuts_[e],t.outstandingPutCount_--,0===t.outstandingPutCount_&&(t.outstandingPuts_=[]),o&&o(r.s,r.d)})},t.prototype.reportStats=function(e){var t=this;if(this.connected_){var n={c:e};this.log_("reportStats",n),this.sendRequest("s",n,function(e){if("ok"!==e.s){var n=e.d;t.log_("reportStats","Error sending stats: "+n)}})}},t.prototype.onDataMessage_=function(e){if("r"in e){this.log_("from server: "+l.stringify(e));var t=e.r,n=this.requestCBHash_[t];n&&(delete this.requestCBHash_[t],n(e.b))}else{if("error"in e)throw"A server-side error has occurred: "+e.error;"a"in e&&this.onDataPush_(e.a,e.b)}},t.prototype.onDataPush_=function(e,t){this.log_("handleServerMessage",e,t),"d"===e?this.onDataUpdate_(t.p,t.d,!1,t.t):"m"===e?this.onDataUpdate_(t.p,t.d,!0,t.t):"c"===e?this.onListenRevoked_(t.p,t.q):"ac"===e?this.onAuthRevoked_(t.s,t.d):"sd"===e?this.onSecurityDebugPacket_(t):E("Unrecognized action received from server: "+l.stringify(e)+"\nAre you using the latest client?")},t.prototype.onReady_=function(e,t){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(e),this.lastSessionId=t,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},t.prototype.scheduleConnect_=function(e){var t=this;l.assert(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout(function(){t.establishConnectionTimer_=null,t.establishConnection_()},Math.floor(e))},t.prototype.onVisible_=function(e){e&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=Jt,this.realtime_||this.scheduleConnect_(0)),this.visible_=e},t.prototype.onOnline_=function(e){e?(this.log_("Browser went online."),this.reconnectDelay_=Jt,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},t.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){if(this.visible_){if(this.lastConnectionEstablishedTime_){(new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=Jt),this.lastConnectionEstablishedTime_=null}}else this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime();var e=(new Date).getTime()-this.lastConnectionAttemptTime_,t=Math.max(0,this.reconnectDelay_-e);t=Math.random()*t,this.log_("Trying to reconnect in "+t+"ms"),this.scheduleConnect_(t),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},t.prototype.establishConnection_=function(){if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;var e=this.onDataMessage_.bind(this),n=this.onReady_.bind(this),r=this.onRealtimeDisconnect_.bind(this),o=this.id+":"+t.nextConnectionId_++,i=this,a=this.lastSessionId,s=!1,c=null,u=function(){c?c.close():(s=!0,r())};this.realtime_={close:u,sendRequest:function(e){l.assert(c,"sendRequest call when we're not connected not allowed."),c.sendRequest(e)}};var d=this.forceTokenRefresh_;this.forceTokenRefresh_=!1,this.authTokenProvider_.getToken(d).then(function(t){s?_("getToken() completed but was canceled"):(_("getToken() completed. Creating connection."),i.authToken_=t&&t.accessToken,c=new Yt(o,i.repoInfo_,e,n,r,function(e){T(e+" ("+i.repoInfo_.toString()+")"),i.interrupt("server_kill")},a))}).then(null,function(e){i.log_("Failed to get token: "+e),s||(l.CONSTANTS.NODE_ADMIN&&T(e),u())})}},t.prototype.interrupt=function(e){_("Interrupting connection for reason: "+e),this.interruptReasons_[e]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},t.prototype.resume=function(e){_("Resuming connection for reason: "+e),delete this.interruptReasons_[e],l.isEmpty(this.interruptReasons_)&&(this.reconnectDelay_=Jt,this.realtime_||this.scheduleConnect_(0))},t.prototype.handleTimestamp_=function(e){var t=e-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:t})},t.prototype.cancelSentTransactions_=function(){for(var e=0;e<this.outstandingPuts_.length;e++){var t=this.outstandingPuts_[e];t&&"h"in t.request&&t.queued&&(t.onComplete&&t.onComplete("disconnect"),delete this.outstandingPuts_[e],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},t.prototype.onListenRevoked_=function(e,t){var n;n=t?t.map(function(e){return R(e)}).join("$"):"default";var r=this.removeListen_(e,n);r&&r.onComplete&&r.onComplete("permission_denied")},t.prototype.removeListen_=function(e,t){var n,r=new V(e).toString();return void 0!==this.listens_[r]?(n=this.listens_[r][t],delete this.listens_[r][t],0===l.getCount(this.listens_[r])&&delete this.listens_[r]):n=void 0,n},t.prototype.onAuthRevoked_=function(e,t){_("Auth token revoked: "+e+"/"+t),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==e&&"permission_denied"!==e||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},t.prototype.onSecurityDebugPacket_=function(e){this.securityDebugCallback_?this.securityDebugCallback_(e):"msg"in e&&console.log("FIREBASE: "+e.msg.replace("\n","\nFIREBASE: "))},t.prototype.restoreState_=function(){var e=this;this.tryAuth(),l.forEach(this.listens_,function(t,n){l.forEach(n,function(t,n){e.sendListen_(n)})});for(var t=0;t<this.outstandingPuts_.length;t++)this.outstandingPuts_[t]&&this.sendPut_(t);for(;this.onDisconnectRequestQueue_.length;){var n=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(n.action,n.pathString,n.data,n.onComplete)}},t.prototype.sendConnectStats_=function(){var e={},t="js";l.CONSTANTS.NODE_ADMIN?t="admin_node":l.CONSTANTS.NODE_CLIENT&&(t="node"),e["sdk."+t+"."+a.SDK_VERSION.replace(/\./g,"-")]=1,l.isMobileCordova()?e["framework.cordova"]=1:l.isReactNative()&&(e["framework.reactnative"]=1),this.reportStats(e)},t.prototype.shouldReconnect_=function(){var e=Wt.getInstance().currentlyOnline();return l.isEmpty(this.interruptReasons_)&&e},t.nextPersistentConnectionId_=0,t.nextConnectionId_=0,t}(Xt),tn=function(e){function t(t,n,r){var o=e.call(this)||this;return o.repoInfo_=t,o.onDataUpdate_=n,o.authTokenProvider_=r,o.log_=k("p:rest:"),o.listens_={},o}return s.__extends(t,e),t.prototype.reportStats=function(e){throw new Error("Method not implemented.")},t.getListenId_=function(e,t){return void 0!==t?"tag$"+t:(l.assert(e.getQueryParams().isDefault(),"should have a tag if it's not a default query."),e.path.toString())},t.prototype.listen=function(e,n,r,o){var i=this,a=e.path.toString();this.log_("Listen called for "+a+" "+e.queryIdentifier());var s=t.getListenId_(e,r),c={};this.listens_[s]=c;var u=e.getQueryParams().toRestQueryStringParameters();this.restRequest_(a+".json",u,function(e,t){var n=t;(404===e&&(n=null,e=null),null===e&&i.onDataUpdate_(a,n,!1,r),l.safeGet(i.listens_,s)===c)&&o(e?401==e?"permission_denied":"rest_error:"+e:"ok",null)})},t.prototype.unlisten=function(e,n){var r=t.getListenId_(e,n);delete this.listens_[r]},t.prototype.refreshAuthToken=function(e){},t.prototype.restRequest_=function(e,t,n){var r=this;void 0===t&&(t={}),t.format="export",this.authTokenProvider_.getToken(!1).then(function(o){var i=o&&o.accessToken;i&&(t.auth=i);var a=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+e+"?ns="+r.repoInfo_.namespace+l.querystring(t);r.log_("Sending REST request for "+a);var s=new XMLHttpRequest;s.onreadystatechange=function(){if(n&&4===s.readyState){r.log_("REST Response for "+a+" received. status:",s.status,"response:",s.responseText);var e=null;if(s.status>=200&&s.status<300){try{e=l.jsonEval(s.responseText)}catch(e){T("Failed to parse JSON response for "+a+": "+s.responseText)}n(null,e)}else 401!==s.status&&404!==s.status&&T("Got unsuccessful REST response for "+a+" Status: "+s.status),n(s.status);n=null}},s.open("GET",a,!0),s.send()})},t}(Xt),nn=function(){function e(e,t,n){var r=this;this.repoInfo_=e,this.app=n,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new Mt,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=new tt,this.persistentConnection_=null;var o=new Ot(n);if(this.stats_=At.getCollection(e),t||z())this.server_=new tn(this.repoInfo_,this.onDataUpdate_.bind(this),o),setTimeout(this.onConnectStatus_.bind(this,!0),0);else{var i=n.options.databaseAuthVariableOverride;if(null!=i){if("object"!=typeof i)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{l.stringify(i)}catch(e){throw new Error("Invalid authOverride provided: "+e)}}this.persistentConnection_=new en(this.repoInfo_,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),o,i),this.server_=this.persistentConnection_}o.addTokenChangeListener(function(e){r.server_.refreshAuthToken(e)}),this.statsReporter_=At.getOrCreateReporter(e,function(){return new jt(r.stats_,r.server_)}),this.transactions_init_(),this.infoData_=new Nt,this.infoSyncTree_=new It({startListening:function(e,t,n,o){var i=[],a=r.infoData_.getNode(e.path);return a.isEmpty()||(i=r.infoSyncTree_.applyServerOverwrite(e.path,a),setTimeout(function(){o("ok")},0)),i},stopListening:function(){}}),this.updateInfo_("connected",!1),this.serverSyncTree_=new It({startListening:function(e,t,n,o){return r.server_.listen(e,n,t,function(t,n){var i=o(t,n);r.eventQueue_.raiseEventsForChangedPath(e.path,i)}),[]},stopListening:function(e,t){r.server_.unlisten(e,t)}})}return e.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},e.prototype.name=function(){return this.repoInfo_.namespace},e.prototype.serverTime=function(){var e=this.infoData_.getNode(new V(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+e},e.prototype.generateServerValues=function(){return(e=(e={timestamp:this.serverTime()})||{}).timestamp=e.timestamp||(new Date).getTime(),e;var e},e.prototype.onDataUpdate_=function(e,t,n,r){this.dataUpdateCount++;var o=new V(e);t=this.interceptServerDataCallback_?this.interceptServerDataCallback_(e,t):t;var i=[];if(r)if(n){var a=l.map(t,function(e){return Be(e)});i=this.serverSyncTree_.applyTaggedQueryMerge(o,a,r)}else{var s=Be(t);i=this.serverSyncTree_.applyTaggedQueryOverwrite(o,s,r)}else if(n){var c=l.map(t,function(e){return Be(e)});i=this.serverSyncTree_.applyServerMerge(o,c)}else{var u=Be(t);i=this.serverSyncTree_.applyServerOverwrite(o,u)}var d=o;i.length>0&&(d=this.rerunTransactions_(o)),this.eventQueue_.raiseEventsForChangedPath(d,i)},e.prototype.interceptServerData_=function(e){this.interceptServerDataCallback_=e},e.prototype.onConnectStatus_=function(e){this.updateInfo_("connected",e),!1===e&&this.runOnDisconnectEvents_()},e.prototype.onServerInfoUpdate_=function(e){var t=this;L(e,function(e,n){t.updateInfo_(n,e)})},e.prototype.updateInfo_=function(e,t){var n=new V("/.info/"+e),r=Be(t);this.infoData_.updateSnapshot(n,r);var o=this.infoSyncTree_.applyServerOverwrite(n,r);this.eventQueue_.raiseEventsForChangedPath(n,o)},e.prototype.getNextWriteId_=function(){return this.nextWriteId_++},e.prototype.setWithPriority=function(e,t,n,r){var o=this;this.log_("set",{path:e.toString(),value:t,priority:n});var i=this.generateServerValues(),a=Be(t,n),s=rt(a,i),l=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserOverwrite(e,s,l,!0);this.eventQueue_.queueEvents(c),this.server_.put(e.toString(),a.val(!0),function(t,n){var i="ok"===t;i||T("set at "+e+" failed: "+t);var a=o.serverSyncTree_.ackUserWrite(l,!i);o.eventQueue_.raiseEventsForChangedPath(e,a),o.callOnCompleteCallback(r,t,n)});var u=this.abortTransactions_(e);this.rerunTransactions_(u),this.eventQueue_.raiseEventsForChangedPath(u,[])},e.prototype.update=function(e,t,n){var r=this;this.log_("update",{path:e.toString(),value:t});var o=!0,i=this.generateServerValues(),a={};if(l.forEach(t,function(e,t){o=!1;var n=Be(t);a[e]=rt(n,i)}),o)_("update() called with empty data.  Don't do anything."),this.callOnCompleteCallback(n,"ok");else{var s=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserMerge(e,a,s);this.eventQueue_.queueEvents(c),this.server_.merge(e.toString(),t,function(t,o){var i="ok"===t;i||T("update at "+e+" failed: "+t);var a=r.serverSyncTree_.ackUserWrite(s,!i),l=a.length>0?r.rerunTransactions_(e):e;r.eventQueue_.raiseEventsForChangedPath(l,a),r.callOnCompleteCallback(n,t,o)}),l.forEach(t,function(t){var n=r.abortTransactions_(e.child(t));r.rerunTransactions_(n)}),this.eventQueue_.raiseEventsForChangedPath(e,[])}},e.prototype.runOnDisconnectEvents_=function(){var e=this;this.log_("onDisconnectEvents");var t=this.generateServerValues(),n=function(e,t){var n=new tt;return e.forEachTree(new V(""),function(e,r){n.remember(e,rt(r,t))}),n}(this.onDisconnect_,t),r=[];n.forEachTree(V.Empty,function(t,n){r=r.concat(e.serverSyncTree_.applyServerOverwrite(t,n));var o=e.abortTransactions_(t);e.rerunTransactions_(o)}),this.onDisconnect_=new tt,this.eventQueue_.raiseEventsForChangedPath(V.Empty,r)},e.prototype.onDisconnectCancel=function(e,t){var n=this;this.server_.onDisconnectCancel(e.toString(),function(r,o){"ok"===r&&n.onDisconnect_.forget(e),n.callOnCompleteCallback(t,r,o)})},e.prototype.onDisconnectSet=function(e,t,n){var r=this,o=Be(t);this.server_.onDisconnectPut(e.toString(),o.val(!0),function(t,i){"ok"===t&&r.onDisconnect_.remember(e,o),r.callOnCompleteCallback(n,t,i)})},e.prototype.onDisconnectSetWithPriority=function(e,t,n,r){var o=this,i=Be(t,n);this.server_.onDisconnectPut(e.toString(),i.val(!0),function(t,n){"ok"===t&&o.onDisconnect_.remember(e,i),o.callOnCompleteCallback(r,t,n)})},e.prototype.onDisconnectUpdate=function(e,t,n){var r=this;if(l.isEmpty(t))return _("onDisconnect().update() called with empty data.  Don't do anything."),void this.callOnCompleteCallback(n,"ok");this.server_.onDisconnectMerge(e.toString(),t,function(o,i){"ok"===o&&l.forEach(t,function(t,n){var o=Be(n);r.onDisconnect_.remember(e.child(t),o)}),r.callOnCompleteCallback(n,o,i)})},e.prototype.addEventCallbackForQuery=function(e,t){var n;n=".info"===e.path.getFront()?this.infoSyncTree_.addEventRegistration(e,t):this.serverSyncTree_.addEventRegistration(e,t),this.eventQueue_.raiseEventsAtPath(e.path,n)},e.prototype.removeEventCallbackForQuery=function(e,t){var n;n=".info"===e.path.getFront()?this.infoSyncTree_.removeEventRegistration(e,t):this.serverSyncTree_.removeEventRegistration(e,t),this.eventQueue_.raiseEventsAtPath(e.path,n)},e.prototype.interrupt=function(){this.persistentConnection_&&this.persistentConnection_.interrupt("repo_interrupt")},e.prototype.resume=function(){this.persistentConnection_&&this.persistentConnection_.resume("repo_interrupt")},e.prototype.stats=function(e){if(void 0===e&&(e=!1),"undefined"!=typeof console){var t;e?(this.statsListener_||(this.statsListener_=new Rt(this.stats_)),t=this.statsListener_.get()):t=this.stats_.get();var n=Object.keys(t).reduce(function(e,t){return Math.max(t.length,e)},0);l.forEach(t,function(e,t){for(var r=e.length;r<n+2;r++)e+=" ";console.log(e+t)})}},e.prototype.statsIncrementCounter=function(e){this.stats_.incrementCounter(e),this.statsReporter_.includeStat(e)},e.prototype.log_=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="";this.persistentConnection_&&(n=this.persistentConnection_.id+":"),_.apply(void 0,[n].concat(e))},e.prototype.callOnCompleteCallback=function(e,t,n){e&&U(function(){if("ok"==t)e(null);else{var r=(t||"error").toUpperCase(),o=r;n&&(o+=": "+n);var i=new Error(o);i.code=r,e(i)}})},Object.defineProperty(e.prototype,"database",{get:function(){return this.__database||(this.__database=new fn(this))},enumerable:!0,configurable:!0}),e}(),rn=function(){function e(t){this.indexedFilter_=new gt(t.getIndex()),this.index_=t.getIndex(),this.startPost_=e.getStartPost_(t),this.endPost_=e.getEndPost_(t)}return e.prototype.getStartPost=function(){return this.startPost_},e.prototype.getEndPost=function(){return this.endPost_},e.prototype.matches=function(e){return this.index_.compare(this.getStartPost(),e)<=0&&this.index_.compare(e,this.getEndPost())<=0},e.prototype.updateChild=function(e,t,n,r,o,i){return this.matches(new ge(t,n))||(n=ze.EMPTY_NODE),this.indexedFilter_.updateChild(e,t,n,r,o,i)},e.prototype.updateFullNode=function(e,t,n){t.isLeafNode()&&(t=ze.EMPTY_NODE);var r=t.withIndex(this.index_);r=r.updatePriority(ze.EMPTY_NODE);var o=this;return t.forEachChild(Ie,function(e,t){o.matches(new ge(e,t))||(r=r.updateImmediateChild(e,ze.EMPTY_NODE))}),this.indexedFilter_.updateFullNode(e,r,n)},e.prototype.updatePriority=function(e,t){return e},e.prototype.filtersNodes=function(){return!0},e.prototype.getIndexedFilter=function(){return this.indexedFilter_},e.prototype.getIndex=function(){return this.index_},e.getStartPost_=function(e){if(e.hasStart()){var t=e.getIndexStartName();return e.getIndex().makePost(e.getIndexStartValue(),t)}return e.getIndex().minPost()},e.getEndPost_=function(e){if(e.hasEnd()){var t=e.getIndexEndName();return e.getIndex().makePost(e.getIndexEndValue(),t)}return e.getIndex().maxPost()},e}(),on=function(){function e(e){this.rangedFilter_=new rn(e),this.index_=e.getIndex(),this.limit_=e.getLimit(),this.reverse_=!e.isViewFromLeft()}return e.prototype.updateChild=function(e,t,n,r,o,i){return this.rangedFilter_.matches(new ge(t,n))||(n=ze.EMPTY_NODE),e.getImmediateChild(t).equals(n)?e:e.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(e,t,n,r,o,i):this.fullLimitUpdateChild_(e,t,n,o,i)},e.prototype.updateFullNode=function(e,t,n){var r;if(t.isLeafNode()||t.isEmpty())r=ze.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<t.numChildren()&&t.isIndexed(this.index_)){r=ze.EMPTY_NODE.withIndex(this.index_);var o=void 0;o=this.reverse_?t.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):t.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var i=0;o.hasNext()&&i<this.limit_;){var a=o.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),a)<=0:this.index_.compare(a,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(a.name,a.node),i++}}else{r=(r=t.withIndex(this.index_)).updatePriority(ze.EMPTY_NODE);var s=void 0,l=void 0,c=void 0;o=void 0;if(this.reverse_){o=r.getReverseIterator(this.index_),s=this.rangedFilter_.getEndPost(),l=this.rangedFilter_.getStartPost();var u=this.index_.getCompare();c=function(e,t){return u(t,e)}}else o=r.getIterator(this.index_),s=this.rangedFilter_.getStartPost(),l=this.rangedFilter_.getEndPost(),c=this.index_.getCompare();i=0;for(var d=!1;o.hasNext();){a=o.getNext();!d&&c(s,a)<=0&&(d=!0),d&&i<this.limit_&&c(a,l)<=0?i++:r=r.updateImmediateChild(a.name,ze.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(e,r,n)},e.prototype.updatePriority=function(e,t){return e},e.prototype.filtersNodes=function(){return!0},e.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},e.prototype.getIndex=function(){return this.index_},e.prototype.fullLimitUpdateChild_=function(e,t,n,r,o){var i;if(this.reverse_){var a=this.index_.getCompare();i=function(e,t){return a(t,e)}}else i=this.index_.getCompare();var s=e;l.assert(s.numChildren()==this.limit_,"");var c=new ge(t,n),u=this.reverse_?s.getFirstChild(this.index_):s.getLastChild(this.index_),d=this.rangedFilter_.matches(c);if(s.hasChild(t)){for(var p=s.getImmediateChild(t),f=r.getChildAfterChild(this.index_,u,this.reverse_);null!=f&&(f.name==t||s.hasChild(f.name));)f=r.getChildAfterChild(this.index_,f,this.reverse_);var h=null==f?1:i(f,c);if(d&&!n.isEmpty()&&h>=0)return null!=o&&o.trackChildChange(mt.childChangedChange(t,n,p)),s.updateImmediateChild(t,n);null!=o&&o.trackChildChange(mt.childRemovedChange(t,p));var m=s.updateImmediateChild(t,ze.EMPTY_NODE);return null!=f&&this.rangedFilter_.matches(f)?(null!=o&&o.trackChildChange(mt.childAddedChange(f.name,f.node)),m.updateImmediateChild(f.name,f.node)):m}return n.isEmpty()?e:d&&i(u,c)>=0?(null!=o&&(o.trackChildChange(mt.childRemovedChange(u.name,u.node)),o.trackChildChange(mt.childAddedChange(t,n))),s.updateImmediateChild(t,n).updateImmediateChild(u.name,ze.EMPTY_NODE)):e},e}(),an=function(){function e(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=Ie}return e.prototype.hasStart=function(){return this.startSet_},e.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:this.viewFrom_===e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT},e.prototype.getIndexStartValue=function(){return l.assert(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},e.prototype.getIndexStartName=function(){return l.assert(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:I},e.prototype.hasEnd=function(){return this.endSet_},e.prototype.getIndexEndValue=function(){return l.assert(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},e.prototype.getIndexEndName=function(){return l.assert(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:N},e.prototype.hasLimit=function(){return this.limitSet_},e.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},e.prototype.getLimit=function(){return l.assert(this.limitSet_,"Only valid if limit has been set"),this.limit_},e.prototype.getIndex=function(){return this.index_},e.prototype.copy_=function(){var t=new e;return t.limitSet_=this.limitSet_,t.limit_=this.limit_,t.startSet_=this.startSet_,t.indexStartValue_=this.indexStartValue_,t.startNameSet_=this.startNameSet_,t.indexStartName_=this.indexStartName_,t.endSet_=this.endSet_,t.indexEndValue_=this.indexEndValue_,t.endNameSet_=this.endNameSet_,t.indexEndName_=this.indexEndName_,t.index_=this.index_,t.viewFrom_=this.viewFrom_,t},e.prototype.limit=function(e){var t=this.copy_();return t.limitSet_=!0,t.limit_=e,t.viewFrom_="",t},e.prototype.limitToFirst=function(t){var n=this.copy_();return n.limitSet_=!0,n.limit_=t,n.viewFrom_=e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT,n},e.prototype.limitToLast=function(t){var n=this.copy_();return n.limitSet_=!0,n.limit_=t,n.viewFrom_=e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT,n},e.prototype.startAt=function(e,t){var n=this.copy_();return n.startSet_=!0,void 0===e&&(e=null),n.indexStartValue_=e,null!=t?(n.startNameSet_=!0,n.indexStartName_=t):(n.startNameSet_=!1,n.indexStartName_=""),n},e.prototype.endAt=function(e,t){var n=this.copy_();return n.endSet_=!0,void 0===e&&(e=null),n.indexEndValue_=e,void 0!==t?(n.endNameSet_=!0,n.indexEndName_=t):(n.endNameSet_=!1,n.indexEndName_=""),n},e.prototype.orderBy=function(e){var t=this.copy_();return t.index_=e,t},e.prototype.getQueryObject=function(){var t=e.WIRE_PROTOCOL_CONSTANTS_,n={};if(this.startSet_&&(n[t.INDEX_START_VALUE]=this.indexStartValue_,this.startNameSet_&&(n[t.INDEX_START_NAME]=this.indexStartName_)),this.endSet_&&(n[t.INDEX_END_VALUE]=this.indexEndValue_,this.endNameSet_&&(n[t.INDEX_END_NAME]=this.indexEndName_)),this.limitSet_){n[t.LIMIT]=this.limit_;var r=this.viewFrom_;""===r&&(r=this.isViewFromLeft()?t.VIEW_FROM_LEFT:t.VIEW_FROM_RIGHT),n[t.VIEW_FROM]=r}return this.index_!==Ie&&(n[t.INDEX]=this.index_.toString()),n},e.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},e.prototype.isDefault=function(){return this.loadsAllData()&&this.index_==Ie},e.prototype.getNodeFilter=function(){return this.loadsAllData()?new gt(this.getIndex()):this.hasLimit()?new on(this):new rn(this)},e.prototype.toRestQueryStringParameters=function(){var t,n=e.REST_QUERY_CONSTANTS_,r={};return this.isDefault()?r:(this.index_===Ie?t=n.PRIORITY_INDEX:this.index_===Qe?t=n.VALUE_INDEX:this.index_===ye?t=n.KEY_INDEX:(l.assert(this.index_ instanceof Ke,"Unrecognized index type!"),t=this.index_.toString()),r[n.ORDER_BY]=l.stringify(t),this.startSet_&&(r[n.START_AT]=l.stringify(this.indexStartValue_),this.startNameSet_&&(r[n.START_AT]+=","+l.stringify(this.indexStartName_))),this.endSet_&&(r[n.END_AT]=l.stringify(this.indexEndValue_),this.endNameSet_&&(r[n.END_AT]+=","+l.stringify(this.indexEndName_))),this.limitSet_&&(this.isViewFromLeft()?r[n.LIMIT_TO_FIRST]=this.limit_:r[n.LIMIT_TO_LAST]=this.limit_),r)},e.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:"sp",INDEX_START_NAME:"sn",INDEX_END_VALUE:"ep",INDEX_END_NAME:"en",LIMIT:"l",VIEW_FROM:"vf",VIEW_FROM_LEFT:"l",VIEW_FROM_RIGHT:"r",INDEX:"i"},e.REST_QUERY_CONSTANTS_={ORDER_BY:"orderBy",PRIORITY_INDEX:"$priority",VALUE_INDEX:"$value",KEY_INDEX:"$key",START_AT:"startAt",END_AT:"endAt",LIMIT_TO_FIRST:"limitToFirst",LIMIT_TO_LAST:"limitToLast"},e.DEFAULT=new e,e}(),sn=function(e){function t(t,n){if(!(t instanceof nn))throw new Error("new Reference() no longer supported - use app.database().");return e.call(this,t,n,an.DEFAULT,!1)||this}return s.__extends(t,e),t.prototype.getKey=function(){return l.validateArgCount("Reference.key",0,0,arguments.length),this.path.isEmpty()?null:this.path.getBack()},t.prototype.child=function(e){return l.validateArgCount("Reference.child",1,1,arguments.length),"number"==typeof e?e=String(e):e instanceof V||(null===this.path.getFront()?function(e,t,n,r){n&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),ue(e,t,n,r)}("Reference.child",1,e,!1):ue("Reference.child",1,e,!1)),new t(this.repo,this.path.child(e))},t.prototype.getParent=function(){l.validateArgCount("Reference.parent",0,0,arguments.length);var e=this.path.parent();return null===e?null:new t(this.repo,e)},t.prototype.getRoot=function(){l.validateArgCount("Reference.root",0,0,arguments.length);for(var e=this;null!==e.getParent();)e=e.getParent();return e},t.prototype.databaseProp=function(){return this.repo.database},t.prototype.set=function(e,t){l.validateArgCount("Reference.set",1,2,arguments.length),de("Reference.set",this.path),oe("Reference.set",1,e,this.path,!1),l.validateCallback("Reference.set",2,t,!0);var n=new l.Deferred;return this.repo.setWithPriority(this.path,e,null,n.wrapCallback(t)),n.promise},t.prototype.update=function(e,t){if(l.validateArgCount("Reference.update",1,2,arguments.length),de("Reference.update",this.path),Array.isArray(e)){for(var n={},r=0;r<e.length;++r)n[""+r]=e[r];e=n,T("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}ae("Reference.update",1,e,this.path,!1),l.validateCallback("Reference.update",2,t,!0);var o=new l.Deferred;return this.repo.update(this.path,e,o.wrapCallback(t)),o.promise},t.prototype.setWithPriority=function(e,t,n){if(l.validateArgCount("Reference.setWithPriority",2,3,arguments.length),de("Reference.setWithPriority",this.path),oe("Reference.setWithPriority",1,e,this.path,!1),se("Reference.setWithPriority",2,t,!1),l.validateCallback("Reference.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new l.Deferred;return this.repo.setWithPriority(this.path,e,t,r.wrapCallback(n)),r.promise},t.prototype.remove=function(e){return l.validateArgCount("Reference.remove",0,1,arguments.length),de("Reference.remove",this.path),l.validateCallback("Reference.remove",1,e,!0),this.set(null,e)},t.prototype.transaction=function(e,t,n){if(l.validateArgCount("Reference.transaction",1,3,arguments.length),de("Reference.transaction",this.path),l.validateCallback("Reference.transaction",1,e,!1),l.validateCallback("Reference.transaction",2,t,!0),function(e,t,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error(l.errorPrefix(e,t,r)+"must be a boolean.")}("Reference.transaction",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.transaction failed: "+this.getKey()+" is a read-only object.";void 0===n&&(n=!0);var r=new l.Deferred;"function"==typeof t&&r.promise.catch(function(){});return this.repo.startTransaction(this.path,e,function(e,n,o){e?r.reject(e):r.resolve(new he(n,o)),"function"==typeof t&&t(e,n,o)},n),r.promise},t.prototype.setPriority=function(e,t){l.validateArgCount("Reference.setPriority",1,2,arguments.length),de("Reference.setPriority",this.path),se("Reference.setPriority",1,e,!1),l.validateCallback("Reference.setPriority",2,t,!0);var n=new l.Deferred;return this.repo.setWithPriority(this.path.child(".priority"),e,null,n.wrapCallback(t)),n.promise},t.prototype.push=function(e,t){l.validateArgCount("Reference.push",0,2,arguments.length),de("Reference.push",this.path),oe("Reference.push",1,e,this.path,!0),l.validateCallback("Reference.push",2,t,!0);var n,r=this.repo.serverTime(),o=me(r),i=this.child(o),a=this.child(o);return n=null!=e?i.set(e,t).then(function(){return a}):Promise.resolve(a),i.then=n.then.bind(n),i.catch=n.then.bind(n,void 0),"function"==typeof t&&n.catch(function(){}),i},t.prototype.onDisconnect=function(){return de("Reference.onDisconnect",this.path),new fe(this.repo,this.path)},Object.defineProperty(t.prototype,"database",{get:function(){return this.databaseProp()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.getKey()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return this.getParent()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"root",{get:function(){return this.getRoot()},enumerable:!0,configurable:!0}),t}(Ze);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */Ze.__referenceConstructor=sn,Et.__referenceConstructor=sn;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ln,cn=function(){return function(){this.children={},this.childCount=0,this.value=null}}(),un=function(){function e(e,t,n){void 0===e&&(e=""),void 0===t&&(t=null),void 0===n&&(n=new cn),this.name_=e,this.parent_=t,this.node_=n}return e.prototype.subTree=function(t){for(var n,r=t instanceof V?t:new V(t),o=this;null!==(n=r.getFront());){o=new e(n,o,l.safeGet(o.node_.children,n)||new cn),r=r.popFront()}return o},e.prototype.getValue=function(){return this.node_.value},e.prototype.setValue=function(e){l.assert(void 0!==e,"Cannot set value to undefined"),this.node_.value=e,this.updateParents_()},e.prototype.clear=function(){this.node_.value=null,this.node_.children={},this.node_.childCount=0,this.updateParents_()},e.prototype.hasChildren=function(){return this.node_.childCount>0},e.prototype.isEmpty=function(){return null===this.getValue()&&!this.hasChildren()},e.prototype.forEachChild=function(t){var n=this;l.forEach(this.node_.children,function(r,o){t(new e(r,n,o))})},e.prototype.forEachDescendant=function(e,t,n){t&&!n&&e(this),this.forEachChild(function(t){t.forEachDescendant(e,!0,n)}),t&&n&&e(this)},e.prototype.forEachAncestor=function(e,t){for(var n=t?this:this.parent();null!==n;){if(e(n))return!0;n=n.parent()}return!1},e.prototype.forEachImmediateDescendantWithValue=function(e){this.forEachChild(function(t){null!==t.getValue()?e(t):t.forEachImmediateDescendantWithValue(e)})},e.prototype.path=function(){return new V(null===this.parent_?this.name_:this.parent_.path()+"/"+this.name_)},e.prototype.name=function(){return this.name_},e.prototype.parent=function(){return this.parent_},e.prototype.updateParents_=function(){null!==this.parent_&&this.parent_.updateChild_(this.name_,this)},e.prototype.updateChild_=function(e,t){var n=t.isEmpty(),r=l.contains(this.node_.children,e);n&&r?(delete this.node_.children[e],this.node_.childCount--,this.updateParents_()):n||r||(this.node_.children[e]=t.node_,this.node_.childCount++,this.updateParents_())},e}();!function(e){e[e.RUN=0]="RUN",e[e.SENT=1]="SENT",e[e.COMPLETED=2]="COMPLETED",e[e.SENT_NEEDS_ABORT=3]="SENT_NEEDS_ABORT",e[e.NEEDS_ABORT=4]="NEEDS_ABORT"}(ln||(ln={})),nn.MAX_TRANSACTION_RETRIES_=25,nn.prototype.transactions_init_=function(){this.transactionQueueTree_=new un},nn.prototype.startTransaction=function(e,t,n,r){this.log_("transaction on "+e);var o=function(){},i=new sn(this,e);i.on("value",o);var a={path:e,update:t,onComplete:n,status:null,order:g(),applyLocally:r,retryCount:0,unwatcher:function(){i.off("value",o)},abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},s=this.getLatestState_(e);a.currentInputSnapshot=s;var c=a.update(s.val());if(void 0===c){if(a.unwatcher(),a.currentOutputSnapshotRaw=null,a.currentOutputSnapshotResolved=null,a.onComplete){var u=new Ge(a.currentInputSnapshot,new sn(this,a.path),Ie);a.onComplete(null,!1,u)}}else{ie("transaction failed: Data returned ",c,a.path),a.status=ln.RUN;var d=this.transactionQueueTree_.subTree(e),p=d.getValue()||[];p.push(a),d.setValue(p);var f=void 0;if("object"==typeof c&&null!==c&&l.contains(c,".priority"))f=l.safeGet(c,".priority"),l.assert(re(f),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");else f=(this.serverSyncTree_.calcCompleteEventCache(e)||ze.EMPTY_NODE).getPriority().val();f=f;var h=this.generateServerValues(),m=Be(c,f),b=rt(m,h);a.currentOutputSnapshotRaw=m,a.currentOutputSnapshotResolved=b,a.currentWriteId=this.getNextWriteId_();var v=this.serverSyncTree_.applyUserOverwrite(e,b,a.currentWriteId,a.applyLocally);this.eventQueue_.raiseEventsForChangedPath(e,v),this.sendReadyTransactions_()}},nn.prototype.getLatestState_=function(e,t){return this.serverSyncTree_.calcCompleteEventCache(e,t)||ze.EMPTY_NODE},nn.prototype.sendReadyTransactions_=function(e){var t=this;if(void 0===e&&(e=this.transactionQueueTree_),e||this.pruneCompletedTransactionsBelowNode_(e),null!==e.getValue()){var n=this.buildTransactionQueue_(e);l.assert(n.length>0,"Sending zero length transaction queue"),n.every(function(e){return e.status===ln.RUN})&&this.sendTransactionQueue_(e.path(),n)}else e.hasChildren()&&e.forEachChild(function(e){t.sendReadyTransactions_(e)})},nn.prototype.sendTransactionQueue_=function(e,t){for(var n=this,r=t.map(function(e){return e.currentWriteId}),o=this.getLatestState_(e,r),i=o,a=o.hash(),s=0;s<t.length;s++){var c=t[s];l.assert(c.status===ln.RUN,"tryToSendTransactionQueue_: items in queue should all be run."),c.status=ln.SENT,c.retryCount++;var u=V.relativePath(e,c.path);i=i.updateChild(u,c.currentOutputSnapshotRaw)}var d=i.val(!0),p=e;this.server_.put(p.toString(),d,function(r){n.log_("transaction put response",{path:p.toString(),status:r});var o=[];if("ok"===r){for(var i=[],a=0;a<t.length;a++){if(t[a].status=ln.COMPLETED,o=o.concat(n.serverSyncTree_.ackUserWrite(t[a].currentWriteId)),t[a].onComplete){var s=t[a].currentOutputSnapshotResolved,l=new sn(n,t[a].path),c=new Ge(s,l,Ie);i.push(t[a].onComplete.bind(null,null,!0,c))}t[a].unwatcher()}n.pruneCompletedTransactionsBelowNode_(n.transactionQueueTree_.subTree(e)),n.sendReadyTransactions_(),n.eventQueue_.raiseEventsForChangedPath(e,o);for(a=0;a<i.length;a++)U(i[a])}else{if("datastale"===r)for(a=0;a<t.length;a++)t[a].status===ln.SENT_NEEDS_ABORT?t[a].status=ln.NEEDS_ABORT:t[a].status=ln.RUN;else{T("transaction at "+p.toString()+" failed: "+r);for(a=0;a<t.length;a++)t[a].status=ln.NEEDS_ABORT,t[a].abortReason=r}n.rerunTransactions_(e)}},a)},nn.prototype.rerunTransactions_=function(e){var t=this.getAncestorTransactionNode_(e),n=t.path(),r=this.buildTransactionQueue_(t);return this.rerunTransactionQueue_(r,n),n},nn.prototype.rerunTransactionQueue_=function(e,t){if(0!==e.length){for(var n,r=[],o=[],i=e.filter(function(e){return e.status===ln.RUN}).map(function(e){return e.currentWriteId}),a=0;a<e.length;a++){var s=e[a],c=V.relativePath(t,s.path),u=!1,d=void 0;if(l.assert(null!==c,"rerunTransactionsUnderNode_: relativePath should not be null."),s.status===ln.NEEDS_ABORT)u=!0,d=s.abortReason,o=o.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0));else if(s.status===ln.RUN)if(s.retryCount>=nn.MAX_TRANSACTION_RETRIES_)u=!0,d="maxretry",o=o.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0));else{var p=this.getLatestState_(s.path,i);s.currentInputSnapshot=p;var f=e[a].update(p.val());if(void 0!==f){ie("transaction failed: Data returned ",f,s.path);var h=Be(f);"object"==typeof f&&null!=f&&l.contains(f,".priority")||(h=h.updatePriority(p.getPriority()));var m=s.currentWriteId,g=this.generateServerValues(),b=rt(h,g);s.currentOutputSnapshotRaw=h,s.currentOutputSnapshotResolved=b,s.currentWriteId=this.getNextWriteId_(),i.splice(i.indexOf(m),1),o=(o=o.concat(this.serverSyncTree_.applyUserOverwrite(s.path,b,s.currentWriteId,s.applyLocally))).concat(this.serverSyncTree_.ackUserWrite(m,!0))}else u=!0,d="nodata",o=o.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0))}if(this.eventQueue_.raiseEventsForChangedPath(t,o),o=[],u&&(e[a].status=ln.COMPLETED,n=e[a].unwatcher,setTimeout(n,Math.floor(0)),e[a].onComplete))if("nodata"===d){var v=new sn(this,e[a].path),y=e[a].currentInputSnapshot,w=new Ge(y,v,Ie);r.push(e[a].onComplete.bind(null,null,!1,w))}else r.push(e[a].onComplete.bind(null,new Error(d),!1,null))}this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);for(a=0;a<r.length;a++)U(r[a]);this.sendReadyTransactions_()}},nn.prototype.getAncestorTransactionNode_=function(e){for(var t,n=this.transactionQueueTree_;null!==(t=e.getFront())&&null===n.getValue();)n=n.subTree(t),e=e.popFront();return n},nn.prototype.buildTransactionQueue_=function(e){var t=[];return this.aggregateTransactionQueuesForNode_(e,t),t.sort(function(e,t){return e.order-t.order}),t},nn.prototype.aggregateTransactionQueuesForNode_=function(e,t){var n=this,r=e.getValue();if(null!==r)for(var o=0;o<r.length;o++)t.push(r[o]);e.forEachChild(function(e){n.aggregateTransactionQueuesForNode_(e,t)})},nn.prototype.pruneCompletedTransactionsBelowNode_=function(e){var t=this,n=e.getValue();if(n){for(var r=0,o=0;o<n.length;o++)n[o].status!==ln.COMPLETED&&(n[r]=n[o],r++);n.length=r,e.setValue(n.length>0?n:null)}e.forEachChild(function(e){t.pruneCompletedTransactionsBelowNode_(e)})},nn.prototype.abortTransactions_=function(e){var t=this,n=this.getAncestorTransactionNode_(e).path(),r=this.transactionQueueTree_.subTree(e);return r.forEachAncestor(function(e){t.abortTransactionsOnNode_(e)}),this.abortTransactionsOnNode_(r),r.forEachDescendant(function(e){t.abortTransactionsOnNode_(e)}),n},nn.prototype.abortTransactionsOnNode_=function(e){var t=e.getValue();if(null!==t){for(var n=[],r=[],o=-1,i=0;i<t.length;i++)if(t[i].status===ln.SENT_NEEDS_ABORT);else if(t[i].status===ln.SENT)l.assert(o===i-1,"All SENT items should be at beginning of queue."),o=i,t[i].status=ln.SENT_NEEDS_ABORT,t[i].abortReason="set";else if(l.assert(t[i].status===ln.RUN,"Unexpected transaction status in abort"),t[i].unwatcher(),r=r.concat(this.serverSyncTree_.ackUserWrite(t[i].currentWriteId,!0)),t[i].onComplete){n.push(t[i].onComplete.bind(null,new Error("set"),!1,null))}-1===o?e.setValue(null):t.length=o+1,this.eventQueue_.raiseEventsForChangedPath(e.path(),r);for(i=0;i<n.length;i++)U(n[i])}};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var dn,pn=function(){function e(){this.repos_={},this.useRestClient_=!1}return e.getInstance=function(){return dn||(dn=new e),dn},e.prototype.interrupt=function(){for(var e in this.repos_)for(var t in this.repos_[e])this.repos_[e][t].interrupt()},e.prototype.resume=function(){for(var e in this.repos_)for(var t in this.repos_[e])this.repos_[e][t].resume()},e.prototype.databaseFromApp=function(e,t){var n=t||e.options.databaseURL;void 0===n&&C("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.initializeApp().");var r=X(n),o=r.repoInfo;return pe("Invalid Firebase Database URL",1,r),r.path.isEmpty()||C("Database URL must point to the root of a Firebase Database (not including a child path)."),this.createRepo(o,e).database},e.prototype.deleteRepo=function(e){var t=l.safeGet(this.repos_,e.app.name);t&&l.safeGet(t,e.repoInfo_.toURLString())===e||C("Database "+e.app.name+"("+e.repoInfo_+") has already been deleted."),e.interrupt(),delete t[e.repoInfo_.toURLString()]},e.prototype.createRepo=function(e,t){var n=l.safeGet(this.repos_,t.name);n||(n={},this.repos_[t.name]=n);var r=l.safeGet(n,e.toURLString());return r&&C("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),r=new nn(e,this.useRestClient_,t),n[e.toURLString()]=r,r},e.prototype.forceRestClient=function(e){this.useRestClient_=e},e}(),fn=function(){function e(e){this.repo_=e,e instanceof nn||C("Don't call new Database() directly - please use firebase.database()."),this.root_=new sn(e,V.Empty),this.INTERNAL=new hn(this)}return Object.defineProperty(e.prototype,"app",{get:function(){return this.repo_.app},enumerable:!0,configurable:!0}),e.prototype.ref=function(e){return this.checkDeleted_("ref"),l.validateArgCount("database.ref",0,1,arguments.length),e instanceof sn?this.refFromURL(e.toString()):void 0!==e?this.root_.child(e):this.root_},e.prototype.refFromURL=function(e){var t="database.refFromURL";this.checkDeleted_(t),l.validateArgCount(t,1,1,arguments.length);var n=X(e);pe(t,1,n);var r=n.repoInfo;return r.host!==this.repo_.repoInfo_.host&&C(t+": Host name does not match the current database: (found "+r.host+" but expected "+this.repo_.repoInfo_.host+")"),this.ref(n.path.toString())},e.prototype.checkDeleted_=function(e){null===this.repo_&&C("Cannot call "+e+" on a deleted database.")},e.prototype.goOffline=function(){l.validateArgCount("database.goOffline",0,0,arguments.length),this.checkDeleted_("goOffline"),this.repo_.interrupt()},e.prototype.goOnline=function(){l.validateArgCount("database.goOnline",0,0,arguments.length),this.checkDeleted_("goOnline"),this.repo_.resume()},e.ServerValue={TIMESTAMP:{".sv":"timestamp"}},e}(),hn=function(){function e(e){this.database=e}return e.prototype.delete=function(){return s.__awaiter(this,void 0,void 0,function(){return s.__generator(this,function(e){return this.database.checkDeleted_("delete"),pn.getInstance().deleteRepo(this.database.repo_),this.database.repo_=null,this.database.root_=null,this.database.INTERNAL=null,this.database=null,[2]})})},e}(),mn=Object.freeze({forceLongPolling:function(){Gt.forceDisallow(),Ht.forceAllow()},forceWebSockets:function(){Ht.forceDisallow()},isWebSocketsAvailable:function(){return Gt.isAvailable()},setSecurityDebugCallback:function(e,t){e.repo.persistentConnection_.securityDebugCallback_=t},stats:function(e,t){e.repo.stats(t)},statsIncrementCounter:function(e,t){e.repo.statsIncrementCounter(t)},dataUpdateCount:function(e){return e.repo.dataUpdateCount},interceptServerData:function(e,t){return e.repo.interceptServerData_(t)}}),gn=en;en.prototype.simpleListen=function(e,t){this.sendRequest("q",{p:e},t)},en.prototype.echo=function(e,t){this.sendRequest("echo",{d:e},t)};var bn=Yt,vn=H,yn=Object.freeze({DataConnection:gn,RealTimeConnection:bn,hijackHash:function(e){var t=en.prototype.put;return en.prototype.put=function(n,r,o,i){void 0!==i&&(i=e()),t.call(this,n,r,o,i)},function(){en.prototype.put=t}},ConnectionTarget:vn,queryIdentifier:function(e){return e.queryIdentifier()},listens:function(e){return e.repo.persistentConnection_.listens_},forceRestClient:function(e){pn.getInstance().forceRestClient(e)}}),wn=fn.ServerValue;function xn(t){var n=t.INTERNAL.registerService("database",function(e,t,n){return pn.getInstance().databaseFromApp(e,n)},{Reference:sn,Query:Ze,Database:fn,enableLogging:x,INTERNAL:mn,ServerValue:wn,TEST_ACCESS:yn},null,!0);l.isNodeSdk()&&(e.exports=n)}xn(a),t.registerDatabase=xn,t.Database=fn,t.Query=Ze,t.Reference=sn,t.enableLogging=x,t.ServerValue=wn,t.DataSnapshot=Ge,t.OnDisconnect=fe}).call(this,n(31))},function(e,t,n){"use strict";n.r(t),n.d(t,"setLogLevel",function(){return l}),n.d(t,"Logger",function(){return s}),n.d(t,"LogLevel",function(){return r});
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var r,o=[];!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(r||(r={}));var i=r.INFO,a=function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];if(!(t<e.logLevel)){var i=(new Date).toISOString();switch(t){case r.DEBUG:case r.VERBOSE:console.log.apply(console,["["+i+"]  "+e.name+":"].concat(n));break;case r.INFO:console.info.apply(console,["["+i+"]  "+e.name+":"].concat(n));break;case r.WARN:console.warn.apply(console,["["+i+"]  "+e.name+":"].concat(n));break;case r.ERROR:console.error.apply(console,["["+i+"]  "+e.name+":"].concat(n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+t+")")}}},s=function(){function e(e){this.name=e,this._logLevel=i,this._logHandler=a,o.push(this)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in r))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!0,configurable:!0}),e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,[this,r.DEBUG].concat(e))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,[this,r.VERBOSE].concat(e))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,[this,r.INFO].concat(e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,[this,r.WARN].concat(e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,[this,r.ERROR].concat(e))},e}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function l(e){o.forEach(function(t){t.logLevel=e})}},,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(12),a=n.n(i),s=n(11),l=n(72),c=n.n(l);n(143),n(144);var u={apiKey:"AIzaSyDB1iJESEd5i402vYWfzhFW6PuWuB38ymI",authDomain:"esports-platform-20d82.firebaseapp.com",databaseURL:"https://esports-platform-20d82.firebaseio.com",projectId:"esports-platform-20d82",storageBucket:"esports-platform-20d82.appspot.com",messagingSenderId:"519254861088"},d=function e(){!
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c.a.initializeApp(u),this.auth=c.a.auth(),this.database=c.a.database()},p=n(66);n(42),n(45);a.a.render(o.a.createElement(s.a,null,o.a.createElement(p.b,{firebase:new d})),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdHN0cmFwL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdHN0cmFwL2VzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9kaXN0L3N0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvb2tpZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaXZlcnNhbC1jb29raWUvZXM2L3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bml2ZXJzYWwtY29va2llL2VzNi9Db29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb29raWUvZXM2L0Nvb2tpZXNDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb29raWUvZXM2L0Nvb2tpZXNQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pdmVyc2FsLWNvb2tpZS9lczYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvb2tpZS9lczYvd2l0aENvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvb2tpZS9lczYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGlzL3N0eWxpcy5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21lbW9pemUtb25lL2Rpc3QvbWVtb2l6ZS1vbmUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL2Rpc3QvaW5kZXguY2pzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWVzL2JhbGxzL1A1V3JhcHBlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3RzdHJhcC9lcy9TcGlubmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9nYW1lcy9iYWxscy9jb21wb25lbnRzL0xhbmd1YWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9nYW1lcy9iYWxscy9jb21wb25lbnRzL0ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGlzLXJ1bGUtc2hlZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5pc2Z1bmN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9nYW1lcy9iYWxscy9CYXNlQXBwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvbWVtb2l6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2lzLXByb3AtdmFsaWQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWVzL2JhbGxzL2NvbXBvbmVudHMvTWVudS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3RzdHJhcC9lcy9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtY29va2llL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0c3RyYXAvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdHN0cmFwL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5taW4uY3NzPzkxMzkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2Nzcy9ib290c3RyYXAubWluLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvY3NzL3N0eWxlLmNzcz9jMWQyIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvY3NzL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZXMvYmFsbHMvY29tcG9uZW50cy9SZXN1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWVzL2JhbGxzL1A1V3JhcHBlci9za2V0Y2gvQmFsbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZXMvYmFsbHMvUDVXcmFwcGVyL3NrZXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZXMvYmFsbHMvbGFuZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZXMvYmFsbHMvQXBwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9hcHAvZGlzdC9pbmRleC5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvZGlzdC9pbmRleC5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS1wb2x5ZmlsbC9saWIvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy9yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3BvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9kaXN0L2F1dGguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvZGF0YWJhc2UvZGlzdC9pbmRleC5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9sb2dnZXIvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZpcmViYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9nYW1lcy9iYWxscy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fd2VicGFja19leHBvcnRzX18iLCJtYXBUb0Nzc01vZHVsZXMiLCJ3YXJuT25jZSIsImRlcHJlY2F0ZWQiLCJ0YWdQcm9wVHlwZSIsImdsb2JhbENzc01vZHVsZSIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiY2xhc3NOYW1lIiwiY3NzTW9kdWxlIiwic3BsaXQiLCJtYXAiLCJqb2luIiwid2FybmVkIiwibWVzc2FnZSIsImNvbnNvbGUiLCJlcnJvciIsInByb3BUeXBlIiwiZXhwbGFuYXRpb24iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyZXN0IiwiQXJyYXkiLCJfa2V5IiwiYXBwbHkiLCJjb25jYXQiLCJhIiwib25lT2ZUeXBlIiwic3RyaW5nIiwiZnVuYyIsIkVsZW1lbnQiLCJFcnJvciIsInNoYXBlIiwiY3VycmVudCIsImFueSIsIiQkdHlwZW9mIiwic3ltYm9sIiwicmVuZGVyIiwiYXJyYXlPZiIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInByb2Nlc3MiLCJzdHlsaXNfc3R5bGlzX21pbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwic3R5bGlzX3N0eWxpc19taW5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0Iiwic3R5bGlzX3J1bGVfc2hlZXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInN0eWxpc19ydWxlX3NoZWV0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJfZW1vdGlvbl91bml0bGVzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicmVhY3RfaXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIm1lbW9pemVfb25lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfZW1vdGlvbl9pc19wcm9wX3ZhbGlkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18iLCJpbnRlcmxlYXZlIiwic3RyaW5ncyIsImludGVycG9sYXRpb25zIiwicmVzdWx0IiwibGVuIiwicHVzaCIsIl90eXBlb2YiLCJpdGVyYXRvciIsIm9iaiIsImNvbnN0cnVjdG9yIiwiY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJzb3VyY2UiLCJpbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJrZXlzIiwiaW5kZXhPZiIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJpc1BsYWluT2JqZWN0IiwieCIsIkVNUFRZX0FSUkFZIiwiZnJlZXplIiwiRU1QVFlfT0JKRUNUIiwiaXNGdW5jdGlvbiIsInRlc3QiLCJnZXRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJpc1N0eWxlZENvbXBvbmVudCIsInN0eWxlZENvbXBvbmVudElkIiwiU0NfQVRUUiIsImVudiIsIklTX0JST1dTRVIiLCJESVNBQkxFX1NQRUVEWSIsIlNDX0RJU0FCTEVfU1BFRURZIiwiU3R5bGVkQ29tcG9uZW50c0Vycm9yIiwiX0Vycm9yIiwiY29kZSIsInRoaXMiLCJfdGhpcyIsIlNDX0NPTVBPTkVOVF9JRCIsImV4dHJhY3RDb21wcyIsIm1heWJlQ1NTIiwiY3NzIiwiZXhpc3RpbmdDb21wb25lbnRzIiwicmVwbGFjZSIsIm1hdGNoIiwiY29tcG9uZW50SWQiLCJtYXRjaEluZGV4IiwiX3JlZiIsIm5leHRDb21wIiwiY3NzRnJvbURPTSIsInNsaWNlIiwiQ09NTUVOVF9SRUdFWCIsInN0eWxpc1NwbGl0dGVyIiwiZ2xvYmFsIiwiY2FzY2FkZSIsImtleWZyYW1lIiwicHJlZml4IiwiY29tcHJlc3MiLCJzZW1pY29sb24iLCJzdHlsaXMiLCJwYXJzaW5nUnVsZXMiLCJyZXR1cm5SdWxlc1BsdWdpbiIsImNvbnRleHQiLCJwYXJzZWRSdWxlcyIsInBhcnNlUnVsZXNQbHVnaW4iLCJydWxlIiwiX2NvbXBvbmVudElkIiwiX3NlbGVjdG9yIiwiX3NlbGVjdG9yUmVnZXhwIiwic2VsZlJlZmVyZW5jZVJlcGxhY2VyIiwib2Zmc2V0IiwidXNlIiwiXyIsInNlbGVjdG9ycyIsImxhc3RJbmRleE9mIiwic3RyaW5naWZ5UnVsZXMiLCJydWxlcyIsInNlbGVjdG9yIiwidW5kZWZpbmVkIiwiZmxhdENTUyIsImNzc1N0ciIsIlJlZ0V4cCIsImdldE5vbmNlIiwibmMiLCJhZGROYW1lRm9ySWQiLCJuYW1lcyIsImlkIiwicmVzZXRJZE5hbWVzIiwiaGFzTmFtZUZvcklkIiwic3RyaW5naWZ5TmFtZXMiLCJzdHIiLCJ0cmltIiwic2hlZXRGb3JUYWciLCJ0YWciLCJzaGVldCIsInNpemUiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNhZmVJbnNlcnRSdWxlIiwiY3NzUnVsZSIsImluZGV4IiwibWF4SW5kZXgiLCJjc3NSdWxlcyIsImluc2VydFJ1bGUiLCJlcnIiLCJtYWtlVGV4dE1hcmtlciIsImFkZFVwVW50aWxJbmRleCIsInNpemVzIiwidG90YWxVcFRvSW5kZXgiLCJ3cmFwQXNIdG1sVGFnIiwiYWRkaXRpb25hbEF0dHJzIiwibm9uY2UiLCJTQ19WRVJTSU9OX0FUVFIiLCJmaWx0ZXIiLCJCb29sZWFuIiwid3JhcEFzRWxlbWVudCIsIl9wcm9wcyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5IiwibWFya2VycyIsIm1ha2VUZXh0Tm9kZSIsImNyZWF0ZVRleHROb2RlIiwibWFrZVNlcnZlclRhZyIsIm5hbWVzQXJnIiwibWFya2Vyc0FyZyIsImluc2VydE1hcmtlciIsInByZXYiLCJjc3NGb3JJZCIsImNsb25lIiwibmFtZXNDbG9uZSIsImNsb25lTmFtZXMiLCJtYXJrZXJzQ2xvbmUiLCJnZXRJZHMiLCJpbnNlcnRSdWxlcyIsInJlbW92ZVJ1bGVzIiwibWFya2VyIiwic2VhbGVkIiwic3R5bGVUYWciLCJ0b0VsZW1lbnQiLCJ0b0hUTUwiLCJtYWtlVGFnIiwidGFnRWwiLCJmb3JjZVNlcnZlciIsImluc2VydEJlZm9yZSIsImdldEltcG9ydFJ1bGVUYWciLCJlbCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsIm5leHRTaWJsaW5nIiwibWFrZVN0eWxlVGFnIiwiZXh0cmFjdEltcG9ydCIsInVzZWRJbXBvcnRSdWxlVGFnIiwiZGF0YSIsImltcG9ydFJ1bGVzIiwiY3NzUnVsZXNTaXplIiwibWF5SGF2ZUltcG9ydCIsInNlcGFyYXRvciIsImFwcGVuZERhdGEiLCJuZXdNYXJrZXIiLCJyZXBsYWNlQ2hpbGQiLCJtYWtlQnJvd3NlclRhZyIsImVuZCIsImNzc1RleHQiLCJpbnNlcnRJbmRleCIsImluamVjdGVkUnVsZXMiLCJyZW1vdmFsSW5kZXgiLCJsb3dlckJvdW5kIiwiZGVsZXRlUnVsZSIsImRlbGV0ZVJ1bGVzIiwibWFrZVNwZWVkeVRhZyIsIlNQTElUX1JFR0VYIiwiTUFYX1NJWkUiLCJzaGVldFJ1bm5pbmdJZCIsIm1hc3RlciIsIlN0eWxlU2hlZXQiLCJoZWFkIiwiaW1wb3J0UnVsZVRhZyIsImZpcnN0VGFnIiwidGFncyIsInRhZ01hcCIsImRlZmVycmVkIiwicmVoeWRyYXRlZE5hbWVzIiwiaWdub3JlUmVoeWRyYXRlZE5hbWVzIiwiY2FwYWNpdHkiLCJjbG9uZXMiLCJyZWh5ZHJhdGUiLCJlbHMiLCJleHRyYWN0ZWQiLCJpc1N0cmVhbWVkIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibm9kZXNTaXplIiwiZ2V0QXR0cmlidXRlIiwiZWxOYW1lcyIsImVsTmFtZXNTaXplIiwiaiIsInRleHRDb250ZW50IiwiZXh0cmFjdGVkU2l6ZSIsIl9leHRyYWN0ZWQkaSIsIl9pIiwicmVtb3ZlQ2hpbGQiLCJNYXRoIiwibWF4IiwiX2oiLCJyZXNldCIsImlkcyIsIm5ld1RhZyIsInNlYWxBbGxUYWdzIiwiZm9yRWFjaCIsImxhc3RFbCIsImdldFRhZ0ZvcklkIiwiaGFzSWQiLCJkZWZlcnJlZEluamVjdCIsImluamVjdCIsInJlbW92ZSIsInRvUmVhY3RFbGVtZW50cyIsIktleWZyYW1lcyIsInN0eWxlU2hlZXQiLCJ0b1N0cmluZyIsIlN0cmluZyIsImdldE5hbWUiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwiaXNGYWxzaXNoIiwiY2h1bmsiLCJvYmpUb0NzcyIsInByZXZLZXkiLCJ0b0xvd2VyQ2FzZSIsImZsYXR0ZW4iLCJleGVjdXRpb25Db250ZXh0IiwiaXNBcnJheSIsInJ1bGVTZXQiLCJzaG91bGRUaHJvdyIsImUiLCJzdHlsZXMiLCJtdXJtdXJoYXNoIiwiYiIsImNoYXJDb2RlQXQiLCJjaGFyc0xlbmd0aCIsImdldEFscGhhYmV0aWNDaGFyIiwiZnJvbUNoYXJDb2RlIiwiZ2VuZXJhdGVBbHBoYWJldGljTmFtZSIsImZsb29yIiwiaXNTdGF0aWNSdWxlcyIsImF0dHJzIiwic29tZSIsImhhc0Z1bmN0aW9uT2JqZWN0S2V5IiwiX1RZUEVfU1RBVElDUyIsImlzSE1SRW5hYmxlZCIsImhhc2hlciIsIkNvbXBvbmVudFN0eWxlIiwiaXNTdGF0aWMiLCJnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyIsImxhc3RDbGFzc05hbWUiLCJnZW5lcmF0ZU5hbWUiLCJkZXRlcm1pbmVUaGVtZSIsImZhbGxiYWNrVGhlbWUiLCJkZWZhdWx0UHJvcHMiLCJpc0RlZmF1bHRUaGVtZSIsInRoZW1lIiwiZXNjYXBlUmVnZXgiLCJkYXNoZXNBdEVuZHMiLCJlc2NhcGUiLCJpc1RhZyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJUWVBFX1NUQVRJQ1MiLCJkZWZpbmVQcm9wZXJ0eSQxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9PYmplY3QkZ2V0T3duUHJvcGVydCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiYXJyYXlQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiVGhlbWVDb250ZXh0IiwiVGhlbWVDb25zdW1lciIsIkNvbnN1bWVyIiwiU3R5bGVTaGVldENvbnRleHQiLCJfQ29tcG9uZW50IiwiVGhlbWVQcm92aWRlciIsImdldENvbnRleHQiLCJyZW5kZXJJbm5lciIsImNoaWxkcmVuIiwib3V0ZXJUaGVtZSIsIlByb3ZpZGVyIiwiQ2hpbGRyZW4iLCJvbmx5IiwiZ2V0VGhlbWUiLCJTZXJ2ZXJTdHlsZVNoZWV0IiwibWFzdGVyU2hlZXQiLCJzZWFsIiwic3BsaWNlIiwiY29sbGVjdFN0eWxlcyIsIlN0eWxlU2hlZXRNYW5hZ2VyIiwiZ2V0U3R5bGVUYWdzIiwiZ2V0U3R5bGVFbGVtZW50IiwiaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtIiwicmVhZGFibGVTdHJlYW0iLCJTdHlsZVNoZWV0Q29uc3VtZXIiLCJpZGVudGlmaWVycyIsIlNldCIsIlN0eWxlZENvbXBvbmVudCIsInJlbmRlck91dGVyIiwiZm9yd2FyZGVkQ29tcG9uZW50IiwiY29tcG9uZW50U3R5bGUiLCJfcHJvcHMkZm9yd2FyZGVkQ29tcG8iLCJmb2xkZWRDb21wb25lbnRJZHMiLCJnZW5lcmF0ZWRDbGFzc05hbWUiLCJlbGVtZW50VG9CZUNyZWF0ZWQiLCJhcyIsImlzVGFyZ2V0VGFnIiwicHJvcHNGb3JFbGVtZW50IiwiY29tcHV0ZWRQcm9wcyIsInJlZiIsInN0eWxlIiwiYnVpbGRFeGVjdXRpb25Db250ZXh0IiwiX3RoaXMyIiwiYXR0ckRlZiIsImZuIiwicmVzb2x2ZWRBdHRyRGVmIiwiYXR0ckRlZldhc0ZuIiwiYXR0ciIsImlzUmVhY3RDb21wb25lbnQiLCJfcHJvcHMkZm9yd2FyZGVkQ29tcG8yIiwid2FyblRvb01hbnlDbGFzc2VzIiwiY3JlYXRlU3R5bGVkQ29tcG9uZW50Iiwib3B0aW9ucyIsImlzVGFyZ2V0U3R5bGVkQ29tcCIsImlzQ2xhc3MiLCJfb3B0aW9ucyRkaXNwbGF5TmFtZSIsImdlbmVyYXRlRGlzcGxheU5hbWUiLCJfb3B0aW9ucyRjb21wb25lbnRJZCIsIl9Db21wb25lbnRTdHlsZSIsIl9kaXNwbGF5TmFtZSIsInBhcmVudENvbXBvbmVudElkIiwibnIiLCJnZW5lcmF0ZUlkIiwiX29wdGlvbnMkUGFyZW50Q29tcG9uIiwiUGFyZW50Q29tcG9uZW50IiwiX29wdGlvbnMkYXR0cnMiLCJmaW5hbEF0dHJzIiwiV3JhcHBlZFN0eWxlZENvbXBvbmVudCIsImZvcndhcmRSZWYiLCJmb3J3YXJkZWRSZWYiLCJ3aXRoQ29tcG9uZW50IiwicHJldmlvdXNDb21wb25lbnRJZCIsIm9wdGlvbnNUb0NvcHkiLCJuZXdDb21wb25lbnRJZCIsInN0eWxlZCIsImNvbnN0cnVjdFdpdGhPcHRpb25zIiwiY29tcG9uZW50Q29uc3RydWN0b3IiLCJ0ZW1wbGF0ZUZ1bmN0aW9uIiwid2l0aENvbmZpZyIsImNvbmZpZyIsImRvbUVsZW1lbnQiLCJHbG9iYWxTdHlsZSIsImNyZWF0ZVN0eWxlcyIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsInNjQ0dTSE1SQ2FjaGUiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwicGFyc2UiLCJvcHQiLCJwYWlycyIsInBhaXJTcGxpdFJlZ0V4cCIsImRlYyIsImRlY29kZSIsInBhaXIiLCJlcV9pZHgiLCJzdWJzdHIiLCJ2YWwiLCJ0cnlEZWNvZGUiLCJzZXJpYWxpemUiLCJlbmMiLCJlbmNvZGUiLCJmaWVsZENvbnRlbnRSZWdFeHAiLCJtYXhBZ2UiLCJpc05hTiIsImRvbWFpbiIsInBhdGgiLCJleHBpcmVzIiwidG9VVENTdHJpbmciLCJodHRwT25seSIsInNlY3VyZSIsInNhbWVTaXRlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImhhc093biIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnIiwiYXJnVHlwZSIsImlubmVyIiwiZGVmYXVsdCIsInJlYWRDb29raWUiLCJjbGVhblZhbHVlIiwiY2xlYW51cENvb2tpZVZhbHVlIiwiZG9Ob3RQYXJzZSIsImlzUGFyc2luZ0Nvb2tpZSIsIkpTT04iLCJDb29raWVzQ29udGV4dF9hIiwiZXh0ZW5kU3RhdGljcyIsIm9iamVjdEFzc2lnbiIsImVzNiIsIkNvb2tpZXMiLCJjb29raWVzIiwiY2hhbmdlTGlzdGVuZXJzIiwiY29va2llIiwicGFyc2VDb29raWVzIiwiSEFTX0RPQ1VNRU5UX0NPT0tJRSIsIl91cGRhdGVCcm93c2VyVmFsdWVzIiwiX2VtaXRDaGFuZ2UiLCJwYXJhbXMiLCJnZXRBbGwiLCJuYW1lXzEiLCJzZXQiLCJfYSIsInN0cmluZ2lmeSIsImZpbmFsT3B0aW9ucyIsIkRhdGUiLCJhZGRDaGFuZ2VMaXN0ZW5lciIsImNhbGxiYWNrIiwicmVtb3ZlQ2hhbmdlTGlzdGVuZXIiLCJpZHgiLCJyZWFjdCIsIl9fZXh0ZW5kcyIsIl9fIiwiZXM2X0Nvb2tpZXNQcm92aWRlciIsIl9zdXBlciIsIkNvb2tpZXNQcm92aWRlciIsIndpdGhDb29raWVzX2V4dGVuZHMiLCJfX2Fzc2lnbiIsIl9fcmVzdCIsImhvaXN0U3RhdGljcyIsIndpdGhDb29raWVzIiwiV3JhcHBlckNvbXBvbmVudCIsIkNvb2tpZVdyYXBwZXIiLCJvbkNoYW5nZSIsImZvcmNlVXBkYXRlIiwibGlzdGVuIiwidW5saXN0ZW4iLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVzdFByb3BzIiwiYWxsQ29va2llcyIsIkNvb2tpZVdyYXBwZXJXaXRoUmVmQW5kQ29va2llQ29uc3VtZXIiLCJXcmFwcGVkQ29tcG9uZW50IiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJfaW5oZXJpdHNMb29zZSIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRlc3QxIiwidGVzdDIiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ0b09iamVjdCIsImYiLCJoIiwidSIsImsiLCJnIiwiQSIsIkMiLCJ3IiwidiIsIiQiLCJ5IiwiTyIsInoiLCJOIiwiUyIsIkYiLCJXIiwicSIsIkIiLCJEIiwiRSIsIkciLCJIIiwiSSIsIkoiLCJLIiwiTCIsIk0iLCJQIiwiUSIsIlIiLCJUIiwiVSIsIlYiLCJYIiwiWSIsIloiLCJlZSIsImFlIiwicmUiLCJjZSIsInNlIiwidGUiLCJpZSIsImZlIiwibmUiLCJsZSIsIm9lIiwiaGUiLCJ1ZSIsImRlIiwiYmUiLCJwZSIsImtlIiwiZ2UiLCJBZSIsIkNlIiwid2UiLCJ2ZSIsIm1lIiwieGUiLCIkZSIsInllIiwiT2UiLCJqZSIsInplIiwiTmUiLCJTZSIsIkZlIiwiV2UiLCJxZSIsIkJlIiwiRGUiLCJFZSIsIkdlIiwiSGUiLCJKZSIsIlJlIiwiVGUiLCJVZSIsIlZlIiwiWGUiLCJZZSIsImNoYXJBdCIsIlFlIiwic3Vic3RyaW5nIiwiSWUiLCJQZSIsIk1lIiwiTGUiLCJLZSIsInBhcnNlRmxvYXQiLCJzaW1wbGVJc0VxdWFsIiwicmVzdWx0Rm4iLCJpc0VxdWFsIiwibGFzdFRoaXMiLCJsYXN0UmVzdWx0IiwibGFzdEFyZ3MiLCJjYWxsZWRPbmNlIiwiaXNOZXdBcmdFcXVhbFRvTGFzdCIsIm5ld0FyZyIsIm5ld0FyZ3MiLCJldmVyeSIsInV0aWwiLCJjb250YWlucyIsIkRFRkFVTFRfRU5UUllfTkFNRSIsInRva2VuTGlzdGVuZXJzIiwiRmlyZWJhc2VBcHBJbXBsIiwiZmlyZWJhc2VfIiwiaXNEZWxldGVkXyIsInNlcnZpY2VzXyIsIm5hbWVfIiwiX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsImF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsIm9wdGlvbnNfIiwiZGVlcENvcHkiLCJJTlRFUk5BTCIsImdldFVpZCIsImdldFRva2VuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJhZGRBdXRoVG9rZW5MaXN0ZW5lciIsInNldFRpbWVvdXQiLCJyZW1vdmVBdXRoVG9rZW5MaXN0ZW5lciIsImxpc3RlbmVyIiwiY2hlY2tEZXN0cm95ZWRfIiwiZGVsZXRlIiwidGhlbiIsInJlbW92ZUFwcCIsInNlcnZpY2VzIiwic2VydmljZUtleSIsImluc3RhbmNlS2V5IiwiYWxsIiwic2VydmljZSIsIl9nZXRTZXJ2aWNlIiwiaW5zdGFuY2VJZGVudGlmaWVyIiwiaW5zdGFuY2VTcGVjaWZpZXIiLCJmYWN0b3JpZXMiLCJleHRlbmRBcHAiLCJkZWVwRXh0ZW5kIiwiYXJncyIsImFwcEVycm9ycyIsImxvZyIsIkVycm9yRmFjdG9yeSIsIm5vLWFwcCIsImJhZC1hcHAtbmFtZSIsImR1cGxpY2F0ZS1hcHAiLCJhcHAtZGVsZXRlZCIsImR1cGxpY2F0ZS1zZXJ2aWNlIiwic2Etbm90LXN1cHBvcnRlZCIsImludmFsaWQtYXBwLWFyZ3VtZW50IiwiaXNOb2RlIiwid2FybiIsImZpcmViYXNlIiwiY3JlYXRlRmlyZWJhc2VOYW1lc3BhY2UiLCJhcHBzXyIsImFwcEhvb2tzIiwibmFtZXNwYWNlIiwiaW5pdGlhbGl6ZUFwcCIsInJhd0NvbmZpZyIsImFwcCIsImNhbGxBcHBIb29rcyIsImFwcHMiLCJTREtfVkVSU0lPTiIsInJlZ2lzdGVyU2VydmljZSIsImNyZWF0ZVNlcnZpY2UiLCJzZXJ2aWNlUHJvcGVydGllcyIsImFwcEhvb2siLCJhbGxvd011bHRpcGxlSW5zdGFuY2VzIiwiZ2V0QXBwcyIsInNlcnZpY2VOYW1lc3BhY2UiLCJhcHBBcmciLCJleHRlbmROYW1lc3BhY2UiLCJjcmVhdGVTdWJzY3JpYmUiLCJ1c2VBc1NlcnZpY2UiLCJldmVudE5hbWUiLCJzZXJ2aWNlTmFtZSIsImZhY3RvcnlOYW1lIiwidXNlU2VydmljZSIsInBhdGNoUHJvcGVydHkiLCJGdW5jdGlvbiIsIlA1V3JhcHBlciIsIkNvbXBvbmVudCIsIl90aGlzJHByb3BzIiwic2tldGNoIiwicDVQcm9wcyIsIm9uU2V0QXBwU3RhdGUiLCJjYW52YXMiLCJwNSIsIndyYXBwZXIiLCJuZXh0UHJvcHMiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJQcm9wVHlwZXMiLCJpc1JlcXVpcmVkIiwidXRpbHMiLCJub2RlX21vZHVsZXNfcHJvcF90eXBlc19kZWZhdWx0IiwiY29sb3IiLCJTcGlubmVyX1NwaW5uZXIiLCJUYWciLCJhdHRyaWJ1dGVzIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImNsYXNzbmFtZXNfZGVmYXVsdCIsInJlYWN0X2RlZmF1bHQiLCJlc21fZXh0ZW5kcyIsInJvbGUiLCJlc19TcGlubmVyIiwiQnV0dG9uIiwiZGl2IiwiX3RlbXBsYXRlT2JqZWN0IiwiTGFuZ3VhZ2UiLCJjaGFuZ2VMYW5ndWFnZSIsImN1cnJlbnRfbGFuZyIsIm9uQ2xpY2siLCJCYWNrZ3JvdW5kIiwiRmlsdGVyX3RlbXBsYXRlT2JqZWN0IiwidmlzaWJsZSIsIlJlc3VsdHNDb250YWluZXIiLCJfdGVtcGxhdGVPYmplY3QyIiwiUmVzdWx0cyIsIl90ZW1wbGF0ZU9iamVjdDMiLCJGaWx0ZXIiLCJsYW5nIiwidXNlciIsInJlc3VsdHMiLCJSZXN1bHQiLCJuZXdHYW1lIiwiaXNMb2FkaW5nIiwibGFzdF9yZXN1bHRzIiwid2lkdGgiLCJoZWlnaHQiLCJlbWFpbCIsImxpc3RTdHlsZVBvc2l0aW9uIiwiY29tcG9uZW50c19MYW5ndWFnZSIsImJvb2wiLCJvYmplY3RPZiIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImF0b2IiLCJnZXRFbGVtZW50IiwicGFyZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsImRvbVN0eWxlIiwicmVmcyIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYWRkQXR0cnMiLCJ1cGRhdGUiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwidG9TaGVldCIsImJsb2NrIiwicGFyZW50cyIsImxpbmUiLCJjb2x1bW4iLCJkZXB0aCIsImF0IiwiZGVsaW1pdGVyIiwiZmFjdG9yeSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiV2Via2l0TGluZUNsYW1wIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiYXN5bmNUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibnVsbFRhZyIsInByb3h5VGFnIiwidW5kZWZpbmVkVGFnIiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwicm9vdCIsIm9iamVjdFByb3RvIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJpc09iamVjdCIsIkJhc2VBcHAiLCJzdGF0ZSIsInNldFN0YXRlIiwidXJsIiwibG9jYXRpb24iLCJzdGFydE5ld0dhbWUiLCJuZXdTdGF0ZSIsImZpcmViYXNlTGlzdGVuZXIiLCJhdXRoIiwib25BdXRoU3RhdGVDaGFuZ2VkIiwicmVhY3RQcm9wc1JlZ2V4IiwiY2FjaGUiLCJtZW1vaXplX2Jyb3dzZXJfZXNtIiwicHJvcCIsIk1lbnUiLCJjdXJyZW50X2xldmVsIiwicmFkaXVzIiwibmV3R2FtZUJ1dHRvbkNsaWNrIiwiZ29Ib21lIiwiaGVhZGVyIiwiZGVzY3JpcHRpb24iLCJsZXZlbCIsImJhbGxzIiwic3BlZWQiLCJyZWRfYmFsbHMiLCJiYWxsc19yYWRpdXMiLCJyZWFjdHN0cmFwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJuZXdfZ2FtZSIsImhvbWUiLCJudW1iZXIiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2VzbV9leHRlbmRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2VzbV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2VzbV9pbmhlcml0c0xvb3NlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2VzbV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19fZGVmYXVsdCIsImNsYXNzbmFtZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsImNsYXNzbmFtZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX19kZWZhdWx0IiwiX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJhY3RpdmUiLCJhcmlhLWxhYmVsIiwiZGlzYWJsZWQiLCJvdXRsaW5lIiwiaW5uZXJSZWYiLCJub2RlIiwiY2xvc2UiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3Byb3RvIiwicHJldmVudERlZmF1bHQiLCJhcmlhTGFiZWwiLCJhcmlhLWhpZGRlbiIsImJ0bk91dGxpbmVDb2xvciIsImRlZmF1bHRBcmlhTGFiZWwiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImZvciIsImFhIiwiYmEiLCJmcmFtZXNUb1BvcCIsImNhIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInVwZGF0ZXIiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIl9fc2VsZiIsIl9fc291cmNlIiwiX293bmVyIiwicG9wIiwia2V5UHJlZml4IiwiY291bnQiLCJuZXh0IiwiZG9uZSIsIj0iLCI6IiwiZWEiLCJmYSIsImRhIiwidG9BcnJheSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiX2NvbnRleHQiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImNvbXBhcmUiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlRGVidWdWYWx1ZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsInVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRPd25lciIsImhhIiwiaWEiLCJqYSIsIm9uRXJyb3IiLCJrYSIsIm1hIiwibmEiLCJvYSIsInBhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJyYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwic2EiLCJyZWdpc3RyYXRpb25OYW1lIiwidGEiLCJ1YSIsImRlcGVuZGVuY2llcyIsInZhIiwid2EiLCJ4YSIsInlhIiwiY3VycmVudFRhcmdldCIsImxhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJEYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJFYSIsInN0YXRlTm9kZSIsIkZhIiwiR2EiLCJyYW5kb20iLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsInJldHVybiIsIk9hIiwiZGlzcGF0Y2hDb25maWciLCJQYSIsIl90YXJnZXRJbnN0IiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJVYSIsIlZhIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiV2EiLCJYYSIsIllhIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImtiIiwiZXZlbnRQb29sIiwibGIiLCJkZXN0cnVjdG9yIiwiamIiLCJnZXRQb29sZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwibm93IiwiaXNUcnVzdGVkIiwiZXh0ZW5kIiwibWIiLCJuYiIsIm9iIiwicGIiLCJxYiIsImRvY3VtZW50TW9kZSIsInJiIiwic2IiLCJ0YiIsInViIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIndiIiwieGIiLCJrZXlDb2RlIiwieWIiLCJkZXRhaWwiLCJ6YiIsIkNiIiwibG9jYWxlIiwid2hpY2giLCJBYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIkJiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJtb250aCIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJQYiIsIm5vZGVOYW1lIiwiUWIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJub2RlVHlwZSIsIlNiIiwiVGIiLCJWYiIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWIiLCJXYiIsImNoZWNrZWQiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJvYyIsInBjIiwicWMiLCJyYyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJ2YyIsIndjIiwidG9VcHBlckNhc2UiLCJ4YyIsInRjIiwidWMiLCJzYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieWMiLCJ6YyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsInRhYkluZGV4IiwiRmMiLCJjaGFuZ2UiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiZGV0YWNoRXZlbnQiLCJPYyIsIlBjIiwiYXR0YWNoRXZlbnQiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJVYyIsInZpZXciLCJWYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJXYyIsImdldE1vZGlmaWVyU3RhdGUiLCJYYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImNkIiwicG9pbnRlcklkIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsImRkIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJlZCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiYWx0ZXJuYXRlIiwiZmQiLCJnZCIsImhkIiwia2QiLCJlZmZlY3RUYWciLCJsZCIsIm5kIiwiY2hpbGQiLCJzaWJsaW5nIiwibWQiLCJvZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJwZCIsImNsaXBib2FyZERhdGEiLCJxZCIsInJkIiwiY2hhckNvZGUiLCJzZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInRkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInVkIiwicmVwZWF0IiwidmQiLCJkYXRhVHJhbnNmZXIiLCJ3ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ4ZCIsInlkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ6ZCIsIkFkIiwiQmQiLCJDZCIsImlzSW50ZXJhY3RpdmUiLCJEZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIkVkIiwiRmQiLCJHZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiSGQiLCJJZCIsIkpkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIktkIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsImJvZHkiLCJRZCIsIlJkIiwiVGQiLCJVZCIsImNvbnRlbnRFZGl0YWJsZSIsIlZkIiwiV2QiLCJzZWxlY3QiLCJYZCIsIllkIiwiWmQiLCIkZCIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJvblNlbGVjdCIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiZ3JpZEFyZWEiLCJsaW5lQ2xhbXAiLCJzZXRQcm9wZXJ0eSIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJpcyIsImJsdXIiLCJmb2N1cyIsImF1dG9Gb2N1cyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsImdldENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiWmUiLCJlbGVtZW50VHlwZSIsInBlbmRpbmdQcm9wcyIsImNvbnRleHREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiaGYiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImpmIiwia2YiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImxmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJuZiIsIm9mIiwiYmFzZVN0YXRlIiwieGYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwicGYiLCJyZiIsInFmIiwicGF5bG9hZCIsInNmIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ5ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInpmIiwiY29udGV4dFR5cGUiLCJBZiIsIkJmIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiQ2YiLCJEZiIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsIkVmIiwiRmYiLCJfc3RyaW5nUmVmIiwiR2YiLCJIZiIsIk1hcCIsIklmIiwiSmYiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJiYXNlVXBkYXRlIiwidWciLCJ2ZyIsIndnIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJ4ZyIsImxhc3QiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwieWciLCJkZXN0cm95IiwiZGVwcyIsInpnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJyZWFkQ29udGV4dCIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiU2ciLCJUZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiWWciLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJaZyIsInBlbmRpbmdDb250ZXh0IiwiJGciLCJ0aW1lZE91dEF0IiwiZmFsbGJhY2siLCJhaCIsImJoIiwibWYiLCJhZiIsImVsZW1lbnQiLCJoeWRyYXRlIiwiaGlkZGVuIiwiZmlyc3QiLCJvYnNlcnZlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJjaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic3RhY2siLCJzaCIsIndoIiwieGgiLCJ5aCIsInpoIiwib25jbGljayIsIkFoIiwiV2Vha1NldCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiS2giLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiZGlzcGxheSIsIkZoIiwib2kiLCJmaSIsImhhcyIsImFkZCIsIk1oIiwiV2Vha01hcCIsIk5oIiwiT2giLCJQaCIsImNvbXBvbmVudERpZENhdGNoIiwiUWgiLCJjb21wb25lbnRTdGFjayIsIlJoIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJnaSIsImNyZWF0ZUVsZW1lbnROUyIsImhpIiwiaWkiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJqaSIsIm1heER1cmF0aW9uIiwicGluZ0NhY2hlIiwia2kiLCJmaW5pc2hlZFdvcmsiLCJsaSIsIm1pIiwibmkiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJ1bnN0YWJsZV9ub3ciLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJ0aW1lb3V0SGFuZGxlIiwiSWkiLCJKaSIsIm5leHRTY2hlZHVsZWRSb290IiwiS2kiLCJMaSIsIk1pIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJfb25Db21wbGV0ZSIsIk9pIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJ2YiIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJBZyIsIk5pIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJTZCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJxYSIsIlJiIiwiZGoiLCJ0aCIsInVoIiwiZWoiLCJqZCIsInZoIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJUaSIsIlVpIiwiV2kiLCJfcm9vdCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsIlhpIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsIllpIiwiX2ludGVybmFsUm9vdCIsIlppIiwiYWoiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCIkaSIsImJqIiwiVmkiLCJmb3JtIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwiZmoiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50Iiwib3ZlcnJpZGVQcm9wcyIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImdqIiwiaGoiLCJwcmV2aW91cyIsInByaW9yaXR5TGV2ZWwiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInBlcmZvcm1hbmNlIiwiX3NjaGVkTW9jayIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsIlJlYWN0SXMiLCJnZXREZWZhdWx0UHJvcHMiLCJtaXhpbnMiLCJNRU1PX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInR5cGVPZiIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJQcm9maWxlciIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJpbnN0YW5jZU9mIiwib25lT2YiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiaG1yIiwibG9jYWxzIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsIl9fZyIsImNvcmUiLCJfX2UiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0Iiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiSVNfR0xPQkFMIiwiSVNfU1RBVElDIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiZXhwUHJvdG8iLCJkUCIsImNyZWF0ZURlc2MiLCJpdCIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsIkF0dHJpYnV0ZXMiLCJJT2JqZWN0IiwiZGVmaW5lZCIsImV4ZWMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwic2FmZSIsInB4IiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsInN1Y2Nlc3MiLCJjcmVhdGVkX2F0IiwidHJ1ZV9iYWxscyIsImZhbHNlX2JhbGxzIiwiQmFsbCIsInJhZCIsInhzcGVlZCIsInlzcGVlZCIsInhkaXJlY3Rpb24iLCJ5ZGlyZWN0aW9uIiwibW92ZSIsImhvdmVyIiwiZGlzdCIsIm1vdXNlWCIsIm1vdXNlWSIsImN1cnNvciIsIkhBTkQiLCJjbGlja2VkIiwic2VsZWN0ZWRDb2xvciIsImRlZmF1bHRDb2xvciIsInRpbWVySWQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzZWxlY3RlZEJhbGxzIiwiZmlsbCIsInN0cm9rZVdlaWdodCIsImVsbGlwc2UiLCJjcmVhdGVCYWxscyIsIl9wJHByb3BzIiwiYmFsbHNDb3VudCIsInRhcmdldEJhbGxzQ291bnQiLCJtaW5UYXJnZXRJZCIsInRhcmdldENvbG9yIiwiX3AkcHJvcHMyIiwiZGVtb1NwZWVkIiwicmV2ZXJzZWRCYWxscyIsIm1vdmVCYWxscyIsInN0YXJ0R2FtZSIsInRpbWVPdXQxIiwidGltZU91dDIiLCJnYW1lVGltZSIsInN0YXJ0VGltZSIsImZwcyIsInNldHVwIiwiY3JlYXRlQ2FudmFzIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJmcmFtZVJhdGUiLCJlbGxpcHNlTW9kZSIsIlJBRElVUyIsInRleHRGb250IiwidGV4dFN0eWxlIiwiQk9MRCIsInRleHRTaXplIiwiZHJhdyIsImJhY2tncm91bmQiLCJBUlJPVyIsImJhbGwiLCJ0YXJnZXRCYWxscyIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJ0b0ZpeGVkIiwiZ2VuZXJhdGVSZXN1bHQiLCJwbGF5ZWRHYW1lcyIsImNvdW50T2ZHYW1lcyIsImZyYW1lQ291bnQiLCJtb3VzZVByZXNzZWQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJyZXZlcnNlIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIiLCJfZGlkSXRlcmF0b3JFcnJvcjIiLCJfaXRlcmF0b3JFcnJvcjIiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwid2luZG93UmVzaXplZCIsInJlc2l6ZUNhbnZhcyIsImVuIiwicnUiLCJBcHAiLCJfQmFzZUFwcCIsIl9jbGFzc0NhbGxDaGVjayIsIl9nZXRQcm90b3R5cGVPZiIsIl90aGlzJHN0YXRlIiwiY2xpY2tlZEJhbGxzIiwidHJ1ZUJhbGxzIiwiZmFsc2VCYWxscyIsIl9pbmhlcml0cyIsIl90aGlzJHN0YXRlMiIsImJpdG1hcCIsImNlaWwiLCJleCIsInZhbHVlT2YiLCJjb2YiLCJ0b0ludGVnZXIiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG8iLCJzaGFyZWQiLCJkZWYiLCJUQUciLCJzdGF0IiwiTElCUkFSWSIsIndrc0V4dCIsIiRTeW1ib2wiLCJhRnVuY3Rpb24iLCJ0aGF0IiwidG9MZW5ndGgiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsInJlcyIsInRvSU9iamVjdCIsImFycmF5SW5kZXhPZiIsIklFX1BST1RPIiwiZFBzIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsIkl0ZXJhdG9ycyIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJJVEVSQVRPUiIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJOQU1FIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJwcm90byIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsInRzbGliXzEiLCJDT05TVEFOVFMiLCJOT0RFX0NMSUVOVCIsIk5PREVfQURNSU4iLCJhc3NlcnQiLCJhc3NlcnRpb24iLCJhc3NlcnRpb25FcnJvciIsInN0cmluZ1RvQnl0ZUFycmF5IiwiYmFzZTY0IiwiYnl0ZVRvQ2hhck1hcF8iLCJjaGFyVG9CeXRlTWFwXyIsImJ5dGVUb0NoYXJNYXBXZWJTYWZlXyIsImNoYXJUb0J5dGVNYXBXZWJTYWZlXyIsIkVOQ09ERURfVkFMU19CQVNFIiwiRU5DT0RFRF9WQUxTIiwiRU5DT0RFRF9WQUxTX1dFQlNBRkUiLCJIQVNfTkFUSVZFX1NVUFBPUlQiLCJlbmNvZGVCeXRlQXJyYXkiLCJvcHRfd2ViU2FmZSIsImluaXRfIiwiYnl0ZVRvQ2hhck1hcCIsIm91dHB1dCIsImJ5dGUxIiwiaGF2ZUJ5dGUyIiwiYnl0ZTIiLCJoYXZlQnl0ZTMiLCJieXRlMyIsIm91dEJ5dGUxIiwib3V0Qnl0ZTIiLCJvdXRCeXRlMyIsIm91dEJ5dGU0IiwiZW5jb2RlU3RyaW5nIiwiZGVjb2RlU3RyaW5nIiwiYnl0ZXMiLCJwb3MiLCJjMSIsImMyIiwiYzMiLCJieXRlQXJyYXlUb1N0cmluZyIsImRlY29kZVN0cmluZ1RvQnl0ZUFycmF5IiwiY2hhclRvQnl0ZU1hcCIsImJ5dGU0IiwiYmFzZTY0RGVjb2RlIiwiZ2V0VGltZSIsIkRlZmVycmVkIiwicHJvbWlzZSIsInJlamVjdCIsIndyYXBDYWxsYmFjayIsImNhdGNoIiwiZ2V0VUEiLCJuYXZpZ2F0b3IiLCJFUlJPUl9OQU1FIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJGaXJlYmFzZUVycm9yIiwiZXJyb3JzIiwicGF0dGVybiIsInRlbXBsYXRlIiwiZnVsbENvZGUiLCJqc29uRXZhbCIsInRva2VuIiwiY2xhaW1zIiwic2lnbmF0dXJlIiwib2JqVG8iLCJvYmpGcm9tIiwiZmluZEtleSIsIm9wdF90aGlzIiwiU2hhMSIsImNoYWluXyIsImJ1Zl8iLCJXXyIsInBhZF8iLCJpbmJ1Zl8iLCJ0b3RhbF8iLCJibG9ja1NpemUiLCJjb21wcmVzc18iLCJidWYiLCJvcHRfb2Zmc2V0Iiwib3B0X2xlbmd0aCIsImxlbmd0aE1pbnVzQmxvY2siLCJpbmJ1ZiIsImRpZ2VzdCIsInRvdGFsQml0cyIsIk9ic2VydmVyUHJveHkiLCJleGVjdXRvciIsIm9uTm9PYnNlcnZlcnMiLCJvYnNlcnZlcnMiLCJ1bnN1YnNjcmliZXMiLCJvYnNlcnZlckNvdW50IiwidGFzayIsImZpbmFsaXplZCIsImZvckVhY2hPYnNlcnZlciIsIm9ic2VydmVyIiwiY29tcGxldGUiLCJzdWJzY3JpYmUiLCJuZXh0T3JPYnNlcnZlciIsIm1ldGhvZHNfMSIsIm1ldGhvZCIsImltcGxlbWVudHNBbnlNZXRob2RzIiwidW5zdWIiLCJ1bnN1YnNjcmliZU9uZSIsImZpbmFsRXJyb3IiLCJzZW5kT25lIiwiZXJyb3JQcmVmaXgiLCJmbk5hbWUiLCJhcmd1bWVudE51bWJlciIsIm9wdGlvbmFsIiwiYXJnTmFtZSIsImJhc2U2NEVuY29kZSIsInV0ZjhCeXRlcyIsImlzTW9iaWxlQ29yZG92YSIsImlzTm9kZVNkayIsImlzUmVhY3ROYXRpdmUiLCJwYXRjaENhcHR1cmUiLCJjYXB0dXJlRmFrZSIsImlzQWRtaW4iLCJpc3N1ZWRBdFRpbWUiLCJpc1ZhbGlkRm9ybWF0IiwiaXNWYWxpZFRpbWVzdGFtcCIsInZhbGlkU2luY2UiLCJ2YWxpZFVudGlsIiwiZmluZFZhbHVlIiwiZ2V0QW55S2V5IiwiZ2V0Q291bnQiLCJydiIsImdldFZhbHVlcyIsImlzRW1wdHkiLCJpc05vbk51bGxPYmplY3QiLCJvcHRfb2JqIiwic2FmZUdldCIsInF1ZXJ5c3RyaW5nIiwicXVlcnlzdHJpbmdQYXJhbXMiLCJhcnJheVZhbCIsInF1ZXJ5c3RyaW5nRGVjb2RlIiwiYXN5bmMiLCJwcm94eSIsInZhbGlkYXRlQXJnQ291bnQiLCJtaW5Db3VudCIsIm1heENvdW50IiwiYXJnQ291bnQiLCJhcmdFcnJvciIsInZhbGlkYXRlQ2FsbGJhY2siLCJ2YWxpZGF0ZUNvbnRleHRPYmplY3QiLCJ2YWxpZGF0ZU5hbWVzcGFjZSIsInN0cmluZ0xlbmd0aCIsImhpZ2giLCJfX2RlY29yYXRlIiwiX19wYXJhbSIsIl9fbWV0YWRhdGEiLCJfX2F3YWl0ZXIiLCJfX2dlbmVyYXRvciIsIl9fZXhwb3J0U3RhciIsIl9fdmFsdWVzIiwiX19yZWFkIiwiX19zcHJlYWQiLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsIl9fYXN5bmNEZWxlZ2F0b3IiLCJfX2FzeW5jVmFsdWVzIiwiX19tYWtlVGVtcGxhdGVPYmplY3QiLCJfX2ltcG9ydFN0YXIiLCJfX2ltcG9ydERlZmF1bHQiLCJkZWNvcmF0b3JzIiwiZGVzYyIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJtZXRhZGF0YSIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiZnVsZmlsbGVkIiwic3RlcCIsInJlamVjdGVkIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJ0aHJvdyIsIm9wIiwiYXIiLCJhc3luY0l0ZXJhdG9yIiwicmVzdW1lIiwiZnVsZmlsbCIsInNldHRsZSIsInNoaWZ0IiwiY29va2VkIiwicmF3IiwibW9kIiwiZmV0Y2giLCJzdXBwb3J0Iiwic2VhcmNoUGFyYW1zIiwiaXRlcmFibGUiLCJmb3JtRGF0YSIsImFycmF5QnVmZmVyIiwidmlld0NsYXNzZXMiLCJpc0RhdGFWaWV3IiwiRGF0YVZpZXciLCJpc1Byb3RvdHlwZU9mIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkhlYWRlcnMiLCJhcHBlbmQiLCJub3JtYWxpemVOYW1lIiwibm9ybWFsaXplVmFsdWUiLCJvbGRWYWx1ZSIsIml0ZW1zIiwiaXRlcmF0b3JGb3IiLCJSZXF1ZXN0IiwiX2JvZHlJbml0IiwiQm9keSIsIlJlc3BvbnNlIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImhlYWRlcnMiLCJyZXNwb25zZSIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJpbml0IiwicmVxdWVzdCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25sb2FkIiwicmF3SGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsIm9udGltZW91dCIsImNyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJwb2x5ZmlsbCIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJmaWxlUmVhZGVyUmVhZHkiLCJyZWFkZXIiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJidWZmZXJDbG9uZSIsIlVpbnQ4QXJyYXkiLCJieXRlTGVuZ3RoIiwiYnVmZmVyIiwiX2luaXRCb2R5IiwiX2JvZHlUZXh0IiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlYWRBc1RleHQiLCJjaGFycyIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImpzb24iLCJ1cGNhc2VkIiwicmVmZXJyZXIiLCJib2R5SW5pdCIsIm9rIiwic2V0SW1tZWRpYXRlIiwic2V0VGltZW91dEZ1bmMiLCJfc3RhdGUiLCJfaGFuZGxlZCIsIl92YWx1ZSIsIl9kZWZlcnJlZHMiLCJkb1Jlc29sdmUiLCJoYW5kbGUiLCJfaW1tZWRpYXRlRm4iLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJyZXQiLCJuZXdWYWx1ZSIsImZpbmFsZSIsIl91bmhhbmRsZWRSZWplY3Rpb25GbiIsIkhhbmRsZXIiLCJyZWFzb24iLCJwcm9tIiwiYXJyIiwicmVtYWluaW5nIiwicmFjZSIsImdsb2JhbE5TIiwic2NvcGUiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwidW5yZWYiLCJlbnJvbGwiLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJyZWdpc3RlckltbWVkaWF0ZSIsImNoYW5uZWwiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsInJ1bklmUHJlc2VudCIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJldmVudCIsInNjcmlwdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImZpbmQiLCIkZmluZCIsImZvcmNlZCIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIm9yaWdpbmFsIiwiU1BFQ0lFUyIsImZpbmRJbmRleCIsIktFWSIsImdldEtleXMiLCJnT1BTIiwicElFIiwiJGFzc2lnbiIsImFMZW4iLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCJmcm9tSW5kZXgiLCJzdGFydHNXaXRoIiwiJHN0YXJ0c1dpdGgiLCJzZWFyY2hTdHJpbmciLCJpc1JlZ0V4cCIsIk1BVENIIiwiSW5maW5pdHkiLCJERVNDUklQVE9SUyIsIk1FVEEiLCIkZmFpbHMiLCJ3a3MiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUEQiLCIkRFAiLCJnT1BEIiwiZ09QTiIsIiRKU09OIiwiX3N0cmluZ2lmeSIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIk9iamVjdFByb3RvIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJzZXR0ZXIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsIl9rIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwic2V0RGVzYyIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImNsYXNzb2YiLCJBUkciLCJ0cnlHZXQiLCIkYXQiLCJpdGVyYXRlZCIsIl90IiwicG9pbnQiLCJUT19TVFJJTkciLCIkaXRlcmF0b3JzIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsImFkZFRvVW5zY29wYWJsZXMiLCJBcmd1bWVudHMiLCJfZmlyZWJhc2VfYXBwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfZmlyZWJhc2VfYXBwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsInVuc2hpZnQiLCIkZ29vZ19UaGVuYWJsZSIsInVzZXJBZ2VudCIsIldpbmRvdyIsIm9yaWdpbiIsImNhbmNlbCIsInBhcnNlSW50IiwiY29tcGF0TW9kZSIsIk51bWJlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCIyIiwiMyIsIjQiLCJjYXB0dXJlIiwiaGFuZGxlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiY2xlYXIiLCJkZWNvZGVVUkkiLCJlbmNvZGVVUkkiLCJnZXRFbGVtZW50QnlJZCIsImh0bWxGb3IiLCJjZWxscGFkZGluZyIsImNlbGxzcGFjaW5nIiwiY29sc3BhbiIsImZyYW1lYm9yZGVyIiwibWF4bGVuZ3RoIiwicm93c3BhbiIsInVzZW1hcCIsInZhbGlnbiIsImlzRmluaXRlIiwiXCIiLCJcXCIsIi8iLCJcYiIsIlxmIiwiXG4iLCJcciIsIlx0IiwiXHUwMDBiIiwic2NyZWVuIiwiYXZhaWxIZWlnaHQiLCJhdmFpbFdpZHRoIiwicmVzaXphYmxlIiwic3RhdHVzYmFyIiwidG9vbGJhciIsInNjcm9sbGJhcnMiLCJzdGFuZGFsb25lIiwibm9yZWZlcnJlciIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJvcGVuZXIiLCJub29wZW5lciIsInJlYWR5U3RhdGUiLCJzb3J0IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJpbmRleGVkREIiLCJfX19qc2wiLCJDUCIsInZpc2liaWxpdHlTdGF0ZSIsIm9uTGluZSIsImNvbm5lY3Rpb24iLCJhYmNkIiwidG9KU09OIiwiYXJndW1lbnQtZXJyb3IiLCJhcHAtbm90LWF1dGhvcml6ZWQiLCJhcHAtbm90LWluc3RhbGxlZCIsImNhcHRjaGEtY2hlY2stZmFpbGVkIiwiY29kZS1leHBpcmVkIiwiY29yZG92YS1ub3QtcmVhZHkiLCJjb3JzLXVuc3VwcG9ydGVkIiwiY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZSIsImN1c3RvbS10b2tlbi1taXNtYXRjaCIsInJlcXVpcmVzLXJlY2VudC1sb2dpbiIsImR5bmFtaWMtbGluay1ub3QtYWN0aXZhdGVkIiwiZW1haWwtYWxyZWFkeS1pbi11c2UiLCJleHBpcmVkLWFjdGlvbi1jb2RlIiwiY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3QiLCJpbnRlcm5hbC1lcnJvciIsImludmFsaWQtYXBwLWNyZWRlbnRpYWwiLCJpbnZhbGlkLWFwcC1pZCIsImludmFsaWQtdXNlci10b2tlbiIsImludmFsaWQtYXV0aC1ldmVudCIsImludmFsaWQtdmVyaWZpY2F0aW9uLWNvZGUiLCJpbnZhbGlkLWNvbnRpbnVlLXVyaSIsImludmFsaWQtY29yZG92YS1jb25maWd1cmF0aW9uIiwiaW52YWxpZC1jdXN0b20tdG9rZW4iLCJpbnZhbGlkLWR5bmFtaWMtbGluay1kb21haW4iLCJpbnZhbGlkLWVtYWlsIiwiaW52YWxpZC1hcGkta2V5IiwiaW52YWxpZC1jZXJ0LWhhc2giLCJpbnZhbGlkLWNyZWRlbnRpYWwiLCJpbnZhbGlkLXBlcnNpc3RlbmNlLXR5cGUiLCJpbnZhbGlkLW1lc3NhZ2UtcGF5bG9hZCIsImludmFsaWQtb2F1dGgtcHJvdmlkZXIiLCJpbnZhbGlkLW9hdXRoLWNsaWVudC1pZCIsInVuYXV0aG9yaXplZC1kb21haW4iLCJpbnZhbGlkLWFjdGlvbi1jb2RlIiwid3JvbmctcGFzc3dvcmQiLCJpbnZhbGlkLXBob25lLW51bWJlciIsImludmFsaWQtcHJvdmlkZXItaWQiLCJpbnZhbGlkLXJlY2lwaWVudC1lbWFpbCIsImludmFsaWQtc2VuZGVyIiwiaW52YWxpZC12ZXJpZmljYXRpb24taWQiLCJtaXNzaW5nLWFuZHJvaWQtcGtnLW5hbWUiLCJhdXRoLWRvbWFpbi1jb25maWctcmVxdWlyZWQiLCJtaXNzaW5nLWFwcC1jcmVkZW50aWFsIiwibWlzc2luZy12ZXJpZmljYXRpb24tY29kZSIsIm1pc3NpbmctY29udGludWUtdXJpIiwibWlzc2luZy1pZnJhbWUtc3RhcnQiLCJtaXNzaW5nLWlvcy1idW5kbGUtaWQiLCJtaXNzaW5nLW9yLWludmFsaWQtbm9uY2UiLCJtaXNzaW5nLXBob25lLW51bWJlciIsIm1pc3NpbmctdmVyaWZpY2F0aW9uLWlkIiwiYWNjb3VudC1leGlzdHMtd2l0aC1kaWZmZXJlbnQtY3JlZGVudGlhbCIsIm5ldHdvcmstcmVxdWVzdC1mYWlsZWQiLCJuby1hdXRoLWV2ZW50Iiwibm8tc3VjaC1wcm92aWRlciIsIm51bGwtdXNlciIsIm9wZXJhdGlvbi1ub3QtYWxsb3dlZCIsIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnQiLCJwb3B1cC1ibG9ja2VkIiwicG9wdXAtY2xvc2VkLWJ5LXVzZXIiLCJwcm92aWRlci1hbHJlYWR5LWxpbmtlZCIsInF1b3RhLWV4Y2VlZGVkIiwicmVkaXJlY3QtY2FuY2VsbGVkLWJ5LXVzZXIiLCJyZWRpcmVjdC1vcGVyYXRpb24tcGVuZGluZyIsInJlamVjdGVkLWNyZWRlbnRpYWwiLCJ1c2VyLXRva2VuLWV4cGlyZWQiLCJ0b28tbWFueS1yZXF1ZXN0cyIsInVuYXV0aG9yaXplZC1jb250aW51ZS11cmkiLCJ1bnN1cHBvcnRlZC1wZXJzaXN0ZW5jZS10eXBlIiwidXNlci1jYW5jZWxsZWQiLCJ1c2VyLW5vdC1mb3VuZCIsInVzZXItZGlzYWJsZWQiLCJ1c2VyLW1pc21hdGNoIiwidXNlci1zaWduZWQtb3V0Iiwid2Vhay1wYXNzd29yZCIsIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkIiwiY29udGludWVVcmwiLCJjYW5IYW5kbGVDb2RlSW5BcHAiLCJhbmRyb2lkUGFja2FnZU5hbWUiLCJhbmRyb2lkTWluaW11bVZlcnNpb24iLCJhbmRyb2lkSW5zdGFsbEFwcCIsImlPU0J1bmRsZUlkIiwiZHluYW1pY0xpbmtEb21haW4iLCJzdWIiLCJwcm92aWRlcl9pZCIsInNpZ25faW5fcHJvdmlkZXIiLCJpc19hbm9ueW1vdXMiLCJpc3MiLCJhdWQiLCJmaXJlYmFzZUVuZHBvaW50Iiwic2VjdXJlVG9rZW5FbmRwb2ludCIsImlzTmV3VXNlciIsInJhd1VzZXJJbmZvIiwicHJvdmlkZXJJZCIsInByb2ZpbGUiLCJsb2dpbiIsInNjcmVlbk5hbWUiLCJwZW5kaW5nVG9rZW4iLCJyZXF1ZXN0VXJpIiwiaWRUb2tlbiIsImFjY2Vzc1Rva2VuIiwib2F1dGhUb2tlbiIsIm9hdXRoVG9rZW5TZWNyZXQiLCJpZF90b2tlbiIsImFjY2Vzc190b2tlbiIsIm9hdXRoX3Rva2VuX3NlY3JldCIsInBvc3RCb2R5IiwiaXNPQXV0aFByb3ZpZGVyIiwiY3JlZGVudGlhbCIsIkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0QiLCJFTUFJTF9QQVNTV09SRF9TSUdOX0lOX01FVEhPRCIsInRlbXBvcmFyeVByb29mIiwicGhvbmVOdW1iZXIiLCJzZXNzaW9uSW5mbyIsIm9hdXRoQWNjZXNzVG9rZW4iLCJvYXV0aElkVG9rZW4iLCJldmVudElkIiwidXJsUmVzcG9uc2UiLCJzZXNzaW9uSWQiLCJzaWduSW5NZXRob2QiLCJvb2JDb2RlIiwiUFJPVklERVJfSUQiLCJvcGVyYXRpb24iLCJ2ZXJpZmljYXRpb25JZCIsInZlcmlmaWNhdGlvbkNvZGUiLCJ2ZXJpZnkiLCJyZWNhcHRjaGFUb2tlbiIsIlBIT05FX1NJR05fSU5fTUVUSE9EIiwiQWN0aXZlWE9iamVjdCIsIlhEb21haW5SZXF1ZXN0Iiwib25wcm9ncmVzcyIsInVuc3Vic2NyaWJlIiwiYWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnRlbnRUeXBlIiwiZ2V0UmVzcG9uc2UiLCJtb3pSZXNwb25zZUFycmF5QnVmZmVyIiwiY2hhcnNldCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2VjdXJlVG9rZW5UaW1lb3V0Iiwic2VjdXJlVG9rZW5IZWFkZXJzIiwiTGgiLCJmaXJlYmFzZVRpbWVvdXQiLCJmaXJlYmFzZUhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJnYXBpIiwiY2xpZW50IiwiZWkiLCJzZXRBcGlLZXkiLCJzZXRUb2tlbiIsImF1dGhUeXBlIiwicGhvdG9VcmwiLCJuZWVkQ29uZmlybWF0aW9uIiwiZXJyb3JNZXNzYWdlIiwicmV0dXJuSWRwQ3JlZGVudGlhbCIsImF1dG9DcmVhdGUiLCJkZWxldGVBdHRyaWJ1dGUiLCJyZXF1ZXN0VHlwZSIsIm5ld1Bhc3N3b3JkIiwiZW5kcG9pbnQiLCJkZWxldGVQcm92aWRlciIsInJlY2FwdGNoYVNpdGVLZXkiLCJVU0VSX05PVF9GT1VORCIsInJldHVyblNlY3VyZVRva2VuIiwia2V5SW52YWxpZCIsImlwUmVmZXJlckJsb2NrZWQiLCJJTlZBTElEX0NVU1RPTV9UT0tFTiIsIkNSRURFTlRJQUxfTUlTTUFUQ0giLCJNSVNTSU5HX0NVU1RPTV9UT0tFTiIsIklOVkFMSURfSURFTlRJRklFUiIsIk1JU1NJTkdfQ09OVElOVUVfVVJJIiwiSU5WQUxJRF9FTUFJTCIsIklOVkFMSURfUEFTU1dPUkQiLCJVU0VSX0RJU0FCTEVEIiwiTUlTU0lOR19QQVNTV09SRCIsIkVNQUlMX0VYSVNUUyIsIlBBU1NXT1JEX0xPR0lOX0RJU0FCTEVEIiwiSU5WQUxJRF9JRFBfUkVTUE9OU0UiLCJJTlZBTElEX1BFTkRJTkdfVE9LRU4iLCJGRURFUkFURURfVVNFUl9JRF9BTFJFQURZX0xJTktFRCIsIk1JU1NJTkdfT1JfSU5WQUxJRF9OT05DRSIsIklOVkFMSURfTUVTU0FHRV9QQVlMT0FEIiwiSU5WQUxJRF9SRUNJUElFTlRfRU1BSUwiLCJJTlZBTElEX1NFTkRFUiIsIkVNQUlMX05PVF9GT1VORCIsIlJFU0VUX1BBU1NXT1JEX0VYQ0VFRF9MSU1JVCIsIkVYUElSRURfT09CX0NPREUiLCJJTlZBTElEX09PQl9DT0RFIiwiTUlTU0lOR19PT0JfQ09ERSIsIklOVkFMSURfUFJPVklERVJfSUQiLCJDUkVERU5USUFMX1RPT19PTERfTE9HSU5fQUdBSU4iLCJJTlZBTElEX0lEX1RPS0VOIiwiVE9LRU5fRVhQSVJFRCIsIkNPUlNfVU5TVVBQT1JURUQiLCJEWU5BTUlDX0xJTktfTk9UX0FDVElWQVRFRCIsIklOVkFMSURfQVBQX0lEIiwiVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSIiwiV0VBS19QQVNTV09SRCIsIk9QRVJBVElPTl9OT1RfQUxMT1dFRCIsIlVTRVJfQ0FOQ0VMTEVEIiwiQ0FQVENIQV9DSEVDS19GQUlMRUQiLCJJTlZBTElEX0FQUF9DUkVERU5USUFMIiwiSU5WQUxJRF9DT0RFIiwiSU5WQUxJRF9QSE9ORV9OVU1CRVIiLCJJTlZBTElEX1NFU1NJT05fSU5GTyIsIklOVkFMSURfVEVNUE9SQVJZX1BST09GIiwiTUlTU0lOR19BUFBfQ1JFREVOVElBTCIsIk1JU1NJTkdfQ09ERSIsIk1JU1NJTkdfUEhPTkVfTlVNQkVSIiwiTUlTU0lOR19TRVNTSU9OX0lORk8iLCJRVU9UQV9FWENFRURFRCIsIlNFU1NJT05fRVhQSVJFRCIsIlJFSkVDVEVEX0NSRURFTlRJQUwiLCJJTlZBTElEX0NPTlRJTlVFX1VSSSIsIk1JU1NJTkdfQU5EUk9JRF9QQUNLQUdFX05BTUUiLCJNSVNTSU5HX0lPU19CVU5ETEVfSUQiLCJVTkFVVEhPUklaRURfRE9NQUlOIiwiSU5WQUxJRF9EWU5BTUlDX0xJTktfRE9NQUlOIiwiSU5WQUxJRF9PQVVUSF9DTElFTlRfSUQiLCJJTlZBTElEX0NFUlRfSEFTSCIsIndoZXJlIiwibWVzc2FnZUhhbmRsZXJzRmlsdGVyIiwicG9zaXRpb24iLCJkb250Y2xlYXIiLCJyZXN0eWxlIiwic2V0SGlkZU9uTGVhdmUiLCJwaW5nIiwiSGkiLCJhdXRob3JpemVkRG9tYWlucyIsInJlZ2lzdGVyIiwiYXV0aEV2ZW50IiwicmVhY3ROYXRpdmUiLCJBc3luY1N0b3JhZ2UiLCJnYSIsIndlYlN0b3JhZ2VTdXBwb3J0IiwiY2xvc2VkIiwiZ2V0SXRlbSIsImpqIiwiY2oiLCJwb3ciLCJtZXNzYWdlQ2hhbm5lbCIsIm9uTWVzc2FnZSIsImV2ZW50VHlwZSIsImlqIiwia2V5UHJvY2Vzc2VkIiwic2VydmljZVdvcmtlciIsInJlYWR5IiwibGoiLCJvbnVwZ3JhZGVuZWVkZWQiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJvbnN1Y2Nlc3MiLCJvYmplY3RTdG9yZU5hbWVzIiwiZGVsZXRlRGF0YWJhc2UiLCJraiIsIm1qIiwibmoiLCJvYmplY3RTdG9yZSIsIm9qIiwidHJhbnNhY3Rpb24iLCJwaiIsInFqIiwiY29udHJvbGxlciIsIm9wZW5DdXJzb3IiLCJmYmFzZV9rZXkiLCJzaiIsInRqIiwidWoiLCJ2aiIsInhqIiwid2oiLCJ5aiIsInpqIiwiQmoiLCJzZXNzaW9uU3RvcmFnZSIsIkFqIiwiQ2oiLCJCcm93c2VyIiwiRGoiLCJOb2RlIiwiRWoiLCJSZWFjdE5hdGl2ZSIsIkZqIiwiV29ya2VyIiwiR2oiLCJwb3J0cyIsInB1dCIsInJqIiwiSGoiLCJMaiIsIklqIiwiTk9ORSIsIktqIiwiTWoiLCJOaiIsIk9qIiwiUWoiLCJTaiIsIlRqIiwiUmoiLCJhayIsIlVqIiwiV2oiLCJZaiIsIlpqIiwiSW50MzJBcnJheSIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJnayIsIlJsIiwiaGsiLCJpayIsImprIiwia2siLCJsayIsIm5rIiwicmsiLCJxayIsImhhbmRsZU9wZW5VUkwiLCJzayIsIlZqIiwidGsiLCJtayIsImliaSIsImFwbiIsImFwcERpc3BsYXlOYW1lIiwicGsiLCJ1ayIsIndrIiwieWsiLCJ6ayIsIkFrIiwidW5rbm93biIsInNpZ25JblZpYVJlZGlyZWN0IiwibGlua1ZpYVJlZGlyZWN0IiwicmVhdXRoVmlhUmVkaXJlY3QiLCJzaWduSW5WaWFQb3B1cCIsImxpbmtWaWFQb3B1cCIsInJlYXV0aFZpYVBvcHVwIiwiQmsiLCJDayIsIkRrIiwiRWsiLCJGayIsInhrIiwiR2siLCJIayIsIklrIiwidmsiLCJKayIsIktrIiwiTGsiLCJPayIsIk5rIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJhdXRoX3RpbWUiLCJpYXQiLCJhdXRoVGltZSIsInNpZ25JblByb3ZpZGVyIiwiVmsiLCJZayIsIlprIiwicmVmcmVzaFRva2VuIiwiJGsiLCJleHBpcmVzSW4iLCJibCIsImdyYW50X3R5cGUiLCJyZWZyZXNoX3Rva2VuIiwiZXhwaXJlc19pbiIsImNsIiwibGFzdFNpZ25JblRpbWUiLCJjcmVhdGlvblRpbWUiLCJwaG90b1VSTCIsImZsIiwiYXBpS2V5IiwiYXBwTmFtZSIsImF1dGhEb21haW4iLCJnbCIsImhsIiwiaWwiLCJqbCIsImtsIiwibGwiLCJtbCIsIm5sIiwib2wiLCJzdG9wIiwicWwiLCJybCIsImVtYWlsVmVyaWZpZWQiLCJpc0Fub255bW91cyIsImNyZWF0ZWRBdCIsImxhc3RMb2dpbkF0IiwicHJvdmlkZXJEYXRhIiwic2wiLCJ0bCIsInVsIiwidmwiLCJ3bCIsInhsIiwieWwiLCJkbCIsImFsIiwiemwiLCJBbCIsIkJsIiwiRWwiLCJEbCIsImFkZGl0aW9uYWxVc2VySW5mbyIsIm9wZXJhdGlvblR5cGUiLCJGbCIsInJlbG9hZCIsIkdsIiwiSGwiLCJJbCIsIkpsIiwiS2wiLCJMbCIsIk1sIiwic3RzVG9rZW5NYW5hZ2VyIiwicmVkaXJlY3RFdmVudElkIiwiUGwiLCJNayIsIlBrIiwiUWsiLCJjb25maXJtIiwiV2siLCJYayIsInVzZXJzIiwibG9jYWxJZCIsInByb3ZpZGVyVXNlckluZm8iLCJyYXdJZCIsIkNsIiwicGFzc3dvcmRIYXNoIiwiU2wiLCJVbCIsIlBqIiwiWGwiLCJXbCIsIlRsIiwiVmwiLCJabCIsIiRsIiwiYW0iLCJibSIsImNtIiwiUWwiLCJtbSIsImRtIiwiZW0iLCJmbSIsImxvZ0ZyYW1ld29yayIsImdtIiwiaG0iLCJpbSIsImptIiwia20iLCJObCIsImxtIiwicGwiLCJubSIsImN1cnJlbnRVc2VyIiwicG0iLCJfbGF0IiwicW0iLCJybSIsIkpqIiwibGFuZ3VhZ2VzIiwibGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJPbCIsIm9tIiwiaWRlbnRpZmllciIsImNvbnRpbnVlVXJpIiwiYWxsUHJvdmlkZXJzIiwic2lnbmluTWV0aG9kcyIsImV4ZWN1dGUiLCJzbSIsInVtIiwidm0iLCJ0bSIsIndtIiwieG0iLCJ5bSIsInptIiwiZ3JlY2FwdGNoYSIsIkFtIiwiQm0iLCJDbSIsIkRtIiwiRW0iLCJGbSIsImhhc0NoaWxkTm9kZXMiLCJHbSIsIkhtIiwiSW0iLCJLbSIsIkxtIiwiTW0iLCJzZXR0aW5ncyIsImFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZyIsIk5tIiwiT20iLCJKbSIsIlBtIiwiUW0iLCJSbSIsIlZtIiwiWG0iLCJZbSIsIlptIiwiJG0iLCJQZXJzaXN0ZW5jZSIsIkxPQ0FMIiwiU0VTU0lPTiIsImFwcFZlcmlmaWNhdGlvbkRpc2FibGVkIiwiQXV0aCIsIlVzZXIiLCJsb2dnZXIkMSIsIkRPTVN0b3JhZ2VXcmFwcGVyIiwiZG9tU3RvcmFnZV8iLCJwcmVmaXhfIiwicHJlZml4ZWROYW1lXyIsInN0b3JlZFZhbCIsIk1lbW9yeVN0b3JhZ2UiLCJjYWNoZV8iLCJpc0luTWVtb3J5U3RvcmFnZSIsImNyZWF0ZVN0b3JhZ2Vmb3IiLCJkb21TdG9yYWdlTmFtZSIsImRvbVN0b3JhZ2UiLCJQZXJzaXN0ZW50U3RvcmFnZSIsIlNlc3Npb25TdG9yYWdlIiwibG9nQ2xpZW50IiwiTG9nZ2VyIiwiTFVJREdlbmVyYXRvciIsInNoYTEiLCJzaGExQnl0ZXMiLCJidWlsZExvZ01lc3NhZ2VfIiwidmFyX2FyZ3MiLCJsb2dnZXIiLCJmaXJzdExvZ18iLCJlbmFibGVMb2dnaW5nIiwibG9nZ2VyXyIsInBlcnNpc3RlbnQiLCJsb2dMZXZlbCIsIkxvZ0xldmVsIiwiVkVSQk9TRSIsImxvZ1dyYXBwZXIiLCJmYXRhbCIsImlzSW52YWxpZEpTT05OdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsIk5FR0FUSVZFX0lORklOSVRZIiwiTUlOX05BTUUiLCJNQVhfTkFNRSIsIm5hbWVDb21wYXJlIiwiYUFzSW50IiwidHJ5UGFyc2VJbnQiLCJiQXNJbnQiLCJzdHJpbmdDb21wYXJlIiwicmVxdWlyZUtleSIsIk9iamVjdFRvVW5pcXVlS2V5Iiwic3BsaXRTdHJpbmdCeVNpemUiLCJzZWdzaXplIiwiZGF0YVNlZ3MiLCJlYWNoIiwiZG91YmxlVG9JRUVFNzU0U3RyaW5nIiwibG4iLCJiaXRzIiwiYWJzIiwiTE4yIiwicm91bmQiLCJoZXhCeXRlU3RyaW5nIiwiaGV4Qnl0ZSIsIklOVEVHRVJfUkVHRVhQXyIsImludFZhbCIsImV4Y2VwdGlvbkd1YXJkIiwiYmVpbmdDcmF3bGVkIiwic2V0VGltZW91dE5vbkJsb2NraW5nIiwiUGF0aCIsInBhdGhPclN0cmluZyIsInBpZWNlTnVtIiwicGllY2VzXyIsImNvcHlUbyIsInBpZWNlTnVtXyIsImdldEZyb250IiwiZ2V0TGVuZ3RoIiwicG9wRnJvbnQiLCJnZXRCYWNrIiwicGF0aFN0cmluZyIsInRvVXJsRW5jb2RlZFN0cmluZyIsImJlZ2luIiwicGllY2VzIiwiY2hpbGRQYXRoT2JqIiwiY2hpbGRQaWVjZXMiLCJyZWxhdGl2ZVBhdGgiLCJvdXRlclBhdGgiLCJpbm5lclBhdGgiLCJvdXRlciIsImNvbXBhcmVQYXRocyIsInJpZ2h0IiwibGVmdEtleXMiLCJyaWdodEtleXMiLCJjbXAiLCJlcXVhbHMiLCJvdGhlciIsIlZhbGlkYXRpb25QYXRoIiwiZXJyb3JQcmVmaXhfIiwicGFydHNfIiwiYnl0ZUxlbmd0aF8iLCJjaGVja1ZhbGlkXyIsIk1BWF9QQVRIX0xFTkdUSF9CWVRFUyIsIk1BWF9QQVRIX0RFUFRIIiwidG9FcnJvclN0cmluZyIsIkxPTkdfUE9MTElORyIsIlJlcG9JbmZvIiwid2ViU29ja2V0T25seSIsInBlcnNpc3RlbmNlS2V5IiwiaW50ZXJuYWxIb3N0IiwibmVlZHNRdWVyeVBhcmFtIiwiaXNDdXN0b21Ib3N0IiwiaXNDYWNoZWFibGVIb3N0IiwiaXNEZW1vSG9zdCIsInVwZGF0ZUhvc3QiLCJuZXdIb3N0IiwiY29ubmVjdGlvblVSTCIsImNvbm5VUkwiLCJ0b1VSTFN0cmluZyIsIlBVU0hfQ0hBUlMiLCJsYXN0UHVzaFRpbWUiLCJsYXN0UmFuZENoYXJzIiwiX19FTVBUWV9OT0RFIiwiTUFYX05PREUiLCJwYXJzZVJlcG9JbmZvIiwiZGF0YVVSTCIsInBhcnNlZFVybCIsInBhcnNlVVJMIiwic3ViZG9tYWluIiwic2NoZW1lIiwicmVwb0luZm8iLCJwb3J0IiwiY29sb25JbmQiLCJzbGFzaEluZCIsInF1ZXN0aW9uTWFya0luZCIsInBhdGhTdHJpbmdEZWNvZGVkIiwicGllY2UiLCJkZWNvZGVQYXRoIiwicXVlcnlQYXJhbXMiLCJxdWVyeVN0cmluZyIsInNlZ21lbnQiLCJrdiIsImRlY29kZVF1ZXJ5IiwiSU5WQUxJRF9LRVlfUkVHRVhfIiwiSU5WQUxJRF9QQVRIX1JFR0VYXyIsImlzVmFsaWRLZXkiLCJpc1ZhbGlkUGF0aFN0cmluZyIsImlzVmFsaWRQcmlvcml0eSIsInByaW9yaXR5IiwidmFsaWRhdGVGaXJlYmFzZURhdGFBcmciLCJ2YWxpZGF0ZUZpcmViYXNlRGF0YSIsInBhdGhfIiwiaGFzRG90VmFsdWVfMSIsImhhc0FjdHVhbENoaWxkXzEiLCJ2YWxpZGF0ZUZpcmViYXNlTWVyZ2VEYXRhQXJnIiwibWVyZ2VQYXRocyIsImN1clBhdGgiLCJwcmV2UGF0aCIsInZhbGlkYXRlRmlyZWJhc2VNZXJnZVBhdGhzIiwidmFsaWRhdGVQcmlvcml0eSIsInZhbGlkYXRlRXZlbnRUeXBlIiwidmFsaWRhdGVLZXkiLCJ2YWxpZGF0ZVBhdGhTdHJpbmciLCJ2YWxpZGF0ZVdyaXRhYmxlUGF0aCIsInZhbGlkYXRlVXJsIiwiaXNWYWxpZFJvb3RQYXRoU3RyaW5nIiwiT25EaXNjb25uZWN0IiwicmVwb18iLCJvbkNvbXBsZXRlIiwib25EaXNjb25uZWN0Q2FuY2VsIiwib25EaXNjb25uZWN0U2V0Iiwic2V0V2l0aFByaW9yaXR5Iiwib25EaXNjb25uZWN0U2V0V2l0aFByaW9yaXR5Iiwib2JqZWN0VG9NZXJnZSIsIm5ld09iamVjdFRvTWVyZ2UiLCJvbkRpc2Nvbm5lY3RVcGRhdGUiLCJUcmFuc2FjdGlvblJlc3VsdCIsImNvbW1pdHRlZCIsInNuYXBzaG90IiwibmV4dFB1c2hJZCIsImR1cGxpY2F0ZVRpbWUiLCJ0aW1lU3RhbXBDaGFycyIsIk5hbWVkTm9kZSIsIldyYXAiLCJJbmRleCIsImdldENvbXBhcmUiLCJpbmRleGVkVmFsdWVDaGFuZ2VkIiwib2xkTm9kZSIsIm5ld05vZGUiLCJvbGRXcmFwcGVkIiwibmV3V3JhcHBlZCIsIm1pblBvc3QiLCJNSU4iLCJLZXlJbmRleCIsImlzRGVmaW5lZE9uIiwibWF4UG9zdCIsIm1ha2VQb3N0IiwiaW5kZXhWYWx1ZSIsIktFWV9JTkRFWCIsIl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IiLCJub2RlRnJvbUpTT04iLCJNQVhfTk9ERSQxIiwicHJpb3JpdHlIYXNoVGV4dCIsInZhbGlkYXRlUHJpb3JpdHlOb2RlIiwicHJpb3JpdHlOb2RlIiwiaXNMZWFmTm9kZSIsImdldFByaW9yaXR5IiwiTGVhZk5vZGUiLCJ2YWx1ZV8iLCJwcmlvcml0eU5vZGVfIiwiRU1QVFlfTk9ERSIsImxhenlIYXNoXyIsInVwZGF0ZVByaW9yaXR5IiwibmV3UHJpb3JpdHlOb2RlIiwiZ2V0SW1tZWRpYXRlQ2hpbGQiLCJjaGlsZE5hbWUiLCJnZXRDaGlsZCIsImhhc0NoaWxkIiwiZ2V0UHJlZGVjZXNzb3JDaGlsZE5hbWUiLCJjaGlsZE5vZGUiLCJ1cGRhdGVJbW1lZGlhdGVDaGlsZCIsIm5ld0NoaWxkTm9kZSIsInVwZGF0ZUNoaWxkIiwiZnJvbnQiLCJudW1DaGlsZHJlbiIsImZvckVhY2hDaGlsZCIsImV4cG9ydEZvcm1hdCIsIi52YWx1ZSIsIi5wcmlvcml0eSIsImhhc2giLCJ0b0hhc2giLCJjb21wYXJlVG8iLCJjb21wYXJlVG9MZWFmTm9kZV8iLCJvdGhlckxlYWYiLCJvdGhlckxlYWZUeXBlIiwidGhpc0xlYWZUeXBlIiwib3RoZXJJbmRleCIsIlZBTFVFX1RZUEVfT1JERVIiLCJ0aGlzSW5kZXgiLCJ3aXRoSW5kZXgiLCJpc0luZGV4ZWQiLCJfZGVmYXVsdEluZGV4TWFwIiwiUFJJT1JJVFlfSU5ERVgiLCJQcmlvcml0eUluZGV4IiwiYVByaW9yaXR5IiwiYlByaW9yaXR5IiwiaW5kZXhDbXAiLCJTb3J0ZWRNYXBJdGVyYXRvciIsInN0YXJ0S2V5IiwiY29tcGFyYXRvciIsImlzUmV2ZXJzZV8iLCJyZXN1bHRHZW5lcmF0b3JfIiwibm9kZVN0YWNrXyIsImdldE5leHQiLCJoYXNOZXh0IiwicGVlayIsIkxMUkJOb2RlIiwiUkVEIiwiU29ydGVkTWFwIiwiY29weSIsImlub3JkZXJUcmF2ZXJzYWwiLCJyZXZlcnNlVHJhdmVyc2FsIiwibWluXyIsIm1pbktleSIsIm1heEtleSIsImluc2VydCIsImZpeFVwXyIsInJlbW92ZU1pbl8iLCJpc1JlZF8iLCJtb3ZlUmVkTGVmdF8iLCJzbWFsbGVzdCIsInJvdGF0ZVJpZ2h0XyIsIm1vdmVSZWRSaWdodF8iLCJyb3RhdGVMZWZ0XyIsImNvbG9yRmxpcF8iLCJjaGVja01heERlcHRoXyIsImJsYWNrRGVwdGgiLCJjaGVja18iLCJCTEFDSyIsIkxMUkJFbXB0eU5vZGUiLCJjb21wYXJhdG9yXyIsInJvb3RfIiwiZ2V0UHJlZGVjZXNzb3JLZXkiLCJyaWdodFBhcmVudCIsImdldEl0ZXJhdG9yIiwicmVzdWx0R2VuZXJhdG9yIiwiZ2V0SXRlcmF0b3JGcm9tIiwiZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbSIsImdldFJldmVyc2VJdGVyYXRvciIsIkxPR18yIiwiQmFzZTEyTnVtIiwibnVtIiwiY3VycmVudF8iLCJtYXNrIiwiYml0c18iLCJuZXh0Qml0SXNPbmUiLCJidWlsZENoaWxkU2V0IiwiY2hpbGRMaXN0Iiwia2V5Rm4iLCJtYXBTb3J0Rm4iLCJidWlsZEJhbGFuY2VkVHJlZSIsImxvdyIsIm5hbWVkTm9kZSIsIm1pZGRsZSIsImJhc2UxMiIsImJ1aWxkUGVubmFudCIsImNodW5rU2l6ZSIsImNoaWxkVHJlZSIsImF0dGFjaFBlbm5hbnQiLCJwZW5uYW50IiwiaXNPbmUiLCJidWlsZEZyb20xMkFycmF5IiwiZmFsbGJhY2tPYmplY3QiLCJJbmRleE1hcCIsImluZGV4ZXNfIiwiaW5kZXhTZXRfIiwiaW5kZXhLZXkiLCJzb3J0ZWRNYXAiLCJoYXNJbmRleCIsImluZGV4RGVmaW5pdGlvbiIsImFkZEluZGV4IiwiZXhpc3RpbmdDaGlsZHJlbiIsIm5ld0luZGV4Iiwic2F3SW5kZXhlZFZhbHVlIiwiaXRlciIsImluZGV4TmFtZSIsIm5ld0luZGV4U2V0IiwibmV3SW5kZXhlcyIsImFkZFRvSW5kZXhlcyIsImluZGV4ZWRDaGlsZHJlbiIsImV4aXN0aW5nU25hcCIsIm5ld0NoaWxkcmVuIiwicmVtb3ZlRnJvbUluZGV4ZXMiLCJOQU1FX09OTFlfQ09NUEFSQVRPUiIsIk5BTUVfQ09NUEFSQVRPUiIsIkNoaWxkcmVuTm9kZSIsImNoaWxkcmVuXyIsImluZGV4TWFwXyIsIkRlZmF1bHQiLCJuZXdQcmlvcml0eSIsIm5ld0luZGV4TWFwIiwibmV3SW1tZWRpYXRlQ2hpbGQiLCJudW1LZXlzIiwiYWxsSW50ZWdlcktleXMiLCJ0b0hhc2hfMSIsImNoaWxkSGFzaCIsInJlc29sdmVJbmRleF8iLCJwcmVkZWNlc3NvciIsImdldEZpcnN0Q2hpbGROYW1lIiwiZ2V0Rmlyc3RDaGlsZCIsImdldExhc3RDaGlsZE5hbWUiLCJnZXRMYXN0Q2hpbGQiLCJ3cmFwcGVkTm9kZSIsInN0YXJ0UG9zdCIsImVuZFBvc3QiLCJNQVhfTk9ERSQyIiwib3RoZXJDaGlsZHJlbk5vZGUiLCJ0aGlzSXRlciIsIm90aGVySXRlciIsInRoaXNDdXJyZW50Iiwib3RoZXJDdXJyZW50IiwiTWF4Tm9kZSIsIk1BWCIsInNldE1heE5vZGUkMSIsIlVTRV9ISU5aRSIsIm5vZGVGcm9tSlNPTiQxIiwibm9kZV8xIiwianNvbk9ial8xIiwiY2hpbGREYXRhIiwiY2hpbGRyZW5fMSIsImNoaWxkcmVuSGF2ZVByaW9yaXR5XzEiLCJoaW56ZUpzb25PYmpfMSIsImNoaWxkU2V0Iiwic29ydGVkQ2hpbGRTZXQiLCJzZXROb2RlRnJvbUpTT04iLCJfX3JlZmVyZW5jZUNvbnN0cnVjdG9yIiwiT3BlcmF0aW9uVHlwZSIsIlZBTFVFX0lOREVYIiwiVmFsdWVJbmRleCIsInZhbHVlTm9kZSIsIlBhdGhJbmRleCIsImluZGV4UGF0aF8iLCJleHRyYWN0Q2hpbGQiLCJzbmFwIiwiYUNoaWxkIiwiYkNoaWxkIiwiRGF0YVNuYXBzaG90Iiwibm9kZV8iLCJyZWZfIiwiaW5kZXhfIiwiZXhwb3J0VmFsIiwiZXhpc3RzIiwiY2hpbGRQYXRoU3RyaW5nIiwiY2hpbGRQYXRoIiwiY2hpbGRSZWYiLCJoYXNDaGlsZHJlbiIsImdldEtleSIsImdldFJlZiIsIkRhdGFFdmVudCIsImV2ZW50UmVnaXN0cmF0aW9uIiwicHJldk5hbWUiLCJnZXRQYXRoIiwiZ2V0UGFyZW50IiwiZ2V0RXZlbnRUeXBlIiwiZ2V0RXZlbnRSdW5uZXIiLCJDYW5jZWxFdmVudCIsIlZhbHVlRXZlbnRSZWdpc3RyYXRpb24iLCJjYWxsYmFja18iLCJjYW5jZWxDYWxsYmFja18iLCJjb250ZXh0XyIsInJlc3BvbmRzVG8iLCJxdWVyeSIsImdldFF1ZXJ5UGFyYW1zIiwiZ2V0SW5kZXgiLCJzbmFwc2hvdE5vZGUiLCJldmVudERhdGEiLCJjYW5jZWxDQl8xIiwiY2JfMSIsImNyZWF0ZUNhbmNlbEV2ZW50IiwibWF0Y2hlcyIsImhhc0FueUNhbGxiYWNrIiwiQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbiIsImNhbGxiYWNrc18iLCJldmVudFRvQ2hlY2siLCJjYW5jZWxDQl8yIiwiY2JfMiIsIm90aGVyQ291bnQiLCJvdGhlcktleSIsInRoaXNLZXkiLCJRdWVyeSIsInJlcG8iLCJxdWVyeVBhcmFtc18iLCJvcmRlckJ5Q2FsbGVkXyIsInZhbGlkYXRlUXVlcnlFbmRwb2ludHNfIiwic3RhcnROb2RlIiwiZW5kTm9kZSIsImhhc1N0YXJ0IiwiZ2V0SW5kZXhTdGFydFZhbHVlIiwiaGFzRW5kIiwiZ2V0SW5kZXhFbmRWYWx1ZSIsInRvb01hbnlBcmdzRXJyb3IiLCJ3cm9uZ0FyZ1R5cGVFcnJvciIsImdldEluZGV4U3RhcnROYW1lIiwiZ2V0SW5kZXhFbmROYW1lIiwidmFsaWRhdGVMaW1pdF8iLCJoYXNMaW1pdCIsImhhc0FuY2hvcmVkTGltaXQiLCJ2YWxpZGF0ZU5vUHJldmlvdXNPcmRlckJ5Q2FsbF8iLCJjYW5jZWxDYWxsYmFja09yQ29udGV4dCIsImdldENhbmNlbEFuZENvbnRleHRBcmdzXyIsIm9uVmFsdWVFdmVudCIsImNhbGxiYWNrcyIsIm9uQ2hpbGRFdmVudCIsImNhbmNlbENhbGxiYWNrIiwiY29udGFpbmVyIiwiYWRkRXZlbnRDYWxsYmFja0ZvclF1ZXJ5IiwicmVtb3ZlRXZlbnRDYWxsYmFja0ZvclF1ZXJ5IiwidXNlckNhbGxiYWNrIiwiY2FuY2VsT3JDb250ZXh0IiwiZmlyc3RDYWxsIiwib25jZUNhbGxiYWNrIiwibGltaXRUb0ZpcnN0IiwibGltaXQiLCJsaW1pdFRvTGFzdCIsIm9yZGVyQnlDaGlsZCIsInBhcnNlZFBhdGgiLCJuZXdQYXJhbXMiLCJvcmRlckJ5Iiwib3JkZXJCeUtleSIsIm9yZGVyQnlQcmlvcml0eSIsIm9yZGVyQnlWYWx1ZSIsInN0YXJ0QXQiLCJlbmRBdCIsImVxdWFsVG8iLCJxdWVyeU9iamVjdCIsImdldFF1ZXJ5T2JqZWN0IiwicXVlcnlJZGVudGlmaWVyIiwic2FtZVJlcG8iLCJzYW1lUGF0aCIsInNhbWVRdWVyeUlkZW50aWZpZXIiLCJDb3VudGVkU2V0IiwiU3BhcnNlU25hcHNob3RUcmVlIiwiY2hpbGRLZXkiLCJyZW1lbWJlciIsImZvcmdldCIsInNlbGZfMSIsInRyZWUiLCJmb3JFYWNoVHJlZSIsInByZWZpeFBhdGgiLCJyZXNvbHZlRGVmZXJyZWRWYWx1ZSIsInNlcnZlclZhbHVlcyIsInJlc29sdmVEZWZlcnJlZFZhbHVlU25hcHNob3QiLCJyYXdQcmkiLCJsZWFmTm9kZSIsImNoaWxkcmVuTm9kZSIsImVtcHR5Q2hpbGRyZW5TaW5nbGV0b24iLCJfX3JlZmVyZW5jZUNvbnN0cnVjdG9yJDEiLCJPcGVyYXRpb25Tb3VyY2UiLCJmcm9tVXNlciIsImZyb21TZXJ2ZXIiLCJxdWVyeUlkIiwidGFnZ2VkIiwiU2VydmVyIiwiZm9yU2VydmVyVGFnZ2VkUXVlcnkiLCJBY2tVc2VyV3JpdGUiLCJhZmZlY3RlZFRyZWUiLCJyZXZlcnQiLCJBQ0tfVVNFUl9XUklURSIsIm9wZXJhdGlvbkZvckNoaWxkIiwic3VidHJlZSIsIkVtcHR5Q2hpbGRyZW4iLCJJbW11dGFibGVUcmVlIiwiZnJvbU9iamVjdCIsImNoaWxkU25hcCIsImZpbmRSb290TW9zdE1hdGNoaW5nUGF0aEFuZFZhbHVlIiwicHJlZGljYXRlIiwiY2hpbGRFeGlzdGluZ1BhdGhBbmRWYWx1ZSIsImZpbmRSb290TW9zdFZhbHVlQW5kUGF0aCIsInRvU2V0IiwibmV3Q2hpbGQiLCJzZXRUcmVlIiwibmV3VHJlZSIsImZvbGQiLCJmb2xkXyIsInBhdGhTb0ZhciIsImFjY3VtIiwiZmluZE9uUGF0aCIsImZpbmRPblBhdGhfIiwicGF0aFRvRm9sbG93IiwibmV4dENoaWxkIiwiZm9yZWFjaE9uUGF0aCIsImZvcmVhY2hPblBhdGhfIiwiY3VycmVudFJlbGF0aXZlUGF0aCIsImZvcmVhY2giLCJmb3JlYWNoXyIsImZvcmVhY2hDaGlsZCIsIkxpc3RlbkNvbXBsZXRlIiwiTElTVEVOX0NPTVBMRVRFIiwiT3ZlcndyaXRlIiwiT1ZFUldSSVRFIiwiTWVyZ2UiLCJNRVJHRSIsIkNhY2hlTm9kZSIsImZ1bGx5SW5pdGlhbGl6ZWRfIiwiZmlsdGVyZWRfIiwiaXNGdWxseUluaXRpYWxpemVkIiwiaXNGaWx0ZXJlZCIsImlzQ29tcGxldGVGb3JQYXRoIiwiaXNDb21wbGV0ZUZvckNoaWxkIiwiZ2V0Tm9kZSIsIlZpZXdDYWNoZSIsImV2ZW50Q2FjaGVfIiwic2VydmVyQ2FjaGVfIiwidXBkYXRlRXZlbnRTbmFwIiwiZXZlbnRTbmFwIiwiZmlsdGVyZWQiLCJ1cGRhdGVTZXJ2ZXJTbmFwIiwic2VydmVyU25hcCIsImdldEV2ZW50Q2FjaGUiLCJnZXRDb21wbGV0ZUV2ZW50U25hcCIsImdldFNlcnZlckNhY2hlIiwiZ2V0Q29tcGxldGVTZXJ2ZXJTbmFwIiwiQ2hhbmdlIiwib2xkU25hcCIsInZhbHVlQ2hhbmdlIiwiVkFMVUUiLCJjaGlsZEFkZGVkQ2hhbmdlIiwiQ0hJTERfQURERUQiLCJjaGlsZFJlbW92ZWRDaGFuZ2UiLCJDSElMRF9SRU1PVkVEIiwiY2hpbGRDaGFuZ2VkQ2hhbmdlIiwibmV3U25hcHNob3QiLCJvbGRTbmFwc2hvdCIsIkNISUxEX0NIQU5HRUQiLCJjaGlsZE1vdmVkQ2hhbmdlIiwiQ0hJTERfTU9WRUQiLCJJbmRleGVkRmlsdGVyIiwiYWZmZWN0ZWRQYXRoIiwib3B0Q2hhbmdlQWNjdW11bGF0b3IiLCJvbGRDaGlsZCIsInRyYWNrQ2hpbGRDaGFuZ2UiLCJ1cGRhdGVGdWxsTm9kZSIsIm5ld1NuYXAiLCJmaWx0ZXJzTm9kZXMiLCJnZXRJbmRleGVkRmlsdGVyIiwiQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvciIsImNoYW5nZU1hcF8iLCJvbGRDaGFuZ2UiLCJvbGRUeXBlIiwiZ2V0Q2hhbmdlcyIsIk5PX0NPTVBMRVRFX0NISUxEX1NPVVJDRSIsIk5vQ29tcGxldGVDaGlsZFNvdXJjZV8iLCJnZXRDb21wbGV0ZUNoaWxkIiwiZ2V0Q2hpbGRBZnRlckNoaWxkIiwiV3JpdGVUcmVlQ29tcGxldGVDaGlsZFNvdXJjZSIsIndyaXRlc18iLCJ2aWV3Q2FjaGVfIiwib3B0Q29tcGxldGVTZXJ2ZXJDYWNoZV8iLCJzZXJ2ZXJOb2RlIiwiY2FsY0NvbXBsZXRlQ2hpbGQiLCJjb21wbGV0ZVNlcnZlckRhdGEiLCJjYWxjSW5kZXhlZFNsaWNlIiwiUHJvY2Vzc29yUmVzdWx0Iiwidmlld0NhY2hlIiwiY2hhbmdlcyIsIlZpZXdQcm9jZXNzb3IiLCJmaWx0ZXJfIiwiYXNzZXJ0SW5kZXhlZCIsImFwcGx5T3BlcmF0aW9uIiwib2xkVmlld0NhY2hlIiwid3JpdGVzQ2FjaGUiLCJjb21wbGV0ZUNhY2hlIiwibmV3Vmlld0NhY2hlIiwiZmlsdGVyU2VydmVyTm9kZSIsImFjY3VtdWxhdG9yIiwib3ZlcndyaXRlIiwiYXBwbHlVc2VyT3ZlcndyaXRlXyIsImFwcGx5U2VydmVyT3ZlcndyaXRlXyIsIm1lcmdlIiwiYXBwbHlVc2VyTWVyZ2VfIiwiYXBwbHlTZXJ2ZXJNZXJnZV8iLCJhY2tVc2VyV3JpdGUiLCJyZXZlcnRVc2VyV3JpdGVfIiwiYWNrVXNlcldyaXRlXyIsImxpc3RlbkNvbXBsZXRlXyIsIm1heWJlQWRkVmFsdWVFdmVudF8iLCJpc0xlYWZPckVtcHR5Iiwib2xkQ29tcGxldGVTbmFwIiwiZ2VuZXJhdGVFdmVudENhY2hlQWZ0ZXJTZXJ2ZXJFdmVudF8iLCJjaGFuZ2VQYXRoIiwib2xkRXZlbnRTbmFwIiwic2hhZG93aW5nV3JpdGUiLCJuZXdFdmVudENhY2hlIiwic2VydmVyQ2FjaGUiLCJjb21wbGV0ZUNoaWxkcmVuIiwiY29tcGxldGVFdmVudENoaWxkcmVuIiwiY2FsY0NvbXBsZXRlRXZlbnRDaGlsZHJlbiIsImNvbXBsZXRlTm9kZSIsImNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUiLCJvbGRFdmVudE5vZGUiLCJ1cGRhdGVkUHJpb3JpdHkiLCJjYWxjRXZlbnRDYWNoZUFmdGVyU2VydmVyT3ZlcndyaXRlIiwiY2hpbGRDaGFuZ2VQYXRoIiwibmV3RXZlbnRDaGlsZCIsImV2ZW50Q2hpbGRVcGRhdGUiLCJjaGFuZ2VkU25hcCIsIm5ld1NlcnZlckNhY2hlIiwib2xkU2VydmVyU25hcCIsInNlcnZlckZpbHRlciIsIm5ld1NlcnZlck5vZGUiLCJuZXdFdmVudFNuYXAiLCJjYWNoZUhhc0NoaWxkXyIsImNoYW5nZWRDaGlsZHJlbiIsImN1clZpZXdDYWNoZSIsIndyaXRlUGF0aCIsImFwcGx5TWVyZ2VfIiwidmlld01lcmdlVHJlZSIsInNlcnZlckNoaWxkIiwiY2hpbGRNZXJnZVRyZWUiLCJpc1Vua25vd25EZWVwTWVyZ2UiLCJhY2tQYXRoIiwiY2hhbmdlZENoaWxkcmVuXzEiLCJjaGFuZ2VkQ2hpbGRyZW5fMiIsIm1lcmdlUGF0aCIsInNlcnZlckNhY2hlUGF0aCIsIm9sZFNlcnZlck5vZGUiLCJjb21wbGV0ZVNlcnZlckNhY2hlIiwib2xkRXZlbnRDYWNoZSIsInNlcnZlckNoaWxkcmVuIiwiRXZlbnRHZW5lcmF0b3IiLCJxdWVyeV8iLCJnZW5lcmF0ZUV2ZW50c0ZvckNoYW5nZXMiLCJldmVudENhY2hlIiwiZXZlbnRSZWdpc3RyYXRpb25zIiwiZXZlbnRzIiwibW92ZXMiLCJnZW5lcmF0ZUV2ZW50c0ZvclR5cGVfIiwicmVnaXN0cmF0aW9ucyIsImZpbHRlcmVkQ2hhbmdlcyIsImNvbXBhcmVDaGFuZ2VzXyIsIm1hdGVyaWFsaXplZENoYW5nZSIsIm1hdGVyaWFsaXplU2luZ2xlQ2hhbmdlXyIsInJlZ2lzdHJhdGlvbiIsImFXcmFwcGVkIiwiYldyYXBwZWQiLCJWaWV3IiwiaW5pdGlhbFZpZXdDYWNoZSIsImV2ZW50UmVnaXN0cmF0aW9uc18iLCJpbmRleEZpbHRlciIsImdldE5vZGVGaWx0ZXIiLCJwcm9jZXNzb3JfIiwiaW5pdGlhbFNlcnZlckNhY2hlIiwiaW5pdGlhbEV2ZW50Q2FjaGUiLCJldmVudEdlbmVyYXRvcl8iLCJnZXRRdWVyeSIsImdldENvbXBsZXRlU2VydmVyQ2FjaGUiLCJsb2Fkc0FsbERhdGEiLCJhZGRFdmVudFJlZ2lzdHJhdGlvbiIsInJlbW92ZUV2ZW50UmVnaXN0cmF0aW9uIiwiY2FuY2VsRXJyb3IiLCJjYW5jZWxFdmVudHMiLCJwYXRoXzEiLCJtYXliZUV2ZW50IiwiZXhpc3RpbmciLCJnZW5lcmF0ZUV2ZW50c0ZvckNoYW5nZXNfIiwiZ2V0SW5pdGlhbEV2ZW50cyIsImluaXRpYWxDaGFuZ2VzIiwiU3luY1BvaW50Iiwidmlld3NfIiwib3B0Q29tcGxldGVTZXJ2ZXJDYWNoZSIsImV2ZW50c18xIiwic2VydmVyQ2FjaGVDb21wbGV0ZSIsImV2ZW50Q2FjaGVDb21wbGV0ZSIsInJlbW92ZWQiLCJoYWRDb21wbGV0ZVZpZXciLCJoYXNDb21wbGV0ZVZpZXciLCJ2aWV3UXVlcnlJZCIsImdldFF1ZXJ5Vmlld3MiLCJ2aWV3Rm9yUXVlcnkiLCJnZXRDb21wbGV0ZVZpZXciLCJ2aWV3RXhpc3RzRm9yUXVlcnkiLCJDb21wb3VuZFdyaXRlIiwid3JpdGVUcmVlXyIsImFkZFdyaXRlIiwicm9vdG1vc3QiLCJyb290TW9zdFBhdGgiLCJhZGRXcml0ZXMiLCJ1cGRhdGVzIiwibmV3V3JpdGUiLCJyZW1vdmVXcml0ZSIsImhhc0NvbXBsZXRlV3JpdGUiLCJnZXRDb21wbGV0ZU5vZGUiLCJnZXRDb21wbGV0ZUNoaWxkcmVuIiwiY2hpbGRDb21wb3VuZFdyaXRlIiwic2hhZG93aW5nTm9kZSIsImFwcGx5U3VidHJlZVdyaXRlXyIsIndyaXRlVHJlZSIsInByaW9yaXR5V3JpdGVfMSIsIldyaXRlVHJlZSIsInZpc2libGVXcml0ZXNfIiwiYWxsV3JpdGVzXyIsImxhc3RXcml0ZUlkXyIsImNoaWxkV3JpdGVzIiwiV3JpdGVUcmVlUmVmIiwiYWRkT3ZlcndyaXRlIiwid3JpdGVJZCIsImFkZE1lcmdlIiwiZ2V0V3JpdGUiLCJyZWNvcmQiLCJ3cml0ZVRvUmVtb3ZlIiwicmVtb3ZlZFdyaXRlV2FzVmlzaWJsZSIsInJlbW92ZWRXcml0ZU92ZXJsYXBzV2l0aE90aGVyV3JpdGVzIiwiY3VycmVudFdyaXRlIiwicmVjb3JkQ29udGFpbnNQYXRoXyIsInJlc2V0VHJlZV8iLCJnZXRDb21wbGV0ZVdyaXRlRGF0YSIsInRyZWVQYXRoIiwid3JpdGVJZHNUb0V4Y2x1ZGUiLCJpbmNsdWRlSGlkZGVuV3JpdGVzIiwibWVyZ2VBdFBhdGgiLCJsYXllclRyZWVfIiwibGF5ZXJlZENhY2hlIiwic3ViTWVyZ2UiLCJjb21wbGV0ZVNlcnZlckNoaWxkcmVuIiwidG9wTGV2ZWxTZXQiLCJtZXJnZV8xIiwiZXhpc3RpbmdFdmVudFNuYXAiLCJleGlzdGluZ1NlcnZlclNuYXAiLCJjaGlsZE1lcmdlIiwidG9JdGVyYXRlIiwid3JpdGVSZWNvcmQiLCJEZWZhdWx0RmlsdGVyXyIsIndyaXRlcyIsInRyZWVSb290IiwiY29tcG91bmRXcml0ZSIsImRlZXBOb2RlIiwidHJlZVBhdGhfIiwiZXhpc3RpbmdTZXJ2ZXJDYWNoZSIsIlN5bmNUcmVlIiwibGlzdGVuUHJvdmlkZXJfIiwic3luY1BvaW50VHJlZV8iLCJwZW5kaW5nV3JpdGVUcmVlXyIsInRhZ1RvUXVlcnlNYXBfIiwicXVlcnlUb1RhZ01hcF8iLCJhcHBseVVzZXJPdmVyd3JpdGUiLCJuZXdEYXRhIiwiYXBwbHlPcGVyYXRpb25Ub1N5bmNQb2ludHNfIiwiYXBwbHlVc2VyTWVyZ2UiLCJjaGFuZ2VUcmVlIiwiYWZmZWN0ZWRUcmVlXzEiLCJhcHBseVNlcnZlck92ZXJ3cml0ZSIsImFwcGx5U2VydmVyTWVyZ2UiLCJhcHBseUxpc3RlbkNvbXBsZXRlIiwiYXBwbHlUYWdnZWRRdWVyeU92ZXJ3cml0ZSIsInF1ZXJ5S2V5IiwicXVlcnlLZXlGb3JUYWdfIiwicGFyc2VRdWVyeUtleV8iLCJxdWVyeVBhdGgiLCJhcHBseVRhZ2dlZE9wZXJhdGlvbl8iLCJhcHBseVRhZ2dlZFF1ZXJ5TWVyZ2UiLCJhcHBseVRhZ2dlZExpc3RlbkNvbXBsZXRlIiwiZm91bmRBbmNlc3RvckRlZmF1bHRWaWV3IiwicGF0aFRvU3luY1BvaW50Iiwic3AiLCJzeW5jUG9pbnQiLCJjaGlsZFN5bmNQb2ludCIsInZpZXdBbHJlYWR5RXhpc3RzIiwibWFrZVF1ZXJ5S2V5XyIsImdldE5leHRRdWVyeVRhZ18iLCJzZXR1cExpc3RlbmVyXyIsIm1heWJlU3luY1BvaW50IiwicmVtb3ZlZEFuZEV2ZW50cyIsInJlbW92aW5nRGVmYXVsdCIsImNvdmVyZWQiLCJwYXJlbnRTeW5jUG9pbnQiLCJuZXdWaWV3cyIsImNvbGxlY3REaXN0aW5jdFZpZXdzRm9yU3ViVHJlZV8iLCJuZXdRdWVyeSIsImNyZWF0ZUxpc3RlbmVyRm9yVmlld18iLCJzdGFydExpc3RlbmluZyIsInF1ZXJ5Rm9yTGlzdGVuaW5nXyIsInRhZ0ZvclF1ZXJ5XyIsImhhc2hGbiIsInN0b3BMaXN0ZW5pbmciLCJxdWVyeVRvUmVtb3ZlIiwidGFnVG9SZW1vdmUiLCJyZW1vdmVUYWdzXyIsIm1heWJlQ2hpbGRTeW5jUG9pbnQiLCJjaGlsZE1hcCIsInZpZXdzXzEiLCJjaGlsZFZpZXdzIiwicXVlcmllcyIsInJlbW92ZWRRdWVyeSIsInJlbW92ZWRRdWVyeUtleSIsInJlbW92ZWRRdWVyeVRhZyIsImlzRGVmYXVsdCIsInF1ZXJpZXNUb1N0b3AiLCJxdWVyaWVzXzEiLCJjaGlsZFF1ZXJpZXMiLCJxdWVyeVRvU3RvcCIsImVycm9yRm9yU2VydmVyQ29kZSIsInNwbGl0SW5kZXgiLCJuZXh0UXVlcnlUYWdfIiwiYXBwbHlPcGVyYXRpb25IZWxwZXJfIiwic3luY1BvaW50VHJlZSIsImFwcGx5T3BlcmF0aW9uRGVzY2VuZGFudHNIZWxwZXJfIiwiY2hpbGRPcGVyYXRpb24iLCJjaGlsZFNlcnZlckNhY2hlIiwiY2hpbGRXcml0ZXNDYWNoZSIsIlNuYXBzaG90SG9sZGVyIiwicm9vdE5vZGVfIiwidXBkYXRlU25hcHNob3QiLCJuZXdTbmFwc2hvdE5vZGUiLCJBdXRoVG9rZW5Qcm92aWRlciIsImFwcF8iLCJmb3JjZVJlZnJlc2giLCJhZGRUb2tlbkNoYW5nZUxpc3RlbmVyIiwicmVtb3ZlVG9rZW5DaGFuZ2VMaXN0ZW5lciIsIm5vdGlmeUZvckludmFsaWRUb2tlbiIsIlN0YXRzQ29sbGVjdGlvbiIsImNvdW50ZXJzXyIsImluY3JlbWVudENvdW50ZXIiLCJhbW91bnQiLCJTdGF0c01hbmFnZXIiLCJnZXRDb2xsZWN0aW9uIiwiaGFzaFN0cmluZyIsImNvbGxlY3Rpb25zXyIsImdldE9yQ3JlYXRlUmVwb3J0ZXIiLCJjcmVhdG9yRnVuY3Rpb24iLCJyZXBvcnRlcnNfIiwiU3RhdHNMaXN0ZW5lciIsImNvbGxlY3Rpb25fIiwibGFzdF8iLCJuZXdTdGF0cyIsImRlbHRhIiwiRklSU1RfU1RBVFNfTUlOX1RJTUUiLCJGSVJTVF9TVEFUU19NQVhfVElNRSIsIlN0YXRzUmVwb3J0ZXIiLCJjb2xsZWN0aW9uIiwic2VydmVyXyIsInN0YXRzVG9SZXBvcnRfIiwic3RhdHNMaXN0ZW5lcl8iLCJyZXBvcnRTdGF0c18iLCJpbmNsdWRlU3RhdCIsInN0YXRzIiwicmVwb3J0ZWRTdGF0cyIsImhhdmVTdGF0c1RvUmVwb3J0IiwicmVwb3J0U3RhdHMiLCJFdmVudFF1ZXVlIiwiZXZlbnRMaXN0c18iLCJyZWN1cnNpb25EZXB0aF8iLCJxdWV1ZUV2ZW50cyIsImV2ZW50RGF0YUxpc3QiLCJjdXJyTGlzdCIsImV2ZW50UGF0aCIsIkV2ZW50TGlzdCIsInJhaXNlRXZlbnRzQXRQYXRoIiwicmFpc2VRdWV1ZWRFdmVudHNNYXRjaGluZ1ByZWRpY2F0ZV8iLCJyYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoIiwiY2hhbmdlZFBhdGgiLCJzZW50QWxsIiwiZXZlbnRMaXN0IiwicmFpc2UiLCJldmVudHNfIiwiZXZlbnRGbiIsIkV2ZW50RW1pdHRlciIsImFsbG93ZWRFdmVudHNfIiwibGlzdGVuZXJzXyIsInRyaWdnZXIiLCJ2YWxpZGF0ZUV2ZW50VHlwZV8iLCJnZXRJbml0aWFsRXZlbnQiLCJldCIsIlZpc2liaWxpdHlNb25pdG9yIiwidmlzaWJpbGl0eUNoYW5nZSIsInZpc2libGVfIiwiZ2V0SW5zdGFuY2UiLCJPbmxpbmVNb25pdG9yIiwib25saW5lXyIsImN1cnJlbnRseU9ubGluZSIsIlBhY2tldFJlY2VpdmVyIiwib25NZXNzYWdlXyIsInBlbmRpbmdSZXNwb25zZXMiLCJjdXJyZW50UmVzcG9uc2VOdW0iLCJjbG9zZUFmdGVyUmVzcG9uc2UiLCJvbkNsb3NlIiwiY2xvc2VBZnRlciIsInJlc3BvbnNlTnVtIiwiaGFuZGxlUmVzcG9uc2UiLCJyZXF1ZXN0TnVtIiwiX2xvb3BfMSIsInRvUHJvY2VzcyIsInRoaXNfMSIsIl9sb29wXzIiLCJGSVJFQkFTRV9MT05HUE9MTF9DT01NQU5EX0NCX05BTUUiLCJGSVJFQkFTRV9MT05HUE9MTF9EQVRBX0NCX05BTUUiLCJCcm93c2VyUG9sbENvbm5lY3Rpb24iLCJjb25uSWQiLCJ0cmFuc3BvcnRTZXNzaW9uSWQiLCJsYXN0U2Vzc2lvbklkIiwiYnl0ZXNTZW50IiwiYnl0ZXNSZWNlaXZlZCIsImV2ZXJDb25uZWN0ZWRfIiwibG9nXyIsInN0YXRzXyIsInVybEZuIiwib25EaXNjb25uZWN0IiwiY3VyU2VnbWVudE51bSIsIm9uRGlzY29ubmVjdF8iLCJteVBhY2tldE9yZGVyZXIiLCJpc0Nsb3NlZF8iLCJjb25uZWN0VGltZW91dFRpbWVyXyIsIm9uQ2xvc2VkXyIsImNhbGxlZF8xIiwid3JhcHBlZEZuXzEiLCJleGVjdXRlV2hlbkRPTVJlYWR5Iiwic2NyaXB0VGFnSG9sZGVyIiwiRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIiLCJjb21tYW5kIiwiYXJnMSIsImFyZzIiLCJpbmNyZW1lbnRJbmNvbWluZ0J5dGVzXyIsInNlbmROZXdQb2xscyIsInBOIiwidXJsUGFyYW1zIiwidW5pcXVlQ2FsbGJhY2tJZGVudGlmaWVyIiwiY29ubmVjdFVSTCIsImFkZFRhZyIsInN0YXJ0TG9uZ1BvbGwiLCJhZGREaXNjb25uZWN0UGluZ0ZyYW1lIiwiZm9yY2VBbGxvdyIsImZvcmNlQWxsb3dfIiwiZm9yY2VEaXNhbGxvdyIsImZvcmNlRGlzYWxsb3dfIiwiaXNBdmFpbGFibGUiLCJXaW5kb3dzIiwiVUkiLCJtYXJrQ29ubmVjdGlvbkhlYWx0aHkiLCJzaHV0ZG93bl8iLCJteURpc2Nvbm5GcmFtZSIsImRhdGFTdHIiLCJiYXNlNjRkYXRhIiwiTUFYX1VSTF9EQVRBX1NJWkUiLCJlbnF1ZXVlU2VnbWVudCIsInB3IiwiZGZyYW1lIiwiY29tbWFuZENCIiwib25NZXNzYWdlQ0IiLCJvdXRzdGFuZGluZ1JlcXVlc3RzIiwicGVuZGluZ1NlZ3MiLCJjdXJyZW50U2VyaWFsIiwibXlJRnJhbWUiLCJjcmVhdGVJRnJhbWVfIiwiaWZyYW1lQ29udGVudHMiLCJhbGl2ZSIsIm15SUQiLCJkaXNjb25uIiwibXlQVyIsInRoZVVSTCIsIm5vZGVSZXN0UmVxdWVzdCIsIm5ld1JlcXVlc3RfIiwiY3VyRGF0YVN0cmluZyIsInRoZVNlZyIsInNlZyIsInRzIiwiYWRkTG9uZ1BvbGxUYWdfIiwic2VnbnVtIiwidG90YWxzZWdzIiwic2VyaWFsIiwiZG9OZXdSZXF1ZXN0Iiwia2VlcGFsaXZlVGltZW91dCIsImxvYWRDQiIsImRvTm9kZUxvbmdQb2xsIiwibmV3U2NyaXB0XzEiLCJyc3RhdGUiLCJXZWJTb2NrZXRJbXBsIiwiTW96V2ViU29ja2V0IiwiV2ViU29ja2V0IiwiV2ViU29ja2V0Q29ubmVjdGlvbiIsImtlZXBhbGl2ZVRpbWVyIiwiZnJhbWVzIiwidG90YWxGcmFtZXMiLCJjb25uZWN0aW9uVVJMXyIsImRldmljZSIsIlVzZXItQWdlbnQiLCJwbGF0Zm9ybSIsIm15U29jayIsIm9ub3BlbiIsIm9uY2xvc2UiLCJoYW5kbGVJbmNvbWluZ0ZyYW1lIiwiaXNPbGRBbmRyb2lkIiwib2xkQW5kcm9pZE1hdGNoIiwicHJldmlvdXNseUZhaWxlZCIsImFwcGVuZEZyYW1lXyIsImZ1bGxNZXNzIiwianNvbk1lc3MiLCJoYW5kbGVOZXdGcmFtZUNvdW50XyIsImV4dHJhY3RGcmFtZUNvdW50XyIsIm1lc3MiLCJyZXNldEtlZXBBbGl2ZSIsInJlbWFpbmluZ0RhdGEiLCJzZW5kU3RyaW5nXyIsInJlc3BvbnNlc1JlcXVpcmVkVG9CZUhlYWx0aHkiLCJoZWFsdGh5VGltZW91dCIsIlRyYW5zcG9ydE1hbmFnZXIiLCJpbml0VHJhbnNwb3J0c18iLCJpc1dlYlNvY2tldHNBdmFpbGFibGUiLCJpc1NraXBQb2xsQ29ubmVjdGlvbiIsInRyYW5zcG9ydHNfIiwidHJhbnNwb3J0c18xIiwiQUxMX1RSQU5TUE9SVFMiLCJ0cmFuc3BvcnQiLCJpbml0aWFsVHJhbnNwb3J0IiwidXBncmFkZVRyYW5zcG9ydCIsIkNvbm5lY3Rpb24iLCJyZXBvSW5mb18iLCJvblJlYWR5XyIsIm9uS2lsbF8iLCJjb25uZWN0aW9uQ291bnQiLCJwZW5kaW5nRGF0YU1lc3NhZ2VzIiwic3RhdGVfIiwidHJhbnNwb3J0TWFuYWdlcl8iLCJzdGFydF8iLCJjb25uIiwiY29ubl8iLCJuZXh0VHJhbnNwb3J0SWRfIiwicHJpbWFyeVJlc3BvbnNlc1JlcXVpcmVkXyIsIm9uTWVzc2FnZVJlY2VpdmVkIiwiY29ublJlY2VpdmVyXyIsIm9uQ29ubmVjdGlvbkxvc3QiLCJkaXNjb25uUmVjZWl2ZXJfIiwidHhfIiwicnhfIiwic2Vjb25kYXJ5Q29ubl8iLCJpc0hlYWx0aHlfIiwiaGVhbHRoeVRpbWVvdXRfbXMiLCJoZWFsdGh5VGltZW91dF8iLCJldmVyQ29ubmVjdGVkIiwib25Db25uZWN0aW9uTG9zdF8iLCJvblNlY29uZGFyeUNvbm5lY3Rpb25Mb3N0XyIsIm9uUHJpbWFyeU1lc3NhZ2VSZWNlaXZlZF8iLCJvblNlY29uZGFyeU1lc3NhZ2VSZWNlaXZlZF8iLCJzZW5kUmVxdWVzdCIsImRhdGFNc2ciLCJtc2ciLCJzZW5kRGF0YV8iLCJ0cnlDbGVhbnVwQ29ubmVjdGlvbiIsIm9uU2Vjb25kYXJ5Q29udHJvbF8iLCJjb250cm9sRGF0YSIsImNtZCIsInVwZ3JhZGVJZlNlY29uZGFyeUhlYWx0aHlfIiwic2Vjb25kYXJ5UmVzcG9uc2VzUmVxdWlyZWRfIiwicGFyc2VkRGF0YSIsImxheWVyIiwicHJvY2VlZFdpdGhVcGdyYWRlXyIsIm9uQ29udHJvbF8iLCJvbkRhdGFNZXNzYWdlXyIsIm9uUHJpbWFyeVJlc3BvbnNlXyIsIm9uSGFuZHNoYWtlXyIsIm9uQ29ubmVjdGlvblNodXRkb3duXyIsIm9uUmVzZXRfIiwic2VuZFBpbmdPblByaW1hcnlJZk5lY2Vzc2FyeV8iLCJoYW5kc2hha2UiLCJ0aW1lc3RhbXAiLCJvbkNvbm5lY3Rpb25Fc3RhYmxpc2hlZF8iLCJ0cnlTdGFydFVwZ3JhZGVfIiwic3RhcnRVcGdyYWRlXyIsImNsb3NlQ29ubmVjdGlvbnNfIiwiU2VydmVyQWN0aW9ucyIsInJlZnJlc2hBdXRoVG9rZW4iLCJvbkRpc2Nvbm5lY3RQdXQiLCJvbkRpc2Nvbm5lY3RNZXJnZSIsIlJFQ09OTkVDVF9NSU5fREVMQVkiLCJSRUNPTk5FQ1RfTUFYX0RFTEFZX0RFRkFVTFQiLCJQZXJzaXN0ZW50Q29ubmVjdGlvbiIsIm9uRGF0YVVwZGF0ZV8iLCJvbkNvbm5lY3RTdGF0dXNfIiwib25TZXJ2ZXJJbmZvVXBkYXRlXyIsImF1dGhUb2tlblByb3ZpZGVyXyIsImF1dGhPdmVycmlkZV8iLCJuZXh0UGVyc2lzdGVudENvbm5lY3Rpb25JZF8iLCJpbnRlcnJ1cHRSZWFzb25zXyIsImxpc3RlbnNfIiwib3V0c3RhbmRpbmdQdXRzXyIsIm91dHN0YW5kaW5nUHV0Q291bnRfIiwib25EaXNjb25uZWN0UmVxdWVzdFF1ZXVlXyIsImNvbm5lY3RlZF8iLCJyZWNvbm5lY3REZWxheV8iLCJtYXhSZWNvbm5lY3REZWxheV8iLCJzZWN1cml0eURlYnVnQ2FsbGJhY2tfIiwiZXN0YWJsaXNoQ29ubmVjdGlvblRpbWVyXyIsInJlcXVlc3RDQkhhc2hfIiwicmVxdWVzdE51bWJlcl8iLCJyZWFsdGltZV8iLCJhdXRoVG9rZW5fIiwiZm9yY2VUb2tlblJlZnJlc2hfIiwiaW52YWxpZEF1dGhUb2tlbkNvdW50XyIsImZpcnN0Q29ubmVjdGlvbl8iLCJsYXN0Q29ubmVjdGlvbkF0dGVtcHRUaW1lXyIsImxhc3RDb25uZWN0aW9uRXN0YWJsaXNoZWRUaW1lXyIsInNjaGVkdWxlQ29ubmVjdF8iLCJvblZpc2libGVfIiwib25PbmxpbmVfIiwib25SZXNwb25zZSIsImN1clJlcU51bSIsImN1cnJlbnRIYXNoRm4iLCJsaXN0ZW5TcGVjIiwic2VuZExpc3Rlbl8iLCJyZXEiLCJ3YXJuT25MaXN0ZW5XYXJuaW5nc18iLCJyZW1vdmVMaXN0ZW5fIiwid2FybmluZ3MiLCJpbmRleFNwZWMiLCJpbmRleFBhdGgiLCJ0cnlBdXRoIiwicmVkdWNlUmVjb25uZWN0RGVsYXlJZkFkbWluQ3JlZGVudGlhbF8iLCJ0b2tlbl8xIiwiYXV0aE1ldGhvZCIsInJlcXVlc3REYXRhIiwiY3JlZCIsIm9uQXV0aFJldm9rZWRfIiwic2VuZFVubGlzdGVuXyIsInF1ZXJ5T2JqIiwic2VuZE9uRGlzY29ubmVjdF8iLCJwdXRJbnRlcm5hbCIsInNlbmRQdXRfIiwicXVldWVkIiwiZXJyb3JSZWFzb24iLCJyZXFOdW0iLCJvbkRhdGFQdXNoXyIsIm9uTGlzdGVuUmV2b2tlZF8iLCJvblNlY3VyaXR5RGVidWdQYWNrZXRfIiwiaGFuZGxlVGltZXN0YW1wXyIsInNlbmRDb25uZWN0U3RhdHNfIiwicmVzdG9yZVN0YXRlXyIsImVzdGFibGlzaENvbm5lY3Rpb25fIiwib25saW5lIiwib25SZWFsdGltZURpc2Nvbm5lY3RfIiwiY2FuY2VsU2VudFRyYW5zYWN0aW9uc18iLCJzaG91bGRSZWNvbm5lY3RfIiwidGltZVNpbmNlTGFzdENvbm5lY3RBdHRlbXB0IiwicmVjb25uZWN0RGVsYXkiLCJvbkRhdGFNZXNzYWdlXzEiLCJvblJlYWR5XzEiLCJvbkRpc2Nvbm5lY3RfMSIsImNvbm5JZF8xIiwibmV4dENvbm5lY3Rpb25JZF8iLCJsYXN0U2Vzc2lvbklkXzEiLCJjYW5jZWxlZF8xIiwiY29ubmVjdGlvbl8xIiwiY2xvc2VGbl8xIiwiaW50ZXJydXB0Iiwic2VydmVyVGltZU9mZnNldCIsIm5vcm1hbGl6ZWRQYXRoU3RyaW5nIiwic3RhdHVzQ29kZSIsImNsaWVudE5hbWUiLCJSZWFkb25seVJlc3RDbGllbnQiLCJnZXRMaXN0ZW5JZF8iLCJsaXN0ZW5JZCIsInRoaXNMaXN0ZW4iLCJxdWVyeVN0cmluZ1BhcmFtZXRlcnMiLCJ0b1Jlc3RRdWVyeVN0cmluZ1BhcmFtZXRlcnMiLCJyZXN0UmVxdWVzdF8iLCJhdXRoVG9rZW5EYXRhIiwiYXV0aFRva2VuIiwiUmVwbyIsImZvcmNlUmVzdENsaWVudCIsImRhdGFVcGRhdGVDb3VudCIsImV2ZW50UXVldWVfIiwibmV4dFdyaXRlSWRfIiwiaW50ZXJjZXB0U2VydmVyRGF0YUNhbGxiYWNrXyIsInBlcnNpc3RlbnRDb25uZWN0aW9uXyIsImF1dGhUb2tlblByb3ZpZGVyIiwiYXV0aE92ZXJyaWRlIiwic3RhdHNSZXBvcnRlcl8iLCJ0cmFuc2FjdGlvbnNfaW5pdF8iLCJpbmZvRGF0YV8iLCJpbmZvU3luY1RyZWVfIiwiaW5mb0V2ZW50cyIsInVwZGF0ZUluZm9fIiwic2VydmVyU3luY1RyZWVfIiwic2VydmVyVGltZSIsImdlbmVyYXRlU2VydmVyVmFsdWVzIiwiaXNNZXJnZSIsInRhZ2dlZENoaWxkcmVuIiwidGFnZ2VkU25hcCIsInJlcnVuVHJhbnNhY3Rpb25zXyIsImludGVyY2VwdFNlcnZlckRhdGFfIiwiY29ubmVjdFN0YXR1cyIsInJ1bk9uRGlzY29ubmVjdEV2ZW50c18iLCJnZXROZXh0V3JpdGVJZF8iLCJuZXdWYWwiLCJuZXdOb2RlVW5yZXNvbHZlZCIsImNsZWFyRXZlbnRzIiwiY2FsbE9uQ29tcGxldGVDYWxsYmFjayIsImFib3J0VHJhbnNhY3Rpb25zXyIsImNoaWxkcmVuVG9NZXJnZSIsImVtcHR5IiwiY2hhbmdlZEtleSIsImNoYW5nZWRWYWx1ZSIsIndyaXRlSWRfMSIsInJlc29sdmVkT25EaXNjb25uZWN0VHJlZSIsInJlc29sdmVkVHJlZSIsInJlc29sdmVEZWZlcnJlZFZhbHVlVHJlZSIsInNob3dEZWx0YSIsImxvbmdlc3ROYW1lIiwicmVkdWNlIiwicHJldmlvdXNWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsInN0YXRzSW5jcmVtZW50Q291bnRlciIsIm1ldHJpYyIsIl9fZGF0YWJhc2UiLCJEYXRhYmFzZSIsIlJhbmdlZEZpbHRlciIsImluZGV4ZWRGaWx0ZXJfIiwic3RhcnRQb3N0XyIsImdldFN0YXJ0UG9zdF8iLCJlbmRQb3N0XyIsImdldEVuZFBvc3RfIiwiZ2V0U3RhcnRQb3N0IiwiZ2V0RW5kUG9zdCIsInN0YXJ0TmFtZSIsImVuZE5hbWUiLCJMaW1pdGVkRmlsdGVyIiwicmFuZ2VkRmlsdGVyXyIsImxpbWl0XyIsImdldExpbWl0IiwicmV2ZXJzZV8iLCJpc1ZpZXdGcm9tTGVmdCIsImZ1bGxMaW1pdFVwZGF0ZUNoaWxkXyIsImluZGV4Q29tcGFyZV8xIiwiZm91bmRTdGFydFBvc3QiLCJjaGFuZ2VBY2N1bXVsYXRvciIsImluZGV4Q21wXzEiLCJuZXdDaGlsZE5hbWVkTm9kZSIsIndpbmRvd0JvdW5kYXJ5IiwiaW5SYW5nZSIsIm9sZENoaWxkU25hcCIsImNvbXBhcmVOZXh0IiwiUXVlcnlQYXJhbXMiLCJsaW1pdFNldF8iLCJzdGFydFNldF8iLCJzdGFydE5hbWVTZXRfIiwiZW5kU2V0XyIsImVuZE5hbWVTZXRfIiwidmlld0Zyb21fIiwiaW5kZXhTdGFydFZhbHVlXyIsImluZGV4U3RhcnROYW1lXyIsImluZGV4RW5kVmFsdWVfIiwiaW5kZXhFbmROYW1lXyIsIldJUkVfUFJPVE9DT0xfQ09OU1RBTlRTXyIsIlZJRVdfRlJPTV9MRUZUIiwiY29weV8iLCJuZXdMaW1pdCIsIlZJRVdfRlJPTV9SSUdIVCIsIldJUkVfUFJPVE9DT0xfQ09OU1RBTlRTIiwiSU5ERVhfU1RBUlRfVkFMVUUiLCJJTkRFWF9TVEFSVF9OQU1FIiwiSU5ERVhfRU5EX1ZBTFVFIiwiSU5ERVhfRU5EX05BTUUiLCJMSU1JVCIsInZpZXdGcm9tIiwiVklFV19GUk9NIiwiSU5ERVgiLCJSRVNUX0NPTlNUQU5UUyIsIlJFU1RfUVVFUllfQ09OU1RBTlRTXyIsInFzIiwiT1JERVJfQlkiLCJTVEFSVF9BVCIsIkVORF9BVCIsIkxJTUlUX1RPX0ZJUlNUIiwiTElNSVRfVE9fTEFTVCIsIlJlZmVyZW5jZSIsInZhbGlkYXRlUm9vdFBhdGhTdHJpbmciLCJwYXJlbnRQYXRoIiwiZ2V0Um9vdCIsImRhdGFiYXNlUHJvcCIsImRhdGFiYXNlIiwidHJhbnNhY3Rpb25VcGRhdGUiLCJhcHBseUxvY2FsbHkiLCJ2YWxpZGF0ZUJvb2xlYW4iLCJzdGFydFRyYW5zYWN0aW9uIiwic2V0UHJpb3JpdHkiLCJ0aGVubmFibGVQdXNoUmVmIiwicHVzaFJlZiIsIlRyYW5zYWN0aW9uU3RhdHVzIiwiVHJlZU5vZGUiLCJjaGlsZENvdW50IiwiVHJlZSIsInBhcmVudF8iLCJzdWJUcmVlIiwicGF0aE9iaiIsInVwZGF0ZVBhcmVudHNfIiwiZm9yRWFjaERlc2NlbmRhbnQiLCJpbmNsdWRlU2VsZiIsImNoaWxkcmVuRmlyc3QiLCJmb3JFYWNoQW5jZXN0b3IiLCJmb3JFYWNoSW1tZWRpYXRlRGVzY2VuZGFudFdpdGhWYWx1ZSIsInVwZGF0ZUNoaWxkXyIsImNoaWxkRW1wdHkiLCJjaGlsZEV4aXN0cyIsIk1BWF9UUkFOU0FDVElPTl9SRVRSSUVTXyIsInRyYW5zYWN0aW9uUXVldWVUcmVlXyIsInZhbHVlQ2FsbGJhY2siLCJ3YXRjaFJlZiIsInJldHJ5Q291bnQiLCJ1bndhdGNoZXIiLCJhYm9ydFJlYXNvbiIsImN1cnJlbnRXcml0ZUlkIiwiY3VycmVudElucHV0U25hcHNob3QiLCJjdXJyZW50T3V0cHV0U25hcHNob3RSYXciLCJjdXJyZW50T3V0cHV0U25hcHNob3RSZXNvbHZlZCIsImN1cnJlbnRTdGF0ZSIsImdldExhdGVzdFN0YXRlXyIsIlJVTiIsInF1ZXVlTm9kZSIsIm5vZGVRdWV1ZSIsInByaW9yaXR5Rm9yTm9kZSIsInNlbmRSZWFkeVRyYW5zYWN0aW9uc18iLCJleGNsdWRlU2V0cyIsInBydW5lQ29tcGxldGVkVHJhbnNhY3Rpb25zQmVsb3dOb2RlXyIsImJ1aWxkVHJhbnNhY3Rpb25RdWV1ZV8iLCJzZW5kVHJhbnNhY3Rpb25RdWV1ZV8iLCJzZXRzVG9JZ25vcmUiLCJ0eG4iLCJsYXRlc3RTdGF0ZSIsInNuYXBUb1NlbmQiLCJsYXRlc3RIYXNoIiwiU0VOVCIsImRhdGFUb1NlbmQiLCJwYXRoVG9TZW5kIiwiQ09NUExFVEVEIiwiU0VOVF9ORUVEU19BQk9SVCIsIk5FRURTX0FCT1JUIiwicm9vdE1vc3RUcmFuc2FjdGlvbk5vZGUiLCJnZXRBbmNlc3RvclRyYW5zYWN0aW9uTm9kZV8iLCJyZXJ1blRyYW5zYWN0aW9uUXVldWVfIiwiYWJvcnRUcmFuc2FjdGlvbiIsImN1cnJlbnROb2RlIiwibmV3RGF0YU5vZGUiLCJvbGRXcml0ZUlkIiwibmV3Tm9kZVJlc29sdmVkIiwibGFzdElucHV0IiwidHJhbnNhY3Rpb25Ob2RlIiwidHJhbnNhY3Rpb25RdWV1ZSIsImFnZ3JlZ2F0ZVRyYW5zYWN0aW9uUXVldWVzRm9yTm9kZV8iLCJhYm9ydFRyYW5zYWN0aW9uc09uTm9kZV8iLCJsYXN0U2VudCIsIl9zdGF0aWNJbnN0YW5jZSIsIlJlcG9NYW5hZ2VyIiwicmVwb3NfIiwidXNlUmVzdENsaWVudF8iLCJkYlVybCIsImRhdGFiYXNlRnJvbUFwcCIsImNyZWF0ZVJlcG8iLCJkZWxldGVSZXBvIiwiYXBwUmVwb3MiLCJEYXRhYmFzZUludGVybmFscyIsImNoZWNrRGVsZXRlZF8iLCJyZWZGcm9tVVJMIiwiYXBpTmFtZSIsInBhcnNlZFVSTCIsImdvT2ZmbGluZSIsImdvT25saW5lIiwiU2VydmVyVmFsdWUiLCJUSU1FU1RBTVAiLCIuc3YiLCJmb3JjZUxvbmdQb2xsaW5nIiwiZm9yY2VXZWJTb2NrZXRzIiwic2V0U2VjdXJpdHlEZWJ1Z0NhbGxiYWNrIiwiaW50ZXJjZXB0U2VydmVyRGF0YSIsIkRhdGFDb25uZWN0aW9uIiwic2ltcGxlTGlzdGVuIiwiZWNobyIsIm9uRWNobyIsIlJlYWxUaW1lQ29ubmVjdGlvbiIsIkNvbm5lY3Rpb25UYXJnZXQiLCJURVNUX0FDQ0VTUyIsImhpamFja0hhc2giLCJuZXdIYXNoIiwib2xkUHV0Iiwib3B0X29uQ29tcGxldGUiLCJvcHRfaGFzaCIsImxpc3RlbnMiLCJmaXJlYmFzZVJlZiIsInJlZ2lzdGVyRGF0YWJhc2UiLCJ1bnVzZWQiLCJzZXRMb2dMZXZlbCIsImluc3RhbmNlcyIsImRlZmF1bHRMb2dMZXZlbCIsIklORk8iLCJkZWZhdWx0TG9nSGFuZGxlciIsImxvZ1R5cGUiLCJ0b0lTT1N0cmluZyIsImluZm8iLCJXQVJOIiwiRVJST1IiLCJfbG9nTGV2ZWwiLCJfbG9nSGFuZGxlciIsImRlYnVnIiwiaW5zdCIsImRhdGFiYXNlVVJMIiwicHJvamVjdElkIiwic3RvcmFnZUJ1Y2tldCIsIm1lc3NhZ2luZ1NlbmRlcklkIiwiRmly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YSxFQUFBeGEsR0FBQTlQLFVBQUE4UCxHQUVBckssS0FBQTg3SSxZQUFBbGhKLE1BQUFvRixLQUFBLENBQUFBLEtBQUFza0csRUFBQXEzQyxNQUFBOWdKLE9BQUFncUIsS0FFQTYrRSxFQUFBOXFHLFVBQUFvQixNQUFBLFdBRUEsSUFEQSxJQUFBNnFCLEVBQUEsR0FDQXhhLEVBQUEsRUFBd0JBLEVBQUE5UCxVQUFBQyxPQUF1QjZQLElBQy9Dd2EsRUFBQXhhLEdBQUE5UCxVQUFBOFAsR0FFQXJLLEtBQUE4N0ksWUFBQWxoSixNQUFBb0YsS0FBQSxDQUFBQSxLQUFBc2tHLEVBQUFzM0MsT0FBQS9nSixPQUFBZ3FCLEtBRUE2K0UsRUF0RkE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUdBLFNBQUF5M0MsRUFBQWptSCxHQUNBa21ILEVBQUF0d0ksUUFBQSxTQUFBa3hJLEdBQ0FBLEVBQUEzM0MsU0FBQW52RSxpSUMxTEEsSUFBTW5nQixFQUFTLENBQ2I0a0YsT0FBUSwwQ0FDUkUsV0FBWSx5Q0FDWm9pRCxZQUFhLGdEQUNiQyxVQUFXLHlCQUNYQyxjQUFlLHFDQUNmQyxrQkFBbUIsZ0JBWU5DLEVBUmIsU0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OzRGQUFjcC9FLENBQUFqOUQsS0FBQXE4SSxHQUNaMzJILElBQVNLLGNBQWNoUixHQUN2Qi9VLEtBQUtxMEIsS0FBTzNPLElBQVMyTyxPQUNyQnIwQixLQUFLcTBJLFNBQVczdUgsSUFBUzJ1SCxnQ0NUN0JpSSxJQUFTN2dKLE9BQU9rdEIsRUFBQTd0QixFQUFBZSxjQUFDd2MsRUFBQSxFQUFELEtBQWlCc1EsRUFBQTd0QixFQUFBZSxjQUFDa2hFLEVBQUEsRUFBRCxDQUFLcjNDLFNBQVUsSUFBSTIySCxLQUFrQ3pnSixTQUFTc2pGLGVBQWUiLCJmaWxlIjoiZ2FtZXMvYmFsbHMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTU3KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnbG9kYXNoLmlzZnVuY3Rpb24nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJzsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvdjQuMC4wLWFscGhhLjQvanMvc3JjL21vZGFsLmpzI0w0MzYtTDQ0M1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsYmFyV2lkdGgoKSB7XG4gIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsgLy8gLm1vZGFsLXNjcm9sbGJhci1tZWFzdXJlIHN0eWxlcyAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi92NC4wLjAtYWxwaGEuNC9zY3NzL19tb2RhbC5zY3NzI0wxMDYtTDExM1xuXG4gIHNjcm9sbERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLmhlaWdodCA9ICc1MHB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gIHJldHVybiBzY3JvbGxiYXJXaWR0aDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRTY3JvbGxiYXJXaWR0aChwYWRkaW5nKSB7XG4gIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZyA+IDAgPyBwYWRkaW5nICsgXCJweFwiIDogbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0JvZHlPdmVyZmxvd2luZygpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPCB3aW5kb3cuaW5uZXJXaWR0aDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcmlnaW5hbEJvZHlQYWRkaW5nKCkge1xuICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5LCBudWxsKTtcbiAgcmV0dXJuIHBhcnNlSW50KHN0eWxlICYmIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29uZGl0aW9uYWxseVVwZGF0ZVNjcm9sbGJhcigpIHtcbiAgdmFyIHNjcm9sbGJhcldpZHRoID0gZ2V0U2Nyb2xsYmFyV2lkdGgoKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvdjQuMC4wLWFscGhhLjYvanMvc3JjL21vZGFsLmpzI0w0MzNcblxuICB2YXIgZml4ZWRDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcCcpWzBdO1xuICB2YXIgYm9keVBhZGRpbmcgPSBmaXhlZENvbnRlbnQgPyBwYXJzZUludChmaXhlZENvbnRlbnQuc3R5bGUucGFkZGluZ1JpZ2h0IHx8IDAsIDEwKSA6IDA7XG5cbiAgaWYgKGlzQm9keU92ZXJmbG93aW5nKCkpIHtcbiAgICBzZXRTY3JvbGxiYXJXaWR0aChib2R5UGFkZGluZyArIHNjcm9sbGJhcldpZHRoKTtcbiAgfVxufVxudmFyIGdsb2JhbENzc01vZHVsZTtcbmV4cG9ydCBmdW5jdGlvbiBzZXRHbG9iYWxDc3NNb2R1bGUoY3NzTW9kdWxlKSB7XG4gIGdsb2JhbENzc01vZHVsZSA9IGNzc01vZHVsZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb0Nzc01vZHVsZXMoY2xhc3NOYW1lLCBjc3NNb2R1bGUpIHtcbiAgaWYgKGNsYXNzTmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NOYW1lID0gJyc7XG4gIH1cblxuICBpZiAoY3NzTW9kdWxlID09PSB2b2lkIDApIHtcbiAgICBjc3NNb2R1bGUgPSBnbG9iYWxDc3NNb2R1bGU7XG4gIH1cblxuICBpZiAoIWNzc01vZHVsZSkgcmV0dXJuIGNsYXNzTmFtZTtcbiAgcmV0dXJuIGNsYXNzTmFtZS5zcGxpdCgnICcpLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjc3NNb2R1bGVbY10gfHwgYztcbiAgfSkuam9pbignICcpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBrZXkvdmFsdWUgcGFpcnMgZnJvbSBgb2JqYCB0aGF0IGFyZSBub3QgaW4gdGhlIGFycmF5IGBvbWl0S2V5c2AuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG9taXQob2JqLCBvbWl0S2V5cykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKG9taXRLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUmV0dXJucyBhIGZpbHRlcmVkIGNvcHkgb2YgYW4gb2JqZWN0IHdpdGggb25seSB0aGUgc3BlY2lmaWVkIGtleXMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBpY2sob2JqLCBrZXlzKSB7XG4gIHZhciBwaWNrS2V5cyA9IEFycmF5LmlzQXJyYXkoa2V5cykgPyBrZXlzIDogW2tleXNdO1xuICB2YXIgbGVuZ3RoID0gcGlja0tleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICBsZW5ndGggLT0gMTtcbiAgICBrZXkgPSBwaWNrS2V5c1tsZW5ndGhdO1xuICAgIHJlc3VsdFtrZXldID0gb2JqW2tleV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxudmFyIHdhcm5lZCA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm5PbmNlKG1lc3NhZ2UpIHtcbiAgaWYgKCF3YXJuZWRbbWVzc2FnZV0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH1cblxuICAgIHdhcm5lZFttZXNzYWdlXSA9IHRydWU7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGVkKHByb3BUeXBlLCBleHBsYW5hdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSAhPT0gbnVsbCAmJiB0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgd2Fybk9uY2UoXCJcXFwiXCIgKyBwcm9wTmFtZSArIFwiXFxcIiBwcm9wZXJ0eSBvZiBcXFwiXCIgKyBjb21wb25lbnROYW1lICsgXCJcXFwiIGhhcyBiZWVuIGRlcHJlY2F0ZWQuXFxuXCIgKyBleHBsYW5hdGlvbik7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbiA+IDMgPyBfbGVuIC0gMyA6IDApLCBfa2V5ID0gMzsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcmVzdFtfa2V5IC0gM10gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BUeXBlLmFwcGx5KHZvaWQgMCwgW3Byb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZV0uY29uY2F0KHJlc3QpKTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBET01FbGVtZW50KHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBFbGVtZW50KSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvcCBgJyArIHByb3BOYW1lICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AuIEV4cGVjdGVkIHByb3AgdG8gYmUgYW4gaW5zdGFuY2Ugb2YgRWxlbWVudC4gVmFsaWRhdGlvbiBmYWlsZWQuJyk7XG4gIH1cbn1cbmV4cG9ydCB2YXIgdGFyZ2V0UHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgRE9NRWxlbWVudCwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgY3VycmVudDogUHJvcFR5cGVzLmFueVxufSldKTtcbmV4cG9ydCB2YXIgdGFnUHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgJCR0eXBlb2Y6IFByb3BUeXBlcy5zeW1ib2wsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmNcbn0pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgJCR0eXBlb2Y6IFByb3BUeXBlcy5zeW1ib2wsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmNcbn0pXSkpXSk7XG4vKiBlc2xpbnQga2V5LXNwYWNpbmc6IFtcImVycm9yXCIsIHsgYWZ0ZXJDb2xvbjogdHJ1ZSwgYWxpZ246IFwidmFsdWVcIiB9XSAqL1xuLy8gVGhlc2UgYXJlIGFsbCBzZXR1cCB0byBtYXRjaCB3aGF0IGlzIGluIHRoZSBib290c3RyYXAgX3ZhcmlhYmxlcy5zY3NzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi92NC1kZXYvc2Nzcy9fdmFyaWFibGVzLnNjc3NcblxuZXhwb3J0IHZhciBUcmFuc2l0aW9uVGltZW91dHMgPSB7XG4gIEZhZGU6IDE1MCxcbiAgLy8gJHRyYW5zaXRpb24tZmFkZVxuICBDb2xsYXBzZTogMzUwLFxuICAvLyAkdHJhbnNpdGlvbi1jb2xsYXBzZVxuICBNb2RhbDogMzAwLFxuICAvLyAkbW9kYWwtdHJhbnNpdGlvblxuICBDYXJvdXNlbDogNjAwIC8vICRjYXJvdXNlbC10cmFuc2l0aW9uXG5cbn07IC8vIER1cGxpY2F0ZWQgVHJhbnNpdGlvbi5wcm9wVHlwZSBrZXlzIHRvIGVuc3VyZSB0aGF0IFJlYWN0c3RyYXAgYnVpbGRzXG4vLyBmb3IgZGlzdHJpYnV0aW9uIHByb3Blcmx5IGV4Y2x1ZGUgdGhlc2Uga2V5cyBmb3IgbmVzdGVkIGNoaWxkIEhUTUwgYXR0cmlidXRlc1xuLy8gc2luY2UgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBgIHJlbW92ZXMgcHJvcFR5cGVzIGluIHByb2R1Y3Rpb24gYnVpbGRzLlxuXG5leHBvcnQgdmFyIFRyYW5zaXRpb25Qcm9wVHlwZUtleXMgPSBbJ2luJywgJ21vdW50T25FbnRlcicsICd1bm1vdW50T25FeGl0JywgJ2FwcGVhcicsICdlbnRlcicsICdleGl0JywgJ3RpbWVvdXQnLCAnb25FbnRlcicsICdvbkVudGVyaW5nJywgJ29uRW50ZXJlZCcsICdvbkV4aXQnLCAnb25FeGl0aW5nJywgJ29uRXhpdGVkJ107XG5leHBvcnQgdmFyIFRyYW5zaXRpb25TdGF0dXNlcyA9IHtcbiAgRU5URVJJTkc6ICdlbnRlcmluZycsXG4gIEVOVEVSRUQ6ICdlbnRlcmVkJyxcbiAgRVhJVElORzogJ2V4aXRpbmcnLFxuICBFWElURUQ6ICdleGl0ZWQnXG59O1xuZXhwb3J0IHZhciBrZXlDb2RlcyA9IHtcbiAgZXNjOiAyNyxcbiAgc3BhY2U6IDMyLFxuICBlbnRlcjogMTMsXG4gIHRhYjogOSxcbiAgdXA6IDM4LFxuICBkb3duOiA0MCxcbiAgaG9tZTogMzYsXG4gIGVuZDogMzUsXG4gIG46IDc4LFxuICBwOiA4MFxufTtcbmV4cG9ydCB2YXIgUG9wcGVyUGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhY3RSZWZPYmoodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gJ2N1cnJlbnQnIGluIHRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRE9NRWxlbWVudHModGFyZ2V0KSB7XG4gIGlmIChpc1JlYWN0UmVmT2JqKHRhcmdldCkpIHtcbiAgICByZXR1cm4gdGFyZ2V0LmN1cnJlbnQ7XG4gIH1cblxuICBpZiAoaXNGdW5jdGlvbih0YXJnZXQpKSB7XG4gICAgcmV0dXJuIHRhcmdldCgpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnICYmIGNhblVzZURPTSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldCk7XG5cbiAgICBpZiAoIXNlbGVjdGlvbi5sZW5ndGgpIHtcbiAgICAgIHNlbGVjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjXCIgKyB0YXJnZXQpO1xuICAgIH1cblxuICAgIGlmICghc2VsZWN0aW9uLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHRhcmdldCAnXCIgKyB0YXJnZXQgKyBcIicgY291bGQgbm90IGJlIGlkZW50aWZpZWQgaW4gdGhlIGRvbSwgdGlwOiBjaGVjayBzcGVsbGluZ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZWN0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5T3JOb2RlTGlzdChlbHMpIHtcbiAgaWYgKGVscyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBBcnJheS5pc0FycmF5KGVscykgfHwgY2FuVXNlRE9NICYmIHR5cGVvZiBlbHMubGVuZ3RoID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIHZhciBlbHMgPSBmaW5kRE9NRWxlbWVudHModGFyZ2V0KTtcblxuICBpZiAoaXNBcnJheU9yTm9kZUxpc3QoZWxzKSkge1xuICAgIHJldHVybiBlbHNbMF07XG4gIH1cblxuICByZXR1cm4gZWxzO1xufVxuZXhwb3J0IHZhciBkZWZhdWx0VG9nZ2xlRXZlbnRzID0gWyd0b3VjaHN0YXJ0JywgJ2NsaWNrJ107XG5leHBvcnQgZnVuY3Rpb24gYWRkTXVsdGlwbGVFdmVudExpc3RlbmVycyhfZWxzLCBoYW5kbGVyLCBfZXZlbnRzLCB1c2VDYXB0dXJlKSB7XG4gIHZhciBlbHMgPSBfZWxzO1xuXG4gIGlmICghaXNBcnJheU9yTm9kZUxpc3QoZWxzKSkge1xuICAgIGVscyA9IFtlbHNdO1xuICB9XG5cbiAgdmFyIGV2ZW50cyA9IF9ldmVudHM7XG5cbiAgaWYgKHR5cGVvZiBldmVudHMgPT09ICdzdHJpbmcnKSB7XG4gICAgZXZlbnRzID0gZXZlbnRzLnNwbGl0KC9cXHMrLyk7XG4gIH1cblxuICBpZiAoIWlzQXJyYXlPck5vZGVMaXN0KGVscykgfHwgdHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicgfHwgIUFycmF5LmlzQXJyYXkoZXZlbnRzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlxcbiAgICAgIFRoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgRE9NIG5vZGUgb3IgYW4gYXJyYXkgb24gRE9NIG5vZGVzIG9yIE5vZGVMaXN0LlxcbiAgICAgIFRoZSBzZWNvbmQgbXVzdCBiZSBhIGZ1bmN0aW9uLlxcbiAgICAgIFRoZSB0aGlyZCBpcyBhIHN0cmluZyBvciBhbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgcmVwcmVzZW50cyBET00gZXZlbnRzXFxuICAgIFwiKTtcbiAgfVxuXG4gIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZXZlbnRzLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVscywgZnVuY3Rpb24gKGVsKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCB1c2VDYXB0dXJlKTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiByZW1vdmVFdmVudHMoKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChldmVudHMsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbHMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCB1c2VDYXB0dXJlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufVxuZXhwb3J0IHZhciBmb2N1c2FibGVFbGVtZW50cyA9IFsnYVtocmVmXScsICdhcmVhW2hyZWZdJywgJ2lucHV0Om5vdChbZGlzYWJsZWRdKTpub3QoW3R5cGU9aGlkZGVuXSknLCAnc2VsZWN0Om5vdChbZGlzYWJsZWRdKScsICd0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSknLCAnYnV0dG9uOm5vdChbZGlzYWJsZWRdKScsICdvYmplY3QnLCAnZW1iZWQnLCAnW3RhYmluZGV4XTpub3QoLm1vZGFsKScsICdhdWRpb1tjb250cm9sc10nLCAndmlkZW9bY29udHJvbHNdJywgJ1tjb250ZW50ZWRpdGFibGVdOm5vdChbY29udGVudGVkaXRhYmxlPVwiZmFsc2VcIl0pJ107IiwiaW1wb3J0IFN0eWxpcyBmcm9tICdzdHlsaXMvc3R5bGlzLm1pbic7XG5pbXBvcnQgX2luc2VydFJ1bGVQbHVnaW4gZnJvbSAnc3R5bGlzLXJ1bGUtc2hlZXQnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCwgY3JlYXRlQ29udGV4dCwgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCB7IGlzRWxlbWVudCwgaXNWYWxpZEVsZW1lbnRUeXBlLCBGb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnbWVtb2l6ZS1vbmUnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHZhbGlkQXR0ciBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcblxuLy8gXG5cbnZhciBpbnRlcmxlYXZlID0gKGZ1bmN0aW9uIChzdHJpbmdzLCBpbnRlcnBvbGF0aW9ucykge1xuICB2YXIgcmVzdWx0ID0gW3N0cmluZ3NbMF1dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpbnRlcnBvbGF0aW9ucy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgIHJlc3VsdC5wdXNoKGludGVycG9sYXRpb25zW2ldLCBzdHJpbmdzW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxudmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxuLy8gXG52YXIgaXNQbGFpbk9iamVjdCA9IChmdW5jdGlvbiAoeCkge1xuICByZXR1cm4gKHR5cGVvZiB4ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih4KSkgPT09ICdvYmplY3QnICYmIHguY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn0pO1xuXG4vLyBcbnZhciBFTVBUWV9BUlJBWSA9IE9iamVjdC5mcmVlemUoW10pO1xudmFyIEVNUFRZX09CSkVDVCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBcbmZ1bmN0aW9uIGlzRnVuY3Rpb24odGVzdCkge1xuICByZXR1cm4gdHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbic7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKHRhcmdldCkge1xuICByZXR1cm4gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyAmJiB0YXJnZXQgOiBmYWxzZSkgfHwgdGFyZ2V0LmRpc3BsYXlOYW1lIHx8IHRhcmdldC5uYW1lIHx8ICdDb21wb25lbnQnO1xufVxuXG4vLyBcbmZ1bmN0aW9uIGlzU3R5bGVkQ29tcG9uZW50KHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQuc3R5bGVkQ29tcG9uZW50SWQgPT09ICdzdHJpbmcnO1xufVxuXG4vLyBcblxudmFyIFNDX0FUVFIgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuU0NfQVRUUiB8fCAnZGF0YS1zdHlsZWQnO1xuXG52YXIgU0NfVkVSU0lPTl9BVFRSID0gJ2RhdGEtc3R5bGVkLXZlcnNpb24nO1xuXG52YXIgU0NfU1RSRUFNX0FUVFIgPSAnZGF0YS1zdHlsZWQtc3RyZWFtZWQnO1xuXG52YXIgSVNfQlJPV1NFUiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICdIVE1MRWxlbWVudCcgaW4gd2luZG93O1xuXG52YXIgRElTQUJMRV9TUEVFRFkgPSB0eXBlb2YgU0NfRElTQUJMRV9TUEVFRFkgPT09ICdib29sZWFuJyAmJiBTQ19ESVNBQkxFX1NQRUVEWSB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuXG4vLyBTaGFyZWQgZW1wdHkgZXhlY3V0aW9uIGNvbnRleHQgd2hlbiBnZW5lcmF0aW5nIHN0YXRpYyBzdHlsZXNcbnZhciBTVEFUSUNfRVhFQ1VUSU9OX0NPTlRFWFQgPSB7fTtcblxuLy8gXG5cblxuLyoqXG4gKiBQYXJzZSBlcnJvcnMubWQgYW5kIHR1cm4gaXQgaW50byBhIHNpbXBsZSBoYXNoIG9mIGNvZGU6IG1lc3NhZ2VcbiAqL1xudmFyIEVSUk9SUyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIFwiMVwiOiBcIkNhbm5vdCBjcmVhdGUgc3R5bGVkLWNvbXBvbmVudCBmb3IgY29tcG9uZW50OiAlcy5cXG5cXG5cIixcbiAgXCIyXCI6IFwiQ2FuJ3QgY29sbGVjdCBzdHlsZXMgb25jZSB5b3UndmUgY29uc3VtZWQgYSBgU2VydmVyU3R5bGVTaGVldGAncyBzdHlsZXMhIGBTZXJ2ZXJTdHlsZVNoZWV0YCBpcyBhIG9uZSBvZmYgaW5zdGFuY2UgZm9yIGVhY2ggc2VydmVyLXNpZGUgcmVuZGVyIGN5Y2xlLlxcblxcbi0gQXJlIHlvdSB0cnlpbmcgdG8gcmV1c2UgaXQgYWNyb3NzIHJlbmRlcnM/XFxuLSBBcmUgeW91IGFjY2lkZW50YWxseSBjYWxsaW5nIGNvbGxlY3RTdHlsZXMgdHdpY2U/XFxuXFxuXCIsXG4gIFwiM1wiOiBcIlN0cmVhbWluZyBTU1IgaXMgb25seSBzdXBwb3J0ZWQgaW4gYSBOb2RlLmpzIGVudmlyb25tZW50OyBQbGVhc2UgZG8gbm90IHRyeSB0byBjYWxsIHRoaXMgbWV0aG9kIGluIHRoZSBicm93c2VyLlxcblxcblwiLFxuICBcIjRcIjogXCJUaGUgYFN0eWxlU2hlZXRNYW5hZ2VyYCBleHBlY3RzIGEgdmFsaWQgdGFyZ2V0IG9yIHNoZWV0IHByb3AhXFxuXFxuLSBEb2VzIHRoaXMgZXJyb3Igb2NjdXIgb24gdGhlIGNsaWVudCBhbmQgaXMgeW91ciB0YXJnZXQgZmFsc3k/XFxuLSBEb2VzIHRoaXMgZXJyb3Igb2NjdXIgb24gdGhlIHNlcnZlciBhbmQgaXMgdGhlIHNoZWV0IGZhbHN5P1xcblxcblwiLFxuICBcIjVcIjogXCJUaGUgY2xvbmUgbWV0aG9kIGNhbm5vdCBiZSB1c2VkIG9uIHRoZSBjbGllbnQhXFxuXFxuLSBBcmUgeW91IHJ1bm5pbmcgaW4gYSBjbGllbnQtbGlrZSBlbnZpcm9ubWVudCBvbiB0aGUgc2VydmVyP1xcbi0gQXJlIHlvdSB0cnlpbmcgdG8gcnVuIFNTUiBvbiB0aGUgY2xpZW50P1xcblxcblwiLFxuICBcIjZcIjogXCJUcnlpbmcgdG8gaW5zZXJ0IGEgbmV3IHN0eWxlIHRhZywgYnV0IHRoZSBnaXZlbiBOb2RlIGlzIHVubW91bnRlZCFcXG5cXG4tIEFyZSB5b3UgdXNpbmcgYSBjdXN0b20gdGFyZ2V0IHRoYXQgaXNuJ3QgbW91bnRlZD9cXG4tIERvZXMgeW91ciBkb2N1bWVudCBub3QgaGF2ZSBhIHZhbGlkIGhlYWQgZWxlbWVudD9cXG4tIEhhdmUgeW91IGFjY2lkZW50YWxseSByZW1vdmVkIGEgc3R5bGUgdGFnIG1hbnVhbGx5P1xcblxcblwiLFxuICBcIjdcIjogXCJUaGVtZVByb3ZpZGVyOiBQbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgXFxcInRoZW1lXFxcIiBwcm9wIGZ1bmN0aW9uLCBlLmcuXFxuXFxuYGBganNcXG50aGVtZT17KCkgPT4gKHt9KX1cXG5gYGBcXG5cXG5cIixcbiAgXCI4XCI6IFwiVGhlbWVQcm92aWRlcjogUGxlYXNlIG1ha2UgeW91ciBcXFwidGhlbWVcXFwiIHByb3AgYW4gb2JqZWN0LlxcblxcblwiLFxuICBcIjlcIjogXCJNaXNzaW5nIGRvY3VtZW50IGA8aGVhZD5gXFxuXFxuXCIsXG4gIFwiMTBcIjogXCJDYW5ub3QgZmluZCBhIFN0eWxlU2hlZXQgaW5zdGFuY2UuIFVzdWFsbHkgdGhpcyBoYXBwZW5zIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSBjb3BpZXMgb2Ygc3R5bGVkLWNvbXBvbmVudHMgbG9hZGVkIGF0IG9uY2UuIENoZWNrIG91dCB0aGlzIGlzc3VlIGZvciBob3cgdG8gdHJvdWJsZXNob290IGFuZCBmaXggdGhlIGNvbW1vbiBjYXNlcyB3aGVyZSB0aGlzIHNpdHVhdGlvbiBjYW4gaGFwcGVuOiBodHRwczovL2dpdGh1Yi5jb20vc3R5bGVkLWNvbXBvbmVudHMvc3R5bGVkLWNvbXBvbmVudHMvaXNzdWVzLzE5NDEjaXNzdWVjb21tZW50LTQxNzg2MjAyMVxcblxcblwiLFxuICBcIjExXCI6IFwiX1RoaXMgZXJyb3Igd2FzIHJlcGxhY2VkIHdpdGggYSBkZXYtdGltZSB3YXJuaW5nLCBpdCB3aWxsIGJlIGRlbGV0ZWQgZm9yIHY0IGZpbmFsLl8gW2NyZWF0ZUdsb2JhbFN0eWxlXSByZWNlaXZlZCBjaGlsZHJlbiB3aGljaCB3aWxsIG5vdCBiZSByZW5kZXJlZC4gUGxlYXNlIHVzZSB0aGUgY29tcG9uZW50IHdpdGhvdXQgcGFzc2luZyBjaGlsZHJlbiBlbGVtZW50cy5cXG5cXG5cIixcbiAgXCIxMlwiOiBcIkl0IHNlZW1zIHlvdSBhcmUgaW50ZXJwb2xhdGluZyBhIGtleWZyYW1lIGRlY2xhcmF0aW9uICglcykgaW50byBhbiB1bnRhZ2dlZCBzdHJpbmcuIFRoaXMgd2FzIHN1cHBvcnRlZCBpbiBzdHlsZWQtY29tcG9uZW50cyB2MywgYnV0IGlzIG5vdCBsb25nZXIgc3VwcG9ydGVkIGluIHY0IGFzIGtleWZyYW1lcyBhcmUgbm93IGluamVjdGVkIG9uLWRlbWFuZC4gUGxlYXNlIHdyYXAgeW91ciBzdHJpbmcgaW4gdGhlIGNzc1xcXFxgXFxcXGAgaGVscGVyIChzZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYXBpI2NzcyksIHdoaWNoIGVuc3VyZXMgdGhlIHN0eWxlcyBhcmUgaW5qZWN0ZWQgY29ycmVjdGx5LlxcblxcblwiLFxuICBcIjEzXCI6IFwiJXMgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlxcblwiXG59IDoge307XG5cbi8qKlxuICogc3VwZXIgYmFzaWMgdmVyc2lvbiBvZiBzcHJpbnRmXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdCgpIHtcbiAgdmFyIGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07XG4gIHZhciBiID0gW107XG5cbiAgZm9yICh2YXIgYyA9IDEsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGMgPCBsZW47IGMgKz0gMSkge1xuICAgIGIucHVzaChhcmd1bWVudHMubGVuZ3RoIDw9IGMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbY10pO1xuICB9XG5cbiAgYi5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgYSA9IGEucmVwbGFjZSgvJVthLXpdLywgZCk7XG4gIH0pO1xuXG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBlcnJvciBmaWxlIG91dCBvZiBlcnJvcnMubWQgZm9yIGRldmVsb3BtZW50IGFuZCBhIHNpbXBsZSB3ZWIgbGluayB0byB0aGUgZnVsbCBlcnJvcnNcbiAqIGluIHByb2R1Y3Rpb24gbW9kZS5cbiAqL1xuXG52YXIgU3R5bGVkQ29tcG9uZW50c0Vycm9yID0gZnVuY3Rpb24gKF9FcnJvcikge1xuICBpbmhlcml0cyhTdHlsZWRDb21wb25lbnRzRXJyb3IsIF9FcnJvcik7XG5cbiAgZnVuY3Rpb24gU3R5bGVkQ29tcG9uZW50c0Vycm9yKGNvZGUpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdHlsZWRDb21wb25lbnRzRXJyb3IpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGludGVycG9sYXRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FcnJvci5jYWxsKHRoaXMsICdBbiBlcnJvciBvY2N1cnJlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9ibG9iL21hc3Rlci9zcmMvdXRpbHMvZXJyb3JzLm1kIycgKyBjb2RlICsgJyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4gJyArIChpbnRlcnBvbGF0aW9ucyA/ICdBZGRpdGlvbmFsIGFyZ3VtZW50czogJyArIGludGVycG9sYXRpb25zLmpvaW4oJywgJykgOiAnJykpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXJyb3IuY2FsbCh0aGlzLCBmb3JtYXQuYXBwbHkodW5kZWZpbmVkLCBbRVJST1JTW2NvZGVdXS5jb25jYXQoaW50ZXJwb2xhdGlvbnMpKS50cmltKCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMpO1xuICB9XG5cbiAgcmV0dXJuIFN0eWxlZENvbXBvbmVudHNFcnJvcjtcbn0oRXJyb3IpO1xuXG4vLyBcbnZhciBTQ19DT01QT05FTlRfSUQgPSAvXlteXFxTXFxuXSo/XFwvXFwqIHNjLWNvbXBvbmVudC1pZDpcXHMqKFxcUyspXFxzK1xcKlxcLy9nbTtcblxudmFyIGV4dHJhY3RDb21wcyA9IChmdW5jdGlvbiAobWF5YmVDU1MpIHtcbiAgdmFyIGNzcyA9ICcnICsgKG1heWJlQ1NTIHx8ICcnKTsgLy8gRGVmaW5pdGVseSBhIHN0cmluZywgYW5kIGEgY2xvbmVcbiAgdmFyIGV4aXN0aW5nQ29tcG9uZW50cyA9IFtdO1xuICBjc3MucmVwbGFjZShTQ19DT01QT05FTlRfSUQsIGZ1bmN0aW9uIChtYXRjaCwgY29tcG9uZW50SWQsIG1hdGNoSW5kZXgpIHtcbiAgICBleGlzdGluZ0NvbXBvbmVudHMucHVzaCh7IGNvbXBvbmVudElkOiBjb21wb25lbnRJZCwgbWF0Y2hJbmRleDogbWF0Y2hJbmRleCB9KTtcbiAgICByZXR1cm4gbWF0Y2g7XG4gIH0pO1xuICByZXR1cm4gZXhpc3RpbmdDb21wb25lbnRzLm1hcChmdW5jdGlvbiAoX3JlZiwgaSkge1xuICAgIHZhciBjb21wb25lbnRJZCA9IF9yZWYuY29tcG9uZW50SWQsXG4gICAgICAgIG1hdGNoSW5kZXggPSBfcmVmLm1hdGNoSW5kZXg7XG5cbiAgICB2YXIgbmV4dENvbXAgPSBleGlzdGluZ0NvbXBvbmVudHNbaSArIDFdO1xuICAgIHZhciBjc3NGcm9tRE9NID0gbmV4dENvbXAgPyBjc3Muc2xpY2UobWF0Y2hJbmRleCwgbmV4dENvbXAubWF0Y2hJbmRleCkgOiBjc3Muc2xpY2UobWF0Y2hJbmRleCk7XG4gICAgcmV0dXJuIHsgY29tcG9uZW50SWQ6IGNvbXBvbmVudElkLCBjc3NGcm9tRE9NOiBjc3NGcm9tRE9NIH07XG4gIH0pO1xufSk7XG5cbi8vIFxuXG52YXIgQ09NTUVOVF9SRUdFWCA9IC9eXFxzKlxcL1xcLy4qJC9nbTtcblxuLy8gTk9URTogVGhpcyBzdHlsaXMgaW5zdGFuY2UgaXMgb25seSB1c2VkIHRvIHNwbGl0IHJ1bGVzIGZyb20gU1NSJ2Qgc3R5bGUgdGFnc1xudmFyIHN0eWxpc1NwbGl0dGVyID0gbmV3IFN0eWxpcyh7XG4gIGdsb2JhbDogZmFsc2UsXG4gIGNhc2NhZGU6IHRydWUsXG4gIGtleWZyYW1lOiBmYWxzZSxcbiAgcHJlZml4OiBmYWxzZSxcbiAgY29tcHJlc3M6IGZhbHNlLFxuICBzZW1pY29sb246IHRydWVcbn0pO1xuXG52YXIgc3R5bGlzID0gbmV3IFN0eWxpcyh7XG4gIGdsb2JhbDogZmFsc2UsXG4gIGNhc2NhZGU6IHRydWUsXG4gIGtleWZyYW1lOiBmYWxzZSxcbiAgcHJlZml4OiB0cnVlLFxuICBjb21wcmVzczogZmFsc2UsXG4gIHNlbWljb2xvbjogZmFsc2UgLy8gTk9URTogVGhpcyBtZWFucyBcImF1dG9jb21wbGV0ZSBtaXNzaW5nIHNlbWljb2xvbnNcIlxufSk7XG5cbi8vIFdyYXAgYGluc2VydFJ1bGVQbHVnaW4gdG8gYnVpbGQgYSBsaXN0IG9mIHJ1bGVzLFxuLy8gYW5kIHRoZW4gbWFrZSBvdXIgb3duIHBsdWdpbiB0byByZXR1cm4gdGhlIHJ1bGVzLiBUaGlzXG4vLyBtYWtlcyBpdCBlYXNpZXIgdG8gaG9vayBpbnRvIHRoZSBleGlzdGluZyBTU1IgYXJjaGl0ZWN0dXJlXG5cbnZhciBwYXJzaW5nUnVsZXMgPSBbXTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG52YXIgcmV0dXJuUnVsZXNQbHVnaW4gPSBmdW5jdGlvbiByZXR1cm5SdWxlc1BsdWdpbihjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSAtMikge1xuICAgIHZhciBwYXJzZWRSdWxlcyA9IHBhcnNpbmdSdWxlcztcbiAgICBwYXJzaW5nUnVsZXMgPSBbXTtcbiAgICByZXR1cm4gcGFyc2VkUnVsZXM7XG4gIH1cbn07XG5cbnZhciBwYXJzZVJ1bGVzUGx1Z2luID0gX2luc2VydFJ1bGVQbHVnaW4oZnVuY3Rpb24gKHJ1bGUpIHtcbiAgcGFyc2luZ1J1bGVzLnB1c2gocnVsZSk7XG59KTtcblxudmFyIF9jb21wb25lbnRJZCA9IHZvaWQgMDtcbnZhciBfc2VsZWN0b3IgPSB2b2lkIDA7XG52YXIgX3NlbGVjdG9yUmVnZXhwID0gdm9pZCAwO1xuXG52YXIgc2VsZlJlZmVyZW5jZVJlcGxhY2VyID0gZnVuY3Rpb24gc2VsZlJlZmVyZW5jZVJlcGxhY2VyKG1hdGNoLCBvZmZzZXQsIHN0cmluZykge1xuICBpZiAoXG4gIC8vIHRoZSBmaXJzdCBzZWxmLXJlZiBpcyBhbHdheXMgdW50b3VjaGVkXG4gIG9mZnNldCA+IDAgJiZcbiAgLy8gdGhlcmUgc2hvdWxkIGJlIGF0IGxlYXN0IHR3byBzZWxmLXJlZnMgdG8gZG8gYSByZXBsYWNlbWVudCAoLmIgPiAuYilcbiAgc3RyaW5nLnNsaWNlKDAsIG9mZnNldCkuaW5kZXhPZihfc2VsZWN0b3IpICE9PSAtMSAmJlxuICAvLyBubyBjb25zZWN1dGl2ZSBzZWxmIHJlZnMgKC5iLmIpOyB0aGF0IGlzIGEgcHJlY2VkZW5jZSBib29zdCBhbmQgdHJlYXRlZCBkaWZmZXJlbnRseVxuICBzdHJpbmcuc2xpY2Uob2Zmc2V0IC0gX3NlbGVjdG9yLmxlbmd0aCwgb2Zmc2V0KSAhPT0gX3NlbGVjdG9yKSB7XG4gICAgcmV0dXJuICcuJyArIF9jb21wb25lbnRJZDtcbiAgfVxuXG4gIHJldHVybiBtYXRjaDtcbn07XG5cbi8qKlxuICogV2hlbiB3cml0aW5nIGEgc3R5bGUgbGlrZVxuICpcbiAqICYgKyAmIHtcbiAqICAgY29sb3I6IHJlZDtcbiAqIH1cbiAqXG4gKiBUaGUgc2Vjb25kIGFtcGVyc2FuZCBzaG91bGQgYmUgYSByZWZlcmVuY2UgdG8gdGhlIHN0YXRpYyBjb21wb25lbnQgY2xhc3MuIHN0eWxpc1xuICogaGFzIG5vIGtub3dsZWRnZSBvZiBzdGF0aWMgY2xhc3Mgc28gd2UgaGF2ZSB0byBpbnRlbGxpZ2VudGx5IHJlcGxhY2UgdGhlIGJhc2Ugc2VsZWN0b3IuXG4gKi9cbnZhciBzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4gPSBmdW5jdGlvbiBzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4oY29udGV4dCwgXywgc2VsZWN0b3JzKSB7XG4gIGlmIChjb250ZXh0ID09PSAyICYmIHNlbGVjdG9ycy5sZW5ndGggJiYgc2VsZWN0b3JzWzBdLmxhc3RJbmRleE9mKF9zZWxlY3RvcikgPiAwKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgc2VsZWN0b3JzWzBdID0gc2VsZWN0b3JzWzBdLnJlcGxhY2UoX3NlbGVjdG9yUmVnZXhwLCBzZWxmUmVmZXJlbmNlUmVwbGFjZXIpO1xuICB9XG59O1xuXG5zdHlsaXMudXNlKFtzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4sIHBhcnNlUnVsZXNQbHVnaW4sIHJldHVyblJ1bGVzUGx1Z2luXSk7XG5zdHlsaXNTcGxpdHRlci51c2UoW3BhcnNlUnVsZXNQbHVnaW4sIHJldHVyblJ1bGVzUGx1Z2luXSk7XG5cbnZhciBzcGxpdEJ5UnVsZXMgPSBmdW5jdGlvbiBzcGxpdEJ5UnVsZXMoY3NzKSB7XG4gIHJldHVybiBzdHlsaXNTcGxpdHRlcignJywgY3NzKTtcbn07XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVJ1bGVzKHJ1bGVzLCBzZWxlY3RvciwgcHJlZml4KSB7XG4gIHZhciBjb21wb25lbnRJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJyYnO1xuXG4gIHZhciBmbGF0Q1NTID0gcnVsZXMuam9pbignJykucmVwbGFjZShDT01NRU5UX1JFR0VYLCAnJyk7IC8vIHJlcGxhY2UgSlMgY29tbWVudHNcblxuICB2YXIgY3NzU3RyID0gc2VsZWN0b3IgJiYgcHJlZml4ID8gcHJlZml4ICsgJyAnICsgc2VsZWN0b3IgKyAnIHsgJyArIGZsYXRDU1MgKyAnIH0nIDogZmxhdENTUztcblxuICAvLyBzdHlsaXMgaGFzIG5vIGNvbmNlcHQgb2Ygc3RhdGUgdG8gYmUgcGFzc2VkIHRvIHBsdWdpbnNcbiAgLy8gYnV0IHNpbmNlIEpTIGlzIHNpbmdsZT10aHJlYWRlZCwgd2UgY2FuIHJlbHkgb24gdGhhdCB0byBlbnN1cmVcbiAgLy8gdGhlc2UgcHJvcGVydGllcyBzdGF5IGluIHN5bmMgd2l0aCB0aGUgY3VycmVudCBzdHlsaXMgcnVuXG4gIF9jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuICBfc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgX3NlbGVjdG9yUmVnZXhwID0gbmV3IFJlZ0V4cCgnXFxcXCcgKyBfc2VsZWN0b3IgKyAnXFxcXGInLCAnZycpO1xuXG4gIHJldHVybiBzdHlsaXMocHJlZml4IHx8ICFzZWxlY3RvciA/ICcnIDogc2VsZWN0b3IsIGNzc1N0cik7XG59XG5cbi8vIFxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlLCBuby11bmRlZiAqL1xuXG52YXIgZ2V0Tm9uY2UgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbn0pO1xuXG4vLyBcbi8qIFRoZXNlIGFyZSBoZWxwZXJzIGZvciB0aGUgU3R5bGVUYWdzIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGluamVjdGVkXG4gKiBydWxlIG5hbWVzIGZvciBlYWNoIChjb21wb25lbnQpIElEIHRoYXQgdGhleSdyZSBrZWVwaW5nIHRyYWNrIG9mLlxuICogVGhleSdyZSBjcnVjaWFsIGZvciBkZXRlY3Rpbmcgd2hldGhlciBhIG5hbWUgaGFzIGFscmVhZHkgYmVlblxuICogaW5qZWN0ZWQuXG4gKiAoVGhpcyBleGNsdWRlcyByZWh5ZHJhdGVkIG5hbWVzKSAqL1xuXG4vKiBhZGRzIGEgbmV3IElEOm5hbWUgcGFpcmluZyB0byBhIG5hbWVzIGRpY3Rpb25hcnkgKi9cbnZhciBhZGROYW1lRm9ySWQgPSBmdW5jdGlvbiBhZGROYW1lRm9ySWQobmFtZXMsIGlkLCBuYW1lKSB7XG4gIGlmIChuYW1lKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdmFyIG5hbWVzRm9ySWQgPSBuYW1lc1tpZF0gfHwgKG5hbWVzW2lkXSA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgIG5hbWVzRm9ySWRbbmFtZV0gPSB0cnVlO1xuICB9XG59O1xuXG4vKiByZXNldHMgYW4gSUQgZW50aXJlbHkgYnkgb3ZlcndyaXRpbmcgaXQgaW4gdGhlIGRpY3Rpb25hcnkgKi9cbnZhciByZXNldElkTmFtZXMgPSBmdW5jdGlvbiByZXNldElkTmFtZXMobmFtZXMsIGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBuYW1lc1tpZF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xufTtcblxuLyogZmFjdG9yeSBmb3IgYSBuYW1lcyBkaWN0aW9uYXJ5IGNoZWNraW5nIHRoZSBleGlzdGFuY2Ugb2YgYW4gSUQ6bmFtZSBwYWlyaW5nICovXG52YXIgaGFzTmFtZUZvcklkID0gZnVuY3Rpb24gaGFzTmFtZUZvcklkKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaWQsIG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZXNbaWRdICE9PSB1bmRlZmluZWQgJiYgbmFtZXNbaWRdW25hbWVdO1xuICB9O1xufTtcblxuLyogc3RyaW5naWZpZXMgbmFtZXMgZm9yIHRoZSBodG1sL2VsZW1lbnQgb3V0cHV0ICovXG52YXIgc3RyaW5naWZ5TmFtZXMgPSBmdW5jdGlvbiBzdHJpbmdpZnlOYW1lcyhuYW1lcykge1xuICB2YXIgc3RyID0gJyc7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yICh2YXIgaWQgaW4gbmFtZXMpIHtcbiAgICBzdHIgKz0gT2JqZWN0LmtleXMobmFtZXNbaWRdKS5qb2luKCcgJykgKyAnICc7XG4gIH1cbiAgcmV0dXJuIHN0ci50cmltKCk7XG59O1xuXG4vKiBjbG9uZXMgdGhlIG5lc3RlZCBuYW1lcyBkaWN0aW9uYXJ5ICovXG52YXIgY2xvbmVOYW1lcyA9IGZ1bmN0aW9uIGNsb25lTmFtZXMobmFtZXMpIHtcbiAgdmFyIGNsb25lID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICBmb3IgKHZhciBpZCBpbiBuYW1lcykge1xuICAgIGNsb25lW2lkXSA9IF9leHRlbmRzKHt9LCBuYW1lc1tpZF0pO1xuICB9XG4gIHJldHVybiBjbG9uZTtcbn07XG5cbi8vIFxuXG4vKiBUaGVzZSBhcmUgaGVscGVycyB0aGF0IGRlYWwgd2l0aCB0aGUgaW5zZXJ0UnVsZSAoYWthIHNwZWVkeSkgQVBJXG4gKiBUaGV5IGFyZSB1c2VkIGluIHRoZSBTdHlsZVRhZ3MgYW5kIHNwZWNpZmljYWxseSB0aGUgc3BlZWR5IHRhZ1xuICovXG5cbi8qIHJldHJpZXZlIGEgc2hlZXQgZm9yIGEgZ2l2ZW4gc3R5bGUgdGFnICovXG52YXIgc2hlZXRGb3JUYWcgPSBmdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICBpZiAodGFnLnNoZWV0KSByZXR1cm4gdGFnLnNoZWV0O1xuXG4gIC8qIEZpcmVmb3ggcXVpcmsgcmVxdWlyZXMgdXMgdG8gc3RlcCB0aHJvdWdoIGFsbCBzdHlsZXNoZWV0cyB0byBmaW5kIG9uZSBvd25lZCBieSB0aGUgZ2l2ZW4gdGFnICovXG4gIHZhciBzaXplID0gZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkgKz0gMSkge1xuICAgIHZhciBzaGVldCA9IGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoc2hlZXQub3duZXJOb2RlID09PSB0YWcpIHJldHVybiBzaGVldDtcbiAgfVxuXG4gIC8qIHdlIHNob3VsZCBhbHdheXMgYmUgYWJsZSB0byBmaW5kIGEgdGFnICovXG4gIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMTApO1xufTtcblxuLyogaW5zZXJ0IGEgcnVsZSBzYWZlbHkgYW5kIHJldHVybiB3aGV0aGVyIGl0IHdhcyBhY3R1YWxseSBpbmplY3RlZCAqL1xudmFyIHNhZmVJbnNlcnRSdWxlID0gZnVuY3Rpb24gc2FmZUluc2VydFJ1bGUoc2hlZXQsIGNzc1J1bGUsIGluZGV4KSB7XG4gIC8qIGFib3J0IGVhcmx5IGlmIGNzc1J1bGUgc3RyaW5nIGlzIGZhbHN5ICovXG4gIGlmICghY3NzUnVsZSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBtYXhJbmRleCA9IHNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcblxuICB0cnkge1xuICAgIC8qIHVzZSBpbnNlcnRSdWxlIGFuZCBjYXAgcGFzc2VkIGluZGV4IHdpdGggbWF4SW5kZXggKG5vIG9mIGNzc1J1bGVzKSAqL1xuICAgIHNoZWV0Lmluc2VydFJ1bGUoY3NzUnVsZSwgaW5kZXggPD0gbWF4SW5kZXggPyBpbmRleCA6IG1heEluZGV4KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLyogYW55IGVycm9yIGluZGljYXRlcyBhbiBpbnZhbGlkIHJ1bGUgKi9cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qIGRlbGV0ZXMgYHNpemVgIHJ1bGVzIHN0YXJ0aW5nIGZyb20gYHJlbW92YWxJbmRleGAgKi9cbnZhciBkZWxldGVSdWxlcyA9IGZ1bmN0aW9uIGRlbGV0ZVJ1bGVzKHNoZWV0LCByZW1vdmFsSW5kZXgsIHNpemUpIHtcbiAgdmFyIGxvd2VyQm91bmQgPSByZW1vdmFsSW5kZXggLSBzaXplO1xuICBmb3IgKHZhciBpID0gcmVtb3ZhbEluZGV4OyBpID4gbG93ZXJCb3VuZDsgaSAtPSAxKSB7XG4gICAgc2hlZXQuZGVsZXRlUnVsZShpKTtcbiAgfVxufTtcblxuLy8gXG5cbi8qIHRoaXMgbWFya2VyIHNlcGFyYXRlcyBjb21wb25lbnQgc3R5bGVzIGFuZCBpcyBpbXBvcnRhbnQgZm9yIHJlaHlkcmF0aW9uICovXG52YXIgbWFrZVRleHRNYXJrZXIgPSBmdW5jdGlvbiBtYWtlVGV4dE1hcmtlcihpZCkge1xuICByZXR1cm4gJ1xcbi8qIHNjLWNvbXBvbmVudC1pZDogJyArIGlkICsgJyAqL1xcbic7XG59O1xuXG4vKiBhZGQgdXAgYWxsIG51bWJlcnMgaW4gYXJyYXkgdXAgdW50aWwgYW5kIGluY2x1ZGluZyB0aGUgaW5kZXggKi9cbnZhciBhZGRVcFVudGlsSW5kZXggPSBmdW5jdGlvbiBhZGRVcFVudGlsSW5kZXgoc2l6ZXMsIGluZGV4KSB7XG4gIHZhciB0b3RhbFVwVG9JbmRleCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IGluZGV4OyBpICs9IDEpIHtcbiAgICB0b3RhbFVwVG9JbmRleCArPSBzaXplc1tpXTtcbiAgfVxuXG4gIHJldHVybiB0b3RhbFVwVG9JbmRleDtcbn07XG5cbi8qIGNyZWF0ZSBhIG5ldyBzdHlsZSB0YWcgYWZ0ZXIgbGFzdEVsICovXG52YXIgbWFrZVN0eWxlVGFnID0gZnVuY3Rpb24gbWFrZVN0eWxlVGFnKHRhcmdldCwgdGFnRWwsIGluc2VydEJlZm9yZSkge1xuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBlbC5zZXRBdHRyaWJ1dGUoU0NfQVRUUiwgJycpO1xuICBlbC5zZXRBdHRyaWJ1dGUoU0NfVkVSU0lPTl9BVFRSLCBcIjQuMS4zXCIpO1xuXG4gIHZhciBub25jZSA9IGdldE5vbmNlKCk7XG4gIGlmIChub25jZSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cblxuICAvKiBXb3JrIGFyb3VuZCBpbnNlcnRSdWxlIHF1aXJrIGluIEVkZ2VIVE1MICovXG4gIGVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG5cbiAgaWYgKHRhcmdldCAmJiAhdGFnRWwpIHtcbiAgICAvKiBBcHBlbmQgdG8gdGFyZ2V0IHdoZW4gbm8gcHJldmlvdXMgZWxlbWVudCB3YXMgcGFzc2VkICovXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXRhZ0VsIHx8ICF0YXJnZXQgfHwgIXRhZ0VsLnBhcmVudE5vZGUpIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoNik7XG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IG5ldyBzdHlsZSB0YWcgYWZ0ZXIgdGhlIHByZXZpb3VzIG9uZSAqL1xuICAgIHRhZ0VsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCBpbnNlcnRCZWZvcmUgPyB0YWdFbCA6IHRhZ0VsLm5leHRTaWJsaW5nKTtcbiAgfVxuXG4gIHJldHVybiBlbDtcbn07XG5cbi8qIHRha2VzIGEgY3NzIGZhY3RvcnkgZnVuY3Rpb24gYW5kIG91dHB1dHMgYW4gaHRtbCBzdHlsZWQgdGFnIGZhY3RvcnkgKi9cbnZhciB3cmFwQXNIdG1sVGFnID0gZnVuY3Rpb24gd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYWRkaXRpb25hbEF0dHJzKSB7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICB2YXIgYXR0cnMgPSBbbm9uY2UgJiYgJ25vbmNlPVwiJyArIG5vbmNlICsgJ1wiJywgU0NfQVRUUiArICc9XCInICsgc3RyaW5naWZ5TmFtZXMobmFtZXMpICsgJ1wiJywgU0NfVkVSU0lPTl9BVFRSICsgJz1cIicgKyBcIjQuMS4zXCIgKyAnXCInLCBhZGRpdGlvbmFsQXR0cnNdO1xuXG4gICAgdmFyIGh0bWxBdHRyID0gYXR0cnMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcbiAgICByZXR1cm4gJzxzdHlsZSAnICsgaHRtbEF0dHIgKyAnPicgKyBjc3MoKSArICc8L3N0eWxlPic7XG4gIH07XG59O1xuXG4vKiB0YWtlcyBhIGNzcyBmYWN0b3J5IGZ1bmN0aW9uIGFuZCBvdXRwdXRzIGFuIGVsZW1lbnQgZmFjdG9yeSAqL1xudmFyIHdyYXBBc0VsZW1lbnQgPSBmdW5jdGlvbiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3BzO1xuXG4gICAgdmFyIHByb3BzID0gKF9wcm9wcyA9IHt9LCBfcHJvcHNbU0NfQVRUUl0gPSBzdHJpbmdpZnlOYW1lcyhuYW1lcyksIF9wcm9wc1tTQ19WRVJTSU9OX0FUVFJdID0gXCI0LjEuM1wiLCBfcHJvcHMpO1xuXG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHByb3BzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWRhbmdlclxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdzdHlsZScsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IGNzcygpIH0gfSkpO1xuICB9O1xufTtcblxudmFyIGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeSA9IGZ1bmN0aW9uIGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeShtYXJrZXJzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG1hcmtlcnMpO1xuICB9O1xufTtcblxuLyogc3BlZWR5IHRhZ3MgdXRpbGlzZSBpbnNlcnRSdWxlICovXG52YXIgbWFrZVNwZWVkeVRhZyA9IGZ1bmN0aW9uIG1ha2VTcGVlZHlUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpIHtcbiAgdmFyIG5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIG1hcmtlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc2l6ZXMgPSBbXTtcblxuICB2YXIgZXh0cmFjdEltcG9ydCA9IGdldEltcG9ydFJ1bGVUYWcgIT09IHVuZGVmaW5lZDtcbiAgLyogaW5kaWNhdGVzIHdoZXRoZXIgZ2V0SW1wb3J0UnVsZVRhZyB3YXMgY2FsbGVkICovXG4gIHZhciB1c2VkSW1wb3J0UnVsZVRhZyA9IGZhbHNlO1xuXG4gIHZhciBpbnNlcnRNYXJrZXIgPSBmdW5jdGlvbiBpbnNlcnRNYXJrZXIoaWQpIHtcbiAgICB2YXIgcHJldiA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIG1hcmtlcnNbaWRdID0gc2l6ZXMubGVuZ3RoO1xuICAgIHNpemVzLnB1c2goMCk7XG4gICAgcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCk7XG5cbiAgICByZXR1cm4gbWFya2Vyc1tpZF07XG4gIH07XG5cbiAgdmFyIGluc2VydFJ1bGVzID0gZnVuY3Rpb24gaW5zZXJ0UnVsZXMoaWQsIGNzc1J1bGVzLCBuYW1lKSB7XG4gICAgdmFyIG1hcmtlciA9IGluc2VydE1hcmtlcihpZCk7XG4gICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcoZWwpO1xuICAgIHZhciBpbnNlcnRJbmRleCA9IGFkZFVwVW50aWxJbmRleChzaXplcywgbWFya2VyKTtcblxuICAgIHZhciBpbmplY3RlZFJ1bGVzID0gMDtcbiAgICB2YXIgaW1wb3J0UnVsZXMgPSBbXTtcbiAgICB2YXIgY3NzUnVsZXNTaXplID0gY3NzUnVsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NSdWxlc1NpemU7IGkgKz0gMSkge1xuICAgICAgdmFyIGNzc1J1bGUgPSBjc3NSdWxlc1tpXTtcbiAgICAgIHZhciBtYXlIYXZlSW1wb3J0ID0gZXh0cmFjdEltcG9ydDsgLyogQGltcG9ydCBydWxlcyBhcmUgcmVvcmRlcmVkIHRvIGFwcGVhciBmaXJzdCAqL1xuICAgICAgaWYgKG1heUhhdmVJbXBvcnQgJiYgY3NzUnVsZS5pbmRleE9mKCdAaW1wb3J0JykgIT09IC0xKSB7XG4gICAgICAgIGltcG9ydFJ1bGVzLnB1c2goY3NzUnVsZSk7XG4gICAgICB9IGVsc2UgaWYgKHNhZmVJbnNlcnRSdWxlKHNoZWV0LCBjc3NSdWxlLCBpbnNlcnRJbmRleCArIGluamVjdGVkUnVsZXMpKSB7XG4gICAgICAgIG1heUhhdmVJbXBvcnQgPSBmYWxzZTtcbiAgICAgICAgaW5qZWN0ZWRSdWxlcyArPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIGltcG9ydFJ1bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHVzZWRJbXBvcnRSdWxlVGFnID0gdHJ1ZTtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGdldEltcG9ydFJ1bGVUYWcoKS5pbnNlcnRSdWxlcyhpZCArICctaW1wb3J0JywgaW1wb3J0UnVsZXMpO1xuICAgIH1cblxuICAgIHNpemVzW21hcmtlcl0gKz0gaW5qZWN0ZWRSdWxlczsgLyogYWRkIHVwIG5vIG9mIGluamVjdGVkIHJ1bGVzICovXG4gICAgYWRkTmFtZUZvcklkKG5hbWVzLCBpZCwgbmFtZSk7XG4gIH07XG5cbiAgdmFyIHJlbW92ZVJ1bGVzID0gZnVuY3Rpb24gcmVtb3ZlUnVsZXMoaWQpIHtcbiAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKG1hcmtlciA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICB2YXIgc2l6ZSA9IHNpemVzW21hcmtlcl07XG4gICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcoZWwpO1xuICAgIHZhciByZW1vdmFsSW5kZXggPSBhZGRVcFVudGlsSW5kZXgoc2l6ZXMsIG1hcmtlcikgLSAxO1xuICAgIGRlbGV0ZVJ1bGVzKHNoZWV0LCByZW1vdmFsSW5kZXgsIHNpemUpO1xuICAgIHNpemVzW21hcmtlcl0gPSAwO1xuICAgIHJlc2V0SWROYW1lcyhuYW1lcywgaWQpO1xuXG4gICAgaWYgKGV4dHJhY3RJbXBvcnQgJiYgdXNlZEltcG9ydFJ1bGVUYWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGdldEltcG9ydFJ1bGVUYWcoKS5yZW1vdmVSdWxlcyhpZCArICctaW1wb3J0Jyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgdmFyIF9zaGVldEZvclRhZyA9IHNoZWV0Rm9yVGFnKGVsKSxcbiAgICAgICAgY3NzUnVsZXMgPSBfc2hlZXRGb3JUYWcuY3NzUnVsZXM7XG5cbiAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yICh2YXIgaWQgaW4gbWFya2Vycykge1xuICAgICAgc3RyICs9IG1ha2VUZXh0TWFya2VyKGlkKTtcbiAgICAgIHZhciBtYXJrZXIgPSBtYXJrZXJzW2lkXTtcbiAgICAgIHZhciBlbmQgPSBhZGRVcFVudGlsSW5kZXgoc2l6ZXMsIG1hcmtlcik7XG4gICAgICB2YXIgc2l6ZSA9IHNpemVzW21hcmtlcl07XG4gICAgICBmb3IgKHZhciBpID0gZW5kIC0gc2l6ZTsgaSA8IGVuZDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBydWxlID0gY3NzUnVsZXNbaV07XG4gICAgICAgIGlmIChydWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdHIgKz0gcnVsZS5jc3NUZXh0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoNSk7XG4gICAgfSxcblxuICAgIGNzczogY3NzLFxuICAgIGdldElkczogZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpLFxuICAgIGhhc05hbWVGb3JJZDogaGFzTmFtZUZvcklkKG5hbWVzKSxcbiAgICBpbnNlcnRNYXJrZXI6IGluc2VydE1hcmtlcixcbiAgICBpbnNlcnRSdWxlczogaW5zZXJ0UnVsZXMsXG4gICAgcmVtb3ZlUnVsZXM6IHJlbW92ZVJ1bGVzLFxuICAgIHNlYWxlZDogZmFsc2UsXG4gICAgc3R5bGVUYWc6IGVsLFxuICAgIHRvRWxlbWVudDogd3JhcEFzRWxlbWVudChjc3MsIG5hbWVzKSxcbiAgICB0b0hUTUw6IHdyYXBBc0h0bWxUYWcoY3NzLCBuYW1lcylcbiAgfTtcbn07XG5cbnZhciBtYWtlVGV4dE5vZGUgPSBmdW5jdGlvbiBtYWtlVGV4dE5vZGUoaWQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG1ha2VUZXh0TWFya2VyKGlkKSk7XG59O1xuXG52YXIgbWFrZUJyb3dzZXJUYWcgPSBmdW5jdGlvbiBtYWtlQnJvd3NlclRhZyhlbCwgZ2V0SW1wb3J0UnVsZVRhZykge1xuICB2YXIgbmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbWFya2VycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgdmFyIGV4dHJhY3RJbXBvcnQgPSBnZXRJbXBvcnRSdWxlVGFnICE9PSB1bmRlZmluZWQ7XG5cbiAgLyogaW5kaWNhdGVzIHdoZXRoZXIgZ2V0SW1wb3J0UnVsZVRhZyB3YXMgY2FsbGVkICovXG4gIHZhciB1c2VkSW1wb3J0UnVsZVRhZyA9IGZhbHNlO1xuXG4gIHZhciBpbnNlcnRNYXJrZXIgPSBmdW5jdGlvbiBpbnNlcnRNYXJrZXIoaWQpIHtcbiAgICB2YXIgcHJldiA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIG1hcmtlcnNbaWRdID0gbWFrZVRleHROb2RlKGlkKTtcbiAgICBlbC5hcHBlbmRDaGlsZChtYXJrZXJzW2lkXSk7XG4gICAgbmFtZXNbaWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHJldHVybiBtYXJrZXJzW2lkXTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgbWFya2VyID0gaW5zZXJ0TWFya2VyKGlkKTtcbiAgICB2YXIgaW1wb3J0UnVsZXMgPSBbXTtcbiAgICB2YXIgY3NzUnVsZXNTaXplID0gY3NzUnVsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NSdWxlc1NpemU7IGkgKz0gMSkge1xuICAgICAgdmFyIHJ1bGUgPSBjc3NSdWxlc1tpXTtcbiAgICAgIHZhciBtYXlIYXZlSW1wb3J0ID0gZXh0cmFjdEltcG9ydDtcbiAgICAgIGlmIChtYXlIYXZlSW1wb3J0ICYmIHJ1bGUuaW5kZXhPZignQGltcG9ydCcpICE9PSAtMSkge1xuICAgICAgICBpbXBvcnRSdWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF5SGF2ZUltcG9ydCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gaSA9PT0gY3NzUnVsZXNTaXplIC0gMSA/ICcnIDogJyAnO1xuICAgICAgICBtYXJrZXIuYXBwZW5kRGF0YSgnJyArIHJ1bGUgKyBzZXBhcmF0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuXG4gICAgaWYgKGV4dHJhY3RJbXBvcnQgJiYgaW1wb3J0UnVsZXMubGVuZ3RoID4gMCkge1xuICAgICAgdXNlZEltcG9ydFJ1bGVUYWcgPSB0cnVlO1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZ2V0SW1wb3J0UnVsZVRhZygpLmluc2VydFJ1bGVzKGlkICsgJy1pbXBvcnQnLCBpbXBvcnRSdWxlcyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgLyogY3JlYXRlIG5ldyBlbXB0eSB0ZXh0IG5vZGUgYW5kIHJlcGxhY2UgdGhlIGN1cnJlbnQgb25lICovXG4gICAgdmFyIG5ld01hcmtlciA9IG1ha2VUZXh0Tm9kZShpZCk7XG4gICAgZWwucmVwbGFjZUNoaWxkKG5ld01hcmtlciwgbWFya2VyKTtcbiAgICBtYXJrZXJzW2lkXSA9IG5ld01hcmtlcjtcbiAgICByZXNldElkTmFtZXMobmFtZXMsIGlkKTtcblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIHVzZWRJbXBvcnRSdWxlVGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkucmVtb3ZlUnVsZXMoaWQgKyAnLWltcG9ydCcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBzdHIgPSAnJztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICBzdHIgKz0gbWFya2Vyc1tpZF0uZGF0YTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig1KTtcbiAgICB9LFxuXG4gICAgY3NzOiBjc3MsXG4gICAgZ2V0SWRzOiBnZXRJZHNGcm9tTWFya2Vyc0ZhY3RvcnkobWFya2VycyksXG4gICAgaGFzTmFtZUZvcklkOiBoYXNOYW1lRm9ySWQobmFtZXMpLFxuICAgIGluc2VydE1hcmtlcjogaW5zZXJ0TWFya2VyLFxuICAgIGluc2VydFJ1bGVzOiBpbnNlcnRSdWxlcyxcbiAgICByZW1vdmVSdWxlczogcmVtb3ZlUnVsZXMsXG4gICAgc2VhbGVkOiBmYWxzZSxcbiAgICBzdHlsZVRhZzogZWwsXG4gICAgdG9FbGVtZW50OiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKVxuICB9O1xufTtcblxudmFyIG1ha2VTZXJ2ZXJUYWcgPSBmdW5jdGlvbiBtYWtlU2VydmVyVGFnKG5hbWVzQXJnLCBtYXJrZXJzQXJnKSB7XG4gIHZhciBuYW1lcyA9IG5hbWVzQXJnID09PSB1bmRlZmluZWQgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogbmFtZXNBcmc7XG4gIHZhciBtYXJrZXJzID0gbWFya2Vyc0FyZyA9PT0gdW5kZWZpbmVkID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IG1hcmtlcnNBcmc7XG5cbiAgdmFyIGluc2VydE1hcmtlciA9IGZ1bmN0aW9uIGluc2VydE1hcmtlcihpZCkge1xuICAgIHZhciBwcmV2ID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKHByZXYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtlcnNbaWRdID0gWycnXTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgbWFya2VyID0gaW5zZXJ0TWFya2VyKGlkKTtcbiAgICBtYXJrZXJbMF0gKz0gY3NzUnVsZXMuam9pbignICcpO1xuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgIG1hcmtlclswXSA9ICcnO1xuICAgIHJlc2V0SWROYW1lcyhuYW1lcywgaWQpO1xuICB9O1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICB2YXIgY3NzRm9ySWQgPSBtYXJrZXJzW2lkXVswXTtcbiAgICAgIGlmIChjc3NGb3JJZCkge1xuICAgICAgICBzdHIgKz0gbWFrZVRleHRNYXJrZXIoaWQpICsgY3NzRm9ySWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgdmFyIGNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgdmFyIG5hbWVzQ2xvbmUgPSBjbG9uZU5hbWVzKG5hbWVzKTtcbiAgICB2YXIgbWFya2Vyc0Nsb25lID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICBtYXJrZXJzQ2xvbmVbaWRdID0gW21hcmtlcnNbaWRdWzBdXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFrZVNlcnZlclRhZyhuYW1lc0Nsb25lLCBtYXJrZXJzQ2xvbmUpO1xuICB9O1xuXG4gIHZhciB0YWcgPSB7XG4gICAgY2xvbmU6IGNsb25lLFxuICAgIGNzczogY3NzLFxuICAgIGdldElkczogZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpLFxuICAgIGhhc05hbWVGb3JJZDogaGFzTmFtZUZvcklkKG5hbWVzKSxcbiAgICBpbnNlcnRNYXJrZXI6IGluc2VydE1hcmtlcixcbiAgICBpbnNlcnRSdWxlczogaW5zZXJ0UnVsZXMsXG4gICAgcmVtb3ZlUnVsZXM6IHJlbW92ZVJ1bGVzLFxuICAgIHNlYWxlZDogZmFsc2UsXG4gICAgc3R5bGVUYWc6IG51bGwsXG4gICAgdG9FbGVtZW50OiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKVxuICB9O1xuXG4gIHJldHVybiB0YWc7XG59O1xuXG52YXIgbWFrZVRhZyA9IGZ1bmN0aW9uIG1ha2VUYWcodGFyZ2V0LCB0YWdFbCwgZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSwgZ2V0SW1wb3J0UnVsZVRhZykge1xuICBpZiAoSVNfQlJPV1NFUiAmJiAhZm9yY2VTZXJ2ZXIpIHtcbiAgICB2YXIgZWwgPSBtYWtlU3R5bGVUYWcodGFyZ2V0LCB0YWdFbCwgaW5zZXJ0QmVmb3JlKTtcblxuICAgIGlmIChESVNBQkxFX1NQRUVEWSkge1xuICAgICAgcmV0dXJuIG1ha2VCcm93c2VyVGFnKGVsLCBnZXRJbXBvcnRSdWxlVGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1ha2VTcGVlZHlUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYWtlU2VydmVyVGFnKCk7XG59O1xuXG52YXIgcmVoeWRyYXRlID0gZnVuY3Rpb24gcmVoeWRyYXRlKHRhZywgZWxzLCBleHRyYWN0ZWQpIHtcbiAgLyogYWRkIGFsbCBleHRyYWN0ZWQgY29tcG9uZW50cyB0byB0aGUgbmV3IHRhZyAqL1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXh0cmFjdGVkLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgdmFyIF9leHRyYWN0ZWQkaSA9IGV4dHJhY3RlZFtpXSxcbiAgICAgICAgY29tcG9uZW50SWQgPSBfZXh0cmFjdGVkJGkuY29tcG9uZW50SWQsXG4gICAgICAgIGNzc0Zyb21ET00gPSBfZXh0cmFjdGVkJGkuY3NzRnJvbURPTTtcblxuICAgIHZhciBjc3NSdWxlcyA9IHNwbGl0QnlSdWxlcyhjc3NGcm9tRE9NKTtcbiAgICB0YWcuaW5zZXJ0UnVsZXMoY29tcG9uZW50SWQsIGNzc1J1bGVzKTtcbiAgfVxuXG4gIC8qIHJlbW92ZSBvbGQgSFRNTFN0eWxlRWxlbWVudHMsIHNpbmNlIHRoZXkgaGF2ZSBiZWVuIHJlaHlkcmF0ZWQgKi9cbiAgZm9yICh2YXIgX2kgPSAwLCBfbGVuID0gZWxzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSArPSAxKSB7XG4gICAgdmFyIGVsID0gZWxzW19pXTtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSkge1xuICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBcblxudmFyIFNQTElUX1JFR0VYID0gL1xccysvO1xuXG4vKiBkZXRlcm1pbmUgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNvbXBvbmVudHMgYmVmb3JlIHRhZ3MgYXJlIHNoYXJkZWQgKi9cbnZhciBNQVhfU0laRSA9IHZvaWQgMDtcbmlmIChJU19CUk9XU0VSKSB7XG4gIC8qIGluIHNwZWVkeSBtb2RlIHdlIGNhbiBrZWVwIGEgbG90IG1vcmUgcnVsZXMgaW4gYSBzaGVldCBiZWZvcmUgYSBzbG93ZG93biBjYW4gYmUgZXhwZWN0ZWQgKi9cbiAgTUFYX1NJWkUgPSBESVNBQkxFX1NQRUVEWSA/IDQwIDogMTAwMDtcbn0gZWxzZSB7XG4gIC8qIGZvciBzZXJ2ZXJzIHdlIGRvIG5vdCBuZWVkIHRvIHNoYXJkIGF0IGFsbCAqL1xuICBNQVhfU0laRSA9IC0xO1xufVxuXG52YXIgc2hlZXRSdW5uaW5nSWQgPSAwO1xudmFyIG1hc3RlciA9IHZvaWQgMDtcblxudmFyIFN0eWxlU2hlZXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgLyogYSBtYXAgZnJvbSBpZHMgdG8gdGFncyAqL1xuXG4gIC8qIGRlZmVycmVkIHJ1bGVzIGZvciBhIGdpdmVuIGlkICovXG5cbiAgLyogdGhpcyBpcyB1c2VkIGZvciBub3QgcmVpbmplY3RpbmcgcnVsZXMgdmlhIGhhc05hbWVGb3JJZCgpICovXG5cbiAgLyogd2hlbiBydWxlcyBmb3IgYW4gaWQgYXJlIHJlbW92ZWQgdXNpbmcgcmVtb3ZlKCkgd2UgaGF2ZSB0byBpZ25vcmUgcmVoeWRyYXRlZE5hbWVzIGZvciBpdCAqL1xuXG4gIC8qIGEgbGlzdCBvZiB0YWdzIGJlbG9uZ2luZyB0byB0aGlzIFN0eWxlU2hlZXQgKi9cblxuICAvKiBhIHRhZyBmb3IgaW1wb3J0IHJ1bGVzICovXG5cbiAgLyogY3VycmVudCBjYXBhY2l0eSB1bnRpbCBhIG5ldyB0YWcgbXVzdCBiZSBjcmVhdGVkICovXG5cbiAgLyogY2hpbGRyZW4gKGFrYSBjbG9uZXMpIG9mIHRoaXMgU3R5bGVTaGVldCBpbmhlcml0aW5nIGFsbCBhbmQgZnV0dXJlIGluamVjdGlvbnMgKi9cblxuICBmdW5jdGlvbiBTdHlsZVNoZWV0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBJU19CUk9XU0VSID8gZG9jdW1lbnQuaGVhZCA6IG51bGw7XG4gICAgdmFyIGZvcmNlU2VydmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdHlsZVNoZWV0KTtcblxuICAgIHRoaXMuZ2V0SW1wb3J0UnVsZVRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbXBvcnRSdWxlVGFnID0gX3RoaXMuaW1wb3J0UnVsZVRhZztcblxuICAgICAgaWYgKGltcG9ydFJ1bGVUYWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaW1wb3J0UnVsZVRhZztcbiAgICAgIH1cblxuICAgICAgdmFyIGZpcnN0VGFnID0gX3RoaXMudGFnc1swXTtcbiAgICAgIHZhciBpbnNlcnRCZWZvcmUgPSB0cnVlO1xuXG4gICAgICByZXR1cm4gX3RoaXMuaW1wb3J0UnVsZVRhZyA9IG1ha2VUYWcoX3RoaXMudGFyZ2V0LCBmaXJzdFRhZyA/IGZpcnN0VGFnLnN0eWxlVGFnIDogbnVsbCwgX3RoaXMuZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSk7XG4gICAgfTtcblxuICAgIHNoZWV0UnVubmluZ0lkICs9IDE7XG4gICAgdGhpcy5pZCA9IHNoZWV0UnVubmluZ0lkO1xuICAgIHRoaXMuZm9yY2VTZXJ2ZXIgPSBmb3JjZVNlcnZlcjtcbiAgICB0aGlzLnRhcmdldCA9IGZvcmNlU2VydmVyID8gbnVsbCA6IHRhcmdldDtcbiAgICB0aGlzLnRhZ01hcCA9IHt9O1xuICAgIHRoaXMuZGVmZXJyZWQgPSB7fTtcbiAgICB0aGlzLnJlaHlkcmF0ZWROYW1lcyA9IHt9O1xuICAgIHRoaXMuaWdub3JlUmVoeWRyYXRlZE5hbWVzID0ge307XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jYXBhY2l0eSA9IDE7XG4gICAgdGhpcy5jbG9uZXMgPSBbXTtcbiAgfVxuXG4gIC8qIHJlaHlkcmF0ZSBhbGwgU1NSJ2Qgc3R5bGUgdGFncyAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUucmVoeWRyYXRlID0gZnVuY3Rpb24gcmVoeWRyYXRlJCQxKCkge1xuICAgIGlmICghSVNfQlJPV1NFUiB8fCB0aGlzLmZvcmNlU2VydmVyKSByZXR1cm4gdGhpcztcblxuICAgIHZhciBlbHMgPSBbXTtcbiAgICB2YXIgZXh0cmFjdGVkID0gW107XG4gICAgdmFyIGlzU3RyZWFtZWQgPSBmYWxzZTtcblxuICAgIC8qIHJldHJpZXZlIGFsbCBvZiBvdXIgU1NSIHN0eWxlIGVsZW1lbnRzIGZyb20gdGhlIERPTSAqL1xuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlWycgKyBTQ19BVFRSICsgJ11bJyArIFNDX1ZFUlNJT05fQVRUUiArICc9XCInICsgXCI0LjEuM1wiICsgJ1wiXScpO1xuXG4gICAgdmFyIG5vZGVzU2l6ZSA9IG5vZGVzLmxlbmd0aDtcblxuICAgIC8qIGFib3J0IHJlaHlkcmF0aW9uIGlmIG5vIHByZXZpb3VzIHN0eWxlIHRhZ3Mgd2VyZSBmb3VuZCAqL1xuICAgIGlmICghbm9kZXNTaXplKSByZXR1cm4gdGhpcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXNTaXplOyBpICs9IDEpIHtcbiAgICAgIHZhciBlbCA9IG5vZGVzW2ldO1xuXG4gICAgICAvKiBjaGVjayBpZiBzdHlsZSB0YWcgaXMgYSBzdHJlYW1lZCB0YWcgKi9cbiAgICAgIGlmICghaXNTdHJlYW1lZCkgaXNTdHJlYW1lZCA9ICEhZWwuZ2V0QXR0cmlidXRlKFNDX1NUUkVBTV9BVFRSKTtcblxuICAgICAgLyogcmV0cmlldmUgYWxsIGNvbXBvbmVudCBuYW1lcyAqL1xuICAgICAgdmFyIGVsTmFtZXMgPSAoZWwuZ2V0QXR0cmlidXRlKFNDX0FUVFIpIHx8ICcnKS50cmltKCkuc3BsaXQoU1BMSVRfUkVHRVgpO1xuICAgICAgdmFyIGVsTmFtZXNTaXplID0gZWxOYW1lcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBqID0gMCwgbmFtZTsgaiA8IGVsTmFtZXNTaXplOyBqICs9IDEpIHtcbiAgICAgICAgbmFtZSA9IGVsTmFtZXNbal07XG4gICAgICAgIC8qIGFkZCByZWh5ZHJhdGVkIG5hbWUgdG8gc2hlZXQgdG8gYXZvaWQgcmUtYWRkaW5nIHN0eWxlcyAqL1xuICAgICAgICB0aGlzLnJlaHlkcmF0ZWROYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8qIGV4dHJhY3QgYWxsIGNvbXBvbmVudHMgYW5kIHRoZWlyIENTUyAqL1xuICAgICAgZXh0cmFjdGVkLnB1c2guYXBwbHkoZXh0cmFjdGVkLCBleHRyYWN0Q29tcHMoZWwudGV4dENvbnRlbnQpKTtcblxuICAgICAgLyogc3RvcmUgb3JpZ2luYWwgSFRNTFN0eWxlRWxlbWVudCAqL1xuICAgICAgZWxzLnB1c2goZWwpO1xuICAgIH1cblxuICAgIC8qIGFib3J0IHJlaHlkcmF0aW9uIGlmIG5vdGhpbmcgd2FzIGV4dHJhY3RlZCAqL1xuICAgIHZhciBleHRyYWN0ZWRTaXplID0gZXh0cmFjdGVkLmxlbmd0aDtcbiAgICBpZiAoIWV4dHJhY3RlZFNpemUpIHJldHVybiB0aGlzO1xuXG4gICAgLyogY3JlYXRlIGEgdGFnIHRvIGJlIHVzZWQgZm9yIHJlaHlkcmF0aW9uICovXG4gICAgdmFyIHRhZyA9IHRoaXMubWFrZVRhZyhudWxsKTtcblxuICAgIHJlaHlkcmF0ZSh0YWcsIGVscywgZXh0cmFjdGVkKTtcblxuICAgIC8qIHJlc2V0IGNhcGFjaXR5IGFuZCBhZGp1c3QgTUFYX1NJWkUgYnkgdGhlIGluaXRpYWwgc2l6ZSBvZiB0aGUgcmVoeWRyYXRpb24gKi9cbiAgICB0aGlzLmNhcGFjaXR5ID0gTWF0aC5tYXgoMSwgTUFYX1NJWkUgLSBleHRyYWN0ZWRTaXplKTtcbiAgICB0aGlzLnRhZ3MucHVzaCh0YWcpO1xuXG4gICAgLyogcmV0cmlldmUgYWxsIGNvbXBvbmVudCBpZHMgKi9cbiAgICBmb3IgKHZhciBfaiA9IDA7IF9qIDwgZXh0cmFjdGVkU2l6ZTsgX2ogKz0gMSkge1xuICAgICAgdGhpcy50YWdNYXBbZXh0cmFjdGVkW19qXS5jb21wb25lbnRJZF0gPSB0YWc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyogcmV0cmlldmUgYSBcIm1hc3RlclwiIGluc3RhbmNlIG9mIFN0eWxlU2hlZXQgd2hpY2ggaXMgdHlwaWNhbGx5IHVzZWQgd2hlbiBubyBvdGhlciBpcyBhdmFpbGFibGVcbiAgICogVGhlIG1hc3RlciBTdHlsZVNoZWV0IGlzIHRhcmdldGVkIGJ5IGNyZWF0ZUdsb2JhbFN0eWxlLCBrZXlmcmFtZXMsIGFuZCBjb21wb25lbnRzIG91dHNpZGUgb2YgYW55XG4gICAgKiBTdHlsZVNoZWV0TWFuYWdlcidzIGNvbnRleHQgKi9cblxuXG4gIC8qIHJlc2V0IHRoZSBpbnRlcm5hbCBcIm1hc3RlclwiIGluc3RhbmNlICovXG4gIFN0eWxlU2hlZXQucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2YXIgZm9yY2VTZXJ2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgbWFzdGVyID0gbmV3IFN0eWxlU2hlZXQodW5kZWZpbmVkLCBmb3JjZVNlcnZlcikucmVoeWRyYXRlKCk7XG4gIH07XG5cbiAgLyogYWRkcyBcImNoaWxkcmVuXCIgdG8gdGhlIFN0eWxlU2hlZXQgdGhhdCBpbmhlcml0IGFsbCBvZiB0aGUgcGFyZW50cycgcnVsZXNcbiAgICogd2hpbGUgdGhlaXIgb3duIHJ1bGVzIGRvIG5vdCBhZmZlY3QgdGhlIHBhcmVudCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICB2YXIgc2hlZXQgPSBuZXcgU3R5bGVTaGVldCh0aGlzLnRhcmdldCwgdGhpcy5mb3JjZVNlcnZlcik7XG5cbiAgICAvKiBhZGQgdG8gY2xvbmUgYXJyYXkgKi9cbiAgICB0aGlzLmNsb25lcy5wdXNoKHNoZWV0KTtcblxuICAgIC8qIGNsb25lIGFsbCB0YWdzICovXG4gICAgc2hlZXQudGFncyA9IHRoaXMudGFncy5tYXAoZnVuY3Rpb24gKHRhZykge1xuICAgICAgdmFyIGlkcyA9IHRhZy5nZXRJZHMoKTtcbiAgICAgIHZhciBuZXdUYWcgPSB0YWcuY2xvbmUoKTtcblxuICAgICAgLyogcmVjb25zdHJ1Y3QgdGFnTWFwICovXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzaGVldC50YWdNYXBbaWRzW2ldXSA9IG5ld1RhZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1RhZztcbiAgICB9KTtcblxuICAgIC8qIGNsb25lIG90aGVyIG1hcHMgKi9cbiAgICBzaGVldC5yZWh5ZHJhdGVkTmFtZXMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5yZWh5ZHJhdGVkTmFtZXMpO1xuICAgIHNoZWV0LmRlZmVycmVkID0gX2V4dGVuZHMoe30sIHRoaXMuZGVmZXJyZWQpO1xuXG4gICAgcmV0dXJuIHNoZWV0O1xuICB9O1xuXG4gIC8qIGZvcmNlIFN0eWxlU2hlZXQgdG8gY3JlYXRlIGEgbmV3IHRhZyBvbiB0aGUgbmV4dCBpbmplY3Rpb24gKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnNlYWxBbGxUYWdzID0gZnVuY3Rpb24gc2VhbEFsbFRhZ3MoKSB7XG4gICAgdGhpcy5jYXBhY2l0eSA9IDE7XG5cbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIHRhZy5zZWFsZWQgPSB0cnVlO1xuICAgIH0pO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLm1ha2VUYWcgPSBmdW5jdGlvbiBtYWtlVGFnJCQxKHRhZykge1xuICAgIHZhciBsYXN0RWwgPSB0YWcgPyB0YWcuc3R5bGVUYWcgOiBudWxsO1xuICAgIHZhciBpbnNlcnRCZWZvcmUgPSBmYWxzZTtcblxuICAgIHJldHVybiBtYWtlVGFnKHRoaXMudGFyZ2V0LCBsYXN0RWwsIHRoaXMuZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSwgdGhpcy5nZXRJbXBvcnRSdWxlVGFnKTtcbiAgfTtcblxuICAvKiBnZXQgYSB0YWcgZm9yIGEgZ2l2ZW4gY29tcG9uZW50SWQsIGFzc2lnbiB0aGUgY29tcG9uZW50SWQgdG8gb25lLCBvciBzaGFyZCAqL1xuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5nZXRUYWdGb3JJZCA9IGZ1bmN0aW9uIGdldFRhZ0ZvcklkKGlkKSB7XG4gICAgLyogc2ltcGx5IHJldHVybiBhIHRhZywgd2hlbiB0aGUgY29tcG9uZW50SWQgd2FzIGFscmVhZHkgYXNzaWduZWQgb25lICovXG4gICAgdmFyIHByZXYgPSB0aGlzLnRhZ01hcFtpZF07XG4gICAgaWYgKHByZXYgIT09IHVuZGVmaW5lZCAmJiAhcHJldi5zZWFsZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuXG4gICAgLyogc2hhcmQgKGNyZWF0ZSBhIG5ldyB0YWcpIGlmIHRoZSB0YWcgaXMgZXhoYXVzdGVkIChTZWUgTUFYX1NJWkUpICovXG4gICAgdGhpcy5jYXBhY2l0eSAtPSAxO1xuXG4gICAgaWYgKHRoaXMuY2FwYWNpdHkgPT09IDApIHtcbiAgICAgIHRoaXMuY2FwYWNpdHkgPSBNQVhfU0laRTtcbiAgICAgIHRhZyA9IHRoaXMubWFrZVRhZyh0YWcpO1xuICAgICAgdGhpcy50YWdzLnB1c2godGFnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50YWdNYXBbaWRdID0gdGFnO1xuICB9O1xuXG4gIC8qIG1haW5seSBmb3IgY3JlYXRlR2xvYmFsU3R5bGUgdG8gY2hlY2sgZm9yIGl0cyBpZCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuaGFzSWQgPSBmdW5jdGlvbiBoYXNJZChpZCkge1xuICAgIHJldHVybiB0aGlzLnRhZ01hcFtpZF0gIT09IHVuZGVmaW5lZDtcbiAgfTtcblxuICAvKiBjYWNoaW5nIGxheWVyIGNoZWNraW5nIGlkK25hbWUgdG8gYWxyZWFkeSBoYXZlIGEgY29ycmVzcG9uZGluZyB0YWcgYW5kIGluamVjdGVkIHJ1bGVzICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5oYXNOYW1lRm9ySWQgPSBmdW5jdGlvbiBoYXNOYW1lRm9ySWQoaWQsIG5hbWUpIHtcbiAgICAvKiBleGNlcHRpb24gZm9yIHJlaHlkcmF0ZWQgbmFtZXMgd2hpY2ggYXJlIGNoZWNrZWQgc2VwYXJhdGVseSAqL1xuICAgIGlmICh0aGlzLmlnbm9yZVJlaHlkcmF0ZWROYW1lc1tpZF0gPT09IHVuZGVmaW5lZCAmJiB0aGlzLnJlaHlkcmF0ZWROYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnTWFwW2lkXTtcbiAgICByZXR1cm4gdGFnICE9PSB1bmRlZmluZWQgJiYgdGFnLmhhc05hbWVGb3JJZChpZCwgbmFtZSk7XG4gIH07XG5cbiAgLyogcmVnaXN0ZXJzIGEgY29tcG9uZW50SWQgYW5kIHJlZ2lzdGVycyBpdCBvbiBpdHMgdGFnICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5kZWZlcnJlZEluamVjdCA9IGZ1bmN0aW9uIGRlZmVycmVkSW5qZWN0KGlkLCBjc3NSdWxlcykge1xuICAgIC8qIGRvbid0IGluamVjdCB3aGVuIHRoZSBpZCBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgKi9cbiAgICBpZiAodGhpcy50YWdNYXBbaWRdICE9PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIHZhciBjbG9uZXMgPSB0aGlzLmNsb25lcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjbG9uZXNbaV0uZGVmZXJyZWRJbmplY3QoaWQsIGNzc1J1bGVzKTtcbiAgICB9XG5cbiAgICB0aGlzLmdldFRhZ0ZvcklkKGlkKS5pbnNlcnRNYXJrZXIoaWQpO1xuICAgIHRoaXMuZGVmZXJyZWRbaWRdID0gY3NzUnVsZXM7XG4gIH07XG5cbiAgLyogaW5qZWN0cyBydWxlcyBmb3IgYSBnaXZlbiBpZCB3aXRoIGEgbmFtZSB0aGF0IHdpbGwgbmVlZCB0byBiZSBjYWNoZWQgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmluamVjdCA9IGZ1bmN0aW9uIGluamVjdChpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgY2xvbmVzID0gdGhpcy5jbG9uZXM7XG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjbG9uZXNbaV0uaW5qZWN0KGlkLCBjc3NSdWxlcywgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMuZ2V0VGFnRm9ySWQoaWQpO1xuXG4gICAgLyogYWRkIGRlZmVycmVkIHJ1bGVzIGZvciBjb21wb25lbnQgKi9cbiAgICBpZiAodGhpcy5kZWZlcnJlZFtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQ29tYmluZSBwYXNzZWQgY3NzUnVsZXMgd2l0aCBwcmV2aW91c2x5IGRlZmVycmVkIENTUyBydWxlc1xuICAgICAgLy8gTk9URTogV2UgY2Fubm90IG11dGF0ZSB0aGUgZGVmZXJyZWQgYXJyYXkgaXRzZWxmIGFzIGFsbCBjbG9uZXNcbiAgICAgIC8vIGRvIHRoZSBzYW1lIChzZWUgY2xvbmVzW2ldLmluamVjdClcbiAgICAgIHZhciBydWxlcyA9IHRoaXMuZGVmZXJyZWRbaWRdLmNvbmNhdChjc3NSdWxlcyk7XG4gICAgICB0YWcuaW5zZXJ0UnVsZXMoaWQsIHJ1bGVzLCBuYW1lKTtcblxuICAgICAgdGhpcy5kZWZlcnJlZFtpZF0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZy5pbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpO1xuICAgIH1cbiAgfTtcblxuICAvKiByZW1vdmVzIGFsbCBydWxlcyBmb3IgYSBnaXZlbiBpZCwgd2hpY2ggZG9lc24ndCByZW1vdmUgaXRzIG1hcmtlciBidXQgcmVzZXRzIGl0ICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoaWQpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWdNYXBbaWRdO1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgdmFyIGNsb25lcyA9IHRoaXMuY2xvbmVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNsb25lc1tpXS5yZW1vdmUoaWQpO1xuICAgIH1cblxuICAgIC8qIHJlbW92ZSBhbGwgcnVsZXMgZnJvbSB0aGUgdGFnICovXG4gICAgdGFnLnJlbW92ZVJ1bGVzKGlkKTtcblxuICAgIC8qIGlnbm9yZSBwb3NzaWJsZSByZWh5ZHJhdGVkIG5hbWVzICovXG4gICAgdGhpcy5pZ25vcmVSZWh5ZHJhdGVkTmFtZXNbaWRdID0gdHJ1ZTtcblxuICAgIC8qIGRlbGV0ZSBwb3NzaWJsZSBkZWZlcnJlZCBydWxlcyAqL1xuICAgIHRoaXMuZGVmZXJyZWRbaWRdID0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnRvSFRNTCA9IGZ1bmN0aW9uIHRvSFRNTCgpIHtcbiAgICByZXR1cm4gdGhpcy50YWdzLm1hcChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnRvSFRNTCgpO1xuICAgIH0pLmpvaW4oJycpO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnRvUmVhY3RFbGVtZW50cyA9IGZ1bmN0aW9uIHRvUmVhY3RFbGVtZW50cygpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkO1xuXG5cbiAgICByZXR1cm4gdGhpcy50YWdzLm1hcChmdW5jdGlvbiAodGFnLCBpKSB7XG4gICAgICB2YXIga2V5ID0gJ3NjLScgKyBpZCArICctJyArIGk7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KHRhZy50b0VsZW1lbnQoKSwgeyBrZXk6IGtleSB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBjcmVhdGVDbGFzcyhTdHlsZVNoZWV0LCBudWxsLCBbe1xuICAgIGtleTogJ21hc3RlcicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICByZXR1cm4gbWFzdGVyIHx8IChtYXN0ZXIgPSBuZXcgU3R5bGVTaGVldCgpLnJlaHlkcmF0ZSgpKTtcbiAgICB9XG5cbiAgICAvKiBOT1RFOiBUaGlzIGlzIGp1c3QgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggamVzdC1zdHlsZWQtY29tcG9uZW50cyAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnN0YW5jZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICByZXR1cm4gU3R5bGVTaGVldC5tYXN0ZXI7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG4vLyBcblxudmFyIEtleWZyYW1lcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gS2V5ZnJhbWVzKG5hbWUsIHJ1bGVzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEtleWZyYW1lcyk7XG5cbiAgICB0aGlzLmluamVjdCA9IGZ1bmN0aW9uIChzdHlsZVNoZWV0KSB7XG4gICAgICBpZiAoIXN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKF90aGlzLmlkLCBfdGhpcy5uYW1lKSkge1xuICAgICAgICBzdHlsZVNoZWV0LmluamVjdChfdGhpcy5pZCwgX3RoaXMucnVsZXMsIF90aGlzLm5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigxMiwgU3RyaW5nKF90aGlzLm5hbWUpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG5cbiAgICB0aGlzLmlkID0gJ3NjLWtleWZyYW1lcy0nICsgbmFtZTtcbiAgfVxuXG4gIEtleWZyYW1lcy5wcm90b3R5cGUuZ2V0TmFtZSA9IGZ1bmN0aW9uIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVzO1xufSgpO1xuXG4vLyBcblxuLyoqXG4gKiBpbmxpbmVkIHZlcnNpb24gb2ZcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvaHlwaGVuYXRlU3R5bGVOYW1lLmpzXG4gKi9cblxudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxuLy8gXG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjg3YWFiZGZlMWI3NDYxZTczMzFhYmIzNjAxZDllNmJiMjc1NDRiYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzXG5mdW5jdGlvbiBhZGRVbml0SWZOZWVkZWQobmFtZSwgdmFsdWUpIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FtaWxhamFjay9lc2xpbnQtcGx1Z2luLWZsb3d0eXBlLWVycm9ycy9pc3N1ZXMvMTMzXG4gIC8vICRGbG93Rml4TWVcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDAgJiYgIShuYW1lIGluIHVuaXRsZXNzKSkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7IC8vIFByZXN1bWVzIGltcGxpY2l0ICdweCcgc3VmZml4IGZvciB1bml0bGVzcyBudW1iZXJzXG4gIH1cblxuICByZXR1cm4gU3RyaW5nKHZhbHVlKS50cmltKCk7XG59XG5cbi8vIFxuXG4vKipcbiAqIEl0J3MgZmFsc2lzaCBub3QgZmFsc3kgYmVjYXVzZSAwIGlzIGFsbG93ZWQuXG4gKi9cbnZhciBpc0ZhbHNpc2ggPSBmdW5jdGlvbiBpc0ZhbHNpc2goY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rID09PSB1bmRlZmluZWQgfHwgY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IGZhbHNlIHx8IGNodW5rID09PSAnJztcbn07XG5cbnZhciBvYmpUb0NzcyA9IGZ1bmN0aW9uIG9ialRvQ3NzKG9iaiwgcHJldktleSkge1xuICB2YXIgY3NzID0gT2JqZWN0LmtleXMob2JqKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhaXNGYWxzaXNoKG9ialtrZXldKTtcbiAgfSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChvYmpba2V5XSkpIHJldHVybiBvYmpUb0NzcyhvYmpba2V5XSwga2V5KTtcbiAgICByZXR1cm4gaHlwaGVuYXRlU3R5bGVOYW1lKGtleSkgKyAnOiAnICsgYWRkVW5pdElmTmVlZGVkKGtleSwgb2JqW2tleV0pICsgJzsnO1xuICB9KS5qb2luKCcgJyk7XG4gIHJldHVybiBwcmV2S2V5ID8gcHJldktleSArICcge1xcbiAgJyArIGNzcyArICdcXG59JyA6IGNzcztcbn07XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oY2h1bmssIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2h1bmspKSB7XG4gICAgdmFyIHJ1bGVTZXQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGgsIHJlc3VsdDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICByZXN1bHQgPSBmbGF0dGVuKGNodW5rW2ldLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgY29udGludWU7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSBydWxlU2V0LnB1c2guYXBwbHkocnVsZVNldCwgcmVzdWx0KTtlbHNlIHJ1bGVTZXQucHVzaChyZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiBydWxlU2V0O1xuICB9XG5cbiAgaWYgKGlzRmFsc2lzaChjaHVuaykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qIEhhbmRsZSBvdGhlciBjb21wb25lbnRzICovXG4gIGlmIChpc1N0eWxlZENvbXBvbmVudChjaHVuaykpIHtcbiAgICByZXR1cm4gJy4nICsgY2h1bmsuc3R5bGVkQ29tcG9uZW50SWQ7XG4gIH1cblxuICAvKiBFaXRoZXIgZXhlY3V0ZSBvciBkZWZlciB0aGUgZnVuY3Rpb24gKi9cbiAgaWYgKGlzRnVuY3Rpb24oY2h1bmspKSB7XG4gICAgaWYgKGV4ZWN1dGlvbkNvbnRleHQpIHtcbiAgICAgIHZhciBzaG91bGRUaHJvdyA9IGZhbHNlO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgICAgICBpZiAoaXNFbGVtZW50KG5ldyBjaHVuayhleGVjdXRpb25Db250ZXh0KSkpIHtcbiAgICAgICAgICBzaG91bGRUaHJvdyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogKi9cbiAgICAgIH1cblxuICAgICAgaWYgKHNob3VsZFRocm93KSB7XG4gICAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMTMsIGdldENvbXBvbmVudE5hbWUoY2h1bmspKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZsYXR0ZW4oY2h1bmsoZXhlY3V0aW9uQ29udGV4dCksIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuICAgIH0gZWxzZSByZXR1cm4gY2h1bms7XG4gIH1cblxuICBpZiAoY2h1bmsgaW5zdGFuY2VvZiBLZXlmcmFtZXMpIHtcbiAgICBpZiAoc3R5bGVTaGVldCkge1xuICAgICAgY2h1bmsuaW5qZWN0KHN0eWxlU2hlZXQpO1xuICAgICAgcmV0dXJuIGNodW5rLmdldE5hbWUoKTtcbiAgICB9IGVsc2UgcmV0dXJuIGNodW5rO1xuICB9XG5cbiAgLyogSGFuZGxlIG9iamVjdHMgKi9cbiAgcmV0dXJuIGlzUGxhaW5PYmplY3QoY2h1bmspID8gb2JqVG9Dc3MoY2h1bmspIDogY2h1bmsudG9TdHJpbmcoKTtcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGNzcyhzdHlsZXMpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGludGVycG9sYXRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChpc0Z1bmN0aW9uKHN0eWxlcykgfHwgaXNQbGFpbk9iamVjdChzdHlsZXMpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiBmbGF0dGVuKGludGVybGVhdmUoRU1QVFlfQVJSQVksIFtzdHlsZXNdLmNvbmNhdChpbnRlcnBvbGF0aW9ucykpKTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIGZsYXR0ZW4oaW50ZXJsZWF2ZShzdHlsZXMsIGludGVycG9sYXRpb25zKSk7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjb21wb25lbnRDb25zdHJ1Y3RvciwgdGFnKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBFTVBUWV9PQkpFQ1Q7XG5cbiAgaWYgKCFpc1ZhbGlkRWxlbWVudFR5cGUodGFnKSkge1xuICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMSwgU3RyaW5nKHRhZykpO1xuICB9XG5cbiAgLyogVGhpcyBpcyBjYWxsYWJsZSBkaXJlY3RseSBhcyBhIHRlbXBsYXRlIGZ1bmN0aW9uICovXG4gIC8vICRGbG93Rml4TWU6IE5vdCB0eXBlZCB0byBhdm9pZCBkZXN0cnVjdHVyaW5nIGFyZ3VtZW50c1xuICB2YXIgdGVtcGxhdGVGdW5jdGlvbiA9IGZ1bmN0aW9uIHRlbXBsYXRlRnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudENvbnN0cnVjdG9yKHRhZywgb3B0aW9ucywgY3NzLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgLyogSWYgY29uZmlnIG1ldGhvZHMgYXJlIGNhbGxlZCwgd3JhcCB1cCBhIG5ldyB0ZW1wbGF0ZSBmdW5jdGlvbiBhbmQgbWVyZ2Ugb3B0aW9ucyAqL1xuICB0ZW1wbGF0ZUZ1bmN0aW9uLndpdGhDb25maWcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNvbXBvbmVudENvbnN0cnVjdG9yLCB0YWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBjb25maWcpKTtcbiAgfTtcblxuICAvKiBNb2RpZnkvaW5qZWN0IG5ldyBwcm9wcyBhdCBydW50aW1lICovXG4gIHRlbXBsYXRlRnVuY3Rpb24uYXR0cnMgPSBmdW5jdGlvbiAoYXR0cnMpIHtcbiAgICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnMoY29tcG9uZW50Q29uc3RydWN0b3IsIHRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGF0dHJzOiBBcnJheS5wcm90b3R5cGUuY29uY2F0KG9wdGlvbnMuYXR0cnMsIGF0dHJzKS5maWx0ZXIoQm9vbGVhbilcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIHRlbXBsYXRlRnVuY3Rpb247XG59XG5cbi8vIFxuLy8gU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanMvYmxvYi9tYXN0ZXIvbXVybXVyaGFzaDJfZ2MuanNcbmZ1bmN0aW9uIG11cm11cmhhc2goYykge1xuICBmb3IgKHZhciBlID0gYy5sZW5ndGggfCAwLCBhID0gZSB8IDAsIGQgPSAwLCBiOyBlID49IDQ7KSB7XG4gICAgYiA9IGMuY2hhckNvZGVBdChkKSAmIDI1NSB8IChjLmNoYXJDb2RlQXQoKytkKSAmIDI1NSkgPDwgOCB8IChjLmNoYXJDb2RlQXQoKytkKSAmIDI1NSkgPDwgMTYgfCAoYy5jaGFyQ29kZUF0KCsrZCkgJiAyNTUpIDw8IDI0LCBiID0gMTU0MDQ4MzQ3NyAqIChiICYgNjU1MzUpICsgKCgxNTQwNDgzNDc3ICogKGIgPj4+IDE2KSAmIDY1NTM1KSA8PCAxNiksIGIgXj0gYiA+Pj4gMjQsIGIgPSAxNTQwNDgzNDc3ICogKGIgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYiA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KSwgYSA9IDE1NDA0ODM0NzcgKiAoYSAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChhID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpIF4gYiwgZSAtPSA0LCArK2Q7XG4gIH1cbiAgc3dpdGNoIChlKSB7XG4gICAgY2FzZSAzOlxuICAgICAgYSBePSAoYy5jaGFyQ29kZUF0KGQgKyAyKSAmIDI1NSkgPDwgMTY7XG4gICAgY2FzZSAyOlxuICAgICAgYSBePSAoYy5jaGFyQ29kZUF0KGQgKyAxKSAmIDI1NSkgPDwgODtcbiAgICBjYXNlIDE6XG4gICAgICBhIF49IGMuY2hhckNvZGVBdChkKSAmIDI1NSwgYSA9IDE1NDA0ODM0NzcgKiAoYSAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChhID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpO1xuICB9XG4gIGEgXj0gYSA+Pj4gMTM7XG4gIGEgPSAxNTQwNDgzNDc3ICogKGEgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYSA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KTtcbiAgcmV0dXJuIChhIF4gYSA+Pj4gMTUpID4+PiAwO1xufVxuXG4vLyBcbi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyogVGhpcyBpcyB0aGUgXCJjYXBhY2l0eVwiIG9mIG91ciBhbHBoYWJldCBpLmUuIDJ4MjYgZm9yIGFsbCBsZXR0ZXJzIHBsdXMgdGhlaXIgY2FwaXRhbGlzZWRcbiAqIGNvdW50ZXJwYXJ0cyAqL1xudmFyIGNoYXJzTGVuZ3RoID0gNTI7XG5cbi8qIHN0YXJ0IGF0IDc1IGZvciAnYScgdW50aWwgJ3onICgyNSkgYW5kIHRoZW4gc3RhcnQgYXQgNjUgZm9yIGNhcGl0YWxpc2VkIGxldHRlcnMgKi9cbnZhciBnZXRBbHBoYWJldGljQ2hhciA9IGZ1bmN0aW9uIGdldEFscGhhYmV0aWNDaGFyKGNvZGUpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSArIChjb2RlID4gMjUgPyAzOSA6IDk3KSk7XG59O1xuXG4vKiBpbnB1dCBhIG51bWJlciwgdXN1YWxseSBhIGhhc2ggYW5kIGNvbnZlcnQgaXQgdG8gYmFzZS01MiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShjb2RlKSB7XG4gIHZhciBuYW1lID0gJyc7XG4gIHZhciB4ID0gdm9pZCAwO1xuXG4gIC8qIGdldCBhIGNoYXIgYW5kIGRpdmlkZSBieSBhbHBoYWJldC1sZW5ndGggKi9cbiAgZm9yICh4ID0gY29kZTsgeCA+IGNoYXJzTGVuZ3RoOyB4ID0gTWF0aC5mbG9vcih4IC8gY2hhcnNMZW5ndGgpKSB7XG4gICAgbmFtZSA9IGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lO1xuICB9XG5cbiAgcmV0dXJuIGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gaGFzRnVuY3Rpb25PYmplY3RLZXkob2JqKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTdGF0aWNSdWxlcyhydWxlcywgYXR0cnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBydWxlID0gcnVsZXNbaV07XG5cbiAgICAvLyByZWN1cnNpdmUgY2FzZVxuICAgIGlmIChBcnJheS5pc0FycmF5KHJ1bGUpICYmICFpc1N0YXRpY1J1bGVzKHJ1bGUsIGF0dHJzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihydWxlKSAmJiAhaXNTdHlsZWRDb21wb25lbnQocnVsZSkpIHtcbiAgICAgIC8vIGZ1bmN0aW9ucyBhcmUgYWxsb3dlZCB0byBiZSBzdGF0aWMgaWYgdGhleSdyZSBqdXN0IGJlaW5nXG4gICAgICAvLyB1c2VkIHRvIGdldCB0aGUgY2xhc3NuYW1lIG9mIGEgbmVzdGVkIHN0eWxlZCBjb21wb25lbnRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXR0cnMuc29tZShmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHgpIHx8IGhhc0Z1bmN0aW9uT2JqZWN0S2V5KHgpO1xuICB9KSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBcblxudmFyIGlzSE1SRW5hYmxlZCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmhvdDtcblxuLyogY29tYmluZXMgaGFzaFN0ciAobXVybXVyaGFzaCkgYW5kIG5hbWVHZW5lcmF0b3IgZm9yIGNvbnZlbmllbmNlICovXG52YXIgaGFzaGVyID0gZnVuY3Rpb24gaGFzaGVyKHN0cikge1xuICByZXR1cm4gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShtdXJtdXJoYXNoKHN0cikpO1xufTtcblxuLypcbiBDb21wb25lbnRTdHlsZSBpcyBhbGwgdGhlIENTUy1zcGVjaWZpYyBzdHVmZiwgbm90XG4gdGhlIFJlYWN0LXNwZWNpZmljIHN0dWZmLlxuICovXG5cbnZhciBDb21wb25lbnRTdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50U3R5bGUocnVsZXMsIGF0dHJzLCBjb21wb25lbnRJZCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBvbmVudFN0eWxlKTtcblxuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICB0aGlzLmlzU3RhdGljID0gIWlzSE1SRW5hYmxlZCAmJiBpc1N0YXRpY1J1bGVzKHJ1bGVzLCBhdHRycyk7XG4gICAgdGhpcy5jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuXG4gICAgaWYgKCFTdHlsZVNoZWV0Lm1hc3Rlci5oYXNJZChjb21wb25lbnRJZCkpIHtcbiAgICAgIFN0eWxlU2hlZXQubWFzdGVyLmRlZmVycmVkSW5qZWN0KGNvbXBvbmVudElkLCBbXSk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICAgKiBGbGF0dGVucyBhIHJ1bGUgc2V0IGludG8gdmFsaWQgQ1NTXG4gICAgICogSGFzaGVzIGl0LCB3cmFwcyB0aGUgd2hvbGUgY2h1bmsgaW4gYSAuaGFzaDEyMzQge31cbiAgICAgKiBSZXR1cm5zIHRoZSBoYXNoIHRvIGJlIGluamVjdGVkIG9uIHJlbmRlcigpXG4gICAgICogKi9cblxuXG4gIENvbXBvbmVudFN0eWxlLnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyA9IGZ1bmN0aW9uIGdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgaXNTdGF0aWMgPSB0aGlzLmlzU3RhdGljLFxuICAgICAgICBjb21wb25lbnRJZCA9IHRoaXMuY29tcG9uZW50SWQsXG4gICAgICAgIGxhc3RDbGFzc05hbWUgPSB0aGlzLmxhc3RDbGFzc05hbWU7XG5cbiAgICBpZiAoSVNfQlJPV1NFUiAmJiBpc1N0YXRpYyAmJiB0eXBlb2YgbGFzdENsYXNzTmFtZSA9PT0gJ3N0cmluZycgJiYgc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIGxhc3RDbGFzc05hbWUpKSB7XG4gICAgICByZXR1cm4gbGFzdENsYXNzTmFtZTtcbiAgICB9XG5cbiAgICB2YXIgZmxhdENTUyA9IGZsYXR0ZW4odGhpcy5ydWxlcywgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCk7XG4gICAgdmFyIG5hbWUgPSBoYXNoZXIodGhpcy5jb21wb25lbnRJZCArIGZsYXRDU1Muam9pbignJykpO1xuICAgIGlmICghc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIG5hbWUpKSB7XG4gICAgICBzdHlsZVNoZWV0LmluamVjdCh0aGlzLmNvbXBvbmVudElkLCBzdHJpbmdpZnlSdWxlcyhmbGF0Q1NTLCAnLicgKyBuYW1lLCB1bmRlZmluZWQsIGNvbXBvbmVudElkKSwgbmFtZSk7XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0Q2xhc3NOYW1lID0gbmFtZTtcbiAgICByZXR1cm4gbmFtZTtcbiAgfTtcblxuICBDb21wb25lbnRTdHlsZS5nZW5lcmF0ZU5hbWUgPSBmdW5jdGlvbiBnZW5lcmF0ZU5hbWUoc3RyKSB7XG4gICAgcmV0dXJuIGhhc2hlcihzdHIpO1xuICB9O1xuXG4gIHJldHVybiBDb21wb25lbnRTdHlsZTtcbn0oKTtcblxuLy8gXG5cbnZhciBMSU1JVCA9IDIwMDtcblxudmFyIGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyA9IChmdW5jdGlvbiAoZGlzcGxheU5hbWUpIHtcbiAgdmFyIGdlbmVyYXRlZENsYXNzZXMgPSB7fTtcbiAgdmFyIHdhcm5pbmdTZWVuID0gZmFsc2U7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAoIXdhcm5pbmdTZWVuKSB7XG4gICAgICBnZW5lcmF0ZWRDbGFzc2VzW2NsYXNzTmFtZV0gPSB0cnVlO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKGdlbmVyYXRlZENsYXNzZXMpLmxlbmd0aCA+PSBMSU1JVCkge1xuICAgICAgICAvLyBVbmFibGUgdG8gZmluZCBsYXRlc3RSdWxlIGluIHRlc3QgZW52aXJvbm1lbnQuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUsIHByZWZlci10ZW1wbGF0ZSAqL1xuICAgICAgICBjb25zb2xlLndhcm4oJ092ZXIgJyArIExJTUlUICsgJyBjbGFzc2VzIHdlcmUgZ2VuZXJhdGVkIGZvciBjb21wb25lbnQgJyArIGRpc3BsYXlOYW1lICsgJy4gXFxuJyArICdDb25zaWRlciB1c2luZyB0aGUgYXR0cnMgbWV0aG9kLCB0b2dldGhlciB3aXRoIGEgc3R5bGUgb2JqZWN0IGZvciBmcmVxdWVudGx5IGNoYW5nZWQgc3R5bGVzLlxcbicgKyAnRXhhbXBsZTpcXG4nICsgJyAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyh7XFxuJyArICcgICAgc3R5bGU6ICh7IGJhY2tncm91bmQgfSkgPT4gKHtcXG4nICsgJyAgICAgIGJhY2tncm91bmQsXFxuJyArICcgICAgfSksXFxuJyArICcgIH0pYHdpZHRoOiAxMDAlO2BcXG5cXG4nICsgJyAgPENvbXBvbmVudCAvPicpO1xuICAgICAgICB3YXJuaW5nU2VlbiA9IHRydWU7XG4gICAgICAgIGdlbmVyYXRlZENsYXNzZXMgPSB7fTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KTtcblxuLy8gXG5cbnZhciBkZXRlcm1pbmVUaGVtZSA9IChmdW5jdGlvbiAocHJvcHMsIGZhbGxiYWNrVGhlbWUpIHtcbiAgdmFyIGRlZmF1bHRQcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogRU1QVFlfT0JKRUNUO1xuXG4gIC8vIFByb3BzIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciBUaGVtZVByb3ZpZGVyLCB3aGljaCBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXJcbiAgLy8gZGVmYXVsdFByb3BzLCBidXQgUmVhY3QgYXV0b21hdGljYWxseSBwdXRzIGRlZmF1bHRQcm9wcyBvbiBwcm9wcy5cblxuICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzLCBmbG93dHlwZS1lcnJvcnMvc2hvdy1lcnJvcnMgKi9cbiAgdmFyIGlzRGVmYXVsdFRoZW1lID0gZGVmYXVsdFByb3BzID8gcHJvcHMudGhlbWUgPT09IGRlZmF1bHRQcm9wcy50aGVtZSA6IGZhbHNlO1xuICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZSAmJiAhaXNEZWZhdWx0VGhlbWUgPyBwcm9wcy50aGVtZSA6IGZhbGxiYWNrVGhlbWUgfHwgZGVmYXVsdFByb3BzLnRoZW1lO1xuICAvKiBlc2xpbnQtZW5hYmxlICovXG5cbiAgcmV0dXJuIHRoZW1lO1xufSk7XG5cbi8vIFxudmFyIGVzY2FwZVJlZ2V4ID0gL1tbXFxdLiMqJD48K349fF46KCksXCInYC1dKy9nO1xudmFyIGRhc2hlc0F0RW5kcyA9IC8oXi18LSQpL2c7XG5cbi8qKlxuICogVE9ETzogRXhwbG9yZSB1c2luZyBDU1MuZXNjYXBlIHdoZW4gaXQgYmVjb21lcyBtb3JlIGF2YWlsYWJsZVxuICogaW4gZXZlcmdyZWVuIGJyb3dzZXJzLlxuICovXG5mdW5jdGlvbiBlc2NhcGUoc3RyKSB7XG4gIHJldHVybiBzdHJcbiAgLy8gUmVwbGFjZSBhbGwgcG9zc2libGUgQ1NTIHNlbGVjdG9yc1xuICAucmVwbGFjZShlc2NhcGVSZWdleCwgJy0nKVxuXG4gIC8vIFJlbW92ZSBleHRyYW5lb3VzIGh5cGhlbnMgYXQgdGhlIHN0YXJ0IGFuZCBlbmRcbiAgLnJlcGxhY2UoZGFzaGVzQXRFbmRzLCAnJyk7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBpc1RhZyh0YXJnZXQpIHtcbiAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnICYmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gdGFyZ2V0LmNoYXJBdCgwKSA9PT0gdGFyZ2V0LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpIDogdHJ1ZSk7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBnZW5lcmF0ZURpc3BsYXlOYW1lKHRhcmdldCkge1xuICAvLyAkRmxvd0ZpeE1lXG4gIHJldHVybiBpc1RhZyh0YXJnZXQpID8gJ3N0eWxlZC4nICsgdGFyZ2V0IDogJ1N0eWxlZCgnICsgZ2V0Q29tcG9uZW50TmFtZSh0YXJnZXQpICsgJyknO1xufVxuXG52YXIgX1RZUEVfU1RBVElDUztcblxudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgVFlQRV9TVEFUSUNTID0gKF9UWVBFX1NUQVRJQ1MgPSB7fSwgX1RZUEVfU1RBVElDU1tGb3J3YXJkUmVmXSA9IHtcbiAgJCR0eXBlb2Y6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZVxufSwgX1RZUEVfU1RBVElDUyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSQxID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICAgIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgICBfT2JqZWN0JGdldE93blByb3BlcnQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgIGdldE93blByb3BlcnR5U3ltYm9scyA9IF9PYmplY3QkZ2V0T3duUHJvcGVydCA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gW107XG59IDogX09iamVjdCRnZXRPd25Qcm9wZXJ0LFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBhcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gYXJyYXlQcm90b3R5cGUuY29uY2F0KGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KSxcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBUWVBFX1NUQVRJQ1NbdGFyZ2V0Q29tcG9uZW50LiQkdHlwZW9mXSB8fCBSRUFDVF9TVEFUSUNTO1xuXG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBUWVBFX1NUQVRJQ1Nbc291cmNlQ29tcG9uZW50LiQkdHlwZW9mXSB8fCBSRUFDVF9TVEFUSUNTO1xuXG4gICAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHZvaWQgMDtcbiAgICB2YXIga2V5ID0gdm9pZCAwO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBsdXNwbHVzXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKFxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiZcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgIGRlZmluZVByb3BlcnR5JDEodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8qIGZhaWwgc2lsZW50bHkgKi9cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxuLy8gXG5mdW5jdGlvbiBpc0Rlcml2ZWRSZWFjdENvbXBvbmVudChmbikge1xuICByZXR1cm4gISEoZm4gJiYgZm4ucHJvdG90eXBlICYmIGZuLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuLy8gXG4vLyBIZWxwZXIgdG8gY2FsbCBhIGdpdmVuIGZ1bmN0aW9uLCBvbmx5IG9uY2VcbnZhciBvbmNlID0gKGZ1bmN0aW9uIChjYikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGNiLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH07XG59KTtcblxuLy8gXG5cbnZhciBUaGVtZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG5cbnZhciBUaGVtZUNvbnN1bWVyID0gVGhlbWVDb250ZXh0LkNvbnN1bWVyO1xuXG4vKipcbiAqIFByb3ZpZGUgYSB0aGVtZSB0byBhbiBlbnRpcmUgcmVhY3QgY29tcG9uZW50IHRyZWUgdmlhIGNvbnRleHRcbiAqL1xuXG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKFRoZW1lUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBUaGVtZVByb3ZpZGVyKTtcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5nZXRDb250ZXh0ID0gbWVtb2l6ZShfdGhpcy5nZXRDb250ZXh0LmJpbmQoX3RoaXMpKTtcbiAgICBfdGhpcy5yZW5kZXJJbm5lciA9IF90aGlzLnJlbmRlcklubmVyLmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuY2hpbGRyZW4pIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUaGVtZUNvbnRleHQuQ29uc3VtZXIsXG4gICAgICBudWxsLFxuICAgICAgdGhpcy5yZW5kZXJJbm5lclxuICAgICk7XG4gIH07XG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUucmVuZGVySW5uZXIgPSBmdW5jdGlvbiByZW5kZXJJbm5lcihvdXRlclRoZW1lKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLmdldENvbnRleHQodGhpcy5wcm9wcy50aGVtZSwgb3V0ZXJUaGVtZSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFRoZW1lQ29udGV4dC5Qcm92aWRlcixcbiAgICAgIHsgdmFsdWU6IGNvbnRleHQgfSxcbiAgICAgIFJlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbilcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHRoZW1lIGZyb20gdGhlIHByb3BzLCBzdXBwb3J0aW5nIGJvdGggKG91dGVyVGhlbWUpID0+IHt9XG4gICAqIGFzIHdlbGwgYXMgb2JqZWN0IG5vdGF0aW9uXG4gICAqL1xuXG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUuZ2V0VGhlbWUgPSBmdW5jdGlvbiBnZXRUaGVtZSh0aGVtZSwgb3V0ZXJUaGVtZSkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHRoZW1lKSkge1xuICAgICAgdmFyIG1lcmdlZFRoZW1lID0gdGhlbWUob3V0ZXJUaGVtZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIChtZXJnZWRUaGVtZSA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSB8fCAodHlwZW9mIG1lcmdlZFRoZW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihtZXJnZWRUaGVtZSkpICE9PSAnb2JqZWN0JykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig3KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICAgIH1cblxuICAgIGlmICh0aGVtZSA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSB8fCAodHlwZW9mIHRoZW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0aGVtZSkpICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG91dGVyVGhlbWUsIHRoZW1lKTtcbiAgfTtcblxuICBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZS5nZXRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q29udGV4dCh0aGVtZSwgb3V0ZXJUaGVtZSkge1xuICAgIHJldHVybiB0aGlzLmdldFRoZW1lKHRoZW1lLCBvdXRlclRoZW1lKTtcbiAgfTtcblxuICByZXR1cm4gVGhlbWVQcm92aWRlcjtcbn0oQ29tcG9uZW50KTtcblxuLy8gXG5cbnZhciBTZXJ2ZXJTdHlsZVNoZWV0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZXJ2ZXJTdHlsZVNoZWV0KCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFNlcnZlclN0eWxlU2hlZXQpO1xuXG4gICAgLyogVGhlIG1hc3RlciBzaGVldCBtaWdodCBiZSByZXNldCwgc28ga2VlcCBhIHJlZmVyZW5jZSBoZXJlICovXG4gICAgdGhpcy5tYXN0ZXJTaGVldCA9IFN0eWxlU2hlZXQubWFzdGVyO1xuICAgIHRoaXMuaW5zdGFuY2UgPSB0aGlzLm1hc3RlclNoZWV0LmNsb25lKCk7XG4gICAgdGhpcy5zZWFsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrIHRoZSBTZXJ2ZXJTdHlsZVNoZWV0IGFzIGJlaW5nIGZ1bGx5IGVtaXR0ZWQgYW5kIG1hbnVhbGx5IEdDIGl0IGZyb20gdGhlXG4gICAqIFN0eWxlU2hlZXQgc2luZ2xldG9uLlxuICAgKi9cblxuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLnNlYWwgPSBmdW5jdGlvbiBzZWFsKCkge1xuICAgIGlmICghdGhpcy5zZWFsZWQpIHtcbiAgICAgIC8qIFJlbW92ZSBzZWFsZWQgU3R5bGVTaGVldHMgZnJvbSB0aGUgbWFzdGVyIHNoZWV0ICovXG4gICAgICB2YXIgaW5kZXggPSB0aGlzLm1hc3RlclNoZWV0LmNsb25lcy5pbmRleE9mKHRoaXMuaW5zdGFuY2UpO1xuICAgICAgdGhpcy5tYXN0ZXJTaGVldC5jbG9uZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHRoaXMuc2VhbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuY29sbGVjdFN0eWxlcyA9IGZ1bmN0aW9uIGNvbGxlY3RTdHlsZXMoY2hpbGRyZW4pIHtcbiAgICBpZiAodGhpcy5zZWFsZWQpIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdHlsZVNoZWV0TWFuYWdlcixcbiAgICAgIHsgc2hlZXQ6IHRoaXMuaW5zdGFuY2UgfSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5nZXRTdHlsZVRhZ3MgPSBmdW5jdGlvbiBnZXRTdHlsZVRhZ3MoKSB7XG4gICAgdGhpcy5zZWFsKCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UudG9IVE1MKCk7XG4gIH07XG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuZ2V0U3R5bGVFbGVtZW50ID0gZnVuY3Rpb24gZ2V0U3R5bGVFbGVtZW50KCkge1xuICAgIHRoaXMuc2VhbCgpO1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlLnRvUmVhY3RFbGVtZW50cygpO1xuICB9O1xuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLmludGVybGVhdmVXaXRoTm9kZVN0cmVhbSA9IGZ1bmN0aW9uIGludGVybGVhdmVXaXRoTm9kZVN0cmVhbShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDMpO1xuICAgIH1cblxuICAgIC8qIHRoZSB0YWcgaW5kZXgga2VlcHMgdHJhY2sgb2Ygd2hpY2ggdGFncyBoYXZlIGFscmVhZHkgYmVlbiBlbWl0dGVkICovXG4gICAgdmFyIGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZTtcblxuICAgIHZhciBpbnN0YW5jZVRhZ0luZGV4ID0gMDtcblxuICAgIHZhciBzdHJlYW1BdHRyID0gU0NfU1RSRUFNX0FUVFIgKyAnPVwidHJ1ZVwiJztcblxuICAgIHZhciB0cmFuc2Zvcm1lciA9IG5ldyBzdHJlYW0uVHJhbnNmb3JtKHtcbiAgICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gYXBwZW5kU3R5bGVDaHVua3MoY2h1bmssIC8qIGVuY29kaW5nICovXywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHRhZ3MgPSBpbnN0YW5jZS50YWdzO1xuXG4gICAgICAgIHZhciBodG1sID0gJyc7XG5cbiAgICAgICAgLyogcmV0cmlldmUgaHRtbCBmb3IgZWFjaCBuZXcgc3R5bGUgdGFnICovXG4gICAgICAgIGZvciAoOyBpbnN0YW5jZVRhZ0luZGV4IDwgdGFncy5sZW5ndGg7IGluc3RhbmNlVGFnSW5kZXggKz0gMSkge1xuICAgICAgICAgIHZhciB0YWcgPSB0YWdzW2luc3RhbmNlVGFnSW5kZXhdO1xuICAgICAgICAgIGh0bWwgKz0gdGFnLnRvSFRNTChzdHJlYW1BdHRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGZvcmNlIG91ciBTdHlsZVNoZWV0cyB0byBlbWl0IGVudGlyZWx5IG5ldyB0YWdzICovXG4gICAgICAgIGluc3RhbmNlLnNlYWxBbGxUYWdzKCk7XG5cbiAgICAgICAgLyogcHJlcGVuZCBzdHlsZSBodG1sIHRvIGNodW5rICovXG4gICAgICAgIHRoaXMucHVzaChodG1sICsgY2h1bmspO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhZGFibGVTdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zZWFsKCk7XG4gICAgfSk7XG4gICAgcmVhZGFibGVTdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgX3RoaXMuc2VhbCgpO1xuXG4gICAgICAvLyBmb3J3YXJkIHRoZSBlcnJvciB0byB0aGUgdHJhbnNmb3JtIHN0cmVhbVxuICAgICAgdHJhbnNmb3JtZXIuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlYWRhYmxlU3RyZWFtLnBpcGUodHJhbnNmb3JtZXIpO1xuICB9O1xuXG4gIHJldHVybiBTZXJ2ZXJTdHlsZVNoZWV0O1xufSgpO1xuXG4vLyBcblxudmFyIFN0eWxlU2hlZXRDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuXG52YXIgU3R5bGVTaGVldENvbnN1bWVyID0gU3R5bGVTaGVldENvbnRleHQuQ29uc3VtZXI7XG5cbnZhciBTdHlsZVNoZWV0TWFuYWdlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKFN0eWxlU2hlZXRNYW5hZ2VyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdHlsZVNoZWV0TWFuYWdlcihwcm9wcykge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlU2hlZXRNYW5hZ2VyKTtcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5nZXRDb250ZXh0ID0gbWVtb2l6ZShfdGhpcy5nZXRDb250ZXh0KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBTdHlsZVNoZWV0TWFuYWdlci5wcm90b3R5cGUuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uIGdldENvbnRleHQoc2hlZXQsIHRhcmdldCkge1xuICAgIGlmIChzaGVldCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gbmV3IFN0eWxlU2hlZXQodGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig0KTtcbiAgICB9XG4gIH07XG5cbiAgU3R5bGVTaGVldE1hbmFnZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHNoZWV0ID0gX3Byb3BzLnNoZWV0LFxuICAgICAgICB0YXJnZXQgPSBfcHJvcHMudGFyZ2V0O1xuXG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN0eWxlU2hlZXRDb250ZXh0LlByb3ZpZGVyLFxuICAgICAgeyB2YWx1ZTogdGhpcy5nZXRDb250ZXh0KHNoZWV0LCB0YXJnZXQpIH0sXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXRNYW5hZ2VyO1xufShDb21wb25lbnQpO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVTaGVldE1hbmFnZXIucHJvcFR5cGVzID0ge1xuICBzaGVldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmluc3RhbmNlT2YoU3R5bGVTaGVldCksIFByb3BUeXBlcy5pbnN0YW5jZU9mKFNlcnZlclN0eWxlU2hlZXQpXSksXG5cbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVuZENoaWxkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pXG59IDogdm9pZCAwO1xuXG4vLyBcblxudmFyIGRpZFdhcm5BYm91dENsYXNzTmFtZVVzYWdlID0gbmV3IFNldCgpO1xuXG52YXIgY2xhc3NOYW1lVXNhZ2VDaGVja0luamVjdG9yID0gKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgdmFyIGVsZW1lbnRDbGFzc05hbWUgPSAnJztcblxuICB2YXIgdGFyZ2V0Q0RNID0gdGFyZ2V0LmNvbXBvbmVudERpZE1vdW50O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICB0YXJnZXQuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodHlwZW9mIHRhcmdldENETSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGFyZ2V0Q0RNLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcndhcmRUYXJnZXQgPSB0aGlzLnByb3BzLmZvcndhcmRlZENvbXBvbmVudC50YXJnZXQ7XG5cbiAgICBpZiAodGFyZ2V0LnByb3BzICYmIHRhcmdldC5wcm9wcy5zdXBwcmVzc0NsYXNzTmFtZVdhcm5pbmcgfHwgdGFyZ2V0LmF0dHJzICYmIHRhcmdldC5hdHRycy5zdXBwcmVzc0NsYXNzTmFtZVdhcm5pbmcgfHwgZGlkV2FybkFib3V0Q2xhc3NOYW1lVXNhZ2UuaGFzKGZvcndhcmRUYXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGlkV2FybkFib3V0Q2xhc3NOYW1lVXNhZ2UuYWRkKGZvcndhcmRUYXJnZXQpO1xuXG4gICAgdmFyIGNsYXNzTmFtZXMgPSBlbGVtZW50Q2xhc3NOYW1lLnJlcGxhY2UoLyArL2csICcgJykudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWZpbmQtZG9tLW5vZGVcbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBzZWxlY3RvciA9IGNsYXNzTmFtZXMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gJy4nICsgcztcbiAgICB9KS5qb2luKCcnKTtcblxuICAgIGlmIChub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgIWNsYXNzTmFtZXMuZXZlcnkoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0ICYmIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gICAgfSkgJiYgIW5vZGUucXVlcnlTZWxlY3RvcihzZWxlY3RvcikpIHtcbiAgICAgIGNvbnNvbGUud2FybignSXQgbG9va3MgbGlrZSB5b3VcXCd2ZSB3cmFwcGVkIHN0eWxlZCgpIGFyb3VuZCB5b3VyIFJlYWN0IGNvbXBvbmVudCAoJyArIGdldENvbXBvbmVudE5hbWUoZm9yd2FyZFRhcmdldCkgKyAnKSwgYnV0IHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYmVpbmcgcGFzc2VkIGRvd24gdG8gYSBjaGlsZC4gTm8gc3R5bGVzIHdpbGwgYmUgcmVuZGVyZWQgdW5sZXNzIGNsYXNzTmFtZSBpcyBjb21wb3NlZCB3aXRoaW4geW91ciBSZWFjdCBjb21wb25lbnQuJyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwcmV2UmVuZGVySW5uZXIgPSB0YXJnZXQucmVuZGVySW5uZXI7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIHRhcmdldC5yZW5kZXJJbm5lciA9IGZ1bmN0aW9uIHJlbmRlcklubmVyKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0gcHJldlJlbmRlcklubmVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXG4gICAgZWxlbWVudENsYXNzTmFtZSA9IGVsZW1lbnQucHJvcHMuY2xhc3NOYW1lO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH07XG59KTtcblxuLy8gXG5cbnZhciBpZGVudGlmaWVycyA9IHt9O1xuXG4vKiBXZSBkZXBlbmQgb24gY29tcG9uZW50cyBoYXZpbmcgdW5pcXVlIElEcyAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVJZChfQ29tcG9uZW50U3R5bGUsIF9kaXNwbGF5TmFtZSwgcGFyZW50Q29tcG9uZW50SWQpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gdHlwZW9mIF9kaXNwbGF5TmFtZSAhPT0gJ3N0cmluZycgPyAnc2MnIDogZXNjYXBlKF9kaXNwbGF5TmFtZSk7XG5cbiAgLyoqXG4gICAqIFRoaXMgZW5zdXJlcyB1bmlxdWVuZXNzIGlmIHR3byBjb21wb25lbnRzIGhhcHBlbiB0byBzaGFyZVxuICAgKiB0aGUgc2FtZSBkaXNwbGF5TmFtZS5cbiAgICovXG4gIHZhciBuciA9IChpZGVudGlmaWVyc1tkaXNwbGF5TmFtZV0gfHwgMCkgKyAxO1xuICBpZGVudGlmaWVyc1tkaXNwbGF5TmFtZV0gPSBucjtcblxuICB2YXIgY29tcG9uZW50SWQgPSBkaXNwbGF5TmFtZSArICctJyArIF9Db21wb25lbnRTdHlsZS5nZW5lcmF0ZU5hbWUoZGlzcGxheU5hbWUgKyBucik7XG5cbiAgcmV0dXJuIHBhcmVudENvbXBvbmVudElkID8gcGFyZW50Q29tcG9uZW50SWQgKyAnLScgKyBjb21wb25lbnRJZCA6IGNvbXBvbmVudElkO1xufVxuXG4vLyAkRmxvd0ZpeE1lXG5cbnZhciBTdHlsZWRDb21wb25lbnQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBpbmhlcml0cyhTdHlsZWRDb21wb25lbnQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0eWxlZENvbXBvbmVudCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdHlsZWRDb21wb25lbnQpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuYXR0cnMgPSB7fTtcblxuICAgIF90aGlzLnJlbmRlck91dGVyID0gX3RoaXMucmVuZGVyT3V0ZXIuYmluZChfdGhpcyk7XG4gICAgX3RoaXMucmVuZGVySW5uZXIgPSBfdGhpcy5yZW5kZXJJbm5lci5iaW5kKF90aGlzKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBfdGhpcy53YXJuSW5uZXJSZWYgPSBvbmNlKGZ1bmN0aW9uIChkaXNwbGF5TmFtZSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS53YXJuKCdUaGUgXCJpbm5lclJlZlwiIEFQSSBoYXMgYmVlbiByZW1vdmVkIGluIHN0eWxlZC1jb21wb25lbnRzIHY0IGluIGZhdm9yIG9mIFJlYWN0IDE2IHJlZiBmb3J3YXJkaW5nLCB1c2UgXCJyZWZcIiBpbnN0ZWFkIGxpa2UgYSB0eXBpY2FsIGNvbXBvbmVudC4gXCJpbm5lclJlZlwiIHdhcyBkZXRlY3RlZCBvbiBjb21wb25lbnQgXCInICsgZGlzcGxheU5hbWUgKyAnXCIuJylcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy53YXJuQXR0cnNGbk9iamVjdEtleURlcHJlY2F0ZWQgPSBvbmNlKGZ1bmN0aW9uIChrZXksIGRpc3BsYXlOYW1lKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0Z1bmN0aW9ucyBhcyBvYmplY3QtZm9ybSBhdHRycyh7fSkga2V5cyBhcmUgbm93IGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIG9mIHN0eWxlZC1jb21wb25lbnRzLiBTd2l0Y2ggdG8gdGhlIG5ldyBhdHRycyhwcm9wcyA9PiAoe30pKSBzeW50YXggaW5zdGVhZCBmb3IgZWFzaWVyIGFuZCBtb3JlIHBvd2VyZnVsIGNvbXBvc2l0aW9uLiBUaGUgYXR0cnMga2V5IGluIHF1ZXN0aW9uIGlzIFwiJyArIGtleSArICdcIiBvbiBjb21wb25lbnQgXCInICsgZGlzcGxheU5hbWUgKyAnXCIuJylcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy53YXJuTm9uU3R5bGVkQ29tcG9uZW50QXR0cnNPYmplY3RLZXkgPSBvbmNlKGZ1bmN0aW9uIChrZXksIGRpc3BsYXlOYW1lKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0l0IGxvb2tzIGxpa2UgeW91XFwndmUgdXNlZCBhIG5vbiBzdHlsZWQtY29tcG9uZW50IGFzIHRoZSB2YWx1ZSBmb3IgdGhlIFwiJyArIGtleSArICdcIiBwcm9wIGluIGFuIG9iamVjdC1mb3JtIGF0dHJzIGNvbnN0cnVjdG9yIG9mIFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLlxcbicgKyAnWW91IHNob3VsZCB1c2UgdGhlIG5ldyBmdW5jdGlvbi1mb3JtIGF0dHJzIGNvbnN0cnVjdG9yIHdoaWNoIGF2b2lkcyB0aGlzIGlzc3VlOiBhdHRycyhwcm9wcyA9PiAoeyB5b3VyU3R1ZmYgfSkpXFxuJyArIFwiVG8gY29udGludWUgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgb2JqZWN0IHN5bnRheCwgeW91J2xsIG5lZWQgdG8gd3JhcCB5b3VyIGNvbXBvbmVudCBwcm9wIGluIGEgZnVuY3Rpb24gdG8gbWFrZSBpdCBhdmFpbGFibGUgaW5zaWRlIHRoZSBzdHlsZWQgY29tcG9uZW50ICh5b3UnbGwgc3RpbGwgZ2V0IHRoZSBkZXByZWNhdGlvbiB3YXJuaW5nIHRob3VnaC4pXFxuXCIgKyAoJ0ZvciBleGFtcGxlLCB7ICcgKyBrZXkgKyAnOiAoKSA9PiBJbm5lckNvbXBvbmVudCB9IGluc3RlYWQgb2YgeyAnICsga2V5ICsgJzogSW5uZXJDb21wb25lbnQgfScpKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgSVNfQlJPV1NFUikge1xuICAgICAgY2xhc3NOYW1lVXNhZ2VDaGVja0luamVjdG9yKF90aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdHlsZVNoZWV0Q29uc3VtZXIsXG4gICAgICBudWxsLFxuICAgICAgdGhpcy5yZW5kZXJPdXRlclxuICAgICk7XG4gIH07XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXJPdXRlciA9IGZ1bmN0aW9uIHJlbmRlck91dGVyKCkge1xuICAgIHZhciBzdHlsZVNoZWV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBTdHlsZVNoZWV0Lm1hc3RlcjtcblxuICAgIHRoaXMuc3R5bGVTaGVldCA9IHN0eWxlU2hlZXQ7XG5cbiAgICAvLyBObyBuZWVkIHRvIHN1YnNjcmliZSBhIHN0YXRpYyBjb21wb25lbnQgdG8gdGhlbWUgY2hhbmdlcywgaXQgd29uJ3QgY2hhbmdlIGFueXRoaW5nXG4gICAgaWYgKHRoaXMucHJvcHMuZm9yd2FyZGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlLmlzU3RhdGljKSByZXR1cm4gdGhpcy5yZW5kZXJJbm5lcigpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUaGVtZUNvbnN1bWVyLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMucmVuZGVySW5uZXJcbiAgICApO1xuICB9O1xuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVySW5uZXIgPSBmdW5jdGlvbiByZW5kZXJJbm5lcih0aGVtZSkge1xuICAgIHZhciBfcHJvcHMkZm9yd2FyZGVkQ29tcG8gPSB0aGlzLnByb3BzLmZvcndhcmRlZENvbXBvbmVudCxcbiAgICAgICAgY29tcG9uZW50U3R5bGUgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8uY29tcG9uZW50U3R5bGUsXG4gICAgICAgIGRlZmF1bHRQcm9wcyA9IF9wcm9wcyRmb3J3YXJkZWRDb21wby5kZWZhdWx0UHJvcHMsXG4gICAgICAgIGRpc3BsYXlOYW1lID0gX3Byb3BzJGZvcndhcmRlZENvbXBvLmRpc3BsYXlOYW1lLFxuICAgICAgICBmb2xkZWRDb21wb25lbnRJZHMgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8uZm9sZGVkQ29tcG9uZW50SWRzLFxuICAgICAgICBzdHlsZWRDb21wb25lbnRJZCA9IF9wcm9wcyRmb3J3YXJkZWRDb21wby5zdHlsZWRDb21wb25lbnRJZCxcbiAgICAgICAgdGFyZ2V0ID0gX3Byb3BzJGZvcndhcmRlZENvbXBvLnRhcmdldDtcblxuXG4gICAgdmFyIGdlbmVyYXRlZENsYXNzTmFtZSA9IHZvaWQgMDtcbiAgICBpZiAoY29tcG9uZW50U3R5bGUuaXNTdGF0aWMpIHtcbiAgICAgIGdlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoRU1QVFlfT0JKRUNULCB0aGlzLnByb3BzKTtcbiAgICB9IGVsc2UgaWYgKHRoZW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGdlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoZGV0ZXJtaW5lVGhlbWUodGhpcy5wcm9wcywgdGhlbWUsIGRlZmF1bHRQcm9wcyksIHRoaXMucHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5lcmF0ZWRDbGFzc05hbWUgPSB0aGlzLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHRoaXMucHJvcHMudGhlbWUgfHwgRU1QVFlfT0JKRUNULCB0aGlzLnByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudFRvQmVDcmVhdGVkID0gdGhpcy5wcm9wcy5hcyB8fCB0aGlzLmF0dHJzLmFzIHx8IHRhcmdldDtcbiAgICB2YXIgaXNUYXJnZXRUYWcgPSBpc1RhZyhlbGVtZW50VG9CZUNyZWF0ZWQpO1xuXG4gICAgdmFyIHByb3BzRm9yRWxlbWVudCA9IHt9O1xuICAgIHZhciBjb21wdXRlZFByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMuYXR0cnMsIHRoaXMucHJvcHMpO1xuXG4gICAgdmFyIGtleSA9IHZvaWQgMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yIChrZXkgaW4gY29tcHV0ZWRQcm9wcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ID09PSAnaW5uZXJSZWYnICYmIGlzVGFyZ2V0VGFnKSB7XG4gICAgICAgIHRoaXMud2FybklubmVyUmVmKGRpc3BsYXlOYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PT0gJ2ZvcndhcmRlZENvbXBvbmVudCcgfHwga2V5ID09PSAnYXMnKSBjb250aW51ZTtlbHNlIGlmIChrZXkgPT09ICdmb3J3YXJkZWRSZWYnKSBwcm9wc0ZvckVsZW1lbnQucmVmID0gY29tcHV0ZWRQcm9wc1trZXldO2Vsc2UgaWYgKCFpc1RhcmdldFRhZyB8fCB2YWxpZEF0dHIoa2V5KSkge1xuICAgICAgICAvLyBEb24ndCBwYXNzIHRocm91Z2ggbm9uIEhUTUwgdGFncyB0aHJvdWdoIHRvIEhUTUwgZWxlbWVudHNcbiAgICAgICAgcHJvcHNGb3JFbGVtZW50W2tleV0gPSBjb21wdXRlZFByb3BzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuc3R5bGUgJiYgdGhpcy5hdHRycy5zdHlsZSkge1xuICAgICAgcHJvcHNGb3JFbGVtZW50LnN0eWxlID0gX2V4dGVuZHMoe30sIHRoaXMuYXR0cnMuc3R5bGUsIHRoaXMucHJvcHMuc3R5bGUpO1xuICAgIH1cblxuICAgIHByb3BzRm9yRWxlbWVudC5jbGFzc05hbWUgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0KGZvbGRlZENvbXBvbmVudElkcywgdGhpcy5wcm9wcy5jbGFzc05hbWUsIHN0eWxlZENvbXBvbmVudElkLCB0aGlzLmF0dHJzLmNsYXNzTmFtZSwgZ2VuZXJhdGVkQ2xhc3NOYW1lKS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoZWxlbWVudFRvQmVDcmVhdGVkLCBwcm9wc0ZvckVsZW1lbnQpO1xuICB9O1xuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUuYnVpbGRFeGVjdXRpb25Db250ZXh0ID0gZnVuY3Rpb24gYnVpbGRFeGVjdXRpb25Db250ZXh0KHRoZW1lLCBwcm9wcywgYXR0cnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBjb250ZXh0ID0gX2V4dGVuZHMoe30sIHByb3BzLCB7IHRoZW1lOiB0aGVtZSB9KTtcblxuICAgIGlmICghYXR0cnMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcblxuICAgIHRoaXMuYXR0cnMgPSB7fTtcblxuICAgIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJEZWYpIHtcbiAgICAgIHZhciByZXNvbHZlZEF0dHJEZWYgPSBhdHRyRGVmO1xuICAgICAgdmFyIGF0dHJEZWZXYXNGbiA9IGZhbHNlO1xuICAgICAgdmFyIGF0dHIgPSB2b2lkIDA7XG4gICAgICB2YXIga2V5ID0gdm9pZCAwO1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihyZXNvbHZlZEF0dHJEZWYpKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgcmVzb2x2ZWRBdHRyRGVmID0gcmVzb2x2ZWRBdHRyRGVmKGNvbnRleHQpO1xuICAgICAgICBhdHRyRGVmV2FzRm4gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBndWFyZC1mb3ItaW4gKi9cbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGZvciAoa2V5IGluIHJlc29sdmVkQXR0ckRlZikge1xuICAgICAgICBhdHRyID0gcmVzb2x2ZWRBdHRyRGVmW2tleV07XG5cbiAgICAgICAgaWYgKCFhdHRyRGVmV2FzRm4pIHtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihhdHRyKSAmJiAhaXNEZXJpdmVkUmVhY3RDb21wb25lbnQoYXR0cikgJiYgIWlzU3R5bGVkQ29tcG9uZW50KGF0dHIpKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBfdGhpczIud2FybkF0dHJzRm5PYmplY3RLZXlEZXByZWNhdGVkKGtleSwgcHJvcHMuZm9yd2FyZGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXR0ciA9IGF0dHIoY29udGV4dCk7XG5cbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGF0dHIpKSB7XG4gICAgICAgICAgICAgIF90aGlzMi53YXJuTm9uU3R5bGVkQ29tcG9uZW50QXR0cnNPYmplY3RLZXkoa2V5LCBwcm9wcy5mb3J3YXJkZWRDb21wb25lbnQuZGlzcGxheU5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi5hdHRyc1trZXldID0gYXR0cjtcbiAgICAgICAgY29udGV4dFtrZXldID0gYXR0cjtcbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICB9KTtcblxuICAgIHJldHVybiBjb250ZXh0O1xuICB9O1xuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMgPSBmdW5jdGlvbiBnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyh0aGVtZSwgcHJvcHMpIHtcbiAgICB2YXIgX3Byb3BzJGZvcndhcmRlZENvbXBvMiA9IHByb3BzLmZvcndhcmRlZENvbXBvbmVudCxcbiAgICAgICAgYXR0cnMgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8yLmF0dHJzLFxuICAgICAgICBjb21wb25lbnRTdHlsZSA9IF9wcm9wcyRmb3J3YXJkZWRDb21wbzIuY29tcG9uZW50U3R5bGUsXG4gICAgICAgIHdhcm5Ub29NYW55Q2xhc3NlcyA9IF9wcm9wcyRmb3J3YXJkZWRDb21wbzIud2FyblRvb01hbnlDbGFzc2VzO1xuXG4gICAgLy8gc3RhdGljYWxseSBzdHlsZWQtY29tcG9uZW50cyBkb24ndCBuZWVkIHRvIGJ1aWxkIGFuIGV4ZWN1dGlvbiBjb250ZXh0IG9iamVjdCxcbiAgICAvLyBhbmQgc2hvdWxkbid0IGJlIGluY3JlYXNpbmcgdGhlIG51bWJlciBvZiBjbGFzcyBuYW1lc1xuXG4gICAgaWYgKGNvbXBvbmVudFN0eWxlLmlzU3RhdGljICYmICFhdHRycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBjb21wb25lbnRTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhFTVBUWV9PQkpFQ1QsIHRoaXMuc3R5bGVTaGVldCk7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZSA9IGNvbXBvbmVudFN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHRoaXMuYnVpbGRFeGVjdXRpb25Db250ZXh0KHRoZW1lLCBwcm9wcywgYXR0cnMpLCB0aGlzLnN0eWxlU2hlZXQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FyblRvb01hbnlDbGFzc2VzKSB3YXJuVG9vTWFueUNsYXNzZXMoY2xhc3NOYW1lKTtcblxuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlZENvbXBvbmVudDtcbn0oQ29tcG9uZW50KTtcblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVkQ29tcG9uZW50KHRhcmdldCwgb3B0aW9ucywgcnVsZXMpIHtcbiAgdmFyIGlzVGFyZ2V0U3R5bGVkQ29tcCA9IGlzU3R5bGVkQ29tcG9uZW50KHRhcmdldCk7XG4gIHZhciBpc0NsYXNzID0gIWlzVGFnKHRhcmdldCk7XG5cbiAgdmFyIF9vcHRpb25zJGRpc3BsYXlOYW1lID0gb3B0aW9ucy5kaXNwbGF5TmFtZSxcbiAgICAgIGRpc3BsYXlOYW1lID0gX29wdGlvbnMkZGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCA/IGdlbmVyYXRlRGlzcGxheU5hbWUodGFyZ2V0KSA6IF9vcHRpb25zJGRpc3BsYXlOYW1lLFxuICAgICAgX29wdGlvbnMkY29tcG9uZW50SWQgPSBvcHRpb25zLmNvbXBvbmVudElkLFxuICAgICAgY29tcG9uZW50SWQgPSBfb3B0aW9ucyRjb21wb25lbnRJZCA9PT0gdW5kZWZpbmVkID8gZ2VuZXJhdGVJZChDb21wb25lbnRTdHlsZSwgb3B0aW9ucy5kaXNwbGF5TmFtZSwgb3B0aW9ucy5wYXJlbnRDb21wb25lbnRJZCkgOiBfb3B0aW9ucyRjb21wb25lbnRJZCxcbiAgICAgIF9vcHRpb25zJFBhcmVudENvbXBvbiA9IG9wdGlvbnMuUGFyZW50Q29tcG9uZW50LFxuICAgICAgUGFyZW50Q29tcG9uZW50ID0gX29wdGlvbnMkUGFyZW50Q29tcG9uID09PSB1bmRlZmluZWQgPyBTdHlsZWRDb21wb25lbnQgOiBfb3B0aW9ucyRQYXJlbnRDb21wb24sXG4gICAgICBfb3B0aW9ucyRhdHRycyA9IG9wdGlvbnMuYXR0cnMsXG4gICAgICBhdHRycyA9IF9vcHRpb25zJGF0dHJzID09PSB1bmRlZmluZWQgPyBFTVBUWV9BUlJBWSA6IF9vcHRpb25zJGF0dHJzO1xuXG5cbiAgdmFyIHN0eWxlZENvbXBvbmVudElkID0gb3B0aW9ucy5kaXNwbGF5TmFtZSAmJiBvcHRpb25zLmNvbXBvbmVudElkID8gZXNjYXBlKG9wdGlvbnMuZGlzcGxheU5hbWUpICsgJy0nICsgb3B0aW9ucy5jb21wb25lbnRJZCA6IG9wdGlvbnMuY29tcG9uZW50SWQgfHwgY29tcG9uZW50SWQ7XG5cbiAgLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgYXR0cnMgdXAgKGltcGxpY2l0IGV4dGVuZClcbiAgdmFyIGZpbmFsQXR0cnMgPVxuICAvLyAkRmxvd0ZpeE1lXG4gIGlzVGFyZ2V0U3R5bGVkQ29tcCAmJiB0YXJnZXQuYXR0cnMgPyBBcnJheS5wcm90b3R5cGUuY29uY2F0KHRhcmdldC5hdHRycywgYXR0cnMpLmZpbHRlcihCb29sZWFuKSA6IGF0dHJzO1xuXG4gIHZhciBjb21wb25lbnRTdHlsZSA9IG5ldyBDb21wb25lbnRTdHlsZShpc1RhcmdldFN0eWxlZENvbXAgPyAvLyBmb2xkIHRoZSB1bmRlcmx5aW5nIFN0eWxlZENvbXBvbmVudCBydWxlcyB1cCAoaW1wbGljaXQgZXh0ZW5kKVxuICAvLyAkRmxvd0ZpeE1lXG4gIHRhcmdldC5jb21wb25lbnRTdHlsZS5ydWxlcy5jb25jYXQocnVsZXMpIDogcnVsZXMsIGZpbmFsQXR0cnMsIHN0eWxlZENvbXBvbmVudElkKTtcblxuICAvKipcbiAgICogZm9yd2FyZFJlZiBjcmVhdGVzIGEgbmV3IGludGVyaW0gY29tcG9uZW50LCB3aGljaCB3ZSdsbCB0YWtlIGFkdmFudGFnZSBvZlxuICAgKiBpbnN0ZWFkIG9mIGV4dGVuZGluZyBQYXJlbnRDb21wb25lbnQgdG8gY3JlYXRlIF9hbm90aGVyXyBpbnRlcmltIGNsYXNzXG4gICAqL1xuICB2YXIgV3JhcHBlZFN0eWxlZENvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQYXJlbnRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBmb3J3YXJkZWRDb21wb25lbnQ6IFdyYXBwZWRTdHlsZWRDb21wb25lbnQsIGZvcndhcmRlZFJlZjogcmVmIH0pKTtcbiAgfSk7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmF0dHJzID0gZmluYWxBdHRycztcbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlID0gY29tcG9uZW50U3R5bGU7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuZm9sZGVkQ29tcG9uZW50SWRzID0gaXNUYXJnZXRTdHlsZWRDb21wID8gLy8gJEZsb3dGaXhNZVxuICBBcnJheS5wcm90b3R5cGUuY29uY2F0KHRhcmdldC5mb2xkZWRDb21wb25lbnRJZHMsIHRhcmdldC5zdHlsZWRDb21wb25lbnRJZCkgOiBFTVBUWV9BUlJBWTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuc3R5bGVkQ29tcG9uZW50SWQgPSBzdHlsZWRDb21wb25lbnRJZDtcblxuICAvLyBmb2xkIHRoZSB1bmRlcmx5aW5nIFN0eWxlZENvbXBvbmVudCB0YXJnZXQgdXAgc2luY2Ugd2UgZm9sZGVkIHRoZSBzdHlsZXNcbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnRhcmdldCA9IGlzVGFyZ2V0U3R5bGVkQ29tcCA/IHRhcmdldC50YXJnZXQgOiB0YXJnZXQ7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LndpdGhDb21wb25lbnQgPSBmdW5jdGlvbiB3aXRoQ29tcG9uZW50KHRhZykge1xuICAgIHZhciBwcmV2aW91c0NvbXBvbmVudElkID0gb3B0aW9ucy5jb21wb25lbnRJZCxcbiAgICAgICAgb3B0aW9uc1RvQ29weSA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFsnY29tcG9uZW50SWQnXSk7XG5cblxuICAgIHZhciBuZXdDb21wb25lbnRJZCA9IHByZXZpb3VzQ29tcG9uZW50SWQgJiYgcHJldmlvdXNDb21wb25lbnRJZCArICctJyArIChpc1RhZyh0YWcpID8gdGFnIDogZXNjYXBlKGdldENvbXBvbmVudE5hbWUodGFnKSkpO1xuXG4gICAgdmFyIG5ld09wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9uc1RvQ29weSwge1xuICAgICAgYXR0cnM6IGZpbmFsQXR0cnMsXG4gICAgICBjb21wb25lbnRJZDogbmV3Q29tcG9uZW50SWQsXG4gICAgICBQYXJlbnRDb21wb25lbnQ6IFBhcmVudENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNyZWF0ZVN0eWxlZENvbXBvbmVudCh0YWcsIG5ld09wdGlvbnMsIHJ1bGVzKTtcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50Lndhcm5Ub29NYW55Q2xhc3NlcyA9IGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyhkaXNwbGF5TmFtZSk7XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcuJyArIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuc3R5bGVkQ29tcG9uZW50SWQ7XG4gIH07XG5cbiAgaWYgKGlzQ2xhc3MpIHtcbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhXcmFwcGVkU3R5bGVkQ29tcG9uZW50LCB0YXJnZXQsIHtcbiAgICAgIC8vIGFsbCBTQy1zcGVjaWZpYyB0aGluZ3Mgc2hvdWxkIG5vdCBiZSBob2lzdGVkXG4gICAgICBhdHRyczogdHJ1ZSxcbiAgICAgIGNvbXBvbmVudFN0eWxlOiB0cnVlLFxuICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICBmb2xkZWRDb21wb25lbnRJZHM6IHRydWUsXG4gICAgICBzdHlsZWRDb21wb25lbnRJZDogdHJ1ZSxcbiAgICAgIHRhcmdldDogdHJ1ZSxcbiAgICAgIHdpdGhDb21wb25lbnQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBXcmFwcGVkU3R5bGVkQ29tcG9uZW50O1xufVxuXG4vLyBcbi8vIFRoYW5rcyB0byBSZWFjdERPTUZhY3RvcmllcyBmb3IgdGhpcyBoYW5keSBsaXN0IVxuXG52YXIgZG9tRWxlbWVudHMgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsXG5cbi8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAnc3ZnJywgJ3RleHQnLCAndHNwYW4nXTtcblxuLy8gXG5cbnZhciBzdHlsZWQgPSBmdW5jdGlvbiBzdHlsZWQodGFnKSB7XG4gIHJldHVybiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjcmVhdGVTdHlsZWRDb21wb25lbnQsIHRhZyk7XG59O1xuXG4vLyBTaG9ydGhhbmRzIGZvciBhbGwgdmFsaWQgSFRNTCBFbGVtZW50c1xuZG9tRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZG9tRWxlbWVudCkge1xuICBzdHlsZWRbZG9tRWxlbWVudF0gPSBzdHlsZWQoZG9tRWxlbWVudCk7XG59KTtcblxuLy8gXG5cbnZhciBHbG9iYWxTdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsU3R5bGUocnVsZXMsIGNvbXBvbmVudElkKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xvYmFsU3R5bGUpO1xuXG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgIHRoaXMuY29tcG9uZW50SWQgPSBjb21wb25lbnRJZDtcbiAgICB0aGlzLmlzU3RhdGljID0gaXNTdGF0aWNSdWxlcyhydWxlcywgRU1QVFlfQVJSQVkpO1xuXG4gICAgaWYgKCFTdHlsZVNoZWV0Lm1hc3Rlci5oYXNJZChjb21wb25lbnRJZCkpIHtcbiAgICAgIFN0eWxlU2hlZXQubWFzdGVyLmRlZmVycmVkSW5qZWN0KGNvbXBvbmVudElkLCBbXSk7XG4gICAgfVxuICB9XG5cbiAgR2xvYmFsU3R5bGUucHJvdG90eXBlLmNyZWF0ZVN0eWxlcyA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KSB7XG4gICAgdmFyIGZsYXRDU1MgPSBmbGF0dGVuKHRoaXMucnVsZXMsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuICAgIHZhciBjc3MgPSBzdHJpbmdpZnlSdWxlcyhmbGF0Q1NTLCAnJyk7XG5cbiAgICBzdHlsZVNoZWV0LmluamVjdCh0aGlzLmNvbXBvbmVudElkLCBjc3MpO1xuICB9O1xuXG4gIEdsb2JhbFN0eWxlLnByb3RvdHlwZS5yZW1vdmVTdHlsZXMgPSBmdW5jdGlvbiByZW1vdmVTdHlsZXMoc3R5bGVTaGVldCkge1xuICAgIHZhciBjb21wb25lbnRJZCA9IHRoaXMuY29tcG9uZW50SWQ7XG5cbiAgICBpZiAoc3R5bGVTaGVldC5oYXNJZChjb21wb25lbnRJZCkpIHtcbiAgICAgIHN0eWxlU2hlZXQucmVtb3ZlKGNvbXBvbmVudElkKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gVE9ETzogb3ZlcndyaXRlIGluLXBsYWNlIGluc3RlYWQgb2YgcmVtb3ZlK2NyZWF0ZT9cblxuXG4gIEdsb2JhbFN0eWxlLnByb3RvdHlwZS5yZW5kZXJTdHlsZXMgPSBmdW5jdGlvbiByZW5kZXJTdHlsZXMoZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCkge1xuICAgIHRoaXMucmVtb3ZlU3R5bGVzKHN0eWxlU2hlZXQpO1xuICAgIHRoaXMuY3JlYXRlU3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxTdHlsZTtcbn0oKTtcblxuLy8gXG5cbi8vIHBsYWNlIG91ciBjYWNoZSBpbnRvIHNoYXJlZCBjb250ZXh0IHNvIGl0J2xsIHBlcnNpc3QgYmV0d2VlbiBITVJzXG5pZiAoSVNfQlJPV1NFUikge1xuICB3aW5kb3cuc2NDR1NITVJDYWNoZSA9IHt9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVHbG9iYWxTdHlsZShzdHJpbmdzKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcnVsZXMgPSBjc3MuYXBwbHkodW5kZWZpbmVkLCBbc3RyaW5nc10uY29uY2F0KGludGVycG9sYXRpb25zKSk7XG4gIHZhciBpZCA9ICdzYy1nbG9iYWwtJyArIG11cm11cmhhc2goSlNPTi5zdHJpbmdpZnkocnVsZXMpKTtcbiAgdmFyIHN0eWxlID0gbmV3IEdsb2JhbFN0eWxlKHJ1bGVzLCBpZCk7XG5cbiAgdmFyIEdsb2JhbFN0eWxlQ29tcG9uZW50ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBpbmhlcml0cyhHbG9iYWxTdHlsZUNvbXBvbmVudCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBHbG9iYWxTdHlsZUNvbXBvbmVudCgpIHtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbFN0eWxlQ29tcG9uZW50KTtcblxuICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcykpO1xuXG4gICAgICB2YXIgX3RoaXMkY29uc3RydWN0b3IgPSBfdGhpcy5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBnbG9iYWxTdHlsZSA9IF90aGlzJGNvbnN0cnVjdG9yLmdsb2JhbFN0eWxlLFxuICAgICAgICAgIHN0eWxlZENvbXBvbmVudElkID0gX3RoaXMkY29uc3RydWN0b3Iuc3R5bGVkQ29tcG9uZW50SWQ7XG5cblxuICAgICAgaWYgKElTX0JST1dTRVIpIHtcbiAgICAgICAgd2luZG93LnNjQ0dTSE1SQ2FjaGVbc3R5bGVkQ29tcG9uZW50SWRdID0gKHdpbmRvdy5zY0NHU0hNUkNhY2hlW3N0eWxlZENvbXBvbmVudElkXSB8fCAwKSArIDE7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhpcyBmaXhlcyBITVIgY29tcGF0aWJpbGl0eS4gRG9uJ3QgYXNrIG1lIHdoeSwgYnV0IHRoaXMgY29tYmluYXRpb24gb2ZcbiAgICAgICAqIGNhY2hpbmcgdGhlIGNsb3N1cmUgdmFyaWFibGVzIHZpYSBzdGF0aWNzIGFuZCB0aGVuIHBlcnNpc3RpbmcgdGhlIHN0YXRpY3MgaW5cbiAgICAgICAqIHN0YXRlIHdvcmtzIGFjcm9zcyBITVIgd2hlcmUgbm8gb3RoZXIgY29tYmluYXRpb24gZGlkLiDCr1xcXyjjg4QpXy/Cr1xuICAgICAgICovXG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgZ2xvYmFsU3R5bGU6IGdsb2JhbFN0eWxlLFxuICAgICAgICBzdHlsZWRDb21wb25lbnRJZDogc3R5bGVkQ29tcG9uZW50SWRcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgR2xvYmFsU3R5bGVDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAod2luZG93LnNjQ0dTSE1SQ2FjaGVbdGhpcy5zdGF0ZS5zdHlsZWRDb21wb25lbnRJZF0pIHtcbiAgICAgICAgd2luZG93LnNjQ0dTSE1SQ2FjaGVbdGhpcy5zdGF0ZS5zdHlsZWRDb21wb25lbnRJZF0gLT0gMTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogRGVwZW5kaW5nIG9uIHRoZSBvcmRlciBcInJlbmRlclwiIGlzIGNhbGxlZCB0aGlzIGNhbiBjYXVzZSB0aGUgc3R5bGVzIHRvIGJlIGxvc3RcbiAgICAgICAqIHVudGlsIHRoZSBuZXh0IHJlbmRlciBwYXNzIG9mIHRoZSByZW1haW5pbmcgaW5zdGFuY2UsIHdoaWNoIG1heVxuICAgICAgICogbm90IGJlIGltbWVkaWF0ZS5cbiAgICAgICAqL1xuICAgICAgaWYgKHdpbmRvdy5zY0NHU0hNUkNhY2hlW3RoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWRdID09PSAwKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuZ2xvYmFsU3R5bGUucmVtb3ZlU3R5bGVzKHRoaXMuc3R5bGVTaGVldCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEdsb2JhbFN0eWxlQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgUmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgZ2xvYmFsIHN0eWxlIGNvbXBvbmVudCAnICsgdGhpcy5zdGF0ZS5zdHlsZWRDb21wb25lbnRJZCArICcgd2FzIGdpdmVuIGNoaWxkIEpTWC4gY3JlYXRlR2xvYmFsU3R5bGUgZG9lcyBub3QgcmVuZGVyIGNoaWxkcmVuLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgU3R5bGVTaGVldENvbnN1bWVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBmdW5jdGlvbiAoc3R5bGVTaGVldCkge1xuICAgICAgICAgIF90aGlzMi5zdHlsZVNoZWV0ID0gc3R5bGVTaGVldCB8fCBTdHlsZVNoZWV0Lm1hc3RlcjtcblxuICAgICAgICAgIHZhciBnbG9iYWxTdHlsZSA9IF90aGlzMi5zdGF0ZS5nbG9iYWxTdHlsZTtcblxuXG4gICAgICAgICAgaWYgKGdsb2JhbFN0eWxlLmlzU3RhdGljKSB7XG4gICAgICAgICAgICBnbG9iYWxTdHlsZS5yZW5kZXJTdHlsZXMoU1RBVElDX0VYRUNVVElPTl9DT05URVhULCBfdGhpczIuc3R5bGVTaGVldCk7XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgVGhlbWVDb25zdW1lcixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0UHJvcHMgPSBfdGhpczIuY29uc3RydWN0b3IuZGVmYXVsdFByb3BzO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IF9leHRlbmRzKHt9LCBfdGhpczIucHJvcHMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGVtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQudGhlbWUgPSBkZXRlcm1pbmVUaGVtZShfdGhpczIucHJvcHMsIHRoZW1lLCBkZWZhdWx0UHJvcHMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGdsb2JhbFN0eWxlLnJlbmRlclN0eWxlcyhjb250ZXh0LCBfdGhpczIuc3R5bGVTaGVldCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIHJldHVybiBHbG9iYWxTdHlsZUNvbXBvbmVudDtcbiAgfShSZWFjdC5Db21wb25lbnQpO1xuXG4gIEdsb2JhbFN0eWxlQ29tcG9uZW50Lmdsb2JhbFN0eWxlID0gc3R5bGU7XG4gIEdsb2JhbFN0eWxlQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkID0gaWQ7XG5cblxuICByZXR1cm4gR2xvYmFsU3R5bGVDb21wb25lbnQ7XG59XG5cbi8vIFxuXG52YXIgcmVwbGFjZVdoaXRlc3BhY2UgPSBmdW5jdGlvbiByZXBsYWNlV2hpdGVzcGFjZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHN8XFxcXG4vZywgJycpO1xufTtcblxuZnVuY3Rpb24ga2V5ZnJhbWVzKHN0cmluZ3MpIHtcbiAgLyogV2FybmluZyBpZiB5b3UndmUgdXNlZCBrZXlmcmFtZXMgb24gUmVhY3QgTmF0aXZlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgY29uc29sZS53YXJuKCdga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC4nKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcnVsZXMgPSBjc3MuYXBwbHkodW5kZWZpbmVkLCBbc3RyaW5nc10uY29uY2F0KGludGVycG9sYXRpb25zKSk7XG5cbiAgdmFyIG5hbWUgPSBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKG11cm11cmhhc2gocmVwbGFjZVdoaXRlc3BhY2UoSlNPTi5zdHJpbmdpZnkocnVsZXMpKSkpO1xuXG4gIHJldHVybiBuZXcgS2V5ZnJhbWVzKG5hbWUsIHN0cmluZ2lmeVJ1bGVzKHJ1bGVzLCBuYW1lLCAnQGtleWZyYW1lcycpKTtcbn1cblxuLy8gXG5cbnZhciB3aXRoVGhlbWUgPSAoZnVuY3Rpb24gKENvbXBvbmVudCQkMSkge1xuICB2YXIgV2l0aFRoZW1lID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50JCQxLmRlZmF1bHRQcm9wcztcblxuICAgICAgICB2YXIgdGhlbWVQcm9wID0gZGV0ZXJtaW5lVGhlbWUocHJvcHMsIHRoZW1lLCBkZWZhdWx0UHJvcHMpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHRoZW1lUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1t3aXRoVGhlbWVdIFlvdSBhcmUgbm90IHVzaW5nIGEgVGhlbWVQcm92aWRlciBub3IgcGFzc2luZyBhIHRoZW1lIHByb3Agb3IgYSB0aGVtZSBpbiBkZWZhdWx0UHJvcHMgaW4gY29tcG9uZW50IGNsYXNzIFwiJyArIGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50JCQxKSArICdcIicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50JCQxLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgdGhlbWU6IHRoZW1lUHJvcCwgcmVmOiByZWYgfSkpO1xuICAgICAgfVxuICAgICk7XG4gIH0pO1xuXG4gIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50JCQxKTtcblxuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSAnV2l0aFRoZW1lKCcgKyBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCQkMSkgKyAnKSc7XG5cbiAgcmV0dXJuIFdpdGhUaGVtZTtcbn0pO1xuXG4vLyBcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfSEFVTlRFRF9CWV9TUE9PS1lfR0hPU1RTID0ge1xuICBTdHlsZVNoZWV0OiBTdHlsZVNoZWV0XG59O1xuXG4vLyBcblxuLyogV2FybmluZyBpZiB5b3UndmUgaW1wb3J0ZWQgdGhpcyBmaWxlIG9uIFJlYWN0IE5hdGl2ZSAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuXCIgKyBcIlBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblwiICsgJ1JlYWQgbW9yZSBhYm91dCB0aGlzIGF0IGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2Jhc2ljcyNyZWFjdC1uYXRpdmUnKTtcbn1cblxuLyogV2FybmluZyBpZiB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2Ygc3R5bGVkLWNvbXBvbmVudHMgKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvci51c2VyQWdlbnQgPT09ICdzdHJpbmcnICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTm9kZS5qcycpID09PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2pzZG9tJykgPT09IC0xKSB7XG4gIHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSA9IHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSB8fCAwO1xuXG4gIGlmICh3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gPT09IDEpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mICdzdHlsZWQtY29tcG9uZW50cycgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4gXCIgKyAnVGhpcyBtYXkgY2F1c2UgZHluYW1pYyBzdHlsZXMgbm90IHJlbmRlcmluZyBwcm9wZXJseSwgZXJyb3JzIGhhcHBlbmluZyBkdXJpbmcgcmVoeWRyYXRpb24gcHJvY2VzcyAnICsgJ2FuZCBtYWtlcyB5b3VyIGFwcGxpY2F0aW9uIGJpZ2dlciB3aXRob3V0IGEgZ29vZCByZWFzb24uXFxuXFxuJyArICdTZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLicpO1xuICB9XG5cbiAgd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddICs9IDE7XG59XG5cbi8vXG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDtcbmV4cG9ydCB7IGNzcywga2V5ZnJhbWVzLCBjcmVhdGVHbG9iYWxTdHlsZSwgaXNTdHlsZWRDb21wb25lbnQsIFRoZW1lQ29uc3VtZXIsIFRoZW1lQ29udGV4dCwgVGhlbWVQcm92aWRlciwgd2l0aFRoZW1lLCBTZXJ2ZXJTdHlsZVNoZWV0LCBTdHlsZVNoZWV0TWFuYWdlciwgX19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0hBVU5URURfQllfU1BPT0tZX0dIT1NUUyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsIi8qIVxuICogY29va2llXG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IFJvbWFuIFNodHlsbWFuXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMuc2VyaWFsaXplID0gc2VyaWFsaXplO1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkZWNvZGUgPSBkZWNvZGVVUklDb21wb25lbnQ7XG52YXIgZW5jb2RlID0gZW5jb2RlVVJJQ29tcG9uZW50O1xudmFyIHBhaXJTcGxpdFJlZ0V4cCA9IC87ICovO1xuXG4vKipcbiAqIFJlZ0V4cCB0byBtYXRjaCBmaWVsZC1jb250ZW50IGluIFJGQyA3MjMwIHNlYyAzLjJcbiAqXG4gKiBmaWVsZC1jb250ZW50ID0gZmllbGQtdmNoYXIgWyAxKiggU1AgLyBIVEFCICkgZmllbGQtdmNoYXIgXVxuICogZmllbGQtdmNoYXIgICA9IFZDSEFSIC8gb2JzLXRleHRcbiAqIG9icy10ZXh0ICAgICAgPSAleDgwLUZGXG4gKi9cblxudmFyIGZpZWxkQ29udGVudFJlZ0V4cCA9IC9eW1xcdTAwMDlcXHUwMDIwLVxcdTAwN2VcXHUwMDgwLVxcdTAwZmZdKyQvO1xuXG4vKipcbiAqIFBhcnNlIGEgY29va2llIGhlYWRlci5cbiAqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gY29va2llIGhlYWRlciBzdHJpbmcgaW50byBhbiBvYmplY3RcbiAqIFRoZSBvYmplY3QgaGFzIHRoZSB2YXJpb3VzIGNvb2tpZXMgYXMga2V5cyhuYW1lcykgPT4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7b2JqZWN0fVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0ciwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzdHIgbXVzdCBiZSBhIHN0cmluZycpO1xuICB9XG5cbiAgdmFyIG9iaiA9IHt9XG4gIHZhciBvcHQgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcGFpcnMgPSBzdHIuc3BsaXQocGFpclNwbGl0UmVnRXhwKTtcbiAgdmFyIGRlYyA9IG9wdC5kZWNvZGUgfHwgZGVjb2RlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldO1xuICAgIHZhciBlcV9pZHggPSBwYWlyLmluZGV4T2YoJz0nKTtcblxuICAgIC8vIHNraXAgdGhpbmdzIHRoYXQgZG9uJ3QgbG9vayBsaWtlIGtleT12YWx1ZVxuICAgIGlmIChlcV9pZHggPCAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gcGFpci5zdWJzdHIoMCwgZXFfaWR4KS50cmltKClcbiAgICB2YXIgdmFsID0gcGFpci5zdWJzdHIoKytlcV9pZHgsIHBhaXIubGVuZ3RoKS50cmltKCk7XG5cbiAgICAvLyBxdW90ZWQgdmFsdWVzXG4gICAgaWYgKCdcIicgPT0gdmFsWzBdKSB7XG4gICAgICB2YWwgPSB2YWwuc2xpY2UoMSwgLTEpO1xuICAgIH1cblxuICAgIC8vIG9ubHkgYXNzaWduIG9uY2VcbiAgICBpZiAodW5kZWZpbmVkID09IG9ialtrZXldKSB7XG4gICAgICBvYmpba2V5XSA9IHRyeURlY29kZSh2YWwsIGRlYyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBTZXJpYWxpemUgZGF0YSBpbnRvIGEgY29va2llIGhlYWRlci5cbiAqXG4gKiBTZXJpYWxpemUgdGhlIGEgbmFtZSB2YWx1ZSBwYWlyIGludG8gYSBjb29raWUgc3RyaW5nIHN1aXRhYmxlIGZvclxuICogaHR0cCBoZWFkZXJzLiBBbiBvcHRpb25hbCBvcHRpb25zIG9iamVjdCBzcGVjaWZpZWQgY29va2llIHBhcmFtZXRlcnMuXG4gKlxuICogc2VyaWFsaXplKCdmb28nLCAnYmFyJywgeyBodHRwT25seTogdHJ1ZSB9KVxuICogICA9PiBcImZvbz1iYXI7IGh0dHBPbmx5XCJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZShuYW1lLCB2YWwsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdCA9IG9wdGlvbnMgfHwge307XG4gIHZhciBlbmMgPSBvcHQuZW5jb2RlIHx8IGVuY29kZTtcblxuICBpZiAodHlwZW9mIGVuYyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBlbmNvZGUgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgaWYgKCFmaWVsZENvbnRlbnRSZWdFeHAudGVzdChuYW1lKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG5hbWUgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gZW5jKHZhbCk7XG5cbiAgaWYgKHZhbHVlICYmICFmaWVsZENvbnRlbnRSZWdFeHAudGVzdCh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCB2YWwgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgdmFyIHN0ciA9IG5hbWUgKyAnPScgKyB2YWx1ZTtcblxuICBpZiAobnVsbCAhPSBvcHQubWF4QWdlKSB7XG4gICAgdmFyIG1heEFnZSA9IG9wdC5tYXhBZ2UgLSAwO1xuICAgIGlmIChpc05hTihtYXhBZ2UpKSB0aHJvdyBuZXcgRXJyb3IoJ21heEFnZSBzaG91bGQgYmUgYSBOdW1iZXInKTtcbiAgICBzdHIgKz0gJzsgTWF4LUFnZT0nICsgTWF0aC5mbG9vcihtYXhBZ2UpO1xuICB9XG5cbiAgaWYgKG9wdC5kb21haW4pIHtcbiAgICBpZiAoIWZpZWxkQ29udGVudFJlZ0V4cC50ZXN0KG9wdC5kb21haW4pKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gZG9tYWluIGlzIGludmFsaWQnKTtcbiAgICB9XG5cbiAgICBzdHIgKz0gJzsgRG9tYWluPScgKyBvcHQuZG9tYWluO1xuICB9XG5cbiAgaWYgKG9wdC5wYXRoKSB7XG4gICAgaWYgKCFmaWVsZENvbnRlbnRSZWdFeHAudGVzdChvcHQucGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBwYXRoIGlzIGludmFsaWQnKTtcbiAgICB9XG5cbiAgICBzdHIgKz0gJzsgUGF0aD0nICsgb3B0LnBhdGg7XG4gIH1cblxuICBpZiAob3B0LmV4cGlyZXMpIHtcbiAgICBpZiAodHlwZW9mIG9wdC5leHBpcmVzLnRvVVRDU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gZXhwaXJlcyBpcyBpbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgc3RyICs9ICc7IEV4cGlyZXM9JyArIG9wdC5leHBpcmVzLnRvVVRDU3RyaW5nKCk7XG4gIH1cblxuICBpZiAob3B0Lmh0dHBPbmx5KSB7XG4gICAgc3RyICs9ICc7IEh0dHBPbmx5JztcbiAgfVxuXG4gIGlmIChvcHQuc2VjdXJlKSB7XG4gICAgc3RyICs9ICc7IFNlY3VyZSc7XG4gIH1cblxuICBpZiAob3B0LnNhbWVTaXRlKSB7XG4gICAgdmFyIHNhbWVTaXRlID0gdHlwZW9mIG9wdC5zYW1lU2l0ZSA9PT0gJ3N0cmluZydcbiAgICAgID8gb3B0LnNhbWVTaXRlLnRvTG93ZXJDYXNlKCkgOiBvcHQuc2FtZVNpdGU7XG5cbiAgICBzd2l0Y2ggKHNhbWVTaXRlKSB7XG4gICAgICBjYXNlIHRydWU6XG4gICAgICAgIHN0ciArPSAnOyBTYW1lU2l0ZT1TdHJpY3QnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2xheCc6XG4gICAgICAgIHN0ciArPSAnOyBTYW1lU2l0ZT1MYXgnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3N0cmljdCc6XG4gICAgICAgIHN0ciArPSAnOyBTYW1lU2l0ZT1TdHJpY3QnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBzYW1lU2l0ZSBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBUcnkgZGVjb2RpbmcgYSBzdHJpbmcgdXNpbmcgYSBkZWNvZGluZyBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBkZWNvZGVcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gdHJ5RGVjb2RlKHN0ciwgZGVjb2RlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZShzdHIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCAqIGFzIGNvb2tpZSBmcm9tICdjb29raWUnO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0RvY3VtZW50Q29va2llKCkge1xuICAgIC8vIENhbiB3ZSBnZXQvc2V0IGNvb2tpZXMgb24gZG9jdW1lbnQuY29va2llP1xuICAgIHJldHVybiB0eXBlb2YgZG9jdW1lbnQgPT09ICdvYmplY3QnICYmIHR5cGVvZiBkb2N1bWVudC5jb29raWUgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuQ29va2llcygpIHtcbiAgICBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eICsvLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC89LiovLCAnPTtleHBpcmVzPScgKyBuZXcgRGF0ZSgpLnRvVVRDU3RyaW5nKCkgKyAnO3BhdGg9LycpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29va2llcyhjb29raWVzKSB7XG4gICAgaWYgKHR5cGVvZiBjb29raWVzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gY29va2llLnBhcnNlKGNvb2tpZXMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgY29va2llcyA9PT0gJ29iamVjdCcgJiYgY29va2llcyAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY29va2llcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQYXJzaW5nQ29va2llKHZhbHVlLCBkb05vdFBhcnNlKSB7XG4gICAgaWYgKHR5cGVvZiBkb05vdFBhcnNlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBXZSBndWVzcyBpZiB0aGUgY29va2llIHN0YXJ0IHdpdGggeyBvciBbLCBpdCBoYXMgYmVlbiBzZXJpYWxpemVkXG4gICAgICAgIGRvTm90UGFyc2UgPVxuICAgICAgICAgICAgIXZhbHVlIHx8ICh2YWx1ZVswXSAhPT0gJ3snICYmIHZhbHVlWzBdICE9PSAnWycgJiYgdmFsdWVbMF0gIT09ICdcIicpO1xuICAgIH1cbiAgICByZXR1cm4gIWRvTm90UGFyc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVhZENvb2tpZSh2YWx1ZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIGNsZWFuVmFsdWUgPSBjbGVhbnVwQ29va2llVmFsdWUodmFsdWUpO1xuICAgIGlmIChpc1BhcnNpbmdDb29raWUoY2xlYW5WYWx1ZSwgb3B0aW9ucy5kb05vdFBhcnNlKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoY2xlYW5WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEF0IGxlYXN0IHdlIHRyaWVkXG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSWdub3JlIGNsZWFuIHZhbHVlIGlmIHdlIGZhaWxlZCB0aGUgZGVzZXJpYWxpemF0aW9uXG4gICAgLy8gSXQgaXMgbm90IHJlbGV2YW50IGFueW1vcmUgdG8gdHJpbSB0aG9zZSB2YWx1ZXNcbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjbGVhbnVwQ29va2llVmFsdWUodmFsdWUpIHtcbiAgICAvLyBleHByZXNzIHByZXBlbmQgajogYmVmb3JlIHNlcmlhbGl6aW5nIGEgY29va2llXG4gICAgaWYgKHZhbHVlICYmIHZhbHVlWzBdID09PSAnaicgJiYgdmFsdWVbMV0gPT09ICc6Jykge1xuICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyKDIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4iLCJpbXBvcnQgKiBhcyBjb29raWUgZnJvbSAnY29va2llJztcbmltcG9ydCB7IHBhcnNlQ29va2llcywgcmVhZENvb2tpZSwgaGFzRG9jdW1lbnRDb29raWUgfSBmcm9tICcuL3V0aWxzJztcbi8vIFdlIGNhbid0IHBsZWFzZSBSb2xsdXAgYW5kIFR5cGVTY3JpcHQgYXQgdGhlIHNhbWUgdGltZVxuLy8gT25seSB3YXkgdG8gbWFrZSBib3RoIG9mIHRoZW0gd29ya1xudmFyIG9iamVjdEFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbnZhciBDb29raWVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvb2tpZXMoY29va2llcykge1xuICAgICAgICB0aGlzLmNoYW5nZUxpc3RlbmVycyA9IFtdO1xuICAgICAgICB0aGlzLmNvb2tpZXMgPSBwYXJzZUNvb2tpZXMoY29va2llcyk7XG4gICAgICAgIHRoaXMuSEFTX0RPQ1VNRU5UX0NPT0tJRSA9IGhhc0RvY3VtZW50Q29va2llKCk7XG4gICAgfVxuICAgIENvb2tpZXMucHJvdG90eXBlLl91cGRhdGVCcm93c2VyVmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuSEFTX0RPQ1VNRU5UX0NPT0tJRSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29va2llcyA9IGNvb2tpZS5wYXJzZShkb2N1bWVudC5jb29raWUpO1xuICAgIH07XG4gICAgQ29va2llcy5wcm90b3R5cGUuX2VtaXRDaGFuZ2UgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGFuZ2VMaXN0ZW5lcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXJzW2ldKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvb2tpZXMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZUJyb3dzZXJWYWx1ZXMoKTtcbiAgICAgICAgcmV0dXJuIHJlYWRDb29raWUodGhpcy5jb29raWVzW25hbWVdLCBvcHRpb25zKTtcbiAgICB9O1xuICAgIENvb2tpZXMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZUJyb3dzZXJWYWx1ZXMoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBuYW1lXzEgaW4gdGhpcy5jb29raWVzKSB7XG4gICAgICAgICAgICByZXN1bHRbbmFtZV8xXSA9IHJlYWRDb29raWUodGhpcy5jb29raWVzW25hbWVfMV0sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBDb29raWVzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb29raWVzID0gb2JqZWN0QXNzaWduKHt9LCB0aGlzLmNvb2tpZXMsIChfYSA9IHt9LCBfYVtuYW1lXSA9IHZhbHVlLCBfYSkpO1xuICAgICAgICBpZiAodGhpcy5IQVNfRE9DVU1FTlRfQ09PS0lFKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuc2VyaWFsaXplKG5hbWUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbWl0Q2hhbmdlKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBvcHRpb25zOiBvcHRpb25zIH0pO1xuICAgIH07XG4gICAgQ29va2llcy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGZpbmFsT3B0aW9ucyA9IChvcHRpb25zID0gb2JqZWN0QXNzaWduKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgICBleHBpcmVzOiBuZXcgRGF0ZSgxOTcwLCAxLCAxLCAwLCAwLCAxKSxcbiAgICAgICAgICAgIG1heEFnZTogMFxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuY29va2llcyA9IG9iamVjdEFzc2lnbih7fSwgdGhpcy5jb29raWVzKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuY29va2llc1tuYW1lXTtcbiAgICAgICAgaWYgKHRoaXMuSEFTX0RPQ1VNRU5UX0NPT0tJRSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLnNlcmlhbGl6ZShuYW1lLCAnJywgZmluYWxPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbWl0Q2hhbmdlKHsgbmFtZTogbmFtZSwgdmFsdWU6IHVuZGVmaW5lZCwgb3B0aW9uczogb3B0aW9ucyB9KTtcbiAgICB9O1xuICAgIENvb2tpZXMucHJvdG90eXBlLmFkZENoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIH07XG4gICAgQ29va2llcy5wcm90b3R5cGUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGlkeCA9IHRoaXMuY2hhbmdlTGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTGlzdGVuZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29va2llcztcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBDb29raWVzO1xuIiwidmFyIF9hO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENvb2tpZXMgZnJvbSAndW5pdmVyc2FsLWNvb2tpZSc7XG5leHBvcnQgdmFyIFByb3ZpZGVyID0gKF9hID0gUmVhY3QuY3JlYXRlQ29udGV4dChuZXcgQ29va2llcygpKSwgX2EuUHJvdmlkZXIpLCBDb25zdW1lciA9IF9hLkNvbnN1bWVyO1xuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDb29raWVzIGZyb20gJ3VuaXZlcnNhbC1jb29raWUnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICcuL0Nvb2tpZXNDb250ZXh0JztcbnZhciBDb29raWVzUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvb2tpZXNQcm92aWRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb29raWVzUHJvdmlkZXIocHJvcHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgICAgIGlmIChwcm9wcy5jb29raWVzKSB7XG4gICAgICAgICAgICBfdGhpcy5jb29raWVzID0gcHJvcHMuY29va2llcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmNvb2tpZXMgPSBuZXcgQ29va2llcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ29va2llc1Byb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyLCB7IHZhbHVlOiB0aGlzLmNvb2tpZXMgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfTtcbiAgICByZXR1cm4gQ29va2llc1Byb3ZpZGVyO1xufShSZWFjdC5Db21wb25lbnQpKTtcbmV4cG9ydCBkZWZhdWx0IENvb2tpZXNQcm92aWRlcjtcbiIsImltcG9ydCBDb29raWVzIGZyb20gJy4vQ29va2llcyc7XG5leHBvcnQgZGVmYXVsdCBDb29raWVzO1xuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMClcbiAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbnN1bWVyIH0gZnJvbSAnLi9Db29raWVzQ29udGV4dCc7XG4vLyBPbmx5IHdheSB0byBtYWtlIGZ1bmN0aW9uIG1vZHVsZXMgd29yayB3aXRoIGJvdGggVHlwZVNjcmlwdCBhbmQgUm9sbHVwXG52YXIgaG9pc3RTdGF0aWNzID0gcmVxdWlyZSgnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnKTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhDb29raWVzKFdyYXBwZXJDb21wb25lbnQpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIG5hbWUgPSBXcmFwcGVyQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZXJDb21wb25lbnQubmFtZTtcbiAgICB2YXIgQ29va2llV3JhcHBlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKENvb2tpZVdyYXBwZXIsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIENvb2tpZVdyYXBwZXIoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0byB1cGRhdGUgY2hpbGRyZW4gd2l0aCBuZXcgdmFsdWVzXG4gICAgICAgICAgICAgICAgX3RoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgQ29va2llV3JhcHBlci5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5jb29raWVzLmFkZENoYW5nZUxpc3RlbmVyKHRoaXMub25DaGFuZ2UpO1xuICAgICAgICB9O1xuICAgICAgICBDb29raWVXcmFwcGVyLnByb3RvdHlwZS51bmxpc3RlbiA9IGZ1bmN0aW9uIChjb29raWVzKSB7XG4gICAgICAgICAgICAoY29va2llcyB8fCB0aGlzLnByb3BzLmNvb2tpZXMpLnJlbW92ZUNoYW5nZUxpc3RlbmVyKHRoaXMub25DaGFuZ2UpO1xuICAgICAgICB9O1xuICAgICAgICBDb29raWVXcmFwcGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIENvb2tpZVdyYXBwZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChwcmV2UHJvcHMuY29va2llcyAhPT0gdGhpcy5wcm9wcy5jb29raWVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bmxpc3RlbihwcmV2UHJvcHMuY29va2llcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgQ29va2llV3JhcHBlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIENvb2tpZVdyYXBwZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGZvcndhcmRlZFJlZiA9IF9hLmZvcndhcmRlZFJlZiwgY29va2llcyA9IF9hLmNvb2tpZXMsIHJlc3RQcm9wcyA9IF9fcmVzdChfYSwgW1wiZm9yd2FyZGVkUmVmXCIsIFwiY29va2llc1wiXSk7XG4gICAgICAgICAgICB2YXIgYWxsQ29va2llcyA9IGNvb2tpZXMuZ2V0QWxsKCk7XG4gICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlckNvbXBvbmVudCwgX19hc3NpZ24oe30sIHJlc3RQcm9wcywgeyByZWY6IGZvcndhcmRlZFJlZiwgY29va2llczogY29va2llcywgYWxsQ29va2llczogYWxsQ29va2llcyB9KSkpO1xuICAgICAgICB9O1xuICAgICAgICBDb29raWVXcmFwcGVyLmRpc3BsYXlOYW1lID0gXCJ3aXRoQ29va2llcyhcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgICAgQ29va2llV3JhcHBlci5XcmFwcGVyQ29tcG9uZW50ID0gV3JhcHBlckNvbXBvbmVudDtcbiAgICAgICAgcmV0dXJuIENvb2tpZVdyYXBwZXI7XG4gICAgfShSZWFjdC5Db21wb25lbnQpKTtcbiAgICB2YXIgQ29va2llV3JhcHBlcldpdGhSZWZBbmRDb29raWVDb25zdW1lciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KENvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29va2llcykgeyByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29va2llV3JhcHBlciwgX19hc3NpZ24oeyBjb29raWVzOiBjb29raWVzIH0sIHByb3BzLCB7IGZvcndhcmRlZFJlZjogcmVmIH0pKSk7IH0pKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvb2tpZVdyYXBwZXJXaXRoUmVmQW5kQ29va2llQ29uc3VtZXIsIFdyYXBwZXJDb21wb25lbnQsIHtcbiAgICAgICAgV3JhcHBlZENvbXBvbmVudDogdHJ1ZVxuICAgIH0pO1xufVxuIiwiZXhwb3J0IHsgZGVmYXVsdCBhcyBDb29raWVzIH0gZnJvbSAnLi9Db29raWVzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ29va2llc1Byb3ZpZGVyIH0gZnJvbSAnLi9Db29raWVzUHJvdmlkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3aXRoQ29va2llcyB9IGZyb20gJy4vd2l0aENvb2tpZXMnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIhZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZShudWxsKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUobnVsbCkpOndpbmRvdy5zdHlsaXM9ZShudWxsKX0oZnVuY3Rpb24gZShhKXtcInVzZSBzdHJpY3RcIjt2YXIgcj0vXlxcMCsvZyxjPS9bXFwwXFxyXFxmXS9nLHM9LzogKi9nLHQ9L3pvb3xncmEvLGk9LyhbLDogXSkodHJhbnNmb3JtKS9nLGY9LywrXFxzKig/IVteKF0qWyldKS9nLG49LyArXFxzKig/IVteKF0qWyldKS9nLGw9LyAqW1xcMF0gKi9nLG89LyxcXHIrPy9nLGg9LyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csdT0vOmdsb2JhbFxcKCgoPzpbXlxcKFxcKVxcW1xcXV0qfFxcWy4qXFxdfFxcKFteXFwoXFwpXSpcXCkpKilcXCkvZyxkPS9cXFcrL2csYj0vQChrXFx3KylcXHMqKFxcUyopXFxzKi8scD0vOjoocGxhY2UpL2csaz0vOihyZWFkLW9ubHkpL2csZz0vXFxzKyg/PVt7XFxdOz06Pl0pL2csQT0vKFtbfT06Pl0pXFxzKy9nLEM9LyhcXHtbXntdKz8pOyg/PVxcfSkvZyx3PS9cXHN7Mix9L2csdj0vKFteXFwoXSkoOispICovZyxtPS9bc3ZoXVxcdystW3RibHJdezJ9Lyx4PS9cXChcXHMqKC4qKVxccypcXCkvZywkPS8oW1xcc1xcU10qPyk7L2cseT0vLXNlbGZ8ZmxleC0vZyxPPS9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxqPS9zdHJldGNofDpcXHMqXFx3K1xcLSg/OmNvbnRlfGF2YWlsKS8sej0vKFteLV0pKGltYWdlLXNldFxcKCkvLE49XCItd2Via2l0LVwiLFM9XCItbW96LVwiLEY9XCItbXMtXCIsVz01OSxxPTEyNSxCPTEyMyxEPTQwLEU9NDEsRz05MSxIPTkzLEk9MTAsSj0xMyxLPTksTD02NCxNPTMyLFA9MzgsUT00NSxSPTk1LFQ9NDIsVT00NCxWPTU4LFg9MzksWT0zNCxaPTQ3LF89NjIsZWU9NDMsYWU9MTI2LHJlPTAsY2U9MTIsc2U9MTEsdGU9MTA3LGllPTEwOSxmZT0xMTUsbmU9MTEyLGxlPTExMSxvZT0xMDUsaGU9OTksdWU9MTAwLGRlPTExMixiZT0xLHBlPTEsa2U9MCxnZT0xLEFlPTEsQ2U9MSx3ZT0wLHZlPTAsbWU9MCx4ZT1bXSwkZT1bXSx5ZT0wLE9lPW51bGwsamU9LTIsemU9LTEsTmU9MCxTZT0xLEZlPTIsV2U9MyxxZT0wLEJlPTEsRGU9XCJcIixFZT1cIlwiLEdlPVwiXCI7ZnVuY3Rpb24gSGUoZSxhLHMsdCxpKXtmb3IodmFyIGYsbixvPTAsaD0wLHU9MCxkPTAsZz0wLEE9MCxDPTAsdz0wLG09MCwkPTAseT0wLE89MCxqPTAsej0wLFI9MCx3ZT0wLCRlPTAsT2U9MCxqZT0wLHplPXMubGVuZ3RoLEplPXplLTEsUmU9XCJcIixUZT1cIlwiLFVlPVwiXCIsVmU9XCJcIixYZT1cIlwiLFllPVwiXCI7Ujx6ZTspe2lmKEM9cy5jaGFyQ29kZUF0KFIpLFI9PT1KZSlpZihoK2QrdStvIT09MCl7aWYoMCE9PWgpQz1oPT09Wj9JOlo7ZD11PW89MCx6ZSsrLEplKyt9aWYoaCtkK3Urbz09PTApe2lmKFI9PT1KZSl7aWYod2U+MClUZT1UZS5yZXBsYWNlKGMsXCJcIik7aWYoVGUudHJpbSgpLmxlbmd0aD4wKXtzd2l0Y2goQyl7Y2FzZSBNOmNhc2UgSzpjYXNlIFc6Y2FzZSBKOmNhc2UgSTpicmVhaztkZWZhdWx0OlRlKz1zLmNoYXJBdChSKX1DPVd9fWlmKDE9PT0kZSlzd2l0Y2goQyl7Y2FzZSBCOmNhc2UgcTpjYXNlIFc6Y2FzZSBZOmNhc2UgWDpjYXNlIEQ6Y2FzZSBFOmNhc2UgVTokZT0wO2Nhc2UgSzpjYXNlIEo6Y2FzZSBJOmNhc2UgTTpicmVhaztkZWZhdWx0OmZvcigkZT0wLGplPVIsZz1DLFItLSxDPVc7amU8emU7KXN3aXRjaChzLmNoYXJDb2RlQXQoamUrKykpe2Nhc2UgSTpjYXNlIEo6Y2FzZSBXOisrUixDPWcsamU9emU7YnJlYWs7Y2FzZSBWOmlmKHdlPjApKytSLEM9ZztjYXNlIEI6amU9emV9fXN3aXRjaChDKXtjYXNlIEI6Zm9yKGc9KFRlPVRlLnRyaW0oKSkuY2hhckNvZGVBdCgwKSx5PTEsamU9KytSO1I8emU7KXtzd2l0Y2goQz1zLmNoYXJDb2RlQXQoUikpe2Nhc2UgQjp5Kys7YnJlYWs7Y2FzZSBxOnktLTticmVhaztjYXNlIFo6c3dpdGNoKEE9cy5jaGFyQ29kZUF0KFIrMSkpe2Nhc2UgVDpjYXNlIFo6Uj1RZShBLFIsSmUscyl9YnJlYWs7Y2FzZSBHOkMrKztjYXNlIEQ6QysrO2Nhc2UgWTpjYXNlIFg6Zm9yKDtSKys8SmUmJnMuY2hhckNvZGVBdChSKSE9PUM7KTt9aWYoMD09PXkpYnJlYWs7UisrfWlmKFVlPXMuc3Vic3RyaW5nKGplLFIpLGc9PT1yZSlnPShUZT1UZS5yZXBsYWNlKHIsXCJcIikudHJpbSgpKS5jaGFyQ29kZUF0KDApO3N3aXRjaChnKXtjYXNlIEw6aWYod2U+MClUZT1UZS5yZXBsYWNlKGMsXCJcIik7c3dpdGNoKEE9VGUuY2hhckNvZGVBdCgxKSl7Y2FzZSB1ZTpjYXNlIGllOmNhc2UgZmU6Y2FzZSBROmY9YTticmVhaztkZWZhdWx0OmY9eGV9aWYoamU9KFVlPUhlKGEsZixVZSxBLGkrMSkpLmxlbmd0aCxtZT4wJiYwPT09amUpamU9VGUubGVuZ3RoO2lmKHllPjApaWYoZj1JZSh4ZSxUZSxPZSksbj1QZShXZSxVZSxmLGEscGUsYmUsamUsQSxpLHQpLFRlPWYuam9pbihcIlwiKSx2b2lkIDAhPT1uKWlmKDA9PT0oamU9KFVlPW4udHJpbSgpKS5sZW5ndGgpKUE9MCxVZT1cIlwiO2lmKGplPjApc3dpdGNoKEEpe2Nhc2UgZmU6VGU9VGUucmVwbGFjZSh4LE1lKTtjYXNlIHVlOmNhc2UgaWU6Y2FzZSBROlVlPVRlK1wie1wiK1VlK1wifVwiO2JyZWFrO2Nhc2UgdGU6aWYoVWU9KFRlPVRlLnJlcGxhY2UoYixcIiQxICQyXCIrKEJlPjA/RGU6XCJcIikpKStcIntcIitVZStcIn1cIiwxPT09QWV8fDI9PT1BZSYmTGUoXCJAXCIrVWUsMykpVWU9XCJAXCIrTitVZStcIkBcIitVZTtlbHNlIFVlPVwiQFwiK1VlO2JyZWFrO2RlZmF1bHQ6aWYoVWU9VGUrVWUsdD09PWRlKVZlKz1VZSxVZT1cIlwifWVsc2UgVWU9XCJcIjticmVhaztkZWZhdWx0OlVlPUhlKGEsSWUoYSxUZSxPZSksVWUsdCxpKzEpfVhlKz1VZSxPPTAsJGU9MCx6PTAsd2U9MCxPZT0wLGo9MCxUZT1cIlwiLFVlPVwiXCIsQz1zLmNoYXJDb2RlQXQoKytSKTticmVhaztjYXNlIHE6Y2FzZSBXOmlmKChqZT0oVGU9KHdlPjA/VGUucmVwbGFjZShjLFwiXCIpOlRlKS50cmltKCkpLmxlbmd0aCk+MSl7aWYoMD09PXopaWYoKGc9VGUuY2hhckNvZGVBdCgwKSk9PT1RfHxnPjk2JiZnPDEyMylqZT0oVGU9VGUucmVwbGFjZShcIiBcIixcIjpcIikpLmxlbmd0aDtpZih5ZT4wKWlmKHZvaWQgMCE9PShuPVBlKFNlLFRlLGEsZSxwZSxiZSxWZS5sZW5ndGgsdCxpLHQpKSlpZigwPT09KGplPShUZT1uLnRyaW0oKSkubGVuZ3RoKSlUZT1cIlxcMFxcMFwiO3N3aXRjaChnPVRlLmNoYXJDb2RlQXQoMCksQT1UZS5jaGFyQ29kZUF0KDEpLGcpe2Nhc2UgcmU6YnJlYWs7Y2FzZSBMOmlmKEE9PT1vZXx8QT09PWhlKXtZZSs9VGUrcy5jaGFyQXQoUik7YnJlYWt9ZGVmYXVsdDppZihUZS5jaGFyQ29kZUF0KGplLTEpPT09VilicmVhaztWZSs9S2UoVGUsZyxBLFRlLmNoYXJDb2RlQXQoMikpfX1PPTAsJGU9MCx6PTAsd2U9MCxPZT0wLFRlPVwiXCIsQz1zLmNoYXJDb2RlQXQoKytSKX19c3dpdGNoKEMpe2Nhc2UgSjpjYXNlIEk6aWYoaCtkK3Urbyt2ZT09PTApc3dpdGNoKCQpe2Nhc2UgRTpjYXNlIFg6Y2FzZSBZOmNhc2UgTDpjYXNlIGFlOmNhc2UgXzpjYXNlIFQ6Y2FzZSBlZTpjYXNlIFo6Y2FzZSBROmNhc2UgVjpjYXNlIFU6Y2FzZSBXOmNhc2UgQjpjYXNlIHE6YnJlYWs7ZGVmYXVsdDppZih6PjApJGU9MX1pZihoPT09WiloPTA7ZWxzZSBpZihnZStPPT09MCYmdCE9PXRlJiZUZS5sZW5ndGg+MCl3ZT0xLFRlKz1cIlxcMFwiO2lmKHllKnFlPjApUGUoTmUsVGUsYSxlLHBlLGJlLFZlLmxlbmd0aCx0LGksdCk7YmU9MSxwZSsrO2JyZWFrO2Nhc2UgVzpjYXNlIHE6aWYoaCtkK3Urbz09PTApe2JlKys7YnJlYWt9ZGVmYXVsdDpzd2l0Y2goYmUrKyxSZT1zLmNoYXJBdChSKSxDKXtjYXNlIEs6Y2FzZSBNOmlmKGQrbytoPT09MClzd2l0Y2godyl7Y2FzZSBVOmNhc2UgVjpjYXNlIEs6Y2FzZSBNOlJlPVwiXCI7YnJlYWs7ZGVmYXVsdDppZihDIT09TSlSZT1cIiBcIn1icmVhaztjYXNlIHJlOlJlPVwiXFxcXDBcIjticmVhaztjYXNlIGNlOlJlPVwiXFxcXGZcIjticmVhaztjYXNlIHNlOlJlPVwiXFxcXHZcIjticmVhaztjYXNlIFA6aWYoZCtoK289PT0wJiZnZT4wKU9lPTEsd2U9MSxSZT1cIlxcZlwiK1JlO2JyZWFrO2Nhc2UgMTA4OmlmKGQraCtvK2tlPT09MCYmej4wKXN3aXRjaChSLXope2Nhc2UgMjppZih3PT09bmUmJnMuY2hhckNvZGVBdChSLTMpPT09VilrZT13O2Nhc2UgODppZihtPT09bGUpa2U9bX1icmVhaztjYXNlIFY6aWYoZCtoK289PT0wKXo9UjticmVhaztjYXNlIFU6aWYoaCt1K2Qrbz09PTApd2U9MSxSZSs9XCJcXHJcIjticmVhaztjYXNlIFk6Y2FzZSBYOmlmKDA9PT1oKWQ9ZD09PUM/MDowPT09ZD9DOmQ7YnJlYWs7Y2FzZSBHOmlmKGQraCt1PT09MClvKys7YnJlYWs7Y2FzZSBIOmlmKGQraCt1PT09MClvLS07YnJlYWs7Y2FzZSBFOmlmKGQraCtvPT09MCl1LS07YnJlYWs7Y2FzZSBEOmlmKGQraCtvPT09MCl7aWYoMD09PU8pc3dpdGNoKDIqdyszKm0pe2Nhc2UgNTMzOmJyZWFrO2RlZmF1bHQ6eT0wLE89MX11Kyt9YnJlYWs7Y2FzZSBMOmlmKGgrdStkK28reitqPT09MClqPTE7YnJlYWs7Y2FzZSBUOmNhc2UgWjppZihkK28rdT4wKWJyZWFrO3N3aXRjaChoKXtjYXNlIDA6c3dpdGNoKDIqQyszKnMuY2hhckNvZGVBdChSKzEpKXtjYXNlIDIzNTpoPVo7YnJlYWs7Y2FzZSAyMjA6amU9UixoPVR9YnJlYWs7Y2FzZSBUOmlmKEM9PT1aJiZ3PT09VCYmamUrMiE9PVIpe2lmKDMzPT09cy5jaGFyQ29kZUF0KGplKzIpKVZlKz1zLnN1YnN0cmluZyhqZSxSKzEpO1JlPVwiXCIsaD0wfX19aWYoMD09PWgpe2lmKGdlK2QrbytqPT09MCYmdCE9PXRlJiZDIT09Vylzd2l0Y2goQyl7Y2FzZSBVOmNhc2UgYWU6Y2FzZSBfOmNhc2UgZWU6Y2FzZSBFOmNhc2UgRDppZigwPT09Tyl7c3dpdGNoKHcpe2Nhc2UgSzpjYXNlIE06Y2FzZSBJOmNhc2UgSjpSZSs9XCJcXDBcIjticmVhaztkZWZhdWx0OlJlPVwiXFwwXCIrUmUrKEM9PT1VP1wiXCI6XCJcXDBcIil9d2U9MX1lbHNlIHN3aXRjaChDKXtjYXNlIEQ6aWYoeis3PT09UiYmMTA4PT09dyl6PTA7Tz0rK3k7YnJlYWs7Y2FzZSBFOmlmKDA9PShPPS0teSkpd2U9MSxSZSs9XCJcXDBcIn1icmVhaztjYXNlIEs6Y2FzZSBNOnN3aXRjaCh3KXtjYXNlIHJlOmNhc2UgQjpjYXNlIHE6Y2FzZSBXOmNhc2UgVTpjYXNlIGNlOmNhc2UgSzpjYXNlIE06Y2FzZSBJOmNhc2UgSjpicmVhaztkZWZhdWx0OmlmKDA9PT1PKXdlPTEsUmUrPVwiXFwwXCJ9fWlmKFRlKz1SZSxDIT09TSYmQyE9PUspJD1DfX1tPXcsdz1DLFIrK31pZihqZT1WZS5sZW5ndGgsbWU+MClpZigwPT09amUmJjA9PT1YZS5sZW5ndGgmJjA9PT1hWzBdLmxlbmd0aD09ZmFsc2UpaWYodCE9PWllfHwxPT09YS5sZW5ndGgmJihnZT4wP0VlOkdlKT09PWFbMF0pamU9YS5qb2luKFwiLFwiKS5sZW5ndGgrMjtpZihqZT4wKXtpZihmPTA9PT1nZSYmdCE9PXRlP2Z1bmN0aW9uKGUpe2Zvcih2YXIgYSxyLHM9MCx0PWUubGVuZ3RoLGk9QXJyYXkodCk7czx0Oysrcyl7Zm9yKHZhciBmPWVbc10uc3BsaXQobCksbj1cIlwiLG89MCxoPTAsdT0wLGQ9MCxiPWYubGVuZ3RoO288YjsrK28pe2lmKDA9PT0oaD0ocj1mW29dKS5sZW5ndGgpJiZiPjEpY29udGludWU7aWYodT1uLmNoYXJDb2RlQXQobi5sZW5ndGgtMSksZD1yLmNoYXJDb2RlQXQoMCksYT1cIlwiLDAhPT1vKXN3aXRjaCh1KXtjYXNlIFQ6Y2FzZSBhZTpjYXNlIF86Y2FzZSBlZTpjYXNlIE06Y2FzZSBEOmJyZWFrO2RlZmF1bHQ6YT1cIiBcIn1zd2l0Y2goZCl7Y2FzZSBQOnI9YStFZTtjYXNlIGFlOmNhc2UgXzpjYXNlIGVlOmNhc2UgTTpjYXNlIEU6Y2FzZSBEOmJyZWFrO2Nhc2UgRzpyPWErcitFZTticmVhaztjYXNlIFY6c3dpdGNoKDIqci5jaGFyQ29kZUF0KDEpKzMqci5jaGFyQ29kZUF0KDIpKXtjYXNlIDUzMDppZihDZT4wKXtyPWErci5zdWJzdHJpbmcoOCxoLTEpO2JyZWFrfWRlZmF1bHQ6aWYobzwxfHxmW28tMV0ubGVuZ3RoPDEpcj1hK0VlK3J9YnJlYWs7Y2FzZSBVOmE9XCJcIjtkZWZhdWx0OmlmKGg+MSYmci5pbmRleE9mKFwiOlwiKT4wKXI9YStyLnJlcGxhY2UodixcIiQxXCIrRWUrXCIkMlwiKTtlbHNlIHI9YStyK0VlfW4rPXJ9aVtzXT1uLnJlcGxhY2UoYyxcIlwiKS50cmltKCl9cmV0dXJuIGl9KGEpOmEseWU+MClpZih2b2lkIDAhPT0obj1QZShGZSxWZSxmLGUscGUsYmUsamUsdCxpLHQpKSYmMD09PShWZT1uKS5sZW5ndGgpcmV0dXJuIFllK1ZlK1hlO2lmKFZlPWYuam9pbihcIixcIikrXCJ7XCIrVmUrXCJ9XCIsQWUqa2UhPTApe2lmKDI9PT1BZSYmIUxlKFZlLDIpKWtlPTA7c3dpdGNoKGtlKXtjYXNlIGxlOlZlPVZlLnJlcGxhY2UoayxcIjpcIitTK1wiJDFcIikrVmU7YnJlYWs7Y2FzZSBuZTpWZT1WZS5yZXBsYWNlKHAsXCI6OlwiK04rXCJpbnB1dC0kMVwiKStWZS5yZXBsYWNlKHAsXCI6OlwiK1MrXCIkMVwiKStWZS5yZXBsYWNlKHAsXCI6XCIrRitcImlucHV0LSQxXCIpK1ZlfWtlPTB9fXJldHVybiBZZStWZStYZX1mdW5jdGlvbiBJZShlLGEscil7dmFyIGM9YS50cmltKCkuc3BsaXQobykscz1jLHQ9Yy5sZW5ndGgsaT1lLmxlbmd0aDtzd2l0Y2goaSl7Y2FzZSAwOmNhc2UgMTpmb3IodmFyIGY9MCxuPTA9PT1pP1wiXCI6ZVswXStcIiBcIjtmPHQ7KytmKXNbZl09SmUobixzW2ZdLHIsaSkudHJpbSgpO2JyZWFrO2RlZmF1bHQ6Zj0wO3ZhciBsPTA7Zm9yKHM9W107Zjx0OysrZilmb3IodmFyIGg9MDtoPGk7KytoKXNbbCsrXT1KZShlW2hdK1wiIFwiLGNbZl0scixpKS50cmltKCl9cmV0dXJuIHN9ZnVuY3Rpb24gSmUoZSxhLHIsYyl7dmFyIHM9YSx0PXMuY2hhckNvZGVBdCgwKTtpZih0PDMzKXQ9KHM9cy50cmltKCkpLmNoYXJDb2RlQXQoMCk7c3dpdGNoKHQpe2Nhc2UgUDpzd2l0Y2goZ2UrYyl7Y2FzZSAwOmNhc2UgMTppZigwPT09ZS50cmltKCkubGVuZ3RoKWJyZWFrO2RlZmF1bHQ6cmV0dXJuIHMucmVwbGFjZShoLFwiJDFcIitlLnRyaW0oKSl9YnJlYWs7Y2FzZSBWOnN3aXRjaChzLmNoYXJDb2RlQXQoMSkpe2Nhc2UgMTAzOmlmKENlPjAmJmdlPjApcmV0dXJuIHMucmVwbGFjZSh1LFwiJDFcIikucmVwbGFjZShoLFwiJDFcIitHZSk7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gZS50cmltKCkrcy5yZXBsYWNlKGgsXCIkMVwiK2UudHJpbSgpKX1kZWZhdWx0OmlmKHIqZ2U+MCYmcy5pbmRleE9mKFwiXFxmXCIpPjApcmV0dXJuIHMucmVwbGFjZShoLChlLmNoYXJDb2RlQXQoMCk9PT1WP1wiXCI6XCIkMVwiKStlLnRyaW0oKSl9cmV0dXJuIGUrc31mdW5jdGlvbiBLZShlLGEscixjKXt2YXIgbCxvPTAsaD1lK1wiO1wiLHU9MiphKzMqcis0KmM7aWYoOTQ0PT09dSlyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIGE9ZS5sZW5ndGgscj1lLmluZGV4T2YoXCI6XCIsOSkrMSxjPWUuc3Vic3RyaW5nKDAscikudHJpbSgpLHM9ZS5zdWJzdHJpbmcocixhLTEpLnRyaW0oKTtzd2l0Y2goZS5jaGFyQ29kZUF0KDkpKkJlKXtjYXNlIDA6YnJlYWs7Y2FzZSBROmlmKDExMCE9PWUuY2hhckNvZGVBdCgxMCkpYnJlYWs7ZGVmYXVsdDpmb3IodmFyIHQ9cy5zcGxpdCgocz1cIlwiLGYpKSxpPTAscj0wLGE9dC5sZW5ndGg7aTxhO3I9MCwrK2kpe2Zvcih2YXIgbD10W2ldLG89bC5zcGxpdChuKTtsPW9bcl07KXt2YXIgaD1sLmNoYXJDb2RlQXQoMCk7aWYoMT09PUJlJiYoaD5MJiZoPDkwfHxoPjk2JiZoPDEyM3x8aD09PVJ8fGg9PT1RJiZsLmNoYXJDb2RlQXQoMSkhPT1RKSlzd2l0Y2goaXNOYU4ocGFyc2VGbG9hdChsKSkrKC0xIT09bC5pbmRleE9mKFwiKFwiKSkpe2Nhc2UgMTpzd2l0Y2gobCl7Y2FzZVwiaW5maW5pdGVcIjpjYXNlXCJhbHRlcm5hdGVcIjpjYXNlXCJiYWNrd2FyZHNcIjpjYXNlXCJydW5uaW5nXCI6Y2FzZVwibm9ybWFsXCI6Y2FzZVwiZm9yd2FyZHNcIjpjYXNlXCJib3RoXCI6Y2FzZVwibm9uZVwiOmNhc2VcImxpbmVhclwiOmNhc2VcImVhc2VcIjpjYXNlXCJlYXNlLWluXCI6Y2FzZVwiZWFzZS1vdXRcIjpjYXNlXCJlYXNlLWluLW91dFwiOmNhc2VcInBhdXNlZFwiOmNhc2VcInJldmVyc2VcIjpjYXNlXCJhbHRlcm5hdGUtcmV2ZXJzZVwiOmNhc2VcImluaGVyaXRcIjpjYXNlXCJpbml0aWFsXCI6Y2FzZVwidW5zZXRcIjpjYXNlXCJzdGVwLXN0YXJ0XCI6Y2FzZVwic3RlcC1lbmRcIjpicmVhaztkZWZhdWx0OmwrPURlfX1vW3IrK109bH1zKz0oMD09PWk/XCJcIjpcIixcIikrby5qb2luKFwiIFwiKX19aWYocz1jK3MrXCI7XCIsMT09PUFlfHwyPT09QWUmJkxlKHMsMSkpcmV0dXJuIE4rcytzO3JldHVybiBzfShoKTtlbHNlIGlmKDA9PT1BZXx8Mj09PUFlJiYhTGUoaCwxKSlyZXR1cm4gaDtzd2l0Y2godSl7Y2FzZSAxMDE1OnJldHVybiA5Nz09PWguY2hhckNvZGVBdCgxMCk/TitoK2g6aDtjYXNlIDk1MTpyZXR1cm4gMTE2PT09aC5jaGFyQ29kZUF0KDMpP04raCtoOmg7Y2FzZSA5NjM6cmV0dXJuIDExMD09PWguY2hhckNvZGVBdCg1KT9OK2graDpoO2Nhc2UgMTAwOTppZigxMDAhPT1oLmNoYXJDb2RlQXQoNCkpYnJlYWs7Y2FzZSA5Njk6Y2FzZSA5NDI6cmV0dXJuIE4raCtoO2Nhc2UgOTc4OnJldHVybiBOK2grUytoK2g7Y2FzZSAxMDE5OmNhc2UgOTgzOnJldHVybiBOK2grUytoK0YraCtoO2Nhc2UgODgzOmlmKGguY2hhckNvZGVBdCg4KT09PVEpcmV0dXJuIE4raCtoO2lmKGguaW5kZXhPZihcImltYWdlLXNldChcIiwxMSk+MClyZXR1cm4gaC5yZXBsYWNlKHosXCIkMVwiK04rXCIkMlwiKStoO3JldHVybiBoO2Nhc2UgOTMyOmlmKGguY2hhckNvZGVBdCg0KT09PVEpc3dpdGNoKGguY2hhckNvZGVBdCg1KSl7Y2FzZSAxMDM6cmV0dXJuIE4rXCJib3gtXCIraC5yZXBsYWNlKFwiLWdyb3dcIixcIlwiKStOK2grRitoLnJlcGxhY2UoXCJncm93XCIsXCJwb3NpdGl2ZVwiKStoO2Nhc2UgMTE1OnJldHVybiBOK2grRitoLnJlcGxhY2UoXCJzaHJpbmtcIixcIm5lZ2F0aXZlXCIpK2g7Y2FzZSA5ODpyZXR1cm4gTitoK0YraC5yZXBsYWNlKFwiYmFzaXNcIixcInByZWZlcnJlZC1zaXplXCIpK2h9cmV0dXJuIE4raCtGK2graDtjYXNlIDk2NDpyZXR1cm4gTitoK0YrXCJmbGV4LVwiK2graDtjYXNlIDEwMjM6aWYoOTkhPT1oLmNoYXJDb2RlQXQoOCkpYnJlYWs7cmV0dXJuIGw9aC5zdWJzdHJpbmcoaC5pbmRleE9mKFwiOlwiLDE1KSkucmVwbGFjZShcImZsZXgtXCIsXCJcIikucmVwbGFjZShcInNwYWNlLWJldHdlZW5cIixcImp1c3RpZnlcIiksTitcImJveC1wYWNrXCIrbCtOK2grRitcImZsZXgtcGFja1wiK2wraDtjYXNlIDEwMDU6cmV0dXJuIHQudGVzdChoKT9oLnJlcGxhY2UocyxcIjpcIitOKStoLnJlcGxhY2UocyxcIjpcIitTKStoOmg7Y2FzZSAxZTM6c3dpdGNoKG89KGw9aC5zdWJzdHJpbmcoMTMpLnRyaW0oKSkuaW5kZXhPZihcIi1cIikrMSxsLmNoYXJDb2RlQXQoMCkrbC5jaGFyQ29kZUF0KG8pKXtjYXNlIDIyNjpsPWgucmVwbGFjZShtLFwidGJcIik7YnJlYWs7Y2FzZSAyMzI6bD1oLnJlcGxhY2UobSxcInRiLXJsXCIpO2JyZWFrO2Nhc2UgMjIwOmw9aC5yZXBsYWNlKG0sXCJsclwiKTticmVhaztkZWZhdWx0OnJldHVybiBofXJldHVybiBOK2grRitsK2g7Y2FzZSAxMDE3OmlmKC0xPT09aC5pbmRleE9mKFwic3RpY2t5XCIsOSkpcmV0dXJuIGg7Y2FzZSA5NzU6c3dpdGNoKG89KGg9ZSkubGVuZ3RoLTEwLHU9KGw9KDMzPT09aC5jaGFyQ29kZUF0KG8pP2guc3Vic3RyaW5nKDAsbyk6aCkuc3Vic3RyaW5nKGUuaW5kZXhPZihcIjpcIiw3KSsxKS50cmltKCkpLmNoYXJDb2RlQXQoMCkrKDB8bC5jaGFyQ29kZUF0KDcpKSl7Y2FzZSAyMDM6aWYobC5jaGFyQ29kZUF0KDgpPDExMSlicmVhaztjYXNlIDExNTpoPWgucmVwbGFjZShsLE4rbCkrXCI7XCIraDticmVhaztjYXNlIDIwNzpjYXNlIDEwMjpoPWgucmVwbGFjZShsLE4rKHU+MTAyP1wiaW5saW5lLVwiOlwiXCIpK1wiYm94XCIpK1wiO1wiK2gucmVwbGFjZShsLE4rbCkrXCI7XCIraC5yZXBsYWNlKGwsRitsK1wiYm94XCIpK1wiO1wiK2h9cmV0dXJuIGgrXCI7XCI7Y2FzZSA5Mzg6aWYoaC5jaGFyQ29kZUF0KDUpPT09USlzd2l0Y2goaC5jaGFyQ29kZUF0KDYpKXtjYXNlIDEwNTpyZXR1cm4gbD1oLnJlcGxhY2UoXCItaXRlbXNcIixcIlwiKSxOK2grTitcImJveC1cIitsK0YrXCJmbGV4LVwiK2wraDtjYXNlIDExNTpyZXR1cm4gTitoK0YrXCJmbGV4LWl0ZW0tXCIraC5yZXBsYWNlKHksXCJcIikraDtkZWZhdWx0OnJldHVybiBOK2grRitcImZsZXgtbGluZS1wYWNrXCIraC5yZXBsYWNlKFwiYWxpZ24tY29udGVudFwiLFwiXCIpLnJlcGxhY2UoeSxcIlwiKStofWJyZWFrO2Nhc2UgOTczOmNhc2UgOTg5OmlmKGguY2hhckNvZGVBdCgzKSE9PVF8fDEyMj09PWguY2hhckNvZGVBdCg0KSlicmVhaztjYXNlIDkzMTpjYXNlIDk1MzppZih0cnVlPT09ai50ZXN0KGUpKWlmKDExNT09PShsPWUuc3Vic3RyaW5nKGUuaW5kZXhPZihcIjpcIikrMSkpLmNoYXJDb2RlQXQoMCkpcmV0dXJuIEtlKGUucmVwbGFjZShcInN0cmV0Y2hcIixcImZpbGwtYXZhaWxhYmxlXCIpLGEscixjKS5yZXBsYWNlKFwiOmZpbGwtYXZhaWxhYmxlXCIsXCI6c3RyZXRjaFwiKTtlbHNlIHJldHVybiBoLnJlcGxhY2UobCxOK2wpK2gucmVwbGFjZShsLFMrbC5yZXBsYWNlKFwiZmlsbC1cIixcIlwiKSkraDticmVhaztjYXNlIDk2MjppZihoPU4raCsoMTAyPT09aC5jaGFyQ29kZUF0KDUpP0YraDpcIlwiKStoLHIrYz09PTIxMSYmMTA1PT09aC5jaGFyQ29kZUF0KDEzKSYmaC5pbmRleE9mKFwidHJhbnNmb3JtXCIsMTApPjApcmV0dXJuIGguc3Vic3RyaW5nKDAsaC5pbmRleE9mKFwiO1wiLDI3KSsxKS5yZXBsYWNlKGksXCIkMVwiK04rXCIkMlwiKStofXJldHVybiBofWZ1bmN0aW9uIExlKGUsYSl7dmFyIHI9ZS5pbmRleE9mKDE9PT1hP1wiOlwiOlwie1wiKSxjPWUuc3Vic3RyaW5nKDAsMyE9PWE/cjoxMCkscz1lLnN1YnN0cmluZyhyKzEsZS5sZW5ndGgtMSk7cmV0dXJuIE9lKDIhPT1hP2M6Yy5yZXBsYWNlKE8sXCIkMVwiKSxzLGEpfWZ1bmN0aW9uIE1lKGUsYSl7dmFyIHI9S2UoYSxhLmNoYXJDb2RlQXQoMCksYS5jaGFyQ29kZUF0KDEpLGEuY2hhckNvZGVBdCgyKSk7cmV0dXJuIHIhPT1hK1wiO1wiP3IucmVwbGFjZSgkLFwiIG9yICgkMSlcIikuc3Vic3RyaW5nKDQpOlwiKFwiK2ErXCIpXCJ9ZnVuY3Rpb24gUGUoZSxhLHIsYyxzLHQsaSxmLG4sbCl7Zm9yKHZhciBvLGg9MCx1PWE7aDx5ZTsrK2gpc3dpdGNoKG89JGVbaF0uY2FsbChUZSxlLHUscixjLHMsdCxpLGYsbixsKSl7Y2FzZSB2b2lkIDA6Y2FzZSBmYWxzZTpjYXNlIHRydWU6Y2FzZSBudWxsOmJyZWFrO2RlZmF1bHQ6dT1vfWlmKHUhPT1hKXJldHVybiB1fWZ1bmN0aW9uIFFlKGUsYSxyLGMpe2Zvcih2YXIgcz1hKzE7czxyOysrcylzd2l0Y2goYy5jaGFyQ29kZUF0KHMpKXtjYXNlIFo6aWYoZT09PVQpaWYoYy5jaGFyQ29kZUF0KHMtMSk9PT1UJiZhKzIhPT1zKXJldHVybiBzKzE7YnJlYWs7Y2FzZSBJOmlmKGU9PT1aKXJldHVybiBzKzF9cmV0dXJuIHN9ZnVuY3Rpb24gUmUoZSl7Zm9yKHZhciBhIGluIGUpe3ZhciByPWVbYV07c3dpdGNoKGEpe2Nhc2VcImtleWZyYW1lXCI6QmU9MHxyO2JyZWFrO2Nhc2VcImdsb2JhbFwiOkNlPTB8cjticmVhaztjYXNlXCJjYXNjYWRlXCI6Z2U9MHxyO2JyZWFrO2Nhc2VcImNvbXByZXNzXCI6d2U9MHxyO2JyZWFrO2Nhc2VcInNlbWljb2xvblwiOnZlPTB8cjticmVhaztjYXNlXCJwcmVzZXJ2ZVwiOm1lPTB8cjticmVhaztjYXNlXCJwcmVmaXhcIjppZihPZT1udWxsLCFyKUFlPTA7ZWxzZSBpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiByKUFlPTE7ZWxzZSBBZT0yLE9lPXJ9fXJldHVybiBSZX1mdW5jdGlvbiBUZShhLHIpe2lmKHZvaWQgMCE9PXRoaXMmJnRoaXMuY29uc3RydWN0b3I9PT1UZSlyZXR1cm4gZShhKTt2YXIgcz1hLHQ9cy5jaGFyQ29kZUF0KDApO2lmKHQ8MzMpdD0ocz1zLnRyaW0oKSkuY2hhckNvZGVBdCgwKTtpZihCZT4wKURlPXMucmVwbGFjZShkLHQ9PT1HP1wiXCI6XCItXCIpO2lmKHQ9MSwxPT09Z2UpR2U9cztlbHNlIEVlPXM7dmFyIGksZj1bR2VdO2lmKHllPjApaWYodm9pZCAwIT09KGk9UGUoemUscixmLGYscGUsYmUsMCwwLDAsMCkpJiZcInN0cmluZ1wiPT10eXBlb2YgaSlyPWk7dmFyIG49SGUoeGUsZixyLDAsMCk7aWYoeWU+MClpZih2b2lkIDAhPT0oaT1QZShqZSxuLGYsZixwZSxiZSxuLmxlbmd0aCwwLDAsMCkpJiZcInN0cmluZ1wiIT10eXBlb2Yobj1pKSl0PTA7cmV0dXJuIERlPVwiXCIsR2U9XCJcIixFZT1cIlwiLGtlPTAscGU9MSxiZT0xLHdlKnQ9PTA/bjpuLnJlcGxhY2UoYyxcIlwiKS5yZXBsYWNlKGcsXCJcIikucmVwbGFjZShBLFwiJDFcIikucmVwbGFjZShDLFwiJDFcIikucmVwbGFjZSh3LFwiIFwiKX1pZihUZS51c2U9ZnVuY3Rpb24gZShhKXtzd2l0Y2goYSl7Y2FzZSB2b2lkIDA6Y2FzZSBudWxsOnllPSRlLmxlbmd0aD0wO2JyZWFrO2RlZmF1bHQ6aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYSkkZVt5ZSsrXT1hO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGEpZm9yKHZhciByPTAsYz1hLmxlbmd0aDtyPGM7KytyKWUoYVtyXSk7ZWxzZSBxZT0wfCEhYX1yZXR1cm4gZX0sVGUuc2V0PVJlLHZvaWQgMCE9PWEpUmUoYSk7cmV0dXJuIFRlfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsaXMubWluLmpzLm1hcCIsInZhciBzaW1wbGVJc0VxdWFsID0gZnVuY3Rpb24gc2ltcGxlSXNFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxuZnVuY3Rpb24gaW5kZXggKHJlc3VsdEZuLCBpc0VxdWFsKSB7XG4gIGlmIChpc0VxdWFsID09PSB2b2lkIDApIHtcbiAgICBpc0VxdWFsID0gc2ltcGxlSXNFcXVhbDtcbiAgfVxuXG4gIHZhciBsYXN0VGhpcztcbiAgdmFyIGxhc3RBcmdzID0gW107XG4gIHZhciBsYXN0UmVzdWx0O1xuICB2YXIgY2FsbGVkT25jZSA9IGZhbHNlO1xuXG4gIHZhciBpc05ld0FyZ0VxdWFsVG9MYXN0ID0gZnVuY3Rpb24gaXNOZXdBcmdFcXVhbFRvTGFzdChuZXdBcmcsIGluZGV4KSB7XG4gICAgcmV0dXJuIGlzRXF1YWwobmV3QXJnLCBsYXN0QXJnc1tpbmRleF0sIGluZGV4KTtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBuZXdBcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgbmV3QXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoY2FsbGVkT25jZSAmJiBsYXN0VGhpcyA9PT0gdGhpcyAmJiBuZXdBcmdzLmxlbmd0aCA9PT0gbGFzdEFyZ3MubGVuZ3RoICYmIG5ld0FyZ3MuZXZlcnkoaXNOZXdBcmdFcXVhbFRvTGFzdCkpIHtcbiAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgIH1cblxuICAgIGxhc3RSZXN1bHQgPSByZXN1bHRGbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcbiAgICBjYWxsZWRPbmNlID0gdHJ1ZTtcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdEFyZ3MgPSBuZXdBcmdzO1xuICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICB9O1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ0BmaXJlYmFzZS91dGlsJyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgY29udGFpbnMgPSBmdW5jdGlvbiAob2JqLCBrZXkpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xyXG59O1xyXG52YXIgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XHJcbi8vIEFuIGFycmF5IHRvIGNhcHR1cmUgbGlzdGVuZXJzIGJlZm9yZSB0aGUgdHJ1ZSBhdXRoIGZ1bmN0aW9uc1xyXG4vLyBleGlzdFxyXG52YXIgdG9rZW5MaXN0ZW5lcnMgPSBbXTtcclxuLyoqXHJcbiAqIEdsb2JhbCBjb250ZXh0IG9iamVjdCBmb3IgYSBjb2xsZWN0aW9uIG9mIHNlcnZpY2VzIHVzaW5nXHJcbiAqIGEgc2hhcmVkIGF1dGhlbnRpY2F0aW9uIHN0YXRlLlxyXG4gKi9cclxudmFyIEZpcmViYXNlQXBwSW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZpcmViYXNlQXBwSW1wbChvcHRpb25zLCBjb25maWcsIGZpcmViYXNlXykge1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VfID0gZmlyZWJhc2VfO1xyXG4gICAgICAgIHRoaXMuaXNEZWxldGVkXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2VydmljZXNfID0ge307XHJcbiAgICAgICAgdGhpcy5uYW1lXyA9IGNvbmZpZy5uYW1lO1xyXG4gICAgICAgIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9XHJcbiAgICAgICAgICAgIGNvbmZpZy5hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgfHwgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zXyA9IHV0aWwuZGVlcENvcHkob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5JTlRFUk5BTCA9IHtcclxuICAgICAgICAgICAgZ2V0VWlkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9LFxyXG4gICAgICAgICAgICBnZXRUb2tlbjogZnVuY3Rpb24gKCkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpOyB9LFxyXG4gICAgICAgICAgICBhZGRBdXRoVG9rZW5MaXN0ZW5lcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICB0b2tlbkxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBjYWxsYmFjayBpcyBjYWxsZWQsIGFzeW5jaHJvbm91c2x5LCBpbiB0aGUgYWJzZW5jZSBvZiB0aGUgYXV0aCBtb2R1bGVcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbGJhY2sobnVsbCk7IH0sIDApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZW1vdmVBdXRoVG9rZW5MaXN0ZW5lcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICB0b2tlbkxpc3RlbmVycyA9IHRva2VuTGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyICE9PSBjYWxsYmFjazsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwiYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkXygpO1xyXG4gICAgICAgICAgICB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZSwgXCJuYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZV87XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZSwgXCJvcHRpb25zXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc187XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZmlyZWJhc2VfLklOVEVSTkFMLnJlbW92ZUFwcChfdGhpcy5uYW1lXyk7XHJcbiAgICAgICAgICAgIHZhciBzZXJ2aWNlcyA9IFtdO1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhfdGhpcy5zZXJ2aWNlc18pLmZvckVhY2goZnVuY3Rpb24gKHNlcnZpY2VLZXkpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKF90aGlzLnNlcnZpY2VzX1tzZXJ2aWNlS2V5XSkuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2VLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcy5wdXNoKF90aGlzLnNlcnZpY2VzX1tzZXJ2aWNlS2V5XVtpbnN0YW5jZUtleV0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoc2VydmljZXMubWFwKGZ1bmN0aW9uIChzZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZS5JTlRFUk5BTC5kZWxldGUoKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuaXNEZWxldGVkXyA9IHRydWU7XHJcbiAgICAgICAgICAgIF90aGlzLnNlcnZpY2VzXyA9IHt9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGEgc2VydmljZSBpbnN0YW5jZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBhcHAgKGNyZWF0aW5nIGl0XHJcbiAgICAgKiBvbiBkZW1hbmQpLCBpZGVudGlmaWVkIGJ5IHRoZSBwYXNzZWQgaW5zdGFuY2VJZGVudGlmaWVyLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IEN1cnJlbnRseSBzdG9yYWdlIGlzIHRoZSBvbmx5IG9uZSB0aGF0IGlzIGxldmVyYWdpbmcgdGhpc1xyXG4gICAgICogZnVuY3Rpb25hbGl0eS4gVGhleSBpbnZva2UgaXQgYnkgY2FsbGluZzpcclxuICAgICAqXHJcbiAgICAgKiBgYGBqYXZhc2NyaXB0XHJcbiAgICAgKiBmaXJlYmFzZS5hcHAoKS5zdG9yYWdlKCdTVE9SQUdFIEJVQ0tFVCBJRCcpXHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBUaGUgc2VydmljZSBuYW1lIGlzIHBhc3NlZCB0byB0aGlzIGFscmVhZHlcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLl9nZXRTZXJ2aWNlID0gZnVuY3Rpb24gKG5hbWUsIGluc3RhbmNlSWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmIChpbnN0YW5jZUlkZW50aWZpZXIgPT09IHZvaWQgMCkgeyBpbnN0YW5jZUlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUU7IH1cclxuICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkXygpO1xyXG4gICAgICAgIGlmICghdGhpcy5zZXJ2aWNlc19bbmFtZV0pIHtcclxuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlc19bbmFtZV0gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnNlcnZpY2VzX1tuYW1lXVtpbnN0YW5jZUlkZW50aWZpZXJdKSB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBJZiBhIGN1c3RvbSBpbnN0YW5jZSBoYXMgYmVlbiBkZWZpbmVkIChpLmUuIG5vdCAnW0RFRkFVTFRdJylcclxuICAgICAgICAgICAgICogdGhlbiB3ZSB3aWxsIHBhc3MgdGhhdCBpbnN0YW5jZSBvbiwgb3RoZXJ3aXNlIHdlIHBhc3MgYG51bGxgXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VTcGVjaWZpZXIgPSBpbnN0YW5jZUlkZW50aWZpZXIgIT09IERFRkFVTFRfRU5UUllfTkFNRVxyXG4gICAgICAgICAgICAgICAgPyBpbnN0YW5jZUlkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB2YXIgc2VydmljZSA9IHRoaXMuZmlyZWJhc2VfLklOVEVSTkFMLmZhY3Rvcmllc1tuYW1lXSh0aGlzLCB0aGlzLmV4dGVuZEFwcC5iaW5kKHRoaXMpLCBpbnN0YW5jZVNwZWNpZmllcik7XHJcbiAgICAgICAgICAgIHRoaXMuc2VydmljZXNfW25hbWVdW2luc3RhbmNlSWRlbnRpZmllcl0gPSBzZXJ2aWNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlc19bbmFtZV1baW5zdGFuY2VJZGVudGlmaWVyXTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrIGZ1bmN0aW9uIHVzZWQgdG8gZXh0ZW5kIGFuIEFwcCBpbnN0YW5jZSBhdCB0aGUgdGltZVxyXG4gICAgICogb2Ygc2VydmljZSBpbnN0YW5jZSBjcmVhdGlvbi5cclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5leHRlbmRBcHAgPSBmdW5jdGlvbiAocHJvcHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIENvcHkgdGhlIG9iamVjdCBvbnRvIHRoZSBGaXJlYmFzZUFwcEltcGwgcHJvdG90eXBlXHJcbiAgICAgICAgdXRpbC5kZWVwRXh0ZW5kKHRoaXMsIHByb3BzKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiB0aGUgYXBwIGhhcyBvdmVyd3JpdHRlbiB0aGUgYWRkQXV0aFRva2VuTGlzdGVuZXIgc3R1YiwgZm9yd2FyZFxyXG4gICAgICAgICAqIHRoZSBhY3RpdmUgdG9rZW4gbGlzdGVuZXJzIG9uIHRvIHRoZSB0cnVlIGZ4bi5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFRPRE86IFRoaXMgZnVuY3Rpb24gaXMgcmVxdWlyZWQgZHVlIHRvIG91ciBjdXJyZW50IG1vZHVsZVxyXG4gICAgICAgICAqIHN0cnVjdHVyZS4gT25jZSB3ZSBhcmUgYWJsZSB0byByZWx5IHN0cmljdGx5IHVwb24gYSBzaW5nbGUgbW9kdWxlXHJcbiAgICAgICAgICogaW1wbGVtZW50YXRpb24sIHRoaXMgY29kZSBzaG91bGQgYmUgcmVmYWN0b3JlZCBhbmQgQXV0aCBzaG91bGRcclxuICAgICAgICAgKiBwcm92aWRlIHRoZXNlIHN0dWJzIGFuZCB0aGUgdXBncmFkZSBsb2dpY1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChwcm9wcy5JTlRFUk5BTCAmJiBwcm9wcy5JTlRFUk5BTC5hZGRBdXRoVG9rZW5MaXN0ZW5lcikge1xyXG4gICAgICAgICAgICB0b2tlbkxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuSU5URVJOQUwuYWRkQXV0aFRva2VuTGlzdGVuZXIobGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdG9rZW5MaXN0ZW5lcnMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYW4gRXJyb3IgaWYgdGhlIEFwcCBoYXMgYWxyZWFkeSBiZWVuIGRlbGV0ZWQgLVxyXG4gICAgICogdXNlIGJlZm9yZSBwZXJmb3JtaW5nIEFQSSBhY3Rpb25zIG9uIHRoZSBBcHAuXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuY2hlY2tEZXN0cm95ZWRfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRGVsZXRlZF8pIHtcclxuICAgICAgICAgICAgZXJyb3IoJ2FwcC1kZWxldGVkJywgeyBuYW1lOiB0aGlzLm5hbWVfIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRmlyZWJhc2VBcHBJbXBsO1xyXG59KCkpO1xyXG4vLyBQcmV2ZW50IGRlYWQtY29kZSBlbGltaW5hdGlvbiBvZiB0aGVzZSBtZXRob2RzIHcvbyBpbnZhbGlkIHByb3BlcnR5XHJcbi8vIGNvcHlpbmcuXHJcbihGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLm5hbWUgJiYgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5vcHRpb25zKSB8fFxyXG4gICAgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5kZWxldGUgfHxcclxuICAgIGNvbnNvbGUubG9nKCdkYycpO1xyXG4vKipcclxuICogUmV0dXJuIGEgZmlyZWJhc2UgbmFtZXNwYWNlIG9iamVjdC5cclxuICpcclxuICogSW4gcHJvZHVjdGlvbiwgdGhpcyB3aWxsIGJlIGNhbGxlZCBleGFjdGx5IG9uY2UgYW5kIHRoZSByZXN1bHRcclxuICogYXNzaWduZWQgdG8gdGhlICdmaXJlYmFzZScgZ2xvYmFsLiAgSXQgbWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lc1xyXG4gKiBpbiB1bml0IHRlc3RzLlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlRmlyZWJhc2VOYW1lc3BhY2UoKSB7XHJcbiAgICB2YXIgYXBwc18gPSB7fTtcclxuICAgIHZhciBmYWN0b3JpZXMgPSB7fTtcclxuICAgIHZhciBhcHBIb29rcyA9IHt9O1xyXG4gICAgLy8gQSBuYW1lc3BhY2UgaXMgYSBwbGFpbiBKYXZhU2NyaXB0IE9iamVjdC5cclxuICAgIHZhciBuYW1lc3BhY2UgPSB7XHJcbiAgICAgICAgLy8gSGFjayB0byBwcmV2ZW50IEJhYmVsIGZyb20gbW9kaWZ5aW5nIHRoZSBvYmplY3QgcmV0dXJuZWRcclxuICAgICAgICAvLyBhcyB0aGUgZmlyZWJhc2UgbmFtZXNwYWNlLlxyXG4gICAgICAgIF9fZXNNb2R1bGU6IHRydWUsXHJcbiAgICAgICAgaW5pdGlhbGl6ZUFwcDogaW5pdGlhbGl6ZUFwcCxcclxuICAgICAgICBhcHA6IGFwcCxcclxuICAgICAgICBhcHBzOiBudWxsLFxyXG4gICAgICAgIFByb21pc2U6IFByb21pc2UsXHJcbiAgICAgICAgU0RLX1ZFUlNJT046ICc1LjguNicsXHJcbiAgICAgICAgSU5URVJOQUw6IHtcclxuICAgICAgICAgICAgcmVnaXN0ZXJTZXJ2aWNlOiByZWdpc3RlclNlcnZpY2UsXHJcbiAgICAgICAgICAgIGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlOiBjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZSxcclxuICAgICAgICAgICAgZXh0ZW5kTmFtZXNwYWNlOiBleHRlbmROYW1lc3BhY2UsXHJcbiAgICAgICAgICAgIGNyZWF0ZVN1YnNjcmliZTogdXRpbC5jcmVhdGVTdWJzY3JpYmUsXHJcbiAgICAgICAgICAgIEVycm9yRmFjdG9yeTogdXRpbC5FcnJvckZhY3RvcnksXHJcbiAgICAgICAgICAgIHJlbW92ZUFwcDogcmVtb3ZlQXBwLFxyXG4gICAgICAgICAgICBmYWN0b3JpZXM6IGZhY3RvcmllcyxcclxuICAgICAgICAgICAgdXNlQXNTZXJ2aWNlOiB1c2VBc1NlcnZpY2UsXHJcbiAgICAgICAgICAgIFByb21pc2U6IFByb21pc2UsXHJcbiAgICAgICAgICAgIGRlZXBFeHRlbmQ6IHV0aWwuZGVlcEV4dGVuZFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBJbmplY3QgYSBjaXJjdWxhciBkZWZhdWx0IGV4cG9ydCB0byBhbGxvdyBCYWJlbCB1c2VycyB3aG8gd2VyZSBwcmV2aW91c2x5XHJcbiAgICAvLyB1c2luZzpcclxuICAgIC8vXHJcbiAgICAvLyAgIGltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZSc7XHJcbiAgICAvLyAgIHdoaWNoIGJlY29tZXM6IHZhciBmaXJlYmFzZSA9IHJlcXVpcmUoJ2ZpcmViYXNlJykuZGVmYXVsdDtcclxuICAgIC8vXHJcbiAgICAvLyBpbnN0ZWFkIG9mXHJcbiAgICAvL1xyXG4gICAgLy8gICBpbXBvcnQgKiBhcyBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZSc7XHJcbiAgICAvLyAgIHdoaWNoIGJlY29tZXM6IHZhciBmaXJlYmFzZSA9IHJlcXVpcmUoJ2ZpcmViYXNlJyk7XHJcbiAgICB1dGlsLnBhdGNoUHJvcGVydHkobmFtZXNwYWNlLCAnZGVmYXVsdCcsIG5hbWVzcGFjZSk7XHJcbiAgICAvLyBmaXJlYmFzZS5hcHBzIGlzIGEgcmVhZC1vbmx5IGdldHRlci5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuYW1lc3BhY2UsICdhcHBzJywge1xyXG4gICAgICAgIGdldDogZ2V0QXBwc1xyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBieSBBcHAuZGVsZXRlKCkgLSBidXQgYmVmb3JlIGFueSBzZXJ2aWNlcyBhc3NvY2lhdGVkIHdpdGggdGhlIEFwcFxyXG4gICAgICogYXJlIGRlbGV0ZWQuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUFwcChuYW1lKSB7XHJcbiAgICAgICAgdmFyIGFwcCA9IGFwcHNfW25hbWVdO1xyXG4gICAgICAgIGNhbGxBcHBIb29rcyhhcHAsICdkZWxldGUnKTtcclxuICAgICAgICBkZWxldGUgYXBwc19bbmFtZV07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgQXBwIG9iamVjdCBmb3IgYSBnaXZlbiBuYW1lIChvciBERUZBVUxUKS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYXBwKG5hbWUpIHtcclxuICAgICAgICBuYW1lID0gbmFtZSB8fCBERUZBVUxUX0VOVFJZX05BTUU7XHJcbiAgICAgICAgaWYgKCFjb250YWlucyhhcHBzXywgbmFtZSkpIHtcclxuICAgICAgICAgICAgZXJyb3IoJ25vLWFwcCcsIHsgbmFtZTogbmFtZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFwcHNfW25hbWVdO1xyXG4gICAgfVxyXG4gICAgdXRpbC5wYXRjaFByb3BlcnR5KGFwcCwgJ0FwcCcsIEZpcmViYXNlQXBwSW1wbCk7XHJcbiAgICBmdW5jdGlvbiBpbml0aWFsaXplQXBwKG9wdGlvbnMsIHJhd0NvbmZpZykge1xyXG4gICAgICAgIGlmIChyYXdDb25maWcgPT09IHZvaWQgMCkgeyByYXdDb25maWcgPSB7fTsgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgcmF3Q29uZmlnICE9PSAnb2JqZWN0JyB8fCByYXdDb25maWcgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWVfMSA9IHJhd0NvbmZpZztcclxuICAgICAgICAgICAgcmF3Q29uZmlnID0geyBuYW1lOiBuYW1lXzEgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbmZpZyA9IHJhd0NvbmZpZztcclxuICAgICAgICBpZiAoY29uZmlnLm5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25maWcubmFtZSA9IERFRkFVTFRfRU5UUllfTkFNRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG5hbWUgPSBjb25maWcubmFtZTtcclxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8ICFuYW1lKSB7XHJcbiAgICAgICAgICAgIGVycm9yKCdiYWQtYXBwLW5hbWUnLCB7IG5hbWU6IG5hbWUgKyAnJyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbnRhaW5zKGFwcHNfLCBuYW1lKSkge1xyXG4gICAgICAgICAgICBlcnJvcignZHVwbGljYXRlLWFwcCcsIHsgbmFtZTogbmFtZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFwcCA9IG5ldyBGaXJlYmFzZUFwcEltcGwob3B0aW9ucywgY29uZmlnLCBuYW1lc3BhY2UpO1xyXG4gICAgICAgIGFwcHNfW25hbWVdID0gYXBwO1xyXG4gICAgICAgIGNhbGxBcHBIb29rcyhhcHAsICdjcmVhdGUnKTtcclxuICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgfVxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhbiBhcnJheSBvZiBhbGwgdGhlIG5vbi1kZWxldGVkIEZpcmViYXNlQXBwcy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0QXBwcygpIHtcclxuICAgICAgICAvLyBNYWtlIGEgY29weSBzbyBjYWxsZXIgY2Fubm90IG11dGF0ZSB0aGUgYXBwcyBsaXN0LlxyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhcHBzXykubWFwKGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBhcHBzX1tuYW1lXTsgfSk7XHJcbiAgICB9XHJcbiAgICAvKlxyXG4gICAgICogUmVnaXN0ZXIgYSBGaXJlYmFzZSBTZXJ2aWNlLlxyXG4gICAgICpcclxuICAgICAqIGZpcmViYXNlLklOVEVSTkFMLnJlZ2lzdGVyU2VydmljZSgpXHJcbiAgICAgKlxyXG4gICAgICogVE9ETzogSW1wbGVtZW50IHNlcnZpY2VQcm9wZXJ0aWVzLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiByZWdpc3RlclNlcnZpY2UobmFtZSwgY3JlYXRlU2VydmljZSwgc2VydmljZVByb3BlcnRpZXMsIGFwcEhvb2ssIGFsbG93TXVsdGlwbGVJbnN0YW5jZXMpIHtcclxuICAgICAgICAvLyBDYW5ub3QgcmUtcmVnaXN0ZXIgYSBzZXJ2aWNlIHRoYXQgYWxyZWFkeSBleGlzdHNcclxuICAgICAgICBpZiAoZmFjdG9yaWVzW25hbWVdKSB7XHJcbiAgICAgICAgICAgIGVycm9yKCdkdXBsaWNhdGUtc2VydmljZScsIHsgbmFtZTogbmFtZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ2FwdHVyZSB0aGUgc2VydmljZSBmYWN0b3J5IGZvciBsYXRlciBzZXJ2aWNlIGluc3RhbnRpYXRpb25cclxuICAgICAgICBmYWN0b3JpZXNbbmFtZV0gPSBjcmVhdGVTZXJ2aWNlO1xyXG4gICAgICAgIC8vIENhcHR1cmUgdGhlIGFwcEhvb2ssIGlmIHBhc3NlZFxyXG4gICAgICAgIGlmIChhcHBIb29rKSB7XHJcbiAgICAgICAgICAgIGFwcEhvb2tzW25hbWVdID0gYXBwSG9vaztcclxuICAgICAgICAgICAgLy8gUnVuIHRoZSAqKm5ldyoqIGFwcCBob29rIG9uIGFsbCBleGlzdGluZyBhcHBzXHJcbiAgICAgICAgICAgIGdldEFwcHMoKS5mb3JFYWNoKGZ1bmN0aW9uIChhcHApIHtcclxuICAgICAgICAgICAgICAgIGFwcEhvb2soJ2NyZWF0ZScsIGFwcCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUaGUgU2VydmljZSBuYW1lc3BhY2UgaXMgYW4gYWNjZXNzb3IgZnVuY3Rpb24gLi4uXHJcbiAgICAgICAgdmFyIHNlcnZpY2VOYW1lc3BhY2UgPSBmdW5jdGlvbiAoYXBwQXJnKSB7XHJcbiAgICAgICAgICAgIGlmIChhcHBBcmcgPT09IHZvaWQgMCkgeyBhcHBBcmcgPSBhcHAoKTsgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFwcEFyZ1tuYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgLy8gSW52YWxpZCBhcmd1bWVudC5cclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaGFwcGVucyBpbiB0aGUgZm9sbG93aW5nIGNhc2U6IGZpcmViYXNlLnN0b3JhZ2UoJ2dzOi8nKVxyXG4gICAgICAgICAgICAgICAgZXJyb3IoJ2ludmFsaWQtYXBwLWFyZ3VtZW50JywgeyBuYW1lOiBuYW1lIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEZvcndhcmQgc2VydmljZSBpbnN0YW5jZSBsb29rdXAgdG8gdGhlIEZpcmViYXNlQXBwLlxyXG4gICAgICAgICAgICByZXR1cm4gYXBwQXJnW25hbWVdKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyAuLi4gYW5kIGEgY29udGFpbmVyIGZvciBzZXJ2aWNlLWxldmVsIHByb3BlcnRpZXMuXHJcbiAgICAgICAgaWYgKHNlcnZpY2VQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdXRpbC5kZWVwRXh0ZW5kKHNlcnZpY2VOYW1lc3BhY2UsIHNlcnZpY2VQcm9wZXJ0aWVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTW9ua2V5LXBhdGNoIHRoZSBzZXJ2aWNlTmFtZXNwYWNlIG9udG8gdGhlIGZpcmViYXNlIG5hbWVzcGFjZVxyXG4gICAgICAgIG5hbWVzcGFjZVtuYW1lXSA9IHNlcnZpY2VOYW1lc3BhY2U7XHJcbiAgICAgICAgLy8gUGF0Y2ggdGhlIEZpcmViYXNlQXBwSW1wbCBwcm90b3R5cGVcclxuICAgICAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBzZXJ2aWNlRnhuID0gdGhpcy5fZ2V0U2VydmljZS5iaW5kKHRoaXMsIG5hbWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZUZ4bi5hcHBseSh0aGlzLCBhbGxvd011bHRpcGxlSW5zdGFuY2VzID8gYXJncyA6IFtdKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlTmFtZXNwYWNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXRjaCB0aGUgdG9wLWxldmVsIGZpcmViYXNlIG5hbWVzcGFjZSB3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllcy5cclxuICAgICAqXHJcbiAgICAgKiBmaXJlYmFzZS5JTlRFUk5BTC5leHRlbmROYW1lc3BhY2UoKVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBleHRlbmROYW1lc3BhY2UocHJvcHMpIHtcclxuICAgICAgICB1dGlsLmRlZXBFeHRlbmQobmFtZXNwYWNlLCBwcm9wcyk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjYWxsQXBwSG9va3MoYXBwLCBldmVudE5hbWUpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhmYWN0b3JpZXMpLmZvckVhY2goZnVuY3Rpb24gKHNlcnZpY2VOYW1lKSB7XHJcbiAgICAgICAgICAgIC8vIElnbm9yZSB2aXJ0dWFsIHNlcnZpY2VzXHJcbiAgICAgICAgICAgIHZhciBmYWN0b3J5TmFtZSA9IHVzZUFzU2VydmljZShhcHAsIHNlcnZpY2VOYW1lKTtcclxuICAgICAgICAgICAgaWYgKGZhY3RvcnlOYW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFwcEhvb2tzW2ZhY3RvcnlOYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgYXBwSG9va3NbZmFjdG9yeU5hbWVdKGV2ZW50TmFtZSwgYXBwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gTWFwIHRoZSByZXF1ZXN0ZWQgc2VydmljZSB0byBhIHJlZ2lzdGVyZWQgc2VydmljZSBuYW1lXHJcbiAgICAvLyAodXNlZCB0byBtYXAgYXV0aCB0byBzZXJ2ZXJBdXRoIHNlcnZpY2Ugd2hlbiBuZWVkZWQpLlxyXG4gICAgZnVuY3Rpb24gdXNlQXNTZXJ2aWNlKGFwcCwgbmFtZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSAnc2VydmVyQXV0aCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB1c2VTZXJ2aWNlID0gbmFtZTtcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IGFwcC5vcHRpb25zO1xyXG4gICAgICAgIHJldHVybiB1c2VTZXJ2aWNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVzcGFjZTtcclxufVxyXG5mdW5jdGlvbiBlcnJvcihjb2RlLCBhcmdzKSB7XHJcbiAgICB0aHJvdyBhcHBFcnJvcnMuY3JlYXRlKGNvZGUsIGFyZ3MpO1xyXG59XHJcbi8vIFR5cGVTY3JpcHQgZG9lcyBub3Qgc3VwcG9ydCBub24tc3RyaW5nIGluZGV4ZXMhXHJcbi8vIGxldCBlcnJvcnM6IHtbY29kZTogQXBwRXJyb3I6IHN0cmluZ30gPSB7XHJcbnZhciBlcnJvcnMgPSB7XHJcbiAgICAnbm8tYXBwJzogXCJObyBGaXJlYmFzZSBBcHAgJ3skbmFtZX0nIGhhcyBiZWVuIGNyZWF0ZWQgLSBcIiArXHJcbiAgICAgICAgJ2NhbGwgRmlyZWJhc2UgQXBwLmluaXRpYWxpemVBcHAoKScsXHJcbiAgICAnYmFkLWFwcC1uYW1lJzogXCJJbGxlZ2FsIEFwcCBuYW1lOiAneyRuYW1lfVwiLFxyXG4gICAgJ2R1cGxpY2F0ZS1hcHAnOiBcIkZpcmViYXNlIEFwcCBuYW1lZCAneyRuYW1lfScgYWxyZWFkeSBleGlzdHNcIixcclxuICAgICdhcHAtZGVsZXRlZCc6IFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JG5hbWV9JyBhbHJlYWR5IGRlbGV0ZWRcIixcclxuICAgICdkdXBsaWNhdGUtc2VydmljZSc6IFwiRmlyZWJhc2Ugc2VydmljZSBuYW1lZCAneyRuYW1lfScgYWxyZWFkeSByZWdpc3RlcmVkXCIsXHJcbiAgICAnc2Etbm90LXN1cHBvcnRlZCc6ICdJbml0aWFsaXppbmcgdGhlIEZpcmViYXNlIFNESyB3aXRoIGEgc2VydmljZSAnICtcclxuICAgICAgICAnYWNjb3VudCBpcyBvbmx5IGFsbG93ZWQgaW4gYSBOb2RlLmpzIGVudmlyb25tZW50LiBPbiBjbGllbnQgJyArXHJcbiAgICAgICAgJ2RldmljZXMsIHlvdSBzaG91bGQgaW5zdGVhZCBpbml0aWFsaXplIHRoZSBTREsgd2l0aCBhbiBhcGkga2V5IGFuZCAnICtcclxuICAgICAgICAnYXV0aCBkb21haW4nLFxyXG4gICAgJ2ludmFsaWQtYXBwLWFyZ3VtZW50JzogJ2ZpcmViYXNlLnskbmFtZX0oKSB0YWtlcyBlaXRoZXIgbm8gYXJndW1lbnQgb3IgYSAnICtcclxuICAgICAgICAnRmlyZWJhc2UgQXBwIGluc3RhbmNlLidcclxufTtcclxudmFyIGFwcEVycm9ycyA9IG5ldyB1dGlsLkVycm9yRmFjdG9yeSgnYXBwJywgJ0ZpcmViYXNlJywgZXJyb3JzKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIE5vZGUgZGV0ZWN0aW9uIGxvZ2ljIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9pbGlha2FuL2RldGVjdC1ub2RlL1xyXG52YXIgaXNOb2RlID0gZmFsc2U7XHJcbnRyeSB7XHJcbiAgICBpc05vZGUgPVxyXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcclxufVxyXG5jYXRjaCAoZSkgeyB9XHJcbmlzTm9kZSAmJlxyXG4gICAgY29uc29sZS53YXJuKFwiXFxuV2FybmluZzogVGhpcyBpcyBhIGJyb3dzZXItdGFyZ2V0ZWQgRmlyZWJhc2UgYnVuZGxlIGJ1dCBpdCBhcHBlYXJzIGl0IGlzIGJlaW5nXFxucnVuIGluIGEgTm9kZSBlbnZpcm9ubWVudC4gIElmIHJ1bm5pbmcgaW4gYSBOb2RlIGVudmlyb25tZW50LCBtYWtlIHN1cmUgeW91XFxuYXJlIHVzaW5nIHRoZSBidW5kbGUgc3BlY2lmaWVkIGJ5IHRoZSBcXFwibWFpblxcXCIgZmllbGQgaW4gcGFja2FnZS5qc29uLlxcblxcbklmIHlvdSBhcmUgdXNpbmcgV2VicGFjaywgeW91IGNhbiBzcGVjaWZ5IFxcXCJtYWluXFxcIiBhcyB0aGUgZmlyc3QgaXRlbSBpblxcblxcXCJyZXNvbHZlLm1haW5GaWVsZHNcXFwiOlxcbmh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9yZXNvbHZlLyNyZXNvbHZlbWFpbmZpZWxkc1xcblxcbklmIHVzaW5nIFJvbGx1cCwgdXNlIHRoZSByb2xsdXAtcGx1Z2luLW5vZGUtcmVzb2x2ZSBwbHVnaW4gYW5kIHNldCBcXFwibW9kdWxlXFxcIlxcbnRvIGZhbHNlIGFuZCBcXFwibWFpblxcXCIgdG8gdHJ1ZTpcXG5odHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC1wbHVnaW4tbm9kZS1yZXNvbHZlXFxuXCIpO1xyXG52YXIgZmlyZWJhc2UgPSBjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZSgpO1xuXG5leHBvcnRzLmZpcmViYXNlID0gZmlyZWJhc2U7XG5leHBvcnRzLmRlZmF1bHQgPSBmaXJlYmFzZTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQNVdyYXBwZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IHNrZXRjaCwgcDVQcm9wcywgb25TZXRBcHBTdGF0ZSB9ID0gdGhpcy5wcm9wcztcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgICB0aGlzLmNhbnZhcyA9IG5ldyB3aW5kb3cucDUoc2tldGNoLCB0aGlzLndyYXBwZXIpO1xuICAgIHRoaXMuY2FudmFzLndyYXBwZXIgPSB0aGlzLndyYXBwZXI7XG4gICAgdGhpcy5jYW52YXMucHJvcHMgPSBwNVByb3BzO1xuICAgIHRoaXMuY2FudmFzLm9uU2V0QXBwU3RhdGUgPSBvblNldEFwcFN0YXRlO1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIHRoaXMuY2FudmFzLnByb3BzID0gbmV4dFByb3BzLnA1UHJvcHM7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW52YXMucmVtb3ZlKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9XCJjYW52YXMtY29udGFpbmVyXCJcbiAgICAgICAgY2xhc3NOYW1lPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1zdGFydCBhbGlnbi1pdGVtcy1zdGFydCB3LTEwMCBoLTEwMCBiZy1kYXJrIHBvc2l0aW9uLXJlbGF0aXZlXCJcbiAgICAgICAgcmVmPXsod3JhcHBlcikgPT4geyB0aGlzLndyYXBwZXIgPSB3cmFwcGVyOyB9fVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cblA1V3JhcHBlci5wcm9wVHlwZXMgPSB7XG4gIHNrZXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgcDVQcm9wczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBvblNldEFwcFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgbWFwVG9Dc3NNb2R1bGVzLCB0YWdQcm9wVHlwZSB9IGZyb20gJy4vdXRpbHMnO1xudmFyIHByb3BUeXBlcyA9IHtcbiAgdGFnOiB0YWdQcm9wVHlwZSxcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc2l6ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY3NzTW9kdWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLnN0cmluZ1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ2RpdicsXG4gIHR5cGU6ICdib3JkZXInLFxuICBjaGlsZHJlbjogJ0xvYWRpbmcuLi4nXG59O1xuXG52YXIgU3Bpbm5lciA9IGZ1bmN0aW9uIFNwaW5uZXIocHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNzc01vZHVsZSA9IHByb3BzLmNzc01vZHVsZSxcbiAgICAgIHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIFRhZyA9IHByb3BzLnRhZyxcbiAgICAgIGF0dHJpYnV0ZXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wiY2xhc3NOYW1lXCIsIFwiY3NzTW9kdWxlXCIsIFwidHlwZVwiLCBcInNpemVcIiwgXCJjb2xvclwiLCBcImNoaWxkcmVuXCIsIFwidGFnXCJdKTtcblxuICB2YXIgY2xhc3NlcyA9IG1hcFRvQ3NzTW9kdWxlcyhjbGFzc05hbWVzKGNsYXNzTmFtZSwgc2l6ZSA/IFwic3Bpbm5lci1cIiArIHR5cGUgKyBcIi1cIiArIHNpemUgOiBmYWxzZSwgXCJzcGlubmVyLVwiICsgdHlwZSwgY29sb3IgPyBcInRleHQtXCIgKyBjb2xvciA6IGZhbHNlKSwgY3NzTW9kdWxlKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7XG4gICAgcm9sZTogXCJzdGF0dXNcIlxuICB9LCBhdHRyaWJ1dGVzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pLCBjaGlsZHJlbiAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBtYXBUb0Nzc01vZHVsZXMoJ3NyLW9ubHknLCBjc3NNb2R1bGUpXG4gIH0sIGNoaWxkcmVuKSk7XG59O1xuXG5TcGlubmVyLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblNwaW5uZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgU3Bpbm5lcjsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA1cHggMTBweDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICAkeycnIC8qIGZvbnQtd2VpZ2h0OiBib2xkOyAqL31cbiAgY3Vyc29yOiBwb2ludGVyO1xuICB0b3A6IDIwcHg7XG4gIHJpZ2h0OiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiA1cHggLTVweCAwcHggMHB4IHJnYmEoMCwwLDAsMC43KTtcbiAgLW1vei1ib3gtc2hhZG93OiA1cHggLTVweCAwcHggMHB4IHJnYmEoMCwwLDAsMC43KTtcbiAgYm94LXNoYWRvdzogNXB4IC01cHggMHB4IDBweCByZ2JhKDAsMCwwLDAuNyk7XG4gIHRyYW5zaXRpb246IDAuMnM7XG4gIDpob3ZlciB7XG4gICAgb3BhY2l0eTogMC45O1xuICB9XG4gIDphY3RpdmUge1xuICAgIG9wYWNpdHk6IDAuODtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOSk7XG4gIH1cbmBcblxuY2xhc3MgTGFuZ3VhZ2UgZXh0ZW5kcyBDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGFuZ2VMYW5ndWFnZSwgY3VycmVudF9sYW5nIH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxCdXR0b24gaWQ9XCJsYW5ndWFnZVwiIGNsYXNzTmFtZT1cImJnLXdhcm5pbmdcIiBvbkNsaWNrPXtjaGFuZ2VMYW5ndWFnZX0+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17Y3VycmVudF9sYW5nID09PSAncnUnID8gJ2ZvbnQtd2VpZ2h0LWJvbGQnIDogJyd9PlJVPC9zcGFuPi9cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjdXJyZW50X2xhbmcgPT09ICdlbicgPyAnZm9udC13ZWlnaHQtYm9sZCcgOiAnJ30+RU48L3NwYW4+XG4gICAgICA8L0J1dHRvbj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGFuZ3VhZ2U7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJ3JlYWN0c3RyYXAnO1xuaW1wb3J0IExhbmd1YWdlIGZyb20gJy4vTGFuZ3VhZ2UnO1xuXG5jb25zdCBCYWNrZ3JvdW5kID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwwLjcpO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDIwJTtcbiAgd2lkdGg6IDgwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoJHtwcm9wcyA9PiAocHJvcHMudmlzaWJsZSA/ICcwJyA6ICctMTAwJScpfSk7XG4gIG9wYWNpdHk6ICR7cHJvcHMgPT4gKHByb3BzLnZpc2libGUgPyAnMScgOiAnMCcpfTtcbiAgJHsnJy8qIHRyYW5zaXRpb246ICR7cHJvcHMgPT4gKHByb3BzLnZpc2libGUgPyAnMC40cycgOiAnMCcpfTsgKi99XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB6LWluZGV4OiAyO1xuYDtcblxuY29uc3QgUmVzdWx0c0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1pbi13aWR0aDogNTAwcHg7XG4gIGhlaWdodDogNTAwcHg7XG4gIC13ZWJraXQtYm94LXNoYWRvdzogMTBweCAtMTBweCAwcHggMHB4IHJnYmEoMCwwLDAsMC43KTtcbiAgLW1vei1ib3gtc2hhZG93OiAxMHB4IC0xMHB4IDBweCAwcHggcmdiYSgwLDAsMCwwLjcpO1xuICBib3gtc2hhZG93OiAxMHB4IC0xMHB4IDBweCAwcHggcmdiYSgwLDAsMCwwLjcpO1xuYDtcblxuY29uc3QgUmVzdWx0cyA9IHN0eWxlZC5kaXZgXG4gIG92ZXJmbG93OiBhdXRvO1xuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiAtbW96LXNjcm9sbGJhcnMtbm9uZTtcbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IEZpbHRlciA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgbGFuZywgY2hhbmdlTGFuZ3VhZ2UsIGN1cnJlbnRfbGFuZywgdXNlciwgcmVzdWx0cywgUmVzdWx0LCBuZXdHYW1lLCBpc0xvYWRpbmcsXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIChcbiAgICA8QmFja2dyb3VuZCBpZD1cImZpbHRlclwiIHZpc2libGU9eyFuZXdHYW1lfT5cbiAgICAgIDxSZXN1bHRzQ29udGFpbmVyIGlkPVwicmVzdWx0c19jb250YWluZXJcIiBjbGFzc05hbWU9XCJiZy13YXJuaW5nIHB0LTQgcGItMyBweC0zIGQtZmxleCBmbGV4LWNvbHVtblwiPlxuICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgdGV4dC11cHBlcmNhc2UgbWItMyBmb250LXdlaWdodC1ib2xkXCI+XG4gICAgICAgICAge2Ake2xhbmcubGFzdF9yZXN1bHRzfTpgfVxuICAgICAgICA8L2gzPlxuICAgICAgICA8UmVzdWx0cyBpZD1cInJlc3VsdHNcIiBjbGFzc05hbWU9XCJmbGV4LWZpbGwgYmctZGFyayB0ZXh0LWxpZ2h0IHB5LTMgdGV4dC1jZW50ZXIgcHgtNFwiPlxuICAgICAgICAgIHtcbiAgICAgICAgICAgICFpc0xvYWRpbmdcbiAgICAgICAgICAgICAgPyAoXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm10LTIgbWItM1wiPntgJHt1c2VyLmVtYWlsfWB9PC9wPlxuICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm0tMCBwLTBcIiBzdHlsZT17eyBsaXN0U3R5bGVQb3NpdGlvbjogJ2luc2lkZScgfX0+XG4gICAgICAgICAgICAgICAgICAgIHtyZXN1bHRzLm1hcChyZXN1bHQgPT4gPFJlc3VsdCBrZXk9e3Jlc3VsdC5pZH0gcmVzdWx0PXtyZXN1bHR9IC8+KX1cbiAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICA8ZGl2Pi4uLjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIDogKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIGgtNzVcIj5cbiAgICAgICAgICAgICAgICAgIDxTcGlubmVyIHN0eWxlPXt7IHdpZHRoOiAnM3JlbScsIGhlaWdodDogJzNyZW0nIH19IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIDwvUmVzdWx0cz5cbiAgICAgIDwvUmVzdWx0c0NvbnRhaW5lcj5cbiAgICAgIDxMYW5ndWFnZSBjdXJyZW50X2xhbmc9e2N1cnJlbnRfbGFuZ30gY2hhbmdlTGFuZ3VhZ2U9e2NoYW5nZUxhbmd1YWdlfSAvPlxuICAgIDwvQmFja2dyb3VuZD5cbiAgKTtcbn07XG5cbkZpbHRlci5wcm9wVHlwZXMgPSB7XG4gIG5ld0dhbWU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIGlzTG9hZGluZzogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgdXNlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbWFpbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB9KSxcbiAgcmVzdWx0czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9iamVjdCksXG4gIGN1cnJlbnRfbGFuZzogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsYW5nOiBQcm9wVHlwZXMub2JqZWN0T2YoUHJvcFR5cGVzLnN0cmluZykuaXNSZXF1aXJlZCxcbiAgY2hhbmdlTGFuZ3VhZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIFJlc3VsdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZpbHRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiAnQG1lZGlhICcgKyBpdGVtWzJdICsgJ3snICsgY29udGVudCArICd9JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBtb2R1bGVzW2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSAnKCcgKyBpdGVtWzJdICsgJykgYW5kICgnICsgbWVkaWFRdWVyeSArICcpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJztcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcbiAgcmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgcGFyZW50KSB7XG4gIGlmIChwYXJlbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCwgcGFyZW50KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUsIHRhcmdldCk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0aWYob3B0aW9ucy5hdHRycy5ub25jZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcblx0XHRpZiAobm9uY2UpIHtcblx0XHRcdG9wdGlvbnMuYXR0cnMubm9uY2UgPSBub25jZTtcblx0XHR9XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXROb25jZSgpIHtcblx0aWYgKHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiBfX3dlYnBhY2tfbm9uY2VfXztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSB0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbidcblx0XHQgPyBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSBcblx0XHQgOiBvcHRpb25zLnRyYW5zZm9ybS5kZWZhdWx0KG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IChtb2R1bGVbJ2V4cG9ydHMnXSA9IGZhY3RvcnkoKSkgOlxuXHRcdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSA/IGRlZmluZShmYWN0b3J5KCkpIDpcblx0XHRcdCh3aW5kb3dbJ3N0eWxpc1J1bGVTaGVldCddID0gZmFjdG9yeSgpKVxufShmdW5jdGlvbiAoKSB7XG5cblx0J3VzZSBzdHJpY3QnXG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbnNlcnRSdWxlKSB7XG5cdFx0dmFyIGRlbGltaXRlciA9ICcvKnwqLydcblx0XHR2YXIgbmVlZGxlID0gZGVsaW1pdGVyKyd9J1xuXG5cdFx0ZnVuY3Rpb24gdG9TaGVldCAoYmxvY2spIHtcblx0XHRcdGlmIChibG9jaylcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpbnNlcnRSdWxlKGJsb2NrICsgJ30nKVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBydWxlU2hlZXQgKGNvbnRleHQsIGNvbnRlbnQsIHNlbGVjdG9ycywgcGFyZW50cywgbGluZSwgY29sdW1uLCBsZW5ndGgsIG5zLCBkZXB0aCwgYXQpIHtcblx0XHRcdHN3aXRjaCAoY29udGV4dCkge1xuXHRcdFx0XHQvLyBwcm9wZXJ0eVxuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0Ly8gQGltcG9ydFxuXHRcdFx0XHRcdGlmIChkZXB0aCA9PT0gMCAmJiBjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDY0KVxuXHRcdFx0XHRcdFx0cmV0dXJuIGluc2VydFJ1bGUoY29udGVudCsnOycpLCAnJ1xuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIHNlbGVjdG9yXG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRpZiAobnMgPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIGRlbGltaXRlclxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIGF0LXJ1bGVcblx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdHN3aXRjaCAobnMpIHtcblx0XHRcdFx0XHRcdC8vIEBmb250LWZhY2UsIEBwYWdlXG5cdFx0XHRcdFx0XHRjYXNlIDEwMjpcblx0XHRcdFx0XHRcdGNhc2UgMTEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShzZWxlY3RvcnNbMF0rY29udGVudCksICcnXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIChhdCA9PT0gMCA/IGRlbGltaXRlciA6ICcnKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSAtMjpcblx0XHRcdFx0XHRjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSkpXG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiLyoqXG4gKiBMb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanMuZm91bmRhdGlvbi8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY2xhc3MgQmFzZUFwcCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgZmlyZWJhc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1zdGF0ZVxuICAgIHRoaXMuZmlyZWJhc2VMaXN0ZW5lciA9IGZpcmViYXNlLmF1dGgub25BdXRoU3RhdGVDaGFuZ2VkKHVzZXIgPT4gdGhpcy5zZXRTdGF0ZSh7IHVzZXIsIGlzTG9hZGluZzogZmFsc2UgfSkpO1xuICB9XG5cbiAgY2hhbmdlTGFuZ3VhZ2UgPSAoKSA9PiB7XG4gICAgbGV0IHsgY3VycmVudF9sYW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgY29va2llcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjdXJyZW50X2xhbmcgPSAoY3VycmVudF9sYW5nID09PSAncnUnKSA/ICdlbicgOiAncnUnO1xuICAgIGNvb2tpZXMuc2V0KCdsYW5ndWFnZScsIGN1cnJlbnRfbGFuZywgeyBwYXRoOiAnLycgfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnRfbGFuZyB9KTtcbiAgfVxuXG4gIGdvSG9tZSA9ICgpID0+IHtcbiAgICBjb25zdCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybC5zcGxpdCgnZ2FtZXMnKVswXTtcbiAgfTtcblxuICBuZXdHYW1lQnV0dG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBzdGFydE5ld0dhbWUgfSA9IHRoaXMuc3RhdGU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1zdGF0ZVxuICAgIHRoaXMuc2V0U3RhdGUoeyBuZXdHYW1lOiB0cnVlIH0sIHN0YXJ0TmV3R2FtZSk7XG4gIH07XG5cbiAgb25TZXRBcHBTdGF0ZSA9IChuZXdTdGF0ZSwgY2FsbGJhY2spID0+IHRoaXMuc2V0U3RhdGUobmV3U3RhdGUsIGNhbGxiYWNrKVxufVxuXG5CYXNlQXBwLnByb3BUeXBlcyA9IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2ZvcmJpZC1wcm9wLXR5cGVzXG4gIGZpcmViYXNlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYXNlQXBwO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8cmVzdWx0c3xzZWN1cml0eXx1bnNlbGVjdGFibGV8YWNjZW50SGVpZ2h0fGFjY3VtdWxhdGV8YWRkaXRpdmV8YWxpZ25tZW50QmFzZWxpbmV8YWxsb3dSZW9yZGVyfGFscGhhYmV0aWN8YW1wbGl0dWRlfGFyYWJpY0Zvcm18YXNjZW50fGF0dHJpYnV0ZU5hbWV8YXR0cmlidXRlVHlwZXxhdXRvUmV2ZXJzZXxhemltdXRofGJhc2VGcmVxdWVuY3l8YmFzZWxpbmVTaGlmdHxiYXNlUHJvZmlsZXxiYm94fGJlZ2lufGJpYXN8Ynl8Y2FsY01vZGV8Y2FwSGVpZ2h0fGNsaXB8Y2xpcFBhdGhVbml0c3xjbGlwUGF0aHxjbGlwUnVsZXxjb2xvckludGVycG9sYXRpb258Y29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc3xjb2xvclByb2ZpbGV8Y29sb3JSZW5kZXJpbmd8Y29udGVudFNjcmlwdFR5cGV8Y29udGVudFN0eWxlVHlwZXxjdXJzb3J8Y3h8Y3l8ZHxkZWNlbGVyYXRlfGRlc2NlbnR8ZGlmZnVzZUNvbnN0YW50fGRpcmVjdGlvbnxkaXNwbGF5fGRpdmlzb3J8ZG9taW5hbnRCYXNlbGluZXxkdXJ8ZHh8ZHl8ZWRnZU1vZGV8ZWxldmF0aW9ufGVuYWJsZUJhY2tncm91bmR8ZW5kfGV4cG9uZW50fGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWR8ZmlsbHxmaWxsT3BhY2l0eXxmaWxsUnVsZXxmaWx0ZXJ8ZmlsdGVyUmVzfGZpbHRlclVuaXRzfGZsb29kQ29sb3J8Zmxvb2RPcGFjaXR5fGZvY3VzYWJsZXxmb250RmFtaWx5fGZvbnRTaXplfGZvbnRTaXplQWRqdXN0fGZvbnRTdHJldGNofGZvbnRTdHlsZXxmb250VmFyaWFudHxmb250V2VpZ2h0fGZvcm1hdHxmcm9tfGZyfGZ4fGZ5fGcxfGcyfGdseXBoTmFtZXxnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbHxnbHlwaE9yaWVudGF0aW9uVmVydGljYWx8Z2x5cGhSZWZ8Z3JhZGllbnRUcmFuc2Zvcm18Z3JhZGllbnRVbml0c3xoYW5naW5nfGhvcml6QWR2WHxob3Jpek9yaWdpblh8aWRlb2dyYXBoaWN8aW1hZ2VSZW5kZXJpbmd8aW58aW4yfGludGVyY2VwdHxrfGsxfGsyfGszfGs0fGtlcm5lbE1hdHJpeHxrZXJuZWxVbml0TGVuZ3RofGtlcm5pbmd8a2V5UG9pbnRzfGtleVNwbGluZXN8a2V5VGltZXN8bGVuZ3RoQWRqdXN0fGxldHRlclNwYWNpbmd8bGlnaHRpbmdDb2xvcnxsaW1pdGluZ0NvbmVBbmdsZXxsb2NhbHxtYXJrZXJFbmR8bWFya2VyTWlkfG1hcmtlclN0YXJ0fG1hcmtlckhlaWdodHxtYXJrZXJVbml0c3xtYXJrZXJXaWR0aHxtYXNrfG1hc2tDb250ZW50VW5pdHN8bWFza1VuaXRzfG1hdGhlbWF0aWNhbHxtb2RlfG51bU9jdGF2ZXN8b2Zmc2V0fG9wYWNpdHl8b3BlcmF0b3J8b3JkZXJ8b3JpZW50fG9yaWVudGF0aW9ufG9yaWdpbnxvdmVyZmxvd3xvdmVybGluZVBvc2l0aW9ufG92ZXJsaW5lVGhpY2tuZXNzfHBhbm9zZTF8cGFpbnRPcmRlcnxwYXRoTGVuZ3RofHBhdHRlcm5Db250ZW50VW5pdHN8cGF0dGVyblRyYW5zZm9ybXxwYXR0ZXJuVW5pdHN8cG9pbnRlckV2ZW50c3xwb2ludHN8cG9pbnRzQXRYfHBvaW50c0F0WXxwb2ludHNBdFp8cHJlc2VydmVBbHBoYXxwcmVzZXJ2ZUFzcGVjdFJhdGlvfHByaW1pdGl2ZVVuaXRzfHJ8cmFkaXVzfHJlZlh8cmVmWXxyZW5kZXJpbmdJbnRlbnR8cmVwZWF0Q291bnR8cmVwZWF0RHVyfHJlcXVpcmVkRXh0ZW5zaW9uc3xyZXF1aXJlZEZlYXR1cmVzfHJlc3RhcnR8cmVzdWx0fHJvdGF0ZXxyeHxyeXxzY2FsZXxzZWVkfHNoYXBlUmVuZGVyaW5nfHNsb3BlfHNwYWNpbmd8c3BlY3VsYXJDb25zdGFudHxzcGVjdWxhckV4cG9uZW50fHNwZWVkfHNwcmVhZE1ldGhvZHxzdGFydE9mZnNldHxzdGREZXZpYXRpb258c3RlbWh8c3RlbXZ8c3RpdGNoVGlsZXN8c3RvcENvbG9yfHN0b3BPcGFjaXR5fHN0cmlrZXRocm91Z2hQb3NpdGlvbnxzdHJpa2V0aHJvdWdoVGhpY2tuZXNzfHN0cmluZ3xzdHJva2V8c3Ryb2tlRGFzaGFycmF5fHN0cm9rZURhc2hvZmZzZXR8c3Ryb2tlTGluZWNhcHxzdHJva2VMaW5lam9pbnxzdHJva2VNaXRlcmxpbWl0fHN0cm9rZU9wYWNpdHl8c3Ryb2tlV2lkdGh8c3VyZmFjZVNjYWxlfHN5c3RlbUxhbmd1YWdlfHRhYmxlVmFsdWVzfHRhcmdldFh8dGFyZ2V0WXx0ZXh0QW5jaG9yfHRleHREZWNvcmF0aW9ufHRleHRSZW5kZXJpbmd8dGV4dExlbmd0aHx0b3x0cmFuc2Zvcm18dTF8dTJ8dW5kZXJsaW5lUG9zaXRpb258dW5kZXJsaW5lVGhpY2tuZXNzfHVuaWNvZGV8dW5pY29kZUJpZGl8dW5pY29kZVJhbmdlfHVuaXRzUGVyRW18dkFscGhhYmV0aWN8dkhhbmdpbmd8dklkZW9ncmFwaGljfHZNYXRoZW1hdGljYWx8dmFsdWVzfHZlY3RvckVmZmVjdHx2ZXJzaW9ufHZlcnRBZHZZfHZlcnRPcmlnaW5YfHZlcnRPcmlnaW5ZfHZpZXdCb3h8dmlld1RhcmdldHx2aXNpYmlsaXR5fHdpZHRoc3x3b3JkU3BhY2luZ3x3cml0aW5nTW9kZXx4fHhIZWlnaHR8eDF8eDJ8eENoYW5uZWxTZWxlY3Rvcnx4bGlua0FjdHVhdGV8eGxpbmtBcmNyb2xlfHhsaW5rSHJlZnx4bGlua1JvbGV8eGxpbmtTaG93fHhsaW5rVGl0bGV8eGxpbmtUeXBlfHhtbEJhc2V8eG1sbnN8eG1sbnNYbGlua3x4bWxMYW5nfHhtbFNwYWNlfHl8eTF8eTJ8eUNoYW5uZWxTZWxlY3Rvcnx6fHpvb21BbmRQYW58Zm9yfGNsYXNzfGF1dG9mb2N1cyl8KChbRGRdW0FhXVtUdF1bQWFdfFtBYV1bUnJdW0lpXVtBYV18eCktLiopKSQvOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViZmVlNjhhNGNkN2U2MDA5ZWY2MWQyM1xuXG52YXIgaW5kZXggPSBtZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHJldHVybiByZWFjdFByb3BzUmVnZXgudGVzdChwcm9wKSB8fCBwcm9wLmNoYXJDb2RlQXQoMCkgPT09IDExMVxuICAvKiBvICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgxKSA9PT0gMTEwXG4gIC8qIG4gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDIpIDwgOTE7XG59XG4vKiBaKzEgKi9cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgY29uc3QgQmFja2dyb3VuZCA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6IHJnYig4LCAwLCA0Nyk7XG4gIGhlaWdodDogMTAwJTtcbiAgZmxleDogMCAwIDIwJTtcbiAgbWF4LXdpZHRoOiAyMCU7XG4gIG92ZXJmbG93OiBhdXRvO1xuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiAtbW96LXNjcm9sbGJhcnMtbm9uZTtcbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IE1lbnUgPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGxhbmcsXG4gICAgY3VycmVudF9sZXZlbCxcbiAgICByYWRpdXMsXG4gICAgbmV3R2FtZUJ1dHRvbkNsaWNrLFxuICAgIGdvSG9tZSxcbiAgfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPEJhY2tncm91bmQgaWQ9XCJtZW51XCIgY2xhc3NOYW1lPVwicHgtMyBweS01XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtbGlnaHQgbWItNVwiPlxuICAgICAgICA8aDUgY2xhc3NOYW1lPVwiZm9udC13ZWlnaHQtYm9sZCB0ZXh0LWNlbnRlclwiPntsYW5nLmhlYWRlcn08L2g1PlxuICAgICAgICA8cCBjbGFzc05hbWU9XCJzbWFsbFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogbGFuZy5kZXNjcmlwdGlvbiB9fSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtbGlnaHQgbWItNVwiPlxuICAgICAgICA8aDUgY2xhc3NOYW1lPVwiZm9udC13ZWlnaHQtYm9sZCB0ZXh0LWNlbnRlclwiPntgJHtsYW5nLmN1cnJlbnRfbGV2ZWx9IOKAkyAke2N1cnJlbnRfbGV2ZWwubGV2ZWx9OmB9PC9oNT5cbiAgICAgICAgPGRpdj57YCR7bGFuZy5iYWxsc306ICR7Y3VycmVudF9sZXZlbC5iYWxsc31gfTwvZGl2PlxuICAgICAgICA8ZGl2PntgJHtsYW5nLnNwZWVkfTogJHtjdXJyZW50X2xldmVsLnNwZWVkfWB9PC9kaXY+XG4gICAgICAgIDxkaXY+e2Ake2xhbmcucmVkX2JhbGxzfTogJHtjdXJyZW50X2xldmVsLnJlZF9iYWxsc31gfTwvZGl2PlxuICAgICAgICA8ZGl2PntgJHtsYW5nLmJhbGxzX3JhZGl1c306ICR7cmFkaXVzfWB9PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIHctMTAwIG1iLTEgdGV4dC11cHBlcmNhc2VcIiBpZD1cIm5ld0dhbWVCdXR0b25cIiBvbkNsaWNrPXtuZXdHYW1lQnV0dG9uQ2xpY2t9PntsYW5nLm5ld19nYW1lfTwvQnV0dG9uPlxuICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtnb0hvbWV9IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyB3LTEwMCB0ZXh0LXVwcGVyY2FzZVwiPntsYW5nLmhvbWV9PC9CdXR0b24+XG4gICAgPC9CYWNrZ3JvdW5kPlxuICApO1xufTtcblxuTWVudS5wcm9wVHlwZXMgPSB7XG4gIGN1cnJlbnRfbGV2ZWw6IFByb3BUeXBlcy5vYmplY3RPZihQcm9wVHlwZXMubnVtYmVyKS5pc1JlcXVpcmVkLFxuICByYWRpdXM6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2ZvcmJpZC1wcm9wLXR5cGVzXG4gIGxhbmc6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgbmV3R2FtZUJ1dHRvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnb0hvbWU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBNZW51O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IG1hcFRvQ3NzTW9kdWxlcywgdGFnUHJvcFR5cGUgfSBmcm9tICcuL3V0aWxzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICdhcmlhLWxhYmVsJzogUHJvcFR5cGVzLnN0cmluZyxcbiAgYmxvY2s6IFByb3BUeXBlcy5ib29sLFxuICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBvdXRsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgdGFnOiB0YWdQcm9wVHlwZSxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBzaXplOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY3NzTW9kdWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBjbG9zZTogUHJvcFR5cGVzLmJvb2xcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ3NlY29uZGFyeScsXG4gIHRhZzogJ2J1dHRvbidcbn07XG5cbnZhciBCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCdXR0b24ocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5vbkNsaWNrID0gX3RoaXMub25DbGljay5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ub25DbGljayA9IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMub25DbGljaykge1xuICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrKGUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgYXJpYUxhYmVsID0gX3RoaXMkcHJvcHNbJ2FyaWEtbGFiZWwnXSxcbiAgICAgICAgYmxvY2sgPSBfdGhpcyRwcm9wcy5ibG9jayxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjbG9zZSA9IF90aGlzJHByb3BzLmNsb3NlLFxuICAgICAgICBjc3NNb2R1bGUgPSBfdGhpcyRwcm9wcy5jc3NNb2R1bGUsXG4gICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMuY29sb3IsXG4gICAgICAgIG91dGxpbmUgPSBfdGhpcyRwcm9wcy5vdXRsaW5lLFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgVGFnID0gX3RoaXMkcHJvcHMudGFnLFxuICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmLFxuICAgICAgICBhdHRyaWJ1dGVzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImFjdGl2ZVwiLCBcImFyaWEtbGFiZWxcIiwgXCJibG9ja1wiLCBcImNsYXNzTmFtZVwiLCBcImNsb3NlXCIsIFwiY3NzTW9kdWxlXCIsIFwiY29sb3JcIiwgXCJvdXRsaW5lXCIsIFwic2l6ZVwiLCBcInRhZ1wiLCBcImlubmVyUmVmXCJdKTtcblxuICAgIGlmIChjbG9zZSAmJiB0eXBlb2YgYXR0cmlidXRlcy5jaGlsZHJlbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGF0dHJpYnV0ZXMuY2hpbGRyZW4gPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZVxuICAgICAgfSwgXCJcXHhEN1wiKTtcbiAgICB9XG5cbiAgICB2YXIgYnRuT3V0bGluZUNvbG9yID0gXCJidG5cIiArIChvdXRsaW5lID8gJy1vdXRsaW5lJyA6ICcnKSArIFwiLVwiICsgY29sb3I7XG4gICAgdmFyIGNsYXNzZXMgPSBtYXBUb0Nzc01vZHVsZXMoY2xhc3NOYW1lcyhjbGFzc05hbWUsIHtcbiAgICAgIGNsb3NlOiBjbG9zZVxuICAgIH0sIGNsb3NlIHx8ICdidG4nLCBjbG9zZSB8fCBidG5PdXRsaW5lQ29sb3IsIHNpemUgPyBcImJ0bi1cIiArIHNpemUgOiBmYWxzZSwgYmxvY2sgPyAnYnRuLWJsb2NrJyA6IGZhbHNlLCB7XG4gICAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkXG4gICAgfSksIGNzc01vZHVsZSk7XG5cbiAgICBpZiAoYXR0cmlidXRlcy5ocmVmICYmIFRhZyA9PT0gJ2J1dHRvbicpIHtcbiAgICAgIFRhZyA9ICdhJztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEFyaWFMYWJlbCA9IGNsb3NlID8gJ0Nsb3NlJyA6IG51bGw7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7XG4gICAgICB0eXBlOiBUYWcgPT09ICdidXR0b24nICYmIGF0dHJpYnV0ZXMub25DbGljayA/ICdidXR0b24nIDogdW5kZWZpbmVkXG4gICAgfSwgYXR0cmlidXRlcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgcmVmOiBpbm5lclJlZixcbiAgICAgIG9uQ2xpY2s6IHRoaXMub25DbGljayxcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWwgfHwgZGVmYXVsdEFyaWFMYWJlbFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQnV0dG9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CdXR0b24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjsiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix6PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGFhPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxiYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGNhKGEsYixkLGMsZSxnLGgsZil7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2QsYyxlLGcsaCxmXSxtPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFttKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGQ9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWQrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO2NhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZCl9dmFyIEM9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEQ9e307XG5mdW5jdGlvbiBFKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtFLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/QihcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO2soSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixkKXt2YXIgYz12b2lkIDAsZT17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZVtjXSYmKGVbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBkYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixkLGMpe2lmKFAubGVuZ3RoKXt2YXIgZT1QLnBvcCgpO2UucmVzdWx0PWE7ZS5rZXlQcmVmaXg9YjtlLmZ1bmM9ZDtlLmNvbnRleHQ9YztlLmNvdW50PTA7cmV0dXJuIGV9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZCxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGQsYyl7dmFyIGU9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWV8fFwiYm9vbGVhblwiPT09ZSlhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChlKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGQoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZT1hW2hdO3ZhciBmPWIrVChlLGgpO2crPVMoZSxmLGQsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGg9XG4wOyEoZT1hLm5leHQoKSkuZG9uZTspZT1lLnZhbHVlLGY9YitUKGUsaCsrKSxnKz1TKGUsZixkLGMpO2Vsc2VcIm9iamVjdFwiPT09ZSYmKGQ9XCJcIithLEIoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGQpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixkKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBlYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBmYShhLGIsZCl7dmFyIGM9YS5yZXN1bHQsZT1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsYyxkLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPWRhKGEsZSsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrZCkpLGMucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsZCxjLGUpe3ZhciBnPVwiXCI7bnVsbCE9ZCYmKGc9KFwiXCIrZCkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGMsZSk7VShhLGZhLGIpO1IoYil9ZnVuY3Rpb24gVygpe3ZhciBhPUkuY3VycmVudDtudWxsPT09YT9CKFwiMzA3XCIpOnZvaWQgMDtyZXR1cm4gYX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1YoYSxjLG51bGwsYixkKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZCk7VShhLGVhLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBVKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe04oYSk/dm9pZCAwOkIoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnkscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpiYSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjphYSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19LHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDYWxsYmFjayhhLGIpfSx1c2VDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDb250ZXh0KGEsYil9LHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlRWZmZWN0KGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxcbmIsZCl7cmV0dXJuIFcoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixkKX0sdXNlRGVidWdWYWx1ZTpmdW5jdGlvbigpe30sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTWVtbyhhLGIpfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gVygpLnVzZVJlZHVjZXIoYSxiLGQpfSx1c2VSZWY6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VSZWYoYSl9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlU3RhdGUoYSl9LEZyYWdtZW50OnIsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnosY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZCl7bnVsbD09PWF8fHZvaWQgMD09PWE/QihcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZT1rKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPVxuYil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YyllLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuOC4xXCIsXG51bnN0YWJsZV9Db25jdXJyZW50TW9kZTp4LHVuc3RhYmxlX1Byb2ZpbGVyOnUsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6SSxSZWFjdEN1cnJlbnRPd25lcjpKLGFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIikscD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxiYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIGNhKGEsYixjLGQsZSxmLGcsaCl7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2MsZCxlLGYsZyxoXSxrPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFtrKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gdChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGQ9MDtkPGI7ZCsrKWMrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2NhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9YWE/dm9pZCAwOnQoXCIyMjdcIik7ZnVuY3Rpb24gZGEoYSxiLGMsZCxlLGYsZyxoLGwpe3ZhciBrPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGspfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19XG52YXIgZWE9ITEsZmE9bnVsbCxoYT0hMSxpYT1udWxsLGphPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2VhPSEwO2ZhPWF9fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsbCl7ZWE9ITE7ZmE9bnVsbDtkYS5hcHBseShqYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGxhKGEsYixjLGQsZSxmLGcsaCxsKXtrYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZWEpe2lmKGVhKXt2YXIgaz1mYTtlYT0hMTtmYT1udWxsfWVsc2UgdChcIjE5OFwiKSxrPXZvaWQgMDtoYXx8KGhhPSEwLGlhPWspfX12YXIgbWE9bnVsbCxuYT17fTtcbmZ1bmN0aW9uIG9hKCl7aWYobWEpZm9yKHZhciBhIGluIG5hKXt2YXIgYj1uYVthXSxjPW1hLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6dChcIjk2XCIsYSk7aWYoIXBhW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOnQoXCI5N1wiLGEpO3BhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cmEuaGFzT3duUHJvcGVydHkoaCk/dChcIjk5XCIsaCk6dm9pZCAwO3JhW2hdPWY7dmFyIGw9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihsKXtmb3IoZSBpbiBsKWwuaGFzT3duUHJvcGVydHkoZSkmJnNhKGxbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhzYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOnQoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiBzYShhLGIsYyl7dGFbYV0/dChcIjEwMFwiLGEpOnZvaWQgMDt0YVthXT1iO3VhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHBhPVtdLHJhPXt9LHRhPXt9LHVhPXt9LHZhPW51bGwsd2E9bnVsbCx4YT1udWxsO2Z1bmN0aW9uIHlhKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD14YShjKTtsYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfWZ1bmN0aW9uIHphKGEsYil7bnVsbD09Yj90KFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIEFhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBCYT1udWxsO2Z1bmN0aW9uIENhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl5YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ5YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19XG52YXIgRGE9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6ZnVuY3Rpb24oYSl7bWE/dChcIjEwMVwiKTp2b2lkIDA7bWE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7b2EoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO25hLmhhc093blByb3BlcnR5KGMpJiZuYVtjXT09PWR8fChuYVtjXT90KFwiMTAyXCIsYyk6dm9pZCAwLG5hW2NdPWQsYj0hMCl9YiYmb2EoKX19O1xuZnVuY3Rpb24gRWEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD12YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz90KFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gRmEoYSl7bnVsbCE9PWEmJihCYT16YShCYSxhKSk7YT1CYTtCYT1udWxsO2lmKGEmJihBYShhLENhKSxCYT90KFwiOTVcIik6dm9pZCAwLGhhKSl0aHJvdyBhPWlhLGhhPSExLGlhPW51bGwsYTt9dmFyIEdhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEhhPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrR2EsSWE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitHYTtmdW5jdGlvbiBKYShhKXtpZihhW0hhXSlyZXR1cm4gYVtIYV07Zm9yKDshYVtIYV07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtIYV07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBLYShhKXthPWFbSGFdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9XG5mdW5jdGlvbiBMYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dChcIjMzXCIpfWZ1bmN0aW9uIE1hKGEpe3JldHVybiBhW0lhXXx8bnVsbH1mdW5jdGlvbiBOYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIE9hKGEsYixjKXtpZihiPUVhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9emEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9emEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBQYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPU5hKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylPYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU9hKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIFFhKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUVhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz16YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz16YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gUmEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZRYShhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBTYShhKXtBYShhLFBhKX12YXIgVGE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5kb2N1bWVudHx8IXdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtmdW5jdGlvbiBVYShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBWYT17YW5pbWF0aW9uZW5kOlVhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlVhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VWEoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VWEoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxXYT17fSxYYT17fTtcblRhJiYoWGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVmEuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVmEuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVmEuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVmEudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBZYShhKXtpZihXYVthXSlyZXR1cm4gV2FbYV07aWYoIVZhW2FdKXJldHVybiBhO3ZhciBiPVZhW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFhhKXJldHVybiBXYVthXT1iW2NdO3JldHVybiBhfVxudmFyIFphPVlhKFwiYW5pbWF0aW9uZW5kXCIpLCRhPVlhKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGFiPVlhKFwiYW5pbWF0aW9uc3RhcnRcIiksYmI9WWEoXCJ0cmFuc2l0aW9uZW5kXCIpLGNiPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxkYj1udWxsLGViPW51bGwsZmI9bnVsbDtcbmZ1bmN0aW9uIGdiKCl7aWYoZmIpcmV0dXJuIGZiO3ZhciBhLGI9ZWIsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gZGI/ZGIudmFsdWU6ZGIudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gZmI9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBoYigpe3JldHVybiEwfWZ1bmN0aW9uIGliKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBBKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9oYjppYjt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWliO3JldHVybiB0aGlzfVxucChBLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWhiKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWhiKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWhifSxpc1BlcnNpc3RlbnQ6aWIsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9aWI7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTtBLkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbkEuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO3AoZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPXAoe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7amIoYyk7cmV0dXJuIGN9O2piKEEpO2Z1bmN0aW9uIGtiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIGxiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDp0KFwiMjc5XCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1cbmZ1bmN0aW9uIGpiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWtiO2EucmVsZWFzZT1sYn12YXIgbWI9QS5leHRlbmQoe2RhdGE6bnVsbH0pLG5iPUEuZXh0ZW5kKHtkYXRhOm51bGx9KSxvYj1bOSwxMywyNywzMl0scGI9VGEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHFiPW51bGw7VGEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHFiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgcmI9VGEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFxYixzYj1UYSYmKCFwYnx8cWImJjg8cWImJjExPj1xYiksdGI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksdWI9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sd2I9ITE7XG5mdW5jdGlvbiB4YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PW9iLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24geWIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgemI9ITE7ZnVuY3Rpb24gQWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHliKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt3Yj0hMDtyZXR1cm4gdGI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09dGImJndiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIEJiKGEsYil7aWYoemIpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IXBiJiZ4YihhLGIpPyhhPWdiKCksZmI9ZWI9ZGI9bnVsbCx6Yj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gc2ImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIENiPXtldmVudFR5cGVzOnViLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihwYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXViLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXViLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT11Yi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgemI/eGIoYSxjKSYmKGU9dWIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT11Yi5jb21wb3NpdGlvblN0YXJ0KTtlPyhzYiYmXCJrb1wiIT09Yy5sb2NhbGUmJih6Ynx8ZSE9PXViLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXViLmNvbXBvc2l0aW9uRW5kJiZ6YiYmKGY9Z2IoKSk6KGRiPWQsZWI9XCJ2YWx1ZVwiaW4gZGI/ZGIudmFsdWU6ZGIudGV4dENvbnRlbnQsemI9XG4hMCkpLGU9bWIuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9eWIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFNhKGUpLGY9ZSk6Zj1udWxsOyhhPXJiP0FiKGEsYyk6QmIoYSxjKSk/KGI9bmIuZ2V0UG9vbGVkKHViLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxTYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxEYj1udWxsLEViPW51bGwsRmI9bnVsbDtmdW5jdGlvbiBHYihhKXtpZihhPXdhKGEpKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgRGI/dChcIjI4MFwiKTp2b2lkIDA7dmFyIGI9dmEoYS5zdGF0ZU5vZGUpO0RiKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gSGIoYSl7RWI/RmI/RmIucHVzaChhKTpGYj1bYV06RWI9YX1mdW5jdGlvbiBJYigpe2lmKEViKXt2YXIgYT1FYixiPUZiO0ZiPUViPW51bGw7R2IoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUdiKGJbYV0pfX1cbmZ1bmN0aW9uIEpiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gS2IoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gTGIoKXt9dmFyIE1iPSExO2Z1bmN0aW9uIE5iKGEsYil7aWYoTWIpcmV0dXJuIGEoYik7TWI9ITA7dHJ5e3JldHVybiBKYihhLGIpfWZpbmFsbHl7aWYoTWI9ITEsbnVsbCE9PUVifHxudWxsIT09RmIpTGIoKSxJYigpfX12YXIgT2I9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gUGIoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFPYlthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG5mdW5jdGlvbiBRYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gU2IoYSl7aWYoIVRhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIFRiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYihhKXt2YXIgYj1UYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVViKGEpKX1mdW5jdGlvbiBXYihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGIoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX12YXIgWGI9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7WGIuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoWGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7XG52YXIgWWI9L14oLiopW1xcXFxcXC9dLyxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmI9RD9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYj1EP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWM9RD9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmM9RD9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2M9RD9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGM9RD9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWM9RD9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2M9RD9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGM9RD9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsaWM9RD9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGpjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsa2M9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGxjKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1rYyYmYVtrY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIG1jKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgZmM6cmV0dXJuXCJDb25jdXJyZW50TW9kZVwiO2Nhc2UgYWM6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGI6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNjOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJjOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGM6cmV0dXJuXCJTdXNwZW5zZVwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcblwiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIGljOnJldHVybiBtYyhhLnR5cGUpO2Nhc2UgamM6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBtYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBuYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9bWMoYS50eXBlKTtjPW51bGw7ZCYmKGM9bWMoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIG9jPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxwYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHFjPXt9LHJjPXt9O1xuZnVuY3Rpb24gc2MoYSl7aWYocGMuY2FsbChyYyxhKSlyZXR1cm4hMDtpZihwYy5jYWxsKHFjLGEpKXJldHVybiExO2lmKG9jLnRlc3QoYSkpcmV0dXJuIHJjW2FdPSEwO3FjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHRjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gdWMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dGMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBGKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgRz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDAsITEsYSxudWxsKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtHW2JdPW5ldyBGKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwzLCEwLGEsbnVsbCl9KTtcbltcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDQsITEsYSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtHW2FdPW5ldyBGKGEsNiwhMSxhLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtHW2FdPW5ldyBGKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgdmM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB3YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2YyxcbndjKTtHW2JdPW5ldyBGKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7R1tiXT1uZXcgRihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx3Yyk7R1tiXT1uZXcgRihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO0cudGFiSW5kZXg9bmV3IEYoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24geGMoYSxiLGMsZCl7dmFyIGU9Ry5oYXNPd25Qcm9wZXJ0eShiKT9HW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwodWMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3NjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB5YyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gemMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIHAoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9eWMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnhjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYyhhLGIpe0JjKGEsYik7dmFyIGM9eWMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGMoYSxiLnR5cGUseWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBEYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIEZjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIEdjKGEsYixjKXthPUEuZ2V0UG9vbGVkKEZjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7SGIoYyk7U2EoYSk7cmV0dXJuIGF9dmFyIEhjPW51bGwsSWM9bnVsbDtmdW5jdGlvbiBKYyhhKXtGYShhKX1cbmZ1bmN0aW9uIEtjKGEpe3ZhciBiPUxhKGEpO2lmKFdiKGIpKXJldHVybiBhfWZ1bmN0aW9uIExjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIE1jPSExO1RhJiYoTWM9U2IoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gTmMoKXtIYyYmKEhjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLE9jKSxJYz1IYz1udWxsKX1mdW5jdGlvbiBPYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmS2MoSWMpJiYoYT1HYyhJYyxhLFFiKGEpKSxOYihKYyxhKSl9ZnVuY3Rpb24gUGMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KE5jKCksSGM9YixJYz1jLEhjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLE9jKSk6XCJibHVyXCI9PT1hJiZOYygpfWZ1bmN0aW9uIFFjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIEtjKEljKX1cbmZ1bmN0aW9uIFJjKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gS2MoYil9ZnVuY3Rpb24gU2MoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gS2MoYil9XG52YXIgVGM9e2V2ZW50VHlwZXM6RmMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpNYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/TGEoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPUxjOlBiKGUpP01jP2Y9U2M6KGY9UWMsZz1QYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9UmMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIEdjKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sVWM9QS5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFZjPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFdjKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9VmNbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBYYygpe3JldHVybiBXY31cbnZhciBZYz0wLFpjPTAsJGM9ITEsYWQ9ITEsYmQ9VWMuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlhjLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVljO1ljPWEuc2NyZWVuWDtyZXR1cm4gJGM/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOigkYz0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVpjO1pjPWEuc2NyZWVuWTtyZXR1cm4gYWQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihhZD0hMCwwKX19KSxjZD1iZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksZGQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGVkPXtldmVudFR5cGVzOmRkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0phKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsbD12b2lkIDAsaz12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1iZCxoPWRkLm1vdXNlTGVhdmUsbD1kZC5tb3VzZUVudGVyLGs9XCJtb3VzZVwiO1xuZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpZz1jZCxoPWRkLnBvaW50ZXJMZWF2ZSxsPWRkLnBvaW50ZXJFbnRlcixrPVwicG9pbnRlclwiO3ZhciBtPW51bGw9PWY/ZTpMYShmKTtlPW51bGw9PWI/ZTpMYShiKTthPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2EudHlwZT1rK1wibGVhdmVcIjthLnRhcmdldD1tO2EucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQobCxiLGMsZCk7Yy50eXBlPWsrXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PW07ZD1iO2lmKGYmJmQpYTp7Yj1mO2U9ZDtrPTA7Zm9yKGc9YjtnO2c9TmEoZykpaysrO2c9MDtmb3IobD1lO2w7bD1OYShsKSlnKys7Zm9yKDswPGstZzspYj1OYShiKSxrLS07Zm9yKDswPGctazspZT1OYShlKSxnLS07Zm9yKDtrLS07KXtpZihiPT09ZXx8Yj09PWUuYWx0ZXJuYXRlKWJyZWFrIGE7Yj1OYShiKTtlPU5hKGUpfWI9bnVsbH1lbHNlIGI9bnVsbDtlPWI7Zm9yKGI9W107ZiYmZiE9PWU7KXtrPVxuZi5hbHRlcm5hdGU7aWYobnVsbCE9PWsmJms9PT1lKWJyZWFrO2IucHVzaChmKTtmPU5hKGYpfWZvcihmPVtdO2QmJmQhPT1lOyl7az1kLmFsdGVybmF0ZTtpZihudWxsIT09ayYmaz09PWUpYnJlYWs7Zi5wdXNoKGQpO2Q9TmEoZCl9Zm9yKGQ9MDtkPGIubGVuZ3RoO2QrKylRYShiW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihkPWYubGVuZ3RoOzA8ZC0tOylRYShmW2RdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm5bYSxjXX19O2Z1bmN0aW9uIGZkKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgZ2Q9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhkKGEsYil7aWYoZmQoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFnZC5jYWxsKGIsY1tkXSl8fCFmZChhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGtkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGxkKGEpezIhPT1rZChhKT90KFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIG1kKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWtkKGEpLDM9PT1iP3QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGxkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGxkKGUpLGI7Zz1nLnNpYmxpbmd9dChcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOnQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD90KFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/dChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBuZChhKXthPW1kKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIG9kPUEuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxwZD1BLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHFkPVVjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gcmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgc2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHRkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx1ZD1VYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9c2RbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9cmQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3RkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpYYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9yZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9yZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHZkPWJkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx3ZD1VYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpYY30pLHhkPUEuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHlkPWJkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksemQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbWmEsXCJhbmltYXRpb25FbmRcIl0sWyRhLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFthYixcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sW2JiLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0sQWQ9e30sQmQ9e307ZnVuY3Rpb24gQ2QoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTtBZFthXT1iO0JkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxcbltcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7Q2QoYSwhMCl9KTt6ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NkKGEsITEpfSk7XG52YXIgRGQ9e2V2ZW50VHlwZXM6QWQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9QmRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUJkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09cmQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXVkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1xZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPWJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG52ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXdkO2JyZWFrO2Nhc2UgWmE6Y2FzZSAkYTpjYXNlIGFiOmE9b2Q7YnJlYWs7Y2FzZSBiYjphPXhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPVVjO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9eWQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1wZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPWNkO2JyZWFrO2RlZmF1bHQ6YT1BfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7U2EoYik7cmV0dXJuIGJ9fSxFZD1EZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG5GZD1bXTtmdW5jdGlvbiBHZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkO2ZvcihkPWM7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFkKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYyk7Yz1KYShkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1RYihhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9bnVsbCxoPTA7aDxwYS5sZW5ndGg7aCsrKXt2YXIgbD1wYVtoXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSkpJiYoZz16YShnLGwpKX1GYShnKX19dmFyIEhkPSEwO1xuZnVuY3Rpb24gSChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShFZChhKT9JZDpKZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfWZ1bmN0aW9uIEtkKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KEVkKGEpP0lkOkpkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gSWQoYSxiKXtLYihKZCxhLGIpfVxuZnVuY3Rpb24gSmQoYSxiKXtpZihIZCl7dmFyIGM9UWIoYik7Yz1KYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWtkKGMpfHwoYz1udWxsKTtpZihGZC5sZW5ndGgpe3ZhciBkPUZkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e05iKEdkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+RmQubGVuZ3RoJiZGZC5wdXNoKGEpfX19dmFyIExkPXt9LE1kPTAsTmQ9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuZnVuY3Rpb24gT2QoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsTmQpfHwoYVtOZF09TWQrKyxMZFthW05kXV09e30pO3JldHVybiBMZFthW05kXV19ZnVuY3Rpb24gUGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIFFkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJkKGEsYil7dmFyIGM9UWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9UWQoYyl9fWZ1bmN0aW9uIFNkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/U2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gVGQoKXtmb3IodmFyIGE9d2luZG93LGI9UGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXthPWIuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3fWNhdGNoKGMpe2JyZWFrfWI9UGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBWZD1UYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFdkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxYZD1udWxsLFlkPW51bGwsWmQ9bnVsbCwkZD0hMTtcbmZ1bmN0aW9uIGFlKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoJGR8fG51bGw9PVhkfHxYZCE9PVBkKGMpKXJldHVybiBudWxsO2M9WGQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmVWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gWmQmJmhkKFpkLGMpP251bGw6KFpkPWMsYT1BLmdldFBvb2xlZChXZC5zZWxlY3QsWWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1YZCxTYShhKSxhKX1cbnZhciBiZT17ZXZlbnRUeXBlczpXZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1PZChlKTtmPXVhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/TGEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihQYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlYZD1lLFlkPWIsWmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlpkPVlkPVhkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOiRkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gJGQ9ITEsYWUoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoVmQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBhZShjLGQpfXJldHVybiBudWxsfX07RGEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt2YT1NYTt3YT1LYTt4YT1MYTtEYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOkRkLEVudGVyTGVhdmVFdmVudFBsdWdpbjplZCxDaGFuZ2VFdmVudFBsdWdpbjpUYyxTZWxlY3RFdmVudFBsdWdpbjpiZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOkNifSk7ZnVuY3Rpb24gY2UoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkZShhLGIpe2E9cCh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWNlKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBlZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIreWMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGZlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD90KFwiOTFcIik6dm9pZCAwO3JldHVybiBwKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGdlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/dChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOnQoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnljKGMpfX1cbmZ1bmN0aW9uIGhlKGEsYil7dmFyIGM9eWMoYi52YWx1ZSksZD15YyhiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGllKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBqZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBrZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIGxlKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtZT12b2lkIDAsbmU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09amUuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWU9bWV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9bWUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2UoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGUpLmZvckVhY2goZnVuY3Rpb24oYSl7cWUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwZVtiXT1wZVthXX0pfSk7ZnVuY3Rpb24gcmUoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBlLmhhc093blByb3BlcnR5KGEpJiZwZVthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yZShjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0ZT1wKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWUoYSxiKXtiJiYodGVbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3QoXCIxMzdcIixhLFwiXCIpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/dChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDp0KFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT90KFwiNjJcIixcIlwiKTp2b2lkIDApfVxuZnVuY3Rpb24gdmUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fVxuZnVuY3Rpb24gd2UoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9T2QoYSk7Yj11YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6S2QoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOktkKFwiZm9jdXNcIixhKTtLZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6U2IoZSkmJktkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWNiLmluZGV4T2YoZSkmJkgoZSxhKX1jW2VdPSEwfX19ZnVuY3Rpb24geGUoKXt9dmFyIHllPW51bGwsemU9bnVsbDtcbmZ1bmN0aW9uIEFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiBCZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgQ2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsRGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEVlPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssRmU9YmEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s7XG5mdW5jdGlvbiBHZShhLGIsYyxkLGUpe2FbSWFdPWU7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJkJjKGEsZSk7dmUoYyxkKTtkPXZlKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/c2UoYSxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP25lKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9vZShhLGgpOnhjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpDYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhlKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/ZWUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP2VlKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLFxuITApOmVlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1mdW5jdGlvbiBIZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIEllKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBKZT1bXSxLZT0tMTtmdW5jdGlvbiBJKGEpezA+S2V8fChhLmN1cnJlbnQ9SmVbS2VdLEplW0tlXT1udWxsLEtlLS0pfWZ1bmN0aW9uIEooYSxiKXtLZSsrO0plW0tlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIExlPXt9LEs9e2N1cnJlbnQ6TGV9LEw9e2N1cnJlbnQ6ITF9LE1lPUxlO1xuZnVuY3Rpb24gT2UoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBMZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBNKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gUGUoYSl7SShMLGEpO0koSyxhKX1mdW5jdGlvbiBRZShhKXtJKEwsYSk7SShLLGEpfVxuZnVuY3Rpb24gUmUoYSxiLGMpe0suY3VycmVudCE9PUxlP3QoXCIxNjhcIik6dm9pZCAwO0ooSyxiLGEpO0ooTCxjLGEpfWZ1bmN0aW9uIFNlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZCllIGluIGE/dm9pZCAwOnQoXCIxMDhcIixtYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIHAoe30sYyxkKX1mdW5jdGlvbiBUZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fExlO01lPUsuY3VycmVudDtKKEssYixhKTtKKEwsTC5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2Q/dm9pZCAwOnQoXCIxNjlcIik7Yz8oYj1TZShhLGIsTWUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixJKEwsYSksSShLLGEpLEooSyxiLGEpKTpJKEwsYSk7SihMLGMsYSl9dmFyIFZlPW51bGwsV2U9bnVsbDtmdW5jdGlvbiBYZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gWWUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VmU9WGUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO1dlPVhlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBaZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuY29udGV4dERlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBOKGEsYixjLGQpe3JldHVybiBuZXcgWmUoYSxiLGMsZCl9XG5mdW5jdGlvbiAkZShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIGFmKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiAkZShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2MpcmV0dXJuIDExO2lmKGE9PT1pYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBiZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPU4oYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2MuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXM7Yy5zaWJsaW5nPWEuc2libGluZztcbmMuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIGNmKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSkkZShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYzpyZXR1cm4gZGYoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYzpyZXR1cm4gZWYoYyxlfDMsZixiKTtjYXNlIGJjOnJldHVybiBlZihjLGV8MixmLGIpO2Nhc2UgY2M6cmV0dXJuIGE9TigxMixjLGIsZXw0KSxhLmVsZW1lbnRUeXBlPWNjLGEudHlwZT1jYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhjOnJldHVybiBhPU4oMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9aGMsYS50eXBlPWhjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYzpnPTEwO2JyZWFrIGE7Y2FzZSBlYzpnPTk7YnJlYWsgYTtjYXNlIGdjOmc9MTE7YnJlYWsgYTtjYXNlIGljOmc9XG4xNDticmVhayBhO2Nhc2UgamM6Zz0xNjtkPW51bGw7YnJlYWsgYX10KFwiMTMwXCIsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpfWI9TihnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIGRmKGEsYixjLGQpe2E9Tig3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gZWYoYSxiLGMsZCl7YT1OKDgsYSxkLGIpO2I9MD09PShiJjEpP2JjOmZjO2EuZWxlbWVudFR5cGU9YjthLnR5cGU9YjthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gZmYoYSxiLGMpe2E9Tig2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBnZihhLGIsYyl7Yj1OKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifWZ1bmN0aW9uIGhmKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPGI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZT5iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTtqZihiLGEpfVxuZnVuY3Rpb24ga2YoYSxiKXthLmRpZEVycm9yPSExO2EubGF0ZXN0UGluZ2VkVGltZT49YiYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWUsZD1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1iP2EuZWFybGllc3RQZW5kaW5nVGltZT1kPT09Yj9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6ZDpkPT09YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtkPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9YjpjPGI/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YjpkPmImJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9Yik7amYoYixhKX1mdW5jdGlvbiBsZihhLGIpe3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTthPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2M+YiYmKGI9Yyk7YT5iJiYoYj1hKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZDxhKSYmKGU9ZCk7YT1lOzAhPT1hJiZjPmEmJihhPWMpO2IubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZTtiLmV4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gUChhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPXAoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIG1mKGEpe3ZhciBiPWEuX3Jlc3VsdDtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGI7Y2FzZSAyOnRocm93IGI7Y2FzZSAwOnRocm93IGI7ZGVmYXVsdDphLl9zdGF0dXM9MDtiPWEuX2N0b3I7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KTtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGEuX3Jlc3VsdDtjYXNlIDI6dGhyb3cgYS5fcmVzdWx0O31hLl9yZXN1bHQ9Yjt0aHJvdyBiO319dmFyIG5mPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gb2YoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOnAoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgeGY9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1rZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1wZigpO2Q9cWYoZCxhKTt2YXIgZT1yZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7c2YoKTt0ZihhLGUpO3VmKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPXBmKCk7ZD1xZihkLGEpO3ZhciBlPXJmKGQpO2UudGFnPXZmO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtzZigpO3RmKGEsZSk7dWYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9cGYoKTtjPXFmKGMsYSk7dmFyIGQ9cmYoYyk7ZC50YWc9XG53Zjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7c2YoKTt0ZihhLGQpO3VmKGEsYyl9fTtmdW5jdGlvbiB5ZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFoZChjLGQpfHwhaGQoZSxmKTohMH1cbmZ1bmN0aW9uIHpmKGEsYixjKXt2YXIgZD0hMSxlPUxlO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPUFmKGYpOihlPU0oYik/TWU6Sy5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/T2UoYSxlKTpMZSk7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPXhmO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEJmKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZ4Zi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIENmKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9bmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1BZihmKTooZj1NKGIpP01lOksuY3VycmVudCxlLmNvbnRleHQ9T2UoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoRGYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKG9mKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJnhmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKERmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgRWY9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIEZmKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDEhPT1jLnRhZz90KFwiMzA5XCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDp0KFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1uZiYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT90KFwiMjg0XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6dChcIjI5MFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gR2YoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJnQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIEhmKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9YmYoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1mZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9RmYoYSxiLGMpLGQucmV0dXJuPWEsZDtkPWNmKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPUZmKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9Z2YoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9ZGYoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWZmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjPWNmKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPUZmKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYjpyZXR1cm4gYj1nZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoRWYoYil8fFxubGMoYikpcmV0dXJuIGI9ZGYoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7R2YoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWM/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmwoYSxiLGMsZCk6bnVsbDtjYXNlICRiOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsfWlmKEVmKGMpfHxsYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7R2YoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFjP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6bChiLGEsZCxlKTtjYXNlICRiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpfWlmKEVmKGQpfHxsYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7R2YoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB3KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxuPWcsdT1nPTAscj1udWxsO251bGwhPT1uJiZ1PGgubGVuZ3RoO3UrKyl7bi5pbmRleD51PyhyPW4sbj1udWxsKTpyPW4uc2libGluZzt2YXIgdj14KGUsbixoW3VdLGspO2lmKG51bGw9PT12KXtudWxsPT09biYmKG49cik7YnJlYWt9YSYmXG5uJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxuKTtnPWYodixnLHUpO251bGw9PT1tP2w9djptLnNpYmxpbmc9djttPXY7bj1yfWlmKHU9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG4pLGw7aWYobnVsbD09PW4pe2Zvcig7dTxoLmxlbmd0aDt1KyspaWYobj1xKGUsaFt1XSxrKSlnPWYobixnLHUpLG51bGw9PT1tP2w9bjptLnNpYmxpbmc9bixtPW47cmV0dXJuIGx9Zm9yKG49ZChlLG4pO3U8aC5sZW5ndGg7dSsrKWlmKHI9QyhuLGUsdSxoW3VdLGspKWEmJm51bGwhPT1yLmFsdGVybmF0ZSYmbi5kZWxldGUobnVsbD09PXIua2V5P3U6ci5rZXkpLGc9ZihyLGcsdSksbnVsbD09PW0/bD1yOm0uc2libGluZz1yLG09cjthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEUoZSxnLGgsayl7dmFyIGw9bGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/dChcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD90KFwiMTUxXCIpOnZvaWQgMDtcbmZvcih2YXIgbT1sPW51bGwsbj1nLHU9Zz0wLHI9bnVsbCx2PWgubmV4dCgpO251bGwhPT1uJiYhdi5kb25lO3UrKyx2PWgubmV4dCgpKXtuLmluZGV4PnU/KHI9bixuPW51bGwpOnI9bi5zaWJsaW5nO3ZhciB6PXgoZSxuLHYudmFsdWUsayk7aWYobnVsbD09PXope258fChuPXIpO2JyZWFrfWEmJm4mJm51bGw9PT16LmFsdGVybmF0ZSYmYihlLG4pO2c9Zih6LGcsdSk7bnVsbD09PW0/bD16Om0uc2libGluZz16O209ejtuPXJ9aWYodi5kb25lKXJldHVybiBjKGUsbiksbDtpZihudWxsPT09bil7Zm9yKDshdi5kb25lO3UrKyx2PWgubmV4dCgpKXY9cShlLHYudmFsdWUsayksbnVsbCE9PXYmJihnPWYodixnLHUpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO3JldHVybiBsfWZvcihuPWQoZSxuKTshdi5kb25lO3UrKyx2PWgubmV4dCgpKXY9QyhuLGUsdSx2LnZhbHVlLGspLG51bGwhPT12JiYoYSYmbnVsbCE9PXYuYWx0ZXJuYXRlJiZuLmRlbGV0ZShudWxsPT09di5rZXk/dTpcbnYua2V5KSxnPWYodixnLHUpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO2EmJm4uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFpiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09YWM6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09YWM/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPUZmKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9XG5rLnNpYmxpbmd9Zi50eXBlPT09YWM/KGQ9ZGYoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPWNmKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPUZmKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWdmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVxuXCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1mZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihFZihmKSlyZXR1cm4gdyhhLGQsZixoKTtpZihsYyhmKSlyZXR1cm4gRShhLGQsZixoKTtsJiZHZihhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOmg9YS50eXBlLHQoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBJZj1IZighMCksSmY9SGYoITEpLEtmPXt9LExmPXtjdXJyZW50OktmfSxNZj17Y3VycmVudDpLZn0sTmY9e2N1cnJlbnQ6S2Z9O2Z1bmN0aW9uIE9mKGEpe2E9PT1LZj90KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFBmKGEsYil7SihOZixiLGEpO0ooTWYsYSxhKTtKKExmLEtmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1sZShiLGMpfUkoTGYsYSk7SihMZixiLGEpfWZ1bmN0aW9uIFFmKGEpe0koTGYsYSk7SShNZixhKTtJKE5mLGEpfWZ1bmN0aW9uIFJmKGEpe09mKE5mLmN1cnJlbnQpO3ZhciBiPU9mKExmLmN1cnJlbnQpO3ZhciBjPWxlKGIsYS50eXBlKTtiIT09YyYmKEooTWYsYSxhKSxKKExmLGMsYSkpfWZ1bmN0aW9uIFNmKGEpe01mLmN1cnJlbnQ9PT1hJiYoSShMZixhKSxJKE1mLGEpKX1cbnZhciBUZj0wLFVmPTIsVmY9NCxXZj04LFhmPTE2LFlmPTMyLFpmPTY0LCRmPTEyOCxhZz1YYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGJnPTAsY2c9bnVsbCxRPW51bGwsZGc9bnVsbCxlZz1udWxsLFI9bnVsbCxmZz1udWxsLGdnPTAsaGc9bnVsbCxpZz0wLGpnPSExLGtnPW51bGwsbGc9MDtmdW5jdGlvbiBtZygpe3QoXCIzMDdcIil9ZnVuY3Rpb24gbmcoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighZmQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9nKGEsYixjLGQsZSxmKXtiZz1mO2NnPWI7ZGc9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7YWcuY3VycmVudD1udWxsPT09ZGc/cGc6cWc7Yj1jKGQsZSk7aWYoamcpe2RvIGpnPSExLGxnKz0xLGRnPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLGZnPWVnLGhnPVI9UT1udWxsLGFnLmN1cnJlbnQ9cWcsYj1jKGQsZSk7d2hpbGUoamcpO2tnPW51bGw7bGc9MH1hZy5jdXJyZW50PXJnO2E9Y2c7YS5tZW1vaXplZFN0YXRlPWVnO2EuZXhwaXJhdGlvblRpbWU9Z2c7YS51cGRhdGVRdWV1ZT1oZzthLmVmZmVjdFRhZ3w9aWc7YT1udWxsIT09USYmbnVsbCE9PVEubmV4dDtiZz0wO2ZnPVI9ZWc9ZGc9UT1jZz1udWxsO2dnPTA7aGc9bnVsbDtpZz0wO2E/dChcIjMwMFwiKTp2b2lkIDA7cmV0dXJuIGJ9XG5mdW5jdGlvbiBzZygpe2FnLmN1cnJlbnQ9cmc7Ymc9MDtmZz1SPWVnPWRnPVE9Y2c9bnVsbDtnZz0wO2hnPW51bGw7aWc9MDtqZz0hMTtrZz1udWxsO2xnPTB9ZnVuY3Rpb24gdGcoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLHF1ZXVlOm51bGwsYmFzZVVwZGF0ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVI/ZWc9Uj1hOlI9Ui5uZXh0PWE7cmV0dXJuIFJ9ZnVuY3Rpb24gdWcoKXtpZihudWxsIT09ZmcpUj1mZyxmZz1SLm5leHQsUT1kZyxkZz1udWxsIT09UT9RLm5leHQ6bnVsbDtlbHNle251bGw9PT1kZz90KFwiMzEwXCIpOnZvaWQgMDtRPWRnO3ZhciBhPXttZW1vaXplZFN0YXRlOlEubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6US5iYXNlU3RhdGUscXVldWU6US5xdWV1ZSxiYXNlVXBkYXRlOlEuYmFzZVVwZGF0ZSxuZXh0Om51bGx9O1I9bnVsbD09PVI/ZWc9YTpSLm5leHQ9YTtkZz1RLm5leHR9cmV0dXJuIFJ9XG5mdW5jdGlvbiB2ZyhhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHdnKGEpe3ZhciBiPXVnKCksYz1iLnF1ZXVlO251bGw9PT1jP3QoXCIzMTFcIik6dm9pZCAwO2lmKDA8bGcpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PWtnKXt2YXIgZT1rZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7a2cuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2ZkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHhnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtyZXR1cm5bZixkXX19cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxkXX1kPWMubGFzdDt2YXIgZz1iLmJhc2VVcGRhdGU7Zj1iLmJhc2VTdGF0ZTtudWxsIT09Zz8obnVsbCE9PWQmJihkLm5leHQ9bnVsbCksZD1nLm5leHQpOmQ9bnVsbCE9PWQ/ZC5uZXh0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBoPWU9bnVsbCxsPWQsaz0hMTtkb3t2YXIgbT1sLmV4cGlyYXRpb25UaW1lO1xubTxiZz8oa3x8KGs9ITAsaD1nLGU9ZiksbT5nZyYmKGdnPW0pKTpmPWwuZWFnZXJSZWR1Y2VyPT09YT9sLmVhZ2VyU3RhdGU6YShmLGwuYWN0aW9uKTtnPWw7bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1kKTtrfHwoaD1nLGU9Zik7ZmQoZixiLm1lbW9pemVkU3RhdGUpfHwoeGc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT1oO2IuYmFzZVN0YXRlPWU7Yy5lYWdlclJlZHVjZXI9YTtjLmVhZ2VyU3RhdGU9Zn1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24geWcoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O251bGw9PT1oZz8oaGc9e2xhc3RFZmZlY3Q6bnVsbH0saGcubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGI9aGcubGFzdEVmZmVjdCxudWxsPT09Yj9oZy5sYXN0RWZmZWN0PWEubmV4dD1hOihjPWIubmV4dCxiLm5leHQ9YSxhLm5leHQ9YyxoZy5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT10ZygpO2lnfD1hO2UubWVtb2l6ZWRTdGF0ZT15ZyhiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIEJnKGEsYixjLGQpe3ZhciBlPXVnKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVEpe3ZhciBnPVEubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmbmcoZCxnLmRlcHMpKXt5ZyhUZixjLGYsZCk7cmV0dXJufX1pZ3w9YTtlLm1lbW9pemVkU3RhdGU9eWcoYixjLGYsZCl9ZnVuY3Rpb24gQ2coYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBEZygpe31cbmZ1bmN0aW9uIEVnKGEsYixjKXsyNT5sZz92b2lkIDA6dChcIjMwMVwiKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09Y2d8fG51bGwhPT1kJiZkPT09Y2cpaWYoamc9ITAsYT17ZXhwaXJhdGlvblRpbWU6YmcsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sbnVsbD09PWtnJiYoa2c9bmV3IE1hcCksYz1rZy5nZXQoYiksdm9pZCAwPT09YylrZy5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9ZWxzZXtzZigpO3ZhciBlPXBmKCk7ZT1xZihlLGEpO3ZhciBmPXtleHBpcmF0aW9uVGltZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5sYXN0O2lmKG51bGw9PT1nKWYubmV4dD1mO2Vsc2V7dmFyIGg9Zy5uZXh0O251bGwhPT1oJiYoZi5uZXh0PWgpO2cubmV4dD1mfWIubGFzdD1mO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PVxuZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmVhZ2VyUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBsPWIuZWFnZXJTdGF0ZSxrPWQobCxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1rO2lmKGZkKGssbCkpcmV0dXJufWNhdGNoKG0pe31maW5hbGx5e311ZihhLGUpfX1cbnZhciByZz17cmVhZENvbnRleHQ6QWYsdXNlQ2FsbGJhY2s6bWcsdXNlQ29udGV4dDptZyx1c2VFZmZlY3Q6bWcsdXNlSW1wZXJhdGl2ZUhhbmRsZTptZyx1c2VMYXlvdXRFZmZlY3Q6bWcsdXNlTWVtbzptZyx1c2VSZWR1Y2VyOm1nLHVzZVJlZjptZyx1c2VTdGF0ZTptZyx1c2VEZWJ1Z1ZhbHVlOm1nfSxwZz17cmVhZENvbnRleHQ6QWYsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXt0ZygpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OkFmLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB6Zyg1MTYsJGZ8WmYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOlthXTtyZXR1cm4gemcoNCxWZnxZZixDZy5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHpnKDQsVmZ8WWYsYSxiKX0sXG51c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGcoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsZWFnZXJSZWR1Y2VyOmEsZWFnZXJTdGF0ZTpifTthPWEuZGlzcGF0Y2g9RWcuYmluZChudWxsLGNnLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj10ZygpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj10ZygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsZWFnZXJSZWR1Y2VyOnZnLFxuZWFnZXJTdGF0ZTphfTthPWEuZGlzcGF0Y2g9RWcuYmluZChudWxsLGNnLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19LHVzZURlYnVnVmFsdWU6RGd9LHFnPXtyZWFkQ29udGV4dDpBZix1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPXVnKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuZyhiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpBZix1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQmcoNTE2LCRmfFpmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpbYV07cmV0dXJuIEJnKDQsVmZ8WWYsQ2cuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBCZyg0LFZmfFlmLGEsYil9LFxudXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPXVnKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuZyhiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjp3Zyx1c2VSZWY6ZnVuY3Rpb24oKXtyZXR1cm4gdWcoKS5tZW1vaXplZFN0YXRlfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gd2codmcsYSl9LHVzZURlYnVnVmFsdWU6RGd9LEZnPW51bGwsR2c9bnVsbCxIZz0hMTtcbmZ1bmN0aW9uIElnKGEsYil7dmFyIGM9Tig1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIEpnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gS2coYSl7aWYoSGcpe3ZhciBiPUdnO2lmKGIpe3ZhciBjPWI7aWYoIUpnKGEsYikpe2I9SGUoYyk7aWYoIWJ8fCFKZyhhLGIpKXthLmVmZmVjdFRhZ3w9MjtIZz0hMTtGZz1hO3JldHVybn1JZyhGZyxjKX1GZz1hO0dnPUllKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsSGc9ITEsRmc9YX19ZnVuY3Rpb24gTGcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWEucmV0dXJuO0ZnPWF9ZnVuY3Rpb24gTWcoYSl7aWYoYSE9PUZnKXJldHVybiExO2lmKCFIZylyZXR1cm4gTGcoYSksSGc9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFCZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9R2c7YjspSWcoYSxiKSxiPUhlKGIpO0xnKGEpO0dnPUZnP0hlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIE5nKCl7R2c9Rmc9bnVsbDtIZz0hMX1cbnZhciBPZz1YYi5SZWFjdEN1cnJlbnRPd25lcix4Zz0hMTtmdW5jdGlvbiBTKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/SmYoYixudWxsLGMsZCk6SWYoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gUGcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1FnKGIsZSk7ZD1vZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF4ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLFJnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gU2coYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiEkZShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxUZyhhLGIsZyxkLGUsZik7YT1jZihjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmhkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIFJnKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPWJmKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBUZyhhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZoZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJih4Zz0hMSxlPGYpP1JnKGEsYixmKTpVZyhhLGIsYyxkLGYpfWZ1bmN0aW9uIFZnKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gVWcoYSxiLGMsZCxlKXt2YXIgZj1NKGMpP01lOksuY3VycmVudDtmPU9lKGIsZik7UWcoYixlKTtjPW9nKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXhnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksUmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBXZyhhLGIsYyxkLGUpe2lmKE0oYykpe3ZhciBmPSEwO1RlKGIpfWVsc2UgZj0hMTtRZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksemYoYixjLGQsZSksQ2YoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9QWYoayk6KGs9TShjKT9NZTpLLmN1cnJlbnQsaz1PZShiLGspKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmQmYoYixnLGQsayk7WGc9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2w9Zy5zdGF0ZT14O3ZhciBDPWIudXBkYXRlUXVldWU7bnVsbCE9PUMmJihEZihiLEMsZCxnLGUpLGw9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8eCE9PWx8fEwuY3VycmVudHx8WGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYob2YoYixjLG0sZCksbD1iLm1lbW9pemVkU3RhdGUpLChoPVhnfHx5ZihiLGMsaCxkLHgsbCxrKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1sKSxnLnByb3BzPWQsZy5zdGF0ZT1sLGcuY29udGV4dD1rLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpQKGIudHlwZSxoKSxsPWcuY29udGV4dCxrPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPUFmKGspOihrPU0oYyk/TWU6Sy5jdXJyZW50LGs9T2UoYixrKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocT1cImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmQmYoYixnLGQsayksWGc9ITEsbD1iLm1lbW9pemVkU3RhdGUseD1nLnN0YXRlPWwsQz1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1DJiYoRGYoYixDLGQsZyxlKSx4PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGwhPT14fHxMLmN1cnJlbnR8fFhnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKG9mKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT1YZ3x8eWYoYixjLGgsZCxsLHgsaykpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPVxueCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gWWcoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gWWcoYSxiLGMsZCxlLGYpe1ZnKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZVZShiLGMsITEpLFJnKGEsYixmKTtkPWIuc3RhdGVOb2RlO09nLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPUlmKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9SWYoYixudWxsLGgsZikpOlMoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmVWUoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBaZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P1JlKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJlJlKGEsYi5jb250ZXh0LCExKTtQZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiAkZyhhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkU3RhdGU7aWYoMD09PShiLmVmZmVjdFRhZyY2NCkpe2Y9bnVsbDt2YXIgZz0hMX1lbHNlIGY9e3RpbWVkT3V0QXQ6bnVsbCE9PWY/Zi50aW1lZE91dEF0OjB9LGc9ITAsYi5lZmZlY3RUYWcmPS02NTtpZihudWxsPT09YSlpZihnKXt2YXIgaD1lLmZhbGxiYWNrO2E9ZGYobnVsbCxkLDAsbnVsbCk7MD09PShiLm1vZGUmMSkmJihhLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKTtkPWRmKGgsZCxjLG51bGwpO2Euc2libGluZz1kO2M9YTtjLnJldHVybj1kLnJldHVybj1ifWVsc2UgYz1kPUpmKGIsbnVsbCxlLmNoaWxkcmVuLGMpO2Vsc2UgbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZT8oZD1hLmNoaWxkLGg9ZC5zaWJsaW5nLGc/KGM9ZS5mYWxsYmFjayxlPWJmKGQsZC5wZW5kaW5nUHJvcHMsMCksMD09PShiLm1vZGUmMSkmJihnPW51bGwhPT1cbmIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWQuY2hpbGQmJihlLmNoaWxkPWcpKSxkPWUuc2libGluZz1iZihoLGMsaC5leHBpcmF0aW9uVGltZSksYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmM9ZD1JZihiLGQuY2hpbGQsZS5jaGlsZHJlbixjKSk6KGg9YS5jaGlsZCxnPyhnPWUuZmFsbGJhY2ssZT1kZihudWxsLGQsMCxudWxsKSxlLmNoaWxkPWgsMD09PShiLm1vZGUmMSkmJihlLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKSxkPWUuc2libGluZz1kZihnLGQsYyxudWxsKSxkLmVmZmVjdFRhZ3w9MixjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6ZD1jPUlmKGIsaCxlLmNoaWxkcmVuLGMpKSxiLnN0YXRlTm9kZT1hLnN0YXRlTm9kZTtiLm1lbW9pemVkU3RhdGU9ZjtiLmNoaWxkPWM7cmV0dXJuIGR9XG5mdW5jdGlvbiBSZyhhLGIsYyl7bnVsbCE9PWEmJihiLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/dChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPWJmKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPWJmKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFoKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxMLmN1cnJlbnQpeGc9ITA7ZWxzZXtpZihkPGMpe3hnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOlpnKGIpO05nKCk7YnJlYWs7Y2FzZSA1OlJmKGIpO2JyZWFrO2Nhc2UgMTpNKGIudHlwZSkmJlRlKGIpO2JyZWFrO2Nhc2UgNDpQZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6YmgoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuICRnKGEsYixjKTtiPVJnKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9fXJldHVybiBSZyhhLGIsYyl9fWVsc2UgeGc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9XG5iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPU9lKGIsSy5jdXJyZW50KTtRZyhiLGMpO2U9b2cobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtzZygpO2lmKE0oZCkpe3ZhciBmPSEwO1RlKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZvZihiLGQsZyxhKTtlLnVwZGF0ZXI9eGY7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtDZihiLGQsYSxjKTtiPVlnKG51bGwsYixkLCEwLGYsXG5jKX1lbHNlIGIudGFnPTAsUyhudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2Y9Yi5wZW5kaW5nUHJvcHM7YT1tZihlKTtiLnR5cGU9YTtlPWIudGFnPWFmKGEpO2Y9UChhLGYpO2c9dm9pZCAwO3N3aXRjaChlKXtjYXNlIDA6Zz1VZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTpnPVdnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxMTpnPVBnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxNDpnPVNnKG51bGwsYixhLFAoYS50eXBlLGYpLGQsYyk7YnJlYWs7ZGVmYXVsdDp0KFwiMzA2XCIsYSxcIlwiKX1yZXR1cm4gZztjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOlAoZCxlKSxVZyhhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxcbmU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpQKGQsZSksV2coYSxiLGQsZSxjKTtjYXNlIDM6WmcoYik7ZD1iLnVwZGF0ZVF1ZXVlO251bGw9PT1kP3QoXCIyODJcIik6dm9pZCAwO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7RGYoYixkLGIucGVuZGluZ1Byb3BzLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlOZygpLGI9UmcoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpR2c9SWUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksRmc9YixlPUhnPSEwO2U/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9SmYoYixudWxsLGQsYykpOihTKGEsYixkLGMpLE5nKCkpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIFJmKGIpLG51bGw9PT1hJiZLZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsXG5nPWUuY2hpbGRyZW4sQmUoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkJlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLFZnKGEsYiksMSE9PWMmJmIubW9kZSYxJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihTKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZLZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuICRnKGEsYixjKTtjYXNlIDQ6cmV0dXJuIFBmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPUlmKGIsbnVsbCxkLGMpOlMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpQKGQsZSksUGcoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO2JoKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1mZChoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTC5jdXJyZW50KXtiPVJnKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBsPWguY29udGV4dERlcGVuZGVuY2llcztpZihudWxsIT09bCl7Zz1oLmNoaWxkO2Zvcih2YXIgaz1sLmZpcnN0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCYmMCE9PVxuKGsub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihrPXJmKGMpLGsudGFnPXdmLHRmKGgsaykpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7az1oLmFsdGVybmF0ZTtudWxsIT09ayYmay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTtmb3IodmFyIG09aC5yZXR1cm47bnVsbCE9PW07KXtrPW0uYWx0ZXJuYXRlO2lmKG0uY2hpbGRFeHBpcmF0aW9uVGltZTxjKW0uY2hpbGRFeHBpcmF0aW9uVGltZT1jLG51bGwhPT1rJiZrLmNoaWxkRXhwaXJhdGlvblRpbWU8YyYmKGsuY2hpbGRFeHBpcmF0aW9uVGltZT1jKTtlbHNlIGlmKG51bGwhPT1rJiZrLmNoaWxkRXhwaXJhdGlvblRpbWU8YylrLmNoaWxkRXhwaXJhdGlvblRpbWU9YztlbHNlIGJyZWFrO209bS5yZXR1cm59bC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTticmVha31rPWsubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6XG5oLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9fVMoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sUWcoYixjKSxlPUFmKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1QKGUsYi5wZW5kaW5nUHJvcHMpLGY9UChlLnR5cGUsZiksU2coYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIFRnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PVxuZD9lOlAoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxNKGQpPyhhPSEwLFRlKGIpKTphPSExLFFnKGIsYyksemYoYixkLGUsYyksQ2YoYixkLGUsYyksWWcobnVsbCxiLGQsITAsYSxjKTtkZWZhdWx0OnQoXCIxNTZcIil9fXZhciBjaD17Y3VycmVudDpudWxsfSxkaD1udWxsLGVoPW51bGwsZmg9bnVsbDtmdW5jdGlvbiBiaChhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtKKGNoLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBnaChhKXt2YXIgYj1jaC5jdXJyZW50O0koY2gsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBRZyhhLGIpe2RoPWE7Zmg9ZWg9bnVsbDt2YXIgYz1hLmNvbnRleHREZXBlbmRlbmNpZXM7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU+PWImJih4Zz0hMCk7YS5jb250ZXh0RGVwZW5kZW5jaWVzPW51bGx9XG5mdW5jdGlvbiBBZihhLGIpe2lmKGZoIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilmaD1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09ZWg/KG51bGw9PT1kaD90KFwiMzA4XCIpOnZvaWQgMCxlaD1iLGRoLmNvbnRleHREZXBlbmRlbmNpZXM9e2ZpcnN0OmIsZXhwaXJhdGlvblRpbWU6MH0pOmVoPWVoLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciBoaD0wLHZmPTEsd2Y9MixpaD0zLFhnPSExO2Z1bmN0aW9uIGpoKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIGtoKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiByZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6aGgscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbGgoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gdGYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWpoKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWpoKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWpoKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1raChlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1raChkKSk7bnVsbD09PWV8fGQ9PT1lP2xoKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8obGgoZCxiKSxsaChlLGIpKToobGgoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWpoKGEubWVtb2l6ZWRTdGF0ZSk6bmgoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBuaChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1raChiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBvaChhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIHZmOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSBpaDphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMjA0OXw2NDtjYXNlIGhoOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBwKHt9LGQsZSk7Y2FzZSB3ZjpYZz0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIERmKGEsYixjLGQsZSl7WGc9ITE7Yj1uaChhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGw9Yi5maXJzdFVwZGF0ZSxrPWY7bnVsbCE9PWw7KXt2YXIgbT1sLmV4cGlyYXRpb25UaW1lO208ZT8obnVsbD09PWcmJihnPWwsZj1rKSxoPG0mJihoPW0pKTooaz1vaChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1sOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1sLGIubGFzdEVmZmVjdD1sKSkpO2w9bC5uZXh0fW09bnVsbDtmb3IobD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWw7KXt2YXIgcT1sLmV4cGlyYXRpb25UaW1lO3E8ZT8obnVsbD09PW0mJihtPWwsbnVsbD09PWcmJihmPWspKSxoPHEmJihoPXEpKTooaz1vaChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9XG4zMixsLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWw6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RDYXB0dXJlZEVmZmVjdD1sKSkpO2w9bC5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1tP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09bSYmKGY9ayk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW07YS5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1rfVxuZnVuY3Rpb24gcGgoYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO3FoKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtxaChiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gcWgoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjE5MVwiLGMpOnZvaWQgMDtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gcmgoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpuYyhiKX19ZnVuY3Rpb24gc2goYSl7YS5lZmZlY3RUYWd8PTR9dmFyIHdoPXZvaWQgMCx4aD12b2lkIDAseWg9dm9pZCAwLHpoPXZvaWQgMDt3aD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07eGg9ZnVuY3Rpb24oKXt9O1xueWg9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO09mKExmLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YyhnLGYpO2Q9emMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPWRlKGcsZik7ZD1kZShnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9cCh7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPXAoe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWZlKGcsZik7ZD1mZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXhlKX11ZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGw9ZltjXTtmb3IoZyBpbiBsKWwuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHRhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgaz1kW2NdO2w9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZrIT09bCYmKG51bGwhPWt8fG51bGwhPWwpKWlmKFwic3R5bGVcIj09PWMpaWYobCl7Zm9yKGcgaW4gbCkhbC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmbFtnXSE9PWtbZ10mJihofHxcbihoPXt9KSxoW2ddPWtbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbCE9PWsmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09Yz9sPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJih0YS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9ayYmd2UoZSxjKSxhfHxsPT09a3x8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGspKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZzaChiKX19O3poPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZzaChiKX07XG52YXIgQWg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gQmgoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1uYyhjKSk7bnVsbCE9PWMmJm1jKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJm1jKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIENoKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0RoKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEVoKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoKGQudGFnJmEpIT09VGYpe3ZhciBlPWQuZGVzdHJveTtkLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWUmJmUoKX0oZC50YWcmYikhPT1UZiYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIEZoKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1yZShcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWMudGFnJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlKXtkPWMuY2hpbGQuc2libGluZztkLnJldHVybj1jO2M9ZDtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFxuYy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gR2goYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlJiZXZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLmxhc3RFZmZlY3QsbnVsbCE9PWIpKXt2YXIgYz1iPWIubmV4dDtkb3t2YXIgZD1jLmRlc3Ryb3k7aWYodm9pZCAwIT09ZCl7dmFyIGU9YTt0cnl7ZCgpfWNhdGNoKGYpe0RoKGUsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX1icmVhaztjYXNlIDE6Q2goYSk7Yj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe0RoKGEsZil9YnJlYWs7Y2FzZSA1OkNoKGEpO2JyZWFrO2Nhc2UgNDpIaChhKX19XG5mdW5jdGlvbiBJaChhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIEpoKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKEloKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10KFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKG9lKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxJaChjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZz1iLGg9ZS5zdGF0ZU5vZGUsOD09PWcubm9kZVR5cGU/KGY9Zy5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGgsZykpOihmPWcsZi5hcHBlbmRDaGlsZChoKSksZz1nLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWcmJnZvaWQgMCE9PWd8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9eGUpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtcbmVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBIaChhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz90KFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYoR2goZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnPyhkPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8sZT0hMCk6R2goYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gS2goYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpFaChWZixXZixiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZHZShjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT90KFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iLm1lbW9pemVkU3RhdGU7ZD12b2lkIDA7YT1iO251bGw9PT1jP2Q9ITE6KGQ9ITAsYT1iLmNoaWxkLDA9PT1jLnRpbWVkT3V0QXQmJihjLnRpbWVkT3V0QXQ9cGYoKSkpO251bGwhPT1hJiZGaChhLGQpO2M9XG5iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jKXtiLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGc9Yi5zdGF0ZU5vZGU7bnVsbD09PWcmJihnPWIuc3RhdGVOb2RlPW5ldyBBaCk7Yy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPUxoLmJpbmQobnVsbCxiLGEpO2cuaGFzKGEpfHwoZy5hZGQoYSksYS50aGVuKGMsYykpfSl9YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OnQoXCIxNjNcIil9fXZhciBNaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBOaChhLGIsYyl7Yz1yZihjKTtjLnRhZz1paDtjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7T2goZCk7QmgoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBQaChhLGIsYyl7Yz1yZihjKTtjLnRhZz1paDt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09UWg/UWg9bmV3IFNldChbdGhpc10pOlFoLmFkZCh0aGlzKSk7dmFyIGM9Yi52YWx1ZSxlPWIuc3RhY2s7QmgoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1lP2U6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBSaChhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpNKGEudHlwZSkmJlBlKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIFFmKGEpLFFlKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT90KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGE7Y2FzZSA1OnJldHVybiBTZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSA0OnJldHVybiBRZihhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGdoKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgU2g9WGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixUaD1YYi5SZWFjdEN1cnJlbnRPd25lcixVaD0xMDczNzQxODIyLFZoPTAsV2g9ITEsVD1udWxsLFhoPW51bGwsVT0wLFloPS0xLFpoPSExLFY9bnVsbCwkaD0hMSxhaT1udWxsLGJpPW51bGwsY2k9bnVsbCxRaD1udWxsO2Z1bmN0aW9uIGRpKCl7aWYobnVsbCE9PVQpZm9yKHZhciBhPVQucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMTp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJlBlKGIpO2JyZWFrO2Nhc2UgMzpRZihiKTtRZShiKTticmVhaztjYXNlIDU6U2YoYik7YnJlYWs7Y2FzZSA0OlFmKGIpO2JyZWFrO2Nhc2UgMTA6Z2goYil9YT1hLnJldHVybn1YaD1udWxsO1U9MDtZaD0tMTtaaD0hMTtUPW51bGx9XG5mdW5jdGlvbiBlaShhLGIpe2NpPWJpPWFpPW51bGw7dmFyIGM9VztXPSEwO2Rve2lmKGIuZWZmZWN0VGFnJjUxMil7dmFyIGQ9ITEsZT12b2lkIDA7dHJ5e3ZhciBmPWI7RWgoJGYsVGYsZik7RWgoVGYsWmYsZil9Y2F0Y2goZyl7ZD0hMCxlPWd9ZCYmRGgoYixlKX1iPWIubmV4dEVmZmVjdH13aGlsZShudWxsIT09Yik7Vz1jO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmZmkoYSxjKX1mdW5jdGlvbiBzZigpe251bGwhPT1iaSYmRmUoYmkpO251bGwhPT1jaSYmY2koKX1cbmZ1bmN0aW9uIGdpKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjEwMjQpKXtUPWE7YTp7dmFyIGU9YjtiPWE7dmFyIGY9VTt2YXIgZz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDE2OmJyZWFrO2Nhc2UgMTU6Y2FzZSAwOmJyZWFrO2Nhc2UgMTpNKGIudHlwZSkmJlBlKGIpO2JyZWFrO2Nhc2UgMzpRZihiKTtRZShiKTtnPWIuc3RhdGVOb2RlO2cucGVuZGluZ0NvbnRleHQmJihnLmNvbnRleHQ9Zy5wZW5kaW5nQ29udGV4dCxnLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1lfHxudWxsPT09ZS5jaGlsZClNZyhiKSxiLmVmZmVjdFRhZyY9LTM7eGgoYik7YnJlYWs7Y2FzZSA1OlNmKGIpO3ZhciBoPU9mKE5mLmN1cnJlbnQpO2Y9Yi50eXBlO2lmKG51bGwhPT1lJiZudWxsIT1iLnN0YXRlTm9kZSl5aChlLGIsZixnLGgpLGUucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9XG4xMjgpO2Vsc2UgaWYoZyl7dmFyIGw9T2YoTGYuY3VycmVudCk7aWYoTWcoYikpe2c9YjtlPWcuc3RhdGVOb2RlO3ZhciBrPWcudHlwZSxtPWcubWVtb2l6ZWRQcm9wcyxxPWg7ZVtIYV09ZztlW0lhXT1tO2Y9dm9pZCAwO2g9aztzd2l0Y2goaCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpIKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihrPTA7azxjYi5sZW5ndGg7aysrKUgoY2Jba10sZSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkgoXCJlcnJvclwiLGUpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkgoXCJlcnJvclwiLGUpO0goXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpIKFwicmVzZXRcIixlKTtIKFwic3VibWl0XCIsZSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpIKFwidG9nZ2xlXCIsZSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWMoZSxtKTtIKFwiaW52YWxpZFwiLGUpO3dlKHEsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZS5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07SChcImludmFsaWRcIixlKTt3ZShxLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Z2UoZSxtKSxIKFwiaW52YWxpZFwiLGUpLHdlKHEsXCJvbkNoYW5nZVwiKX11ZShoLG0pO2s9bnVsbDtmb3IoZiBpbiBtKW0uaGFzT3duUHJvcGVydHkoZikmJihsPW1bZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/ZS50ZXh0Q29udGVudCE9PWwmJihrPVtcImNoaWxkcmVuXCIsbF0pOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmZS50ZXh0Q29udGVudCE9PVwiXCIrbCYmKGs9W1wiY2hpbGRyZW5cIixcIlwiK2xdKTp0YS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9bCYmd2UocSxmKSk7c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOlZiKGUpO0VjKGUsbSwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmIoZSk7aWUoZSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIG0ub25DbGljayYmXG4oZS5vbmNsaWNrPXhlKX1mPWs7Zy51cGRhdGVRdWV1ZT1mO2c9bnVsbCE9PWY/ITA6ITE7ZyYmc2goYil9ZWxzZXttPWI7ZT1mO3E9ZztrPTk9PT1oLm5vZGVUeXBlP2g6aC5vd25lckRvY3VtZW50O2w9PT1qZS5odG1sJiYobD1rZShlKSk7bD09PWplLmh0bWw/XCJzY3JpcHRcIj09PWU/KGU9ay5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsaz1lLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgcS5pcz9rPWsuY3JlYXRlRWxlbWVudChlLHtpczpxLmlzfSk6KGs9ay5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiZxLm11bHRpcGxlJiYoay5tdWx0aXBsZT0hMCkpOms9ay5jcmVhdGVFbGVtZW50TlMobCxlKTtlPWs7ZVtIYV09bTtlW0lhXT1nO3doKGUsYiwhMSwhMSk7cT1lO2s9ZjttPWc7dmFyIHg9aCxDPXZlKGssbSk7c3dpdGNoKGspe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SChcImxvYWRcIixcbnEpO2g9bTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8Y2IubGVuZ3RoO2grKylIKGNiW2hdLHEpO2g9bTticmVhaztjYXNlIFwic291cmNlXCI6SChcImVycm9yXCIscSk7aD1tO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkgoXCJlcnJvclwiLHEpO0goXCJsb2FkXCIscSk7aD1tO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SChcInJlc2V0XCIscSk7SChcInN1Ym1pdFwiLHEpO2g9bTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkgoXCJ0b2dnbGVcIixxKTtoPW07YnJlYWs7Y2FzZSBcImlucHV0XCI6QWMocSxtKTtoPXpjKHEsbSk7SChcImludmFsaWRcIixxKTt3ZSh4LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9ZGUocSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6cS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O2g9cCh7fSxtLHt2YWx1ZTp2b2lkIDB9KTtIKFwiaW52YWxpZFwiLHEpO3dlKHgsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpnZShxLFxubSk7aD1mZShxLG0pO0goXCJpbnZhbGlkXCIscSk7d2UoeCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1tfXVlKGssaCk7bD12b2lkIDA7dmFyIHc9ayxFPXEsdj1oO2ZvcihsIGluIHYpaWYodi5oYXNPd25Qcm9wZXJ0eShsKSl7dmFyIG49dltsXTtcInN0eWxlXCI9PT1sP3NlKEUsbik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8obj1uP24uX19odG1sOnZvaWQgMCxudWxsIT1uJiZuZShFLG4pKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCI9PT10eXBlb2Ygbj8oXCJ0ZXh0YXJlYVwiIT09d3x8XCJcIiE9PW4pJiZvZShFLG4pOlwibnVtYmVyXCI9PT10eXBlb2YgbiYmb2UoRSxcIlwiK24pOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJih0YS5oYXNPd25Qcm9wZXJ0eShsKT9udWxsIT1uJiZ3ZSh4LGwpOm51bGwhPW4mJnhjKEUsbCxuLEMpKX1zd2l0Y2goayl7Y2FzZSBcImlucHV0XCI6VmIocSk7XG5FYyhxLG0sITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKHEpO2llKHEsbSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPW0udmFsdWUmJnEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3ljKG0udmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6aD1xO2gubXVsdGlwbGU9ISFtLm11bHRpcGxlO3E9bS52YWx1ZTtudWxsIT1xP2VlKGgsISFtLm11bHRpcGxlLHEsITEpOm51bGwhPW0uZGVmYXVsdFZhbHVlJiZlZShoLCEhbS5tdWx0aXBsZSxtLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYocS5vbmNsaWNrPXhlKX0oZz1BZShmLGcpKSYmc2goYik7Yi5zdGF0ZU5vZGU9ZX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIG51bGw9PT1iLnN0YXRlTm9kZT90KFwiMTY2XCIpOnZvaWQgMDticmVhaztjYXNlIDY6ZSYmbnVsbCE9Yi5zdGF0ZU5vZGU/emgoZSxiLGUubWVtb2l6ZWRQcm9wcyxnKTooXCJzdHJpbmdcIiE9PVxudHlwZW9mIGcmJihudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2NlwiKTp2b2lkIDApLGU9T2YoTmYuY3VycmVudCksT2YoTGYuY3VycmVudCksTWcoYik/KGc9YixmPWcuc3RhdGVOb2RlLGU9Zy5tZW1vaXplZFByb3BzLGZbSGFdPWcsKGc9Zi5ub2RlVmFsdWUhPT1lKSYmc2goYikpOihmPWIsZz0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGcpLGdbSGFdPWIsZi5zdGF0ZU5vZGU9ZykpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpnPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1mO1Q9YjticmVhayBhfWc9bnVsbCE9PWc7Zj1udWxsIT09ZSYmbnVsbCE9PWUubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmIWcmJmYmJihlPWUuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGg9Yi5maXJzdEVmZmVjdCxudWxsIT09aD8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1oKTooYi5maXJzdEVmZmVjdD1cbmIubGFzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSk7aWYoZ3x8ZiliLmVmZmVjdFRhZ3w9NDticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0OlFmKGIpO3hoKGIpO2JyZWFrO2Nhc2UgMTA6Z2goYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7Y2FzZSAxNzpNKGIudHlwZSkmJlBlKGIpO2JyZWFrO2RlZmF1bHQ6dChcIjE1NlwiKX1UPW51bGx9Yj1hO2lmKDE9PT1VfHwxIT09Yi5jaGlsZEV4cGlyYXRpb25UaW1lKXtnPTA7Zm9yKGY9Yi5jaGlsZDtudWxsIT09ZjspZT1mLmV4cGlyYXRpb25UaW1lLGg9Zi5jaGlsZEV4cGlyYXRpb25UaW1lLGU+ZyYmKGc9ZSksaD5nJiYoZz1oKSxmPWYuc2libGluZztiLmNoaWxkRXhwaXJhdGlvblRpbWU9Z31pZihudWxsIT09VClyZXR1cm4gVDtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyYxMDI0KSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1cbmEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKX1lbHNle2E9UmgoYSxVKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTEwMjMsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTEwMjQpfWlmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfXJldHVybiBudWxsfVxuZnVuY3Rpb24gaGkoYSl7dmFyIGI9YWgoYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWdpKGEpKTtUaC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBpaShhLGIpe1doP3QoXCIyNDNcIik6dm9pZCAwO3NmKCk7V2g9ITA7dmFyIGM9U2guY3VycmVudDtTaC5jdXJyZW50PXJnO3ZhciBkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT247aWYoZCE9PVV8fGEhPT1YaHx8bnVsbD09PVQpZGkoKSxYaD1hLFU9ZCxUPWJmKFhoLmN1cnJlbnQsbnVsbCxVKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPSExO2Rve3RyeXtpZihiKWZvcig7bnVsbCE9PVQmJiFqaSgpOylUPWhpKFQpO2Vsc2UgZm9yKDtudWxsIT09VDspVD1oaShUKX1jYXRjaChFKXtpZihmaD1laD1kaD1udWxsLHNnKCksbnVsbD09PVQpZT0hMCxPaChFKTtlbHNle251bGw9PT1UP3QoXCIyNzFcIik6dm9pZCAwO3ZhciBmPVQsZz1mLnJldHVybjtpZihudWxsPT09ZyllPSEwLE9oKEUpO2Vsc2V7YTp7dmFyIGg9YSxsPWcsaz1mLG09RTtnPVU7ay5lZmZlY3RUYWd8PTEwMjQ7ay5maXJzdEVmZmVjdD1rLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09XG5tJiZcIm9iamVjdFwiPT09dHlwZW9mIG0mJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLnRoZW4pe3ZhciBxPW07bT1sO3ZhciB4PS0xLEM9LTE7ZG97aWYoMTM9PT1tLnRhZyl7dmFyIHc9bS5hbHRlcm5hdGU7aWYobnVsbCE9PXcmJih3PXcubWVtb2l6ZWRTdGF0ZSxudWxsIT09dykpe0M9MTAqKDEwNzM3NDE4MjItdy50aW1lZE91dEF0KTticmVha313PW0ucGVuZGluZ1Byb3BzLm1heER1cmF0aW9uO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgdylpZigwPj13KXg9MDtlbHNlIGlmKC0xPT09eHx8dzx4KXg9d31tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPWw7ZG97aWYodz0xMz09PW0udGFnKXc9dm9pZCAwPT09bS5tZW1vaXplZFByb3BzLmZhbGxiYWNrPyExOm51bGw9PT1tLm1lbW9pemVkU3RhdGU7aWYodyl7bD1tLnVwZGF0ZVF1ZXVlO251bGw9PT1sPyhsPW5ldyBTZXQsbC5hZGQocSksbS51cGRhdGVRdWV1ZT1sKTpsLmFkZChxKTtpZigwPT09KG0ubW9kZSYxKSl7bS5lZmZlY3RUYWd8PVxuNjQ7ay5lZmZlY3RUYWcmPS0xOTU3OzE9PT1rLnRhZyYmKG51bGw9PT1rLmFsdGVybmF0ZT9rLnRhZz0xNzooZz1yZigxMDczNzQxODIzKSxnLnRhZz13Zix0ZihrLGcpKSk7ay5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9az1oLnBpbmdDYWNoZTtudWxsPT09az8oaz1oLnBpbmdDYWNoZT1uZXcgTWgsbD1uZXcgU2V0LGsuc2V0KHEsbCkpOihsPWsuZ2V0KHEpLHZvaWQgMD09PWwmJihsPW5ldyBTZXQsay5zZXQocSxsKSkpO2wuaGFzKGcpfHwobC5hZGQoZyksaz1raS5iaW5kKG51bGwsaCxxLGcpLHEudGhlbihrLGspKTstMT09PXg/aD0xMDczNzQxODIzOigtMT09PUMmJihDPTEwKigxMDczNzQxODIyLWxmKGgsZykpLTVFMyksaD1DK3gpOzA8PWgmJlloPGgmJihZaD1oKTttLmVmZmVjdFRhZ3w9MjA0ODttLmV4cGlyYXRpb25UaW1lPWc7YnJlYWsgYX1tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPUVycm9yKChtYyhrLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1xuXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIituYyhrKSl9Wmg9ITA7bT1yaChtLGspO2g9bDtkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoLmVmZmVjdFRhZ3w9MjA0ODtoLmV4cGlyYXRpb25UaW1lPWc7Zz1OaChoLG0sZyk7bWgoaCxnKTticmVhayBhO2Nhc2UgMTppZihxPW0seD1oLnR5cGUsQz1oLnN0YXRlTm9kZSwwPT09KGguZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PUMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBDLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVFofHwhUWguaGFzKEMpKSkpe2guZWZmZWN0VGFnfD0yMDQ4O1xuaC5leHBpcmF0aW9uVGltZT1nO2c9UGgoaCxxLGcpO21oKGgsZyk7YnJlYWsgYX19aD1oLnJldHVybn13aGlsZShudWxsIT09aCl9VD1naShmKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO1doPSExO1NoLmN1cnJlbnQ9YztmaD1laD1kaD1udWxsO3NnKCk7aWYoZSlYaD1udWxsLGEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZSBpZihudWxsIT09VClhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7Yz1hLmN1cnJlbnQuYWx0ZXJuYXRlO251bGw9PT1jP3QoXCIyODFcIik6dm9pZCAwO1hoPW51bGw7aWYoWmgpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtmPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwIT09ZSYmZTxkfHwwIT09ZiYmZjxkfHwwIT09ZyYmZzxkKXtrZihhLGQpO2xpKGEsYyxkLGEuZXhwaXJhdGlvblRpbWUsLTEpO3JldHVybn1pZighYS5kaWRFcnJvciYmYil7YS5kaWRFcnJvcj0hMDtkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZDtcbmI9YS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2xpKGEsYyxkLGIsLTEpO3JldHVybn19YiYmLTEhPT1ZaD8oa2YoYSxkKSxiPTEwKigxMDczNzQxODIyLWxmKGEsZCkpLGI8WWgmJihZaD1iKSxiPTEwKigxMDczNzQxODIyLXBmKCkpLGI9WWgtYixsaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLDA+Yj8wOmIpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9ZCxhLmZpbmlzaGVkV29yaz1jKX19XG5mdW5jdGlvbiBEaChhLGIpe2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1RaHx8IVFoLmhhcyhkKSkpe2E9cmgoYixhKTthPVBoKGMsYSwxMDczNzQxODIzKTt0ZihjLGEpO3VmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWJyZWFrO2Nhc2UgMzphPXJoKGIsYSk7YT1OaChjLGEsMTA3Mzc0MTgyMyk7dGYoYyxhKTt1ZihjLDEwNzM3NDE4MjMpO3JldHVybn1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9cmgoYixhKSxjPU5oKGEsYywxMDczNzQxODIzKSx0ZihhLGMpLHVmKGEsMTA3Mzc0MTgyMykpfVxuZnVuY3Rpb24gcWYoYSxiKXswIT09Vmg/YT1WaDpXaD9hPSRoPzEwNzM3NDE4MjM6VTpiLm1vZGUmMT8oYT1taT8xMDczNzQxODIyLTEwKigoKDEwNzM3NDE4MjItYSsxNSkvMTB8MCkrMSk6MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWErNTAwKS8yNXwwKSsxKSxudWxsIT09WGgmJmE9PT1VJiYtLWEpOmE9MTA3Mzc0MTgyMzttaSYmKDA9PT1uaXx8YTxuaSkmJihuaT1hKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGtpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7aWYobnVsbCE9PVhoJiZVPT09YylYaD1udWxsO2Vsc2UgaWYoYj1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWEubGF0ZXN0U3VzcGVuZGVkVGltZSwwIT09YiYmYzw9YiYmYz49ZCl7YS5kaWRFcnJvcj0hMTtiPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwPT09Ynx8Yj5jKWEubGF0ZXN0UGluZ2VkVGltZT1jO2pmKGMsYSk7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZmaShhLGMpfX1mdW5jdGlvbiBMaChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPXBmKCk7Yj1xZihiLGEpO2E9b2koYSxiKTtudWxsIT09YSYmKGhmKGEsYiksYj1hLmV4cGlyYXRpb25UaW1lLDAhPT1iJiZmaShhLGIpKX1cbmZ1bmN0aW9uIG9pKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59cmV0dXJuIGV9XG5mdW5jdGlvbiB1ZihhLGIpe2E9b2koYSxiKTtudWxsIT09YSYmKCFXaCYmMCE9PVUmJmI+VSYmZGkoKSxoZihhLGIpLFdoJiYhJGgmJlhoPT09YXx8ZmkoYSxhLmV4cGlyYXRpb25UaW1lKSxwaT5xaSYmKHBpPTAsdChcIjE4NVwiKSkpfWZ1bmN0aW9uIHJpKGEsYixjLGQsZSl7dmFyIGY9Vmg7Vmg9MTA3Mzc0MTgyMzt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtWaD1mfX12YXIgc2k9bnVsbCxYPW51bGwsdGk9MCx1aT12b2lkIDAsVz0hMSx2aT1udWxsLFk9MCxuaT0wLHdpPSExLHhpPW51bGwsWj0hMSx5aT0hMSxtaT0hMSx6aT1udWxsLEFpPWJhLnVuc3RhYmxlX25vdygpLEJpPTEwNzM3NDE4MjItKEFpLzEwfDApLENpPUJpLHFpPTUwLHBpPTAsRGk9bnVsbDtmdW5jdGlvbiBFaSgpe0JpPTEwNzM3NDE4MjItKChiYS51bnN0YWJsZV9ub3coKS1BaSkvMTB8MCl9XG5mdW5jdGlvbiBGaShhLGIpe2lmKDAhPT10aSl7aWYoYjx0aSlyZXR1cm47bnVsbCE9PXVpJiZiYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayh1aSl9dGk9YjthPWJhLnVuc3RhYmxlX25vdygpLUFpO3VpPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soR2kse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjItYiktYX0pfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7YS5leHBpcmF0aW9uVGltZT1kOzAhPT1lfHxqaSgpPzA8ZSYmKGEudGltZW91dEhhbmRsZT1DZShIaS5iaW5kKG51bGwsYSxiLGMpLGUpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmZpbmlzaGVkV29yaz1iKX1mdW5jdGlvbiBIaShhLGIsYyl7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YzthLmZpbmlzaGVkV29yaz1iO0VpKCk7Q2k9Qmk7SWkoYSxjKX1mdW5jdGlvbiBwZigpe2lmKFcpcmV0dXJuIENpO0ppKCk7aWYoMD09PVl8fDE9PT1ZKUVpKCksQ2k9Qmk7cmV0dXJuIENpfVxuZnVuY3Rpb24gZmkoYSxiKXtudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdD8oYS5leHBpcmF0aW9uVGltZT1iLG51bGw9PT1YPyhzaT1YPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooWD1YLm5leHRTY2hlZHVsZWRSb290PWEsWC5uZXh0U2NoZWR1bGVkUm9vdD1zaSkpOmI+YS5leHBpcmF0aW9uVGltZSYmKGEuZXhwaXJhdGlvblRpbWU9Yik7V3x8KFo/eWkmJih2aT1hLFk9MTA3Mzc0MTgyMyxLaShhLDEwNzM3NDE4MjMsITEpKToxMDczNzQxODIzPT09Yj9MaSgxMDczNzQxODIzLCExKTpGaShhLGIpKX1cbmZ1bmN0aW9uIEppKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVgpZm9yKHZhciBjPVgsZD1zaTtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09WD90KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7c2k9WD1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09c2kpc2k9ZT1kLm5leHRTY2hlZHVsZWRSb290LFgubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09WCl7WD1jO1gubmV4dFNjaGVkdWxlZFJvb3Q9c2k7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtlPmEmJihhPWUsYj1kKTtpZihkPT09WClicmVhaztpZigxMDczNzQxODIzPT09XG5hKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fXZpPWI7WT1hfXZhciBNaT0hMTtmdW5jdGlvbiBqaSgpe3JldHVybiBNaT8hMDpiYS51bnN0YWJsZV9zaG91bGRZaWVsZCgpP01pPSEwOiExfWZ1bmN0aW9uIEdpKCl7dHJ5e2lmKCFqaSgpJiZudWxsIT09c2kpe0VpKCk7dmFyIGE9c2k7ZG97dmFyIGI9YS5leHBpcmF0aW9uVGltZTswIT09YiYmQmk8PWImJihhLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPUJpKTthPWEubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYSE9PXNpKX1MaSgwLCEwKX1maW5hbGx5e01pPSExfX1cbmZ1bmN0aW9uIExpKGEsYil7SmkoKTtpZihiKWZvcihFaSgpLENpPUJpO251bGwhPT12aSYmMCE9PVkmJmE8PVkmJiEoTWkmJkJpPlkpOylLaSh2aSxZLEJpPlkpLEppKCksRWkoKSxDaT1CaTtlbHNlIGZvcig7bnVsbCE9PXZpJiYwIT09WSYmYTw9WTspS2kodmksWSwhMSksSmkoKTtiJiYodGk9MCx1aT1udWxsKTswIT09WSYmRmkodmksWSk7cGk9MDtEaT1udWxsO2lmKG51bGwhPT16aSlmb3IoYT16aSx6aT1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe3dpfHwod2k9ITAseGk9ZCl9fWlmKHdpKXRocm93IGE9eGkseGk9bnVsbCx3aT0hMSxhO31mdW5jdGlvbiBJaShhLGIpe1c/dChcIjI1M1wiKTp2b2lkIDA7dmk9YTtZPWI7S2koYSxiLCExKTtMaSgxMDczNzQxODIzLCExKX1cbmZ1bmN0aW9uIEtpKGEsYixjKXtXP3QoXCIyNDVcIik6dm9pZCAwO1c9ITA7aWYoYyl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/T2koYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSxEZShkKSksaWkoYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYoamkoKT9hLmZpbmlzaGVkV29yaz1kOk9pKGEsZCxiKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9PaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLERlKGQpKSxpaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJk9pKGEsZCxiKSk7Vz0hMX1cbmZ1bmN0aW9uIE9pKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1jJiYobnVsbD09PXppP3ppPVtkXTp6aS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLmV4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7YT09PURpP3BpKys6KERpPWEscGk9MCk7JGg9V2g9ITA7YS5jdXJyZW50PT09Yj90KFwiMTc3XCIpOnZvaWQgMDtjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3QoXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7ZD1iLmV4cGlyYXRpb25UaW1lO3ZhciBlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtkPWU+ZD9lOmQ7YS5kaWRFcnJvcj0hMTswPT09ZD8oYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPVxuMCk6KGQ8YS5sYXRlc3RQaW5nZWRUaW1lJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApLGU9YS5sYXRlc3RQZW5kaW5nVGltZSwwIT09ZSYmKGU+ZD9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZT5kJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKSxlPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLDA9PT1lP2hmKGEsZCk6ZDxhLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsaGYoYSxkKSk6ZD5lJiZoZihhLGQpKTtqZigwLGEpO1RoLmN1cnJlbnQ9bnVsbDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3llPUhkO2U9VGQoKTtpZihVZChlKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW5cbmUpdmFyIGY9e3N0YXJ0OmUuc2VsZWN0aW9uU3RhcnQsZW5kOmUuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2Y9KGY9ZS5vd25lckRvY3VtZW50KSYmZi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBnPWYuZ2V0U2VsZWN0aW9uJiZmLmdldFNlbGVjdGlvbigpO2lmKGcmJjAhPT1nLnJhbmdlQ291bnQpe2Y9Zy5hbmNob3JOb2RlO3ZhciBoPWcuYW5jaG9yT2Zmc2V0LGw9Zy5mb2N1c05vZGU7Zz1nLmZvY3VzT2Zmc2V0O3RyeXtmLm5vZGVUeXBlLGwubm9kZVR5cGV9Y2F0Y2godmIpe2Y9bnVsbDticmVhayBhfXZhciBrPTAsbT0tMSxxPS0xLHg9MCxDPTAsdz1lLEU9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB2Ozspe3chPT1mfHwwIT09aCYmMyE9PXcubm9kZVR5cGV8fChtPWsraCk7dyE9PWx8fDAhPT1nJiYzIT09dy5ub2RlVHlwZXx8KHE9aytnKTszPT09dy5ub2RlVHlwZSYmKGsrPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh2PXcuZmlyc3RDaGlsZCkpYnJlYWs7RT13O3c9dn1mb3IoOzspe2lmKHc9PT1cbmUpYnJlYWsgYjtFPT09ZiYmKyt4PT09aCYmKG09ayk7RT09PWwmJisrQz09PWcmJihxPWspO2lmKG51bGwhPT0odj13Lm5leHRTaWJsaW5nKSlicmVhazt3PUU7RT13LnBhcmVudE5vZGV9dz12fWY9LTE9PT1tfHwtMT09PXE/bnVsbDp7c3RhcnQ6bSxlbmQ6cX19ZWxzZSBmPW51bGx9Zj1mfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBmPW51bGw7emU9e2ZvY3VzZWRFbGVtOmUsc2VsZWN0aW9uUmFuZ2U6Zn07SGQ9ITE7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7Zj12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVY7KXtpZihWLmVmZmVjdFRhZyYyNTYpYTp7dmFyIG49Vi5hbHRlcm5hdGU7aD1WO3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpFaChVZixUZixoKTticmVhayBhO2Nhc2UgMTppZihoLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1uKXt2YXIgdT1uLm1lbW9pemVkUHJvcHMsej1uLm1lbW9pemVkU3RhdGUsQWc9aC5zdGF0ZU5vZGUsTmk9QWcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoaC5lbGVtZW50VHlwZT09PVxuaC50eXBlP3U6UChoLnR5cGUsdSkseik7QWcuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Tml9YnJlYWsgYTtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhayBhO2RlZmF1bHQ6dChcIjE2M1wiKX19Vj1WLm5leHRFZmZlY3R9fWNhdGNoKHZiKXtlPSEwLGY9dmJ9ZSYmKG51bGw9PT1WP3QoXCIxNzhcIik6dm9pZCAwLERoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWZvcihWPWQ7bnVsbCE9PVY7KXtuPSExO3U9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1WOyl7dmFyIHk9Vi5lZmZlY3RUYWc7eSYxNiYmb2UoVi5zdGF0ZU5vZGUsXCJcIik7aWYoeSYxMjgpe3ZhciBCPVYuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgcj1CLnJlZjtudWxsIT09ciYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiByP3IobnVsbCk6ci5jdXJyZW50PW51bGwpfX1zd2l0Y2goeSYxNCl7Y2FzZSAyOkpoKFYpO1YuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6SmgoVik7XG5WLmVmZmVjdFRhZyY9LTM7S2goVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA0OktoKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgODp6PVY7SGgoeik7ei5yZXR1cm49bnVsbDt6LmNoaWxkPW51bGw7ei5tZW1vaXplZFN0YXRlPW51bGw7ei51cGRhdGVRdWV1ZT1udWxsO3ZhciBPPXouYWx0ZXJuYXRlO251bGwhPT1PJiYoTy5yZXR1cm49bnVsbCxPLmNoaWxkPW51bGwsTy5tZW1vaXplZFN0YXRlPW51bGwsTy51cGRhdGVRdWV1ZT1udWxsKX1WPVYubmV4dEVmZmVjdH19Y2F0Y2godmIpe249ITAsdT12Yn1uJiYobnVsbD09PVY/dChcIjE3OFwiKTp2b2lkIDAsRGgoVix1KSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9cj16ZTtCPVRkKCk7eT1yLmZvY3VzZWRFbGVtO249ci5zZWxlY3Rpb25SYW5nZTtpZihCIT09eSYmeSYmeS5vd25lckRvY3VtZW50JiZTZCh5Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHkpKXtudWxsIT09biYmVWQoeSkmJihCPW4uc3RhcnQscj1uLmVuZCxcbnZvaWQgMD09PXImJihyPUIpLFwic2VsZWN0aW9uU3RhcnRcImluIHk/KHkuc2VsZWN0aW9uU3RhcnQ9Qix5LnNlbGVjdGlvbkVuZD1NYXRoLm1pbihyLHkudmFsdWUubGVuZ3RoKSk6KHI9KEI9eS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyxyLmdldFNlbGVjdGlvbiYmKHI9ci5nZXRTZWxlY3Rpb24oKSx1PXkudGV4dENvbnRlbnQubGVuZ3RoLE89TWF0aC5taW4obi5zdGFydCx1KSxuPXZvaWQgMD09PW4uZW5kP086TWF0aC5taW4obi5lbmQsdSksIXIuZXh0ZW5kJiZPPm4mJih1PW4sbj1PLE89dSksdT1SZCh5LE8pLHo9UmQoeSxuKSx1JiZ6JiYoMSE9PXIucmFuZ2VDb3VudHx8ci5hbmNob3JOb2RlIT09dS5ub2RlfHxyLmFuY2hvck9mZnNldCE9PXUub2Zmc2V0fHxyLmZvY3VzTm9kZSE9PXoubm9kZXx8ci5mb2N1c09mZnNldCE9PXoub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQodS5ub2RlLHUub2Zmc2V0KSxyLnJlbW92ZUFsbFJhbmdlcygpLFxuTz5uPyhyLmFkZFJhbmdlKEIpLHIuZXh0ZW5kKHoubm9kZSx6Lm9mZnNldCkpOihCLnNldEVuZCh6Lm5vZGUsei5vZmZzZXQpLHIuYWRkUmFuZ2UoQikpKSkpKTtCPVtdO2ZvcihyPXk7cj1yLnBhcmVudE5vZGU7KTE9PT1yLm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6cixsZWZ0OnIuc2Nyb2xsTGVmdCx0b3A6ci5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgeS5mb2N1cyYmeS5mb2N1cygpO2Zvcih5PTA7eTxCLmxlbmd0aDt5Kyspcj1CW3ldLHIuZWxlbWVudC5zY3JvbGxMZWZ0PXIubGVmdCxyLmVsZW1lbnQuc2Nyb2xsVG9wPXIudG9wfXplPW51bGw7SGQ9ISF5ZTt5ZT1udWxsO2EuY3VycmVudD1iO2ZvcihWPWQ7bnVsbCE9PVY7KXt5PSExO0I9dm9pZCAwO3RyeXtmb3Iocj1hLE89YztudWxsIT09Vjspe3ZhciBxYT1WLmVmZmVjdFRhZztpZihxYSYzNil7dmFyIFJiPVYuYWx0ZXJuYXRlO249Vjt1PU87c3dpdGNoKG4udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OkVoKFhmLFxuWWYsbik7YnJlYWs7Y2FzZSAxOnZhciBpZD1uLnN0YXRlTm9kZTtpZihuLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1SYilpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGRqPW4uZWxlbWVudFR5cGU9PT1uLnR5cGU/UmIubWVtb2l6ZWRQcm9wczpQKG4udHlwZSxSYi5tZW1vaXplZFByb3BzKTtpZC5jb21wb25lbnREaWRVcGRhdGUoZGosUmIubWVtb2l6ZWRTdGF0ZSxpZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIHRoPW4udXBkYXRlUXVldWU7bnVsbCE9PXRoJiZwaChuLHRoLGlkLHUpO2JyZWFrO2Nhc2UgMzp2YXIgdWg9bi51cGRhdGVRdWV1ZTtpZihudWxsIT09dWgpe3o9bnVsbDtpZihudWxsIT09bi5jaGlsZClzd2l0Y2gobi5jaGlsZC50YWcpe2Nhc2UgNTp6PW4uY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTp6PW4uY2hpbGQuc3RhdGVOb2RlfXBoKG4sdWgseix1KX1icmVhaztjYXNlIDU6dmFyIGVqPW4uc3RhdGVOb2RlO251bGw9PT1cblJiJiZuLmVmZmVjdFRhZyY0JiZBZShuLnR5cGUsbi5tZW1vaXplZFByb3BzKSYmZWouZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpicmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dChcIjE2M1wiKX19aWYocWEmMTI4KXt2YXIgamQ9Vi5yZWY7aWYobnVsbCE9PWpkKXt2YXIgdmg9Vi5zdGF0ZU5vZGU7c3dpdGNoKFYudGFnKXtjYXNlIDU6dmFyIE5lPXZoO2JyZWFrO2RlZmF1bHQ6TmU9dmh9XCJmdW5jdGlvblwiPT09dHlwZW9mIGpkP2pkKE5lKTpqZC5jdXJyZW50PU5lfX1xYSY1MTImJihhaT1yKTtWPVYubmV4dEVmZmVjdH19Y2F0Y2godmIpe3k9ITAsQj12Yn15JiYobnVsbD09PVY/dChcIjE3OFwiKTp2b2lkIDAsRGgoVixCKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9bnVsbCE9PWQmJm51bGwhPT1haSYmKHFhPWVpLmJpbmQobnVsbCxhLGQpLGJpPUVlKHFhKSxjaT1xYSk7V2g9JGg9ITE7XCJmdW5jdGlvblwiPT09XG50eXBlb2YgVmUmJlZlKGIuc3RhdGVOb2RlKTtxYT1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9Yj5xYT9iOnFhOzA9PT1iJiYoUWg9bnVsbCk7YS5leHBpcmF0aW9uVGltZT1iO2EuZmluaXNoZWRXb3JrPW51bGx9ZnVuY3Rpb24gT2goYSl7bnVsbD09PXZpP3QoXCIyNDZcIik6dm9pZCAwO3ZpLmV4cGlyYXRpb25UaW1lPTA7d2l8fCh3aT0hMCx4aT1hKX1mdW5jdGlvbiBQaShhLGIpe3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoWj1jKXx8V3x8TGkoMTA3Mzc0MTgyMywhMSl9fWZ1bmN0aW9uIFFpKGEsYil7aWYoWiYmIXlpKXt5aT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXt5aT0hMX19cmV0dXJuIGEoYil9XG5mdW5jdGlvbiBSaShhLGIsYyl7aWYobWkpcmV0dXJuIGEoYixjKTtafHxXfHwwPT09bml8fChMaShuaSwhMSksbmk9MCk7dmFyIGQ9bWksZT1aO1o9bWk9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXttaT1kLChaPWUpfHxXfHxMaSgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBTaShhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6ezI9PT1rZChjKSYmMT09PWMudGFnP3ZvaWQgMDp0KFwiMTcwXCIpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKE0oZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt0KFwiMTcxXCIpO2c9dm9pZCAwfWlmKDE9PT1jLnRhZyl7dmFyIGg9Yy50eXBlO2lmKE0oaCkpe2M9U2UoYyxoLGcpO2JyZWFrIGF9fWM9Z31lbHNlIGM9TGU7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9cmYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO1xuc2YoKTt0ZihmLGUpO3VmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gVGkoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9cGYoKTtlPXFmKGYsZSk7cmV0dXJuIFNpKGEsYixjLGUsZCl9ZnVuY3Rpb24gVWkoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBWaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRiLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuRGI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9TWEoZCk7ZT92b2lkIDA6dChcIjkwXCIpO1diKGQpO0NjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpoZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZWUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIFdpKGEpe3ZhciBiPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1wZigpKzUwMCkvMjV8MCkrMSk7Yj49VWgmJihiPVVoLTEpO3RoaXMuX2V4cGlyYXRpb25UaW1lPVVoPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1XaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDp0KFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgWGk7U2koYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuV2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuV2kucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOnQoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/dChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtJaShhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtXaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gWGkoKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1YaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuWGkucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBZaShhLGIsYyl7Yj1OKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBpbmdDYWNoZTpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAsZGlkRXJyb3I6ITEscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsdGltZW91dEhhbmRsZTotMSxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMsbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246MCxleHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTt0aGlzLl9pbnRlcm5hbFJvb3Q9Yi5zdGF0ZU5vZGU9YX1cbllpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgWGk7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1RpKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07WWkucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IFhpO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtUaShudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O1lpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBYaTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7VGkoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcbllpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBXaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIFppKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1KYj1QaTtLYj1SaTtMYj1mdW5jdGlvbigpe1d8fDA9PT1uaXx8KExpKG5pLCExKSxuaT0wKX07XG5mdW5jdGlvbiAkaShhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IFlpKGEsITEsYil9XG5mdW5jdGlvbiBhaihhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9VWkoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj0kaShjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1VaShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19UWkoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFVpKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBiaihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO1ppKGIpP3ZvaWQgMDp0KFwiMjAwXCIpO3JldHVybiBWaShhLGIsbnVsbCxjKX1cbnZhciBmaj17Y3JlYXRlUG9ydGFsOmJqLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/dChcIjE4OFwiKTp0KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPW5kKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7WmkoYik/dm9pZCAwOnQoXCIyMDBcIik7cmV0dXJuIGFqKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe1ppKGIpP3ZvaWQgMDp0KFwiMjAwXCIpO3JldHVybiBhaihudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7WmkoYyk/dm9pZCAwOnQoXCIyMDBcIik7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP1xudChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gYWooYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7WmkoYSk/dm9pZCAwOnQoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhRaShmdW5jdGlvbigpe2FqKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIGJqLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpQaSx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6UmksZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7Vz90KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiByaShhLGIpfWZpbmFsbHl7Wj1jLExpKDEwNzM3NDE4MjMsITEpfX0sdW5zdGFibGVfY3JlYXRlUm9vdDpjaix1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5aO1o9ITA7dHJ5e3JpKGEpfWZpbmFsbHl7KFo9Yil8fFd8fExpKDEwNzM3NDE4MjMsITEpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbS2EsTGEsTWEsRGEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLHJhLFNhLGZ1bmN0aW9uKGEpe0FhKGEsUmEpfSxIYixJYixKZCxGYV19fTtmdW5jdGlvbiBjaihhLGIpe1ppKGEpP3ZvaWQgMDp0KFwiMjk5XCIsXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgWWkoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gWWUocCh7fSxhLHtvdmVycmlkZVByb3BzOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6WGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPW5kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOkphLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuOC4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIGdqPXtkZWZhdWx0OmZqfSxoaj1naiYmZmp8fGdqO21vZHVsZS5leHBvcnRzPWhqLmRlZmF1bHR8fGhqO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xMy4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGM9bnVsbCxmPSExLGg9MyxrPS0xLGw9LTEsbT0hMSxuPSExO2Z1bmN0aW9uIHAoKXtpZighbSl7dmFyIGE9Yy5leHBpcmF0aW9uVGltZTtuP3EoKTpuPSEwO3IodCxhKX19XG5mdW5jdGlvbiB1KCl7dmFyIGE9YyxiPWMubmV4dDtpZihjPT09YiljPW51bGw7ZWxzZXt2YXIgZD1jLnByZXZpb3VzO2M9ZC5uZXh0PWI7Yi5wcmV2aW91cz1kfWEubmV4dD1hLnByZXZpb3VzPW51bGw7ZD1hLmNhbGxiYWNrO2I9YS5leHBpcmF0aW9uVGltZTthPWEucHJpb3JpdHlMZXZlbDt2YXIgZT1oLFE9bDtoPWE7bD1iO3RyeXt2YXIgZz1kKCl9ZmluYWxseXtoPWUsbD1RfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKWlmKGc9e2NhbGxiYWNrOmcscHJpb3JpdHlMZXZlbDphLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9LG51bGw9PT1jKWM9Zy5uZXh0PWcucHJldmlvdXM9ZztlbHNle2Q9bnVsbDthPWM7ZG97aWYoYS5leHBpcmF0aW9uVGltZT49Yil7ZD1hO2JyZWFrfWE9YS5uZXh0fXdoaWxlKGEhPT1jKTtudWxsPT09ZD9kPWM6ZD09PWMmJihjPWcscCgpKTtiPWQucHJldmlvdXM7Yi5uZXh0PWQucHJldmlvdXM9ZztnLm5leHQ9ZDtnLnByZXZpb3VzPVxuYn19ZnVuY3Rpb24gdigpe2lmKC0xPT09ayYmbnVsbCE9PWMmJjE9PT1jLnByaW9yaXR5TGV2ZWwpe209ITA7dHJ5e2RvIHUoKTt3aGlsZShudWxsIT09YyYmMT09PWMucHJpb3JpdHlMZXZlbCl9ZmluYWxseXttPSExLG51bGwhPT1jP3AoKTpuPSExfX19ZnVuY3Rpb24gdChhKXttPSEwO3ZhciBiPWY7Zj1hO3RyeXtpZihhKWZvcig7bnVsbCE9PWM7KXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKGMuZXhwaXJhdGlvblRpbWU8PWQpe2RvIHUoKTt3aGlsZShudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTw9ZCl9ZWxzZSBicmVha31lbHNlIGlmKG51bGwhPT1jKXtkbyB1KCk7d2hpbGUobnVsbCE9PWMmJiF3KCkpfX1maW5hbGx5e209ITEsZj1iLG51bGwhPT1jP3AoKTpuPSExLHYoKX19XG52YXIgeD1EYXRlLHk9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLEMsRDtmdW5jdGlvbiBFKGEpe0M9QShmdW5jdGlvbihiKXt6KEQpO2EoYil9KTtEPXkoZnVuY3Rpb24oKXtCKEMpO2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LDEwMCl9XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgRj1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBGLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCl9O3ZhciByLHEsdyxHPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3c/Rz13aW5kb3c6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBnbG9iYWwmJihHPWdsb2JhbCk7XG5pZihHJiZHLl9zY2hlZE1vY2spe3ZhciBIPUcuX3NjaGVkTW9jaztyPUhbMF07cT1IWzFdO3c9SFsyXTtleHBvcnRzLnVuc3RhYmxlX25vdz1IWzNdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIEk9bnVsbCxKPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1JKXRyeXtJKGEpfWZpbmFsbHl7ST1udWxsfX07cj1mdW5jdGlvbihhKXtudWxsIT09ST9zZXRUaW1lb3V0KHIsMCxhKTooST1hLHNldFRpbWVvdXQoSiwwLCExKSl9O3E9ZnVuY3Rpb24oKXtJPW51bGx9O3c9ZnVuY3Rpb24oKXtyZXR1cm4hMX19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBLPW51bGwsTD0hMSxNPS0xLE49ITEsTz0hMSxQPTAsUj0zMyxTPTMzO3c9ZnVuY3Rpb24oKXtyZXR1cm4gUDw9ZXhwb3J0cy51bnN0YWJsZV9ub3coKX07dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe0w9ITE7dmFyIGE9SyxiPU07Sz1udWxsO009LTE7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxlPSExO2lmKDA+PVAtZClpZigtMSE9PWImJmI8PWQpZT0hMDtlbHNle058fChOPSEwLEUoVikpO0s9YTtNPWI7cmV0dXJufWlmKG51bGwhPT1hKXtPPSEwO3RyeXthKGUpfWZpbmFsbHl7Tz0hMX19fTtcbnZhciBWPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1LKXtFKFYpO3ZhciBiPWEtUCtTO2I8UyYmUjxTPyg4PmImJihiPTgpLFM9YjxSP1I6Yik6Uj1iO1A9YStTO0x8fChMPSEwLFUucG9zdE1lc3NhZ2Uodm9pZCAwKSl9ZWxzZSBOPSExfTtyPWZ1bmN0aW9uKGEsYil7Sz1hO009YjtPfHwwPmI/VS5wb3N0TWVzc2FnZSh2b2lkIDApOk58fChOPSEwLEUoVikpfTtxPWZ1bmN0aW9uKCl7Sz1udWxsO0w9ITE7TT0tMX19ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBkPWgsZT1rO2g9YTtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtoPWQsaz1lLHYoKX19O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7dmFyIGQ9LTEhPT1rP2s6ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCliPWQrYi50aW1lb3V0O2Vsc2Ugc3dpdGNoKGgpe2Nhc2UgMTpiPWQrLTE7YnJlYWs7Y2FzZSAyOmI9ZCsyNTA7YnJlYWs7Y2FzZSA1OmI9ZCsxMDczNzQxODIzO2JyZWFrO2Nhc2UgNDpiPWQrMUU0O2JyZWFrO2RlZmF1bHQ6Yj1kKzVFM31hPXtjYWxsYmFjazphLHByaW9yaXR5TGV2ZWw6aCxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfTtpZihudWxsPT09YyljPWEubmV4dD1hLnByZXZpb3VzPWEscCgpO2Vsc2V7ZD1udWxsO3ZhciBlPWM7ZG97aWYoZS5leHBpcmF0aW9uVGltZT5iKXtkPWU7YnJlYWt9ZT1lLm5leHR9d2hpbGUoZSE9PWMpO251bGw9PT1kP2Q9YzpkPT09YyYmKGM9YSxwKCkpO1xuYj1kLnByZXZpb3VzO2IubmV4dD1kLnByZXZpb3VzPWE7YS5uZXh0PWQ7YS5wcmV2aW91cz1ifXJldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYj09PWEpYz1udWxsO2Vsc2V7YT09PWMmJihjPWIpO3ZhciBkPWEucHJldmlvdXM7ZC5uZXh0PWI7Yi5wcmV2aW91cz1kfWEubmV4dD1hLnByZXZpb3VzPW51bGx9fTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1oO3JldHVybiBmdW5jdGlvbigpe3ZhciBkPWgsZT1rO2g9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e2g9ZCxrPWUsdigpfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gaH07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIWYmJihudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxsfHx3KCkpfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7bnVsbCE9PWMmJnAoKX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBjfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGU6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICByZW5kZXI6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZVxufTtcblxudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIGNvbXBhcmU6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbUmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gICAgaWYgKFJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICAgICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgICB9XG4gICAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICAgICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHI6Y2FzZSBxOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHQoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO1xuZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT1yO2V4cG9ydHMuTWVtbz1xO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx0KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWt9O1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cn07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1xfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcbmV4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXB9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Jvb3RzdHJhcC5taW4uY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ib290c3RyYXAubWluLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ib290c3RyYXAubWluLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiFcXG4gKiBCb290c3RyYXAgdjQuMy4xIChodHRwczovL2dldGJvb3RzdHJhcC5jb20vKVxcbiAqIENvcHlyaWdodCAyMDExLTIwMTkgVGhlIEJvb3RzdHJhcCBBdXRob3JzXFxuICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUd2l0dGVyLCBJbmMuXFxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcXG4gKi86cm9vdHstLWJsdWU6IzAwN2JmZjstLWluZGlnbzojNjYxMGYyOy0tcHVycGxlOiM2ZjQyYzE7LS1waW5rOiNlODNlOGM7LS1yZWQ6I2RjMzU0NTstLW9yYW5nZTojZmQ3ZTE0Oy0teWVsbG93OiNmZmMxMDc7LS1ncmVlbjojMjhhNzQ1Oy0tdGVhbDojMjBjOTk3Oy0tY3lhbjojMTdhMmI4Oy0td2hpdGU6I2ZmZjstLWdyYXk6IzZjNzU3ZDstLWdyYXktZGFyazojMzQzYTQwOy0tcHJpbWFyeTojMDA3YmZmOy0tc2Vjb25kYXJ5OiM2Yzc1N2Q7LS1zdWNjZXNzOiMyOGE3NDU7LS1pbmZvOiMxN2EyYjg7LS13YXJuaW5nOiNmZmMxMDc7LS1kYW5nZXI6I2RjMzU0NTstLWxpZ2h0OiNmOGY5ZmE7LS1kYXJrOiMzNDNhNDA7LS1icmVha3BvaW50LXhzOjA7LS1icmVha3BvaW50LXNtOjU3NnB4Oy0tYnJlYWtwb2ludC1tZDo3NjhweDstLWJyZWFrcG9pbnQtbGc6OTkycHg7LS1icmVha3BvaW50LXhsOjEyMDBweDstLWZvbnQtZmFtaWx5LXNhbnMtc2VyaWY6LWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsXFxcIlNlZ29lIFVJXFxcIixSb2JvdG8sXFxcIkhlbHZldGljYSBOZXVlXFxcIixBcmlhbCxcXFwiTm90byBTYW5zXFxcIixzYW5zLXNlcmlmLFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsXFxcIlNlZ29lIFVJIEVtb2ppXFxcIixcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIixcXFwiTm90byBDb2xvciBFbW9qaVxcXCI7LS1mb250LWZhbWlseS1tb25vc3BhY2U6U0ZNb25vLVJlZ3VsYXIsTWVubG8sTW9uYWNvLENvbnNvbGFzLFxcXCJMaWJlcmF0aW9uIE1vbm9cXFwiLFxcXCJDb3VyaWVyIE5ld1xcXCIsbW9ub3NwYWNlfSosOjphZnRlciw6OmJlZm9yZXtib3gtc2l6aW5nOmJvcmRlci1ib3h9aHRtbHtmb250LWZhbWlseTpzYW5zLXNlcmlmO2xpbmUtaGVpZ2h0OjEuMTU7LXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OjEwMCU7LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnRyYW5zcGFyZW50fWFydGljbGUsYXNpZGUsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGhlYWRlcixoZ3JvdXAsbWFpbixuYXYsc2VjdGlvbntkaXNwbGF5OmJsb2NrfWJvZHl7bWFyZ2luOjA7Zm9udC1mYW1pbHk6LWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsXFxcIlNlZ29lIFVJXFxcIixSb2JvdG8sXFxcIkhlbHZldGljYSBOZXVlXFxcIixBcmlhbCxcXFwiTm90byBTYW5zXFxcIixzYW5zLXNlcmlmLFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsXFxcIlNlZ29lIFVJIEVtb2ppXFxcIixcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIixcXFwiTm90byBDb2xvciBFbW9qaVxcXCI7Zm9udC1zaXplOjFyZW07Zm9udC13ZWlnaHQ6NDAwO2xpbmUtaGVpZ2h0OjEuNTtjb2xvcjojMjEyNTI5O3RleHQtYWxpZ246bGVmdDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9W3RhYmluZGV4PVxcXCItMVxcXCJdOmZvY3Vze291dGxpbmU6MCFpbXBvcnRhbnR9aHJ7Ym94LXNpemluZzpjb250ZW50LWJveDtoZWlnaHQ6MDtvdmVyZmxvdzp2aXNpYmxlfWgxLGgyLGgzLGg0LGg1LGg2e21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOi41cmVtfXB7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MXJlbX1hYmJyW2RhdGEtb3JpZ2luYWwtdGl0bGVdLGFiYnJbdGl0bGVde3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7LXdlYmtpdC10ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIGRvdHRlZDt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lIGRvdHRlZDtjdXJzb3I6aGVscDtib3JkZXItYm90dG9tOjA7LXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc2tpcC1pbms6bm9uZTt0ZXh0LWRlY29yYXRpb24tc2tpcC1pbms6bm9uZX1hZGRyZXNze21hcmdpbi1ib3R0b206MXJlbTtmb250LXN0eWxlOm5vcm1hbDtsaW5lLWhlaWdodDppbmhlcml0fWRsLG9sLHVse21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjFyZW19b2wgb2wsb2wgdWwsdWwgb2wsdWwgdWx7bWFyZ2luLWJvdHRvbTowfWR0e2ZvbnQtd2VpZ2h0OjcwMH1kZHttYXJnaW4tYm90dG9tOi41cmVtO21hcmdpbi1sZWZ0OjB9YmxvY2txdW90ZXttYXJnaW46MCAwIDFyZW19YixzdHJvbmd7Zm9udC13ZWlnaHQ6Ym9sZGVyfXNtYWxse2ZvbnQtc2l6ZTo4MCV9c3ViLHN1cHtwb3NpdGlvbjpyZWxhdGl2ZTtmb250LXNpemU6NzUlO2xpbmUtaGVpZ2h0OjA7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9c3Vie2JvdHRvbTotLjI1ZW19c3Vwe3RvcDotLjVlbX1he2NvbG9yOiMwMDdiZmY7dGV4dC1kZWNvcmF0aW9uOm5vbmU7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH1hOmhvdmVye2NvbG9yOiMwMDU2YjM7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZX1hOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKXtjb2xvcjppbmhlcml0O3RleHQtZGVjb3JhdGlvbjpub25lfWE6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pOmZvY3VzLGE6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pOmhvdmVye2NvbG9yOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOm5vbmV9YTpub3QoW2hyZWZdKTpub3QoW3RhYmluZGV4XSk6Zm9jdXN7b3V0bGluZTowfWNvZGUsa2JkLHByZSxzYW1we2ZvbnQtZmFtaWx5OlNGTW9uby1SZWd1bGFyLE1lbmxvLE1vbmFjbyxDb25zb2xhcyxcXFwiTGliZXJhdGlvbiBNb25vXFxcIixcXFwiQ291cmllciBOZXdcXFwiLG1vbm9zcGFjZTtmb250LXNpemU6MWVtfXByZXttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbToxcmVtO292ZXJmbG93OmF1dG99ZmlndXJle21hcmdpbjowIDAgMXJlbX1pbWd7dmVydGljYWwtYWxpZ246bWlkZGxlO2JvcmRlci1zdHlsZTpub25lfXN2Z3tvdmVyZmxvdzpoaWRkZW47dmVydGljYWwtYWxpZ246bWlkZGxlfXRhYmxle2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZX1jYXB0aW9ue3BhZGRpbmctdG9wOi43NXJlbTtwYWRkaW5nLWJvdHRvbTouNzVyZW07Y29sb3I6IzZjNzU3ZDt0ZXh0LWFsaWduOmxlZnQ7Y2FwdGlvbi1zaWRlOmJvdHRvbX10aHt0ZXh0LWFsaWduOmluaGVyaXR9bGFiZWx7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWJvdHRvbTouNXJlbX1idXR0b257Ym9yZGVyLXJhZGl1czowfWJ1dHRvbjpmb2N1c3tvdXRsaW5lOjFweCBkb3R0ZWQ7b3V0bGluZTo1cHggYXV0byAtd2Via2l0LWZvY3VzLXJpbmctY29sb3J9YnV0dG9uLGlucHV0LG9wdGdyb3VwLHNlbGVjdCx0ZXh0YXJlYXttYXJnaW46MDtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O2xpbmUtaGVpZ2h0OmluaGVyaXR9YnV0dG9uLGlucHV0e292ZXJmbG93OnZpc2libGV9YnV0dG9uLHNlbGVjdHt0ZXh0LXRyYW5zZm9ybTpub25lfXNlbGVjdHt3b3JkLXdyYXA6bm9ybWFsfVt0eXBlPWJ1dHRvbl0sW3R5cGU9cmVzZXRdLFt0eXBlPXN1Ym1pdF0sYnV0dG9uey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b259W3R5cGU9YnV0dG9uXTpub3QoOmRpc2FibGVkKSxbdHlwZT1yZXNldF06bm90KDpkaXNhYmxlZCksW3R5cGU9c3VibWl0XTpub3QoOmRpc2FibGVkKSxidXR0b246bm90KDpkaXNhYmxlZCl7Y3Vyc29yOnBvaW50ZXJ9W3R5cGU9YnV0dG9uXTo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT1yZXNldF06Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9c3VibWl0XTo6LW1vei1mb2N1cy1pbm5lcixidXR0b246Oi1tb3otZm9jdXMtaW5uZXJ7cGFkZGluZzowO2JvcmRlci1zdHlsZTpub25lfWlucHV0W3R5cGU9Y2hlY2tib3hdLGlucHV0W3R5cGU9cmFkaW9de2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjB9aW5wdXRbdHlwZT1kYXRlXSxpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXSxpbnB1dFt0eXBlPW1vbnRoXSxpbnB1dFt0eXBlPXRpbWVdey13ZWJraXQtYXBwZWFyYW5jZTpsaXN0Ym94fXRleHRhcmVhe292ZXJmbG93OmF1dG87cmVzaXplOnZlcnRpY2FsfWZpZWxkc2V0e21pbi13aWR0aDowO3BhZGRpbmc6MDttYXJnaW46MDtib3JkZXI6MH1sZWdlbmR7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO21heC13aWR0aDoxMDAlO3BhZGRpbmc6MDttYXJnaW4tYm90dG9tOi41cmVtO2ZvbnQtc2l6ZToxLjVyZW07bGluZS1oZWlnaHQ6aW5oZXJpdDtjb2xvcjppbmhlcml0O3doaXRlLXNwYWNlOm5vcm1hbH1wcm9ncmVzc3t2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX1bdHlwZT1udW1iZXJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFt0eXBlPW51bWJlcl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b257aGVpZ2h0OmF1dG99W3R5cGU9c2VhcmNoXXtvdXRsaW5lLW9mZnNldDotMnB4Oy13ZWJraXQtYXBwZWFyYW5jZTpub25lfVt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb257LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9Ojotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbntmb250OmluaGVyaXQ7LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbn1vdXRwdXR7ZGlzcGxheTppbmxpbmUtYmxvY2t9c3VtbWFyeXtkaXNwbGF5Omxpc3QtaXRlbTtjdXJzb3I6cG9pbnRlcn10ZW1wbGF0ZXtkaXNwbGF5Om5vbmV9W2hpZGRlbl17ZGlzcGxheTpub25lIWltcG9ydGFudH0uaDEsLmgyLC5oMywuaDQsLmg1LC5oNixoMSxoMixoMyxoNCxoNSxoNnttYXJnaW4tYm90dG9tOi41cmVtO2ZvbnQtd2VpZ2h0OjUwMDtsaW5lLWhlaWdodDoxLjJ9LmgxLGgxe2ZvbnQtc2l6ZToyLjVyZW19LmgyLGgye2ZvbnQtc2l6ZToycmVtfS5oMyxoM3tmb250LXNpemU6MS43NXJlbX0uaDQsaDR7Zm9udC1zaXplOjEuNXJlbX0uaDUsaDV7Zm9udC1zaXplOjEuMjVyZW19Lmg2LGg2e2ZvbnQtc2l6ZToxcmVtfS5sZWFke2ZvbnQtc2l6ZToxLjI1cmVtO2ZvbnQtd2VpZ2h0OjMwMH0uZGlzcGxheS0xe2ZvbnQtc2l6ZTo2cmVtO2ZvbnQtd2VpZ2h0OjMwMDtsaW5lLWhlaWdodDoxLjJ9LmRpc3BsYXktMntmb250LXNpemU6NS41cmVtO2ZvbnQtd2VpZ2h0OjMwMDtsaW5lLWhlaWdodDoxLjJ9LmRpc3BsYXktM3tmb250LXNpemU6NC41cmVtO2ZvbnQtd2VpZ2h0OjMwMDtsaW5lLWhlaWdodDoxLjJ9LmRpc3BsYXktNHtmb250LXNpemU6My41cmVtO2ZvbnQtd2VpZ2h0OjMwMDtsaW5lLWhlaWdodDoxLjJ9aHJ7bWFyZ2luLXRvcDoxcmVtO21hcmdpbi1ib3R0b206MXJlbTtib3JkZXI6MDtib3JkZXItdG9wOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xKX0uc21hbGwsc21hbGx7Zm9udC1zaXplOjgwJTtmb250LXdlaWdodDo0MDB9Lm1hcmssbWFya3twYWRkaW5nOi4yZW07YmFja2dyb3VuZC1jb2xvcjojZmNmOGUzfS5saXN0LXVuc3R5bGVke3BhZGRpbmctbGVmdDowO2xpc3Qtc3R5bGU6bm9uZX0ubGlzdC1pbmxpbmV7cGFkZGluZy1sZWZ0OjA7bGlzdC1zdHlsZTpub25lfS5saXN0LWlubGluZS1pdGVte2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5saXN0LWlubGluZS1pdGVtOm5vdCg6bGFzdC1jaGlsZCl7bWFyZ2luLXJpZ2h0Oi41cmVtfS5pbml0aWFsaXNte2ZvbnQtc2l6ZTo5MCU7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5ibG9ja3F1b3Rle21hcmdpbi1ib3R0b206MXJlbTtmb250LXNpemU6MS4yNXJlbX0uYmxvY2txdW90ZS1mb290ZXJ7ZGlzcGxheTpibG9jaztmb250LXNpemU6ODAlO2NvbG9yOiM2Yzc1N2R9LmJsb2NrcXVvdGUtZm9vdGVyOjpiZWZvcmV7Y29udGVudDpcXFwiXFxcXDIwMTRcXFxcMDBBMFxcXCJ9LmltZy1mbHVpZHttYXgtd2lkdGg6MTAwJTtoZWlnaHQ6YXV0b30uaW1nLXRodW1ibmFpbHtwYWRkaW5nOi4yNXJlbTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjZGVlMmU2O2JvcmRlci1yYWRpdXM6LjI1cmVtO21heC13aWR0aDoxMDAlO2hlaWdodDphdXRvfS5maWd1cmV7ZGlzcGxheTppbmxpbmUtYmxvY2t9LmZpZ3VyZS1pbWd7bWFyZ2luLWJvdHRvbTouNXJlbTtsaW5lLWhlaWdodDoxfS5maWd1cmUtY2FwdGlvbntmb250LXNpemU6OTAlO2NvbG9yOiM2Yzc1N2R9Y29kZXtmb250LXNpemU6ODcuNSU7Y29sb3I6I2U4M2U4Yzt3b3JkLWJyZWFrOmJyZWFrLXdvcmR9YT5jb2Rle2NvbG9yOmluaGVyaXR9a2Jke3BhZGRpbmc6LjJyZW0gLjRyZW07Zm9udC1zaXplOjg3LjUlO2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMjEyNTI5O2JvcmRlci1yYWRpdXM6LjJyZW19a2JkIGtiZHtwYWRkaW5nOjA7Zm9udC1zaXplOjEwMCU7Zm9udC13ZWlnaHQ6NzAwfXByZXtkaXNwbGF5OmJsb2NrO2ZvbnQtc2l6ZTo4Ny41JTtjb2xvcjojMjEyNTI5fXByZSBjb2Rle2ZvbnQtc2l6ZTppbmhlcml0O2NvbG9yOmluaGVyaXQ7d29yZC1icmVhazpub3JtYWx9LnByZS1zY3JvbGxhYmxle21heC1oZWlnaHQ6MzQwcHg7b3ZlcmZsb3cteTpzY3JvbGx9LmNvbnRhaW5lcnt3aWR0aDoxMDAlO3BhZGRpbmctcmlnaHQ6MTVweDtwYWRkaW5nLWxlZnQ6MTVweDttYXJnaW4tcmlnaHQ6YXV0bzttYXJnaW4tbGVmdDphdXRvfUBtZWRpYSAobWluLXdpZHRoOjU3NnB4KXsuY29udGFpbmVye21heC13aWR0aDo1NDBweH19QG1lZGlhIChtaW4td2lkdGg6NzY4cHgpey5jb250YWluZXJ7bWF4LXdpZHRoOjcyMHB4fX1AbWVkaWEgKG1pbi13aWR0aDo5OTJweCl7LmNvbnRhaW5lcnttYXgtd2lkdGg6OTYwcHh9fUBtZWRpYSAobWluLXdpZHRoOjEyMDBweCl7LmNvbnRhaW5lcnttYXgtd2lkdGg6MTE0MHB4fX0uY29udGFpbmVyLWZsdWlke3dpZHRoOjEwMCU7cGFkZGluZy1yaWdodDoxNXB4O3BhZGRpbmctbGVmdDoxNXB4O21hcmdpbi1yaWdodDphdXRvO21hcmdpbi1sZWZ0OmF1dG99LnJvd3tkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXA7bWFyZ2luLXJpZ2h0Oi0xNXB4O21hcmdpbi1sZWZ0Oi0xNXB4fS5uby1ndXR0ZXJze21hcmdpbi1yaWdodDowO21hcmdpbi1sZWZ0OjB9Lm5vLWd1dHRlcnM+LmNvbCwubm8tZ3V0dGVycz5bY2xhc3MqPWNvbC1de3BhZGRpbmctcmlnaHQ6MDtwYWRkaW5nLWxlZnQ6MH0uY29sLC5jb2wtMSwuY29sLTEwLC5jb2wtMTEsLmNvbC0xMiwuY29sLTIsLmNvbC0zLC5jb2wtNCwuY29sLTUsLmNvbC02LC5jb2wtNywuY29sLTgsLmNvbC05LC5jb2wtYXV0bywuY29sLWxnLC5jb2wtbGctMSwuY29sLWxnLTEwLC5jb2wtbGctMTEsLmNvbC1sZy0xMiwuY29sLWxnLTIsLmNvbC1sZy0zLC5jb2wtbGctNCwuY29sLWxnLTUsLmNvbC1sZy02LC5jb2wtbGctNywuY29sLWxnLTgsLmNvbC1sZy05LC5jb2wtbGctYXV0bywuY29sLW1kLC5jb2wtbWQtMSwuY29sLW1kLTEwLC5jb2wtbWQtMTEsLmNvbC1tZC0xMiwuY29sLW1kLTIsLmNvbC1tZC0zLC5jb2wtbWQtNCwuY29sLW1kLTUsLmNvbC1tZC02LC5jb2wtbWQtNywuY29sLW1kLTgsLmNvbC1tZC05LC5jb2wtbWQtYXV0bywuY29sLXNtLC5jb2wtc20tMSwuY29sLXNtLTEwLC5jb2wtc20tMTEsLmNvbC1zbS0xMiwuY29sLXNtLTIsLmNvbC1zbS0zLC5jb2wtc20tNCwuY29sLXNtLTUsLmNvbC1zbS02LC5jb2wtc20tNywuY29sLXNtLTgsLmNvbC1zbS05LC5jb2wtc20tYXV0bywuY29sLXhsLC5jb2wteGwtMSwuY29sLXhsLTEwLC5jb2wteGwtMTEsLmNvbC14bC0xMiwuY29sLXhsLTIsLmNvbC14bC0zLC5jb2wteGwtNCwuY29sLXhsLTUsLmNvbC14bC02LC5jb2wteGwtNywuY29sLXhsLTgsLmNvbC14bC05LC5jb2wteGwtYXV0b3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO3BhZGRpbmctcmlnaHQ6MTVweDtwYWRkaW5nLWxlZnQ6MTVweH0uY29sey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjA7ZmxleC1iYXNpczowOy1tcy1mbGV4LXBvc2l0aXZlOjE7ZmxleC1ncm93OjE7bWF4LXdpZHRoOjEwMCV9LmNvbC1hdXRvey1tcy1mbGV4OjAgMCBhdXRvO2ZsZXg6MCAwIGF1dG87d2lkdGg6YXV0bzttYXgtd2lkdGg6MTAwJX0uY29sLTF7LW1zLWZsZXg6MCAwIDguMzMzMzMzJTtmbGV4OjAgMCA4LjMzMzMzMyU7bWF4LXdpZHRoOjguMzMzMzMzJX0uY29sLTJ7LW1zLWZsZXg6MCAwIDE2LjY2NjY2NyU7ZmxleDowIDAgMTYuNjY2NjY3JTttYXgtd2lkdGg6MTYuNjY2NjY3JX0uY29sLTN7LW1zLWZsZXg6MCAwIDI1JTtmbGV4OjAgMCAyNSU7bWF4LXdpZHRoOjI1JX0uY29sLTR7LW1zLWZsZXg6MCAwIDMzLjMzMzMzMyU7ZmxleDowIDAgMzMuMzMzMzMzJTttYXgtd2lkdGg6MzMuMzMzMzMzJX0uY29sLTV7LW1zLWZsZXg6MCAwIDQxLjY2NjY2NyU7ZmxleDowIDAgNDEuNjY2NjY3JTttYXgtd2lkdGg6NDEuNjY2NjY3JX0uY29sLTZ7LW1zLWZsZXg6MCAwIDUwJTtmbGV4OjAgMCA1MCU7bWF4LXdpZHRoOjUwJX0uY29sLTd7LW1zLWZsZXg6MCAwIDU4LjMzMzMzMyU7ZmxleDowIDAgNTguMzMzMzMzJTttYXgtd2lkdGg6NTguMzMzMzMzJX0uY29sLTh7LW1zLWZsZXg6MCAwIDY2LjY2NjY2NyU7ZmxleDowIDAgNjYuNjY2NjY3JTttYXgtd2lkdGg6NjYuNjY2NjY3JX0uY29sLTl7LW1zLWZsZXg6MCAwIDc1JTtmbGV4OjAgMCA3NSU7bWF4LXdpZHRoOjc1JX0uY29sLTEwey1tcy1mbGV4OjAgMCA4My4zMzMzMzMlO2ZsZXg6MCAwIDgzLjMzMzMzMyU7bWF4LXdpZHRoOjgzLjMzMzMzMyV9LmNvbC0xMXstbXMtZmxleDowIDAgOTEuNjY2NjY3JTtmbGV4OjAgMCA5MS42NjY2NjclO21heC13aWR0aDo5MS42NjY2NjclfS5jb2wtMTJ7LW1zLWZsZXg6MCAwIDEwMCU7ZmxleDowIDAgMTAwJTttYXgtd2lkdGg6MTAwJX0ub3JkZXItZmlyc3R7LW1zLWZsZXgtb3JkZXI6LTE7b3JkZXI6LTF9Lm9yZGVyLWxhc3R7LW1zLWZsZXgtb3JkZXI6MTM7b3JkZXI6MTN9Lm9yZGVyLTB7LW1zLWZsZXgtb3JkZXI6MDtvcmRlcjowfS5vcmRlci0xey1tcy1mbGV4LW9yZGVyOjE7b3JkZXI6MX0ub3JkZXItMnstbXMtZmxleC1vcmRlcjoyO29yZGVyOjJ9Lm9yZGVyLTN7LW1zLWZsZXgtb3JkZXI6MztvcmRlcjozfS5vcmRlci00ey1tcy1mbGV4LW9yZGVyOjQ7b3JkZXI6NH0ub3JkZXItNXstbXMtZmxleC1vcmRlcjo1O29yZGVyOjV9Lm9yZGVyLTZ7LW1zLWZsZXgtb3JkZXI6NjtvcmRlcjo2fS5vcmRlci03ey1tcy1mbGV4LW9yZGVyOjc7b3JkZXI6N30ub3JkZXItOHstbXMtZmxleC1vcmRlcjo4O29yZGVyOjh9Lm9yZGVyLTl7LW1zLWZsZXgtb3JkZXI6OTtvcmRlcjo5fS5vcmRlci0xMHstbXMtZmxleC1vcmRlcjoxMDtvcmRlcjoxMH0ub3JkZXItMTF7LW1zLWZsZXgtb3JkZXI6MTE7b3JkZXI6MTF9Lm9yZGVyLTEyey1tcy1mbGV4LW9yZGVyOjEyO29yZGVyOjEyfS5vZmZzZXQtMXttYXJnaW4tbGVmdDo4LjMzMzMzMyV9Lm9mZnNldC0ye21hcmdpbi1sZWZ0OjE2LjY2NjY2NyV9Lm9mZnNldC0ze21hcmdpbi1sZWZ0OjI1JX0ub2Zmc2V0LTR7bWFyZ2luLWxlZnQ6MzMuMzMzMzMzJX0ub2Zmc2V0LTV7bWFyZ2luLWxlZnQ6NDEuNjY2NjY3JX0ub2Zmc2V0LTZ7bWFyZ2luLWxlZnQ6NTAlfS5vZmZzZXQtN3ttYXJnaW4tbGVmdDo1OC4zMzMzMzMlfS5vZmZzZXQtOHttYXJnaW4tbGVmdDo2Ni42NjY2NjclfS5vZmZzZXQtOXttYXJnaW4tbGVmdDo3NSV9Lm9mZnNldC0xMHttYXJnaW4tbGVmdDo4My4zMzMzMzMlfS5vZmZzZXQtMTF7bWFyZ2luLWxlZnQ6OTEuNjY2NjY3JX1AbWVkaWEgKG1pbi13aWR0aDo1NzZweCl7LmNvbC1zbXstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTowO2ZsZXgtYmFzaXM6MDstbXMtZmxleC1wb3NpdGl2ZToxO2ZsZXgtZ3JvdzoxO21heC13aWR0aDoxMDAlfS5jb2wtc20tYXV0b3stbXMtZmxleDowIDAgYXV0bztmbGV4OjAgMCBhdXRvO3dpZHRoOmF1dG87bWF4LXdpZHRoOjEwMCV9LmNvbC1zbS0xey1tcy1mbGV4OjAgMCA4LjMzMzMzMyU7ZmxleDowIDAgOC4zMzMzMzMlO21heC13aWR0aDo4LjMzMzMzMyV9LmNvbC1zbS0yey1tcy1mbGV4OjAgMCAxNi42NjY2NjclO2ZsZXg6MCAwIDE2LjY2NjY2NyU7bWF4LXdpZHRoOjE2LjY2NjY2NyV9LmNvbC1zbS0zey1tcy1mbGV4OjAgMCAyNSU7ZmxleDowIDAgMjUlO21heC13aWR0aDoyNSV9LmNvbC1zbS00ey1tcy1mbGV4OjAgMCAzMy4zMzMzMzMlO2ZsZXg6MCAwIDMzLjMzMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzMyV9LmNvbC1zbS01ey1tcy1mbGV4OjAgMCA0MS42NjY2NjclO2ZsZXg6MCAwIDQxLjY2NjY2NyU7bWF4LXdpZHRoOjQxLjY2NjY2NyV9LmNvbC1zbS02ey1tcy1mbGV4OjAgMCA1MCU7ZmxleDowIDAgNTAlO21heC13aWR0aDo1MCV9LmNvbC1zbS03ey1tcy1mbGV4OjAgMCA1OC4zMzMzMzMlO2ZsZXg6MCAwIDU4LjMzMzMzMyU7bWF4LXdpZHRoOjU4LjMzMzMzMyV9LmNvbC1zbS04ey1tcy1mbGV4OjAgMCA2Ni42NjY2NjclO2ZsZXg6MCAwIDY2LjY2NjY2NyU7bWF4LXdpZHRoOjY2LjY2NjY2NyV9LmNvbC1zbS05ey1tcy1mbGV4OjAgMCA3NSU7ZmxleDowIDAgNzUlO21heC13aWR0aDo3NSV9LmNvbC1zbS0xMHstbXMtZmxleDowIDAgODMuMzMzMzMzJTtmbGV4OjAgMCA4My4zMzMzMzMlO21heC13aWR0aDo4My4zMzMzMzMlfS5jb2wtc20tMTF7LW1zLWZsZXg6MCAwIDkxLjY2NjY2NyU7ZmxleDowIDAgOTEuNjY2NjY3JTttYXgtd2lkdGg6OTEuNjY2NjY3JX0uY29sLXNtLTEyey1tcy1mbGV4OjAgMCAxMDAlO2ZsZXg6MCAwIDEwMCU7bWF4LXdpZHRoOjEwMCV9Lm9yZGVyLXNtLWZpcnN0ey1tcy1mbGV4LW9yZGVyOi0xO29yZGVyOi0xfS5vcmRlci1zbS1sYXN0ey1tcy1mbGV4LW9yZGVyOjEzO29yZGVyOjEzfS5vcmRlci1zbS0wey1tcy1mbGV4LW9yZGVyOjA7b3JkZXI6MH0ub3JkZXItc20tMXstbXMtZmxleC1vcmRlcjoxO29yZGVyOjF9Lm9yZGVyLXNtLTJ7LW1zLWZsZXgtb3JkZXI6MjtvcmRlcjoyfS5vcmRlci1zbS0zey1tcy1mbGV4LW9yZGVyOjM7b3JkZXI6M30ub3JkZXItc20tNHstbXMtZmxleC1vcmRlcjo0O29yZGVyOjR9Lm9yZGVyLXNtLTV7LW1zLWZsZXgtb3JkZXI6NTtvcmRlcjo1fS5vcmRlci1zbS02ey1tcy1mbGV4LW9yZGVyOjY7b3JkZXI6Nn0ub3JkZXItc20tN3stbXMtZmxleC1vcmRlcjo3O29yZGVyOjd9Lm9yZGVyLXNtLTh7LW1zLWZsZXgtb3JkZXI6ODtvcmRlcjo4fS5vcmRlci1zbS05ey1tcy1mbGV4LW9yZGVyOjk7b3JkZXI6OX0ub3JkZXItc20tMTB7LW1zLWZsZXgtb3JkZXI6MTA7b3JkZXI6MTB9Lm9yZGVyLXNtLTExey1tcy1mbGV4LW9yZGVyOjExO29yZGVyOjExfS5vcmRlci1zbS0xMnstbXMtZmxleC1vcmRlcjoxMjtvcmRlcjoxMn0ub2Zmc2V0LXNtLTB7bWFyZ2luLWxlZnQ6MH0ub2Zmc2V0LXNtLTF7bWFyZ2luLWxlZnQ6OC4zMzMzMzMlfS5vZmZzZXQtc20tMnttYXJnaW4tbGVmdDoxNi42NjY2NjclfS5vZmZzZXQtc20tM3ttYXJnaW4tbGVmdDoyNSV9Lm9mZnNldC1zbS00e21hcmdpbi1sZWZ0OjMzLjMzMzMzMyV9Lm9mZnNldC1zbS01e21hcmdpbi1sZWZ0OjQxLjY2NjY2NyV9Lm9mZnNldC1zbS02e21hcmdpbi1sZWZ0OjUwJX0ub2Zmc2V0LXNtLTd7bWFyZ2luLWxlZnQ6NTguMzMzMzMzJX0ub2Zmc2V0LXNtLTh7bWFyZ2luLWxlZnQ6NjYuNjY2NjY3JX0ub2Zmc2V0LXNtLTl7bWFyZ2luLWxlZnQ6NzUlfS5vZmZzZXQtc20tMTB7bWFyZ2luLWxlZnQ6ODMuMzMzMzMzJX0ub2Zmc2V0LXNtLTExe21hcmdpbi1sZWZ0OjkxLjY2NjY2NyV9fUBtZWRpYSAobWluLXdpZHRoOjc2OHB4KXsuY29sLW1key1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjA7ZmxleC1iYXNpczowOy1tcy1mbGV4LXBvc2l0aXZlOjE7ZmxleC1ncm93OjE7bWF4LXdpZHRoOjEwMCV9LmNvbC1tZC1hdXRvey1tcy1mbGV4OjAgMCBhdXRvO2ZsZXg6MCAwIGF1dG87d2lkdGg6YXV0bzttYXgtd2lkdGg6MTAwJX0uY29sLW1kLTF7LW1zLWZsZXg6MCAwIDguMzMzMzMzJTtmbGV4OjAgMCA4LjMzMzMzMyU7bWF4LXdpZHRoOjguMzMzMzMzJX0uY29sLW1kLTJ7LW1zLWZsZXg6MCAwIDE2LjY2NjY2NyU7ZmxleDowIDAgMTYuNjY2NjY3JTttYXgtd2lkdGg6MTYuNjY2NjY3JX0uY29sLW1kLTN7LW1zLWZsZXg6MCAwIDI1JTtmbGV4OjAgMCAyNSU7bWF4LXdpZHRoOjI1JX0uY29sLW1kLTR7LW1zLWZsZXg6MCAwIDMzLjMzMzMzMyU7ZmxleDowIDAgMzMuMzMzMzMzJTttYXgtd2lkdGg6MzMuMzMzMzMzJX0uY29sLW1kLTV7LW1zLWZsZXg6MCAwIDQxLjY2NjY2NyU7ZmxleDowIDAgNDEuNjY2NjY3JTttYXgtd2lkdGg6NDEuNjY2NjY3JX0uY29sLW1kLTZ7LW1zLWZsZXg6MCAwIDUwJTtmbGV4OjAgMCA1MCU7bWF4LXdpZHRoOjUwJX0uY29sLW1kLTd7LW1zLWZsZXg6MCAwIDU4LjMzMzMzMyU7ZmxleDowIDAgNTguMzMzMzMzJTttYXgtd2lkdGg6NTguMzMzMzMzJX0uY29sLW1kLTh7LW1zLWZsZXg6MCAwIDY2LjY2NjY2NyU7ZmxleDowIDAgNjYuNjY2NjY3JTttYXgtd2lkdGg6NjYuNjY2NjY3JX0uY29sLW1kLTl7LW1zLWZsZXg6MCAwIDc1JTtmbGV4OjAgMCA3NSU7bWF4LXdpZHRoOjc1JX0uY29sLW1kLTEwey1tcy1mbGV4OjAgMCA4My4zMzMzMzMlO2ZsZXg6MCAwIDgzLjMzMzMzMyU7bWF4LXdpZHRoOjgzLjMzMzMzMyV9LmNvbC1tZC0xMXstbXMtZmxleDowIDAgOTEuNjY2NjY3JTtmbGV4OjAgMCA5MS42NjY2NjclO21heC13aWR0aDo5MS42NjY2NjclfS5jb2wtbWQtMTJ7LW1zLWZsZXg6MCAwIDEwMCU7ZmxleDowIDAgMTAwJTttYXgtd2lkdGg6MTAwJX0ub3JkZXItbWQtZmlyc3R7LW1zLWZsZXgtb3JkZXI6LTE7b3JkZXI6LTF9Lm9yZGVyLW1kLWxhc3R7LW1zLWZsZXgtb3JkZXI6MTM7b3JkZXI6MTN9Lm9yZGVyLW1kLTB7LW1zLWZsZXgtb3JkZXI6MDtvcmRlcjowfS5vcmRlci1tZC0xey1tcy1mbGV4LW9yZGVyOjE7b3JkZXI6MX0ub3JkZXItbWQtMnstbXMtZmxleC1vcmRlcjoyO29yZGVyOjJ9Lm9yZGVyLW1kLTN7LW1zLWZsZXgtb3JkZXI6MztvcmRlcjozfS5vcmRlci1tZC00ey1tcy1mbGV4LW9yZGVyOjQ7b3JkZXI6NH0ub3JkZXItbWQtNXstbXMtZmxleC1vcmRlcjo1O29yZGVyOjV9Lm9yZGVyLW1kLTZ7LW1zLWZsZXgtb3JkZXI6NjtvcmRlcjo2fS5vcmRlci1tZC03ey1tcy1mbGV4LW9yZGVyOjc7b3JkZXI6N30ub3JkZXItbWQtOHstbXMtZmxleC1vcmRlcjo4O29yZGVyOjh9Lm9yZGVyLW1kLTl7LW1zLWZsZXgtb3JkZXI6OTtvcmRlcjo5fS5vcmRlci1tZC0xMHstbXMtZmxleC1vcmRlcjoxMDtvcmRlcjoxMH0ub3JkZXItbWQtMTF7LW1zLWZsZXgtb3JkZXI6MTE7b3JkZXI6MTF9Lm9yZGVyLW1kLTEyey1tcy1mbGV4LW9yZGVyOjEyO29yZGVyOjEyfS5vZmZzZXQtbWQtMHttYXJnaW4tbGVmdDowfS5vZmZzZXQtbWQtMXttYXJnaW4tbGVmdDo4LjMzMzMzMyV9Lm9mZnNldC1tZC0ye21hcmdpbi1sZWZ0OjE2LjY2NjY2NyV9Lm9mZnNldC1tZC0ze21hcmdpbi1sZWZ0OjI1JX0ub2Zmc2V0LW1kLTR7bWFyZ2luLWxlZnQ6MzMuMzMzMzMzJX0ub2Zmc2V0LW1kLTV7bWFyZ2luLWxlZnQ6NDEuNjY2NjY3JX0ub2Zmc2V0LW1kLTZ7bWFyZ2luLWxlZnQ6NTAlfS5vZmZzZXQtbWQtN3ttYXJnaW4tbGVmdDo1OC4zMzMzMzMlfS5vZmZzZXQtbWQtOHttYXJnaW4tbGVmdDo2Ni42NjY2NjclfS5vZmZzZXQtbWQtOXttYXJnaW4tbGVmdDo3NSV9Lm9mZnNldC1tZC0xMHttYXJnaW4tbGVmdDo4My4zMzMzMzMlfS5vZmZzZXQtbWQtMTF7bWFyZ2luLWxlZnQ6OTEuNjY2NjY3JX19QG1lZGlhIChtaW4td2lkdGg6OTkycHgpey5jb2wtbGd7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MDtmbGV4LWJhc2lzOjA7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTttYXgtd2lkdGg6MTAwJX0uY29sLWxnLWF1dG97LW1zLWZsZXg6MCAwIGF1dG87ZmxleDowIDAgYXV0bzt3aWR0aDphdXRvO21heC13aWR0aDoxMDAlfS5jb2wtbGctMXstbXMtZmxleDowIDAgOC4zMzMzMzMlO2ZsZXg6MCAwIDguMzMzMzMzJTttYXgtd2lkdGg6OC4zMzMzMzMlfS5jb2wtbGctMnstbXMtZmxleDowIDAgMTYuNjY2NjY3JTtmbGV4OjAgMCAxNi42NjY2NjclO21heC13aWR0aDoxNi42NjY2NjclfS5jb2wtbGctM3stbXMtZmxleDowIDAgMjUlO2ZsZXg6MCAwIDI1JTttYXgtd2lkdGg6MjUlfS5jb2wtbGctNHstbXMtZmxleDowIDAgMzMuMzMzMzMzJTtmbGV4OjAgMCAzMy4zMzMzMzMlO21heC13aWR0aDozMy4zMzMzMzMlfS5jb2wtbGctNXstbXMtZmxleDowIDAgNDEuNjY2NjY3JTtmbGV4OjAgMCA0MS42NjY2NjclO21heC13aWR0aDo0MS42NjY2NjclfS5jb2wtbGctNnstbXMtZmxleDowIDAgNTAlO2ZsZXg6MCAwIDUwJTttYXgtd2lkdGg6NTAlfS5jb2wtbGctN3stbXMtZmxleDowIDAgNTguMzMzMzMzJTtmbGV4OjAgMCA1OC4zMzMzMzMlO21heC13aWR0aDo1OC4zMzMzMzMlfS5jb2wtbGctOHstbXMtZmxleDowIDAgNjYuNjY2NjY3JTtmbGV4OjAgMCA2Ni42NjY2NjclO21heC13aWR0aDo2Ni42NjY2NjclfS5jb2wtbGctOXstbXMtZmxleDowIDAgNzUlO2ZsZXg6MCAwIDc1JTttYXgtd2lkdGg6NzUlfS5jb2wtbGctMTB7LW1zLWZsZXg6MCAwIDgzLjMzMzMzMyU7ZmxleDowIDAgODMuMzMzMzMzJTttYXgtd2lkdGg6ODMuMzMzMzMzJX0uY29sLWxnLTExey1tcy1mbGV4OjAgMCA5MS42NjY2NjclO2ZsZXg6MCAwIDkxLjY2NjY2NyU7bWF4LXdpZHRoOjkxLjY2NjY2NyV9LmNvbC1sZy0xMnstbXMtZmxleDowIDAgMTAwJTtmbGV4OjAgMCAxMDAlO21heC13aWR0aDoxMDAlfS5vcmRlci1sZy1maXJzdHstbXMtZmxleC1vcmRlcjotMTtvcmRlcjotMX0ub3JkZXItbGctbGFzdHstbXMtZmxleC1vcmRlcjoxMztvcmRlcjoxM30ub3JkZXItbGctMHstbXMtZmxleC1vcmRlcjowO29yZGVyOjB9Lm9yZGVyLWxnLTF7LW1zLWZsZXgtb3JkZXI6MTtvcmRlcjoxfS5vcmRlci1sZy0yey1tcy1mbGV4LW9yZGVyOjI7b3JkZXI6Mn0ub3JkZXItbGctM3stbXMtZmxleC1vcmRlcjozO29yZGVyOjN9Lm9yZGVyLWxnLTR7LW1zLWZsZXgtb3JkZXI6NDtvcmRlcjo0fS5vcmRlci1sZy01ey1tcy1mbGV4LW9yZGVyOjU7b3JkZXI6NX0ub3JkZXItbGctNnstbXMtZmxleC1vcmRlcjo2O29yZGVyOjZ9Lm9yZGVyLWxnLTd7LW1zLWZsZXgtb3JkZXI6NztvcmRlcjo3fS5vcmRlci1sZy04ey1tcy1mbGV4LW9yZGVyOjg7b3JkZXI6OH0ub3JkZXItbGctOXstbXMtZmxleC1vcmRlcjo5O29yZGVyOjl9Lm9yZGVyLWxnLTEwey1tcy1mbGV4LW9yZGVyOjEwO29yZGVyOjEwfS5vcmRlci1sZy0xMXstbXMtZmxleC1vcmRlcjoxMTtvcmRlcjoxMX0ub3JkZXItbGctMTJ7LW1zLWZsZXgtb3JkZXI6MTI7b3JkZXI6MTJ9Lm9mZnNldC1sZy0we21hcmdpbi1sZWZ0OjB9Lm9mZnNldC1sZy0xe21hcmdpbi1sZWZ0OjguMzMzMzMzJX0ub2Zmc2V0LWxnLTJ7bWFyZ2luLWxlZnQ6MTYuNjY2NjY3JX0ub2Zmc2V0LWxnLTN7bWFyZ2luLWxlZnQ6MjUlfS5vZmZzZXQtbGctNHttYXJnaW4tbGVmdDozMy4zMzMzMzMlfS5vZmZzZXQtbGctNXttYXJnaW4tbGVmdDo0MS42NjY2NjclfS5vZmZzZXQtbGctNnttYXJnaW4tbGVmdDo1MCV9Lm9mZnNldC1sZy03e21hcmdpbi1sZWZ0OjU4LjMzMzMzMyV9Lm9mZnNldC1sZy04e21hcmdpbi1sZWZ0OjY2LjY2NjY2NyV9Lm9mZnNldC1sZy05e21hcmdpbi1sZWZ0Ojc1JX0ub2Zmc2V0LWxnLTEwe21hcmdpbi1sZWZ0OjgzLjMzMzMzMyV9Lm9mZnNldC1sZy0xMXttYXJnaW4tbGVmdDo5MS42NjY2NjclfX1AbWVkaWEgKG1pbi13aWR0aDoxMjAwcHgpey5jb2wteGx7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MDtmbGV4LWJhc2lzOjA7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTttYXgtd2lkdGg6MTAwJX0uY29sLXhsLWF1dG97LW1zLWZsZXg6MCAwIGF1dG87ZmxleDowIDAgYXV0bzt3aWR0aDphdXRvO21heC13aWR0aDoxMDAlfS5jb2wteGwtMXstbXMtZmxleDowIDAgOC4zMzMzMzMlO2ZsZXg6MCAwIDguMzMzMzMzJTttYXgtd2lkdGg6OC4zMzMzMzMlfS5jb2wteGwtMnstbXMtZmxleDowIDAgMTYuNjY2NjY3JTtmbGV4OjAgMCAxNi42NjY2NjclO21heC13aWR0aDoxNi42NjY2NjclfS5jb2wteGwtM3stbXMtZmxleDowIDAgMjUlO2ZsZXg6MCAwIDI1JTttYXgtd2lkdGg6MjUlfS5jb2wteGwtNHstbXMtZmxleDowIDAgMzMuMzMzMzMzJTtmbGV4OjAgMCAzMy4zMzMzMzMlO21heC13aWR0aDozMy4zMzMzMzMlfS5jb2wteGwtNXstbXMtZmxleDowIDAgNDEuNjY2NjY3JTtmbGV4OjAgMCA0MS42NjY2NjclO21heC13aWR0aDo0MS42NjY2NjclfS5jb2wteGwtNnstbXMtZmxleDowIDAgNTAlO2ZsZXg6MCAwIDUwJTttYXgtd2lkdGg6NTAlfS5jb2wteGwtN3stbXMtZmxleDowIDAgNTguMzMzMzMzJTtmbGV4OjAgMCA1OC4zMzMzMzMlO21heC13aWR0aDo1OC4zMzMzMzMlfS5jb2wteGwtOHstbXMtZmxleDowIDAgNjYuNjY2NjY3JTtmbGV4OjAgMCA2Ni42NjY2NjclO21heC13aWR0aDo2Ni42NjY2NjclfS5jb2wteGwtOXstbXMtZmxleDowIDAgNzUlO2ZsZXg6MCAwIDc1JTttYXgtd2lkdGg6NzUlfS5jb2wteGwtMTB7LW1zLWZsZXg6MCAwIDgzLjMzMzMzMyU7ZmxleDowIDAgODMuMzMzMzMzJTttYXgtd2lkdGg6ODMuMzMzMzMzJX0uY29sLXhsLTExey1tcy1mbGV4OjAgMCA5MS42NjY2NjclO2ZsZXg6MCAwIDkxLjY2NjY2NyU7bWF4LXdpZHRoOjkxLjY2NjY2NyV9LmNvbC14bC0xMnstbXMtZmxleDowIDAgMTAwJTtmbGV4OjAgMCAxMDAlO21heC13aWR0aDoxMDAlfS5vcmRlci14bC1maXJzdHstbXMtZmxleC1vcmRlcjotMTtvcmRlcjotMX0ub3JkZXIteGwtbGFzdHstbXMtZmxleC1vcmRlcjoxMztvcmRlcjoxM30ub3JkZXIteGwtMHstbXMtZmxleC1vcmRlcjowO29yZGVyOjB9Lm9yZGVyLXhsLTF7LW1zLWZsZXgtb3JkZXI6MTtvcmRlcjoxfS5vcmRlci14bC0yey1tcy1mbGV4LW9yZGVyOjI7b3JkZXI6Mn0ub3JkZXIteGwtM3stbXMtZmxleC1vcmRlcjozO29yZGVyOjN9Lm9yZGVyLXhsLTR7LW1zLWZsZXgtb3JkZXI6NDtvcmRlcjo0fS5vcmRlci14bC01ey1tcy1mbGV4LW9yZGVyOjU7b3JkZXI6NX0ub3JkZXIteGwtNnstbXMtZmxleC1vcmRlcjo2O29yZGVyOjZ9Lm9yZGVyLXhsLTd7LW1zLWZsZXgtb3JkZXI6NztvcmRlcjo3fS5vcmRlci14bC04ey1tcy1mbGV4LW9yZGVyOjg7b3JkZXI6OH0ub3JkZXIteGwtOXstbXMtZmxleC1vcmRlcjo5O29yZGVyOjl9Lm9yZGVyLXhsLTEwey1tcy1mbGV4LW9yZGVyOjEwO29yZGVyOjEwfS5vcmRlci14bC0xMXstbXMtZmxleC1vcmRlcjoxMTtvcmRlcjoxMX0ub3JkZXIteGwtMTJ7LW1zLWZsZXgtb3JkZXI6MTI7b3JkZXI6MTJ9Lm9mZnNldC14bC0we21hcmdpbi1sZWZ0OjB9Lm9mZnNldC14bC0xe21hcmdpbi1sZWZ0OjguMzMzMzMzJX0ub2Zmc2V0LXhsLTJ7bWFyZ2luLWxlZnQ6MTYuNjY2NjY3JX0ub2Zmc2V0LXhsLTN7bWFyZ2luLWxlZnQ6MjUlfS5vZmZzZXQteGwtNHttYXJnaW4tbGVmdDozMy4zMzMzMzMlfS5vZmZzZXQteGwtNXttYXJnaW4tbGVmdDo0MS42NjY2NjclfS5vZmZzZXQteGwtNnttYXJnaW4tbGVmdDo1MCV9Lm9mZnNldC14bC03e21hcmdpbi1sZWZ0OjU4LjMzMzMzMyV9Lm9mZnNldC14bC04e21hcmdpbi1sZWZ0OjY2LjY2NjY2NyV9Lm9mZnNldC14bC05e21hcmdpbi1sZWZ0Ojc1JX0ub2Zmc2V0LXhsLTEwe21hcmdpbi1sZWZ0OjgzLjMzMzMzMyV9Lm9mZnNldC14bC0xMXttYXJnaW4tbGVmdDo5MS42NjY2NjclfX0udGFibGV7d2lkdGg6MTAwJTttYXJnaW4tYm90dG9tOjFyZW07Y29sb3I6IzIxMjUyOX0udGFibGUgdGQsLnRhYmxlIHRoe3BhZGRpbmc6Ljc1cmVtO3ZlcnRpY2FsLWFsaWduOnRvcDtib3JkZXItdG9wOjFweCBzb2xpZCAjZGVlMmU2fS50YWJsZSB0aGVhZCB0aHt2ZXJ0aWNhbC1hbGlnbjpib3R0b207Ym9yZGVyLWJvdHRvbToycHggc29saWQgI2RlZTJlNn0udGFibGUgdGJvZHkrdGJvZHl7Ym9yZGVyLXRvcDoycHggc29saWQgI2RlZTJlNn0udGFibGUtc20gdGQsLnRhYmxlLXNtIHRoe3BhZGRpbmc6LjNyZW19LnRhYmxlLWJvcmRlcmVke2JvcmRlcjoxcHggc29saWQgI2RlZTJlNn0udGFibGUtYm9yZGVyZWQgdGQsLnRhYmxlLWJvcmRlcmVkIHRoe2JvcmRlcjoxcHggc29saWQgI2RlZTJlNn0udGFibGUtYm9yZGVyZWQgdGhlYWQgdGQsLnRhYmxlLWJvcmRlcmVkIHRoZWFkIHRoe2JvcmRlci1ib3R0b20td2lkdGg6MnB4fS50YWJsZS1ib3JkZXJsZXNzIHRib2R5K3Rib2R5LC50YWJsZS1ib3JkZXJsZXNzIHRkLC50YWJsZS1ib3JkZXJsZXNzIHRoLC50YWJsZS1ib3JkZXJsZXNzIHRoZWFkIHRoe2JvcmRlcjowfS50YWJsZS1zdHJpcGVkIHRib2R5IHRyOm50aC1vZi10eXBlKG9kZCl7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC4wNSl9LnRhYmxlLWhvdmVyIHRib2R5IHRyOmhvdmVye2NvbG9yOiMyMTI1Mjk7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC4wNzUpfS50YWJsZS1wcmltYXJ5LC50YWJsZS1wcmltYXJ5PnRkLC50YWJsZS1wcmltYXJ5PnRoe2JhY2tncm91bmQtY29sb3I6I2I4ZGFmZn0udGFibGUtcHJpbWFyeSB0Ym9keSt0Ym9keSwudGFibGUtcHJpbWFyeSB0ZCwudGFibGUtcHJpbWFyeSB0aCwudGFibGUtcHJpbWFyeSB0aGVhZCB0aHtib3JkZXItY29sb3I6IzdhYmFmZn0udGFibGUtaG92ZXIgLnRhYmxlLXByaW1hcnk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojOWZjZGZmfS50YWJsZS1ob3ZlciAudGFibGUtcHJpbWFyeTpob3Zlcj50ZCwudGFibGUtaG92ZXIgLnRhYmxlLXByaW1hcnk6aG92ZXI+dGh7YmFja2dyb3VuZC1jb2xvcjojOWZjZGZmfS50YWJsZS1zZWNvbmRhcnksLnRhYmxlLXNlY29uZGFyeT50ZCwudGFibGUtc2Vjb25kYXJ5PnRoe2JhY2tncm91bmQtY29sb3I6I2Q2ZDhkYn0udGFibGUtc2Vjb25kYXJ5IHRib2R5K3Rib2R5LC50YWJsZS1zZWNvbmRhcnkgdGQsLnRhYmxlLXNlY29uZGFyeSB0aCwudGFibGUtc2Vjb25kYXJ5IHRoZWFkIHRoe2JvcmRlci1jb2xvcjojYjNiN2JifS50YWJsZS1ob3ZlciAudGFibGUtc2Vjb25kYXJ5OmhvdmVye2JhY2tncm91bmQtY29sb3I6I2M4Y2JjZn0udGFibGUtaG92ZXIgLnRhYmxlLXNlY29uZGFyeTpob3Zlcj50ZCwudGFibGUtaG92ZXIgLnRhYmxlLXNlY29uZGFyeTpob3Zlcj50aHtiYWNrZ3JvdW5kLWNvbG9yOiNjOGNiY2Z9LnRhYmxlLXN1Y2Nlc3MsLnRhYmxlLXN1Y2Nlc3M+dGQsLnRhYmxlLXN1Y2Nlc3M+dGh7YmFja2dyb3VuZC1jb2xvcjojYzNlNmNifS50YWJsZS1zdWNjZXNzIHRib2R5K3Rib2R5LC50YWJsZS1zdWNjZXNzIHRkLC50YWJsZS1zdWNjZXNzIHRoLC50YWJsZS1zdWNjZXNzIHRoZWFkIHRoe2JvcmRlci1jb2xvcjojOGZkMTllfS50YWJsZS1ob3ZlciAudGFibGUtc3VjY2Vzczpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNiMWRmYmJ9LnRhYmxlLWhvdmVyIC50YWJsZS1zdWNjZXNzOmhvdmVyPnRkLC50YWJsZS1ob3ZlciAudGFibGUtc3VjY2Vzczpob3Zlcj50aHtiYWNrZ3JvdW5kLWNvbG9yOiNiMWRmYmJ9LnRhYmxlLWluZm8sLnRhYmxlLWluZm8+dGQsLnRhYmxlLWluZm8+dGh7YmFja2dyb3VuZC1jb2xvcjojYmVlNWVifS50YWJsZS1pbmZvIHRib2R5K3Rib2R5LC50YWJsZS1pbmZvIHRkLC50YWJsZS1pbmZvIHRoLC50YWJsZS1pbmZvIHRoZWFkIHRoe2JvcmRlci1jb2xvcjojODZjZmRhfS50YWJsZS1ob3ZlciAudGFibGUtaW5mbzpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNhYmRkZTV9LnRhYmxlLWhvdmVyIC50YWJsZS1pbmZvOmhvdmVyPnRkLC50YWJsZS1ob3ZlciAudGFibGUtaW5mbzpob3Zlcj50aHtiYWNrZ3JvdW5kLWNvbG9yOiNhYmRkZTV9LnRhYmxlLXdhcm5pbmcsLnRhYmxlLXdhcm5pbmc+dGQsLnRhYmxlLXdhcm5pbmc+dGh7YmFja2dyb3VuZC1jb2xvcjojZmZlZWJhfS50YWJsZS13YXJuaW5nIHRib2R5K3Rib2R5LC50YWJsZS13YXJuaW5nIHRkLC50YWJsZS13YXJuaW5nIHRoLC50YWJsZS13YXJuaW5nIHRoZWFkIHRoe2JvcmRlci1jb2xvcjojZmZkZjdlfS50YWJsZS1ob3ZlciAudGFibGUtd2FybmluZzpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmU4YTF9LnRhYmxlLWhvdmVyIC50YWJsZS13YXJuaW5nOmhvdmVyPnRkLC50YWJsZS1ob3ZlciAudGFibGUtd2FybmluZzpob3Zlcj50aHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmU4YTF9LnRhYmxlLWRhbmdlciwudGFibGUtZGFuZ2VyPnRkLC50YWJsZS1kYW5nZXI+dGh7YmFja2dyb3VuZC1jb2xvcjojZjVjNmNifS50YWJsZS1kYW5nZXIgdGJvZHkrdGJvZHksLnRhYmxlLWRhbmdlciB0ZCwudGFibGUtZGFuZ2VyIHRoLC50YWJsZS1kYW5nZXIgdGhlYWQgdGh7Ym9yZGVyLWNvbG9yOiNlZDk2OWV9LnRhYmxlLWhvdmVyIC50YWJsZS1kYW5nZXI6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZjFiMGI3fS50YWJsZS1ob3ZlciAudGFibGUtZGFuZ2VyOmhvdmVyPnRkLC50YWJsZS1ob3ZlciAudGFibGUtZGFuZ2VyOmhvdmVyPnRoe2JhY2tncm91bmQtY29sb3I6I2YxYjBiN30udGFibGUtbGlnaHQsLnRhYmxlLWxpZ2h0PnRkLC50YWJsZS1saWdodD50aHtiYWNrZ3JvdW5kLWNvbG9yOiNmZGZkZmV9LnRhYmxlLWxpZ2h0IHRib2R5K3Rib2R5LC50YWJsZS1saWdodCB0ZCwudGFibGUtbGlnaHQgdGgsLnRhYmxlLWxpZ2h0IHRoZWFkIHRoe2JvcmRlci1jb2xvcjojZmJmY2ZjfS50YWJsZS1ob3ZlciAudGFibGUtbGlnaHQ6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZWNlY2Y2fS50YWJsZS1ob3ZlciAudGFibGUtbGlnaHQ6aG92ZXI+dGQsLnRhYmxlLWhvdmVyIC50YWJsZS1saWdodDpob3Zlcj50aHtiYWNrZ3JvdW5kLWNvbG9yOiNlY2VjZjZ9LnRhYmxlLWRhcmssLnRhYmxlLWRhcms+dGQsLnRhYmxlLWRhcms+dGh7YmFja2dyb3VuZC1jb2xvcjojYzZjOGNhfS50YWJsZS1kYXJrIHRib2R5K3Rib2R5LC50YWJsZS1kYXJrIHRkLC50YWJsZS1kYXJrIHRoLC50YWJsZS1kYXJrIHRoZWFkIHRoe2JvcmRlci1jb2xvcjojOTU5OTljfS50YWJsZS1ob3ZlciAudGFibGUtZGFyazpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNiOWJiYmV9LnRhYmxlLWhvdmVyIC50YWJsZS1kYXJrOmhvdmVyPnRkLC50YWJsZS1ob3ZlciAudGFibGUtZGFyazpob3Zlcj50aHtiYWNrZ3JvdW5kLWNvbG9yOiNiOWJiYmV9LnRhYmxlLWFjdGl2ZSwudGFibGUtYWN0aXZlPnRkLC50YWJsZS1hY3RpdmU+dGh7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC4wNzUpfS50YWJsZS1ob3ZlciAudGFibGUtYWN0aXZlOmhvdmVye2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuMDc1KX0udGFibGUtaG92ZXIgLnRhYmxlLWFjdGl2ZTpob3Zlcj50ZCwudGFibGUtaG92ZXIgLnRhYmxlLWFjdGl2ZTpob3Zlcj50aHtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjA3NSl9LnRhYmxlIC50aGVhZC1kYXJrIHRoe2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMzQzYTQwO2JvcmRlci1jb2xvcjojNDU0ZDU1fS50YWJsZSAudGhlYWQtbGlnaHQgdGh7Y29sb3I6IzQ5NTA1NztiYWNrZ3JvdW5kLWNvbG9yOiNlOWVjZWY7Ym9yZGVyLWNvbG9yOiNkZWUyZTZ9LnRhYmxlLWRhcmt7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMzNDNhNDB9LnRhYmxlLWRhcmsgdGQsLnRhYmxlLWRhcmsgdGgsLnRhYmxlLWRhcmsgdGhlYWQgdGh7Ym9yZGVyLWNvbG9yOiM0NTRkNTV9LnRhYmxlLWRhcmsudGFibGUtYm9yZGVyZWR7Ym9yZGVyOjB9LnRhYmxlLWRhcmsudGFibGUtc3RyaXBlZCB0Ym9keSB0cjpudGgtb2YtdHlwZShvZGQpe2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwuMDUpfS50YWJsZS1kYXJrLnRhYmxlLWhvdmVyIHRib2R5IHRyOmhvdmVye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LC4wNzUpfUBtZWRpYSAobWF4LXdpZHRoOjU3NS45OHB4KXsudGFibGUtcmVzcG9uc2l2ZS1zbXtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7b3ZlcmZsb3cteDphdXRvOy13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOnRvdWNofS50YWJsZS1yZXNwb25zaXZlLXNtPi50YWJsZS1ib3JkZXJlZHtib3JkZXI6MH19QG1lZGlhIChtYXgtd2lkdGg6NzY3Ljk4cHgpey50YWJsZS1yZXNwb25zaXZlLW1ke2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtvdmVyZmxvdy14OmF1dG87LXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6dG91Y2h9LnRhYmxlLXJlc3BvbnNpdmUtbWQ+LnRhYmxlLWJvcmRlcmVke2JvcmRlcjowfX1AbWVkaWEgKG1heC13aWR0aDo5OTEuOThweCl7LnRhYmxlLXJlc3BvbnNpdmUtbGd7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO292ZXJmbG93LXg6YXV0bzstd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzp0b3VjaH0udGFibGUtcmVzcG9uc2l2ZS1sZz4udGFibGUtYm9yZGVyZWR7Ym9yZGVyOjB9fUBtZWRpYSAobWF4LXdpZHRoOjExOTkuOThweCl7LnRhYmxlLXJlc3BvbnNpdmUteGx7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO292ZXJmbG93LXg6YXV0bzstd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzp0b3VjaH0udGFibGUtcmVzcG9uc2l2ZS14bD4udGFibGUtYm9yZGVyZWR7Ym9yZGVyOjB9fS50YWJsZS1yZXNwb25zaXZle2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtvdmVyZmxvdy14OmF1dG87LXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6dG91Y2h9LnRhYmxlLXJlc3BvbnNpdmU+LnRhYmxlLWJvcmRlcmVke2JvcmRlcjowfS5mb3JtLWNvbnRyb2x7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO2hlaWdodDpjYWxjKDEuNWVtICsgLjc1cmVtICsgMnB4KTtwYWRkaW5nOi4zNzVyZW0gLjc1cmVtO2ZvbnQtc2l6ZToxcmVtO2ZvbnQtd2VpZ2h0OjQwMDtsaW5lLWhlaWdodDoxLjU7Y29sb3I6IzQ5NTA1NztiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7YmFja2dyb3VuZC1jbGlwOnBhZGRpbmctYm94O2JvcmRlcjoxcHggc29saWQgI2NlZDRkYTtib3JkZXItcmFkaXVzOi4yNXJlbTt0cmFuc2l0aW9uOmJvcmRlci1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LGJveC1zaGFkb3cgLjE1cyBlYXNlLWluLW91dH1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKXsuZm9ybS1jb250cm9se3RyYW5zaXRpb246bm9uZX19LmZvcm0tY29udHJvbDo6LW1zLWV4cGFuZHtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjowfS5mb3JtLWNvbnRyb2w6Zm9jdXN7Y29sb3I6IzQ5NTA1NztiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyLWNvbG9yOiM4MGJkZmY7b3V0bGluZTowO2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgwLDEyMywyNTUsLjI1KX0uZm9ybS1jb250cm9sOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM2Yzc1N2Q7b3BhY2l0eToxfS5mb3JtLWNvbnRyb2w6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6IzZjNzU3ZDtvcGFjaXR5OjF9LmZvcm0tY29udHJvbDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzZjNzU3ZDtvcGFjaXR5OjF9LmZvcm0tY29udHJvbDo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM2Yzc1N2Q7b3BhY2l0eToxfS5mb3JtLWNvbnRyb2w6OnBsYWNlaG9sZGVye2NvbG9yOiM2Yzc1N2Q7b3BhY2l0eToxfS5mb3JtLWNvbnRyb2w6ZGlzYWJsZWQsLmZvcm0tY29udHJvbFtyZWFkb25seV17YmFja2dyb3VuZC1jb2xvcjojZTllY2VmO29wYWNpdHk6MX1zZWxlY3QuZm9ybS1jb250cm9sOmZvY3VzOjotbXMtdmFsdWV7Y29sb3I6IzQ5NTA1NztiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LmZvcm0tY29udHJvbC1maWxlLC5mb3JtLWNvbnRyb2wtcmFuZ2V7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlfS5jb2wtZm9ybS1sYWJlbHtwYWRkaW5nLXRvcDpjYWxjKC4zNzVyZW0gKyAxcHgpO3BhZGRpbmctYm90dG9tOmNhbGMoLjM3NXJlbSArIDFweCk7bWFyZ2luLWJvdHRvbTowO2ZvbnQtc2l6ZTppbmhlcml0O2xpbmUtaGVpZ2h0OjEuNX0uY29sLWZvcm0tbGFiZWwtbGd7cGFkZGluZy10b3A6Y2FsYyguNXJlbSArIDFweCk7cGFkZGluZy1ib3R0b206Y2FsYyguNXJlbSArIDFweCk7Zm9udC1zaXplOjEuMjVyZW07bGluZS1oZWlnaHQ6MS41fS5jb2wtZm9ybS1sYWJlbC1zbXtwYWRkaW5nLXRvcDpjYWxjKC4yNXJlbSArIDFweCk7cGFkZGluZy1ib3R0b206Y2FsYyguMjVyZW0gKyAxcHgpO2ZvbnQtc2l6ZTouODc1cmVtO2xpbmUtaGVpZ2h0OjEuNX0uZm9ybS1jb250cm9sLXBsYWludGV4dHtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7cGFkZGluZy10b3A6LjM3NXJlbTtwYWRkaW5nLWJvdHRvbTouMzc1cmVtO21hcmdpbi1ib3R0b206MDtsaW5lLWhlaWdodDoxLjU7Y29sb3I6IzIxMjUyOTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjpzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItd2lkdGg6MXB4IDB9LmZvcm0tY29udHJvbC1wbGFpbnRleHQuZm9ybS1jb250cm9sLWxnLC5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0LmZvcm0tY29udHJvbC1zbXtwYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy1sZWZ0OjB9LmZvcm0tY29udHJvbC1zbXtoZWlnaHQ6Y2FsYygxLjVlbSArIC41cmVtICsgMnB4KTtwYWRkaW5nOi4yNXJlbSAuNXJlbTtmb250LXNpemU6Ljg3NXJlbTtsaW5lLWhlaWdodDoxLjU7Ym9yZGVyLXJhZGl1czouMnJlbX0uZm9ybS1jb250cm9sLWxne2hlaWdodDpjYWxjKDEuNWVtICsgMXJlbSArIDJweCk7cGFkZGluZzouNXJlbSAxcmVtO2ZvbnQtc2l6ZToxLjI1cmVtO2xpbmUtaGVpZ2h0OjEuNTtib3JkZXItcmFkaXVzOi4zcmVtfXNlbGVjdC5mb3JtLWNvbnRyb2xbbXVsdGlwbGVdLHNlbGVjdC5mb3JtLWNvbnRyb2xbc2l6ZV17aGVpZ2h0OmF1dG99dGV4dGFyZWEuZm9ybS1jb250cm9se2hlaWdodDphdXRvfS5mb3JtLWdyb3Vwe21hcmdpbi1ib3R0b206MXJlbX0uZm9ybS10ZXh0e2Rpc3BsYXk6YmxvY2s7bWFyZ2luLXRvcDouMjVyZW19LmZvcm0tcm93e2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDttYXJnaW4tcmlnaHQ6LTVweDttYXJnaW4tbGVmdDotNXB4fS5mb3JtLXJvdz4uY29sLC5mb3JtLXJvdz5bY2xhc3MqPWNvbC1de3BhZGRpbmctcmlnaHQ6NXB4O3BhZGRpbmctbGVmdDo1cHh9LmZvcm0tY2hlY2t7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztwYWRkaW5nLWxlZnQ6MS4yNXJlbX0uZm9ybS1jaGVjay1pbnB1dHtwb3NpdGlvbjphYnNvbHV0ZTttYXJnaW4tdG9wOi4zcmVtO21hcmdpbi1sZWZ0Oi0xLjI1cmVtfS5mb3JtLWNoZWNrLWlucHV0OmRpc2FibGVkfi5mb3JtLWNoZWNrLWxhYmVse2NvbG9yOiM2Yzc1N2R9LmZvcm0tY2hlY2stbGFiZWx7bWFyZ2luLWJvdHRvbTowfS5mb3JtLWNoZWNrLWlubGluZXtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveDtkaXNwbGF5OmlubGluZS1mbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZy1sZWZ0OjA7bWFyZ2luLXJpZ2h0Oi43NXJlbX0uZm9ybS1jaGVjay1pbmxpbmUgLmZvcm0tY2hlY2staW5wdXR7cG9zaXRpb246c3RhdGljO21hcmdpbi10b3A6MDttYXJnaW4tcmlnaHQ6LjMxMjVyZW07bWFyZ2luLWxlZnQ6MH0udmFsaWQtZmVlZGJhY2t7ZGlzcGxheTpub25lO3dpZHRoOjEwMCU7bWFyZ2luLXRvcDouMjVyZW07Zm9udC1zaXplOjgwJTtjb2xvcjojMjhhNzQ1fS52YWxpZC10b29sdGlwe3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO3otaW5kZXg6NTtkaXNwbGF5Om5vbmU7bWF4LXdpZHRoOjEwMCU7cGFkZGluZzouMjVyZW0gLjVyZW07bWFyZ2luLXRvcDouMXJlbTtmb250LXNpemU6Ljg3NXJlbTtsaW5lLWhlaWdodDoxLjU7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNDAsMTY3LDY5LC45KTtib3JkZXItcmFkaXVzOi4yNXJlbX0uZm9ybS1jb250cm9sLmlzLXZhbGlkLC53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6dmFsaWR7Ym9yZGVyLWNvbG9yOiMyOGE3NDU7cGFkZGluZy1yaWdodDpjYWxjKDEuNWVtICsgLjc1cmVtKTtiYWNrZ3JvdW5kLWltYWdlOnVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA4IDgnJTNlJTNjcGF0aCBmaWxsPSclMjMyOGE3NDUnIGQ9J00yLjMgNi43M0wuNiA0LjUzYy0uNC0xLjA0LjQ2LTEuNCAxLjEtLjhsMS4xIDEuNCAzLjQtMy44Yy42LS42MyAxLjYtLjI3IDEuMi43bC00IDQuNmMtLjQzLjUtLjguNC0xLjEuMXonLyUzZSUzYy9zdmclM2VcXFwiKTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXIgcmlnaHQgY2FsYyguMzc1ZW0gKyAuMTg3NXJlbSk7YmFja2dyb3VuZC1zaXplOmNhbGMoLjc1ZW0gKyAuMzc1cmVtKSBjYWxjKC43NWVtICsgLjM3NXJlbSl9LmZvcm0tY29udHJvbC5pcy12YWxpZDpmb2N1cywud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOnZhbGlkOmZvY3Vze2JvcmRlci1jb2xvcjojMjhhNzQ1O2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSg0MCwxNjcsNjksLjI1KX0uZm9ybS1jb250cm9sLmlzLXZhbGlkfi52YWxpZC1mZWVkYmFjaywuZm9ybS1jb250cm9sLmlzLXZhbGlkfi52YWxpZC10b29sdGlwLC53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6dmFsaWR+LnZhbGlkLWZlZWRiYWNrLC53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6dmFsaWR+LnZhbGlkLXRvb2x0aXB7ZGlzcGxheTpibG9ja30ud2FzLXZhbGlkYXRlZCB0ZXh0YXJlYS5mb3JtLWNvbnRyb2w6dmFsaWQsdGV4dGFyZWEuZm9ybS1jb250cm9sLmlzLXZhbGlke3BhZGRpbmctcmlnaHQ6Y2FsYygxLjVlbSArIC43NXJlbSk7YmFja2dyb3VuZC1wb3NpdGlvbjp0b3AgY2FsYyguMzc1ZW0gKyAuMTg3NXJlbSkgcmlnaHQgY2FsYyguMzc1ZW0gKyAuMTg3NXJlbSl9LmN1c3RvbS1zZWxlY3QuaXMtdmFsaWQsLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1zZWxlY3Q6dmFsaWR7Ym9yZGVyLWNvbG9yOiMyOGE3NDU7cGFkZGluZy1yaWdodDpjYWxjKCgxZW0gKyAuNzVyZW0pICogMyAvIDQgKyAxLjc1cmVtKTtiYWNrZ3JvdW5kOnVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0IDUnJTNlJTNjcGF0aCBmaWxsPSclMjMzNDNhNDAnIGQ9J00yIDBMMCAyaDR6bTAgNUwwIDNoNHonLyUzZSUzYy9zdmclM2VcXFwiKSBuby1yZXBlYXQgcmlnaHQgLjc1cmVtIGNlbnRlci84cHggMTBweCx1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgOCA4JyUzZSUzY3BhdGggZmlsbD0nJTIzMjhhNzQ1JyBkPSdNMi4zIDYuNzNMLjYgNC41M2MtLjQtMS4wNC40Ni0xLjQgMS4xLS44bDEuMSAxLjQgMy40LTMuOGMuNi0uNjMgMS42LS4yNyAxLjIuN2wtNCA0LjZjLS40My41LS44LjQtMS4xLjF6Jy8lM2UlM2Mvc3ZnJTNlXFxcIikgI2ZmZiBuby1yZXBlYXQgY2VudGVyIHJpZ2h0IDEuNzVyZW0vY2FsYyguNzVlbSArIC4zNzVyZW0pIGNhbGMoLjc1ZW0gKyAuMzc1cmVtKX0uY3VzdG9tLXNlbGVjdC5pcy12YWxpZDpmb2N1cywud2FzLXZhbGlkYXRlZCAuY3VzdG9tLXNlbGVjdDp2YWxpZDpmb2N1c3tib3JkZXItY29sb3I6IzI4YTc0NTtib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoNDAsMTY3LDY5LC4yNSl9LmN1c3RvbS1zZWxlY3QuaXMtdmFsaWR+LnZhbGlkLWZlZWRiYWNrLC5jdXN0b20tc2VsZWN0LmlzLXZhbGlkfi52YWxpZC10b29sdGlwLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tc2VsZWN0OnZhbGlkfi52YWxpZC1mZWVkYmFjaywud2FzLXZhbGlkYXRlZCAuY3VzdG9tLXNlbGVjdDp2YWxpZH4udmFsaWQtdG9vbHRpcHtkaXNwbGF5OmJsb2NrfS5mb3JtLWNvbnRyb2wtZmlsZS5pcy12YWxpZH4udmFsaWQtZmVlZGJhY2ssLmZvcm0tY29udHJvbC1maWxlLmlzLXZhbGlkfi52YWxpZC10b29sdGlwLC53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2wtZmlsZTp2YWxpZH4udmFsaWQtZmVlZGJhY2ssLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbC1maWxlOnZhbGlkfi52YWxpZC10b29sdGlwe2Rpc3BsYXk6YmxvY2t9LmZvcm0tY2hlY2staW5wdXQuaXMtdmFsaWR+LmZvcm0tY2hlY2stbGFiZWwsLndhcy12YWxpZGF0ZWQgLmZvcm0tY2hlY2staW5wdXQ6dmFsaWR+LmZvcm0tY2hlY2stbGFiZWx7Y29sb3I6IzI4YTc0NX0uZm9ybS1jaGVjay1pbnB1dC5pcy12YWxpZH4udmFsaWQtZmVlZGJhY2ssLmZvcm0tY2hlY2staW5wdXQuaXMtdmFsaWR+LnZhbGlkLXRvb2x0aXAsLndhcy12YWxpZGF0ZWQgLmZvcm0tY2hlY2staW5wdXQ6dmFsaWR+LnZhbGlkLWZlZWRiYWNrLC53YXMtdmFsaWRhdGVkIC5mb3JtLWNoZWNrLWlucHV0OnZhbGlkfi52YWxpZC10b29sdGlwe2Rpc3BsYXk6YmxvY2t9LmN1c3RvbS1jb250cm9sLWlucHV0LmlzLXZhbGlkfi5jdXN0b20tY29udHJvbC1sYWJlbCwud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWR+LmN1c3RvbS1jb250cm9sLWxhYmVse2NvbG9yOiMyOGE3NDV9LmN1c3RvbS1jb250cm9sLWlucHV0LmlzLXZhbGlkfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDp2YWxpZH4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZXtib3JkZXItY29sb3I6IzI4YTc0NX0uY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWR+LnZhbGlkLWZlZWRiYWNrLC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy12YWxpZH4udmFsaWQtdG9vbHRpcCwud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWR+LnZhbGlkLWZlZWRiYWNrLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDp2YWxpZH4udmFsaWQtdG9vbHRpcHtkaXNwbGF5OmJsb2NrfS5jdXN0b20tY29udHJvbC1pbnB1dC5pcy12YWxpZDpjaGVja2Vkfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDp2YWxpZDpjaGVja2Vkfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3Jle2JvcmRlci1jb2xvcjojMzRjZTU3O2JhY2tncm91bmQtY29sb3I6IzM0Y2U1N30uY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQ6Zm9jdXN+LmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUsLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OnZhbGlkOmZvY3Vzfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3Jle2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSg0MCwxNjcsNjksLjI1KX0uY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQ6Zm9jdXM6bm90KDpjaGVja2VkKX4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSwud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWQ6Zm9jdXM6bm90KDpjaGVja2VkKX4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZXtib3JkZXItY29sb3I6IzI4YTc0NX0uY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWR+LmN1c3RvbS1maWxlLWxhYmVsLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDp2YWxpZH4uY3VzdG9tLWZpbGUtbGFiZWx7Ym9yZGVyLWNvbG9yOiMyOGE3NDV9LmN1c3RvbS1maWxlLWlucHV0LmlzLXZhbGlkfi52YWxpZC1mZWVkYmFjaywuY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWR+LnZhbGlkLXRvb2x0aXAsLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OnZhbGlkfi52YWxpZC1mZWVkYmFjaywud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6dmFsaWR+LnZhbGlkLXRvb2x0aXB7ZGlzcGxheTpibG9ja30uY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWQ6Zm9jdXN+LmN1c3RvbS1maWxlLWxhYmVsLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDp2YWxpZDpmb2N1c34uY3VzdG9tLWZpbGUtbGFiZWx7Ym9yZGVyLWNvbG9yOiMyOGE3NDU7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDQwLDE2Nyw2OSwuMjUpfS5pbnZhbGlkLWZlZWRiYWNre2Rpc3BsYXk6bm9uZTt3aWR0aDoxMDAlO21hcmdpbi10b3A6LjI1cmVtO2ZvbnQtc2l6ZTo4MCU7Y29sb3I6I2RjMzU0NX0uaW52YWxpZC10b29sdGlwe3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO3otaW5kZXg6NTtkaXNwbGF5Om5vbmU7bWF4LXdpZHRoOjEwMCU7cGFkZGluZzouMjVyZW0gLjVyZW07bWFyZ2luLXRvcDouMXJlbTtmb250LXNpemU6Ljg3NXJlbTtsaW5lLWhlaWdodDoxLjU7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjIwLDUzLDY5LC45KTtib3JkZXItcmFkaXVzOi4yNXJlbX0uZm9ybS1jb250cm9sLmlzLWludmFsaWQsLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDppbnZhbGlke2JvcmRlci1jb2xvcjojZGMzNTQ1O3BhZGRpbmctcmlnaHQ6Y2FsYygxLjVlbSArIC43NXJlbSk7YmFja2dyb3VuZC1pbWFnZTp1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyBmaWxsPSclMjNkYzM1NDUnIHZpZXdCb3g9Jy0yIC0yIDcgNyclM2UlM2NwYXRoIHN0cm9rZT0nJTIzZGMzNTQ1JyBkPSdNMCAwbDMgM20wLTNMMCAzJy8lM2UlM2NjaXJjbGUgcj0nLjUnLyUzZSUzY2NpcmNsZSBjeD0nMycgcj0nLjUnLyUzZSUzY2NpcmNsZSBjeT0nMycgcj0nLjUnLyUzZSUzY2NpcmNsZSBjeD0nMycgY3k9JzMnIHI9Jy41Jy8lM2UlM2Mvc3ZnJTNFXFxcIik7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyIHJpZ2h0IGNhbGMoLjM3NWVtICsgLjE4NzVyZW0pO2JhY2tncm91bmQtc2l6ZTpjYWxjKC43NWVtICsgLjM3NXJlbSkgY2FsYyguNzVlbSArIC4zNzVyZW0pfS5mb3JtLWNvbnRyb2wuaXMtaW52YWxpZDpmb2N1cywud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOmludmFsaWQ6Zm9jdXN7Ym9yZGVyLWNvbG9yOiNkYzM1NDU7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDIyMCw1Myw2OSwuMjUpfS5mb3JtLWNvbnRyb2wuaXMtaW52YWxpZH4uaW52YWxpZC1mZWVkYmFjaywuZm9ybS1jb250cm9sLmlzLWludmFsaWR+LmludmFsaWQtdG9vbHRpcCwud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOmludmFsaWR+LmludmFsaWQtZmVlZGJhY2ssLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDppbnZhbGlkfi5pbnZhbGlkLXRvb2x0aXB7ZGlzcGxheTpibG9ja30ud2FzLXZhbGlkYXRlZCB0ZXh0YXJlYS5mb3JtLWNvbnRyb2w6aW52YWxpZCx0ZXh0YXJlYS5mb3JtLWNvbnRyb2wuaXMtaW52YWxpZHtwYWRkaW5nLXJpZ2h0OmNhbGMoMS41ZW0gKyAuNzVyZW0pO2JhY2tncm91bmQtcG9zaXRpb246dG9wIGNhbGMoLjM3NWVtICsgLjE4NzVyZW0pIHJpZ2h0IGNhbGMoLjM3NWVtICsgLjE4NzVyZW0pfS5jdXN0b20tc2VsZWN0LmlzLWludmFsaWQsLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1zZWxlY3Q6aW52YWxpZHtib3JkZXItY29sb3I6I2RjMzU0NTtwYWRkaW5nLXJpZ2h0OmNhbGMoKDFlbSArIC43NXJlbSkgKiAzIC8gNCArIDEuNzVyZW0pO2JhY2tncm91bmQ6dXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQgNSclM2UlM2NwYXRoIGZpbGw9JyUyMzM0M2E0MCcgZD0nTTIgMEwwIDJoNHptMCA1TDAgM2g0eicvJTNlJTNjL3N2ZyUzZVxcXCIpIG5vLXJlcGVhdCByaWdodCAuNzVyZW0gY2VudGVyLzhweCAxMHB4LHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIGZpbGw9JyUyM2RjMzU0NScgdmlld0JveD0nLTIgLTIgNyA3JyUzZSUzY3BhdGggc3Ryb2tlPSclMjNkYzM1NDUnIGQ9J00wIDBsMyAzbTAtM0wwIDMnLyUzZSUzY2NpcmNsZSByPScuNScvJTNlJTNjY2lyY2xlIGN4PSczJyByPScuNScvJTNlJTNjY2lyY2xlIGN5PSczJyByPScuNScvJTNlJTNjY2lyY2xlIGN4PSczJyBjeT0nMycgcj0nLjUnLyUzZSUzYy9zdmclM0VcXFwiKSAjZmZmIG5vLXJlcGVhdCBjZW50ZXIgcmlnaHQgMS43NXJlbS9jYWxjKC43NWVtICsgLjM3NXJlbSkgY2FsYyguNzVlbSArIC4zNzVyZW0pfS5jdXN0b20tc2VsZWN0LmlzLWludmFsaWQ6Zm9jdXMsLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1zZWxlY3Q6aW52YWxpZDpmb2N1c3tib3JkZXItY29sb3I6I2RjMzU0NTtib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMjIwLDUzLDY5LC4yNSl9LmN1c3RvbS1zZWxlY3QuaXMtaW52YWxpZH4uaW52YWxpZC1mZWVkYmFjaywuY3VzdG9tLXNlbGVjdC5pcy1pbnZhbGlkfi5pbnZhbGlkLXRvb2x0aXAsLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1zZWxlY3Q6aW52YWxpZH4uaW52YWxpZC1mZWVkYmFjaywud2FzLXZhbGlkYXRlZCAuY3VzdG9tLXNlbGVjdDppbnZhbGlkfi5pbnZhbGlkLXRvb2x0aXB7ZGlzcGxheTpibG9ja30uZm9ybS1jb250cm9sLWZpbGUuaXMtaW52YWxpZH4uaW52YWxpZC1mZWVkYmFjaywuZm9ybS1jb250cm9sLWZpbGUuaXMtaW52YWxpZH4uaW52YWxpZC10b29sdGlwLC53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2wtZmlsZTppbnZhbGlkfi5pbnZhbGlkLWZlZWRiYWNrLC53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2wtZmlsZTppbnZhbGlkfi5pbnZhbGlkLXRvb2x0aXB7ZGlzcGxheTpibG9ja30uZm9ybS1jaGVjay1pbnB1dC5pcy1pbnZhbGlkfi5mb3JtLWNoZWNrLWxhYmVsLC53YXMtdmFsaWRhdGVkIC5mb3JtLWNoZWNrLWlucHV0OmludmFsaWR+LmZvcm0tY2hlY2stbGFiZWx7Y29sb3I6I2RjMzU0NX0uZm9ybS1jaGVjay1pbnB1dC5pcy1pbnZhbGlkfi5pbnZhbGlkLWZlZWRiYWNrLC5mb3JtLWNoZWNrLWlucHV0LmlzLWludmFsaWR+LmludmFsaWQtdG9vbHRpcCwud2FzLXZhbGlkYXRlZCAuZm9ybS1jaGVjay1pbnB1dDppbnZhbGlkfi5pbnZhbGlkLWZlZWRiYWNrLC53YXMtdmFsaWRhdGVkIC5mb3JtLWNoZWNrLWlucHV0OmludmFsaWR+LmludmFsaWQtdG9vbHRpcHtkaXNwbGF5OmJsb2NrfS5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkfi5jdXN0b20tY29udHJvbC1sYWJlbCwud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZH4uY3VzdG9tLWNvbnRyb2wtbGFiZWx7Y29sb3I6I2RjMzU0NX0uY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtaW52YWxpZH4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSwud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZH4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZXtib3JkZXItY29sb3I6I2RjMzU0NX0uY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtaW52YWxpZH4uaW52YWxpZC1mZWVkYmFjaywuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtaW52YWxpZH4uaW52YWxpZC10b29sdGlwLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDppbnZhbGlkfi5pbnZhbGlkLWZlZWRiYWNrLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDppbnZhbGlkfi5pbnZhbGlkLXRvb2x0aXB7ZGlzcGxheTpibG9ja30uY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtaW52YWxpZDpjaGVja2Vkfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDppbnZhbGlkOmNoZWNrZWR+LmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNlNDYwNmQ7YmFja2dyb3VuZC1jb2xvcjojZTQ2MDZkfS5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkOmZvY3Vzfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDppbnZhbGlkOmZvY3Vzfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3Jle2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyMjAsNTMsNjksLjI1KX0uY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtaW52YWxpZDpmb2N1czpub3QoOmNoZWNrZWQpfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDppbnZhbGlkOmZvY3VzOm5vdCg6Y2hlY2tlZCl+LmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNkYzM1NDV9LmN1c3RvbS1maWxlLWlucHV0LmlzLWludmFsaWR+LmN1c3RvbS1maWxlLWxhYmVsLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDppbnZhbGlkfi5jdXN0b20tZmlsZS1sYWJlbHtib3JkZXItY29sb3I6I2RjMzU0NX0uY3VzdG9tLWZpbGUtaW5wdXQuaXMtaW52YWxpZH4uaW52YWxpZC1mZWVkYmFjaywuY3VzdG9tLWZpbGUtaW5wdXQuaXMtaW52YWxpZH4uaW52YWxpZC10b29sdGlwLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDppbnZhbGlkfi5pbnZhbGlkLWZlZWRiYWNrLC53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDppbnZhbGlkfi5pbnZhbGlkLXRvb2x0aXB7ZGlzcGxheTpibG9ja30uY3VzdG9tLWZpbGUtaW5wdXQuaXMtaW52YWxpZDpmb2N1c34uY3VzdG9tLWZpbGUtbGFiZWwsLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OmludmFsaWQ6Zm9jdXN+LmN1c3RvbS1maWxlLWxhYmVse2JvcmRlci1jb2xvcjojZGMzNTQ1O2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyMjAsNTMsNjksLjI1KX0uZm9ybS1pbmxpbmV7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZmxvdzpyb3cgd3JhcDtmbGV4LWZsb3c6cm93IHdyYXA7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0uZm9ybS1pbmxpbmUgLmZvcm0tY2hlY2t7d2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NzZweCl7LmZvcm0taW5saW5lIGxhYmVse2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW4tYm90dG9tOjB9LmZvcm0taW5saW5lIC5mb3JtLWdyb3Vwe2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4OjAgMCBhdXRvO2ZsZXg6MCAwIGF1dG87LW1zLWZsZXgtZmxvdzpyb3cgd3JhcDtmbGV4LWZsb3c6cm93IHdyYXA7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW4tYm90dG9tOjB9LmZvcm0taW5saW5lIC5mb3JtLWNvbnRyb2x7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6YXV0bzt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LmZvcm0taW5saW5lIC5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0e2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5mb3JtLWlubGluZSAuY3VzdG9tLXNlbGVjdCwuZm9ybS1pbmxpbmUgLmlucHV0LWdyb3Vwe3dpZHRoOmF1dG99LmZvcm0taW5saW5lIC5mb3JtLWNoZWNre2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDphdXRvO3BhZGRpbmctbGVmdDowfS5mb3JtLWlubGluZSAuZm9ybS1jaGVjay1pbnB1dHtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7bWFyZ2luLXRvcDowO21hcmdpbi1yaWdodDouMjVyZW07bWFyZ2luLWxlZnQ6MH0uZm9ybS1pbmxpbmUgLmN1c3RvbS1jb250cm9sey1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uZm9ybS1pbmxpbmUgLmN1c3RvbS1jb250cm9sLWxhYmVse21hcmdpbi1ib3R0b206MH19LmJ0bntkaXNwbGF5OmlubGluZS1ibG9jaztmb250LXdlaWdodDo0MDA7Y29sb3I6IzIxMjUyOTt0ZXh0LWFsaWduOmNlbnRlcjt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyOjFweCBzb2xpZCB0cmFuc3BhcmVudDtwYWRkaW5nOi4zNzVyZW0gLjc1cmVtO2ZvbnQtc2l6ZToxcmVtO2xpbmUtaGVpZ2h0OjEuNTtib3JkZXItcmFkaXVzOi4yNXJlbTt0cmFuc2l0aW9uOmNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYmFja2dyb3VuZC1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LGJvcmRlci1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LGJveC1zaGFkb3cgLjE1cyBlYXNlLWluLW91dH1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKXsuYnRue3RyYW5zaXRpb246bm9uZX19LmJ0bjpob3Zlcntjb2xvcjojMjEyNTI5O3RleHQtZGVjb3JhdGlvbjpub25lfS5idG4uZm9jdXMsLmJ0bjpmb2N1c3tvdXRsaW5lOjA7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDAsMTIzLDI1NSwuMjUpfS5idG4uZGlzYWJsZWQsLmJ0bjpkaXNhYmxlZHtvcGFjaXR5Oi42NX1hLmJ0bi5kaXNhYmxlZCxmaWVsZHNldDpkaXNhYmxlZCBhLmJ0bntwb2ludGVyLWV2ZW50czpub25lfS5idG4tcHJpbWFyeXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzAwN2JmZjtib3JkZXItY29sb3I6IzAwN2JmZn0uYnRuLXByaW1hcnk6aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMwMDY5ZDk7Ym9yZGVyLWNvbG9yOiMwMDYyY2N9LmJ0bi1wcmltYXJ5LmZvY3VzLC5idG4tcHJpbWFyeTpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMzgsMTQzLDI1NSwuNSl9LmJ0bi1wcmltYXJ5LmRpc2FibGVkLC5idG4tcHJpbWFyeTpkaXNhYmxlZHtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzAwN2JmZjtib3JkZXItY29sb3I6IzAwN2JmZn0uYnRuLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLC5idG4tcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsLnNob3c+LmJ0bi1wcmltYXJ5LmRyb3Bkb3duLXRvZ2dsZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzAwNjJjYztib3JkZXItY29sb3I6IzAwNWNiZn0uYnRuLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLC5idG4tcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsLnNob3c+LmJ0bi1wcmltYXJ5LmRyb3Bkb3duLXRvZ2dsZTpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMzgsMTQzLDI1NSwuNSl9LmJ0bi1zZWNvbmRhcnl7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiM2Yzc1N2Q7Ym9yZGVyLWNvbG9yOiM2Yzc1N2R9LmJ0bi1zZWNvbmRhcnk6aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiM1YTYyNjg7Ym9yZGVyLWNvbG9yOiM1NDViNjJ9LmJ0bi1zZWNvbmRhcnkuZm9jdXMsLmJ0bi1zZWNvbmRhcnk6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDEzMCwxMzgsMTQ1LC41KX0uYnRuLXNlY29uZGFyeS5kaXNhYmxlZCwuYnRuLXNlY29uZGFyeTpkaXNhYmxlZHtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzZjNzU3ZDtib3JkZXItY29sb3I6IzZjNzU3ZH0uYnRuLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsLmJ0bi1zZWNvbmRhcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLC5zaG93Pi5idG4tc2Vjb25kYXJ5LmRyb3Bkb3duLXRvZ2dsZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzU0NWI2Mjtib3JkZXItY29sb3I6IzRlNTU1Yn0uYnRuLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsLmJ0bi1zZWNvbmRhcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLC5zaG93Pi5idG4tc2Vjb25kYXJ5LmRyb3Bkb3duLXRvZ2dsZTpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMTMwLDEzOCwxNDUsLjUpfS5idG4tc3VjY2Vzc3tjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzI4YTc0NTtib3JkZXItY29sb3I6IzI4YTc0NX0uYnRuLXN1Y2Nlc3M6aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMyMTg4Mzg7Ym9yZGVyLWNvbG9yOiMxZTdlMzR9LmJ0bi1zdWNjZXNzLmZvY3VzLC5idG4tc3VjY2Vzczpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoNzIsMTgwLDk3LC41KX0uYnRuLXN1Y2Nlc3MuZGlzYWJsZWQsLmJ0bi1zdWNjZXNzOmRpc2FibGVke2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMjhhNzQ1O2JvcmRlci1jb2xvcjojMjhhNzQ1fS5idG4tc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsLmJ0bi1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwuc2hvdz4uYnRuLXN1Y2Nlc3MuZHJvcGRvd24tdG9nZ2xle2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMWU3ZTM0O2JvcmRlci1jb2xvcjojMWM3NDMwfS5idG4tc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsLmJ0bi1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywuc2hvdz4uYnRuLXN1Y2Nlc3MuZHJvcGRvd24tdG9nZ2xlOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSg3MiwxODAsOTcsLjUpfS5idG4taW5mb3tjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzE3YTJiODtib3JkZXItY29sb3I6IzE3YTJiOH0uYnRuLWluZm86aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMxMzg0OTY7Ym9yZGVyLWNvbG9yOiMxMTdhOGJ9LmJ0bi1pbmZvLmZvY3VzLC5idG4taW5mbzpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoNTgsMTc2LDE5NSwuNSl9LmJ0bi1pbmZvLmRpc2FibGVkLC5idG4taW5mbzpkaXNhYmxlZHtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzE3YTJiODtib3JkZXItY29sb3I6IzE3YTJiOH0uYnRuLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLC5idG4taW5mbzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsLnNob3c+LmJ0bi1pbmZvLmRyb3Bkb3duLXRvZ2dsZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzExN2E4Yjtib3JkZXItY29sb3I6IzEwNzA3Zn0uYnRuLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLC5idG4taW5mbzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsLnNob3c+LmJ0bi1pbmZvLmRyb3Bkb3duLXRvZ2dsZTpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoNTgsMTc2LDE5NSwuNSl9LmJ0bi13YXJuaW5ne2NvbG9yOiMyMTI1Mjk7YmFja2dyb3VuZC1jb2xvcjojZmZjMTA3O2JvcmRlci1jb2xvcjojZmZjMTA3fS5idG4td2FybmluZzpob3Zlcntjb2xvcjojMjEyNTI5O2JhY2tncm91bmQtY29sb3I6I2UwYTgwMDtib3JkZXItY29sb3I6I2QzOWUwMH0uYnRuLXdhcm5pbmcuZm9jdXMsLmJ0bi13YXJuaW5nOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyMjIsMTcwLDEyLC41KX0uYnRuLXdhcm5pbmcuZGlzYWJsZWQsLmJ0bi13YXJuaW5nOmRpc2FibGVke2NvbG9yOiMyMTI1Mjk7YmFja2dyb3VuZC1jb2xvcjojZmZjMTA3O2JvcmRlci1jb2xvcjojZmZjMTA3fS5idG4td2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsLmJ0bi13YXJuaW5nOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwuc2hvdz4uYnRuLXdhcm5pbmcuZHJvcGRvd24tdG9nZ2xle2NvbG9yOiMyMTI1Mjk7YmFja2dyb3VuZC1jb2xvcjojZDM5ZTAwO2JvcmRlci1jb2xvcjojYzY5NTAwfS5idG4td2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsLmJ0bi13YXJuaW5nOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywuc2hvdz4uYnRuLXdhcm5pbmcuZHJvcGRvd24tdG9nZ2xlOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyMjIsMTcwLDEyLC41KX0uYnRuLWRhbmdlcntjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2RjMzU0NTtib3JkZXItY29sb3I6I2RjMzU0NX0uYnRuLWRhbmdlcjpob3Zlcntjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2M4MjMzMztib3JkZXItY29sb3I6I2JkMjEzMH0uYnRuLWRhbmdlci5mb2N1cywuYnRuLWRhbmdlcjpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMjI1LDgzLDk3LC41KX0uYnRuLWRhbmdlci5kaXNhYmxlZCwuYnRuLWRhbmdlcjpkaXNhYmxlZHtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2RjMzU0NTtib3JkZXItY29sb3I6I2RjMzU0NX0uYnRuLWRhbmdlcjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsLmJ0bi1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLC5zaG93Pi5idG4tZGFuZ2VyLmRyb3Bkb3duLXRvZ2dsZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2JkMjEzMDtib3JkZXItY29sb3I6I2IyMWYyZH0uYnRuLWRhbmdlcjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsLmJ0bi1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLC5zaG93Pi5idG4tZGFuZ2VyLmRyb3Bkb3duLXRvZ2dsZTpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMjI1LDgzLDk3LC41KX0uYnRuLWxpZ2h0e2NvbG9yOiMyMTI1Mjk7YmFja2dyb3VuZC1jb2xvcjojZjhmOWZhO2JvcmRlci1jb2xvcjojZjhmOWZhfS5idG4tbGlnaHQ6aG92ZXJ7Y29sb3I6IzIxMjUyOTtiYWNrZ3JvdW5kLWNvbG9yOiNlMmU2ZWE7Ym9yZGVyLWNvbG9yOiNkYWUwZTV9LmJ0bi1saWdodC5mb2N1cywuYnRuLWxpZ2h0OmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyMTYsMjE3LDIxOSwuNSl9LmJ0bi1saWdodC5kaXNhYmxlZCwuYnRuLWxpZ2h0OmRpc2FibGVke2NvbG9yOiMyMTI1Mjk7YmFja2dyb3VuZC1jb2xvcjojZjhmOWZhO2JvcmRlci1jb2xvcjojZjhmOWZhfS5idG4tbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLC5idG4tbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLC5zaG93Pi5idG4tbGlnaHQuZHJvcGRvd24tdG9nZ2xle2NvbG9yOiMyMTI1Mjk7YmFja2dyb3VuZC1jb2xvcjojZGFlMGU1O2JvcmRlci1jb2xvcjojZDNkOWRmfS5idG4tbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLC5idG4tbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLC5zaG93Pi5idG4tbGlnaHQuZHJvcGRvd24tdG9nZ2xlOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyMTYsMjE3LDIxOSwuNSl9LmJ0bi1kYXJre2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMzQzYTQwO2JvcmRlci1jb2xvcjojMzQzYTQwfS5idG4tZGFyazpob3Zlcntjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzIzMjcyYjtib3JkZXItY29sb3I6IzFkMjEyNH0uYnRuLWRhcmsuZm9jdXMsLmJ0bi1kYXJrOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSg4Miw4OCw5MywuNSl9LmJ0bi1kYXJrLmRpc2FibGVkLC5idG4tZGFyazpkaXNhYmxlZHtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzM0M2E0MDtib3JkZXItY29sb3I6IzM0M2E0MH0uYnRuLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLC5idG4tZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsLnNob3c+LmJ0bi1kYXJrLmRyb3Bkb3duLXRvZ2dsZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzFkMjEyNDtib3JkZXItY29sb3I6IzE3MWExZH0uYnRuLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLC5idG4tZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsLnNob3c+LmJ0bi1kYXJrLmRyb3Bkb3duLXRvZ2dsZTpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoODIsODgsOTMsLjUpfS5idG4tb3V0bGluZS1wcmltYXJ5e2NvbG9yOiMwMDdiZmY7Ym9yZGVyLWNvbG9yOiMwMDdiZmZ9LmJ0bi1vdXRsaW5lLXByaW1hcnk6aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMwMDdiZmY7Ym9yZGVyLWNvbG9yOiMwMDdiZmZ9LmJ0bi1vdXRsaW5lLXByaW1hcnkuZm9jdXMsLmJ0bi1vdXRsaW5lLXByaW1hcnk6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDAsMTIzLDI1NSwuNSl9LmJ0bi1vdXRsaW5lLXByaW1hcnkuZGlzYWJsZWQsLmJ0bi1vdXRsaW5lLXByaW1hcnk6ZGlzYWJsZWR7Y29sb3I6IzAwN2JmZjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS5idG4tb3V0bGluZS1wcmltYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSwuYnRuLW91dGxpbmUtcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsLnNob3c+LmJ0bi1vdXRsaW5lLXByaW1hcnkuZHJvcGRvd24tdG9nZ2xle2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMDA3YmZmO2JvcmRlci1jb2xvcjojMDA3YmZmfS5idG4tb3V0bGluZS1wcmltYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cywuYnRuLW91dGxpbmUtcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsLnNob3c+LmJ0bi1vdXRsaW5lLXByaW1hcnkuZHJvcGRvd24tdG9nZ2xlOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgwLDEyMywyNTUsLjUpfS5idG4tb3V0bGluZS1zZWNvbmRhcnl7Y29sb3I6IzZjNzU3ZDtib3JkZXItY29sb3I6IzZjNzU3ZH0uYnRuLW91dGxpbmUtc2Vjb25kYXJ5OmhvdmVye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojNmM3NTdkO2JvcmRlci1jb2xvcjojNmM3NTdkfS5idG4tb3V0bGluZS1zZWNvbmRhcnkuZm9jdXMsLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMTA4LDExNywxMjUsLjUpfS5idG4tb3V0bGluZS1zZWNvbmRhcnkuZGlzYWJsZWQsLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpkaXNhYmxlZHtjb2xvcjojNmM3NTdkO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9LmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsLnNob3c+LmJ0bi1vdXRsaW5lLXNlY29uZGFyeS5kcm9wZG93bi10b2dnbGV7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiM2Yzc1N2Q7Ym9yZGVyLWNvbG9yOiM2Yzc1N2R9LmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsLnNob3c+LmJ0bi1vdXRsaW5lLXNlY29uZGFyeS5kcm9wZG93bi10b2dnbGU6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDEwOCwxMTcsMTI1LC41KX0uYnRuLW91dGxpbmUtc3VjY2Vzc3tjb2xvcjojMjhhNzQ1O2JvcmRlci1jb2xvcjojMjhhNzQ1fS5idG4tb3V0bGluZS1zdWNjZXNzOmhvdmVye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMjhhNzQ1O2JvcmRlci1jb2xvcjojMjhhNzQ1fS5idG4tb3V0bGluZS1zdWNjZXNzLmZvY3VzLC5idG4tb3V0bGluZS1zdWNjZXNzOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSg0MCwxNjcsNjksLjUpfS5idG4tb3V0bGluZS1zdWNjZXNzLmRpc2FibGVkLC5idG4tb3V0bGluZS1zdWNjZXNzOmRpc2FibGVke2NvbG9yOiMyOGE3NDU7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH0uYnRuLW91dGxpbmUtc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsLmJ0bi1vdXRsaW5lLXN1Y2Nlc3M6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLC5zaG93Pi5idG4tb3V0bGluZS1zdWNjZXNzLmRyb3Bkb3duLXRvZ2dsZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzI4YTc0NTtib3JkZXItY29sb3I6IzI4YTc0NX0uYnRuLW91dGxpbmUtc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsLmJ0bi1vdXRsaW5lLXN1Y2Nlc3M6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLC5zaG93Pi5idG4tb3V0bGluZS1zdWNjZXNzLmRyb3Bkb3duLXRvZ2dsZTpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoNDAsMTY3LDY5LC41KX0uYnRuLW91dGxpbmUtaW5mb3tjb2xvcjojMTdhMmI4O2JvcmRlci1jb2xvcjojMTdhMmI4fS5idG4tb3V0bGluZS1pbmZvOmhvdmVye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMTdhMmI4O2JvcmRlci1jb2xvcjojMTdhMmI4fS5idG4tb3V0bGluZS1pbmZvLmZvY3VzLC5idG4tb3V0bGluZS1pbmZvOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyMywxNjIsMTg0LC41KX0uYnRuLW91dGxpbmUtaW5mby5kaXNhYmxlZCwuYnRuLW91dGxpbmUtaW5mbzpkaXNhYmxlZHtjb2xvcjojMTdhMmI4O2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9LmJ0bi1vdXRsaW5lLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLC5idG4tb3V0bGluZS1pbmZvOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwuc2hvdz4uYnRuLW91dGxpbmUtaW5mby5kcm9wZG93bi10b2dnbGV7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMxN2EyYjg7Ym9yZGVyLWNvbG9yOiMxN2EyYjh9LmJ0bi1vdXRsaW5lLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLC5idG4tb3V0bGluZS1pbmZvOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywuc2hvdz4uYnRuLW91dGxpbmUtaW5mby5kcm9wZG93bi10b2dnbGU6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDIzLDE2MiwxODQsLjUpfS5idG4tb3V0bGluZS13YXJuaW5ne2NvbG9yOiNmZmMxMDc7Ym9yZGVyLWNvbG9yOiNmZmMxMDd9LmJ0bi1vdXRsaW5lLXdhcm5pbmc6aG92ZXJ7Y29sb3I6IzIxMjUyOTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmMxMDc7Ym9yZGVyLWNvbG9yOiNmZmMxMDd9LmJ0bi1vdXRsaW5lLXdhcm5pbmcuZm9jdXMsLmJ0bi1vdXRsaW5lLXdhcm5pbmc6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDI1NSwxOTMsNywuNSl9LmJ0bi1vdXRsaW5lLXdhcm5pbmcuZGlzYWJsZWQsLmJ0bi1vdXRsaW5lLXdhcm5pbmc6ZGlzYWJsZWR7Y29sb3I6I2ZmYzEwNztiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS5idG4tb3V0bGluZS13YXJuaW5nOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSwuYnRuLW91dGxpbmUtd2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsLnNob3c+LmJ0bi1vdXRsaW5lLXdhcm5pbmcuZHJvcGRvd24tdG9nZ2xle2NvbG9yOiMyMTI1Mjk7YmFja2dyb3VuZC1jb2xvcjojZmZjMTA3O2JvcmRlci1jb2xvcjojZmZjMTA3fS5idG4tb3V0bGluZS13YXJuaW5nOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cywuYnRuLW91dGxpbmUtd2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsLnNob3c+LmJ0bi1vdXRsaW5lLXdhcm5pbmcuZHJvcGRvd24tdG9nZ2xlOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyNTUsMTkzLDcsLjUpfS5idG4tb3V0bGluZS1kYW5nZXJ7Y29sb3I6I2RjMzU0NTtib3JkZXItY29sb3I6I2RjMzU0NX0uYnRuLW91dGxpbmUtZGFuZ2VyOmhvdmVye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojZGMzNTQ1O2JvcmRlci1jb2xvcjojZGMzNTQ1fS5idG4tb3V0bGluZS1kYW5nZXIuZm9jdXMsLmJ0bi1vdXRsaW5lLWRhbmdlcjpmb2N1c3tib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMjIwLDUzLDY5LC41KX0uYnRuLW91dGxpbmUtZGFuZ2VyLmRpc2FibGVkLC5idG4tb3V0bGluZS1kYW5nZXI6ZGlzYWJsZWR7Y29sb3I6I2RjMzU0NTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS5idG4tb3V0bGluZS1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLC5idG4tb3V0bGluZS1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLC5zaG93Pi5idG4tb3V0bGluZS1kYW5nZXIuZHJvcGRvd24tdG9nZ2xle2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojZGMzNTQ1O2JvcmRlci1jb2xvcjojZGMzNTQ1fS5idG4tb3V0bGluZS1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLC5idG4tb3V0bGluZS1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLC5zaG93Pi5idG4tb3V0bGluZS1kYW5nZXIuZHJvcGRvd24tdG9nZ2xlOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyMjAsNTMsNjksLjUpfS5idG4tb3V0bGluZS1saWdodHtjb2xvcjojZjhmOWZhO2JvcmRlci1jb2xvcjojZjhmOWZhfS5idG4tb3V0bGluZS1saWdodDpob3Zlcntjb2xvcjojMjEyNTI5O2JhY2tncm91bmQtY29sb3I6I2Y4ZjlmYTtib3JkZXItY29sb3I6I2Y4ZjlmYX0uYnRuLW91dGxpbmUtbGlnaHQuZm9jdXMsLmJ0bi1vdXRsaW5lLWxpZ2h0OmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyNDgsMjQ5LDI1MCwuNSl9LmJ0bi1vdXRsaW5lLWxpZ2h0LmRpc2FibGVkLC5idG4tb3V0bGluZS1saWdodDpkaXNhYmxlZHtjb2xvcjojZjhmOWZhO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9LmJ0bi1vdXRsaW5lLWxpZ2h0Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSwuYnRuLW91dGxpbmUtbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLC5zaG93Pi5idG4tb3V0bGluZS1saWdodC5kcm9wZG93bi10b2dnbGV7Y29sb3I6IzIxMjUyOTtiYWNrZ3JvdW5kLWNvbG9yOiNmOGY5ZmE7Ym9yZGVyLWNvbG9yOiNmOGY5ZmF9LmJ0bi1vdXRsaW5lLWxpZ2h0Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cywuYnRuLW91dGxpbmUtbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLC5zaG93Pi5idG4tb3V0bGluZS1saWdodC5kcm9wZG93bi10b2dnbGU6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDI0OCwyNDksMjUwLC41KX0uYnRuLW91dGxpbmUtZGFya3tjb2xvcjojMzQzYTQwO2JvcmRlci1jb2xvcjojMzQzYTQwfS5idG4tb3V0bGluZS1kYXJrOmhvdmVye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMzQzYTQwO2JvcmRlci1jb2xvcjojMzQzYTQwfS5idG4tb3V0bGluZS1kYXJrLmZvY3VzLC5idG4tb3V0bGluZS1kYXJrOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSg1Miw1OCw2NCwuNSl9LmJ0bi1vdXRsaW5lLWRhcmsuZGlzYWJsZWQsLmJ0bi1vdXRsaW5lLWRhcms6ZGlzYWJsZWR7Y29sb3I6IzM0M2E0MDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS5idG4tb3V0bGluZS1kYXJrOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSwuYnRuLW91dGxpbmUtZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsLnNob3c+LmJ0bi1vdXRsaW5lLWRhcmsuZHJvcGRvd24tdG9nZ2xle2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMzQzYTQwO2JvcmRlci1jb2xvcjojMzQzYTQwfS5idG4tb3V0bGluZS1kYXJrOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cywuYnRuLW91dGxpbmUtZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsLnNob3c+LmJ0bi1vdXRsaW5lLWRhcmsuZHJvcGRvd24tdG9nZ2xlOmZvY3Vze2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSg1Miw1OCw2NCwuNSl9LmJ0bi1saW5re2ZvbnQtd2VpZ2h0OjQwMDtjb2xvcjojMDA3YmZmO3RleHQtZGVjb3JhdGlvbjpub25lfS5idG4tbGluazpob3Zlcntjb2xvcjojMDA1NmIzO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmV9LmJ0bi1saW5rLmZvY3VzLC5idG4tbGluazpmb2N1c3t0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO2JveC1zaGFkb3c6bm9uZX0uYnRuLWxpbmsuZGlzYWJsZWQsLmJ0bi1saW5rOmRpc2FibGVke2NvbG9yOiM2Yzc1N2Q7cG9pbnRlci1ldmVudHM6bm9uZX0uYnRuLWdyb3VwLWxnPi5idG4sLmJ0bi1sZ3twYWRkaW5nOi41cmVtIDFyZW07Zm9udC1zaXplOjEuMjVyZW07bGluZS1oZWlnaHQ6MS41O2JvcmRlci1yYWRpdXM6LjNyZW19LmJ0bi1ncm91cC1zbT4uYnRuLC5idG4tc217cGFkZGluZzouMjVyZW0gLjVyZW07Zm9udC1zaXplOi44NzVyZW07bGluZS1oZWlnaHQ6MS41O2JvcmRlci1yYWRpdXM6LjJyZW19LmJ0bi1ibG9ja3tkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCV9LmJ0bi1ibG9jaysuYnRuLWJsb2Nre21hcmdpbi10b3A6LjVyZW19aW5wdXRbdHlwZT1idXR0b25dLmJ0bi1ibG9jayxpbnB1dFt0eXBlPXJlc2V0XS5idG4tYmxvY2ssaW5wdXRbdHlwZT1zdWJtaXRdLmJ0bi1ibG9ja3t3aWR0aDoxMDAlfS5mYWRle3RyYW5zaXRpb246b3BhY2l0eSAuMTVzIGxpbmVhcn1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKXsuZmFkZXt0cmFuc2l0aW9uOm5vbmV9fS5mYWRlOm5vdCguc2hvdyl7b3BhY2l0eTowfS5jb2xsYXBzZTpub3QoLnNob3cpe2Rpc3BsYXk6bm9uZX0uY29sbGFwc2luZ3twb3NpdGlvbjpyZWxhdGl2ZTtoZWlnaHQ6MDtvdmVyZmxvdzpoaWRkZW47dHJhbnNpdGlvbjpoZWlnaHQgLjM1cyBlYXNlfUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjpyZWR1Y2Upey5jb2xsYXBzaW5ne3RyYW5zaXRpb246bm9uZX19LmRyb3Bkb3duLC5kcm9wbGVmdCwuZHJvcHJpZ2h0LC5kcm9wdXB7cG9zaXRpb246cmVsYXRpdmV9LmRyb3Bkb3duLXRvZ2dsZXt3aGl0ZS1zcGFjZTpub3dyYXB9LmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXJ7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWxlZnQ6LjI1NWVtO3ZlcnRpY2FsLWFsaWduOi4yNTVlbTtjb250ZW50OlxcXCJcXFwiO2JvcmRlci10b3A6LjNlbSBzb2xpZDtib3JkZXItcmlnaHQ6LjNlbSBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjA7Ym9yZGVyLWxlZnQ6LjNlbSBzb2xpZCB0cmFuc3BhcmVudH0uZHJvcGRvd24tdG9nZ2xlOmVtcHR5OjphZnRlcnttYXJnaW4tbGVmdDowfS5kcm9wZG93bi1tZW51e3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO2xlZnQ6MDt6LWluZGV4OjEwMDA7ZGlzcGxheTpub25lO2Zsb2F0OmxlZnQ7bWluLXdpZHRoOjEwcmVtO3BhZGRpbmc6LjVyZW0gMDttYXJnaW46LjEyNXJlbSAwIDA7Zm9udC1zaXplOjFyZW07Y29sb3I6IzIxMjUyOTt0ZXh0LWFsaWduOmxlZnQ7bGlzdC1zdHlsZTpub25lO2JhY2tncm91bmQtY29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNsaXA6cGFkZGluZy1ib3g7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xNSk7Ym9yZGVyLXJhZGl1czouMjVyZW19LmRyb3Bkb3duLW1lbnUtbGVmdHtyaWdodDphdXRvO2xlZnQ6MH0uZHJvcGRvd24tbWVudS1yaWdodHtyaWdodDowO2xlZnQ6YXV0b31AbWVkaWEgKG1pbi13aWR0aDo1NzZweCl7LmRyb3Bkb3duLW1lbnUtc20tbGVmdHtyaWdodDphdXRvO2xlZnQ6MH0uZHJvcGRvd24tbWVudS1zbS1yaWdodHtyaWdodDowO2xlZnQ6YXV0b319QG1lZGlhIChtaW4td2lkdGg6NzY4cHgpey5kcm9wZG93bi1tZW51LW1kLWxlZnR7cmlnaHQ6YXV0bztsZWZ0OjB9LmRyb3Bkb3duLW1lbnUtbWQtcmlnaHR7cmlnaHQ6MDtsZWZ0OmF1dG99fUBtZWRpYSAobWluLXdpZHRoOjk5MnB4KXsuZHJvcGRvd24tbWVudS1sZy1sZWZ0e3JpZ2h0OmF1dG87bGVmdDowfS5kcm9wZG93bi1tZW51LWxnLXJpZ2h0e3JpZ2h0OjA7bGVmdDphdXRvfX1AbWVkaWEgKG1pbi13aWR0aDoxMjAwcHgpey5kcm9wZG93bi1tZW51LXhsLWxlZnR7cmlnaHQ6YXV0bztsZWZ0OjB9LmRyb3Bkb3duLW1lbnUteGwtcmlnaHR7cmlnaHQ6MDtsZWZ0OmF1dG99fS5kcm9wdXAgLmRyb3Bkb3duLW1lbnV7dG9wOmF1dG87Ym90dG9tOjEwMCU7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206LjEyNXJlbX0uZHJvcHVwIC5kcm9wZG93bi10b2dnbGU6OmFmdGVye2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbi1sZWZ0Oi4yNTVlbTt2ZXJ0aWNhbC1hbGlnbjouMjU1ZW07Y29udGVudDpcXFwiXFxcIjtib3JkZXItdG9wOjA7Ym9yZGVyLXJpZ2h0Oi4zZW0gc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWJvdHRvbTouM2VtIHNvbGlkO2JvcmRlci1sZWZ0Oi4zZW0gc29saWQgdHJhbnNwYXJlbnR9LmRyb3B1cCAuZHJvcGRvd24tdG9nZ2xlOmVtcHR5OjphZnRlcnttYXJnaW4tbGVmdDowfS5kcm9wcmlnaHQgLmRyb3Bkb3duLW1lbnV7dG9wOjA7cmlnaHQ6YXV0bztsZWZ0OjEwMCU7bWFyZ2luLXRvcDowO21hcmdpbi1sZWZ0Oi4xMjVyZW19LmRyb3ByaWdodCAuZHJvcGRvd24tdG9nZ2xlOjphZnRlcntkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tbGVmdDouMjU1ZW07dmVydGljYWwtYWxpZ246LjI1NWVtO2NvbnRlbnQ6XFxcIlxcXCI7Ym9yZGVyLXRvcDouM2VtIHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1yaWdodDowO2JvcmRlci1ib3R0b206LjNlbSBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItbGVmdDouM2VtIHNvbGlkfS5kcm9wcmlnaHQgLmRyb3Bkb3duLXRvZ2dsZTplbXB0eTo6YWZ0ZXJ7bWFyZ2luLWxlZnQ6MH0uZHJvcHJpZ2h0IC5kcm9wZG93bi10b2dnbGU6OmFmdGVye3ZlcnRpY2FsLWFsaWduOjB9LmRyb3BsZWZ0IC5kcm9wZG93bi1tZW51e3RvcDowO3JpZ2h0OjEwMCU7bGVmdDphdXRvO21hcmdpbi10b3A6MDttYXJnaW4tcmlnaHQ6LjEyNXJlbX0uZHJvcGxlZnQgLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXJ7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWxlZnQ6LjI1NWVtO3ZlcnRpY2FsLWFsaWduOi4yNTVlbTtjb250ZW50OlxcXCJcXFwifS5kcm9wbGVmdCAuZHJvcGRvd24tdG9nZ2xlOjphZnRlcntkaXNwbGF5Om5vbmV9LmRyb3BsZWZ0IC5kcm9wZG93bi10b2dnbGU6OmJlZm9yZXtkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tcmlnaHQ6LjI1NWVtO3ZlcnRpY2FsLWFsaWduOi4yNTVlbTtjb250ZW50OlxcXCJcXFwiO2JvcmRlci10b3A6LjNlbSBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6LjNlbSBzb2xpZDtib3JkZXItYm90dG9tOi4zZW0gc29saWQgdHJhbnNwYXJlbnR9LmRyb3BsZWZ0IC5kcm9wZG93bi10b2dnbGU6ZW1wdHk6OmFmdGVye21hcmdpbi1sZWZ0OjB9LmRyb3BsZWZ0IC5kcm9wZG93bi10b2dnbGU6OmJlZm9yZXt2ZXJ0aWNhbC1hbGlnbjowfS5kcm9wZG93bi1tZW51W3gtcGxhY2VtZW50Xj1ib3R0b21dLC5kcm9wZG93bi1tZW51W3gtcGxhY2VtZW50Xj1sZWZ0XSwuZHJvcGRvd24tbWVudVt4LXBsYWNlbWVudF49cmlnaHRdLC5kcm9wZG93bi1tZW51W3gtcGxhY2VtZW50Xj10b3Bde3JpZ2h0OmF1dG87Ym90dG9tOmF1dG99LmRyb3Bkb3duLWRpdmlkZXJ7aGVpZ2h0OjA7bWFyZ2luOi41cmVtIDA7b3ZlcmZsb3c6aGlkZGVuO2JvcmRlci10b3A6MXB4IHNvbGlkICNlOWVjZWZ9LmRyb3Bkb3duLWl0ZW17ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO3BhZGRpbmc6LjI1cmVtIDEuNXJlbTtjbGVhcjpib3RoO2ZvbnQtd2VpZ2h0OjQwMDtjb2xvcjojMjEyNTI5O3RleHQtYWxpZ246aW5oZXJpdDt3aGl0ZS1zcGFjZTpub3dyYXA7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXI6MH0uZHJvcGRvd24taXRlbTpmb2N1cywuZHJvcGRvd24taXRlbTpob3Zlcntjb2xvcjojMTYxODFiO3RleHQtZGVjb3JhdGlvbjpub25lO2JhY2tncm91bmQtY29sb3I6I2Y4ZjlmYX0uZHJvcGRvd24taXRlbS5hY3RpdmUsLmRyb3Bkb3duLWl0ZW06YWN0aXZle2NvbG9yOiNmZmY7dGV4dC1kZWNvcmF0aW9uOm5vbmU7YmFja2dyb3VuZC1jb2xvcjojMDA3YmZmfS5kcm9wZG93bi1pdGVtLmRpc2FibGVkLC5kcm9wZG93bi1pdGVtOmRpc2FibGVke2NvbG9yOiM2Yzc1N2Q7cG9pbnRlci1ldmVudHM6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS5kcm9wZG93bi1tZW51LnNob3d7ZGlzcGxheTpibG9ja30uZHJvcGRvd24taGVhZGVye2Rpc3BsYXk6YmxvY2s7cGFkZGluZzouNXJlbSAxLjVyZW07bWFyZ2luLWJvdHRvbTowO2ZvbnQtc2l6ZTouODc1cmVtO2NvbG9yOiM2Yzc1N2Q7d2hpdGUtc3BhY2U6bm93cmFwfS5kcm9wZG93bi1pdGVtLXRleHR7ZGlzcGxheTpibG9jaztwYWRkaW5nOi4yNXJlbSAxLjVyZW07Y29sb3I6IzIxMjUyOX0uYnRuLWdyb3VwLC5idG4tZ3JvdXAtdmVydGljYWx7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTotbXMtaW5saW5lLWZsZXhib3g7ZGlzcGxheTppbmxpbmUtZmxleDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LmJ0bi1ncm91cC12ZXJ0aWNhbD4uYnRuLC5idG4tZ3JvdXA+LmJ0bntwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleDoxIDEgYXV0bztmbGV4OjEgMSBhdXRvfS5idG4tZ3JvdXAtdmVydGljYWw+LmJ0bjpob3ZlciwuYnRuLWdyb3VwPi5idG46aG92ZXJ7ei1pbmRleDoxfS5idG4tZ3JvdXAtdmVydGljYWw+LmJ0bi5hY3RpdmUsLmJ0bi1ncm91cC12ZXJ0aWNhbD4uYnRuOmFjdGl2ZSwuYnRuLWdyb3VwLXZlcnRpY2FsPi5idG46Zm9jdXMsLmJ0bi1ncm91cD4uYnRuLmFjdGl2ZSwuYnRuLWdyb3VwPi5idG46YWN0aXZlLC5idG4tZ3JvdXA+LmJ0bjpmb2N1c3t6LWluZGV4OjF9LmJ0bi10b29sYmFye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDstbXMtZmxleC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5idG4tdG9vbGJhciAuaW5wdXQtZ3JvdXB7d2lkdGg6YXV0b30uYnRuLWdyb3VwPi5idG4tZ3JvdXA6bm90KDpmaXJzdC1jaGlsZCksLmJ0bi1ncm91cD4uYnRuOm5vdCg6Zmlyc3QtY2hpbGQpe21hcmdpbi1sZWZ0Oi0xcHh9LmJ0bi1ncm91cD4uYnRuLWdyb3VwOm5vdCg6bGFzdC1jaGlsZCk+LmJ0biwuYnRuLWdyb3VwPi5idG46bm90KDpsYXN0LWNoaWxkKTpub3QoLmRyb3Bkb3duLXRvZ2dsZSl7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowfS5idG4tZ3JvdXA+LmJ0bi1ncm91cDpub3QoOmZpcnN0LWNoaWxkKT4uYnRuLC5idG4tZ3JvdXA+LmJ0bjpub3QoOmZpcnN0LWNoaWxkKXtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowfS5kcm9wZG93bi10b2dnbGUtc3BsaXR7cGFkZGluZy1yaWdodDouNTYyNXJlbTtwYWRkaW5nLWxlZnQ6LjU2MjVyZW19LmRyb3Bkb3duLXRvZ2dsZS1zcGxpdDo6YWZ0ZXIsLmRyb3ByaWdodCAuZHJvcGRvd24tdG9nZ2xlLXNwbGl0OjphZnRlciwuZHJvcHVwIC5kcm9wZG93bi10b2dnbGUtc3BsaXQ6OmFmdGVye21hcmdpbi1sZWZ0OjB9LmRyb3BsZWZ0IC5kcm9wZG93bi10b2dnbGUtc3BsaXQ6OmJlZm9yZXttYXJnaW4tcmlnaHQ6MH0uYnRuLWdyb3VwLXNtPi5idG4rLmRyb3Bkb3duLXRvZ2dsZS1zcGxpdCwuYnRuLXNtKy5kcm9wZG93bi10b2dnbGUtc3BsaXR7cGFkZGluZy1yaWdodDouMzc1cmVtO3BhZGRpbmctbGVmdDouMzc1cmVtfS5idG4tZ3JvdXAtbGc+LmJ0bisuZHJvcGRvd24tdG9nZ2xlLXNwbGl0LC5idG4tbGcrLmRyb3Bkb3duLXRvZ2dsZS1zcGxpdHtwYWRkaW5nLXJpZ2h0Oi43NXJlbTtwYWRkaW5nLWxlZnQ6Ljc1cmVtfS5idG4tZ3JvdXAtdmVydGljYWx7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47LW1zLWZsZXgtYWxpZ246c3RhcnQ7YWxpZ24taXRlbXM6ZmxleC1zdGFydDstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5idG4tZ3JvdXAtdmVydGljYWw+LmJ0biwuYnRuLWdyb3VwLXZlcnRpY2FsPi5idG4tZ3JvdXB7d2lkdGg6MTAwJX0uYnRuLWdyb3VwLXZlcnRpY2FsPi5idG4tZ3JvdXA6bm90KDpmaXJzdC1jaGlsZCksLmJ0bi1ncm91cC12ZXJ0aWNhbD4uYnRuOm5vdCg6Zmlyc3QtY2hpbGQpe21hcmdpbi10b3A6LTFweH0uYnRuLWdyb3VwLXZlcnRpY2FsPi5idG4tZ3JvdXA6bm90KDpsYXN0LWNoaWxkKT4uYnRuLC5idG4tZ3JvdXAtdmVydGljYWw+LmJ0bjpub3QoOmxhc3QtY2hpbGQpOm5vdCguZHJvcGRvd24tdG9nZ2xlKXtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MH0uYnRuLWdyb3VwLXZlcnRpY2FsPi5idG4tZ3JvdXA6bm90KDpmaXJzdC1jaGlsZCk+LmJ0biwuYnRuLWdyb3VwLXZlcnRpY2FsPi5idG46bm90KDpmaXJzdC1jaGlsZCl7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjB9LmJ0bi1ncm91cC10b2dnbGU+LmJ0biwuYnRuLWdyb3VwLXRvZ2dsZT4uYnRuLWdyb3VwPi5idG57bWFyZ2luLWJvdHRvbTowfS5idG4tZ3JvdXAtdG9nZ2xlPi5idG4gaW5wdXRbdHlwZT1jaGVja2JveF0sLmJ0bi1ncm91cC10b2dnbGU+LmJ0biBpbnB1dFt0eXBlPXJhZGlvXSwuYnRuLWdyb3VwLXRvZ2dsZT4uYnRuLWdyb3VwPi5idG4gaW5wdXRbdHlwZT1jaGVja2JveF0sLmJ0bi1ncm91cC10b2dnbGU+LmJ0bi1ncm91cD4uYnRuIGlucHV0W3R5cGU9cmFkaW9de3Bvc2l0aW9uOmFic29sdXRlO2NsaXA6cmVjdCgwLDAsMCwwKTtwb2ludGVyLWV2ZW50czpub25lfS5pbnB1dC1ncm91cHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXA7LW1zLWZsZXgtYWxpZ246c3RyZXRjaDthbGlnbi1pdGVtczpzdHJldGNoO3dpZHRoOjEwMCV9LmlucHV0LWdyb3VwPi5jdXN0b20tZmlsZSwuaW5wdXQtZ3JvdXA+LmN1c3RvbS1zZWxlY3QsLmlucHV0LWdyb3VwPi5mb3JtLWNvbnRyb2wsLmlucHV0LWdyb3VwPi5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0e3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4OjEgMSBhdXRvO2ZsZXg6MSAxIGF1dG87d2lkdGg6MSU7bWFyZ2luLWJvdHRvbTowfS5pbnB1dC1ncm91cD4uY3VzdG9tLWZpbGUrLmN1c3RvbS1maWxlLC5pbnB1dC1ncm91cD4uY3VzdG9tLWZpbGUrLmN1c3RvbS1zZWxlY3QsLmlucHV0LWdyb3VwPi5jdXN0b20tZmlsZSsuZm9ybS1jb250cm9sLC5pbnB1dC1ncm91cD4uY3VzdG9tLXNlbGVjdCsuY3VzdG9tLWZpbGUsLmlucHV0LWdyb3VwPi5jdXN0b20tc2VsZWN0Ky5jdXN0b20tc2VsZWN0LC5pbnB1dC1ncm91cD4uY3VzdG9tLXNlbGVjdCsuZm9ybS1jb250cm9sLC5pbnB1dC1ncm91cD4uZm9ybS1jb250cm9sKy5jdXN0b20tZmlsZSwuaW5wdXQtZ3JvdXA+LmZvcm0tY29udHJvbCsuY3VzdG9tLXNlbGVjdCwuaW5wdXQtZ3JvdXA+LmZvcm0tY29udHJvbCsuZm9ybS1jb250cm9sLC5pbnB1dC1ncm91cD4uZm9ybS1jb250cm9sLXBsYWludGV4dCsuY3VzdG9tLWZpbGUsLmlucHV0LWdyb3VwPi5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0Ky5jdXN0b20tc2VsZWN0LC5pbnB1dC1ncm91cD4uZm9ybS1jb250cm9sLXBsYWludGV4dCsuZm9ybS1jb250cm9se21hcmdpbi1sZWZ0Oi0xcHh9LmlucHV0LWdyb3VwPi5jdXN0b20tZmlsZSAuY3VzdG9tLWZpbGUtaW5wdXQ6Zm9jdXN+LmN1c3RvbS1maWxlLWxhYmVsLC5pbnB1dC1ncm91cD4uY3VzdG9tLXNlbGVjdDpmb2N1cywuaW5wdXQtZ3JvdXA+LmZvcm0tY29udHJvbDpmb2N1c3t6LWluZGV4OjN9LmlucHV0LWdyb3VwPi5jdXN0b20tZmlsZSAuY3VzdG9tLWZpbGUtaW5wdXQ6Zm9jdXN7ei1pbmRleDo0fS5pbnB1dC1ncm91cD4uY3VzdG9tLXNlbGVjdDpub3QoOmxhc3QtY2hpbGQpLC5pbnB1dC1ncm91cD4uZm9ybS1jb250cm9sOm5vdCg6bGFzdC1jaGlsZCl7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowfS5pbnB1dC1ncm91cD4uY3VzdG9tLXNlbGVjdDpub3QoOmZpcnN0LWNoaWxkKSwuaW5wdXQtZ3JvdXA+LmZvcm0tY29udHJvbDpub3QoOmZpcnN0LWNoaWxkKXtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowfS5pbnB1dC1ncm91cD4uY3VzdG9tLWZpbGV7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0uaW5wdXQtZ3JvdXA+LmN1c3RvbS1maWxlOm5vdCg6bGFzdC1jaGlsZCkgLmN1c3RvbS1maWxlLWxhYmVsLC5pbnB1dC1ncm91cD4uY3VzdG9tLWZpbGU6bm90KDpsYXN0LWNoaWxkKSAuY3VzdG9tLWZpbGUtbGFiZWw6OmFmdGVye2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MH0uaW5wdXQtZ3JvdXA+LmN1c3RvbS1maWxlOm5vdCg6Zmlyc3QtY2hpbGQpIC5jdXN0b20tZmlsZS1sYWJlbHtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowfS5pbnB1dC1ncm91cC1hcHBlbmQsLmlucHV0LWdyb3VwLXByZXBlbmR7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXh9LmlucHV0LWdyb3VwLWFwcGVuZCAuYnRuLC5pbnB1dC1ncm91cC1wcmVwZW5kIC5idG57cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoyfS5pbnB1dC1ncm91cC1hcHBlbmQgLmJ0bjpmb2N1cywuaW5wdXQtZ3JvdXAtcHJlcGVuZCAuYnRuOmZvY3Vze3otaW5kZXg6M30uaW5wdXQtZ3JvdXAtYXBwZW5kIC5idG4rLmJ0biwuaW5wdXQtZ3JvdXAtYXBwZW5kIC5idG4rLmlucHV0LWdyb3VwLXRleHQsLmlucHV0LWdyb3VwLWFwcGVuZCAuaW5wdXQtZ3JvdXAtdGV4dCsuYnRuLC5pbnB1dC1ncm91cC1hcHBlbmQgLmlucHV0LWdyb3VwLXRleHQrLmlucHV0LWdyb3VwLXRleHQsLmlucHV0LWdyb3VwLXByZXBlbmQgLmJ0bisuYnRuLC5pbnB1dC1ncm91cC1wcmVwZW5kIC5idG4rLmlucHV0LWdyb3VwLXRleHQsLmlucHV0LWdyb3VwLXByZXBlbmQgLmlucHV0LWdyb3VwLXRleHQrLmJ0biwuaW5wdXQtZ3JvdXAtcHJlcGVuZCAuaW5wdXQtZ3JvdXAtdGV4dCsuaW5wdXQtZ3JvdXAtdGV4dHttYXJnaW4tbGVmdDotMXB4fS5pbnB1dC1ncm91cC1wcmVwZW5ke21hcmdpbi1yaWdodDotMXB4fS5pbnB1dC1ncm91cC1hcHBlbmR7bWFyZ2luLWxlZnQ6LTFweH0uaW5wdXQtZ3JvdXAtdGV4dHtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO3BhZGRpbmc6LjM3NXJlbSAuNzVyZW07bWFyZ2luLWJvdHRvbTowO2ZvbnQtc2l6ZToxcmVtO2ZvbnQtd2VpZ2h0OjQwMDtsaW5lLWhlaWdodDoxLjU7Y29sb3I6IzQ5NTA1Nzt0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpub3dyYXA7YmFja2dyb3VuZC1jb2xvcjojZTllY2VmO2JvcmRlcjoxcHggc29saWQgI2NlZDRkYTtib3JkZXItcmFkaXVzOi4yNXJlbX0uaW5wdXQtZ3JvdXAtdGV4dCBpbnB1dFt0eXBlPWNoZWNrYm94XSwuaW5wdXQtZ3JvdXAtdGV4dCBpbnB1dFt0eXBlPXJhZGlvXXttYXJnaW4tdG9wOjB9LmlucHV0LWdyb3VwLWxnPi5jdXN0b20tc2VsZWN0LC5pbnB1dC1ncm91cC1sZz4uZm9ybS1jb250cm9sOm5vdCh0ZXh0YXJlYSl7aGVpZ2h0OmNhbGMoMS41ZW0gKyAxcmVtICsgMnB4KX0uaW5wdXQtZ3JvdXAtbGc+LmN1c3RvbS1zZWxlY3QsLmlucHV0LWdyb3VwLWxnPi5mb3JtLWNvbnRyb2wsLmlucHV0LWdyb3VwLWxnPi5pbnB1dC1ncm91cC1hcHBlbmQ+LmJ0biwuaW5wdXQtZ3JvdXAtbGc+LmlucHV0LWdyb3VwLWFwcGVuZD4uaW5wdXQtZ3JvdXAtdGV4dCwuaW5wdXQtZ3JvdXAtbGc+LmlucHV0LWdyb3VwLXByZXBlbmQ+LmJ0biwuaW5wdXQtZ3JvdXAtbGc+LmlucHV0LWdyb3VwLXByZXBlbmQ+LmlucHV0LWdyb3VwLXRleHR7cGFkZGluZzouNXJlbSAxcmVtO2ZvbnQtc2l6ZToxLjI1cmVtO2xpbmUtaGVpZ2h0OjEuNTtib3JkZXItcmFkaXVzOi4zcmVtfS5pbnB1dC1ncm91cC1zbT4uY3VzdG9tLXNlbGVjdCwuaW5wdXQtZ3JvdXAtc20+LmZvcm0tY29udHJvbDpub3QodGV4dGFyZWEpe2hlaWdodDpjYWxjKDEuNWVtICsgLjVyZW0gKyAycHgpfS5pbnB1dC1ncm91cC1zbT4uY3VzdG9tLXNlbGVjdCwuaW5wdXQtZ3JvdXAtc20+LmZvcm0tY29udHJvbCwuaW5wdXQtZ3JvdXAtc20+LmlucHV0LWdyb3VwLWFwcGVuZD4uYnRuLC5pbnB1dC1ncm91cC1zbT4uaW5wdXQtZ3JvdXAtYXBwZW5kPi5pbnB1dC1ncm91cC10ZXh0LC5pbnB1dC1ncm91cC1zbT4uaW5wdXQtZ3JvdXAtcHJlcGVuZD4uYnRuLC5pbnB1dC1ncm91cC1zbT4uaW5wdXQtZ3JvdXAtcHJlcGVuZD4uaW5wdXQtZ3JvdXAtdGV4dHtwYWRkaW5nOi4yNXJlbSAuNXJlbTtmb250LXNpemU6Ljg3NXJlbTtsaW5lLWhlaWdodDoxLjU7Ym9yZGVyLXJhZGl1czouMnJlbX0uaW5wdXQtZ3JvdXAtbGc+LmN1c3RvbS1zZWxlY3QsLmlucHV0LWdyb3VwLXNtPi5jdXN0b20tc2VsZWN0e3BhZGRpbmctcmlnaHQ6MS43NXJlbX0uaW5wdXQtZ3JvdXA+LmlucHV0LWdyb3VwLWFwcGVuZDpsYXN0LWNoaWxkPi5idG46bm90KDpsYXN0LWNoaWxkKTpub3QoLmRyb3Bkb3duLXRvZ2dsZSksLmlucHV0LWdyb3VwPi5pbnB1dC1ncm91cC1hcHBlbmQ6bGFzdC1jaGlsZD4uaW5wdXQtZ3JvdXAtdGV4dDpub3QoOmxhc3QtY2hpbGQpLC5pbnB1dC1ncm91cD4uaW5wdXQtZ3JvdXAtYXBwZW5kOm5vdCg6bGFzdC1jaGlsZCk+LmJ0biwuaW5wdXQtZ3JvdXA+LmlucHV0LWdyb3VwLWFwcGVuZDpub3QoOmxhc3QtY2hpbGQpPi5pbnB1dC1ncm91cC10ZXh0LC5pbnB1dC1ncm91cD4uaW5wdXQtZ3JvdXAtcHJlcGVuZD4uYnRuLC5pbnB1dC1ncm91cD4uaW5wdXQtZ3JvdXAtcHJlcGVuZD4uaW5wdXQtZ3JvdXAtdGV4dHtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czowO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjB9LmlucHV0LWdyb3VwPi5pbnB1dC1ncm91cC1hcHBlbmQ+LmJ0biwuaW5wdXQtZ3JvdXA+LmlucHV0LWdyb3VwLWFwcGVuZD4uaW5wdXQtZ3JvdXAtdGV4dCwuaW5wdXQtZ3JvdXA+LmlucHV0LWdyb3VwLXByZXBlbmQ6Zmlyc3QtY2hpbGQ+LmJ0bjpub3QoOmZpcnN0LWNoaWxkKSwuaW5wdXQtZ3JvdXA+LmlucHV0LWdyb3VwLXByZXBlbmQ6Zmlyc3QtY2hpbGQ+LmlucHV0LWdyb3VwLXRleHQ6bm90KDpmaXJzdC1jaGlsZCksLmlucHV0LWdyb3VwPi5pbnB1dC1ncm91cC1wcmVwZW5kOm5vdCg6Zmlyc3QtY2hpbGQpPi5idG4sLmlucHV0LWdyb3VwPi5pbnB1dC1ncm91cC1wcmVwZW5kOm5vdCg6Zmlyc3QtY2hpbGQpPi5pbnB1dC1ncm91cC10ZXh0e2JvcmRlci10b3AtbGVmdC1yYWRpdXM6MDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjB9LmN1c3RvbS1jb250cm9se3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7bWluLWhlaWdodDoxLjVyZW07cGFkZGluZy1sZWZ0OjEuNXJlbX0uY3VzdG9tLWNvbnRyb2wtaW5saW5le2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6aW5saW5lLWZsZXg7bWFyZ2luLXJpZ2h0OjFyZW19LmN1c3RvbS1jb250cm9sLWlucHV0e3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6LTE7b3BhY2l0eTowfS5jdXN0b20tY29udHJvbC1pbnB1dDpjaGVja2Vkfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3Jle2NvbG9yOiNmZmY7Ym9yZGVyLWNvbG9yOiMwMDdiZmY7YmFja2dyb3VuZC1jb2xvcjojMDA3YmZmfS5jdXN0b20tY29udHJvbC1pbnB1dDpmb2N1c34uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZXtib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMCwxMjMsMjU1LC4yNSl9LmN1c3RvbS1jb250cm9sLWlucHV0OmZvY3VzOm5vdCg6Y2hlY2tlZCl+LmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmV7Ym9yZGVyLWNvbG9yOiM4MGJkZmZ9LmN1c3RvbS1jb250cm9sLWlucHV0Om5vdCg6ZGlzYWJsZWQpOmFjdGl2ZX4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2IzZDdmZjtib3JkZXItY29sb3I6I2IzZDdmZn0uY3VzdG9tLWNvbnRyb2wtaW5wdXQ6ZGlzYWJsZWR+LmN1c3RvbS1jb250cm9sLWxhYmVse2NvbG9yOiM2Yzc1N2R9LmN1c3RvbS1jb250cm9sLWlucHV0OmRpc2FibGVkfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3Jle2JhY2tncm91bmQtY29sb3I6I2U5ZWNlZn0uY3VzdG9tLWNvbnRyb2wtbGFiZWx7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWJvdHRvbTowO3ZlcnRpY2FsLWFsaWduOnRvcH0uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LjI1cmVtO2xlZnQ6LTEuNXJlbTtkaXNwbGF5OmJsb2NrO3dpZHRoOjFyZW07aGVpZ2h0OjFyZW07cG9pbnRlci1ldmVudHM6bm9uZTtjb250ZW50OlxcXCJcXFwiO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6I2FkYjViZCBzb2xpZCAxcHh9LmN1c3RvbS1jb250cm9sLWxhYmVsOjphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LjI1cmVtO2xlZnQ6LTEuNXJlbTtkaXNwbGF5OmJsb2NrO3dpZHRoOjFyZW07aGVpZ2h0OjFyZW07Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kOm5vLXJlcGVhdCA1MCUvNTAlIDUwJX0uY3VzdG9tLWNoZWNrYm94IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3Jle2JvcmRlci1yYWRpdXM6LjI1cmVtfS5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmNoZWNrZWR+LmN1c3RvbS1jb250cm9sLWxhYmVsOjphZnRlcntiYWNrZ3JvdW5kLWltYWdlOnVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA4IDgnJTNlJTNjcGF0aCBmaWxsPSclMjNmZmYnIGQ9J002LjU2NC43NWwtMy41OSAzLjYxMi0xLjUzOC0xLjU1TDAgNC4yNiAyLjk3NCA3LjI1IDggMi4xOTN6Jy8lM2UlM2Mvc3ZnJTNlXFxcIil9LmN1c3RvbS1jaGVja2JveCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW5kZXRlcm1pbmF0ZX4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZXtib3JkZXItY29sb3I6IzAwN2JmZjtiYWNrZ3JvdW5kLWNvbG9yOiMwMDdiZmZ9LmN1c3RvbS1jaGVja2JveCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW5kZXRlcm1pbmF0ZX4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmFmdGVye2JhY2tncm91bmQtaW1hZ2U6dXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQgNCclM2UlM2NwYXRoIHN0cm9rZT0nJTIzZmZmJyBkPSdNMCAyaDQnLyUzZSUzYy9zdmclM2VcXFwiKX0uY3VzdG9tLWNoZWNrYm94IC5jdXN0b20tY29udHJvbC1pbnB1dDpkaXNhYmxlZDpjaGVja2Vkfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3Jle2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDEyMywyNTUsLjUpfS5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmRpc2FibGVkOmluZGV0ZXJtaW5hdGV+LmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmV7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMTIzLDI1NSwuNSl9LmN1c3RvbS1yYWRpbyAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZXtib3JkZXItcmFkaXVzOjUwJX0uY3VzdG9tLXJhZGlvIC5jdXN0b20tY29udHJvbC1pbnB1dDpjaGVja2Vkfi5jdXN0b20tY29udHJvbC1sYWJlbDo6YWZ0ZXJ7YmFja2dyb3VuZC1pbWFnZTp1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PSctNCAtNCA4IDgnJTNlJTNjY2lyY2xlIHI9JzMnIGZpbGw9JyUyM2ZmZicvJTNlJTNjL3N2ZyUzZVxcXCIpfS5jdXN0b20tcmFkaW8gLmN1c3RvbS1jb250cm9sLWlucHV0OmRpc2FibGVkOmNoZWNrZWR+LmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmV7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMTIzLDI1NSwuNSl9LmN1c3RvbS1zd2l0Y2h7cGFkZGluZy1sZWZ0OjIuMjVyZW19LmN1c3RvbS1zd2l0Y2ggLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmV7bGVmdDotMi4yNXJlbTt3aWR0aDoxLjc1cmVtO3BvaW50ZXItZXZlbnRzOmFsbDtib3JkZXItcmFkaXVzOi41cmVtfS5jdXN0b20tc3dpdGNoIC5jdXN0b20tY29udHJvbC1sYWJlbDo6YWZ0ZXJ7dG9wOmNhbGMoLjI1cmVtICsgMnB4KTtsZWZ0OmNhbGMoLTIuMjVyZW0gKyAycHgpO3dpZHRoOmNhbGMoMXJlbSAtIDRweCk7aGVpZ2h0OmNhbGMoMXJlbSAtIDRweCk7YmFja2dyb3VuZC1jb2xvcjojYWRiNWJkO2JvcmRlci1yYWRpdXM6LjVyZW07dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm9yZGVyLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm94LXNoYWRvdyAuMTVzIGVhc2UtaW4tb3V0LC13ZWJraXQtdHJhbnNmb3JtIC4xNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjE1cyBlYXNlLWluLW91dCxiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm9yZGVyLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm94LXNoYWRvdyAuMTVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4xNXMgZWFzZS1pbi1vdXQsYmFja2dyb3VuZC1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LGJvcmRlci1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LGJveC1zaGFkb3cgLjE1cyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMTVzIGVhc2UtaW4tb3V0fUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjpyZWR1Y2Upey5jdXN0b20tc3dpdGNoIC5jdXN0b20tY29udHJvbC1sYWJlbDo6YWZ0ZXJ7dHJhbnNpdGlvbjpub25lfX0uY3VzdG9tLXN3aXRjaCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6Y2hlY2tlZH4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmFmdGVye2JhY2tncm91bmQtY29sb3I6I2ZmZjstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC43NXJlbSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLjc1cmVtKX0uY3VzdG9tLXN3aXRjaCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6ZGlzYWJsZWQ6Y2hlY2tlZH4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZXtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwxMjMsMjU1LC41KX0uY3VzdG9tLXNlbGVjdHtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDoxMDAlO2hlaWdodDpjYWxjKDEuNWVtICsgLjc1cmVtICsgMnB4KTtwYWRkaW5nOi4zNzVyZW0gMS43NXJlbSAuMzc1cmVtIC43NXJlbTtmb250LXNpemU6MXJlbTtmb250LXdlaWdodDo0MDA7bGluZS1oZWlnaHQ6MS41O2NvbG9yOiM0OTUwNTc7dmVydGljYWwtYWxpZ246bWlkZGxlO2JhY2tncm91bmQ6dXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQgNSclM2UlM2NwYXRoIGZpbGw9JyUyMzM0M2E0MCcgZD0nTTIgMEwwIDJoNHptMCA1TDAgM2g0eicvJTNlJTNjL3N2ZyUzZVxcXCIpIG5vLXJlcGVhdCByaWdodCAuNzVyZW0gY2VudGVyLzhweCAxMHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNjZWQ0ZGE7Ym9yZGVyLXJhZGl1czouMjVyZW07LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lfS5jdXN0b20tc2VsZWN0OmZvY3Vze2JvcmRlci1jb2xvcjojODBiZGZmO291dGxpbmU6MDtib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMCwxMjMsMjU1LC4yNSl9LmN1c3RvbS1zZWxlY3Q6Zm9jdXM6Oi1tcy12YWx1ZXtjb2xvcjojNDk1MDU3O2JhY2tncm91bmQtY29sb3I6I2ZmZn0uY3VzdG9tLXNlbGVjdFttdWx0aXBsZV0sLmN1c3RvbS1zZWxlY3Rbc2l6ZV06bm90KFtzaXplPVxcXCIxXFxcIl0pe2hlaWdodDphdXRvO3BhZGRpbmctcmlnaHQ6Ljc1cmVtO2JhY2tncm91bmQtaW1hZ2U6bm9uZX0uY3VzdG9tLXNlbGVjdDpkaXNhYmxlZHtjb2xvcjojNmM3NTdkO2JhY2tncm91bmQtY29sb3I6I2U5ZWNlZn0uY3VzdG9tLXNlbGVjdDo6LW1zLWV4cGFuZHtkaXNwbGF5Om5vbmV9LmN1c3RvbS1zZWxlY3Qtc217aGVpZ2h0OmNhbGMoMS41ZW0gKyAuNXJlbSArIDJweCk7cGFkZGluZy10b3A6LjI1cmVtO3BhZGRpbmctYm90dG9tOi4yNXJlbTtwYWRkaW5nLWxlZnQ6LjVyZW07Zm9udC1zaXplOi44NzVyZW19LmN1c3RvbS1zZWxlY3QtbGd7aGVpZ2h0OmNhbGMoMS41ZW0gKyAxcmVtICsgMnB4KTtwYWRkaW5nLXRvcDouNXJlbTtwYWRkaW5nLWJvdHRvbTouNXJlbTtwYWRkaW5nLWxlZnQ6MXJlbTtmb250LXNpemU6MS4yNXJlbX0uY3VzdG9tLWZpbGV7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MTAwJTtoZWlnaHQ6Y2FsYygxLjVlbSArIC43NXJlbSArIDJweCk7bWFyZ2luLWJvdHRvbTowfS5jdXN0b20tZmlsZS1pbnB1dHtwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjI7d2lkdGg6MTAwJTtoZWlnaHQ6Y2FsYygxLjVlbSArIC43NXJlbSArIDJweCk7bWFyZ2luOjA7b3BhY2l0eTowfS5jdXN0b20tZmlsZS1pbnB1dDpmb2N1c34uY3VzdG9tLWZpbGUtbGFiZWx7Ym9yZGVyLWNvbG9yOiM4MGJkZmY7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDAsMTIzLDI1NSwuMjUpfS5jdXN0b20tZmlsZS1pbnB1dDpkaXNhYmxlZH4uY3VzdG9tLWZpbGUtbGFiZWx7YmFja2dyb3VuZC1jb2xvcjojZTllY2VmfS5jdXN0b20tZmlsZS1pbnB1dDpsYW5nKGVuKX4uY3VzdG9tLWZpbGUtbGFiZWw6OmFmdGVye2NvbnRlbnQ6XFxcIkJyb3dzZVxcXCJ9LmN1c3RvbS1maWxlLWlucHV0fi5jdXN0b20tZmlsZS1sYWJlbFtkYXRhLWJyb3dzZV06OmFmdGVye2NvbnRlbnQ6YXR0cihkYXRhLWJyb3dzZSl9LmN1c3RvbS1maWxlLWxhYmVse3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7bGVmdDowO3otaW5kZXg6MTtoZWlnaHQ6Y2FsYygxLjVlbSArIC43NXJlbSArIDJweCk7cGFkZGluZzouMzc1cmVtIC43NXJlbTtmb250LXdlaWdodDo0MDA7bGluZS1oZWlnaHQ6MS41O2NvbG9yOiM0OTUwNTc7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI2NlZDRkYTtib3JkZXItcmFkaXVzOi4yNXJlbX0uY3VzdG9tLWZpbGUtbGFiZWw6OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7ei1pbmRleDozO2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OmNhbGMoMS41ZW0gKyAuNzVyZW0pO3BhZGRpbmc6LjM3NXJlbSAuNzVyZW07bGluZS1oZWlnaHQ6MS41O2NvbG9yOiM0OTUwNTc7Y29udGVudDpcXFwiQnJvd3NlXFxcIjtiYWNrZ3JvdW5kLWNvbG9yOiNlOWVjZWY7Ym9yZGVyLWxlZnQ6aW5oZXJpdDtib3JkZXItcmFkaXVzOjAgLjI1cmVtIC4yNXJlbSAwfS5jdXN0b20tcmFuZ2V7d2lkdGg6MTAwJTtoZWlnaHQ6Y2FsYygxcmVtICsgLjRyZW0pO3BhZGRpbmc6MDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50Oy13ZWJraXQtYXBwZWFyYW5jZTpub25lOy1tb3otYXBwZWFyYW5jZTpub25lO2FwcGVhcmFuY2U6bm9uZX0uY3VzdG9tLXJhbmdlOmZvY3Vze291dGxpbmU6MH0uY3VzdG9tLXJhbmdlOmZvY3VzOjotd2Via2l0LXNsaWRlci10aHVtYntib3gtc2hhZG93OjAgMCAwIDFweCAjZmZmLDAgMCAwIC4ycmVtIHJnYmEoMCwxMjMsMjU1LC4yNSl9LmN1c3RvbS1yYW5nZTpmb2N1czo6LW1vei1yYW5nZS10aHVtYntib3gtc2hhZG93OjAgMCAwIDFweCAjZmZmLDAgMCAwIC4ycmVtIHJnYmEoMCwxMjMsMjU1LC4yNSl9LmN1c3RvbS1yYW5nZTpmb2N1czo6LW1zLXRodW1ie2JveC1zaGFkb3c6MCAwIDAgMXB4ICNmZmYsMCAwIDAgLjJyZW0gcmdiYSgwLDEyMywyNTUsLjI1KX0uY3VzdG9tLXJhbmdlOjotbW96LWZvY3VzLW91dGVye2JvcmRlcjowfS5jdXN0b20tcmFuZ2U6Oi13ZWJraXQtc2xpZGVyLXRodW1ie3dpZHRoOjFyZW07aGVpZ2h0OjFyZW07bWFyZ2luLXRvcDotLjI1cmVtO2JhY2tncm91bmQtY29sb3I6IzAwN2JmZjtib3JkZXI6MDtib3JkZXItcmFkaXVzOjFyZW07dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm9yZGVyLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm94LXNoYWRvdyAuMTVzIGVhc2UtaW4tb3V0Oy13ZWJraXQtYXBwZWFyYW5jZTpub25lO2FwcGVhcmFuY2U6bm9uZX1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKXsuY3VzdG9tLXJhbmdlOjotd2Via2l0LXNsaWRlci10aHVtYnt0cmFuc2l0aW9uOm5vbmV9fS5jdXN0b20tcmFuZ2U6Oi13ZWJraXQtc2xpZGVyLXRodW1iOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNiM2Q3ZmZ9LmN1c3RvbS1yYW5nZTo6LXdlYmtpdC1zbGlkZXItcnVubmFibGUtdHJhY2t7d2lkdGg6MTAwJTtoZWlnaHQ6LjVyZW07Y29sb3I6dHJhbnNwYXJlbnQ7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZC1jb2xvcjojZGVlMmU2O2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItcmFkaXVzOjFyZW19LmN1c3RvbS1yYW5nZTo6LW1vei1yYW5nZS10aHVtYnt3aWR0aDoxcmVtO2hlaWdodDoxcmVtO2JhY2tncm91bmQtY29sb3I6IzAwN2JmZjtib3JkZXI6MDtib3JkZXItcmFkaXVzOjFyZW07dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm9yZGVyLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm94LXNoYWRvdyAuMTVzIGVhc2UtaW4tb3V0Oy1tb3otYXBwZWFyYW5jZTpub25lO2FwcGVhcmFuY2U6bm9uZX1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKXsuY3VzdG9tLXJhbmdlOjotbW96LXJhbmdlLXRodW1ie3RyYW5zaXRpb246bm9uZX19LmN1c3RvbS1yYW5nZTo6LW1vei1yYW5nZS10aHVtYjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojYjNkN2ZmfS5jdXN0b20tcmFuZ2U6Oi1tb3otcmFuZ2UtdHJhY2t7d2lkdGg6MTAwJTtoZWlnaHQ6LjVyZW07Y29sb3I6dHJhbnNwYXJlbnQ7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZC1jb2xvcjojZGVlMmU2O2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItcmFkaXVzOjFyZW19LmN1c3RvbS1yYW5nZTo6LW1zLXRodW1ie3dpZHRoOjFyZW07aGVpZ2h0OjFyZW07bWFyZ2luLXRvcDowO21hcmdpbi1yaWdodDouMnJlbTttYXJnaW4tbGVmdDouMnJlbTtiYWNrZ3JvdW5kLWNvbG9yOiMwMDdiZmY7Ym9yZGVyOjA7Ym9yZGVyLXJhZGl1czoxcmVtO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LGJvcmRlci1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LGJveC1zaGFkb3cgLjE1cyBlYXNlLWluLW91dDthcHBlYXJhbmNlOm5vbmV9QG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOnJlZHVjZSl7LmN1c3RvbS1yYW5nZTo6LW1zLXRodW1ie3RyYW5zaXRpb246bm9uZX19LmN1c3RvbS1yYW5nZTo6LW1zLXRodW1iOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNiM2Q3ZmZ9LmN1c3RvbS1yYW5nZTo6LW1zLXRyYWNre3dpZHRoOjEwMCU7aGVpZ2h0Oi41cmVtO2NvbG9yOnRyYW5zcGFyZW50O2N1cnNvcjpwb2ludGVyO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci13aWR0aDouNXJlbX0uY3VzdG9tLXJhbmdlOjotbXMtZmlsbC1sb3dlcntiYWNrZ3JvdW5kLWNvbG9yOiNkZWUyZTY7Ym9yZGVyLXJhZGl1czoxcmVtfS5jdXN0b20tcmFuZ2U6Oi1tcy1maWxsLXVwcGVye21hcmdpbi1yaWdodDoxNXB4O2JhY2tncm91bmQtY29sb3I6I2RlZTJlNjtib3JkZXItcmFkaXVzOjFyZW19LmN1c3RvbS1yYW5nZTpkaXNhYmxlZDo6LXdlYmtpdC1zbGlkZXItdGh1bWJ7YmFja2dyb3VuZC1jb2xvcjojYWRiNWJkfS5jdXN0b20tcmFuZ2U6ZGlzYWJsZWQ6Oi13ZWJraXQtc2xpZGVyLXJ1bm5hYmxlLXRyYWNre2N1cnNvcjpkZWZhdWx0fS5jdXN0b20tcmFuZ2U6ZGlzYWJsZWQ6Oi1tb3otcmFuZ2UtdGh1bWJ7YmFja2dyb3VuZC1jb2xvcjojYWRiNWJkfS5jdXN0b20tcmFuZ2U6ZGlzYWJsZWQ6Oi1tb3otcmFuZ2UtdHJhY2t7Y3Vyc29yOmRlZmF1bHR9LmN1c3RvbS1yYW5nZTpkaXNhYmxlZDo6LW1zLXRodW1ie2JhY2tncm91bmQtY29sb3I6I2FkYjViZH0uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSwuY3VzdG9tLWZpbGUtbGFiZWwsLmN1c3RvbS1zZWxlY3R7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm9yZGVyLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYm94LXNoYWRvdyAuMTVzIGVhc2UtaW4tb3V0fUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjpyZWR1Y2Upey5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLC5jdXN0b20tZmlsZS1sYWJlbCwuY3VzdG9tLXNlbGVjdHt0cmFuc2l0aW9uOm5vbmV9fS5uYXZ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwO3BhZGRpbmctbGVmdDowO21hcmdpbi1ib3R0b206MDtsaXN0LXN0eWxlOm5vbmV9Lm5hdi1saW5re2Rpc3BsYXk6YmxvY2s7cGFkZGluZzouNXJlbSAxcmVtfS5uYXYtbGluazpmb2N1cywubmF2LWxpbms6aG92ZXJ7dGV4dC1kZWNvcmF0aW9uOm5vbmV9Lm5hdi1saW5rLmRpc2FibGVke2NvbG9yOiM2Yzc1N2Q7cG9pbnRlci1ldmVudHM6bm9uZTtjdXJzb3I6ZGVmYXVsdH0ubmF2LXRhYnN7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2RlZTJlNn0ubmF2LXRhYnMgLm5hdi1pdGVte21hcmdpbi1ib3R0b206LTFweH0ubmF2LXRhYnMgLm5hdi1saW5re2JvcmRlcjoxcHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czouMjVyZW07Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6LjI1cmVtfS5uYXYtdGFicyAubmF2LWxpbms6Zm9jdXMsLm5hdi10YWJzIC5uYXYtbGluazpob3Zlcntib3JkZXItY29sb3I6I2U5ZWNlZiAjZTllY2VmICNkZWUyZTZ9Lm5hdi10YWJzIC5uYXYtbGluay5kaXNhYmxlZHtjb2xvcjojNmM3NTdkO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50fS5uYXYtdGFicyAubmF2LWl0ZW0uc2hvdyAubmF2LWxpbmssLm5hdi10YWJzIC5uYXYtbGluay5hY3RpdmV7Y29sb3I6IzQ5NTA1NztiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyLWNvbG9yOiNkZWUyZTYgI2RlZTJlNiAjZmZmfS5uYXYtdGFicyAuZHJvcGRvd24tbWVudXttYXJnaW4tdG9wOi0xcHg7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjB9Lm5hdi1waWxscyAubmF2LWxpbmt7Ym9yZGVyLXJhZGl1czouMjVyZW19Lm5hdi1waWxscyAubmF2LWxpbmsuYWN0aXZlLC5uYXYtcGlsbHMgLnNob3c+Lm5hdi1saW5re2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMDA3YmZmfS5uYXYtZmlsbCAubmF2LWl0ZW17LW1zLWZsZXg6MSAxIGF1dG87ZmxleDoxIDEgYXV0bzt0ZXh0LWFsaWduOmNlbnRlcn0ubmF2LWp1c3RpZmllZCAubmF2LWl0ZW17LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MDtmbGV4LWJhc2lzOjA7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTt0ZXh0LWFsaWduOmNlbnRlcn0udGFiLWNvbnRlbnQ+LnRhYi1wYW5le2Rpc3BsYXk6bm9uZX0udGFiLWNvbnRlbnQ+LmFjdGl2ZXtkaXNwbGF5OmJsb2NrfS5uYXZiYXJ7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3BhZGRpbmc6LjVyZW0gMXJlbX0ubmF2YmFyPi5jb250YWluZXIsLm5hdmJhcj4uY29udGFpbmVyLWZsdWlke2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0ubmF2YmFyLWJyYW5ke2Rpc3BsYXk6aW5saW5lLWJsb2NrO3BhZGRpbmctdG9wOi4zMTI1cmVtO3BhZGRpbmctYm90dG9tOi4zMTI1cmVtO21hcmdpbi1yaWdodDoxcmVtO2ZvbnQtc2l6ZToxLjI1cmVtO2xpbmUtaGVpZ2h0OmluaGVyaXQ7d2hpdGUtc3BhY2U6bm93cmFwfS5uYXZiYXItYnJhbmQ6Zm9jdXMsLm5hdmJhci1icmFuZDpob3Zlcnt0ZXh0LWRlY29yYXRpb246bm9uZX0ubmF2YmFyLW5hdntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nLWxlZnQ6MDttYXJnaW4tYm90dG9tOjA7bGlzdC1zdHlsZTpub25lfS5uYXZiYXItbmF2IC5uYXYtbGlua3twYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy1sZWZ0OjB9Lm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnV7cG9zaXRpb246c3RhdGljO2Zsb2F0Om5vbmV9Lm5hdmJhci10ZXh0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO3BhZGRpbmctdG9wOi41cmVtO3BhZGRpbmctYm90dG9tOi41cmVtfS5uYXZiYXItY29sbGFwc2V7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MTAwJTtmbGV4LWJhc2lzOjEwMCU7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5uYXZiYXItdG9nZ2xlcntwYWRkaW5nOi4yNXJlbSAuNzVyZW07Zm9udC1zaXplOjEuMjVyZW07bGluZS1oZWlnaHQ6MTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjoxcHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXJhZGl1czouMjVyZW19Lm5hdmJhci10b2dnbGVyOmZvY3VzLC5uYXZiYXItdG9nZ2xlcjpob3Zlcnt0ZXh0LWRlY29yYXRpb246bm9uZX0ubmF2YmFyLXRvZ2dsZXItaWNvbntkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDoxLjVlbTtoZWlnaHQ6MS41ZW07dmVydGljYWwtYWxpZ246bWlkZGxlO2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZDpuby1yZXBlYXQgY2VudGVyIGNlbnRlcjtiYWNrZ3JvdW5kLXNpemU6MTAwJSAxMDAlfUBtZWRpYSAobWF4LXdpZHRoOjU3NS45OHB4KXsubmF2YmFyLWV4cGFuZC1zbT4uY29udGFpbmVyLC5uYXZiYXItZXhwYW5kLXNtPi5jb250YWluZXItZmx1aWR7cGFkZGluZy1yaWdodDowO3BhZGRpbmctbGVmdDowfX1AbWVkaWEgKG1pbi13aWR0aDo1NzZweCl7Lm5hdmJhci1leHBhbmQtc217LW1zLWZsZXgtZmxvdzpyb3cgbm93cmFwO2ZsZXgtZmxvdzpyb3cgbm93cmFwOy1tcy1mbGV4LXBhY2s6c3RhcnQ7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnR9Lm5hdmJhci1leHBhbmQtc20gLm5hdmJhci1uYXZ7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Lm5hdmJhci1leHBhbmQtc20gLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnV7cG9zaXRpb246YWJzb2x1dGV9Lm5hdmJhci1leHBhbmQtc20gLm5hdmJhci1uYXYgLm5hdi1saW5re3BhZGRpbmctcmlnaHQ6LjVyZW07cGFkZGluZy1sZWZ0Oi41cmVtfS5uYXZiYXItZXhwYW5kLXNtPi5jb250YWluZXIsLm5hdmJhci1leHBhbmQtc20+LmNvbnRhaW5lci1mbHVpZHstbXMtZmxleC13cmFwOm5vd3JhcDtmbGV4LXdyYXA6bm93cmFwfS5uYXZiYXItZXhwYW5kLXNtIC5uYXZiYXItY29sbGFwc2V7ZGlzcGxheTotbXMtZmxleGJveCFpbXBvcnRhbnQ7ZGlzcGxheTpmbGV4IWltcG9ydGFudDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTphdXRvO2ZsZXgtYmFzaXM6YXV0b30ubmF2YmFyLWV4cGFuZC1zbSAubmF2YmFyLXRvZ2dsZXJ7ZGlzcGxheTpub25lfX1AbWVkaWEgKG1heC13aWR0aDo3NjcuOThweCl7Lm5hdmJhci1leHBhbmQtbWQ+LmNvbnRhaW5lciwubmF2YmFyLWV4cGFuZC1tZD4uY29udGFpbmVyLWZsdWlke3BhZGRpbmctcmlnaHQ6MDtwYWRkaW5nLWxlZnQ6MH19QG1lZGlhIChtaW4td2lkdGg6NzY4cHgpey5uYXZiYXItZXhwYW5kLW1key1tcy1mbGV4LWZsb3c6cm93IG5vd3JhcDtmbGV4LWZsb3c6cm93IG5vd3JhcDstbXMtZmxleC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItbmF2ey1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93fS5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51e3Bvc2l0aW9uOmFic29sdXRlfS5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItbmF2IC5uYXYtbGlua3twYWRkaW5nLXJpZ2h0Oi41cmVtO3BhZGRpbmctbGVmdDouNXJlbX0ubmF2YmFyLWV4cGFuZC1tZD4uY29udGFpbmVyLC5uYXZiYXItZXhwYW5kLW1kPi5jb250YWluZXItZmx1aWR7LW1zLWZsZXgtd3JhcDpub3dyYXA7ZmxleC13cmFwOm5vd3JhcH0ubmF2YmFyLWV4cGFuZC1tZCAubmF2YmFyLWNvbGxhcHNle2Rpc3BsYXk6LW1zLWZsZXhib3ghaW1wb3J0YW50O2Rpc3BsYXk6ZmxleCFpbXBvcnRhbnQ7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6YXV0bztmbGV4LWJhc2lzOmF1dG99Lm5hdmJhci1leHBhbmQtbWQgLm5hdmJhci10b2dnbGVye2Rpc3BsYXk6bm9uZX19QG1lZGlhIChtYXgtd2lkdGg6OTkxLjk4cHgpey5uYXZiYXItZXhwYW5kLWxnPi5jb250YWluZXIsLm5hdmJhci1leHBhbmQtbGc+LmNvbnRhaW5lci1mbHVpZHtwYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy1sZWZ0OjB9fUBtZWRpYSAobWluLXdpZHRoOjk5MnB4KXsubmF2YmFyLWV4cGFuZC1sZ3stbXMtZmxleC1mbG93OnJvdyBub3dyYXA7ZmxleC1mbG93OnJvdyBub3dyYXA7LW1zLWZsZXgtcGFjazpzdGFydDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH0ubmF2YmFyLWV4cGFuZC1sZyAubmF2YmFyLW5hdnstbXMtZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtZGlyZWN0aW9uOnJvd30ubmF2YmFyLWV4cGFuZC1sZyAubmF2YmFyLW5hdiAuZHJvcGRvd24tbWVudXtwb3NpdGlvbjphYnNvbHV0ZX0ubmF2YmFyLWV4cGFuZC1sZyAubmF2YmFyLW5hdiAubmF2LWxpbmt7cGFkZGluZy1yaWdodDouNXJlbTtwYWRkaW5nLWxlZnQ6LjVyZW19Lm5hdmJhci1leHBhbmQtbGc+LmNvbnRhaW5lciwubmF2YmFyLWV4cGFuZC1sZz4uY29udGFpbmVyLWZsdWlkey1tcy1mbGV4LXdyYXA6bm93cmFwO2ZsZXgtd3JhcDpub3dyYXB9Lm5hdmJhci1leHBhbmQtbGcgLm5hdmJhci1jb2xsYXBzZXtkaXNwbGF5Oi1tcy1mbGV4Ym94IWltcG9ydGFudDtkaXNwbGF5OmZsZXghaW1wb3J0YW50Oy1tcy1mbGV4LXByZWZlcnJlZC1zaXplOmF1dG87ZmxleC1iYXNpczphdXRvfS5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItdG9nZ2xlcntkaXNwbGF5Om5vbmV9fUBtZWRpYSAobWF4LXdpZHRoOjExOTkuOThweCl7Lm5hdmJhci1leHBhbmQteGw+LmNvbnRhaW5lciwubmF2YmFyLWV4cGFuZC14bD4uY29udGFpbmVyLWZsdWlke3BhZGRpbmctcmlnaHQ6MDtwYWRkaW5nLWxlZnQ6MH19QG1lZGlhIChtaW4td2lkdGg6MTIwMHB4KXsubmF2YmFyLWV4cGFuZC14bHstbXMtZmxleC1mbG93OnJvdyBub3dyYXA7ZmxleC1mbG93OnJvdyBub3dyYXA7LW1zLWZsZXgtcGFjazpzdGFydDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH0ubmF2YmFyLWV4cGFuZC14bCAubmF2YmFyLW5hdnstbXMtZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtZGlyZWN0aW9uOnJvd30ubmF2YmFyLWV4cGFuZC14bCAubmF2YmFyLW5hdiAuZHJvcGRvd24tbWVudXtwb3NpdGlvbjphYnNvbHV0ZX0ubmF2YmFyLWV4cGFuZC14bCAubmF2YmFyLW5hdiAubmF2LWxpbmt7cGFkZGluZy1yaWdodDouNXJlbTtwYWRkaW5nLWxlZnQ6LjVyZW19Lm5hdmJhci1leHBhbmQteGw+LmNvbnRhaW5lciwubmF2YmFyLWV4cGFuZC14bD4uY29udGFpbmVyLWZsdWlkey1tcy1mbGV4LXdyYXA6bm93cmFwO2ZsZXgtd3JhcDpub3dyYXB9Lm5hdmJhci1leHBhbmQteGwgLm5hdmJhci1jb2xsYXBzZXtkaXNwbGF5Oi1tcy1mbGV4Ym94IWltcG9ydGFudDtkaXNwbGF5OmZsZXghaW1wb3J0YW50Oy1tcy1mbGV4LXByZWZlcnJlZC1zaXplOmF1dG87ZmxleC1iYXNpczphdXRvfS5uYXZiYXItZXhwYW5kLXhsIC5uYXZiYXItdG9nZ2xlcntkaXNwbGF5Om5vbmV9fS5uYXZiYXItZXhwYW5key1tcy1mbGV4LWZsb3c6cm93IG5vd3JhcDtmbGV4LWZsb3c6cm93IG5vd3JhcDstbXMtZmxleC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5uYXZiYXItZXhwYW5kPi5jb250YWluZXIsLm5hdmJhci1leHBhbmQ+LmNvbnRhaW5lci1mbHVpZHtwYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy1sZWZ0OjB9Lm5hdmJhci1leHBhbmQgLm5hdmJhci1uYXZ7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Lm5hdmJhci1leHBhbmQgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnV7cG9zaXRpb246YWJzb2x1dGV9Lm5hdmJhci1leHBhbmQgLm5hdmJhci1uYXYgLm5hdi1saW5re3BhZGRpbmctcmlnaHQ6LjVyZW07cGFkZGluZy1sZWZ0Oi41cmVtfS5uYXZiYXItZXhwYW5kPi5jb250YWluZXIsLm5hdmJhci1leHBhbmQ+LmNvbnRhaW5lci1mbHVpZHstbXMtZmxleC13cmFwOm5vd3JhcDtmbGV4LXdyYXA6bm93cmFwfS5uYXZiYXItZXhwYW5kIC5uYXZiYXItY29sbGFwc2V7ZGlzcGxheTotbXMtZmxleGJveCFpbXBvcnRhbnQ7ZGlzcGxheTpmbGV4IWltcG9ydGFudDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTphdXRvO2ZsZXgtYmFzaXM6YXV0b30ubmF2YmFyLWV4cGFuZCAubmF2YmFyLXRvZ2dsZXJ7ZGlzcGxheTpub25lfS5uYXZiYXItbGlnaHQgLm5hdmJhci1icmFuZHtjb2xvcjpyZ2JhKDAsMCwwLC45KX0ubmF2YmFyLWxpZ2h0IC5uYXZiYXItYnJhbmQ6Zm9jdXMsLm5hdmJhci1saWdodCAubmF2YmFyLWJyYW5kOmhvdmVye2NvbG9yOnJnYmEoMCwwLDAsLjkpfS5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLm5hdi1saW5re2NvbG9yOnJnYmEoMCwwLDAsLjUpfS5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLm5hdi1saW5rOmZvY3VzLC5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLm5hdi1saW5rOmhvdmVye2NvbG9yOnJnYmEoMCwwLDAsLjcpfS5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLm5hdi1saW5rLmRpc2FibGVke2NvbG9yOnJnYmEoMCwwLDAsLjMpfS5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLmFjdGl2ZT4ubmF2LWxpbmssLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsuYWN0aXZlLC5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLm5hdi1saW5rLnNob3csLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAuc2hvdz4ubmF2LWxpbmt7Y29sb3I6cmdiYSgwLDAsMCwuOSl9Lm5hdmJhci1saWdodCAubmF2YmFyLXRvZ2dsZXJ7Y29sb3I6cmdiYSgwLDAsMCwuNSk7Ym9yZGVyLWNvbG9yOnJnYmEoMCwwLDAsLjEpfS5uYXZiYXItbGlnaHQgLm5hdmJhci10b2dnbGVyLWljb257YmFja2dyb3VuZC1pbWFnZTp1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2Nzdmcgdmlld0JveD0nMCAwIDMwIDMwJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNlJTNjcGF0aCBzdHJva2U9J3JnYmEoMCwgMCwgMCwgMC41KScgc3Ryb2tlLXdpZHRoPScyJyBzdHJva2UtbGluZWNhcD0ncm91bmQnIHN0cm9rZS1taXRlcmxpbWl0PScxMCcgZD0nTTQgN2gyMk00IDE1aDIyTTQgMjNoMjInLyUzZSUzYy9zdmclM2VcXFwiKX0ubmF2YmFyLWxpZ2h0IC5uYXZiYXItdGV4dHtjb2xvcjpyZ2JhKDAsMCwwLC41KX0ubmF2YmFyLWxpZ2h0IC5uYXZiYXItdGV4dCBhe2NvbG9yOnJnYmEoMCwwLDAsLjkpfS5uYXZiYXItbGlnaHQgLm5hdmJhci10ZXh0IGE6Zm9jdXMsLm5hdmJhci1saWdodCAubmF2YmFyLXRleHQgYTpob3Zlcntjb2xvcjpyZ2JhKDAsMCwwLC45KX0ubmF2YmFyLWRhcmsgLm5hdmJhci1icmFuZHtjb2xvcjojZmZmfS5uYXZiYXItZGFyayAubmF2YmFyLWJyYW5kOmZvY3VzLC5uYXZiYXItZGFyayAubmF2YmFyLWJyYW5kOmhvdmVye2NvbG9yOiNmZmZ9Lm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGlua3tjb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LC41KX0ubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rOmZvY3VzLC5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAubmF2LWxpbms6aG92ZXJ7Y29sb3I6cmdiYSgyNTUsMjU1LDI1NSwuNzUpfS5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAubmF2LWxpbmsuZGlzYWJsZWR7Y29sb3I6cmdiYSgyNTUsMjU1LDI1NSwuMjUpfS5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAuYWN0aXZlPi5uYXYtbGluaywubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rLmFjdGl2ZSwubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rLnNob3csLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5zaG93Pi5uYXYtbGlua3tjb2xvcjojZmZmfS5uYXZiYXItZGFyayAubmF2YmFyLXRvZ2dsZXJ7Y29sb3I6cmdiYSgyNTUsMjU1LDI1NSwuNSk7Ym9yZGVyLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsLjEpfS5uYXZiYXItZGFyayAubmF2YmFyLXRvZ2dsZXItaWNvbntiYWNrZ3JvdW5kLWltYWdlOnVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB2aWV3Qm94PScwIDAgMzAgMzAnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM2UlM2NwYXRoIHN0cm9rZT0ncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyBzdHJva2Utd2lkdGg9JzInIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLW1pdGVybGltaXQ9JzEwJyBkPSdNNCA3aDIyTTQgMTVoMjJNNCAyM2gyMicvJTNlJTNjL3N2ZyUzZVxcXCIpfS5uYXZiYXItZGFyayAubmF2YmFyLXRleHR7Y29sb3I6cmdiYSgyNTUsMjU1LDI1NSwuNSl9Lm5hdmJhci1kYXJrIC5uYXZiYXItdGV4dCBhe2NvbG9yOiNmZmZ9Lm5hdmJhci1kYXJrIC5uYXZiYXItdGV4dCBhOmZvY3VzLC5uYXZiYXItZGFyayAubmF2YmFyLXRleHQgYTpob3Zlcntjb2xvcjojZmZmfS5jYXJke3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO21pbi13aWR0aDowO3dvcmQtd3JhcDpicmVhay13b3JkO2JhY2tncm91bmQtY29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNsaXA6Ym9yZGVyLWJveDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMCwwLDAsLjEyNSk7Ym9yZGVyLXJhZGl1czouMjVyZW19LmNhcmQ+aHJ7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLWxlZnQ6MH0uY2FyZD4ubGlzdC1ncm91cDpmaXJzdC1jaGlsZCAubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxke2JvcmRlci10b3AtbGVmdC1yYWRpdXM6LjI1cmVtO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOi4yNXJlbX0uY2FyZD4ubGlzdC1ncm91cDpsYXN0LWNoaWxkIC5saXN0LWdyb3VwLWl0ZW06bGFzdC1jaGlsZHtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czouMjVyZW07Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czouMjVyZW19LmNhcmQtYm9keXstbXMtZmxleDoxIDEgYXV0bztmbGV4OjEgMSBhdXRvO3BhZGRpbmc6MS4yNXJlbX0uY2FyZC10aXRsZXttYXJnaW4tYm90dG9tOi43NXJlbX0uY2FyZC1zdWJ0aXRsZXttYXJnaW4tdG9wOi0uMzc1cmVtO21hcmdpbi1ib3R0b206MH0uY2FyZC10ZXh0Omxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS5jYXJkLWxpbms6aG92ZXJ7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LmNhcmQtbGluaysuY2FyZC1saW5re21hcmdpbi1sZWZ0OjEuMjVyZW19LmNhcmQtaGVhZGVye3BhZGRpbmc6Ljc1cmVtIDEuMjVyZW07bWFyZ2luLWJvdHRvbTowO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuMDMpO2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHJnYmEoMCwwLDAsLjEyNSl9LmNhcmQtaGVhZGVyOmZpcnN0LWNoaWxke2JvcmRlci1yYWRpdXM6Y2FsYyguMjVyZW0gLSAxcHgpIGNhbGMoLjI1cmVtIC0gMXB4KSAwIDB9LmNhcmQtaGVhZGVyKy5saXN0LWdyb3VwIC5saXN0LWdyb3VwLWl0ZW06Zmlyc3QtY2hpbGR7Ym9yZGVyLXRvcDowfS5jYXJkLWZvb3RlcntwYWRkaW5nOi43NXJlbSAxLjI1cmVtO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuMDMpO2JvcmRlci10b3A6MXB4IHNvbGlkIHJnYmEoMCwwLDAsLjEyNSl9LmNhcmQtZm9vdGVyOmxhc3QtY2hpbGR7Ym9yZGVyLXJhZGl1czowIDAgY2FsYyguMjVyZW0gLSAxcHgpIGNhbGMoLjI1cmVtIC0gMXB4KX0uY2FyZC1oZWFkZXItdGFic3ttYXJnaW4tcmlnaHQ6LS42MjVyZW07bWFyZ2luLWJvdHRvbTotLjc1cmVtO21hcmdpbi1sZWZ0Oi0uNjI1cmVtO2JvcmRlci1ib3R0b206MH0uY2FyZC1oZWFkZXItcGlsbHN7bWFyZ2luLXJpZ2h0Oi0uNjI1cmVtO21hcmdpbi1sZWZ0Oi0uNjI1cmVtfS5jYXJkLWltZy1vdmVybGF5e3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO3BhZGRpbmc6MS4yNXJlbX0uY2FyZC1pbWd7d2lkdGg6MTAwJTtib3JkZXItcmFkaXVzOmNhbGMoLjI1cmVtIC0gMXB4KX0uY2FyZC1pbWctdG9we3dpZHRoOjEwMCU7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czpjYWxjKC4yNXJlbSAtIDFweCk7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6Y2FsYyguMjVyZW0gLSAxcHgpfS5jYXJkLWltZy1ib3R0b217d2lkdGg6MTAwJTtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czpjYWxjKC4yNXJlbSAtIDFweCk7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czpjYWxjKC4yNXJlbSAtIDFweCl9LmNhcmQtZGVja3tkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uY2FyZC1kZWNrIC5jYXJke21hcmdpbi1ib3R0b206MTVweH1AbWVkaWEgKG1pbi13aWR0aDo1NzZweCl7LmNhcmQtZGVja3stbXMtZmxleC1mbG93OnJvdyB3cmFwO2ZsZXgtZmxvdzpyb3cgd3JhcDttYXJnaW4tcmlnaHQ6LTE1cHg7bWFyZ2luLWxlZnQ6LTE1cHh9LmNhcmQtZGVjayAuY2FyZHtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleDoxIDAgMCU7ZmxleDoxIDAgMCU7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47bWFyZ2luLXJpZ2h0OjE1cHg7bWFyZ2luLWJvdHRvbTowO21hcmdpbi1sZWZ0OjE1cHh9fS5jYXJkLWdyb3Vwe2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5jYXJkLWdyb3VwPi5jYXJke21hcmdpbi1ib3R0b206MTVweH1AbWVkaWEgKG1pbi13aWR0aDo1NzZweCl7LmNhcmQtZ3JvdXB7LW1zLWZsZXgtZmxvdzpyb3cgd3JhcDtmbGV4LWZsb3c6cm93IHdyYXB9LmNhcmQtZ3JvdXA+LmNhcmR7LW1zLWZsZXg6MSAwIDAlO2ZsZXg6MSAwIDAlO21hcmdpbi1ib3R0b206MH0uY2FyZC1ncm91cD4uY2FyZCsuY2FyZHttYXJnaW4tbGVmdDowO2JvcmRlci1sZWZ0OjB9LmNhcmQtZ3JvdXA+LmNhcmQ6bm90KDpsYXN0LWNoaWxkKXtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czowO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjB9LmNhcmQtZ3JvdXA+LmNhcmQ6bm90KDpsYXN0LWNoaWxkKSAuY2FyZC1oZWFkZXIsLmNhcmQtZ3JvdXA+LmNhcmQ6bm90KDpsYXN0LWNoaWxkKSAuY2FyZC1pbWctdG9we2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjB9LmNhcmQtZ3JvdXA+LmNhcmQ6bm90KDpsYXN0LWNoaWxkKSAuY2FyZC1mb290ZXIsLmNhcmQtZ3JvdXA+LmNhcmQ6bm90KDpsYXN0LWNoaWxkKSAuY2FyZC1pbWctYm90dG9te2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjB9LmNhcmQtZ3JvdXA+LmNhcmQ6bm90KDpmaXJzdC1jaGlsZCl7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MH0uY2FyZC1ncm91cD4uY2FyZDpub3QoOmZpcnN0LWNoaWxkKSAuY2FyZC1oZWFkZXIsLmNhcmQtZ3JvdXA+LmNhcmQ6bm90KDpmaXJzdC1jaGlsZCkgLmNhcmQtaW1nLXRvcHtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjB9LmNhcmQtZ3JvdXA+LmNhcmQ6bm90KDpmaXJzdC1jaGlsZCkgLmNhcmQtZm9vdGVyLC5jYXJkLWdyb3VwPi5jYXJkOm5vdCg6Zmlyc3QtY2hpbGQpIC5jYXJkLWltZy1ib3R0b217Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowfX0uY2FyZC1jb2x1bW5zIC5jYXJke21hcmdpbi1ib3R0b206Ljc1cmVtfUBtZWRpYSAobWluLXdpZHRoOjU3NnB4KXsuY2FyZC1jb2x1bW5zey13ZWJraXQtY29sdW1uLWNvdW50OjM7LW1vei1jb2x1bW4tY291bnQ6Mztjb2x1bW4tY291bnQ6Mzstd2Via2l0LWNvbHVtbi1nYXA6MS4yNXJlbTstbW96LWNvbHVtbi1nYXA6MS4yNXJlbTtjb2x1bW4tZ2FwOjEuMjVyZW07b3JwaGFuczoxO3dpZG93czoxfS5jYXJkLWNvbHVtbnMgLmNhcmR7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MTAwJX19LmFjY29yZGlvbj4uY2FyZHtvdmVyZmxvdzpoaWRkZW59LmFjY29yZGlvbj4uY2FyZDpub3QoOmZpcnN0LW9mLXR5cGUpIC5jYXJkLWhlYWRlcjpmaXJzdC1jaGlsZHtib3JkZXItcmFkaXVzOjB9LmFjY29yZGlvbj4uY2FyZDpub3QoOmZpcnN0LW9mLXR5cGUpOm5vdCg6bGFzdC1vZi10eXBlKXtib3JkZXItYm90dG9tOjA7Ym9yZGVyLXJhZGl1czowfS5hY2NvcmRpb24+LmNhcmQ6Zmlyc3Qtb2YtdHlwZXtib3JkZXItYm90dG9tOjA7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjB9LmFjY29yZGlvbj4uY2FyZDpsYXN0LW9mLXR5cGV7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjB9LmFjY29yZGlvbj4uY2FyZCAuY2FyZC1oZWFkZXJ7bWFyZ2luLWJvdHRvbTotMXB4fS5icmVhZGNydW1ie2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDtwYWRkaW5nOi43NXJlbSAxcmVtO21hcmdpbi1ib3R0b206MXJlbTtsaXN0LXN0eWxlOm5vbmU7YmFja2dyb3VuZC1jb2xvcjojZTllY2VmO2JvcmRlci1yYWRpdXM6LjI1cmVtfS5icmVhZGNydW1iLWl0ZW0rLmJyZWFkY3J1bWItaXRlbXtwYWRkaW5nLWxlZnQ6LjVyZW19LmJyZWFkY3J1bWItaXRlbSsuYnJlYWRjcnVtYi1pdGVtOjpiZWZvcmV7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZy1yaWdodDouNXJlbTtjb2xvcjojNmM3NTdkO2NvbnRlbnQ6XFxcIi9cXFwifS5icmVhZGNydW1iLWl0ZW0rLmJyZWFkY3J1bWItaXRlbTpob3Zlcjo6YmVmb3Jle3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmV9LmJyZWFkY3J1bWItaXRlbSsuYnJlYWRjcnVtYi1pdGVtOmhvdmVyOjpiZWZvcmV7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LmJyZWFkY3J1bWItaXRlbS5hY3RpdmV7Y29sb3I6IzZjNzU3ZH0ucGFnaW5hdGlvbntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwYWRkaW5nLWxlZnQ6MDtsaXN0LXN0eWxlOm5vbmU7Ym9yZGVyLXJhZGl1czouMjVyZW19LnBhZ2UtbGlua3twb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6LjVyZW0gLjc1cmVtO21hcmdpbi1sZWZ0Oi0xcHg7bGluZS1oZWlnaHQ6MS4yNTtjb2xvcjojMDA3YmZmO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNkZWUyZTZ9LnBhZ2UtbGluazpob3Zlcnt6LWluZGV4OjI7Y29sb3I6IzAwNTZiMzt0ZXh0LWRlY29yYXRpb246bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiNlOWVjZWY7Ym9yZGVyLWNvbG9yOiNkZWUyZTZ9LnBhZ2UtbGluazpmb2N1c3t6LWluZGV4OjI7b3V0bGluZTowO2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgwLDEyMywyNTUsLjI1KX0ucGFnZS1pdGVtOmZpcnN0LWNoaWxkIC5wYWdlLWxpbmt7bWFyZ2luLWxlZnQ6MDtib3JkZXItdG9wLWxlZnQtcmFkaXVzOi4yNXJlbTtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOi4yNXJlbX0ucGFnZS1pdGVtOmxhc3QtY2hpbGQgLnBhZ2UtbGlua3tib3JkZXItdG9wLXJpZ2h0LXJhZGl1czouMjVyZW07Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6LjI1cmVtfS5wYWdlLWl0ZW0uYWN0aXZlIC5wYWdlLWxpbmt7ei1pbmRleDoxO2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMDA3YmZmO2JvcmRlci1jb2xvcjojMDA3YmZmfS5wYWdlLWl0ZW0uZGlzYWJsZWQgLnBhZ2UtbGlua3tjb2xvcjojNmM3NTdkO3BvaW50ZXItZXZlbnRzOm5vbmU7Y3Vyc29yOmF1dG87YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci1jb2xvcjojZGVlMmU2fS5wYWdpbmF0aW9uLWxnIC5wYWdlLWxpbmt7cGFkZGluZzouNzVyZW0gMS41cmVtO2ZvbnQtc2l6ZToxLjI1cmVtO2xpbmUtaGVpZ2h0OjEuNX0ucGFnaW5hdGlvbi1sZyAucGFnZS1pdGVtOmZpcnN0LWNoaWxkIC5wYWdlLWxpbmt7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czouM3JlbTtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOi4zcmVtfS5wYWdpbmF0aW9uLWxnIC5wYWdlLWl0ZW06bGFzdC1jaGlsZCAucGFnZS1saW5re2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOi4zcmVtO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOi4zcmVtfS5wYWdpbmF0aW9uLXNtIC5wYWdlLWxpbmt7cGFkZGluZzouMjVyZW0gLjVyZW07Zm9udC1zaXplOi44NzVyZW07bGluZS1oZWlnaHQ6MS41fS5wYWdpbmF0aW9uLXNtIC5wYWdlLWl0ZW06Zmlyc3QtY2hpbGQgLnBhZ2UtbGlua3tib3JkZXItdG9wLWxlZnQtcmFkaXVzOi4ycmVtO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6LjJyZW19LnBhZ2luYXRpb24tc20gLnBhZ2UtaXRlbTpsYXN0LWNoaWxkIC5wYWdlLWxpbmt7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6LjJyZW07Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6LjJyZW19LmJhZGdle2Rpc3BsYXk6aW5saW5lLWJsb2NrO3BhZGRpbmc6LjI1ZW0gLjRlbTtmb250LXNpemU6NzUlO2ZvbnQtd2VpZ2h0OjcwMDtsaW5lLWhlaWdodDoxO3RleHQtYWxpZ246Y2VudGVyO3doaXRlLXNwYWNlOm5vd3JhcDt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTtib3JkZXItcmFkaXVzOi4yNXJlbTt0cmFuc2l0aW9uOmNvbG9yIC4xNXMgZWFzZS1pbi1vdXQsYmFja2dyb3VuZC1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LGJvcmRlci1jb2xvciAuMTVzIGVhc2UtaW4tb3V0LGJveC1zaGFkb3cgLjE1cyBlYXNlLWluLW91dH1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKXsuYmFkZ2V7dHJhbnNpdGlvbjpub25lfX1hLmJhZGdlOmZvY3VzLGEuYmFkZ2U6aG92ZXJ7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LmJhZGdlOmVtcHR5e2Rpc3BsYXk6bm9uZX0uYnRuIC5iYWRnZXtwb3NpdGlvbjpyZWxhdGl2ZTt0b3A6LTFweH0uYmFkZ2UtcGlsbHtwYWRkaW5nLXJpZ2h0Oi42ZW07cGFkZGluZy1sZWZ0Oi42ZW07Ym9yZGVyLXJhZGl1czoxMHJlbX0uYmFkZ2UtcHJpbWFyeXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzAwN2JmZn1hLmJhZGdlLXByaW1hcnk6Zm9jdXMsYS5iYWRnZS1wcmltYXJ5OmhvdmVye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMDA2MmNjfWEuYmFkZ2UtcHJpbWFyeS5mb2N1cyxhLmJhZGdlLXByaW1hcnk6Zm9jdXN7b3V0bGluZTowO2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgwLDEyMywyNTUsLjUpfS5iYWRnZS1zZWNvbmRhcnl7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiM2Yzc1N2R9YS5iYWRnZS1zZWNvbmRhcnk6Zm9jdXMsYS5iYWRnZS1zZWNvbmRhcnk6aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiM1NDViNjJ9YS5iYWRnZS1zZWNvbmRhcnkuZm9jdXMsYS5iYWRnZS1zZWNvbmRhcnk6Zm9jdXN7b3V0bGluZTowO2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgxMDgsMTE3LDEyNSwuNSl9LmJhZGdlLXN1Y2Nlc3N7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMyOGE3NDV9YS5iYWRnZS1zdWNjZXNzOmZvY3VzLGEuYmFkZ2Utc3VjY2Vzczpob3Zlcntjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzFlN2UzNH1hLmJhZGdlLXN1Y2Nlc3MuZm9jdXMsYS5iYWRnZS1zdWNjZXNzOmZvY3Vze291dGxpbmU6MDtib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoNDAsMTY3LDY5LC41KX0uYmFkZ2UtaW5mb3tjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzE3YTJiOH1hLmJhZGdlLWluZm86Zm9jdXMsYS5iYWRnZS1pbmZvOmhvdmVye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMTE3YThifWEuYmFkZ2UtaW5mby5mb2N1cyxhLmJhZGdlLWluZm86Zm9jdXN7b3V0bGluZTowO2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyMywxNjIsMTg0LC41KX0uYmFkZ2Utd2FybmluZ3tjb2xvcjojMjEyNTI5O2JhY2tncm91bmQtY29sb3I6I2ZmYzEwN31hLmJhZGdlLXdhcm5pbmc6Zm9jdXMsYS5iYWRnZS13YXJuaW5nOmhvdmVye2NvbG9yOiMyMTI1Mjk7YmFja2dyb3VuZC1jb2xvcjojZDM5ZTAwfWEuYmFkZ2Utd2FybmluZy5mb2N1cyxhLmJhZGdlLXdhcm5pbmc6Zm9jdXN7b3V0bGluZTowO2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyNTUsMTkzLDcsLjUpfS5iYWRnZS1kYW5nZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiNkYzM1NDV9YS5iYWRnZS1kYW5nZXI6Zm9jdXMsYS5iYWRnZS1kYW5nZXI6aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiNiZDIxMzB9YS5iYWRnZS1kYW5nZXIuZm9jdXMsYS5iYWRnZS1kYW5nZXI6Zm9jdXN7b3V0bGluZTowO2JveC1zaGFkb3c6MCAwIDAgLjJyZW0gcmdiYSgyMjAsNTMsNjksLjUpfS5iYWRnZS1saWdodHtjb2xvcjojMjEyNTI5O2JhY2tncm91bmQtY29sb3I6I2Y4ZjlmYX1hLmJhZGdlLWxpZ2h0OmZvY3VzLGEuYmFkZ2UtbGlnaHQ6aG92ZXJ7Y29sb3I6IzIxMjUyOTtiYWNrZ3JvdW5kLWNvbG9yOiNkYWUwZTV9YS5iYWRnZS1saWdodC5mb2N1cyxhLmJhZGdlLWxpZ2h0OmZvY3Vze291dGxpbmU6MDtib3gtc2hhZG93OjAgMCAwIC4ycmVtIHJnYmEoMjQ4LDI0OSwyNTAsLjUpfS5iYWRnZS1kYXJre2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMzQzYTQwfWEuYmFkZ2UtZGFyazpmb2N1cyxhLmJhZGdlLWRhcms6aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMxZDIxMjR9YS5iYWRnZS1kYXJrLmZvY3VzLGEuYmFkZ2UtZGFyazpmb2N1c3tvdXRsaW5lOjA7Ym94LXNoYWRvdzowIDAgMCAuMnJlbSByZ2JhKDUyLDU4LDY0LC41KX0uanVtYm90cm9ue3BhZGRpbmc6MnJlbSAxcmVtO21hcmdpbi1ib3R0b206MnJlbTtiYWNrZ3JvdW5kLWNvbG9yOiNlOWVjZWY7Ym9yZGVyLXJhZGl1czouM3JlbX1AbWVkaWEgKG1pbi13aWR0aDo1NzZweCl7Lmp1bWJvdHJvbntwYWRkaW5nOjRyZW0gMnJlbX19Lmp1bWJvdHJvbi1mbHVpZHtwYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy1sZWZ0OjA7Ym9yZGVyLXJhZGl1czowfS5hbGVydHtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nOi43NXJlbSAxLjI1cmVtO21hcmdpbi1ib3R0b206MXJlbTtib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6LjI1cmVtfS5hbGVydC1oZWFkaW5ne2NvbG9yOmluaGVyaXR9LmFsZXJ0LWxpbmt7Zm9udC13ZWlnaHQ6NzAwfS5hbGVydC1kaXNtaXNzaWJsZXtwYWRkaW5nLXJpZ2h0OjRyZW19LmFsZXJ0LWRpc21pc3NpYmxlIC5jbG9zZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO3BhZGRpbmc6Ljc1cmVtIDEuMjVyZW07Y29sb3I6aW5oZXJpdH0uYWxlcnQtcHJpbWFyeXtjb2xvcjojMDA0MDg1O2JhY2tncm91bmQtY29sb3I6I2NjZTVmZjtib3JkZXItY29sb3I6I2I4ZGFmZn0uYWxlcnQtcHJpbWFyeSBocntib3JkZXItdG9wLWNvbG9yOiM5ZmNkZmZ9LmFsZXJ0LXByaW1hcnkgLmFsZXJ0LWxpbmt7Y29sb3I6IzAwMjc1Mn0uYWxlcnQtc2Vjb25kYXJ5e2NvbG9yOiMzODNkNDE7YmFja2dyb3VuZC1jb2xvcjojZTJlM2U1O2JvcmRlci1jb2xvcjojZDZkOGRifS5hbGVydC1zZWNvbmRhcnkgaHJ7Ym9yZGVyLXRvcC1jb2xvcjojYzhjYmNmfS5hbGVydC1zZWNvbmRhcnkgLmFsZXJ0LWxpbmt7Y29sb3I6IzIwMjMyNn0uYWxlcnQtc3VjY2Vzc3tjb2xvcjojMTU1NzI0O2JhY2tncm91bmQtY29sb3I6I2Q0ZWRkYTtib3JkZXItY29sb3I6I2MzZTZjYn0uYWxlcnQtc3VjY2VzcyBocntib3JkZXItdG9wLWNvbG9yOiNiMWRmYmJ9LmFsZXJ0LXN1Y2Nlc3MgLmFsZXJ0LWxpbmt7Y29sb3I6IzBiMmUxM30uYWxlcnQtaW5mb3tjb2xvcjojMGM1NDYwO2JhY2tncm91bmQtY29sb3I6I2QxZWNmMTtib3JkZXItY29sb3I6I2JlZTVlYn0uYWxlcnQtaW5mbyBocntib3JkZXItdG9wLWNvbG9yOiNhYmRkZTV9LmFsZXJ0LWluZm8gLmFsZXJ0LWxpbmt7Y29sb3I6IzA2MmMzM30uYWxlcnQtd2FybmluZ3tjb2xvcjojODU2NDA0O2JhY2tncm91bmQtY29sb3I6I2ZmZjNjZDtib3JkZXItY29sb3I6I2ZmZWViYX0uYWxlcnQtd2FybmluZyBocntib3JkZXItdG9wLWNvbG9yOiNmZmU4YTF9LmFsZXJ0LXdhcm5pbmcgLmFsZXJ0LWxpbmt7Y29sb3I6IzUzM2YwM30uYWxlcnQtZGFuZ2Vye2NvbG9yOiM3MjFjMjQ7YmFja2dyb3VuZC1jb2xvcjojZjhkN2RhO2JvcmRlci1jb2xvcjojZjVjNmNifS5hbGVydC1kYW5nZXIgaHJ7Ym9yZGVyLXRvcC1jb2xvcjojZjFiMGI3fS5hbGVydC1kYW5nZXIgLmFsZXJ0LWxpbmt7Y29sb3I6IzQ5MTIxN30uYWxlcnQtbGlnaHR7Y29sb3I6IzgxODE4MjtiYWNrZ3JvdW5kLWNvbG9yOiNmZWZlZmU7Ym9yZGVyLWNvbG9yOiNmZGZkZmV9LmFsZXJ0LWxpZ2h0IGhye2JvcmRlci10b3AtY29sb3I6I2VjZWNmNn0uYWxlcnQtbGlnaHQgLmFsZXJ0LWxpbmt7Y29sb3I6IzY4Njg2OH0uYWxlcnQtZGFya3tjb2xvcjojMWIxZTIxO2JhY2tncm91bmQtY29sb3I6I2Q2ZDhkOTtib3JkZXItY29sb3I6I2M2YzhjYX0uYWxlcnQtZGFyayBocntib3JkZXItdG9wLWNvbG9yOiNiOWJiYmV9LmFsZXJ0LWRhcmsgLmFsZXJ0LWxpbmt7Y29sb3I6IzA0MDUwNX1ALXdlYmtpdC1rZXlmcmFtZXMgcHJvZ3Jlc3MtYmFyLXN0cmlwZXN7ZnJvbXtiYWNrZ3JvdW5kLXBvc2l0aW9uOjFyZW0gMH10b3tiYWNrZ3JvdW5kLXBvc2l0aW9uOjAgMH19QGtleWZyYW1lcyBwcm9ncmVzcy1iYXItc3RyaXBlc3tmcm9te2JhY2tncm91bmQtcG9zaXRpb246MXJlbSAwfXRve2JhY2tncm91bmQtcG9zaXRpb246MCAwfX0ucHJvZ3Jlc3N7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7aGVpZ2h0OjFyZW07b3ZlcmZsb3c6aGlkZGVuO2ZvbnQtc2l6ZTouNzVyZW07YmFja2dyb3VuZC1jb2xvcjojZTllY2VmO2JvcmRlci1yYWRpdXM6LjI1cmVtfS5wcm9ncmVzcy1iYXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtjb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyO3doaXRlLXNwYWNlOm5vd3JhcDtiYWNrZ3JvdW5kLWNvbG9yOiMwMDdiZmY7dHJhbnNpdGlvbjp3aWR0aCAuNnMgZWFzZX1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKXsucHJvZ3Jlc3MtYmFye3RyYW5zaXRpb246bm9uZX19LnByb2dyZXNzLWJhci1zdHJpcGVke2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KDQ1ZGVnLHJnYmEoMjU1LDI1NSwyNTUsLjE1KSAyNSUsdHJhbnNwYXJlbnQgMjUlLHRyYW5zcGFyZW50IDUwJSxyZ2JhKDI1NSwyNTUsMjU1LC4xNSkgNTAlLHJnYmEoMjU1LDI1NSwyNTUsLjE1KSA3NSUsdHJhbnNwYXJlbnQgNzUlLHRyYW5zcGFyZW50KTtiYWNrZ3JvdW5kLXNpemU6MXJlbSAxcmVtfS5wcm9ncmVzcy1iYXItYW5pbWF0ZWR7LXdlYmtpdC1hbmltYXRpb246cHJvZ3Jlc3MtYmFyLXN0cmlwZXMgMXMgbGluZWFyIGluZmluaXRlO2FuaW1hdGlvbjpwcm9ncmVzcy1iYXItc3RyaXBlcyAxcyBsaW5lYXIgaW5maW5pdGV9QG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOnJlZHVjZSl7LnByb2dyZXNzLWJhci1hbmltYXRlZHstd2Via2l0LWFuaW1hdGlvbjpub25lO2FuaW1hdGlvbjpub25lfX0ubWVkaWF7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246c3RhcnQ7YWxpZ24taXRlbXM6ZmxleC1zdGFydH0ubWVkaWEtYm9keXstbXMtZmxleDoxO2ZsZXg6MX0ubGlzdC1ncm91cHtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nLWxlZnQ6MDttYXJnaW4tYm90dG9tOjB9Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb257d2lkdGg6MTAwJTtjb2xvcjojNDk1MDU3O3RleHQtYWxpZ246aW5oZXJpdH0ubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cywubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3Zlcnt6LWluZGV4OjE7Y29sb3I6IzQ5NTA1Nzt0ZXh0LWRlY29yYXRpb246bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiNmOGY5ZmF9Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246YWN0aXZle2NvbG9yOiMyMTI1Mjk7YmFja2dyb3VuZC1jb2xvcjojZTllY2VmfS5saXN0LWdyb3VwLWl0ZW17cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztwYWRkaW5nOi43NXJlbSAxLjI1cmVtO21hcmdpbi1ib3R0b206LTFweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xMjUpfS5saXN0LWdyb3VwLWl0ZW06Zmlyc3QtY2hpbGR7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czouMjVyZW07Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6LjI1cmVtfS5saXN0LWdyb3VwLWl0ZW06bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjA7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6LjI1cmVtO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6LjI1cmVtfS5saXN0LWdyb3VwLWl0ZW0uZGlzYWJsZWQsLmxpc3QtZ3JvdXAtaXRlbTpkaXNhYmxlZHtjb2xvcjojNmM3NTdkO3BvaW50ZXItZXZlbnRzOm5vbmU7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5saXN0LWdyb3VwLWl0ZW0uYWN0aXZle3otaW5kZXg6Mjtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzAwN2JmZjtib3JkZXItY29sb3I6IzAwN2JmZn0ubGlzdC1ncm91cC1ob3Jpem9udGFsey1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93fS5saXN0LWdyb3VwLWhvcml6b250YWwgLmxpc3QtZ3JvdXAtaXRlbXttYXJnaW4tcmlnaHQ6LTFweDttYXJnaW4tYm90dG9tOjB9Lmxpc3QtZ3JvdXAtaG9yaXpvbnRhbCAubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxke2JvcmRlci10b3AtbGVmdC1yYWRpdXM6LjI1cmVtO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6LjI1cmVtO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjB9Lmxpc3QtZ3JvdXAtaG9yaXpvbnRhbCAubGlzdC1ncm91cC1pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjA7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6LjI1cmVtO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOi4yNXJlbTtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjB9QG1lZGlhIChtaW4td2lkdGg6NTc2cHgpey5saXN0LWdyb3VwLWhvcml6b250YWwtc217LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Lmxpc3QtZ3JvdXAtaG9yaXpvbnRhbC1zbSAubGlzdC1ncm91cC1pdGVte21hcmdpbi1yaWdodDotMXB4O21hcmdpbi1ib3R0b206MH0ubGlzdC1ncm91cC1ob3Jpem9udGFsLXNtIC5saXN0LWdyb3VwLWl0ZW06Zmlyc3QtY2hpbGR7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czouMjVyZW07Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czouMjVyZW07Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MH0ubGlzdC1ncm91cC1ob3Jpem9udGFsLXNtIC5saXN0LWdyb3VwLWl0ZW06bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czouMjVyZW07Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6LjI1cmVtO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MH19QG1lZGlhIChtaW4td2lkdGg6NzY4cHgpey5saXN0LWdyb3VwLWhvcml6b250YWwtbWR7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Lmxpc3QtZ3JvdXAtaG9yaXpvbnRhbC1tZCAubGlzdC1ncm91cC1pdGVte21hcmdpbi1yaWdodDotMXB4O21hcmdpbi1ib3R0b206MH0ubGlzdC1ncm91cC1ob3Jpem9udGFsLW1kIC5saXN0LWdyb3VwLWl0ZW06Zmlyc3QtY2hpbGR7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czouMjVyZW07Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czouMjVyZW07Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MH0ubGlzdC1ncm91cC1ob3Jpem9udGFsLW1kIC5saXN0LWdyb3VwLWl0ZW06bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czouMjVyZW07Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6LjI1cmVtO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MH19QG1lZGlhIChtaW4td2lkdGg6OTkycHgpey5saXN0LWdyb3VwLWhvcml6b250YWwtbGd7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Lmxpc3QtZ3JvdXAtaG9yaXpvbnRhbC1sZyAubGlzdC1ncm91cC1pdGVte21hcmdpbi1yaWdodDotMXB4O21hcmdpbi1ib3R0b206MH0ubGlzdC1ncm91cC1ob3Jpem9udGFsLWxnIC5saXN0LWdyb3VwLWl0ZW06Zmlyc3QtY2hpbGR7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czouMjVyZW07Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czouMjVyZW07Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MH0ubGlzdC1ncm91cC1ob3Jpem9udGFsLWxnIC5saXN0LWdyb3VwLWl0ZW06bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czouMjVyZW07Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6LjI1cmVtO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MH19QG1lZGlhIChtaW4td2lkdGg6MTIwMHB4KXsubGlzdC1ncm91cC1ob3Jpem9udGFsLXhsey1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93fS5saXN0LWdyb3VwLWhvcml6b250YWwteGwgLmxpc3QtZ3JvdXAtaXRlbXttYXJnaW4tcmlnaHQ6LTFweDttYXJnaW4tYm90dG9tOjB9Lmxpc3QtZ3JvdXAtaG9yaXpvbnRhbC14bCAubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxke2JvcmRlci10b3AtbGVmdC1yYWRpdXM6LjI1cmVtO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6LjI1cmVtO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjB9Lmxpc3QtZ3JvdXAtaG9yaXpvbnRhbC14bCAubGlzdC1ncm91cC1pdGVtOmxhc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjA7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6LjI1cmVtO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOi4yNXJlbTtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjB9fS5saXN0LWdyb3VwLWZsdXNoIC5saXN0LWdyb3VwLWl0ZW17Ym9yZGVyLXJpZ2h0OjA7Ym9yZGVyLWxlZnQ6MDtib3JkZXItcmFkaXVzOjB9Lmxpc3QtZ3JvdXAtZmx1c2ggLmxpc3QtZ3JvdXAtaXRlbTpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206LTFweH0ubGlzdC1ncm91cC1mbHVzaDpmaXJzdC1jaGlsZCAubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxke2JvcmRlci10b3A6MH0ubGlzdC1ncm91cC1mbHVzaDpsYXN0LWNoaWxkIC5saXN0LWdyb3VwLWl0ZW06bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjA7Ym9yZGVyLWJvdHRvbTowfS5saXN0LWdyb3VwLWl0ZW0tcHJpbWFyeXtjb2xvcjojMDA0MDg1O2JhY2tncm91bmQtY29sb3I6I2I4ZGFmZn0ubGlzdC1ncm91cC1pdGVtLXByaW1hcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cywubGlzdC1ncm91cC1pdGVtLXByaW1hcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3Zlcntjb2xvcjojMDA0MDg1O2JhY2tncm91bmQtY29sb3I6IzlmY2RmZn0ubGlzdC1ncm91cC1pdGVtLXByaW1hcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbi5hY3RpdmV7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMwMDQwODU7Ym9yZGVyLWNvbG9yOiMwMDQwODV9Lmxpc3QtZ3JvdXAtaXRlbS1zZWNvbmRhcnl7Y29sb3I6IzM4M2Q0MTtiYWNrZ3JvdW5kLWNvbG9yOiNkNmQ4ZGJ9Lmxpc3QtZ3JvdXAtaXRlbS1zZWNvbmRhcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cywubGlzdC1ncm91cC1pdGVtLXNlY29uZGFyeS5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVye2NvbG9yOiMzODNkNDE7YmFja2dyb3VuZC1jb2xvcjojYzhjYmNmfS5saXN0LWdyb3VwLWl0ZW0tc2Vjb25kYXJ5Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZle2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMzgzZDQxO2JvcmRlci1jb2xvcjojMzgzZDQxfS5saXN0LWdyb3VwLWl0ZW0tc3VjY2Vzc3tjb2xvcjojMTU1NzI0O2JhY2tncm91bmQtY29sb3I6I2MzZTZjYn0ubGlzdC1ncm91cC1pdGVtLXN1Y2Nlc3MubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cywubGlzdC1ncm91cC1pdGVtLXN1Y2Nlc3MubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3Zlcntjb2xvcjojMTU1NzI0O2JhY2tncm91bmQtY29sb3I6I2IxZGZiYn0ubGlzdC1ncm91cC1pdGVtLXN1Y2Nlc3MubGlzdC1ncm91cC1pdGVtLWFjdGlvbi5hY3RpdmV7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMxNTU3MjQ7Ym9yZGVyLWNvbG9yOiMxNTU3MjR9Lmxpc3QtZ3JvdXAtaXRlbS1pbmZve2NvbG9yOiMwYzU0NjA7YmFja2dyb3VuZC1jb2xvcjojYmVlNWVifS5saXN0LWdyb3VwLWl0ZW0taW5mby5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmZvY3VzLC5saXN0LWdyb3VwLWl0ZW0taW5mby5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVye2NvbG9yOiMwYzU0NjA7YmFja2dyb3VuZC1jb2xvcjojYWJkZGU1fS5saXN0LWdyb3VwLWl0ZW0taW5mby5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzBjNTQ2MDtib3JkZXItY29sb3I6IzBjNTQ2MH0ubGlzdC1ncm91cC1pdGVtLXdhcm5pbmd7Y29sb3I6Izg1NjQwNDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmVlYmF9Lmxpc3QtZ3JvdXAtaXRlbS13YXJuaW5nLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246Zm9jdXMsLmxpc3QtZ3JvdXAtaXRlbS13YXJuaW5nLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXJ7Y29sb3I6Izg1NjQwNDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmU4YTF9Lmxpc3QtZ3JvdXAtaXRlbS13YXJuaW5nLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZle2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojODU2NDA0O2JvcmRlci1jb2xvcjojODU2NDA0fS5saXN0LWdyb3VwLWl0ZW0tZGFuZ2Vye2NvbG9yOiM3MjFjMjQ7YmFja2dyb3VuZC1jb2xvcjojZjVjNmNifS5saXN0LWdyb3VwLWl0ZW0tZGFuZ2VyLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246Zm9jdXMsLmxpc3QtZ3JvdXAtaXRlbS1kYW5nZXIubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3Zlcntjb2xvcjojNzIxYzI0O2JhY2tncm91bmQtY29sb3I6I2YxYjBiN30ubGlzdC1ncm91cC1pdGVtLWRhbmdlci5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzcyMWMyNDtib3JkZXItY29sb3I6IzcyMWMyNH0ubGlzdC1ncm91cC1pdGVtLWxpZ2h0e2NvbG9yOiM4MTgxODI7YmFja2dyb3VuZC1jb2xvcjojZmRmZGZlfS5saXN0LWdyb3VwLWl0ZW0tbGlnaHQubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cywubGlzdC1ncm91cC1pdGVtLWxpZ2h0Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXJ7Y29sb3I6IzgxODE4MjtiYWNrZ3JvdW5kLWNvbG9yOiNlY2VjZjZ9Lmxpc3QtZ3JvdXAtaXRlbS1saWdodC5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzgxODE4Mjtib3JkZXItY29sb3I6IzgxODE4Mn0ubGlzdC1ncm91cC1pdGVtLWRhcmt7Y29sb3I6IzFiMWUyMTtiYWNrZ3JvdW5kLWNvbG9yOiNjNmM4Y2F9Lmxpc3QtZ3JvdXAtaXRlbS1kYXJrLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246Zm9jdXMsLmxpc3QtZ3JvdXAtaXRlbS1kYXJrLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXJ7Y29sb3I6IzFiMWUyMTtiYWNrZ3JvdW5kLWNvbG9yOiNiOWJiYmV9Lmxpc3QtZ3JvdXAtaXRlbS1kYXJrLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZle2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMWIxZTIxO2JvcmRlci1jb2xvcjojMWIxZTIxfS5jbG9zZXtmbG9hdDpyaWdodDtmb250LXNpemU6MS41cmVtO2ZvbnQtd2VpZ2h0OjcwMDtsaW5lLWhlaWdodDoxO2NvbG9yOiMwMDA7dGV4dC1zaGFkb3c6MCAxcHggMCAjZmZmO29wYWNpdHk6LjV9LmNsb3NlOmhvdmVye2NvbG9yOiMwMDA7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LmNsb3NlOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmZvY3VzLC5jbG9zZTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTpob3ZlcntvcGFjaXR5Oi43NX1idXR0b24uY2xvc2V7cGFkZGluZzowO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyOjA7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lfWEuY2xvc2UuZGlzYWJsZWR7cG9pbnRlci1ldmVudHM6bm9uZX0udG9hc3R7bWF4LXdpZHRoOjM1MHB4O292ZXJmbG93OmhpZGRlbjtmb250LXNpemU6Ljg3NXJlbTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsLjg1KTtiYWNrZ3JvdW5kLWNsaXA6cGFkZGluZy1ib3g7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xKTtib3gtc2hhZG93OjAgLjI1cmVtIC43NXJlbSByZ2JhKDAsMCwwLC4xKTstd2Via2l0LWJhY2tkcm9wLWZpbHRlcjpibHVyKDEwcHgpO2JhY2tkcm9wLWZpbHRlcjpibHVyKDEwcHgpO29wYWNpdHk6MDtib3JkZXItcmFkaXVzOi4yNXJlbX0udG9hc3Q6bm90KDpsYXN0LWNoaWxkKXttYXJnaW4tYm90dG9tOi43NXJlbX0udG9hc3Quc2hvd2luZ3tvcGFjaXR5OjF9LnRvYXN0LnNob3d7ZGlzcGxheTpibG9jaztvcGFjaXR5OjF9LnRvYXN0LmhpZGV7ZGlzcGxheTpub25lfS50b2FzdC1oZWFkZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOi4yNXJlbSAuNzVyZW07Y29sb3I6IzZjNzU3ZDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsLjg1KTtiYWNrZ3JvdW5kLWNsaXA6cGFkZGluZy1ib3g7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgcmdiYSgwLDAsMCwuMDUpfS50b2FzdC1ib2R5e3BhZGRpbmc6Ljc1cmVtfS5tb2RhbC1vcGVue292ZXJmbG93OmhpZGRlbn0ubW9kYWwtb3BlbiAubW9kYWx7b3ZlcmZsb3cteDpoaWRkZW47b3ZlcmZsb3cteTphdXRvfS5tb2RhbHtwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7ei1pbmRleDoxMDUwO2Rpc3BsYXk6bm9uZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO292ZXJmbG93OmhpZGRlbjtvdXRsaW5lOjB9Lm1vZGFsLWRpYWxvZ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDphdXRvO21hcmdpbjouNXJlbTtwb2ludGVyLWV2ZW50czpub25lfS5tb2RhbC5mYWRlIC5tb2RhbC1kaWFsb2d7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuM3MgZWFzZS1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjNzIGVhc2Utb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4zcyBlYXNlLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuM3MgZWFzZS1vdXQ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKDAsLTUwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGUoMCwtNTBweCl9QG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOnJlZHVjZSl7Lm1vZGFsLmZhZGUgLm1vZGFsLWRpYWxvZ3t0cmFuc2l0aW9uOm5vbmV9fS5tb2RhbC5zaG93IC5tb2RhbC1kaWFsb2d7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX0ubW9kYWwtZGlhbG9nLXNjcm9sbGFibGV7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7bWF4LWhlaWdodDpjYWxjKDEwMCUgLSAxcmVtKX0ubW9kYWwtZGlhbG9nLXNjcm9sbGFibGUgLm1vZGFsLWNvbnRlbnR7bWF4LWhlaWdodDpjYWxjKDEwMHZoIC0gMXJlbSk7b3ZlcmZsb3c6aGlkZGVufS5tb2RhbC1kaWFsb2ctc2Nyb2xsYWJsZSAubW9kYWwtZm9vdGVyLC5tb2RhbC1kaWFsb2ctc2Nyb2xsYWJsZSAubW9kYWwtaGVhZGVyey1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MH0ubW9kYWwtZGlhbG9nLXNjcm9sbGFibGUgLm1vZGFsLWJvZHl7b3ZlcmZsb3cteTphdXRvfS5tb2RhbC1kaWFsb2ctY2VudGVyZWR7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjttaW4taGVpZ2h0OmNhbGMoMTAwJSAtIDFyZW0pfS5tb2RhbC1kaWFsb2ctY2VudGVyZWQ6OmJlZm9yZXtkaXNwbGF5OmJsb2NrO2hlaWdodDpjYWxjKDEwMHZoIC0gMXJlbSk7Y29udGVudDpcXFwiXFxcIn0ubW9kYWwtZGlhbG9nLWNlbnRlcmVkLm1vZGFsLWRpYWxvZy1zY3JvbGxhYmxley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7aGVpZ2h0OjEwMCV9Lm1vZGFsLWRpYWxvZy1jZW50ZXJlZC5tb2RhbC1kaWFsb2ctc2Nyb2xsYWJsZSAubW9kYWwtY29udGVudHttYXgtaGVpZ2h0Om5vbmV9Lm1vZGFsLWRpYWxvZy1jZW50ZXJlZC5tb2RhbC1kaWFsb2ctc2Nyb2xsYWJsZTo6YmVmb3Jle2NvbnRlbnQ6bm9uZX0ubW9kYWwtY29udGVudHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjt3aWR0aDoxMDAlO3BvaW50ZXItZXZlbnRzOmF1dG87YmFja2dyb3VuZC1jb2xvcjojZmZmO2JhY2tncm91bmQtY2xpcDpwYWRkaW5nLWJveDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMCwwLDAsLjIpO2JvcmRlci1yYWRpdXM6LjNyZW07b3V0bGluZTowfS5tb2RhbC1iYWNrZHJvcHtwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7ei1pbmRleDoxMDQwO3dpZHRoOjEwMHZ3O2hlaWdodDoxMDB2aDtiYWNrZ3JvdW5kLWNvbG9yOiMwMDB9Lm1vZGFsLWJhY2tkcm9wLmZhZGV7b3BhY2l0eTowfS5tb2RhbC1iYWNrZHJvcC5zaG93e29wYWNpdHk6LjV9Lm1vZGFsLWhlYWRlcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpzdGFydDthbGlnbi1pdGVtczpmbGV4LXN0YXJ0Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtwYWRkaW5nOjFyZW0gMXJlbTtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZGVlMmU2O2JvcmRlci10b3AtbGVmdC1yYWRpdXM6LjNyZW07Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6LjNyZW19Lm1vZGFsLWhlYWRlciAuY2xvc2V7cGFkZGluZzoxcmVtIDFyZW07bWFyZ2luOi0xcmVtIC0xcmVtIC0xcmVtIGF1dG99Lm1vZGFsLXRpdGxle21hcmdpbi1ib3R0b206MDtsaW5lLWhlaWdodDoxLjV9Lm1vZGFsLWJvZHl7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXg6MSAxIGF1dG87ZmxleDoxIDEgYXV0bztwYWRkaW5nOjFyZW19Lm1vZGFsLWZvb3RlcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6ZW5kO2p1c3RpZnktY29udGVudDpmbGV4LWVuZDtwYWRkaW5nOjFyZW07Ym9yZGVyLXRvcDoxcHggc29saWQgI2RlZTJlNjtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czouM3JlbTtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOi4zcmVtfS5tb2RhbC1mb290ZXI+Om5vdCg6Zmlyc3QtY2hpbGQpe21hcmdpbi1sZWZ0Oi4yNXJlbX0ubW9kYWwtZm9vdGVyPjpub3QoOmxhc3QtY2hpbGQpe21hcmdpbi1yaWdodDouMjVyZW19Lm1vZGFsLXNjcm9sbGJhci1tZWFzdXJle3Bvc2l0aW9uOmFic29sdXRlO3RvcDotOTk5OXB4O3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7b3ZlcmZsb3c6c2Nyb2xsfUBtZWRpYSAobWluLXdpZHRoOjU3NnB4KXsubW9kYWwtZGlhbG9ne21heC13aWR0aDo1MDBweDttYXJnaW46MS43NXJlbSBhdXRvfS5tb2RhbC1kaWFsb2ctc2Nyb2xsYWJsZXttYXgtaGVpZ2h0OmNhbGMoMTAwJSAtIDMuNXJlbSl9Lm1vZGFsLWRpYWxvZy1zY3JvbGxhYmxlIC5tb2RhbC1jb250ZW50e21heC1oZWlnaHQ6Y2FsYygxMDB2aCAtIDMuNXJlbSl9Lm1vZGFsLWRpYWxvZy1jZW50ZXJlZHttaW4taGVpZ2h0OmNhbGMoMTAwJSAtIDMuNXJlbSl9Lm1vZGFsLWRpYWxvZy1jZW50ZXJlZDo6YmVmb3Jle2hlaWdodDpjYWxjKDEwMHZoIC0gMy41cmVtKX0ubW9kYWwtc217bWF4LXdpZHRoOjMwMHB4fX1AbWVkaWEgKG1pbi13aWR0aDo5OTJweCl7Lm1vZGFsLWxnLC5tb2RhbC14bHttYXgtd2lkdGg6ODAwcHh9fUBtZWRpYSAobWluLXdpZHRoOjEyMDBweCl7Lm1vZGFsLXhse21heC13aWR0aDoxMTQwcHh9fS50b29sdGlwe3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MTA3MDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFxcXCJTZWdvZSBVSVxcXCIsUm9ib3RvLFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsQXJpYWwsXFxcIk5vdG8gU2Fuc1xcXCIsc2Fucy1zZXJpZixcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsXFxcIlNlZ29lIFVJIFN5bWJvbFxcXCIsXFxcIk5vdG8gQ29sb3IgRW1vamlcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjQwMDtsaW5lLWhlaWdodDoxLjU7dGV4dC1hbGlnbjpsZWZ0O3RleHQtYWxpZ246c3RhcnQ7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dGV4dC1zaGFkb3c6bm9uZTt0ZXh0LXRyYW5zZm9ybTpub25lO2xldHRlci1zcGFjaW5nOm5vcm1hbDt3b3JkLWJyZWFrOm5vcm1hbDt3b3JkLXNwYWNpbmc6bm9ybWFsO3doaXRlLXNwYWNlOm5vcm1hbDtsaW5lLWJyZWFrOmF1dG87Zm9udC1zaXplOi44NzVyZW07d29yZC13cmFwOmJyZWFrLXdvcmQ7b3BhY2l0eTowfS50b29sdGlwLnNob3d7b3BhY2l0eTouOX0udG9vbHRpcCAuYXJyb3d7cG9zaXRpb246YWJzb2x1dGU7ZGlzcGxheTpibG9jazt3aWR0aDouOHJlbTtoZWlnaHQ6LjRyZW19LnRvb2x0aXAgLmFycm93OjpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDpcXFwiXFxcIjtib3JkZXItY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyLXN0eWxlOnNvbGlkfS5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePXRvcF0sLmJzLXRvb2x0aXAtdG9we3BhZGRpbmc6LjRyZW0gMH0uYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj10b3BdIC5hcnJvdywuYnMtdG9vbHRpcC10b3AgLmFycm93e2JvdHRvbTowfS5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePXRvcF0gLmFycm93OjpiZWZvcmUsLmJzLXRvb2x0aXAtdG9wIC5hcnJvdzo6YmVmb3Jle3RvcDowO2JvcmRlci13aWR0aDouNHJlbSAuNHJlbSAwO2JvcmRlci10b3AtY29sb3I6IzAwMH0uYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1yaWdodF0sLmJzLXRvb2x0aXAtcmlnaHR7cGFkZGluZzowIC40cmVtfS5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePXJpZ2h0XSAuYXJyb3csLmJzLXRvb2x0aXAtcmlnaHQgLmFycm93e2xlZnQ6MDt3aWR0aDouNHJlbTtoZWlnaHQ6LjhyZW19LmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49cmlnaHRdIC5hcnJvdzo6YmVmb3JlLC5icy10b29sdGlwLXJpZ2h0IC5hcnJvdzo6YmVmb3Jle3JpZ2h0OjA7Ym9yZGVyLXdpZHRoOi40cmVtIC40cmVtIC40cmVtIDA7Ym9yZGVyLXJpZ2h0LWNvbG9yOiMwMDB9LmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49Ym90dG9tXSwuYnMtdG9vbHRpcC1ib3R0b217cGFkZGluZzouNHJlbSAwfS5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePWJvdHRvbV0gLmFycm93LC5icy10b29sdGlwLWJvdHRvbSAuYXJyb3d7dG9wOjB9LmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49Ym90dG9tXSAuYXJyb3c6OmJlZm9yZSwuYnMtdG9vbHRpcC1ib3R0b20gLmFycm93OjpiZWZvcmV7Ym90dG9tOjA7Ym9yZGVyLXdpZHRoOjAgLjRyZW0gLjRyZW07Ym9yZGVyLWJvdHRvbS1jb2xvcjojMDAwfS5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePWxlZnRdLC5icy10b29sdGlwLWxlZnR7cGFkZGluZzowIC40cmVtfS5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePWxlZnRdIC5hcnJvdywuYnMtdG9vbHRpcC1sZWZ0IC5hcnJvd3tyaWdodDowO3dpZHRoOi40cmVtO2hlaWdodDouOHJlbX0uYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1sZWZ0XSAuYXJyb3c6OmJlZm9yZSwuYnMtdG9vbHRpcC1sZWZ0IC5hcnJvdzo6YmVmb3Jle2xlZnQ6MDtib3JkZXItd2lkdGg6LjRyZW0gMCAuNHJlbSAuNHJlbTtib3JkZXItbGVmdC1jb2xvcjojMDAwfS50b29sdGlwLWlubmVye21heC13aWR0aDoyMDBweDtwYWRkaW5nOi4yNXJlbSAuNXJlbTtjb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyO2JhY2tncm91bmQtY29sb3I6IzAwMDtib3JkZXItcmFkaXVzOi4yNXJlbX0ucG9wb3Zlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7ei1pbmRleDoxMDYwO2Rpc3BsYXk6YmxvY2s7bWF4LXdpZHRoOjI3NnB4O2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFxcXCJTZWdvZSBVSVxcXCIsUm9ib3RvLFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsQXJpYWwsXFxcIk5vdG8gU2Fuc1xcXCIsc2Fucy1zZXJpZixcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsXFxcIlNlZ29lIFVJIFN5bWJvbFxcXCIsXFxcIk5vdG8gQ29sb3IgRW1vamlcXFwiO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjQwMDtsaW5lLWhlaWdodDoxLjU7dGV4dC1hbGlnbjpsZWZ0O3RleHQtYWxpZ246c3RhcnQ7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dGV4dC1zaGFkb3c6bm9uZTt0ZXh0LXRyYW5zZm9ybTpub25lO2xldHRlci1zcGFjaW5nOm5vcm1hbDt3b3JkLWJyZWFrOm5vcm1hbDt3b3JkLXNwYWNpbmc6bm9ybWFsO3doaXRlLXNwYWNlOm5vcm1hbDtsaW5lLWJyZWFrOmF1dG87Zm9udC1zaXplOi44NzVyZW07d29yZC13cmFwOmJyZWFrLXdvcmQ7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JhY2tncm91bmQtY2xpcDpwYWRkaW5nLWJveDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMCwwLDAsLjIpO2JvcmRlci1yYWRpdXM6LjNyZW19LnBvcG92ZXIgLmFycm93e3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MXJlbTtoZWlnaHQ6LjVyZW07bWFyZ2luOjAgLjNyZW19LnBvcG92ZXIgLmFycm93OjphZnRlciwucG9wb3ZlciAuYXJyb3c6OmJlZm9yZXtwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmJsb2NrO2NvbnRlbnQ6XFxcIlxcXCI7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1zdHlsZTpzb2xpZH0uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj10b3BdLC5icy1wb3BvdmVyLXRvcHttYXJnaW4tYm90dG9tOi41cmVtfS5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePXRvcF0+LmFycm93LC5icy1wb3BvdmVyLXRvcD4uYXJyb3d7Ym90dG9tOmNhbGMoKC41cmVtICsgMXB4KSAqIC0xKX0uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj10b3BdPi5hcnJvdzo6YmVmb3JlLC5icy1wb3BvdmVyLXRvcD4uYXJyb3c6OmJlZm9yZXtib3R0b206MDtib3JkZXItd2lkdGg6LjVyZW0gLjVyZW0gMDtib3JkZXItdG9wLWNvbG9yOnJnYmEoMCwwLDAsLjI1KX0uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj10b3BdPi5hcnJvdzo6YWZ0ZXIsLmJzLXBvcG92ZXItdG9wPi5hcnJvdzo6YWZ0ZXJ7Ym90dG9tOjFweDtib3JkZXItd2lkdGg6LjVyZW0gLjVyZW0gMDtib3JkZXItdG9wLWNvbG9yOiNmZmZ9LmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49cmlnaHRdLC5icy1wb3BvdmVyLXJpZ2h0e21hcmdpbi1sZWZ0Oi41cmVtfS5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePXJpZ2h0XT4uYXJyb3csLmJzLXBvcG92ZXItcmlnaHQ+LmFycm93e2xlZnQ6Y2FsYygoLjVyZW0gKyAxcHgpICogLTEpO3dpZHRoOi41cmVtO2hlaWdodDoxcmVtO21hcmdpbjouM3JlbSAwfS5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePXJpZ2h0XT4uYXJyb3c6OmJlZm9yZSwuYnMtcG9wb3Zlci1yaWdodD4uYXJyb3c6OmJlZm9yZXtsZWZ0OjA7Ym9yZGVyLXdpZHRoOi41cmVtIC41cmVtIC41cmVtIDA7Ym9yZGVyLXJpZ2h0LWNvbG9yOnJnYmEoMCwwLDAsLjI1KX0uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1yaWdodF0+LmFycm93OjphZnRlciwuYnMtcG9wb3Zlci1yaWdodD4uYXJyb3c6OmFmdGVye2xlZnQ6MXB4O2JvcmRlci13aWR0aDouNXJlbSAuNXJlbSAuNXJlbSAwO2JvcmRlci1yaWdodC1jb2xvcjojZmZmfS5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePWJvdHRvbV0sLmJzLXBvcG92ZXItYm90dG9te21hcmdpbi10b3A6LjVyZW19LmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49Ym90dG9tXT4uYXJyb3csLmJzLXBvcG92ZXItYm90dG9tPi5hcnJvd3t0b3A6Y2FsYygoLjVyZW0gKyAxcHgpICogLTEpfS5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePWJvdHRvbV0+LmFycm93OjpiZWZvcmUsLmJzLXBvcG92ZXItYm90dG9tPi5hcnJvdzo6YmVmb3Jle3RvcDowO2JvcmRlci13aWR0aDowIC41cmVtIC41cmVtIC41cmVtO2JvcmRlci1ib3R0b20tY29sb3I6cmdiYSgwLDAsMCwuMjUpfS5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePWJvdHRvbV0+LmFycm93OjphZnRlciwuYnMtcG9wb3Zlci1ib3R0b20+LmFycm93OjphZnRlcnt0b3A6MXB4O2JvcmRlci13aWR0aDowIC41cmVtIC41cmVtIC41cmVtO2JvcmRlci1ib3R0b20tY29sb3I6I2ZmZn0uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1ib3R0b21dIC5wb3BvdmVyLWhlYWRlcjo6YmVmb3JlLC5icy1wb3BvdmVyLWJvdHRvbSAucG9wb3Zlci1oZWFkZXI6OmJlZm9yZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjUwJTtkaXNwbGF5OmJsb2NrO3dpZHRoOjFyZW07bWFyZ2luLWxlZnQ6LS41cmVtO2NvbnRlbnQ6XFxcIlxcXCI7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2Y3ZjdmN30uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1sZWZ0XSwuYnMtcG9wb3Zlci1sZWZ0e21hcmdpbi1yaWdodDouNXJlbX0uYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1sZWZ0XT4uYXJyb3csLmJzLXBvcG92ZXItbGVmdD4uYXJyb3d7cmlnaHQ6Y2FsYygoLjVyZW0gKyAxcHgpICogLTEpO3dpZHRoOi41cmVtO2hlaWdodDoxcmVtO21hcmdpbjouM3JlbSAwfS5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePWxlZnRdPi5hcnJvdzo6YmVmb3JlLC5icy1wb3BvdmVyLWxlZnQ+LmFycm93OjpiZWZvcmV7cmlnaHQ6MDtib3JkZXItd2lkdGg6LjVyZW0gMCAuNXJlbSAuNXJlbTtib3JkZXItbGVmdC1jb2xvcjpyZ2JhKDAsMCwwLC4yNSl9LmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49bGVmdF0+LmFycm93OjphZnRlciwuYnMtcG9wb3Zlci1sZWZ0Pi5hcnJvdzo6YWZ0ZXJ7cmlnaHQ6MXB4O2JvcmRlci13aWR0aDouNXJlbSAwIC41cmVtIC41cmVtO2JvcmRlci1sZWZ0LWNvbG9yOiNmZmZ9LnBvcG92ZXItaGVhZGVye3BhZGRpbmc6LjVyZW0gLjc1cmVtO21hcmdpbi1ib3R0b206MDtmb250LXNpemU6MXJlbTtiYWNrZ3JvdW5kLWNvbG9yOiNmN2Y3Zjc7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2ViZWJlYjtib3JkZXItdG9wLWxlZnQtcmFkaXVzOmNhbGMoLjNyZW0gLSAxcHgpO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOmNhbGMoLjNyZW0gLSAxcHgpfS5wb3BvdmVyLWhlYWRlcjplbXB0eXtkaXNwbGF5Om5vbmV9LnBvcG92ZXItYm9keXtwYWRkaW5nOi41cmVtIC43NXJlbTtjb2xvcjojMjEyNTI5fS5jYXJvdXNlbHtwb3NpdGlvbjpyZWxhdGl2ZX0uY2Fyb3VzZWwucG9pbnRlci1ldmVudHstbXMtdG91Y2gtYWN0aW9uOnBhbi15O3RvdWNoLWFjdGlvbjpwYW4teX0uY2Fyb3VzZWwtaW5uZXJ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtvdmVyZmxvdzpoaWRkZW59LmNhcm91c2VsLWlubmVyOjphZnRlcntkaXNwbGF5OmJsb2NrO2NsZWFyOmJvdGg7Y29udGVudDpcXFwiXFxcIn0uY2Fyb3VzZWwtaXRlbXtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5Om5vbmU7ZmxvYXQ6bGVmdDt3aWR0aDoxMDAlO21hcmdpbi1yaWdodDotMTAwJTstd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6aGlkZGVuO2JhY2tmYWNlLXZpc2liaWxpdHk6aGlkZGVuO3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjZzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC42cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuNnMgZWFzZS1pbi1vdXQsLXdlYmtpdC10cmFuc2Zvcm0gLjZzIGVhc2UtaW4tb3V0fUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjpyZWR1Y2Upey5jYXJvdXNlbC1pdGVte3RyYW5zaXRpb246bm9uZX19LmNhcm91c2VsLWl0ZW0tbmV4dCwuY2Fyb3VzZWwtaXRlbS1wcmV2LC5jYXJvdXNlbC1pdGVtLmFjdGl2ZXtkaXNwbGF5OmJsb2NrfS5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1yaWdodCwuY2Fyb3VzZWwtaXRlbS1uZXh0Om5vdCguY2Fyb3VzZWwtaXRlbS1sZWZ0KXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpfS5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1sZWZ0LC5jYXJvdXNlbC1pdGVtLXByZXY6bm90KC5jYXJvdXNlbC1pdGVtLXJpZ2h0KXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSl9LmNhcm91c2VsLWZhZGUgLmNhcm91c2VsLWl0ZW17b3BhY2l0eTowO3RyYW5zaXRpb24tcHJvcGVydHk6b3BhY2l0eTstd2Via2l0LXRyYW5zZm9ybTpub25lO3RyYW5zZm9ybTpub25lfS5jYXJvdXNlbC1mYWRlIC5jYXJvdXNlbC1pdGVtLW5leHQuY2Fyb3VzZWwtaXRlbS1sZWZ0LC5jYXJvdXNlbC1mYWRlIC5jYXJvdXNlbC1pdGVtLXByZXYuY2Fyb3VzZWwtaXRlbS1yaWdodCwuY2Fyb3VzZWwtZmFkZSAuY2Fyb3VzZWwtaXRlbS5hY3RpdmV7ei1pbmRleDoxO29wYWNpdHk6MX0uY2Fyb3VzZWwtZmFkZSAuYWN0aXZlLmNhcm91c2VsLWl0ZW0tbGVmdCwuY2Fyb3VzZWwtZmFkZSAuYWN0aXZlLmNhcm91c2VsLWl0ZW0tcmlnaHR7ei1pbmRleDowO29wYWNpdHk6MDt0cmFuc2l0aW9uOjBzIC42cyBvcGFjaXR5fUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjpyZWR1Y2Upey5jYXJvdXNlbC1mYWRlIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1sZWZ0LC5jYXJvdXNlbC1mYWRlIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1yaWdodHt0cmFuc2l0aW9uOm5vbmV9fS5jYXJvdXNlbC1jb250cm9sLW5leHQsLmNhcm91c2VsLWNvbnRyb2wtcHJldntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDt6LWluZGV4OjE7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjE1JTtjb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyO29wYWNpdHk6LjU7dHJhbnNpdGlvbjpvcGFjaXR5IC4xNXMgZWFzZX1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKXsuY2Fyb3VzZWwtY29udHJvbC1uZXh0LC5jYXJvdXNlbC1jb250cm9sLXByZXZ7dHJhbnNpdGlvbjpub25lfX0uY2Fyb3VzZWwtY29udHJvbC1uZXh0OmZvY3VzLC5jYXJvdXNlbC1jb250cm9sLW5leHQ6aG92ZXIsLmNhcm91c2VsLWNvbnRyb2wtcHJldjpmb2N1cywuY2Fyb3VzZWwtY29udHJvbC1wcmV2OmhvdmVye2NvbG9yOiNmZmY7dGV4dC1kZWNvcmF0aW9uOm5vbmU7b3V0bGluZTowO29wYWNpdHk6Ljl9LmNhcm91c2VsLWNvbnRyb2wtcHJldntsZWZ0OjB9LmNhcm91c2VsLWNvbnRyb2wtbmV4dHtyaWdodDowfS5jYXJvdXNlbC1jb250cm9sLW5leHQtaWNvbiwuY2Fyb3VzZWwtY29udHJvbC1wcmV2LWljb257ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtiYWNrZ3JvdW5kOm5vLXJlcGVhdCA1MCUvMTAwJSAxMDAlfS5jYXJvdXNlbC1jb250cm9sLXByZXYtaWNvbntiYWNrZ3JvdW5kLWltYWdlOnVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIGZpbGw9JyUyM2ZmZicgdmlld0JveD0nMCAwIDggOCclM2UlM2NwYXRoIGQ9J001LjI1IDBsLTQgNCA0IDQgMS41LTEuNS0yLjUtMi41IDIuNS0yLjUtMS41LTEuNXonLyUzZSUzYy9zdmclM2VcXFwiKX0uY2Fyb3VzZWwtY29udHJvbC1uZXh0LWljb257YmFja2dyb3VuZC1pbWFnZTp1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyBmaWxsPSclMjNmZmYnIHZpZXdCb3g9JzAgMCA4IDgnJTNlJTNjcGF0aCBkPSdNMi43NSAwbC0xLjUgMS41IDIuNSAyLjUtMi41IDIuNSAxLjUgMS41IDQtNC00LTR6Jy8lM2UlM2Mvc3ZnJTNlXFxcIil9LmNhcm91c2VsLWluZGljYXRvcnN7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7ei1pbmRleDoxNTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmctbGVmdDowO21hcmdpbi1yaWdodDoxNSU7bWFyZ2luLWxlZnQ6MTUlO2xpc3Qtc3R5bGU6bm9uZX0uY2Fyb3VzZWwtaW5kaWNhdG9ycyBsaXtib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tcy1mbGV4OjAgMSBhdXRvO2ZsZXg6MCAxIGF1dG87d2lkdGg6MzBweDtoZWlnaHQ6M3B4O21hcmdpbi1yaWdodDozcHg7bWFyZ2luLWxlZnQ6M3B4O3RleHQtaW5kZW50Oi05OTlweDtjdXJzb3I6cG9pbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7YmFja2dyb3VuZC1jbGlwOnBhZGRpbmctYm94O2JvcmRlci10b3A6MTBweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjEwcHggc29saWQgdHJhbnNwYXJlbnQ7b3BhY2l0eTouNTt0cmFuc2l0aW9uOm9wYWNpdHkgLjZzIGVhc2V9QG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOnJlZHVjZSl7LmNhcm91c2VsLWluZGljYXRvcnMgbGl7dHJhbnNpdGlvbjpub25lfX0uY2Fyb3VzZWwtaW5kaWNhdG9ycyAuYWN0aXZle29wYWNpdHk6MX0uY2Fyb3VzZWwtY2FwdGlvbntwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDoxNSU7Ym90dG9tOjIwcHg7bGVmdDoxNSU7ei1pbmRleDoxMDtwYWRkaW5nLXRvcDoyMHB4O3BhZGRpbmctYm90dG9tOjIwcHg7Y29sb3I6I2ZmZjt0ZXh0LWFsaWduOmNlbnRlcn1ALXdlYmtpdC1rZXlmcmFtZXMgc3Bpbm5lci1ib3JkZXJ7dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1Aa2V5ZnJhbWVzIHNwaW5uZXItYm9yZGVye3Rvey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX19LnNwaW5uZXItYm9yZGVye2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjJyZW07aGVpZ2h0OjJyZW07dmVydGljYWwtYWxpZ246dGV4dC1ib3R0b207Ym9yZGVyOi4yNWVtIHNvbGlkIGN1cnJlbnRDb2xvcjtib3JkZXItcmlnaHQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyLXJhZGl1czo1MCU7LXdlYmtpdC1hbmltYXRpb246c3Bpbm5lci1ib3JkZXIgLjc1cyBsaW5lYXIgaW5maW5pdGU7YW5pbWF0aW9uOnNwaW5uZXItYm9yZGVyIC43NXMgbGluZWFyIGluZmluaXRlfS5zcGlubmVyLWJvcmRlci1zbXt3aWR0aDoxcmVtO2hlaWdodDoxcmVtO2JvcmRlci13aWR0aDouMmVtfUAtd2Via2l0LWtleWZyYW1lcyBzcGlubmVyLWdyb3d7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMCk7dHJhbnNmb3JtOnNjYWxlKDApfTUwJXtvcGFjaXR5OjF9fUBrZXlmcmFtZXMgc3Bpbm5lci1ncm93ezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDApO3RyYW5zZm9ybTpzY2FsZSgwKX01MCV7b3BhY2l0eToxfX0uc3Bpbm5lci1ncm93e2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjJyZW07aGVpZ2h0OjJyZW07dmVydGljYWwtYWxpZ246dGV4dC1ib3R0b207YmFja2dyb3VuZC1jb2xvcjpjdXJyZW50Q29sb3I7Ym9yZGVyLXJhZGl1czo1MCU7b3BhY2l0eTowOy13ZWJraXQtYW5pbWF0aW9uOnNwaW5uZXItZ3JvdyAuNzVzIGxpbmVhciBpbmZpbml0ZTthbmltYXRpb246c3Bpbm5lci1ncm93IC43NXMgbGluZWFyIGluZmluaXRlfS5zcGlubmVyLWdyb3ctc217d2lkdGg6MXJlbTtoZWlnaHQ6MXJlbX0uYWxpZ24tYmFzZWxpbmV7dmVydGljYWwtYWxpZ246YmFzZWxpbmUhaW1wb3J0YW50fS5hbGlnbi10b3B7dmVydGljYWwtYWxpZ246dG9wIWltcG9ydGFudH0uYWxpZ24tbWlkZGxle3ZlcnRpY2FsLWFsaWduOm1pZGRsZSFpbXBvcnRhbnR9LmFsaWduLWJvdHRvbXt2ZXJ0aWNhbC1hbGlnbjpib3R0b20haW1wb3J0YW50fS5hbGlnbi10ZXh0LWJvdHRvbXt2ZXJ0aWNhbC1hbGlnbjp0ZXh0LWJvdHRvbSFpbXBvcnRhbnR9LmFsaWduLXRleHQtdG9we3ZlcnRpY2FsLWFsaWduOnRleHQtdG9wIWltcG9ydGFudH0uYmctcHJpbWFyeXtiYWNrZ3JvdW5kLWNvbG9yOiMwMDdiZmYhaW1wb3J0YW50fWEuYmctcHJpbWFyeTpmb2N1cyxhLmJnLXByaW1hcnk6aG92ZXIsYnV0dG9uLmJnLXByaW1hcnk6Zm9jdXMsYnV0dG9uLmJnLXByaW1hcnk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojMDA2MmNjIWltcG9ydGFudH0uYmctc2Vjb25kYXJ5e2JhY2tncm91bmQtY29sb3I6IzZjNzU3ZCFpbXBvcnRhbnR9YS5iZy1zZWNvbmRhcnk6Zm9jdXMsYS5iZy1zZWNvbmRhcnk6aG92ZXIsYnV0dG9uLmJnLXNlY29uZGFyeTpmb2N1cyxidXR0b24uYmctc2Vjb25kYXJ5OmhvdmVye2JhY2tncm91bmQtY29sb3I6IzU0NWI2MiFpbXBvcnRhbnR9LmJnLXN1Y2Nlc3N7YmFja2dyb3VuZC1jb2xvcjojMjhhNzQ1IWltcG9ydGFudH1hLmJnLXN1Y2Nlc3M6Zm9jdXMsYS5iZy1zdWNjZXNzOmhvdmVyLGJ1dHRvbi5iZy1zdWNjZXNzOmZvY3VzLGJ1dHRvbi5iZy1zdWNjZXNzOmhvdmVye2JhY2tncm91bmQtY29sb3I6IzFlN2UzNCFpbXBvcnRhbnR9LmJnLWluZm97YmFja2dyb3VuZC1jb2xvcjojMTdhMmI4IWltcG9ydGFudH1hLmJnLWluZm86Zm9jdXMsYS5iZy1pbmZvOmhvdmVyLGJ1dHRvbi5iZy1pbmZvOmZvY3VzLGJ1dHRvbi5iZy1pbmZvOmhvdmVye2JhY2tncm91bmQtY29sb3I6IzExN2E4YiFpbXBvcnRhbnR9LmJnLXdhcm5pbmd7YmFja2dyb3VuZC1jb2xvcjojZmZjMTA3IWltcG9ydGFudH1hLmJnLXdhcm5pbmc6Zm9jdXMsYS5iZy13YXJuaW5nOmhvdmVyLGJ1dHRvbi5iZy13YXJuaW5nOmZvY3VzLGJ1dHRvbi5iZy13YXJuaW5nOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2QzOWUwMCFpbXBvcnRhbnR9LmJnLWRhbmdlcntiYWNrZ3JvdW5kLWNvbG9yOiNkYzM1NDUhaW1wb3J0YW50fWEuYmctZGFuZ2VyOmZvY3VzLGEuYmctZGFuZ2VyOmhvdmVyLGJ1dHRvbi5iZy1kYW5nZXI6Zm9jdXMsYnV0dG9uLmJnLWRhbmdlcjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNiZDIxMzAhaW1wb3J0YW50fS5iZy1saWdodHtiYWNrZ3JvdW5kLWNvbG9yOiNmOGY5ZmEhaW1wb3J0YW50fWEuYmctbGlnaHQ6Zm9jdXMsYS5iZy1saWdodDpob3ZlcixidXR0b24uYmctbGlnaHQ6Zm9jdXMsYnV0dG9uLmJnLWxpZ2h0OmhvdmVye2JhY2tncm91bmQtY29sb3I6I2RhZTBlNSFpbXBvcnRhbnR9LmJnLWRhcmt7YmFja2dyb3VuZC1jb2xvcjojMzQzYTQwIWltcG9ydGFudH1hLmJnLWRhcms6Zm9jdXMsYS5iZy1kYXJrOmhvdmVyLGJ1dHRvbi5iZy1kYXJrOmZvY3VzLGJ1dHRvbi5iZy1kYXJrOmhvdmVye2JhY2tncm91bmQtY29sb3I6IzFkMjEyNCFpbXBvcnRhbnR9LmJnLXdoaXRle2JhY2tncm91bmQtY29sb3I6I2ZmZiFpbXBvcnRhbnR9LmJnLXRyYW5zcGFyZW50e2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQhaW1wb3J0YW50fS5ib3JkZXJ7Ym9yZGVyOjFweCBzb2xpZCAjZGVlMmU2IWltcG9ydGFudH0uYm9yZGVyLXRvcHtib3JkZXItdG9wOjFweCBzb2xpZCAjZGVlMmU2IWltcG9ydGFudH0uYm9yZGVyLXJpZ2h0e2JvcmRlci1yaWdodDoxcHggc29saWQgI2RlZTJlNiFpbXBvcnRhbnR9LmJvcmRlci1ib3R0b217Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2RlZTJlNiFpbXBvcnRhbnR9LmJvcmRlci1sZWZ0e2JvcmRlci1sZWZ0OjFweCBzb2xpZCAjZGVlMmU2IWltcG9ydGFudH0uYm9yZGVyLTB7Ym9yZGVyOjAhaW1wb3J0YW50fS5ib3JkZXItdG9wLTB7Ym9yZGVyLXRvcDowIWltcG9ydGFudH0uYm9yZGVyLXJpZ2h0LTB7Ym9yZGVyLXJpZ2h0OjAhaW1wb3J0YW50fS5ib3JkZXItYm90dG9tLTB7Ym9yZGVyLWJvdHRvbTowIWltcG9ydGFudH0uYm9yZGVyLWxlZnQtMHtib3JkZXItbGVmdDowIWltcG9ydGFudH0uYm9yZGVyLXByaW1hcnl7Ym9yZGVyLWNvbG9yOiMwMDdiZmYhaW1wb3J0YW50fS5ib3JkZXItc2Vjb25kYXJ5e2JvcmRlci1jb2xvcjojNmM3NTdkIWltcG9ydGFudH0uYm9yZGVyLXN1Y2Nlc3N7Ym9yZGVyLWNvbG9yOiMyOGE3NDUhaW1wb3J0YW50fS5ib3JkZXItaW5mb3tib3JkZXItY29sb3I6IzE3YTJiOCFpbXBvcnRhbnR9LmJvcmRlci13YXJuaW5ne2JvcmRlci1jb2xvcjojZmZjMTA3IWltcG9ydGFudH0uYm9yZGVyLWRhbmdlcntib3JkZXItY29sb3I6I2RjMzU0NSFpbXBvcnRhbnR9LmJvcmRlci1saWdodHtib3JkZXItY29sb3I6I2Y4ZjlmYSFpbXBvcnRhbnR9LmJvcmRlci1kYXJre2JvcmRlci1jb2xvcjojMzQzYTQwIWltcG9ydGFudH0uYm9yZGVyLXdoaXRle2JvcmRlci1jb2xvcjojZmZmIWltcG9ydGFudH0ucm91bmRlZC1zbXtib3JkZXItcmFkaXVzOi4ycmVtIWltcG9ydGFudH0ucm91bmRlZHtib3JkZXItcmFkaXVzOi4yNXJlbSFpbXBvcnRhbnR9LnJvdW5kZWQtdG9we2JvcmRlci10b3AtbGVmdC1yYWRpdXM6LjI1cmVtIWltcG9ydGFudDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czouMjVyZW0haW1wb3J0YW50fS5yb3VuZGVkLXJpZ2h0e2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOi4yNXJlbSFpbXBvcnRhbnQ7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6LjI1cmVtIWltcG9ydGFudH0ucm91bmRlZC1ib3R0b217Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6LjI1cmVtIWltcG9ydGFudDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOi4yNXJlbSFpbXBvcnRhbnR9LnJvdW5kZWQtbGVmdHtib3JkZXItdG9wLWxlZnQtcmFkaXVzOi4yNXJlbSFpbXBvcnRhbnQ7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czouMjVyZW0haW1wb3J0YW50fS5yb3VuZGVkLWxne2JvcmRlci1yYWRpdXM6LjNyZW0haW1wb3J0YW50fS5yb3VuZGVkLWNpcmNsZXtib3JkZXItcmFkaXVzOjUwJSFpbXBvcnRhbnR9LnJvdW5kZWQtcGlsbHtib3JkZXItcmFkaXVzOjUwcmVtIWltcG9ydGFudH0ucm91bmRlZC0we2JvcmRlci1yYWRpdXM6MCFpbXBvcnRhbnR9LmNsZWFyZml4OjphZnRlcntkaXNwbGF5OmJsb2NrO2NsZWFyOmJvdGg7Y29udGVudDpcXFwiXFxcIn0uZC1ub25le2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LmQtaW5saW5le2Rpc3BsYXk6aW5saW5lIWltcG9ydGFudH0uZC1pbmxpbmUtYmxvY2t7ZGlzcGxheTppbmxpbmUtYmxvY2shaW1wb3J0YW50fS5kLWJsb2Nre2Rpc3BsYXk6YmxvY2shaW1wb3J0YW50fS5kLXRhYmxle2Rpc3BsYXk6dGFibGUhaW1wb3J0YW50fS5kLXRhYmxlLXJvd3tkaXNwbGF5OnRhYmxlLXJvdyFpbXBvcnRhbnR9LmQtdGFibGUtY2VsbHtkaXNwbGF5OnRhYmxlLWNlbGwhaW1wb3J0YW50fS5kLWZsZXh7ZGlzcGxheTotbXMtZmxleGJveCFpbXBvcnRhbnQ7ZGlzcGxheTpmbGV4IWltcG9ydGFudH0uZC1pbmxpbmUtZmxleHtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveCFpbXBvcnRhbnQ7ZGlzcGxheTppbmxpbmUtZmxleCFpbXBvcnRhbnR9QG1lZGlhIChtaW4td2lkdGg6NTc2cHgpey5kLXNtLW5vbmV7ZGlzcGxheTpub25lIWltcG9ydGFudH0uZC1zbS1pbmxpbmV7ZGlzcGxheTppbmxpbmUhaW1wb3J0YW50fS5kLXNtLWlubGluZS1ibG9ja3tkaXNwbGF5OmlubGluZS1ibG9jayFpbXBvcnRhbnR9LmQtc20tYmxvY2t7ZGlzcGxheTpibG9jayFpbXBvcnRhbnR9LmQtc20tdGFibGV7ZGlzcGxheTp0YWJsZSFpbXBvcnRhbnR9LmQtc20tdGFibGUtcm93e2Rpc3BsYXk6dGFibGUtcm93IWltcG9ydGFudH0uZC1zbS10YWJsZS1jZWxse2Rpc3BsYXk6dGFibGUtY2VsbCFpbXBvcnRhbnR9LmQtc20tZmxleHtkaXNwbGF5Oi1tcy1mbGV4Ym94IWltcG9ydGFudDtkaXNwbGF5OmZsZXghaW1wb3J0YW50fS5kLXNtLWlubGluZS1mbGV4e2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94IWltcG9ydGFudDtkaXNwbGF5OmlubGluZS1mbGV4IWltcG9ydGFudH19QG1lZGlhIChtaW4td2lkdGg6NzY4cHgpey5kLW1kLW5vbmV7ZGlzcGxheTpub25lIWltcG9ydGFudH0uZC1tZC1pbmxpbmV7ZGlzcGxheTppbmxpbmUhaW1wb3J0YW50fS5kLW1kLWlubGluZS1ibG9ja3tkaXNwbGF5OmlubGluZS1ibG9jayFpbXBvcnRhbnR9LmQtbWQtYmxvY2t7ZGlzcGxheTpibG9jayFpbXBvcnRhbnR9LmQtbWQtdGFibGV7ZGlzcGxheTp0YWJsZSFpbXBvcnRhbnR9LmQtbWQtdGFibGUtcm93e2Rpc3BsYXk6dGFibGUtcm93IWltcG9ydGFudH0uZC1tZC10YWJsZS1jZWxse2Rpc3BsYXk6dGFibGUtY2VsbCFpbXBvcnRhbnR9LmQtbWQtZmxleHtkaXNwbGF5Oi1tcy1mbGV4Ym94IWltcG9ydGFudDtkaXNwbGF5OmZsZXghaW1wb3J0YW50fS5kLW1kLWlubGluZS1mbGV4e2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94IWltcG9ydGFudDtkaXNwbGF5OmlubGluZS1mbGV4IWltcG9ydGFudH19QG1lZGlhIChtaW4td2lkdGg6OTkycHgpey5kLWxnLW5vbmV7ZGlzcGxheTpub25lIWltcG9ydGFudH0uZC1sZy1pbmxpbmV7ZGlzcGxheTppbmxpbmUhaW1wb3J0YW50fS5kLWxnLWlubGluZS1ibG9ja3tkaXNwbGF5OmlubGluZS1ibG9jayFpbXBvcnRhbnR9LmQtbGctYmxvY2t7ZGlzcGxheTpibG9jayFpbXBvcnRhbnR9LmQtbGctdGFibGV7ZGlzcGxheTp0YWJsZSFpbXBvcnRhbnR9LmQtbGctdGFibGUtcm93e2Rpc3BsYXk6dGFibGUtcm93IWltcG9ydGFudH0uZC1sZy10YWJsZS1jZWxse2Rpc3BsYXk6dGFibGUtY2VsbCFpbXBvcnRhbnR9LmQtbGctZmxleHtkaXNwbGF5Oi1tcy1mbGV4Ym94IWltcG9ydGFudDtkaXNwbGF5OmZsZXghaW1wb3J0YW50fS5kLWxnLWlubGluZS1mbGV4e2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94IWltcG9ydGFudDtkaXNwbGF5OmlubGluZS1mbGV4IWltcG9ydGFudH19QG1lZGlhIChtaW4td2lkdGg6MTIwMHB4KXsuZC14bC1ub25le2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LmQteGwtaW5saW5le2Rpc3BsYXk6aW5saW5lIWltcG9ydGFudH0uZC14bC1pbmxpbmUtYmxvY2t7ZGlzcGxheTppbmxpbmUtYmxvY2shaW1wb3J0YW50fS5kLXhsLWJsb2Nre2Rpc3BsYXk6YmxvY2shaW1wb3J0YW50fS5kLXhsLXRhYmxle2Rpc3BsYXk6dGFibGUhaW1wb3J0YW50fS5kLXhsLXRhYmxlLXJvd3tkaXNwbGF5OnRhYmxlLXJvdyFpbXBvcnRhbnR9LmQteGwtdGFibGUtY2VsbHtkaXNwbGF5OnRhYmxlLWNlbGwhaW1wb3J0YW50fS5kLXhsLWZsZXh7ZGlzcGxheTotbXMtZmxleGJveCFpbXBvcnRhbnQ7ZGlzcGxheTpmbGV4IWltcG9ydGFudH0uZC14bC1pbmxpbmUtZmxleHtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveCFpbXBvcnRhbnQ7ZGlzcGxheTppbmxpbmUtZmxleCFpbXBvcnRhbnR9fUBtZWRpYSBwcmludHsuZC1wcmludC1ub25le2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LmQtcHJpbnQtaW5saW5le2Rpc3BsYXk6aW5saW5lIWltcG9ydGFudH0uZC1wcmludC1pbmxpbmUtYmxvY2t7ZGlzcGxheTppbmxpbmUtYmxvY2shaW1wb3J0YW50fS5kLXByaW50LWJsb2Nre2Rpc3BsYXk6YmxvY2shaW1wb3J0YW50fS5kLXByaW50LXRhYmxle2Rpc3BsYXk6dGFibGUhaW1wb3J0YW50fS5kLXByaW50LXRhYmxlLXJvd3tkaXNwbGF5OnRhYmxlLXJvdyFpbXBvcnRhbnR9LmQtcHJpbnQtdGFibGUtY2VsbHtkaXNwbGF5OnRhYmxlLWNlbGwhaW1wb3J0YW50fS5kLXByaW50LWZsZXh7ZGlzcGxheTotbXMtZmxleGJveCFpbXBvcnRhbnQ7ZGlzcGxheTpmbGV4IWltcG9ydGFudH0uZC1wcmludC1pbmxpbmUtZmxleHtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveCFpbXBvcnRhbnQ7ZGlzcGxheTppbmxpbmUtZmxleCFpbXBvcnRhbnR9fS5lbWJlZC1yZXNwb25zaXZle3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtwYWRkaW5nOjA7b3ZlcmZsb3c6aGlkZGVufS5lbWJlZC1yZXNwb25zaXZlOjpiZWZvcmV7ZGlzcGxheTpibG9jaztjb250ZW50OlxcXCJcXFwifS5lbWJlZC1yZXNwb25zaXZlIC5lbWJlZC1yZXNwb25zaXZlLWl0ZW0sLmVtYmVkLXJlc3BvbnNpdmUgZW1iZWQsLmVtYmVkLXJlc3BvbnNpdmUgaWZyYW1lLC5lbWJlZC1yZXNwb25zaXZlIG9iamVjdCwuZW1iZWQtcmVzcG9uc2l2ZSB2aWRlb3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3JkZXI6MH0uZW1iZWQtcmVzcG9uc2l2ZS0yMWJ5OTo6YmVmb3Jle3BhZGRpbmctdG9wOjQyLjg1NzE0MyV9LmVtYmVkLXJlc3BvbnNpdmUtMTZieTk6OmJlZm9yZXtwYWRkaW5nLXRvcDo1Ni4yNSV9LmVtYmVkLXJlc3BvbnNpdmUtNGJ5Mzo6YmVmb3Jle3BhZGRpbmctdG9wOjc1JX0uZW1iZWQtcmVzcG9uc2l2ZS0xYnkxOjpiZWZvcmV7cGFkZGluZy10b3A6MTAwJX0uZmxleC1yb3d7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdyFpbXBvcnRhbnQ7ZmxleC1kaXJlY3Rpb246cm93IWltcG9ydGFudH0uZmxleC1jb2x1bW57LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbiFpbXBvcnRhbnQ7ZmxleC1kaXJlY3Rpb246Y29sdW1uIWltcG9ydGFudH0uZmxleC1yb3ctcmV2ZXJzZXstbXMtZmxleC1kaXJlY3Rpb246cm93LXJldmVyc2UhaW1wb3J0YW50O2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlIWltcG9ydGFudH0uZmxleC1jb2x1bW4tcmV2ZXJzZXstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2UhaW1wb3J0YW50O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbi1yZXZlcnNlIWltcG9ydGFudH0uZmxleC13cmFwey1tcy1mbGV4LXdyYXA6d3JhcCFpbXBvcnRhbnQ7ZmxleC13cmFwOndyYXAhaW1wb3J0YW50fS5mbGV4LW5vd3JhcHstbXMtZmxleC13cmFwOm5vd3JhcCFpbXBvcnRhbnQ7ZmxleC13cmFwOm5vd3JhcCFpbXBvcnRhbnR9LmZsZXgtd3JhcC1yZXZlcnNley1tcy1mbGV4LXdyYXA6d3JhcC1yZXZlcnNlIWltcG9ydGFudDtmbGV4LXdyYXA6d3JhcC1yZXZlcnNlIWltcG9ydGFudH0uZmxleC1maWxsey1tcy1mbGV4OjEgMSBhdXRvIWltcG9ydGFudDtmbGV4OjEgMSBhdXRvIWltcG9ydGFudH0uZmxleC1ncm93LTB7LW1zLWZsZXgtcG9zaXRpdmU6MCFpbXBvcnRhbnQ7ZmxleC1ncm93OjAhaW1wb3J0YW50fS5mbGV4LWdyb3ctMXstbXMtZmxleC1wb3NpdGl2ZToxIWltcG9ydGFudDtmbGV4LWdyb3c6MSFpbXBvcnRhbnR9LmZsZXgtc2hyaW5rLTB7LW1zLWZsZXgtbmVnYXRpdmU6MCFpbXBvcnRhbnQ7ZmxleC1zaHJpbms6MCFpbXBvcnRhbnR9LmZsZXgtc2hyaW5rLTF7LW1zLWZsZXgtbmVnYXRpdmU6MSFpbXBvcnRhbnQ7ZmxleC1zaHJpbms6MSFpbXBvcnRhbnR9Lmp1c3RpZnktY29udGVudC1zdGFydHstbXMtZmxleC1wYWNrOnN0YXJ0IWltcG9ydGFudDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydCFpbXBvcnRhbnR9Lmp1c3RpZnktY29udGVudC1lbmR7LW1zLWZsZXgtcGFjazplbmQhaW1wb3J0YW50O2p1c3RpZnktY29udGVudDpmbGV4LWVuZCFpbXBvcnRhbnR9Lmp1c3RpZnktY29udGVudC1jZW50ZXJ7LW1zLWZsZXgtcGFjazpjZW50ZXIhaW1wb3J0YW50O2p1c3RpZnktY29udGVudDpjZW50ZXIhaW1wb3J0YW50fS5qdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbnstbXMtZmxleC1wYWNrOmp1c3RpZnkhaW1wb3J0YW50O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuIWltcG9ydGFudH0uanVzdGlmeS1jb250ZW50LWFyb3VuZHstbXMtZmxleC1wYWNrOmRpc3RyaWJ1dGUhaW1wb3J0YW50O2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQhaW1wb3J0YW50fS5hbGlnbi1pdGVtcy1zdGFydHstbXMtZmxleC1hbGlnbjpzdGFydCFpbXBvcnRhbnQ7YWxpZ24taXRlbXM6ZmxleC1zdGFydCFpbXBvcnRhbnR9LmFsaWduLWl0ZW1zLWVuZHstbXMtZmxleC1hbGlnbjplbmQhaW1wb3J0YW50O2FsaWduLWl0ZW1zOmZsZXgtZW5kIWltcG9ydGFudH0uYWxpZ24taXRlbXMtY2VudGVyey1tcy1mbGV4LWFsaWduOmNlbnRlciFpbXBvcnRhbnQ7YWxpZ24taXRlbXM6Y2VudGVyIWltcG9ydGFudH0uYWxpZ24taXRlbXMtYmFzZWxpbmV7LW1zLWZsZXgtYWxpZ246YmFzZWxpbmUhaW1wb3J0YW50O2FsaWduLWl0ZW1zOmJhc2VsaW5lIWltcG9ydGFudH0uYWxpZ24taXRlbXMtc3RyZXRjaHstbXMtZmxleC1hbGlnbjpzdHJldGNoIWltcG9ydGFudDthbGlnbi1pdGVtczpzdHJldGNoIWltcG9ydGFudH0uYWxpZ24tY29udGVudC1zdGFydHstbXMtZmxleC1saW5lLXBhY2s6c3RhcnQhaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6ZmxleC1zdGFydCFpbXBvcnRhbnR9LmFsaWduLWNvbnRlbnQtZW5key1tcy1mbGV4LWxpbmUtcGFjazplbmQhaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6ZmxleC1lbmQhaW1wb3J0YW50fS5hbGlnbi1jb250ZW50LWNlbnRlcnstbXMtZmxleC1saW5lLXBhY2s6Y2VudGVyIWltcG9ydGFudDthbGlnbi1jb250ZW50OmNlbnRlciFpbXBvcnRhbnR9LmFsaWduLWNvbnRlbnQtYmV0d2VlbnstbXMtZmxleC1saW5lLXBhY2s6anVzdGlmeSFpbXBvcnRhbnQ7YWxpZ24tY29udGVudDpzcGFjZS1iZXR3ZWVuIWltcG9ydGFudH0uYWxpZ24tY29udGVudC1hcm91bmR7LW1zLWZsZXgtbGluZS1wYWNrOmRpc3RyaWJ1dGUhaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6c3BhY2UtYXJvdW5kIWltcG9ydGFudH0uYWxpZ24tY29udGVudC1zdHJldGNoey1tcy1mbGV4LWxpbmUtcGFjazpzdHJldGNoIWltcG9ydGFudDthbGlnbi1jb250ZW50OnN0cmV0Y2ghaW1wb3J0YW50fS5hbGlnbi1zZWxmLWF1dG97LW1zLWZsZXgtaXRlbS1hbGlnbjphdXRvIWltcG9ydGFudDthbGlnbi1zZWxmOmF1dG8haW1wb3J0YW50fS5hbGlnbi1zZWxmLXN0YXJ0ey1tcy1mbGV4LWl0ZW0tYWxpZ246c3RhcnQhaW1wb3J0YW50O2FsaWduLXNlbGY6ZmxleC1zdGFydCFpbXBvcnRhbnR9LmFsaWduLXNlbGYtZW5key1tcy1mbGV4LWl0ZW0tYWxpZ246ZW5kIWltcG9ydGFudDthbGlnbi1zZWxmOmZsZXgtZW5kIWltcG9ydGFudH0uYWxpZ24tc2VsZi1jZW50ZXJ7LW1zLWZsZXgtaXRlbS1hbGlnbjpjZW50ZXIhaW1wb3J0YW50O2FsaWduLXNlbGY6Y2VudGVyIWltcG9ydGFudH0uYWxpZ24tc2VsZi1iYXNlbGluZXstbXMtZmxleC1pdGVtLWFsaWduOmJhc2VsaW5lIWltcG9ydGFudDthbGlnbi1zZWxmOmJhc2VsaW5lIWltcG9ydGFudH0uYWxpZ24tc2VsZi1zdHJldGNoey1tcy1mbGV4LWl0ZW0tYWxpZ246c3RyZXRjaCFpbXBvcnRhbnQ7YWxpZ24tc2VsZjpzdHJldGNoIWltcG9ydGFudH1AbWVkaWEgKG1pbi13aWR0aDo1NzZweCl7LmZsZXgtc20tcm93ey1tcy1mbGV4LWRpcmVjdGlvbjpyb3chaW1wb3J0YW50O2ZsZXgtZGlyZWN0aW9uOnJvdyFpbXBvcnRhbnR9LmZsZXgtc20tY29sdW1uey1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW4haW1wb3J0YW50O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbiFpbXBvcnRhbnR9LmZsZXgtc20tcm93LXJldmVyc2V7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlIWltcG9ydGFudDtmbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZSFpbXBvcnRhbnR9LmZsZXgtc20tY29sdW1uLXJldmVyc2V7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbi1yZXZlcnNlIWltcG9ydGFudDtmbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZSFpbXBvcnRhbnR9LmZsZXgtc20td3JhcHstbXMtZmxleC13cmFwOndyYXAhaW1wb3J0YW50O2ZsZXgtd3JhcDp3cmFwIWltcG9ydGFudH0uZmxleC1zbS1ub3dyYXB7LW1zLWZsZXgtd3JhcDpub3dyYXAhaW1wb3J0YW50O2ZsZXgtd3JhcDpub3dyYXAhaW1wb3J0YW50fS5mbGV4LXNtLXdyYXAtcmV2ZXJzZXstbXMtZmxleC13cmFwOndyYXAtcmV2ZXJzZSFpbXBvcnRhbnQ7ZmxleC13cmFwOndyYXAtcmV2ZXJzZSFpbXBvcnRhbnR9LmZsZXgtc20tZmlsbHstbXMtZmxleDoxIDEgYXV0byFpbXBvcnRhbnQ7ZmxleDoxIDEgYXV0byFpbXBvcnRhbnR9LmZsZXgtc20tZ3Jvdy0wey1tcy1mbGV4LXBvc2l0aXZlOjAhaW1wb3J0YW50O2ZsZXgtZ3JvdzowIWltcG9ydGFudH0uZmxleC1zbS1ncm93LTF7LW1zLWZsZXgtcG9zaXRpdmU6MSFpbXBvcnRhbnQ7ZmxleC1ncm93OjEhaW1wb3J0YW50fS5mbGV4LXNtLXNocmluay0wey1tcy1mbGV4LW5lZ2F0aXZlOjAhaW1wb3J0YW50O2ZsZXgtc2hyaW5rOjAhaW1wb3J0YW50fS5mbGV4LXNtLXNocmluay0xey1tcy1mbGV4LW5lZ2F0aXZlOjEhaW1wb3J0YW50O2ZsZXgtc2hyaW5rOjEhaW1wb3J0YW50fS5qdXN0aWZ5LWNvbnRlbnQtc20tc3RhcnR7LW1zLWZsZXgtcGFjazpzdGFydCFpbXBvcnRhbnQ7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQhaW1wb3J0YW50fS5qdXN0aWZ5LWNvbnRlbnQtc20tZW5key1tcy1mbGV4LXBhY2s6ZW5kIWltcG9ydGFudDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmQhaW1wb3J0YW50fS5qdXN0aWZ5LWNvbnRlbnQtc20tY2VudGVyey1tcy1mbGV4LXBhY2s6Y2VudGVyIWltcG9ydGFudDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyIWltcG9ydGFudH0uanVzdGlmeS1jb250ZW50LXNtLWJldHdlZW57LW1zLWZsZXgtcGFjazpqdXN0aWZ5IWltcG9ydGFudDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbiFpbXBvcnRhbnR9Lmp1c3RpZnktY29udGVudC1zbS1hcm91bmR7LW1zLWZsZXgtcGFjazpkaXN0cmlidXRlIWltcG9ydGFudDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kIWltcG9ydGFudH0uYWxpZ24taXRlbXMtc20tc3RhcnR7LW1zLWZsZXgtYWxpZ246c3RhcnQhaW1wb3J0YW50O2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQhaW1wb3J0YW50fS5hbGlnbi1pdGVtcy1zbS1lbmR7LW1zLWZsZXgtYWxpZ246ZW5kIWltcG9ydGFudDthbGlnbi1pdGVtczpmbGV4LWVuZCFpbXBvcnRhbnR9LmFsaWduLWl0ZW1zLXNtLWNlbnRlcnstbXMtZmxleC1hbGlnbjpjZW50ZXIhaW1wb3J0YW50O2FsaWduLWl0ZW1zOmNlbnRlciFpbXBvcnRhbnR9LmFsaWduLWl0ZW1zLXNtLWJhc2VsaW5ley1tcy1mbGV4LWFsaWduOmJhc2VsaW5lIWltcG9ydGFudDthbGlnbi1pdGVtczpiYXNlbGluZSFpbXBvcnRhbnR9LmFsaWduLWl0ZW1zLXNtLXN0cmV0Y2h7LW1zLWZsZXgtYWxpZ246c3RyZXRjaCFpbXBvcnRhbnQ7YWxpZ24taXRlbXM6c3RyZXRjaCFpbXBvcnRhbnR9LmFsaWduLWNvbnRlbnQtc20tc3RhcnR7LW1zLWZsZXgtbGluZS1wYWNrOnN0YXJ0IWltcG9ydGFudDthbGlnbi1jb250ZW50OmZsZXgtc3RhcnQhaW1wb3J0YW50fS5hbGlnbi1jb250ZW50LXNtLWVuZHstbXMtZmxleC1saW5lLXBhY2s6ZW5kIWltcG9ydGFudDthbGlnbi1jb250ZW50OmZsZXgtZW5kIWltcG9ydGFudH0uYWxpZ24tY29udGVudC1zbS1jZW50ZXJ7LW1zLWZsZXgtbGluZS1wYWNrOmNlbnRlciFpbXBvcnRhbnQ7YWxpZ24tY29udGVudDpjZW50ZXIhaW1wb3J0YW50fS5hbGlnbi1jb250ZW50LXNtLWJldHdlZW57LW1zLWZsZXgtbGluZS1wYWNrOmp1c3RpZnkhaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6c3BhY2UtYmV0d2VlbiFpbXBvcnRhbnR9LmFsaWduLWNvbnRlbnQtc20tYXJvdW5key1tcy1mbGV4LWxpbmUtcGFjazpkaXN0cmlidXRlIWltcG9ydGFudDthbGlnbi1jb250ZW50OnNwYWNlLWFyb3VuZCFpbXBvcnRhbnR9LmFsaWduLWNvbnRlbnQtc20tc3RyZXRjaHstbXMtZmxleC1saW5lLXBhY2s6c3RyZXRjaCFpbXBvcnRhbnQ7YWxpZ24tY29udGVudDpzdHJldGNoIWltcG9ydGFudH0uYWxpZ24tc2VsZi1zbS1hdXRvey1tcy1mbGV4LWl0ZW0tYWxpZ246YXV0byFpbXBvcnRhbnQ7YWxpZ24tc2VsZjphdXRvIWltcG9ydGFudH0uYWxpZ24tc2VsZi1zbS1zdGFydHstbXMtZmxleC1pdGVtLWFsaWduOnN0YXJ0IWltcG9ydGFudDthbGlnbi1zZWxmOmZsZXgtc3RhcnQhaW1wb3J0YW50fS5hbGlnbi1zZWxmLXNtLWVuZHstbXMtZmxleC1pdGVtLWFsaWduOmVuZCFpbXBvcnRhbnQ7YWxpZ24tc2VsZjpmbGV4LWVuZCFpbXBvcnRhbnR9LmFsaWduLXNlbGYtc20tY2VudGVyey1tcy1mbGV4LWl0ZW0tYWxpZ246Y2VudGVyIWltcG9ydGFudDthbGlnbi1zZWxmOmNlbnRlciFpbXBvcnRhbnR9LmFsaWduLXNlbGYtc20tYmFzZWxpbmV7LW1zLWZsZXgtaXRlbS1hbGlnbjpiYXNlbGluZSFpbXBvcnRhbnQ7YWxpZ24tc2VsZjpiYXNlbGluZSFpbXBvcnRhbnR9LmFsaWduLXNlbGYtc20tc3RyZXRjaHstbXMtZmxleC1pdGVtLWFsaWduOnN0cmV0Y2ghaW1wb3J0YW50O2FsaWduLXNlbGY6c3RyZXRjaCFpbXBvcnRhbnR9fUBtZWRpYSAobWluLXdpZHRoOjc2OHB4KXsuZmxleC1tZC1yb3d7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdyFpbXBvcnRhbnQ7ZmxleC1kaXJlY3Rpb246cm93IWltcG9ydGFudH0uZmxleC1tZC1jb2x1bW57LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbiFpbXBvcnRhbnQ7ZmxleC1kaXJlY3Rpb246Y29sdW1uIWltcG9ydGFudH0uZmxleC1tZC1yb3ctcmV2ZXJzZXstbXMtZmxleC1kaXJlY3Rpb246cm93LXJldmVyc2UhaW1wb3J0YW50O2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlIWltcG9ydGFudH0uZmxleC1tZC1jb2x1bW4tcmV2ZXJzZXstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2UhaW1wb3J0YW50O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbi1yZXZlcnNlIWltcG9ydGFudH0uZmxleC1tZC13cmFwey1tcy1mbGV4LXdyYXA6d3JhcCFpbXBvcnRhbnQ7ZmxleC13cmFwOndyYXAhaW1wb3J0YW50fS5mbGV4LW1kLW5vd3JhcHstbXMtZmxleC13cmFwOm5vd3JhcCFpbXBvcnRhbnQ7ZmxleC13cmFwOm5vd3JhcCFpbXBvcnRhbnR9LmZsZXgtbWQtd3JhcC1yZXZlcnNley1tcy1mbGV4LXdyYXA6d3JhcC1yZXZlcnNlIWltcG9ydGFudDtmbGV4LXdyYXA6d3JhcC1yZXZlcnNlIWltcG9ydGFudH0uZmxleC1tZC1maWxsey1tcy1mbGV4OjEgMSBhdXRvIWltcG9ydGFudDtmbGV4OjEgMSBhdXRvIWltcG9ydGFudH0uZmxleC1tZC1ncm93LTB7LW1zLWZsZXgtcG9zaXRpdmU6MCFpbXBvcnRhbnQ7ZmxleC1ncm93OjAhaW1wb3J0YW50fS5mbGV4LW1kLWdyb3ctMXstbXMtZmxleC1wb3NpdGl2ZToxIWltcG9ydGFudDtmbGV4LWdyb3c6MSFpbXBvcnRhbnR9LmZsZXgtbWQtc2hyaW5rLTB7LW1zLWZsZXgtbmVnYXRpdmU6MCFpbXBvcnRhbnQ7ZmxleC1zaHJpbms6MCFpbXBvcnRhbnR9LmZsZXgtbWQtc2hyaW5rLTF7LW1zLWZsZXgtbmVnYXRpdmU6MSFpbXBvcnRhbnQ7ZmxleC1zaHJpbms6MSFpbXBvcnRhbnR9Lmp1c3RpZnktY29udGVudC1tZC1zdGFydHstbXMtZmxleC1wYWNrOnN0YXJ0IWltcG9ydGFudDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydCFpbXBvcnRhbnR9Lmp1c3RpZnktY29udGVudC1tZC1lbmR7LW1zLWZsZXgtcGFjazplbmQhaW1wb3J0YW50O2p1c3RpZnktY29udGVudDpmbGV4LWVuZCFpbXBvcnRhbnR9Lmp1c3RpZnktY29udGVudC1tZC1jZW50ZXJ7LW1zLWZsZXgtcGFjazpjZW50ZXIhaW1wb3J0YW50O2p1c3RpZnktY29udGVudDpjZW50ZXIhaW1wb3J0YW50fS5qdXN0aWZ5LWNvbnRlbnQtbWQtYmV0d2VlbnstbXMtZmxleC1wYWNrOmp1c3RpZnkhaW1wb3J0YW50O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuIWltcG9ydGFudH0uanVzdGlmeS1jb250ZW50LW1kLWFyb3VuZHstbXMtZmxleC1wYWNrOmRpc3RyaWJ1dGUhaW1wb3J0YW50O2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQhaW1wb3J0YW50fS5hbGlnbi1pdGVtcy1tZC1zdGFydHstbXMtZmxleC1hbGlnbjpzdGFydCFpbXBvcnRhbnQ7YWxpZ24taXRlbXM6ZmxleC1zdGFydCFpbXBvcnRhbnR9LmFsaWduLWl0ZW1zLW1kLWVuZHstbXMtZmxleC1hbGlnbjplbmQhaW1wb3J0YW50O2FsaWduLWl0ZW1zOmZsZXgtZW5kIWltcG9ydGFudH0uYWxpZ24taXRlbXMtbWQtY2VudGVyey1tcy1mbGV4LWFsaWduOmNlbnRlciFpbXBvcnRhbnQ7YWxpZ24taXRlbXM6Y2VudGVyIWltcG9ydGFudH0uYWxpZ24taXRlbXMtbWQtYmFzZWxpbmV7LW1zLWZsZXgtYWxpZ246YmFzZWxpbmUhaW1wb3J0YW50O2FsaWduLWl0ZW1zOmJhc2VsaW5lIWltcG9ydGFudH0uYWxpZ24taXRlbXMtbWQtc3RyZXRjaHstbXMtZmxleC1hbGlnbjpzdHJldGNoIWltcG9ydGFudDthbGlnbi1pdGVtczpzdHJldGNoIWltcG9ydGFudH0uYWxpZ24tY29udGVudC1tZC1zdGFydHstbXMtZmxleC1saW5lLXBhY2s6c3RhcnQhaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6ZmxleC1zdGFydCFpbXBvcnRhbnR9LmFsaWduLWNvbnRlbnQtbWQtZW5key1tcy1mbGV4LWxpbmUtcGFjazplbmQhaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6ZmxleC1lbmQhaW1wb3J0YW50fS5hbGlnbi1jb250ZW50LW1kLWNlbnRlcnstbXMtZmxleC1saW5lLXBhY2s6Y2VudGVyIWltcG9ydGFudDthbGlnbi1jb250ZW50OmNlbnRlciFpbXBvcnRhbnR9LmFsaWduLWNvbnRlbnQtbWQtYmV0d2VlbnstbXMtZmxleC1saW5lLXBhY2s6anVzdGlmeSFpbXBvcnRhbnQ7YWxpZ24tY29udGVudDpzcGFjZS1iZXR3ZWVuIWltcG9ydGFudH0uYWxpZ24tY29udGVudC1tZC1hcm91bmR7LW1zLWZsZXgtbGluZS1wYWNrOmRpc3RyaWJ1dGUhaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6c3BhY2UtYXJvdW5kIWltcG9ydGFudH0uYWxpZ24tY29udGVudC1tZC1zdHJldGNoey1tcy1mbGV4LWxpbmUtcGFjazpzdHJldGNoIWltcG9ydGFudDthbGlnbi1jb250ZW50OnN0cmV0Y2ghaW1wb3J0YW50fS5hbGlnbi1zZWxmLW1kLWF1dG97LW1zLWZsZXgtaXRlbS1hbGlnbjphdXRvIWltcG9ydGFudDthbGlnbi1zZWxmOmF1dG8haW1wb3J0YW50fS5hbGlnbi1zZWxmLW1kLXN0YXJ0ey1tcy1mbGV4LWl0ZW0tYWxpZ246c3RhcnQhaW1wb3J0YW50O2FsaWduLXNlbGY6ZmxleC1zdGFydCFpbXBvcnRhbnR9LmFsaWduLXNlbGYtbWQtZW5key1tcy1mbGV4LWl0ZW0tYWxpZ246ZW5kIWltcG9ydGFudDthbGlnbi1zZWxmOmZsZXgtZW5kIWltcG9ydGFudH0uYWxpZ24tc2VsZi1tZC1jZW50ZXJ7LW1zLWZsZXgtaXRlbS1hbGlnbjpjZW50ZXIhaW1wb3J0YW50O2FsaWduLXNlbGY6Y2VudGVyIWltcG9ydGFudH0uYWxpZ24tc2VsZi1tZC1iYXNlbGluZXstbXMtZmxleC1pdGVtLWFsaWduOmJhc2VsaW5lIWltcG9ydGFudDthbGlnbi1zZWxmOmJhc2VsaW5lIWltcG9ydGFudH0uYWxpZ24tc2VsZi1tZC1zdHJldGNoey1tcy1mbGV4LWl0ZW0tYWxpZ246c3RyZXRjaCFpbXBvcnRhbnQ7YWxpZ24tc2VsZjpzdHJldGNoIWltcG9ydGFudH19QG1lZGlhIChtaW4td2lkdGg6OTkycHgpey5mbGV4LWxnLXJvd3stbXMtZmxleC1kaXJlY3Rpb246cm93IWltcG9ydGFudDtmbGV4LWRpcmVjdGlvbjpyb3chaW1wb3J0YW50fS5mbGV4LWxnLWNvbHVtbnstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uIWltcG9ydGFudDtmbGV4LWRpcmVjdGlvbjpjb2x1bW4haW1wb3J0YW50fS5mbGV4LWxnLXJvdy1yZXZlcnNley1tcy1mbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZSFpbXBvcnRhbnQ7ZmxleC1kaXJlY3Rpb246cm93LXJldmVyc2UhaW1wb3J0YW50fS5mbGV4LWxnLWNvbHVtbi1yZXZlcnNley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZSFpbXBvcnRhbnQ7ZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2UhaW1wb3J0YW50fS5mbGV4LWxnLXdyYXB7LW1zLWZsZXgtd3JhcDp3cmFwIWltcG9ydGFudDtmbGV4LXdyYXA6d3JhcCFpbXBvcnRhbnR9LmZsZXgtbGctbm93cmFwey1tcy1mbGV4LXdyYXA6bm93cmFwIWltcG9ydGFudDtmbGV4LXdyYXA6bm93cmFwIWltcG9ydGFudH0uZmxleC1sZy13cmFwLXJldmVyc2V7LW1zLWZsZXgtd3JhcDp3cmFwLXJldmVyc2UhaW1wb3J0YW50O2ZsZXgtd3JhcDp3cmFwLXJldmVyc2UhaW1wb3J0YW50fS5mbGV4LWxnLWZpbGx7LW1zLWZsZXg6MSAxIGF1dG8haW1wb3J0YW50O2ZsZXg6MSAxIGF1dG8haW1wb3J0YW50fS5mbGV4LWxnLWdyb3ctMHstbXMtZmxleC1wb3NpdGl2ZTowIWltcG9ydGFudDtmbGV4LWdyb3c6MCFpbXBvcnRhbnR9LmZsZXgtbGctZ3Jvdy0xey1tcy1mbGV4LXBvc2l0aXZlOjEhaW1wb3J0YW50O2ZsZXgtZ3JvdzoxIWltcG9ydGFudH0uZmxleC1sZy1zaHJpbmstMHstbXMtZmxleC1uZWdhdGl2ZTowIWltcG9ydGFudDtmbGV4LXNocmluazowIWltcG9ydGFudH0uZmxleC1sZy1zaHJpbmstMXstbXMtZmxleC1uZWdhdGl2ZToxIWltcG9ydGFudDtmbGV4LXNocmluazoxIWltcG9ydGFudH0uanVzdGlmeS1jb250ZW50LWxnLXN0YXJ0ey1tcy1mbGV4LXBhY2s6c3RhcnQhaW1wb3J0YW50O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0IWltcG9ydGFudH0uanVzdGlmeS1jb250ZW50LWxnLWVuZHstbXMtZmxleC1wYWNrOmVuZCFpbXBvcnRhbnQ7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kIWltcG9ydGFudH0uanVzdGlmeS1jb250ZW50LWxnLWNlbnRlcnstbXMtZmxleC1wYWNrOmNlbnRlciFpbXBvcnRhbnQ7anVzdGlmeS1jb250ZW50OmNlbnRlciFpbXBvcnRhbnR9Lmp1c3RpZnktY29udGVudC1sZy1iZXR3ZWVuey1tcy1mbGV4LXBhY2s6anVzdGlmeSFpbXBvcnRhbnQ7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW4haW1wb3J0YW50fS5qdXN0aWZ5LWNvbnRlbnQtbGctYXJvdW5key1tcy1mbGV4LXBhY2s6ZGlzdHJpYnV0ZSFpbXBvcnRhbnQ7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZCFpbXBvcnRhbnR9LmFsaWduLWl0ZW1zLWxnLXN0YXJ0ey1tcy1mbGV4LWFsaWduOnN0YXJ0IWltcG9ydGFudDthbGlnbi1pdGVtczpmbGV4LXN0YXJ0IWltcG9ydGFudH0uYWxpZ24taXRlbXMtbGctZW5key1tcy1mbGV4LWFsaWduOmVuZCFpbXBvcnRhbnQ7YWxpZ24taXRlbXM6ZmxleC1lbmQhaW1wb3J0YW50fS5hbGlnbi1pdGVtcy1sZy1jZW50ZXJ7LW1zLWZsZXgtYWxpZ246Y2VudGVyIWltcG9ydGFudDthbGlnbi1pdGVtczpjZW50ZXIhaW1wb3J0YW50fS5hbGlnbi1pdGVtcy1sZy1iYXNlbGluZXstbXMtZmxleC1hbGlnbjpiYXNlbGluZSFpbXBvcnRhbnQ7YWxpZ24taXRlbXM6YmFzZWxpbmUhaW1wb3J0YW50fS5hbGlnbi1pdGVtcy1sZy1zdHJldGNoey1tcy1mbGV4LWFsaWduOnN0cmV0Y2ghaW1wb3J0YW50O2FsaWduLWl0ZW1zOnN0cmV0Y2ghaW1wb3J0YW50fS5hbGlnbi1jb250ZW50LWxnLXN0YXJ0ey1tcy1mbGV4LWxpbmUtcGFjazpzdGFydCFpbXBvcnRhbnQ7YWxpZ24tY29udGVudDpmbGV4LXN0YXJ0IWltcG9ydGFudH0uYWxpZ24tY29udGVudC1sZy1lbmR7LW1zLWZsZXgtbGluZS1wYWNrOmVuZCFpbXBvcnRhbnQ7YWxpZ24tY29udGVudDpmbGV4LWVuZCFpbXBvcnRhbnR9LmFsaWduLWNvbnRlbnQtbGctY2VudGVyey1tcy1mbGV4LWxpbmUtcGFjazpjZW50ZXIhaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6Y2VudGVyIWltcG9ydGFudH0uYWxpZ24tY29udGVudC1sZy1iZXR3ZWVuey1tcy1mbGV4LWxpbmUtcGFjazpqdXN0aWZ5IWltcG9ydGFudDthbGlnbi1jb250ZW50OnNwYWNlLWJldHdlZW4haW1wb3J0YW50fS5hbGlnbi1jb250ZW50LWxnLWFyb3VuZHstbXMtZmxleC1saW5lLXBhY2s6ZGlzdHJpYnV0ZSFpbXBvcnRhbnQ7YWxpZ24tY29udGVudDpzcGFjZS1hcm91bmQhaW1wb3J0YW50fS5hbGlnbi1jb250ZW50LWxnLXN0cmV0Y2h7LW1zLWZsZXgtbGluZS1wYWNrOnN0cmV0Y2ghaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6c3RyZXRjaCFpbXBvcnRhbnR9LmFsaWduLXNlbGYtbGctYXV0b3stbXMtZmxleC1pdGVtLWFsaWduOmF1dG8haW1wb3J0YW50O2FsaWduLXNlbGY6YXV0byFpbXBvcnRhbnR9LmFsaWduLXNlbGYtbGctc3RhcnR7LW1zLWZsZXgtaXRlbS1hbGlnbjpzdGFydCFpbXBvcnRhbnQ7YWxpZ24tc2VsZjpmbGV4LXN0YXJ0IWltcG9ydGFudH0uYWxpZ24tc2VsZi1sZy1lbmR7LW1zLWZsZXgtaXRlbS1hbGlnbjplbmQhaW1wb3J0YW50O2FsaWduLXNlbGY6ZmxleC1lbmQhaW1wb3J0YW50fS5hbGlnbi1zZWxmLWxnLWNlbnRlcnstbXMtZmxleC1pdGVtLWFsaWduOmNlbnRlciFpbXBvcnRhbnQ7YWxpZ24tc2VsZjpjZW50ZXIhaW1wb3J0YW50fS5hbGlnbi1zZWxmLWxnLWJhc2VsaW5ley1tcy1mbGV4LWl0ZW0tYWxpZ246YmFzZWxpbmUhaW1wb3J0YW50O2FsaWduLXNlbGY6YmFzZWxpbmUhaW1wb3J0YW50fS5hbGlnbi1zZWxmLWxnLXN0cmV0Y2h7LW1zLWZsZXgtaXRlbS1hbGlnbjpzdHJldGNoIWltcG9ydGFudDthbGlnbi1zZWxmOnN0cmV0Y2ghaW1wb3J0YW50fX1AbWVkaWEgKG1pbi13aWR0aDoxMjAwcHgpey5mbGV4LXhsLXJvd3stbXMtZmxleC1kaXJlY3Rpb246cm93IWltcG9ydGFudDtmbGV4LWRpcmVjdGlvbjpyb3chaW1wb3J0YW50fS5mbGV4LXhsLWNvbHVtbnstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uIWltcG9ydGFudDtmbGV4LWRpcmVjdGlvbjpjb2x1bW4haW1wb3J0YW50fS5mbGV4LXhsLXJvdy1yZXZlcnNley1tcy1mbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZSFpbXBvcnRhbnQ7ZmxleC1kaXJlY3Rpb246cm93LXJldmVyc2UhaW1wb3J0YW50fS5mbGV4LXhsLWNvbHVtbi1yZXZlcnNley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZSFpbXBvcnRhbnQ7ZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2UhaW1wb3J0YW50fS5mbGV4LXhsLXdyYXB7LW1zLWZsZXgtd3JhcDp3cmFwIWltcG9ydGFudDtmbGV4LXdyYXA6d3JhcCFpbXBvcnRhbnR9LmZsZXgteGwtbm93cmFwey1tcy1mbGV4LXdyYXA6bm93cmFwIWltcG9ydGFudDtmbGV4LXdyYXA6bm93cmFwIWltcG9ydGFudH0uZmxleC14bC13cmFwLXJldmVyc2V7LW1zLWZsZXgtd3JhcDp3cmFwLXJldmVyc2UhaW1wb3J0YW50O2ZsZXgtd3JhcDp3cmFwLXJldmVyc2UhaW1wb3J0YW50fS5mbGV4LXhsLWZpbGx7LW1zLWZsZXg6MSAxIGF1dG8haW1wb3J0YW50O2ZsZXg6MSAxIGF1dG8haW1wb3J0YW50fS5mbGV4LXhsLWdyb3ctMHstbXMtZmxleC1wb3NpdGl2ZTowIWltcG9ydGFudDtmbGV4LWdyb3c6MCFpbXBvcnRhbnR9LmZsZXgteGwtZ3Jvdy0xey1tcy1mbGV4LXBvc2l0aXZlOjEhaW1wb3J0YW50O2ZsZXgtZ3JvdzoxIWltcG9ydGFudH0uZmxleC14bC1zaHJpbmstMHstbXMtZmxleC1uZWdhdGl2ZTowIWltcG9ydGFudDtmbGV4LXNocmluazowIWltcG9ydGFudH0uZmxleC14bC1zaHJpbmstMXstbXMtZmxleC1uZWdhdGl2ZToxIWltcG9ydGFudDtmbGV4LXNocmluazoxIWltcG9ydGFudH0uanVzdGlmeS1jb250ZW50LXhsLXN0YXJ0ey1tcy1mbGV4LXBhY2s6c3RhcnQhaW1wb3J0YW50O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0IWltcG9ydGFudH0uanVzdGlmeS1jb250ZW50LXhsLWVuZHstbXMtZmxleC1wYWNrOmVuZCFpbXBvcnRhbnQ7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kIWltcG9ydGFudH0uanVzdGlmeS1jb250ZW50LXhsLWNlbnRlcnstbXMtZmxleC1wYWNrOmNlbnRlciFpbXBvcnRhbnQ7anVzdGlmeS1jb250ZW50OmNlbnRlciFpbXBvcnRhbnR9Lmp1c3RpZnktY29udGVudC14bC1iZXR3ZWVuey1tcy1mbGV4LXBhY2s6anVzdGlmeSFpbXBvcnRhbnQ7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW4haW1wb3J0YW50fS5qdXN0aWZ5LWNvbnRlbnQteGwtYXJvdW5key1tcy1mbGV4LXBhY2s6ZGlzdHJpYnV0ZSFpbXBvcnRhbnQ7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZCFpbXBvcnRhbnR9LmFsaWduLWl0ZW1zLXhsLXN0YXJ0ey1tcy1mbGV4LWFsaWduOnN0YXJ0IWltcG9ydGFudDthbGlnbi1pdGVtczpmbGV4LXN0YXJ0IWltcG9ydGFudH0uYWxpZ24taXRlbXMteGwtZW5key1tcy1mbGV4LWFsaWduOmVuZCFpbXBvcnRhbnQ7YWxpZ24taXRlbXM6ZmxleC1lbmQhaW1wb3J0YW50fS5hbGlnbi1pdGVtcy14bC1jZW50ZXJ7LW1zLWZsZXgtYWxpZ246Y2VudGVyIWltcG9ydGFudDthbGlnbi1pdGVtczpjZW50ZXIhaW1wb3J0YW50fS5hbGlnbi1pdGVtcy14bC1iYXNlbGluZXstbXMtZmxleC1hbGlnbjpiYXNlbGluZSFpbXBvcnRhbnQ7YWxpZ24taXRlbXM6YmFzZWxpbmUhaW1wb3J0YW50fS5hbGlnbi1pdGVtcy14bC1zdHJldGNoey1tcy1mbGV4LWFsaWduOnN0cmV0Y2ghaW1wb3J0YW50O2FsaWduLWl0ZW1zOnN0cmV0Y2ghaW1wb3J0YW50fS5hbGlnbi1jb250ZW50LXhsLXN0YXJ0ey1tcy1mbGV4LWxpbmUtcGFjazpzdGFydCFpbXBvcnRhbnQ7YWxpZ24tY29udGVudDpmbGV4LXN0YXJ0IWltcG9ydGFudH0uYWxpZ24tY29udGVudC14bC1lbmR7LW1zLWZsZXgtbGluZS1wYWNrOmVuZCFpbXBvcnRhbnQ7YWxpZ24tY29udGVudDpmbGV4LWVuZCFpbXBvcnRhbnR9LmFsaWduLWNvbnRlbnQteGwtY2VudGVyey1tcy1mbGV4LWxpbmUtcGFjazpjZW50ZXIhaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6Y2VudGVyIWltcG9ydGFudH0uYWxpZ24tY29udGVudC14bC1iZXR3ZWVuey1tcy1mbGV4LWxpbmUtcGFjazpqdXN0aWZ5IWltcG9ydGFudDthbGlnbi1jb250ZW50OnNwYWNlLWJldHdlZW4haW1wb3J0YW50fS5hbGlnbi1jb250ZW50LXhsLWFyb3VuZHstbXMtZmxleC1saW5lLXBhY2s6ZGlzdHJpYnV0ZSFpbXBvcnRhbnQ7YWxpZ24tY29udGVudDpzcGFjZS1hcm91bmQhaW1wb3J0YW50fS5hbGlnbi1jb250ZW50LXhsLXN0cmV0Y2h7LW1zLWZsZXgtbGluZS1wYWNrOnN0cmV0Y2ghaW1wb3J0YW50O2FsaWduLWNvbnRlbnQ6c3RyZXRjaCFpbXBvcnRhbnR9LmFsaWduLXNlbGYteGwtYXV0b3stbXMtZmxleC1pdGVtLWFsaWduOmF1dG8haW1wb3J0YW50O2FsaWduLXNlbGY6YXV0byFpbXBvcnRhbnR9LmFsaWduLXNlbGYteGwtc3RhcnR7LW1zLWZsZXgtaXRlbS1hbGlnbjpzdGFydCFpbXBvcnRhbnQ7YWxpZ24tc2VsZjpmbGV4LXN0YXJ0IWltcG9ydGFudH0uYWxpZ24tc2VsZi14bC1lbmR7LW1zLWZsZXgtaXRlbS1hbGlnbjplbmQhaW1wb3J0YW50O2FsaWduLXNlbGY6ZmxleC1lbmQhaW1wb3J0YW50fS5hbGlnbi1zZWxmLXhsLWNlbnRlcnstbXMtZmxleC1pdGVtLWFsaWduOmNlbnRlciFpbXBvcnRhbnQ7YWxpZ24tc2VsZjpjZW50ZXIhaW1wb3J0YW50fS5hbGlnbi1zZWxmLXhsLWJhc2VsaW5ley1tcy1mbGV4LWl0ZW0tYWxpZ246YmFzZWxpbmUhaW1wb3J0YW50O2FsaWduLXNlbGY6YmFzZWxpbmUhaW1wb3J0YW50fS5hbGlnbi1zZWxmLXhsLXN0cmV0Y2h7LW1zLWZsZXgtaXRlbS1hbGlnbjpzdHJldGNoIWltcG9ydGFudDthbGlnbi1zZWxmOnN0cmV0Y2ghaW1wb3J0YW50fX0uZmxvYXQtbGVmdHtmbG9hdDpsZWZ0IWltcG9ydGFudH0uZmxvYXQtcmlnaHR7ZmxvYXQ6cmlnaHQhaW1wb3J0YW50fS5mbG9hdC1ub25le2Zsb2F0Om5vbmUhaW1wb3J0YW50fUBtZWRpYSAobWluLXdpZHRoOjU3NnB4KXsuZmxvYXQtc20tbGVmdHtmbG9hdDpsZWZ0IWltcG9ydGFudH0uZmxvYXQtc20tcmlnaHR7ZmxvYXQ6cmlnaHQhaW1wb3J0YW50fS5mbG9hdC1zbS1ub25le2Zsb2F0Om5vbmUhaW1wb3J0YW50fX1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7LmZsb2F0LW1kLWxlZnR7ZmxvYXQ6bGVmdCFpbXBvcnRhbnR9LmZsb2F0LW1kLXJpZ2h0e2Zsb2F0OnJpZ2h0IWltcG9ydGFudH0uZmxvYXQtbWQtbm9uZXtmbG9hdDpub25lIWltcG9ydGFudH19QG1lZGlhIChtaW4td2lkdGg6OTkycHgpey5mbG9hdC1sZy1sZWZ0e2Zsb2F0OmxlZnQhaW1wb3J0YW50fS5mbG9hdC1sZy1yaWdodHtmbG9hdDpyaWdodCFpbXBvcnRhbnR9LmZsb2F0LWxnLW5vbmV7ZmxvYXQ6bm9uZSFpbXBvcnRhbnR9fUBtZWRpYSAobWluLXdpZHRoOjEyMDBweCl7LmZsb2F0LXhsLWxlZnR7ZmxvYXQ6bGVmdCFpbXBvcnRhbnR9LmZsb2F0LXhsLXJpZ2h0e2Zsb2F0OnJpZ2h0IWltcG9ydGFudH0uZmxvYXQteGwtbm9uZXtmbG9hdDpub25lIWltcG9ydGFudH19Lm92ZXJmbG93LWF1dG97b3ZlcmZsb3c6YXV0byFpbXBvcnRhbnR9Lm92ZXJmbG93LWhpZGRlbntvdmVyZmxvdzpoaWRkZW4haW1wb3J0YW50fS5wb3NpdGlvbi1zdGF0aWN7cG9zaXRpb246c3RhdGljIWltcG9ydGFudH0ucG9zaXRpb24tcmVsYXRpdmV7cG9zaXRpb246cmVsYXRpdmUhaW1wb3J0YW50fS5wb3NpdGlvbi1hYnNvbHV0ZXtwb3NpdGlvbjphYnNvbHV0ZSFpbXBvcnRhbnR9LnBvc2l0aW9uLWZpeGVke3Bvc2l0aW9uOmZpeGVkIWltcG9ydGFudH0ucG9zaXRpb24tc3RpY2t5e3Bvc2l0aW9uOi13ZWJraXQtc3RpY2t5IWltcG9ydGFudDtwb3NpdGlvbjpzdGlja3khaW1wb3J0YW50fS5maXhlZC10b3B7cG9zaXRpb246Zml4ZWQ7dG9wOjA7cmlnaHQ6MDtsZWZ0OjA7ei1pbmRleDoxMDMwfS5maXhlZC1ib3R0b217cG9zaXRpb246Zml4ZWQ7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7ei1pbmRleDoxMDMwfUBzdXBwb3J0cyAoKHBvc2l0aW9uOi13ZWJraXQtc3RpY2t5KSBvciAocG9zaXRpb246c3RpY2t5KSl7LnN0aWNreS10b3B7cG9zaXRpb246LXdlYmtpdC1zdGlja3k7cG9zaXRpb246c3RpY2t5O3RvcDowO3otaW5kZXg6MTAyMH19LnNyLW9ubHl7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MXB4O2hlaWdodDoxcHg7cGFkZGluZzowO292ZXJmbG93OmhpZGRlbjtjbGlwOnJlY3QoMCwwLDAsMCk7d2hpdGUtc3BhY2U6bm93cmFwO2JvcmRlcjowfS5zci1vbmx5LWZvY3VzYWJsZTphY3RpdmUsLnNyLW9ubHktZm9jdXNhYmxlOmZvY3Vze3Bvc2l0aW9uOnN0YXRpYzt3aWR0aDphdXRvO2hlaWdodDphdXRvO292ZXJmbG93OnZpc2libGU7Y2xpcDphdXRvO3doaXRlLXNwYWNlOm5vcm1hbH0uc2hhZG93LXNte2JveC1zaGFkb3c6MCAuMTI1cmVtIC4yNXJlbSByZ2JhKDAsMCwwLC4wNzUpIWltcG9ydGFudH0uc2hhZG93e2JveC1zaGFkb3c6MCAuNXJlbSAxcmVtIHJnYmEoMCwwLDAsLjE1KSFpbXBvcnRhbnR9LnNoYWRvdy1sZ3tib3gtc2hhZG93OjAgMXJlbSAzcmVtIHJnYmEoMCwwLDAsLjE3NSkhaW1wb3J0YW50fS5zaGFkb3ctbm9uZXtib3gtc2hhZG93Om5vbmUhaW1wb3J0YW50fS53LTI1e3dpZHRoOjI1JSFpbXBvcnRhbnR9LnctNTB7d2lkdGg6NTAlIWltcG9ydGFudH0udy03NXt3aWR0aDo3NSUhaW1wb3J0YW50fS53LTEwMHt3aWR0aDoxMDAlIWltcG9ydGFudH0udy1hdXRve3dpZHRoOmF1dG8haW1wb3J0YW50fS5oLTI1e2hlaWdodDoyNSUhaW1wb3J0YW50fS5oLTUwe2hlaWdodDo1MCUhaW1wb3J0YW50fS5oLTc1e2hlaWdodDo3NSUhaW1wb3J0YW50fS5oLTEwMHtoZWlnaHQ6MTAwJSFpbXBvcnRhbnR9LmgtYXV0b3toZWlnaHQ6YXV0byFpbXBvcnRhbnR9Lm13LTEwMHttYXgtd2lkdGg6MTAwJSFpbXBvcnRhbnR9Lm1oLTEwMHttYXgtaGVpZ2h0OjEwMCUhaW1wb3J0YW50fS5taW4tdnctMTAwe21pbi13aWR0aDoxMDB2dyFpbXBvcnRhbnR9Lm1pbi12aC0xMDB7bWluLWhlaWdodDoxMDB2aCFpbXBvcnRhbnR9LnZ3LTEwMHt3aWR0aDoxMDB2dyFpbXBvcnRhbnR9LnZoLTEwMHtoZWlnaHQ6MTAwdmghaW1wb3J0YW50fS5zdHJldGNoZWQtbGluazo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7ei1pbmRleDoxO3BvaW50ZXItZXZlbnRzOmF1dG87Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsMCl9Lm0tMHttYXJnaW46MCFpbXBvcnRhbnR9Lm10LTAsLm15LTB7bWFyZ2luLXRvcDowIWltcG9ydGFudH0ubXItMCwubXgtMHttYXJnaW4tcmlnaHQ6MCFpbXBvcnRhbnR9Lm1iLTAsLm15LTB7bWFyZ2luLWJvdHRvbTowIWltcG9ydGFudH0ubWwtMCwubXgtMHttYXJnaW4tbGVmdDowIWltcG9ydGFudH0ubS0xe21hcmdpbjouMjVyZW0haW1wb3J0YW50fS5tdC0xLC5teS0xe21hcmdpbi10b3A6LjI1cmVtIWltcG9ydGFudH0ubXItMSwubXgtMXttYXJnaW4tcmlnaHQ6LjI1cmVtIWltcG9ydGFudH0ubWItMSwubXktMXttYXJnaW4tYm90dG9tOi4yNXJlbSFpbXBvcnRhbnR9Lm1sLTEsLm14LTF7bWFyZ2luLWxlZnQ6LjI1cmVtIWltcG9ydGFudH0ubS0ye21hcmdpbjouNXJlbSFpbXBvcnRhbnR9Lm10LTIsLm15LTJ7bWFyZ2luLXRvcDouNXJlbSFpbXBvcnRhbnR9Lm1yLTIsLm14LTJ7bWFyZ2luLXJpZ2h0Oi41cmVtIWltcG9ydGFudH0ubWItMiwubXktMnttYXJnaW4tYm90dG9tOi41cmVtIWltcG9ydGFudH0ubWwtMiwubXgtMnttYXJnaW4tbGVmdDouNXJlbSFpbXBvcnRhbnR9Lm0tM3ttYXJnaW46MXJlbSFpbXBvcnRhbnR9Lm10LTMsLm15LTN7bWFyZ2luLXRvcDoxcmVtIWltcG9ydGFudH0ubXItMywubXgtM3ttYXJnaW4tcmlnaHQ6MXJlbSFpbXBvcnRhbnR9Lm1iLTMsLm15LTN7bWFyZ2luLWJvdHRvbToxcmVtIWltcG9ydGFudH0ubWwtMywubXgtM3ttYXJnaW4tbGVmdDoxcmVtIWltcG9ydGFudH0ubS00e21hcmdpbjoxLjVyZW0haW1wb3J0YW50fS5tdC00LC5teS00e21hcmdpbi10b3A6MS41cmVtIWltcG9ydGFudH0ubXItNCwubXgtNHttYXJnaW4tcmlnaHQ6MS41cmVtIWltcG9ydGFudH0ubWItNCwubXktNHttYXJnaW4tYm90dG9tOjEuNXJlbSFpbXBvcnRhbnR9Lm1sLTQsLm14LTR7bWFyZ2luLWxlZnQ6MS41cmVtIWltcG9ydGFudH0ubS01e21hcmdpbjozcmVtIWltcG9ydGFudH0ubXQtNSwubXktNXttYXJnaW4tdG9wOjNyZW0haW1wb3J0YW50fS5tci01LC5teC01e21hcmdpbi1yaWdodDozcmVtIWltcG9ydGFudH0ubWItNSwubXktNXttYXJnaW4tYm90dG9tOjNyZW0haW1wb3J0YW50fS5tbC01LC5teC01e21hcmdpbi1sZWZ0OjNyZW0haW1wb3J0YW50fS5wLTB7cGFkZGluZzowIWltcG9ydGFudH0ucHQtMCwucHktMHtwYWRkaW5nLXRvcDowIWltcG9ydGFudH0ucHItMCwucHgtMHtwYWRkaW5nLXJpZ2h0OjAhaW1wb3J0YW50fS5wYi0wLC5weS0we3BhZGRpbmctYm90dG9tOjAhaW1wb3J0YW50fS5wbC0wLC5weC0we3BhZGRpbmctbGVmdDowIWltcG9ydGFudH0ucC0xe3BhZGRpbmc6LjI1cmVtIWltcG9ydGFudH0ucHQtMSwucHktMXtwYWRkaW5nLXRvcDouMjVyZW0haW1wb3J0YW50fS5wci0xLC5weC0xe3BhZGRpbmctcmlnaHQ6LjI1cmVtIWltcG9ydGFudH0ucGItMSwucHktMXtwYWRkaW5nLWJvdHRvbTouMjVyZW0haW1wb3J0YW50fS5wbC0xLC5weC0xe3BhZGRpbmctbGVmdDouMjVyZW0haW1wb3J0YW50fS5wLTJ7cGFkZGluZzouNXJlbSFpbXBvcnRhbnR9LnB0LTIsLnB5LTJ7cGFkZGluZy10b3A6LjVyZW0haW1wb3J0YW50fS5wci0yLC5weC0ye3BhZGRpbmctcmlnaHQ6LjVyZW0haW1wb3J0YW50fS5wYi0yLC5weS0ye3BhZGRpbmctYm90dG9tOi41cmVtIWltcG9ydGFudH0ucGwtMiwucHgtMntwYWRkaW5nLWxlZnQ6LjVyZW0haW1wb3J0YW50fS5wLTN7cGFkZGluZzoxcmVtIWltcG9ydGFudH0ucHQtMywucHktM3twYWRkaW5nLXRvcDoxcmVtIWltcG9ydGFudH0ucHItMywucHgtM3twYWRkaW5nLXJpZ2h0OjFyZW0haW1wb3J0YW50fS5wYi0zLC5weS0ze3BhZGRpbmctYm90dG9tOjFyZW0haW1wb3J0YW50fS5wbC0zLC5weC0ze3BhZGRpbmctbGVmdDoxcmVtIWltcG9ydGFudH0ucC00e3BhZGRpbmc6MS41cmVtIWltcG9ydGFudH0ucHQtNCwucHktNHtwYWRkaW5nLXRvcDoxLjVyZW0haW1wb3J0YW50fS5wci00LC5weC00e3BhZGRpbmctcmlnaHQ6MS41cmVtIWltcG9ydGFudH0ucGItNCwucHktNHtwYWRkaW5nLWJvdHRvbToxLjVyZW0haW1wb3J0YW50fS5wbC00LC5weC00e3BhZGRpbmctbGVmdDoxLjVyZW0haW1wb3J0YW50fS5wLTV7cGFkZGluZzozcmVtIWltcG9ydGFudH0ucHQtNSwucHktNXtwYWRkaW5nLXRvcDozcmVtIWltcG9ydGFudH0ucHItNSwucHgtNXtwYWRkaW5nLXJpZ2h0OjNyZW0haW1wb3J0YW50fS5wYi01LC5weS01e3BhZGRpbmctYm90dG9tOjNyZW0haW1wb3J0YW50fS5wbC01LC5weC01e3BhZGRpbmctbGVmdDozcmVtIWltcG9ydGFudH0ubS1uMXttYXJnaW46LS4yNXJlbSFpbXBvcnRhbnR9Lm10LW4xLC5teS1uMXttYXJnaW4tdG9wOi0uMjVyZW0haW1wb3J0YW50fS5tci1uMSwubXgtbjF7bWFyZ2luLXJpZ2h0Oi0uMjVyZW0haW1wb3J0YW50fS5tYi1uMSwubXktbjF7bWFyZ2luLWJvdHRvbTotLjI1cmVtIWltcG9ydGFudH0ubWwtbjEsLm14LW4xe21hcmdpbi1sZWZ0Oi0uMjVyZW0haW1wb3J0YW50fS5tLW4ye21hcmdpbjotLjVyZW0haW1wb3J0YW50fS5tdC1uMiwubXktbjJ7bWFyZ2luLXRvcDotLjVyZW0haW1wb3J0YW50fS5tci1uMiwubXgtbjJ7bWFyZ2luLXJpZ2h0Oi0uNXJlbSFpbXBvcnRhbnR9Lm1iLW4yLC5teS1uMnttYXJnaW4tYm90dG9tOi0uNXJlbSFpbXBvcnRhbnR9Lm1sLW4yLC5teC1uMnttYXJnaW4tbGVmdDotLjVyZW0haW1wb3J0YW50fS5tLW4ze21hcmdpbjotMXJlbSFpbXBvcnRhbnR9Lm10LW4zLC5teS1uM3ttYXJnaW4tdG9wOi0xcmVtIWltcG9ydGFudH0ubXItbjMsLm14LW4ze21hcmdpbi1yaWdodDotMXJlbSFpbXBvcnRhbnR9Lm1iLW4zLC5teS1uM3ttYXJnaW4tYm90dG9tOi0xcmVtIWltcG9ydGFudH0ubWwtbjMsLm14LW4ze21hcmdpbi1sZWZ0Oi0xcmVtIWltcG9ydGFudH0ubS1uNHttYXJnaW46LTEuNXJlbSFpbXBvcnRhbnR9Lm10LW40LC5teS1uNHttYXJnaW4tdG9wOi0xLjVyZW0haW1wb3J0YW50fS5tci1uNCwubXgtbjR7bWFyZ2luLXJpZ2h0Oi0xLjVyZW0haW1wb3J0YW50fS5tYi1uNCwubXktbjR7bWFyZ2luLWJvdHRvbTotMS41cmVtIWltcG9ydGFudH0ubWwtbjQsLm14LW40e21hcmdpbi1sZWZ0Oi0xLjVyZW0haW1wb3J0YW50fS5tLW41e21hcmdpbjotM3JlbSFpbXBvcnRhbnR9Lm10LW41LC5teS1uNXttYXJnaW4tdG9wOi0zcmVtIWltcG9ydGFudH0ubXItbjUsLm14LW41e21hcmdpbi1yaWdodDotM3JlbSFpbXBvcnRhbnR9Lm1iLW41LC5teS1uNXttYXJnaW4tYm90dG9tOi0zcmVtIWltcG9ydGFudH0ubWwtbjUsLm14LW41e21hcmdpbi1sZWZ0Oi0zcmVtIWltcG9ydGFudH0ubS1hdXRve21hcmdpbjphdXRvIWltcG9ydGFudH0ubXQtYXV0bywubXktYXV0b3ttYXJnaW4tdG9wOmF1dG8haW1wb3J0YW50fS5tci1hdXRvLC5teC1hdXRve21hcmdpbi1yaWdodDphdXRvIWltcG9ydGFudH0ubWItYXV0bywubXktYXV0b3ttYXJnaW4tYm90dG9tOmF1dG8haW1wb3J0YW50fS5tbC1hdXRvLC5teC1hdXRve21hcmdpbi1sZWZ0OmF1dG8haW1wb3J0YW50fUBtZWRpYSAobWluLXdpZHRoOjU3NnB4KXsubS1zbS0we21hcmdpbjowIWltcG9ydGFudH0ubXQtc20tMCwubXktc20tMHttYXJnaW4tdG9wOjAhaW1wb3J0YW50fS5tci1zbS0wLC5teC1zbS0we21hcmdpbi1yaWdodDowIWltcG9ydGFudH0ubWItc20tMCwubXktc20tMHttYXJnaW4tYm90dG9tOjAhaW1wb3J0YW50fS5tbC1zbS0wLC5teC1zbS0we21hcmdpbi1sZWZ0OjAhaW1wb3J0YW50fS5tLXNtLTF7bWFyZ2luOi4yNXJlbSFpbXBvcnRhbnR9Lm10LXNtLTEsLm15LXNtLTF7bWFyZ2luLXRvcDouMjVyZW0haW1wb3J0YW50fS5tci1zbS0xLC5teC1zbS0xe21hcmdpbi1yaWdodDouMjVyZW0haW1wb3J0YW50fS5tYi1zbS0xLC5teS1zbS0xe21hcmdpbi1ib3R0b206LjI1cmVtIWltcG9ydGFudH0ubWwtc20tMSwubXgtc20tMXttYXJnaW4tbGVmdDouMjVyZW0haW1wb3J0YW50fS5tLXNtLTJ7bWFyZ2luOi41cmVtIWltcG9ydGFudH0ubXQtc20tMiwubXktc20tMnttYXJnaW4tdG9wOi41cmVtIWltcG9ydGFudH0ubXItc20tMiwubXgtc20tMnttYXJnaW4tcmlnaHQ6LjVyZW0haW1wb3J0YW50fS5tYi1zbS0yLC5teS1zbS0ye21hcmdpbi1ib3R0b206LjVyZW0haW1wb3J0YW50fS5tbC1zbS0yLC5teC1zbS0ye21hcmdpbi1sZWZ0Oi41cmVtIWltcG9ydGFudH0ubS1zbS0ze21hcmdpbjoxcmVtIWltcG9ydGFudH0ubXQtc20tMywubXktc20tM3ttYXJnaW4tdG9wOjFyZW0haW1wb3J0YW50fS5tci1zbS0zLC5teC1zbS0ze21hcmdpbi1yaWdodDoxcmVtIWltcG9ydGFudH0ubWItc20tMywubXktc20tM3ttYXJnaW4tYm90dG9tOjFyZW0haW1wb3J0YW50fS5tbC1zbS0zLC5teC1zbS0ze21hcmdpbi1sZWZ0OjFyZW0haW1wb3J0YW50fS5tLXNtLTR7bWFyZ2luOjEuNXJlbSFpbXBvcnRhbnR9Lm10LXNtLTQsLm15LXNtLTR7bWFyZ2luLXRvcDoxLjVyZW0haW1wb3J0YW50fS5tci1zbS00LC5teC1zbS00e21hcmdpbi1yaWdodDoxLjVyZW0haW1wb3J0YW50fS5tYi1zbS00LC5teS1zbS00e21hcmdpbi1ib3R0b206MS41cmVtIWltcG9ydGFudH0ubWwtc20tNCwubXgtc20tNHttYXJnaW4tbGVmdDoxLjVyZW0haW1wb3J0YW50fS5tLXNtLTV7bWFyZ2luOjNyZW0haW1wb3J0YW50fS5tdC1zbS01LC5teS1zbS01e21hcmdpbi10b3A6M3JlbSFpbXBvcnRhbnR9Lm1yLXNtLTUsLm14LXNtLTV7bWFyZ2luLXJpZ2h0OjNyZW0haW1wb3J0YW50fS5tYi1zbS01LC5teS1zbS01e21hcmdpbi1ib3R0b206M3JlbSFpbXBvcnRhbnR9Lm1sLXNtLTUsLm14LXNtLTV7bWFyZ2luLWxlZnQ6M3JlbSFpbXBvcnRhbnR9LnAtc20tMHtwYWRkaW5nOjAhaW1wb3J0YW50fS5wdC1zbS0wLC5weS1zbS0we3BhZGRpbmctdG9wOjAhaW1wb3J0YW50fS5wci1zbS0wLC5weC1zbS0we3BhZGRpbmctcmlnaHQ6MCFpbXBvcnRhbnR9LnBiLXNtLTAsLnB5LXNtLTB7cGFkZGluZy1ib3R0b206MCFpbXBvcnRhbnR9LnBsLXNtLTAsLnB4LXNtLTB7cGFkZGluZy1sZWZ0OjAhaW1wb3J0YW50fS5wLXNtLTF7cGFkZGluZzouMjVyZW0haW1wb3J0YW50fS5wdC1zbS0xLC5weS1zbS0xe3BhZGRpbmctdG9wOi4yNXJlbSFpbXBvcnRhbnR9LnByLXNtLTEsLnB4LXNtLTF7cGFkZGluZy1yaWdodDouMjVyZW0haW1wb3J0YW50fS5wYi1zbS0xLC5weS1zbS0xe3BhZGRpbmctYm90dG9tOi4yNXJlbSFpbXBvcnRhbnR9LnBsLXNtLTEsLnB4LXNtLTF7cGFkZGluZy1sZWZ0Oi4yNXJlbSFpbXBvcnRhbnR9LnAtc20tMntwYWRkaW5nOi41cmVtIWltcG9ydGFudH0ucHQtc20tMiwucHktc20tMntwYWRkaW5nLXRvcDouNXJlbSFpbXBvcnRhbnR9LnByLXNtLTIsLnB4LXNtLTJ7cGFkZGluZy1yaWdodDouNXJlbSFpbXBvcnRhbnR9LnBiLXNtLTIsLnB5LXNtLTJ7cGFkZGluZy1ib3R0b206LjVyZW0haW1wb3J0YW50fS5wbC1zbS0yLC5weC1zbS0ye3BhZGRpbmctbGVmdDouNXJlbSFpbXBvcnRhbnR9LnAtc20tM3twYWRkaW5nOjFyZW0haW1wb3J0YW50fS5wdC1zbS0zLC5weS1zbS0ze3BhZGRpbmctdG9wOjFyZW0haW1wb3J0YW50fS5wci1zbS0zLC5weC1zbS0ze3BhZGRpbmctcmlnaHQ6MXJlbSFpbXBvcnRhbnR9LnBiLXNtLTMsLnB5LXNtLTN7cGFkZGluZy1ib3R0b206MXJlbSFpbXBvcnRhbnR9LnBsLXNtLTMsLnB4LXNtLTN7cGFkZGluZy1sZWZ0OjFyZW0haW1wb3J0YW50fS5wLXNtLTR7cGFkZGluZzoxLjVyZW0haW1wb3J0YW50fS5wdC1zbS00LC5weS1zbS00e3BhZGRpbmctdG9wOjEuNXJlbSFpbXBvcnRhbnR9LnByLXNtLTQsLnB4LXNtLTR7cGFkZGluZy1yaWdodDoxLjVyZW0haW1wb3J0YW50fS5wYi1zbS00LC5weS1zbS00e3BhZGRpbmctYm90dG9tOjEuNXJlbSFpbXBvcnRhbnR9LnBsLXNtLTQsLnB4LXNtLTR7cGFkZGluZy1sZWZ0OjEuNXJlbSFpbXBvcnRhbnR9LnAtc20tNXtwYWRkaW5nOjNyZW0haW1wb3J0YW50fS5wdC1zbS01LC5weS1zbS01e3BhZGRpbmctdG9wOjNyZW0haW1wb3J0YW50fS5wci1zbS01LC5weC1zbS01e3BhZGRpbmctcmlnaHQ6M3JlbSFpbXBvcnRhbnR9LnBiLXNtLTUsLnB5LXNtLTV7cGFkZGluZy1ib3R0b206M3JlbSFpbXBvcnRhbnR9LnBsLXNtLTUsLnB4LXNtLTV7cGFkZGluZy1sZWZ0OjNyZW0haW1wb3J0YW50fS5tLXNtLW4xe21hcmdpbjotLjI1cmVtIWltcG9ydGFudH0ubXQtc20tbjEsLm15LXNtLW4xe21hcmdpbi10b3A6LS4yNXJlbSFpbXBvcnRhbnR9Lm1yLXNtLW4xLC5teC1zbS1uMXttYXJnaW4tcmlnaHQ6LS4yNXJlbSFpbXBvcnRhbnR9Lm1iLXNtLW4xLC5teS1zbS1uMXttYXJnaW4tYm90dG9tOi0uMjVyZW0haW1wb3J0YW50fS5tbC1zbS1uMSwubXgtc20tbjF7bWFyZ2luLWxlZnQ6LS4yNXJlbSFpbXBvcnRhbnR9Lm0tc20tbjJ7bWFyZ2luOi0uNXJlbSFpbXBvcnRhbnR9Lm10LXNtLW4yLC5teS1zbS1uMnttYXJnaW4tdG9wOi0uNXJlbSFpbXBvcnRhbnR9Lm1yLXNtLW4yLC5teC1zbS1uMnttYXJnaW4tcmlnaHQ6LS41cmVtIWltcG9ydGFudH0ubWItc20tbjIsLm15LXNtLW4ye21hcmdpbi1ib3R0b206LS41cmVtIWltcG9ydGFudH0ubWwtc20tbjIsLm14LXNtLW4ye21hcmdpbi1sZWZ0Oi0uNXJlbSFpbXBvcnRhbnR9Lm0tc20tbjN7bWFyZ2luOi0xcmVtIWltcG9ydGFudH0ubXQtc20tbjMsLm15LXNtLW4ze21hcmdpbi10b3A6LTFyZW0haW1wb3J0YW50fS5tci1zbS1uMywubXgtc20tbjN7bWFyZ2luLXJpZ2h0Oi0xcmVtIWltcG9ydGFudH0ubWItc20tbjMsLm15LXNtLW4ze21hcmdpbi1ib3R0b206LTFyZW0haW1wb3J0YW50fS5tbC1zbS1uMywubXgtc20tbjN7bWFyZ2luLWxlZnQ6LTFyZW0haW1wb3J0YW50fS5tLXNtLW40e21hcmdpbjotMS41cmVtIWltcG9ydGFudH0ubXQtc20tbjQsLm15LXNtLW40e21hcmdpbi10b3A6LTEuNXJlbSFpbXBvcnRhbnR9Lm1yLXNtLW40LC5teC1zbS1uNHttYXJnaW4tcmlnaHQ6LTEuNXJlbSFpbXBvcnRhbnR9Lm1iLXNtLW40LC5teS1zbS1uNHttYXJnaW4tYm90dG9tOi0xLjVyZW0haW1wb3J0YW50fS5tbC1zbS1uNCwubXgtc20tbjR7bWFyZ2luLWxlZnQ6LTEuNXJlbSFpbXBvcnRhbnR9Lm0tc20tbjV7bWFyZ2luOi0zcmVtIWltcG9ydGFudH0ubXQtc20tbjUsLm15LXNtLW41e21hcmdpbi10b3A6LTNyZW0haW1wb3J0YW50fS5tci1zbS1uNSwubXgtc20tbjV7bWFyZ2luLXJpZ2h0Oi0zcmVtIWltcG9ydGFudH0ubWItc20tbjUsLm15LXNtLW41e21hcmdpbi1ib3R0b206LTNyZW0haW1wb3J0YW50fS5tbC1zbS1uNSwubXgtc20tbjV7bWFyZ2luLWxlZnQ6LTNyZW0haW1wb3J0YW50fS5tLXNtLWF1dG97bWFyZ2luOmF1dG8haW1wb3J0YW50fS5tdC1zbS1hdXRvLC5teS1zbS1hdXRve21hcmdpbi10b3A6YXV0byFpbXBvcnRhbnR9Lm1yLXNtLWF1dG8sLm14LXNtLWF1dG97bWFyZ2luLXJpZ2h0OmF1dG8haW1wb3J0YW50fS5tYi1zbS1hdXRvLC5teS1zbS1hdXRve21hcmdpbi1ib3R0b206YXV0byFpbXBvcnRhbnR9Lm1sLXNtLWF1dG8sLm14LXNtLWF1dG97bWFyZ2luLWxlZnQ6YXV0byFpbXBvcnRhbnR9fUBtZWRpYSAobWluLXdpZHRoOjc2OHB4KXsubS1tZC0we21hcmdpbjowIWltcG9ydGFudH0ubXQtbWQtMCwubXktbWQtMHttYXJnaW4tdG9wOjAhaW1wb3J0YW50fS5tci1tZC0wLC5teC1tZC0we21hcmdpbi1yaWdodDowIWltcG9ydGFudH0ubWItbWQtMCwubXktbWQtMHttYXJnaW4tYm90dG9tOjAhaW1wb3J0YW50fS5tbC1tZC0wLC5teC1tZC0we21hcmdpbi1sZWZ0OjAhaW1wb3J0YW50fS5tLW1kLTF7bWFyZ2luOi4yNXJlbSFpbXBvcnRhbnR9Lm10LW1kLTEsLm15LW1kLTF7bWFyZ2luLXRvcDouMjVyZW0haW1wb3J0YW50fS5tci1tZC0xLC5teC1tZC0xe21hcmdpbi1yaWdodDouMjVyZW0haW1wb3J0YW50fS5tYi1tZC0xLC5teS1tZC0xe21hcmdpbi1ib3R0b206LjI1cmVtIWltcG9ydGFudH0ubWwtbWQtMSwubXgtbWQtMXttYXJnaW4tbGVmdDouMjVyZW0haW1wb3J0YW50fS5tLW1kLTJ7bWFyZ2luOi41cmVtIWltcG9ydGFudH0ubXQtbWQtMiwubXktbWQtMnttYXJnaW4tdG9wOi41cmVtIWltcG9ydGFudH0ubXItbWQtMiwubXgtbWQtMnttYXJnaW4tcmlnaHQ6LjVyZW0haW1wb3J0YW50fS5tYi1tZC0yLC5teS1tZC0ye21hcmdpbi1ib3R0b206LjVyZW0haW1wb3J0YW50fS5tbC1tZC0yLC5teC1tZC0ye21hcmdpbi1sZWZ0Oi41cmVtIWltcG9ydGFudH0ubS1tZC0ze21hcmdpbjoxcmVtIWltcG9ydGFudH0ubXQtbWQtMywubXktbWQtM3ttYXJnaW4tdG9wOjFyZW0haW1wb3J0YW50fS5tci1tZC0zLC5teC1tZC0ze21hcmdpbi1yaWdodDoxcmVtIWltcG9ydGFudH0ubWItbWQtMywubXktbWQtM3ttYXJnaW4tYm90dG9tOjFyZW0haW1wb3J0YW50fS5tbC1tZC0zLC5teC1tZC0ze21hcmdpbi1sZWZ0OjFyZW0haW1wb3J0YW50fS5tLW1kLTR7bWFyZ2luOjEuNXJlbSFpbXBvcnRhbnR9Lm10LW1kLTQsLm15LW1kLTR7bWFyZ2luLXRvcDoxLjVyZW0haW1wb3J0YW50fS5tci1tZC00LC5teC1tZC00e21hcmdpbi1yaWdodDoxLjVyZW0haW1wb3J0YW50fS5tYi1tZC00LC5teS1tZC00e21hcmdpbi1ib3R0b206MS41cmVtIWltcG9ydGFudH0ubWwtbWQtNCwubXgtbWQtNHttYXJnaW4tbGVmdDoxLjVyZW0haW1wb3J0YW50fS5tLW1kLTV7bWFyZ2luOjNyZW0haW1wb3J0YW50fS5tdC1tZC01LC5teS1tZC01e21hcmdpbi10b3A6M3JlbSFpbXBvcnRhbnR9Lm1yLW1kLTUsLm14LW1kLTV7bWFyZ2luLXJpZ2h0OjNyZW0haW1wb3J0YW50fS5tYi1tZC01LC5teS1tZC01e21hcmdpbi1ib3R0b206M3JlbSFpbXBvcnRhbnR9Lm1sLW1kLTUsLm14LW1kLTV7bWFyZ2luLWxlZnQ6M3JlbSFpbXBvcnRhbnR9LnAtbWQtMHtwYWRkaW5nOjAhaW1wb3J0YW50fS5wdC1tZC0wLC5weS1tZC0we3BhZGRpbmctdG9wOjAhaW1wb3J0YW50fS5wci1tZC0wLC5weC1tZC0we3BhZGRpbmctcmlnaHQ6MCFpbXBvcnRhbnR9LnBiLW1kLTAsLnB5LW1kLTB7cGFkZGluZy1ib3R0b206MCFpbXBvcnRhbnR9LnBsLW1kLTAsLnB4LW1kLTB7cGFkZGluZy1sZWZ0OjAhaW1wb3J0YW50fS5wLW1kLTF7cGFkZGluZzouMjVyZW0haW1wb3J0YW50fS5wdC1tZC0xLC5weS1tZC0xe3BhZGRpbmctdG9wOi4yNXJlbSFpbXBvcnRhbnR9LnByLW1kLTEsLnB4LW1kLTF7cGFkZGluZy1yaWdodDouMjVyZW0haW1wb3J0YW50fS5wYi1tZC0xLC5weS1tZC0xe3BhZGRpbmctYm90dG9tOi4yNXJlbSFpbXBvcnRhbnR9LnBsLW1kLTEsLnB4LW1kLTF7cGFkZGluZy1sZWZ0Oi4yNXJlbSFpbXBvcnRhbnR9LnAtbWQtMntwYWRkaW5nOi41cmVtIWltcG9ydGFudH0ucHQtbWQtMiwucHktbWQtMntwYWRkaW5nLXRvcDouNXJlbSFpbXBvcnRhbnR9LnByLW1kLTIsLnB4LW1kLTJ7cGFkZGluZy1yaWdodDouNXJlbSFpbXBvcnRhbnR9LnBiLW1kLTIsLnB5LW1kLTJ7cGFkZGluZy1ib3R0b206LjVyZW0haW1wb3J0YW50fS5wbC1tZC0yLC5weC1tZC0ye3BhZGRpbmctbGVmdDouNXJlbSFpbXBvcnRhbnR9LnAtbWQtM3twYWRkaW5nOjFyZW0haW1wb3J0YW50fS5wdC1tZC0zLC5weS1tZC0ze3BhZGRpbmctdG9wOjFyZW0haW1wb3J0YW50fS5wci1tZC0zLC5weC1tZC0ze3BhZGRpbmctcmlnaHQ6MXJlbSFpbXBvcnRhbnR9LnBiLW1kLTMsLnB5LW1kLTN7cGFkZGluZy1ib3R0b206MXJlbSFpbXBvcnRhbnR9LnBsLW1kLTMsLnB4LW1kLTN7cGFkZGluZy1sZWZ0OjFyZW0haW1wb3J0YW50fS5wLW1kLTR7cGFkZGluZzoxLjVyZW0haW1wb3J0YW50fS5wdC1tZC00LC5weS1tZC00e3BhZGRpbmctdG9wOjEuNXJlbSFpbXBvcnRhbnR9LnByLW1kLTQsLnB4LW1kLTR7cGFkZGluZy1yaWdodDoxLjVyZW0haW1wb3J0YW50fS5wYi1tZC00LC5weS1tZC00e3BhZGRpbmctYm90dG9tOjEuNXJlbSFpbXBvcnRhbnR9LnBsLW1kLTQsLnB4LW1kLTR7cGFkZGluZy1sZWZ0OjEuNXJlbSFpbXBvcnRhbnR9LnAtbWQtNXtwYWRkaW5nOjNyZW0haW1wb3J0YW50fS5wdC1tZC01LC5weS1tZC01e3BhZGRpbmctdG9wOjNyZW0haW1wb3J0YW50fS5wci1tZC01LC5weC1tZC01e3BhZGRpbmctcmlnaHQ6M3JlbSFpbXBvcnRhbnR9LnBiLW1kLTUsLnB5LW1kLTV7cGFkZGluZy1ib3R0b206M3JlbSFpbXBvcnRhbnR9LnBsLW1kLTUsLnB4LW1kLTV7cGFkZGluZy1sZWZ0OjNyZW0haW1wb3J0YW50fS5tLW1kLW4xe21hcmdpbjotLjI1cmVtIWltcG9ydGFudH0ubXQtbWQtbjEsLm15LW1kLW4xe21hcmdpbi10b3A6LS4yNXJlbSFpbXBvcnRhbnR9Lm1yLW1kLW4xLC5teC1tZC1uMXttYXJnaW4tcmlnaHQ6LS4yNXJlbSFpbXBvcnRhbnR9Lm1iLW1kLW4xLC5teS1tZC1uMXttYXJnaW4tYm90dG9tOi0uMjVyZW0haW1wb3J0YW50fS5tbC1tZC1uMSwubXgtbWQtbjF7bWFyZ2luLWxlZnQ6LS4yNXJlbSFpbXBvcnRhbnR9Lm0tbWQtbjJ7bWFyZ2luOi0uNXJlbSFpbXBvcnRhbnR9Lm10LW1kLW4yLC5teS1tZC1uMnttYXJnaW4tdG9wOi0uNXJlbSFpbXBvcnRhbnR9Lm1yLW1kLW4yLC5teC1tZC1uMnttYXJnaW4tcmlnaHQ6LS41cmVtIWltcG9ydGFudH0ubWItbWQtbjIsLm15LW1kLW4ye21hcmdpbi1ib3R0b206LS41cmVtIWltcG9ydGFudH0ubWwtbWQtbjIsLm14LW1kLW4ye21hcmdpbi1sZWZ0Oi0uNXJlbSFpbXBvcnRhbnR9Lm0tbWQtbjN7bWFyZ2luOi0xcmVtIWltcG9ydGFudH0ubXQtbWQtbjMsLm15LW1kLW4ze21hcmdpbi10b3A6LTFyZW0haW1wb3J0YW50fS5tci1tZC1uMywubXgtbWQtbjN7bWFyZ2luLXJpZ2h0Oi0xcmVtIWltcG9ydGFudH0ubWItbWQtbjMsLm15LW1kLW4ze21hcmdpbi1ib3R0b206LTFyZW0haW1wb3J0YW50fS5tbC1tZC1uMywubXgtbWQtbjN7bWFyZ2luLWxlZnQ6LTFyZW0haW1wb3J0YW50fS5tLW1kLW40e21hcmdpbjotMS41cmVtIWltcG9ydGFudH0ubXQtbWQtbjQsLm15LW1kLW40e21hcmdpbi10b3A6LTEuNXJlbSFpbXBvcnRhbnR9Lm1yLW1kLW40LC5teC1tZC1uNHttYXJnaW4tcmlnaHQ6LTEuNXJlbSFpbXBvcnRhbnR9Lm1iLW1kLW40LC5teS1tZC1uNHttYXJnaW4tYm90dG9tOi0xLjVyZW0haW1wb3J0YW50fS5tbC1tZC1uNCwubXgtbWQtbjR7bWFyZ2luLWxlZnQ6LTEuNXJlbSFpbXBvcnRhbnR9Lm0tbWQtbjV7bWFyZ2luOi0zcmVtIWltcG9ydGFudH0ubXQtbWQtbjUsLm15LW1kLW41e21hcmdpbi10b3A6LTNyZW0haW1wb3J0YW50fS5tci1tZC1uNSwubXgtbWQtbjV7bWFyZ2luLXJpZ2h0Oi0zcmVtIWltcG9ydGFudH0ubWItbWQtbjUsLm15LW1kLW41e21hcmdpbi1ib3R0b206LTNyZW0haW1wb3J0YW50fS5tbC1tZC1uNSwubXgtbWQtbjV7bWFyZ2luLWxlZnQ6LTNyZW0haW1wb3J0YW50fS5tLW1kLWF1dG97bWFyZ2luOmF1dG8haW1wb3J0YW50fS5tdC1tZC1hdXRvLC5teS1tZC1hdXRve21hcmdpbi10b3A6YXV0byFpbXBvcnRhbnR9Lm1yLW1kLWF1dG8sLm14LW1kLWF1dG97bWFyZ2luLXJpZ2h0OmF1dG8haW1wb3J0YW50fS5tYi1tZC1hdXRvLC5teS1tZC1hdXRve21hcmdpbi1ib3R0b206YXV0byFpbXBvcnRhbnR9Lm1sLW1kLWF1dG8sLm14LW1kLWF1dG97bWFyZ2luLWxlZnQ6YXV0byFpbXBvcnRhbnR9fUBtZWRpYSAobWluLXdpZHRoOjk5MnB4KXsubS1sZy0we21hcmdpbjowIWltcG9ydGFudH0ubXQtbGctMCwubXktbGctMHttYXJnaW4tdG9wOjAhaW1wb3J0YW50fS5tci1sZy0wLC5teC1sZy0we21hcmdpbi1yaWdodDowIWltcG9ydGFudH0ubWItbGctMCwubXktbGctMHttYXJnaW4tYm90dG9tOjAhaW1wb3J0YW50fS5tbC1sZy0wLC5teC1sZy0we21hcmdpbi1sZWZ0OjAhaW1wb3J0YW50fS5tLWxnLTF7bWFyZ2luOi4yNXJlbSFpbXBvcnRhbnR9Lm10LWxnLTEsLm15LWxnLTF7bWFyZ2luLXRvcDouMjVyZW0haW1wb3J0YW50fS5tci1sZy0xLC5teC1sZy0xe21hcmdpbi1yaWdodDouMjVyZW0haW1wb3J0YW50fS5tYi1sZy0xLC5teS1sZy0xe21hcmdpbi1ib3R0b206LjI1cmVtIWltcG9ydGFudH0ubWwtbGctMSwubXgtbGctMXttYXJnaW4tbGVmdDouMjVyZW0haW1wb3J0YW50fS5tLWxnLTJ7bWFyZ2luOi41cmVtIWltcG9ydGFudH0ubXQtbGctMiwubXktbGctMnttYXJnaW4tdG9wOi41cmVtIWltcG9ydGFudH0ubXItbGctMiwubXgtbGctMnttYXJnaW4tcmlnaHQ6LjVyZW0haW1wb3J0YW50fS5tYi1sZy0yLC5teS1sZy0ye21hcmdpbi1ib3R0b206LjVyZW0haW1wb3J0YW50fS5tbC1sZy0yLC5teC1sZy0ye21hcmdpbi1sZWZ0Oi41cmVtIWltcG9ydGFudH0ubS1sZy0ze21hcmdpbjoxcmVtIWltcG9ydGFudH0ubXQtbGctMywubXktbGctM3ttYXJnaW4tdG9wOjFyZW0haW1wb3J0YW50fS5tci1sZy0zLC5teC1sZy0ze21hcmdpbi1yaWdodDoxcmVtIWltcG9ydGFudH0ubWItbGctMywubXktbGctM3ttYXJnaW4tYm90dG9tOjFyZW0haW1wb3J0YW50fS5tbC1sZy0zLC5teC1sZy0ze21hcmdpbi1sZWZ0OjFyZW0haW1wb3J0YW50fS5tLWxnLTR7bWFyZ2luOjEuNXJlbSFpbXBvcnRhbnR9Lm10LWxnLTQsLm15LWxnLTR7bWFyZ2luLXRvcDoxLjVyZW0haW1wb3J0YW50fS5tci1sZy00LC5teC1sZy00e21hcmdpbi1yaWdodDoxLjVyZW0haW1wb3J0YW50fS5tYi1sZy00LC5teS1sZy00e21hcmdpbi1ib3R0b206MS41cmVtIWltcG9ydGFudH0ubWwtbGctNCwubXgtbGctNHttYXJnaW4tbGVmdDoxLjVyZW0haW1wb3J0YW50fS5tLWxnLTV7bWFyZ2luOjNyZW0haW1wb3J0YW50fS5tdC1sZy01LC5teS1sZy01e21hcmdpbi10b3A6M3JlbSFpbXBvcnRhbnR9Lm1yLWxnLTUsLm14LWxnLTV7bWFyZ2luLXJpZ2h0OjNyZW0haW1wb3J0YW50fS5tYi1sZy01LC5teS1sZy01e21hcmdpbi1ib3R0b206M3JlbSFpbXBvcnRhbnR9Lm1sLWxnLTUsLm14LWxnLTV7bWFyZ2luLWxlZnQ6M3JlbSFpbXBvcnRhbnR9LnAtbGctMHtwYWRkaW5nOjAhaW1wb3J0YW50fS5wdC1sZy0wLC5weS1sZy0we3BhZGRpbmctdG9wOjAhaW1wb3J0YW50fS5wci1sZy0wLC5weC1sZy0we3BhZGRpbmctcmlnaHQ6MCFpbXBvcnRhbnR9LnBiLWxnLTAsLnB5LWxnLTB7cGFkZGluZy1ib3R0b206MCFpbXBvcnRhbnR9LnBsLWxnLTAsLnB4LWxnLTB7cGFkZGluZy1sZWZ0OjAhaW1wb3J0YW50fS5wLWxnLTF7cGFkZGluZzouMjVyZW0haW1wb3J0YW50fS5wdC1sZy0xLC5weS1sZy0xe3BhZGRpbmctdG9wOi4yNXJlbSFpbXBvcnRhbnR9LnByLWxnLTEsLnB4LWxnLTF7cGFkZGluZy1yaWdodDouMjVyZW0haW1wb3J0YW50fS5wYi1sZy0xLC5weS1sZy0xe3BhZGRpbmctYm90dG9tOi4yNXJlbSFpbXBvcnRhbnR9LnBsLWxnLTEsLnB4LWxnLTF7cGFkZGluZy1sZWZ0Oi4yNXJlbSFpbXBvcnRhbnR9LnAtbGctMntwYWRkaW5nOi41cmVtIWltcG9ydGFudH0ucHQtbGctMiwucHktbGctMntwYWRkaW5nLXRvcDouNXJlbSFpbXBvcnRhbnR9LnByLWxnLTIsLnB4LWxnLTJ7cGFkZGluZy1yaWdodDouNXJlbSFpbXBvcnRhbnR9LnBiLWxnLTIsLnB5LWxnLTJ7cGFkZGluZy1ib3R0b206LjVyZW0haW1wb3J0YW50fS5wbC1sZy0yLC5weC1sZy0ye3BhZGRpbmctbGVmdDouNXJlbSFpbXBvcnRhbnR9LnAtbGctM3twYWRkaW5nOjFyZW0haW1wb3J0YW50fS5wdC1sZy0zLC5weS1sZy0ze3BhZGRpbmctdG9wOjFyZW0haW1wb3J0YW50fS5wci1sZy0zLC5weC1sZy0ze3BhZGRpbmctcmlnaHQ6MXJlbSFpbXBvcnRhbnR9LnBiLWxnLTMsLnB5LWxnLTN7cGFkZGluZy1ib3R0b206MXJlbSFpbXBvcnRhbnR9LnBsLWxnLTMsLnB4LWxnLTN7cGFkZGluZy1sZWZ0OjFyZW0haW1wb3J0YW50fS5wLWxnLTR7cGFkZGluZzoxLjVyZW0haW1wb3J0YW50fS5wdC1sZy00LC5weS1sZy00e3BhZGRpbmctdG9wOjEuNXJlbSFpbXBvcnRhbnR9LnByLWxnLTQsLnB4LWxnLTR7cGFkZGluZy1yaWdodDoxLjVyZW0haW1wb3J0YW50fS5wYi1sZy00LC5weS1sZy00e3BhZGRpbmctYm90dG9tOjEuNXJlbSFpbXBvcnRhbnR9LnBsLWxnLTQsLnB4LWxnLTR7cGFkZGluZy1sZWZ0OjEuNXJlbSFpbXBvcnRhbnR9LnAtbGctNXtwYWRkaW5nOjNyZW0haW1wb3J0YW50fS5wdC1sZy01LC5weS1sZy01e3BhZGRpbmctdG9wOjNyZW0haW1wb3J0YW50fS5wci1sZy01LC5weC1sZy01e3BhZGRpbmctcmlnaHQ6M3JlbSFpbXBvcnRhbnR9LnBiLWxnLTUsLnB5LWxnLTV7cGFkZGluZy1ib3R0b206M3JlbSFpbXBvcnRhbnR9LnBsLWxnLTUsLnB4LWxnLTV7cGFkZGluZy1sZWZ0OjNyZW0haW1wb3J0YW50fS5tLWxnLW4xe21hcmdpbjotLjI1cmVtIWltcG9ydGFudH0ubXQtbGctbjEsLm15LWxnLW4xe21hcmdpbi10b3A6LS4yNXJlbSFpbXBvcnRhbnR9Lm1yLWxnLW4xLC5teC1sZy1uMXttYXJnaW4tcmlnaHQ6LS4yNXJlbSFpbXBvcnRhbnR9Lm1iLWxnLW4xLC5teS1sZy1uMXttYXJnaW4tYm90dG9tOi0uMjVyZW0haW1wb3J0YW50fS5tbC1sZy1uMSwubXgtbGctbjF7bWFyZ2luLWxlZnQ6LS4yNXJlbSFpbXBvcnRhbnR9Lm0tbGctbjJ7bWFyZ2luOi0uNXJlbSFpbXBvcnRhbnR9Lm10LWxnLW4yLC5teS1sZy1uMnttYXJnaW4tdG9wOi0uNXJlbSFpbXBvcnRhbnR9Lm1yLWxnLW4yLC5teC1sZy1uMnttYXJnaW4tcmlnaHQ6LS41cmVtIWltcG9ydGFudH0ubWItbGctbjIsLm15LWxnLW4ye21hcmdpbi1ib3R0b206LS41cmVtIWltcG9ydGFudH0ubWwtbGctbjIsLm14LWxnLW4ye21hcmdpbi1sZWZ0Oi0uNXJlbSFpbXBvcnRhbnR9Lm0tbGctbjN7bWFyZ2luOi0xcmVtIWltcG9ydGFudH0ubXQtbGctbjMsLm15LWxnLW4ze21hcmdpbi10b3A6LTFyZW0haW1wb3J0YW50fS5tci1sZy1uMywubXgtbGctbjN7bWFyZ2luLXJpZ2h0Oi0xcmVtIWltcG9ydGFudH0ubWItbGctbjMsLm15LWxnLW4ze21hcmdpbi1ib3R0b206LTFyZW0haW1wb3J0YW50fS5tbC1sZy1uMywubXgtbGctbjN7bWFyZ2luLWxlZnQ6LTFyZW0haW1wb3J0YW50fS5tLWxnLW40e21hcmdpbjotMS41cmVtIWltcG9ydGFudH0ubXQtbGctbjQsLm15LWxnLW40e21hcmdpbi10b3A6LTEuNXJlbSFpbXBvcnRhbnR9Lm1yLWxnLW40LC5teC1sZy1uNHttYXJnaW4tcmlnaHQ6LTEuNXJlbSFpbXBvcnRhbnR9Lm1iLWxnLW40LC5teS1sZy1uNHttYXJnaW4tYm90dG9tOi0xLjVyZW0haW1wb3J0YW50fS5tbC1sZy1uNCwubXgtbGctbjR7bWFyZ2luLWxlZnQ6LTEuNXJlbSFpbXBvcnRhbnR9Lm0tbGctbjV7bWFyZ2luOi0zcmVtIWltcG9ydGFudH0ubXQtbGctbjUsLm15LWxnLW41e21hcmdpbi10b3A6LTNyZW0haW1wb3J0YW50fS5tci1sZy1uNSwubXgtbGctbjV7bWFyZ2luLXJpZ2h0Oi0zcmVtIWltcG9ydGFudH0ubWItbGctbjUsLm15LWxnLW41e21hcmdpbi1ib3R0b206LTNyZW0haW1wb3J0YW50fS5tbC1sZy1uNSwubXgtbGctbjV7bWFyZ2luLWxlZnQ6LTNyZW0haW1wb3J0YW50fS5tLWxnLWF1dG97bWFyZ2luOmF1dG8haW1wb3J0YW50fS5tdC1sZy1hdXRvLC5teS1sZy1hdXRve21hcmdpbi10b3A6YXV0byFpbXBvcnRhbnR9Lm1yLWxnLWF1dG8sLm14LWxnLWF1dG97bWFyZ2luLXJpZ2h0OmF1dG8haW1wb3J0YW50fS5tYi1sZy1hdXRvLC5teS1sZy1hdXRve21hcmdpbi1ib3R0b206YXV0byFpbXBvcnRhbnR9Lm1sLWxnLWF1dG8sLm14LWxnLWF1dG97bWFyZ2luLWxlZnQ6YXV0byFpbXBvcnRhbnR9fUBtZWRpYSAobWluLXdpZHRoOjEyMDBweCl7Lm0teGwtMHttYXJnaW46MCFpbXBvcnRhbnR9Lm10LXhsLTAsLm15LXhsLTB7bWFyZ2luLXRvcDowIWltcG9ydGFudH0ubXIteGwtMCwubXgteGwtMHttYXJnaW4tcmlnaHQ6MCFpbXBvcnRhbnR9Lm1iLXhsLTAsLm15LXhsLTB7bWFyZ2luLWJvdHRvbTowIWltcG9ydGFudH0ubWwteGwtMCwubXgteGwtMHttYXJnaW4tbGVmdDowIWltcG9ydGFudH0ubS14bC0xe21hcmdpbjouMjVyZW0haW1wb3J0YW50fS5tdC14bC0xLC5teS14bC0xe21hcmdpbi10b3A6LjI1cmVtIWltcG9ydGFudH0ubXIteGwtMSwubXgteGwtMXttYXJnaW4tcmlnaHQ6LjI1cmVtIWltcG9ydGFudH0ubWIteGwtMSwubXkteGwtMXttYXJnaW4tYm90dG9tOi4yNXJlbSFpbXBvcnRhbnR9Lm1sLXhsLTEsLm14LXhsLTF7bWFyZ2luLWxlZnQ6LjI1cmVtIWltcG9ydGFudH0ubS14bC0ye21hcmdpbjouNXJlbSFpbXBvcnRhbnR9Lm10LXhsLTIsLm15LXhsLTJ7bWFyZ2luLXRvcDouNXJlbSFpbXBvcnRhbnR9Lm1yLXhsLTIsLm14LXhsLTJ7bWFyZ2luLXJpZ2h0Oi41cmVtIWltcG9ydGFudH0ubWIteGwtMiwubXkteGwtMnttYXJnaW4tYm90dG9tOi41cmVtIWltcG9ydGFudH0ubWwteGwtMiwubXgteGwtMnttYXJnaW4tbGVmdDouNXJlbSFpbXBvcnRhbnR9Lm0teGwtM3ttYXJnaW46MXJlbSFpbXBvcnRhbnR9Lm10LXhsLTMsLm15LXhsLTN7bWFyZ2luLXRvcDoxcmVtIWltcG9ydGFudH0ubXIteGwtMywubXgteGwtM3ttYXJnaW4tcmlnaHQ6MXJlbSFpbXBvcnRhbnR9Lm1iLXhsLTMsLm15LXhsLTN7bWFyZ2luLWJvdHRvbToxcmVtIWltcG9ydGFudH0ubWwteGwtMywubXgteGwtM3ttYXJnaW4tbGVmdDoxcmVtIWltcG9ydGFudH0ubS14bC00e21hcmdpbjoxLjVyZW0haW1wb3J0YW50fS5tdC14bC00LC5teS14bC00e21hcmdpbi10b3A6MS41cmVtIWltcG9ydGFudH0ubXIteGwtNCwubXgteGwtNHttYXJnaW4tcmlnaHQ6MS41cmVtIWltcG9ydGFudH0ubWIteGwtNCwubXkteGwtNHttYXJnaW4tYm90dG9tOjEuNXJlbSFpbXBvcnRhbnR9Lm1sLXhsLTQsLm14LXhsLTR7bWFyZ2luLWxlZnQ6MS41cmVtIWltcG9ydGFudH0ubS14bC01e21hcmdpbjozcmVtIWltcG9ydGFudH0ubXQteGwtNSwubXkteGwtNXttYXJnaW4tdG9wOjNyZW0haW1wb3J0YW50fS5tci14bC01LC5teC14bC01e21hcmdpbi1yaWdodDozcmVtIWltcG9ydGFudH0ubWIteGwtNSwubXkteGwtNXttYXJnaW4tYm90dG9tOjNyZW0haW1wb3J0YW50fS5tbC14bC01LC5teC14bC01e21hcmdpbi1sZWZ0OjNyZW0haW1wb3J0YW50fS5wLXhsLTB7cGFkZGluZzowIWltcG9ydGFudH0ucHQteGwtMCwucHkteGwtMHtwYWRkaW5nLXRvcDowIWltcG9ydGFudH0ucHIteGwtMCwucHgteGwtMHtwYWRkaW5nLXJpZ2h0OjAhaW1wb3J0YW50fS5wYi14bC0wLC5weS14bC0we3BhZGRpbmctYm90dG9tOjAhaW1wb3J0YW50fS5wbC14bC0wLC5weC14bC0we3BhZGRpbmctbGVmdDowIWltcG9ydGFudH0ucC14bC0xe3BhZGRpbmc6LjI1cmVtIWltcG9ydGFudH0ucHQteGwtMSwucHkteGwtMXtwYWRkaW5nLXRvcDouMjVyZW0haW1wb3J0YW50fS5wci14bC0xLC5weC14bC0xe3BhZGRpbmctcmlnaHQ6LjI1cmVtIWltcG9ydGFudH0ucGIteGwtMSwucHkteGwtMXtwYWRkaW5nLWJvdHRvbTouMjVyZW0haW1wb3J0YW50fS5wbC14bC0xLC5weC14bC0xe3BhZGRpbmctbGVmdDouMjVyZW0haW1wb3J0YW50fS5wLXhsLTJ7cGFkZGluZzouNXJlbSFpbXBvcnRhbnR9LnB0LXhsLTIsLnB5LXhsLTJ7cGFkZGluZy10b3A6LjVyZW0haW1wb3J0YW50fS5wci14bC0yLC5weC14bC0ye3BhZGRpbmctcmlnaHQ6LjVyZW0haW1wb3J0YW50fS5wYi14bC0yLC5weS14bC0ye3BhZGRpbmctYm90dG9tOi41cmVtIWltcG9ydGFudH0ucGwteGwtMiwucHgteGwtMntwYWRkaW5nLWxlZnQ6LjVyZW0haW1wb3J0YW50fS5wLXhsLTN7cGFkZGluZzoxcmVtIWltcG9ydGFudH0ucHQteGwtMywucHkteGwtM3twYWRkaW5nLXRvcDoxcmVtIWltcG9ydGFudH0ucHIteGwtMywucHgteGwtM3twYWRkaW5nLXJpZ2h0OjFyZW0haW1wb3J0YW50fS5wYi14bC0zLC5weS14bC0ze3BhZGRpbmctYm90dG9tOjFyZW0haW1wb3J0YW50fS5wbC14bC0zLC5weC14bC0ze3BhZGRpbmctbGVmdDoxcmVtIWltcG9ydGFudH0ucC14bC00e3BhZGRpbmc6MS41cmVtIWltcG9ydGFudH0ucHQteGwtNCwucHkteGwtNHtwYWRkaW5nLXRvcDoxLjVyZW0haW1wb3J0YW50fS5wci14bC00LC5weC14bC00e3BhZGRpbmctcmlnaHQ6MS41cmVtIWltcG9ydGFudH0ucGIteGwtNCwucHkteGwtNHtwYWRkaW5nLWJvdHRvbToxLjVyZW0haW1wb3J0YW50fS5wbC14bC00LC5weC14bC00e3BhZGRpbmctbGVmdDoxLjVyZW0haW1wb3J0YW50fS5wLXhsLTV7cGFkZGluZzozcmVtIWltcG9ydGFudH0ucHQteGwtNSwucHkteGwtNXtwYWRkaW5nLXRvcDozcmVtIWltcG9ydGFudH0ucHIteGwtNSwucHgteGwtNXtwYWRkaW5nLXJpZ2h0OjNyZW0haW1wb3J0YW50fS5wYi14bC01LC5weS14bC01e3BhZGRpbmctYm90dG9tOjNyZW0haW1wb3J0YW50fS5wbC14bC01LC5weC14bC01e3BhZGRpbmctbGVmdDozcmVtIWltcG9ydGFudH0ubS14bC1uMXttYXJnaW46LS4yNXJlbSFpbXBvcnRhbnR9Lm10LXhsLW4xLC5teS14bC1uMXttYXJnaW4tdG9wOi0uMjVyZW0haW1wb3J0YW50fS5tci14bC1uMSwubXgteGwtbjF7bWFyZ2luLXJpZ2h0Oi0uMjVyZW0haW1wb3J0YW50fS5tYi14bC1uMSwubXkteGwtbjF7bWFyZ2luLWJvdHRvbTotLjI1cmVtIWltcG9ydGFudH0ubWwteGwtbjEsLm14LXhsLW4xe21hcmdpbi1sZWZ0Oi0uMjVyZW0haW1wb3J0YW50fS5tLXhsLW4ye21hcmdpbjotLjVyZW0haW1wb3J0YW50fS5tdC14bC1uMiwubXkteGwtbjJ7bWFyZ2luLXRvcDotLjVyZW0haW1wb3J0YW50fS5tci14bC1uMiwubXgteGwtbjJ7bWFyZ2luLXJpZ2h0Oi0uNXJlbSFpbXBvcnRhbnR9Lm1iLXhsLW4yLC5teS14bC1uMnttYXJnaW4tYm90dG9tOi0uNXJlbSFpbXBvcnRhbnR9Lm1sLXhsLW4yLC5teC14bC1uMnttYXJnaW4tbGVmdDotLjVyZW0haW1wb3J0YW50fS5tLXhsLW4ze21hcmdpbjotMXJlbSFpbXBvcnRhbnR9Lm10LXhsLW4zLC5teS14bC1uM3ttYXJnaW4tdG9wOi0xcmVtIWltcG9ydGFudH0ubXIteGwtbjMsLm14LXhsLW4ze21hcmdpbi1yaWdodDotMXJlbSFpbXBvcnRhbnR9Lm1iLXhsLW4zLC5teS14bC1uM3ttYXJnaW4tYm90dG9tOi0xcmVtIWltcG9ydGFudH0ubWwteGwtbjMsLm14LXhsLW4ze21hcmdpbi1sZWZ0Oi0xcmVtIWltcG9ydGFudH0ubS14bC1uNHttYXJnaW46LTEuNXJlbSFpbXBvcnRhbnR9Lm10LXhsLW40LC5teS14bC1uNHttYXJnaW4tdG9wOi0xLjVyZW0haW1wb3J0YW50fS5tci14bC1uNCwubXgteGwtbjR7bWFyZ2luLXJpZ2h0Oi0xLjVyZW0haW1wb3J0YW50fS5tYi14bC1uNCwubXkteGwtbjR7bWFyZ2luLWJvdHRvbTotMS41cmVtIWltcG9ydGFudH0ubWwteGwtbjQsLm14LXhsLW40e21hcmdpbi1sZWZ0Oi0xLjVyZW0haW1wb3J0YW50fS5tLXhsLW41e21hcmdpbjotM3JlbSFpbXBvcnRhbnR9Lm10LXhsLW41LC5teS14bC1uNXttYXJnaW4tdG9wOi0zcmVtIWltcG9ydGFudH0ubXIteGwtbjUsLm14LXhsLW41e21hcmdpbi1yaWdodDotM3JlbSFpbXBvcnRhbnR9Lm1iLXhsLW41LC5teS14bC1uNXttYXJnaW4tYm90dG9tOi0zcmVtIWltcG9ydGFudH0ubWwteGwtbjUsLm14LXhsLW41e21hcmdpbi1sZWZ0Oi0zcmVtIWltcG9ydGFudH0ubS14bC1hdXRve21hcmdpbjphdXRvIWltcG9ydGFudH0ubXQteGwtYXV0bywubXkteGwtYXV0b3ttYXJnaW4tdG9wOmF1dG8haW1wb3J0YW50fS5tci14bC1hdXRvLC5teC14bC1hdXRve21hcmdpbi1yaWdodDphdXRvIWltcG9ydGFudH0ubWIteGwtYXV0bywubXkteGwtYXV0b3ttYXJnaW4tYm90dG9tOmF1dG8haW1wb3J0YW50fS5tbC14bC1hdXRvLC5teC14bC1hdXRve21hcmdpbi1sZWZ0OmF1dG8haW1wb3J0YW50fX0udGV4dC1tb25vc3BhY2V7Zm9udC1mYW1pbHk6U0ZNb25vLVJlZ3VsYXIsTWVubG8sTW9uYWNvLENvbnNvbGFzLFxcXCJMaWJlcmF0aW9uIE1vbm9cXFwiLFxcXCJDb3VyaWVyIE5ld1xcXCIsbW9ub3NwYWNlIWltcG9ydGFudH0udGV4dC1qdXN0aWZ5e3RleHQtYWxpZ246anVzdGlmeSFpbXBvcnRhbnR9LnRleHQtd3JhcHt3aGl0ZS1zcGFjZTpub3JtYWwhaW1wb3J0YW50fS50ZXh0LW5vd3JhcHt3aGl0ZS1zcGFjZTpub3dyYXAhaW1wb3J0YW50fS50ZXh0LXRydW5jYXRle292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcH0udGV4dC1sZWZ0e3RleHQtYWxpZ246bGVmdCFpbXBvcnRhbnR9LnRleHQtcmlnaHR7dGV4dC1hbGlnbjpyaWdodCFpbXBvcnRhbnR9LnRleHQtY2VudGVye3RleHQtYWxpZ246Y2VudGVyIWltcG9ydGFudH1AbWVkaWEgKG1pbi13aWR0aDo1NzZweCl7LnRleHQtc20tbGVmdHt0ZXh0LWFsaWduOmxlZnQhaW1wb3J0YW50fS50ZXh0LXNtLXJpZ2h0e3RleHQtYWxpZ246cmlnaHQhaW1wb3J0YW50fS50ZXh0LXNtLWNlbnRlcnt0ZXh0LWFsaWduOmNlbnRlciFpbXBvcnRhbnR9fUBtZWRpYSAobWluLXdpZHRoOjc2OHB4KXsudGV4dC1tZC1sZWZ0e3RleHQtYWxpZ246bGVmdCFpbXBvcnRhbnR9LnRleHQtbWQtcmlnaHR7dGV4dC1hbGlnbjpyaWdodCFpbXBvcnRhbnR9LnRleHQtbWQtY2VudGVye3RleHQtYWxpZ246Y2VudGVyIWltcG9ydGFudH19QG1lZGlhIChtaW4td2lkdGg6OTkycHgpey50ZXh0LWxnLWxlZnR7dGV4dC1hbGlnbjpsZWZ0IWltcG9ydGFudH0udGV4dC1sZy1yaWdodHt0ZXh0LWFsaWduOnJpZ2h0IWltcG9ydGFudH0udGV4dC1sZy1jZW50ZXJ7dGV4dC1hbGlnbjpjZW50ZXIhaW1wb3J0YW50fX1AbWVkaWEgKG1pbi13aWR0aDoxMjAwcHgpey50ZXh0LXhsLWxlZnR7dGV4dC1hbGlnbjpsZWZ0IWltcG9ydGFudH0udGV4dC14bC1yaWdodHt0ZXh0LWFsaWduOnJpZ2h0IWltcG9ydGFudH0udGV4dC14bC1jZW50ZXJ7dGV4dC1hbGlnbjpjZW50ZXIhaW1wb3J0YW50fX0udGV4dC1sb3dlcmNhc2V7dGV4dC10cmFuc2Zvcm06bG93ZXJjYXNlIWltcG9ydGFudH0udGV4dC11cHBlcmNhc2V7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlIWltcG9ydGFudH0udGV4dC1jYXBpdGFsaXple3RleHQtdHJhbnNmb3JtOmNhcGl0YWxpemUhaW1wb3J0YW50fS5mb250LXdlaWdodC1saWdodHtmb250LXdlaWdodDozMDAhaW1wb3J0YW50fS5mb250LXdlaWdodC1saWdodGVye2ZvbnQtd2VpZ2h0OmxpZ2h0ZXIhaW1wb3J0YW50fS5mb250LXdlaWdodC1ub3JtYWx7Zm9udC13ZWlnaHQ6NDAwIWltcG9ydGFudH0uZm9udC13ZWlnaHQtYm9sZHtmb250LXdlaWdodDo3MDAhaW1wb3J0YW50fS5mb250LXdlaWdodC1ib2xkZXJ7Zm9udC13ZWlnaHQ6Ym9sZGVyIWltcG9ydGFudH0uZm9udC1pdGFsaWN7Zm9udC1zdHlsZTppdGFsaWMhaW1wb3J0YW50fS50ZXh0LXdoaXRle2NvbG9yOiNmZmYhaW1wb3J0YW50fS50ZXh0LXByaW1hcnl7Y29sb3I6IzAwN2JmZiFpbXBvcnRhbnR9YS50ZXh0LXByaW1hcnk6Zm9jdXMsYS50ZXh0LXByaW1hcnk6aG92ZXJ7Y29sb3I6IzAwNTZiMyFpbXBvcnRhbnR9LnRleHQtc2Vjb25kYXJ5e2NvbG9yOiM2Yzc1N2QhaW1wb3J0YW50fWEudGV4dC1zZWNvbmRhcnk6Zm9jdXMsYS50ZXh0LXNlY29uZGFyeTpob3Zlcntjb2xvcjojNDk0ZjU0IWltcG9ydGFudH0udGV4dC1zdWNjZXNze2NvbG9yOiMyOGE3NDUhaW1wb3J0YW50fWEudGV4dC1zdWNjZXNzOmZvY3VzLGEudGV4dC1zdWNjZXNzOmhvdmVye2NvbG9yOiMxOTY5MmMhaW1wb3J0YW50fS50ZXh0LWluZm97Y29sb3I6IzE3YTJiOCFpbXBvcnRhbnR9YS50ZXh0LWluZm86Zm9jdXMsYS50ZXh0LWluZm86aG92ZXJ7Y29sb3I6IzBmNjY3NCFpbXBvcnRhbnR9LnRleHQtd2FybmluZ3tjb2xvcjojZmZjMTA3IWltcG9ydGFudH1hLnRleHQtd2FybmluZzpmb2N1cyxhLnRleHQtd2FybmluZzpob3Zlcntjb2xvcjojYmE4YjAwIWltcG9ydGFudH0udGV4dC1kYW5nZXJ7Y29sb3I6I2RjMzU0NSFpbXBvcnRhbnR9YS50ZXh0LWRhbmdlcjpmb2N1cyxhLnRleHQtZGFuZ2VyOmhvdmVye2NvbG9yOiNhNzFkMmEhaW1wb3J0YW50fS50ZXh0LWxpZ2h0e2NvbG9yOiNmOGY5ZmEhaW1wb3J0YW50fWEudGV4dC1saWdodDpmb2N1cyxhLnRleHQtbGlnaHQ6aG92ZXJ7Y29sb3I6I2NiZDNkYSFpbXBvcnRhbnR9LnRleHQtZGFya3tjb2xvcjojMzQzYTQwIWltcG9ydGFudH1hLnRleHQtZGFyazpmb2N1cyxhLnRleHQtZGFyazpob3Zlcntjb2xvcjojMTIxNDE2IWltcG9ydGFudH0udGV4dC1ib2R5e2NvbG9yOiMyMTI1MjkhaW1wb3J0YW50fS50ZXh0LW11dGVke2NvbG9yOiM2Yzc1N2QhaW1wb3J0YW50fS50ZXh0LWJsYWNrLTUwe2NvbG9yOnJnYmEoMCwwLDAsLjUpIWltcG9ydGFudH0udGV4dC13aGl0ZS01MHtjb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LC41KSFpbXBvcnRhbnR9LnRleHQtaGlkZXtmb250OjAvMCBhO2NvbG9yOnRyYW5zcGFyZW50O3RleHQtc2hhZG93Om5vbmU7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXI6MH0udGV4dC1kZWNvcmF0aW9uLW5vbmV7dGV4dC1kZWNvcmF0aW9uOm5vbmUhaW1wb3J0YW50fS50ZXh0LWJyZWFre3dvcmQtYnJlYWs6YnJlYWstd29yZCFpbXBvcnRhbnQ7b3ZlcmZsb3ctd3JhcDpicmVhay13b3JkIWltcG9ydGFudH0udGV4dC1yZXNldHtjb2xvcjppbmhlcml0IWltcG9ydGFudH0udmlzaWJsZXt2aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50fS5pbnZpc2libGV7dmlzaWJpbGl0eTpoaWRkZW4haW1wb3J0YW50fUBtZWRpYSBwcmludHsqLDo6YWZ0ZXIsOjpiZWZvcmV7dGV4dC1zaGFkb3c6bm9uZSFpbXBvcnRhbnQ7Ym94LXNoYWRvdzpub25lIWltcG9ydGFudH1hOm5vdCguYnRuKXt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfWFiYnJbdGl0bGVdOjphZnRlcntjb250ZW50OlxcXCIgKFxcXCIgYXR0cih0aXRsZSkgXFxcIilcXFwifXByZXt3aGl0ZS1zcGFjZTpwcmUtd3JhcCFpbXBvcnRhbnR9YmxvY2txdW90ZSxwcmV7Ym9yZGVyOjFweCBzb2xpZCAjYWRiNWJkO3BhZ2UtYnJlYWstaW5zaWRlOmF2b2lkfXRoZWFke2Rpc3BsYXk6dGFibGUtaGVhZGVyLWdyb3VwfWltZyx0cntwYWdlLWJyZWFrLWluc2lkZTphdm9pZH1oMixoMyxwe29ycGhhbnM6Mzt3aWRvd3M6M31oMixoM3twYWdlLWJyZWFrLWFmdGVyOmF2b2lkfUBwYWdle3NpemU6YTN9Ym9keXttaW4td2lkdGg6OTkycHghaW1wb3J0YW50fS5jb250YWluZXJ7bWluLXdpZHRoOjk5MnB4IWltcG9ydGFudH0ubmF2YmFye2Rpc3BsYXk6bm9uZX0uYmFkZ2V7Ym9yZGVyOjFweCBzb2xpZCAjMDAwfS50YWJsZXtib3JkZXItY29sbGFwc2U6Y29sbGFwc2UhaW1wb3J0YW50fS50YWJsZSB0ZCwudGFibGUgdGh7YmFja2dyb3VuZC1jb2xvcjojZmZmIWltcG9ydGFudH0udGFibGUtYm9yZGVyZWQgdGQsLnRhYmxlLWJvcmRlcmVkIHRoe2JvcmRlcjoxcHggc29saWQgI2RlZTJlNiFpbXBvcnRhbnR9LnRhYmxlLWRhcmt7Y29sb3I6aW5oZXJpdH0udGFibGUtZGFyayB0Ym9keSt0Ym9keSwudGFibGUtZGFyayB0ZCwudGFibGUtZGFyayB0aCwudGFibGUtZGFyayB0aGVhZCB0aHtib3JkZXItY29sb3I6I2RlZTJlNn0udGFibGUgLnRoZWFkLWRhcmsgdGh7Y29sb3I6aW5oZXJpdDtib3JkZXItY29sb3I6I2RlZTJlNn19XCIsIFwiXCJdKTtcblxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsIGJvZHkge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5ib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBmb250LWZhbWlseTogXFxcIkNvdXJpZXIgTmV3XFxcIjtcXG4gIC8qIGZvbnQtc2l6ZTogNDA7ICovXFxuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7IC8qIGlPUyBTYWZhcmkgKi9cXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIFNhZmFyaSAqL1xcbiAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lOyAvKiBLb25xdWVyb3IgSFRNTCAqL1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTsgLyogRmlyZWZveCAqL1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAvKiBJbnRlcm5ldCBFeHBsb3Jlci9FZGdlICovXFxuICB1c2VyLXNlbGVjdDogbm9uZTsgLyogTm9uLXByZWZpeGVkIHZlcnNpb24sIGN1cnJlbnRseVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBwb3J0ZWQgYnkgQ2hyb21lIGFuZCBPcGVyYSAqL1xcbn1cXG4jYXBwIHtcXG4gIGhlaWdodDogMTAwdmg7XFxuICB3aWR0aDogMTAwdnc7XFxuICAvKiBwb3NpdGlvbjogYWJzb2x1dGU7ICovXFxuICB6LWluZGV4OiAwO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjUnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuY29uc3QgUmVzdWx0ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVzdWx0IH0gPSBwcm9wc1xuICByZXR1cm4gKFxuICAgIDxsaSBjbGFzc05hbWU9e2Ake3Jlc3VsdC5zdWNjZXNzID8gJ3RleHQtc3VjY2VzcycgOiAndGV4dC1kYW5nZXInfWB9PlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPSd0ZXh0LWxpZ2h0Jz5cbiAgICAgICAgPHNwYW4+e3Jlc3VsdC5jcmVhdGVkX2F0fSDigJMgPC9zcGFuPlxuICAgICAgICA8YiBjbGFzc05hbWU9J3RleHQtc3VjY2VzcyBtbC0xJz57cmVzdWx0LnRydWVfYmFsbHN9IDwvYj5cbiAgICAgICAgPGIgY2xhc3NOYW1lPSd0ZXh0LWRhbmdlciBtci0xJz57cmVzdWx0LmZhbHNlX2JhbGxzfSA8L2I+XG4gICAgICAgIDxzcGFuPkxldmVsOiB7cmVzdWx0LmxldmVsfSwgPC9zcGFuPlxuICAgICAgICA8c3Bhbj5CYWxsczoge3Jlc3VsdC5iYWxsc30sIDwvc3Bhbj5cbiAgICAgICAgPHNwYW4+U3BlZWQ6IHtyZXN1bHQuc3BlZWR9LCA8L3NwYW4+XG4gICAgICAgIDxzcGFuPlJlZCBCYWxsczoge3Jlc3VsdC5yZWRfYmFsbHN9PC9zcGFuPlxuICAgICAgPC9zcGFuPlxuICAgIDwvbGk+XG4gIClcbn1cblxuUmVzdWx0LnByb3BUeXBlcyA9IHtcbiAgcmVzdWx0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZXN1bHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCYWxsKHAsIGksIGNvbG9yLCBzcGVlZCkge1xuICB0aGlzLmlkID0gaVxuICB0aGlzLnJhZCA9IHAucHJvcHMucmFkaXVzXG4gIHRoaXMueCA9IHAucmFuZG9tKDMqdGhpcy5yYWQsIHAud2lkdGgtMyp0aGlzLnJhZClcbiAgdGhpcy55ID0gcC5yYW5kb20oMyp0aGlzLnJhZCwgcC5oZWlnaHQtMyp0aGlzLnJhZClcbiAgdGhpcy54c3BlZWQgPSBwLnJhbmRvbSgwLCAxKVxuICB0aGlzLnlzcGVlZCA9IDEgLSB0aGlzLnhzcGVlZFxuICB0aGlzLnhkaXJlY3Rpb24gPSBwLnJhbmRvbSgwLCAxKSA+IDAuNSA/IC0xIDogMVxuICB0aGlzLnlkaXJlY3Rpb24gPSBwLnJhbmRvbSgwLCAxKSA+IDAuNSA/IC0xIDogMVxuICB0aGlzLmNvbG9yID0gY29sb3JcbiAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlXG5cbiAgdGhpcy5tb3ZlID0gKCkgPT4ge1xuICAgIHRoaXMueCArPSB0aGlzLnhzcGVlZCAqIHRoaXMueGRpcmVjdGlvbiAqIHNwZWVkXG4gICAgdGhpcy55ICs9IHRoaXMueXNwZWVkICogdGhpcy55ZGlyZWN0aW9uICogc3BlZWRcbiAgICBpZiAodGhpcy54ID4gcC53aWR0aCAtIHRoaXMucmFkIHx8IHRoaXMueCA8IHRoaXMucmFkKSB7IHRoaXMueGRpcmVjdGlvbiAqPSAtMSB9XG4gICAgaWYgKHRoaXMueSA+IHAuaGVpZ2h0IC0gdGhpcy5yYWQgfHwgdGhpcy55IDwgdGhpcy5yYWQpIHsgdGhpcy55ZGlyZWN0aW9uICo9IC0xIH1cbiAgfVxuXG4gIHRoaXMuaG92ZXIgPSAoKSA9PiB7XG4gICAgdGhpcy5kID0gcC5kaXN0KHAubW91c2VYLCBwLm1vdXNlWSwgdGhpcy54LCB0aGlzLnkpXG4gICAgaWYgKHRoaXMuZCA8IHRoaXMucmFkKSB7IHAuY3Vyc29yKHAuSEFORCkgfVxuICB9XG5cbiAgdGhpcy5jbGlja2VkID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmQgPCB0aGlzLnJhZCkgeyB0aGlzLnNlbGVjdGVkID0gIXRoaXMuc2VsZWN0ZWQgfVxuICAgIHRoaXMuY29sb3IgPSB0aGlzLnNlbGVjdGVkID8gcC5zZWxlY3RlZENvbG9yIDogcC5kZWZhdWx0Q29sb3JcbiAgICBsZXQgdGltZXJJZCA9IHNldEludGVydmFsKCgpID0+IHsgdGhpcy5yYWQgKz0gdGhpcy5zZWxlY3RlZCA/IDAuMSA6IC0wLjEgfSlcbiAgICBzZXRUaW1lb3V0KCgpID0+IHsgY2xlYXJJbnRlcnZhbCh0aW1lcklkKSB9LCAxMDApXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWQpIHtcbiAgICAgIHAuc2VsZWN0ZWRCYWxscy5wdXNoKHRoaXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBpbmRleCA9IHAuc2VsZWN0ZWRCYWxscy5pbmRleE9mKHRoaXMpXG4gICAgICBpZiAoaW5kZXggPiAtMSkgeyBwLnNlbGVjdGVkQmFsbHMuc3BsaWNlKGluZGV4LCAxKSB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5kaXNwbGF5ID0gKCkgPT4ge1xuICAgIHAucHVzaCgpXG4gICAgcC5maWxsKHRoaXMuY29sb3IpXG4gICAgcC5zdHJva2VXZWlnaHQoMilcbiAgICBwLmVsbGlwc2UodGhpcy54LCB0aGlzLnksIHRoaXMucmFkLCB0aGlzLnJhZClcbiAgICBwLnBvcCgpXG4gIH1cbn1cbiIsImltcG9ydCBCYWxsIGZyb20gJy4vQmFsbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNrZXRjaChwKSB7XG4gIHAucHJvcHMgPSB7fTtcbiAgcC5mcHMgPSAwO1xuICBwLnNlbGVjdGVkQmFsbHMgPSBbXTtcbiAgcC5tb3ZlQmFsbHMgPSB0cnVlO1xuICBwLnN0YXJ0VGltZSA9IDE7XG4gIHAuZ2FtZVRpbWUgPSAzO1xuICBwLmRlbW9TcGVlZCA9IDE7XG4gIHAuZGVmYXVsdENvbG9yID0gcC5jb2xvcignYmx1ZScpO1xuICBwLnRhcmdldENvbG9yID0gcC5jb2xvcigncmVkJyk7XG4gIHAuc2VsZWN0ZWRDb2xvciA9IHAuY29sb3IoMCwgMjU1LCAwKTtcblxuICBwLnNldHVwID0gZnVuY3Rpb24gKCkge1xuICAgIHAuY3JlYXRlQ2FudmFzKHAud3JhcHBlci5vZmZzZXRXaWR0aCwgcC53cmFwcGVyLm9mZnNldEhlaWdodCk7XG4gICAgcC5mcmFtZVJhdGUoNjApO1xuICAgIHAuZWxsaXBzZU1vZGUocC5SQURJVVMpO1xuICAgIHAudGV4dEZvbnQoJ0NvdXJpZXIgTmV3Jyk7XG4gICAgcC50ZXh0U3R5bGUocC5CT0xEKTtcbiAgICBwLnRleHRTaXplKDE1KTtcbiAgICBwLm9uU2V0QXBwU3RhdGUoeyBzdGFydE5ld0dhbWUgfSk7XG4gICAgY3JlYXRlQmFsbHMocC5kZW1vU3BlZWQpO1xuICB9O1xuXG4gIHAuZHJhdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLmJhY2tncm91bmQoMjMwKTtcbiAgICBwLmN1cnNvcihwLkFSUk9XKTtcbiAgICBpZiAocC5zZWxlY3RlZEJhbGxzLmxlbmd0aCAhPT0gcC5wcm9wcy50YXJnZXRCYWxsc0NvdW50KSB7XG4gICAgICBwLmJhbGxzLmZvckVhY2goKGJhbGwpID0+IHtcbiAgICAgICAgYmFsbC5kaXNwbGF5KCk7XG4gICAgICAgIGlmIChwLm1vdmVCYWxscykgeyBiYWxsLm1vdmUoKTsgfVxuICAgICAgICBpZiAocC5zdGFydEdhbWUpIHsgYmFsbC5ob3ZlcigpOyB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdGFyZ2V0QmFsbHMgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgYmFsbCBvZiBwLnJldmVyc2VkQmFsbHMuc2xpY2UoMCwgcC5wcm9wcy50YXJnZXRCYWxsc0NvdW50KSkge1xuICAgICAgICB0YXJnZXRCYWxsc1tiYWxsLmlkXSA9IHsgeDogKGJhbGwueCkudG9GaXhlZCgzKSwgeTogKGJhbGwueSkudG9GaXhlZCgzKSB9O1xuICAgICAgfVxuICAgICAgcC5vblNldEFwcFN0YXRlKHtcbiAgICAgICAgdGFyZ2V0QmFsbHMsXG4gICAgICAgIHNlbGVjdGVkQmFsbHM6IHAuc2VsZWN0ZWRCYWxscyxcbiAgICAgIH0sIHAucHJvcHMuZ2VuZXJhdGVSZXN1bHQpO1xuICAgICAgcC5iYWxscyA9IFtdO1xuICAgICAgcC5yZXZlcnNlZEJhbGxzID0gW107XG4gICAgICBwLnNlbGVjdGVkQmFsbHMgPSBbXTtcbiAgICB9XG4gICAgcC50ZXh0KGBMZXZlbDogJHtwLnByb3BzLmxldmVsfWAsIDMwLCAzMCk7XG4gICAgcC50ZXh0KGBUcmlhbHM6ICR7cC5wcm9wcy5wbGF5ZWRHYW1lc30vJHtwLnByb3BzLmNvdW50T2ZHYW1lc31gLCAzMCwgNTApO1xuICAgIGlmIChwLmZyYW1lQ291bnQlMjAgPT09IDApIHsgcC5mcHMgPSBwLmZyYW1lUmF0ZSgpOyB9XG4gICAgcC50ZXh0KGBGUFM6ICR7cC5mcHMudG9GaXhlZCgxKX1gLCAzMCwgNzApO1xuICB9O1xuXG4gIHAubW91c2VQcmVzc2VkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwLnN0YXJ0R2FtZSkge1xuICAgICAgcC5yZXZlcnNlZEJhbGxzID0gWy4uLnAuYmFsbHNdLnJldmVyc2UoKTtcbiAgICAgIGZvciAoY29uc3QgYmFsbCBvZiBwLnJldmVyc2VkQmFsbHMpIHtcbiAgICAgICAgaWYgKGJhbGwuZCA8IGJhbGwucmFkKSB7XG4gICAgICAgICAgYmFsbC5jbGlja2VkKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcC53aW5kb3dSZXNpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHAucmVzaXplQ2FudmFzKHAud3JhcHBlci5vZmZzZXRXaWR0aCwgcC53cmFwcGVyLm9mZnNldEhlaWdodCk7XG4gICAgY2xlYXJJbnRlcnZhbChwLnRpbWVPdXQxKTtcbiAgICBjbGVhckludGVydmFsKHAudGltZU91dDIpO1xuICAgIHAub25TZXRBcHBTdGF0ZSh7IG5ld0dhbWU6IGZhbHNlIH0sIHN0YXJ0TmV3R2FtZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlQmFsbHMoc3BlZWQpIHtcbiAgICBjb25zdCB7IGJhbGxzQ291bnQsIHRhcmdldEJhbGxzQ291bnQgfSA9IHAucHJvcHM7XG4gICAgcC5taW5UYXJnZXRJZCA9IGJhbGxzQ291bnQgLSB0YXJnZXRCYWxsc0NvdW50O1xuICAgIHAuYmFsbHMgPSBbXTtcbiAgICBmb3IgKGxldCBpPTA7IGk8YmFsbHNDb3VudDsgaSsrKSB7IHAuYmFsbHNbaV0gPSBuZXcgQmFsbChwLCBpLCBpPj1wLm1pblRhcmdldElkID8gcC50YXJnZXRDb2xvciA6IHAuZGVmYXVsdENvbG9yLCBzcGVlZCk7IH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0TmV3R2FtZSgpIHtcbiAgICBjb25zdCB7IG5ld0dhbWUsIHNwZWVkLCBiYWxsc0NvdW50IH0gPSBwLnByb3BzO1xuICAgIGNyZWF0ZUJhbGxzKG5ld0dhbWUgPyBzcGVlZCA6IHAuZGVtb1NwZWVkKTtcbiAgICBwLnJldmVyc2VkQmFsbHMgPSBbXTtcbiAgICBwLnNlbGVjdGVkQmFsbHMgPSBbXTtcbiAgICBwLm1vdmVCYWxscyA9IHRydWU7XG4gICAgcC5zdGFydEdhbWUgPSBmYWxzZTtcbiAgICBpZiAobmV3R2FtZSkge1xuICAgICAgcC5tb3ZlQmFsbHMgPSBmYWxzZTtcbiAgICAgIHAudGltZU91dDEgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcC5tb3ZlQmFsbHMgPSB0cnVlO1xuICAgICAgICBmb3IgKGxldCBpPXAubWluVGFyZ2V0SWQ7IGk8YmFsbHNDb3VudDsgaSsrKSB7IHAuYmFsbHNbaV0uY29sb3IgPSBwLmRlZmF1bHRDb2xvcjsgfVxuICAgICAgICBwLnRpbWVPdXQyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgcC5tb3ZlQmFsbHMgPSBmYWxzZTtcbiAgICAgICAgICBwLnN0YXJ0R2FtZSA9IHRydWU7XG4gICAgICAgIH0sIHAuZ2FtZVRpbWUqMTAwMCk7XG4gICAgICB9LCBwLnN0YXJ0VGltZSoxMDAwKTtcbiAgICB9XG4gIH1cbn1cbiIsImNvbnN0IGxhbmcgPSB7XG4gIGVuOiB7XG4gICAgaGVhZGVyOiAnSW5zdHJ1Y3Rpb24nLFxuICAgIGRlc2NyaXB0aW9uOiAnQSBudW1iZXIgb2YgYmx1ZSBjaXJjbGVzIGlzIGZpcnN0IHNob3duIHRvIHlvdS4gQW1vbmcgdGhlbSBoYWxmIG9mIHRoZSBjaXJjbGVzIGFyZSByYW5kb21seSBzZWxlY3RlZCBhcyDCq1RhcmdldHPCuyBhbmQgaW5kaWNhdGVkIGZvciB5b3UgYnkgcmVkIGNvbG9yLiBUaGVuLCBhbGwgY2lyY2xlcyB0dXJuIGJsdWUgYWdhaW4gYW5kIHN0YXJ0IG1vdmluZyB3aXRoIHJhbmRvbSBkaXJlY3Rpb24gYW5kIHNwZWVkLiBBbGwgY2lyY2xlcyBzdG9wIG1vdmluZyBhZnRlciBmZXcgc2Vjb25kcywgYW5kIHlvdSBzaG91bGQgaWRlbnRpZnkgd2hpY2ggb2YgdGhlIGNpcmNsZXMgYXJlIHRoZSDCq1RhcmdldHPCuy4nLFxuICAgIGN1cnJlbnRfbGV2ZWw6ICdDdXJyZW50IGxldmVsJyxcbiAgICBiYWxsczogJ0JhbGxzJyxcbiAgICBzcGVlZDogJ1NwZWVkJyxcbiAgICByZWRfYmFsbHM6ICdSZWQgQmFsbHMnLFxuICAgIGJhbGxzX3JhZGl1czogJ0JhbGxzIFJhZGl1cycsXG4gICAgbmV3X2dhbWU6ICdOZXcgR2FtZScsXG4gICAgaG9tZTogJ0hvbWUnLFxuICAgIGxhc3RfcmVzdWx0czogJ1lvdXIgbGFzdCByZXN1bHRzJyxcbiAgfSxcbiAgcnU6IHtcbiAgICBoZWFkZXI6ICfQmNC90YHRgtGA0YPQutGG0LjRjycsXG4gICAgZGVzY3JpcHRpb246ICctLS0nLFxuICAgIGN1cnJlbnRfbGV2ZWw6ICfQotC10LrRg9GJ0LjQuSDRg9GA0L7QstC10L3RjCcsXG4gICAgYmFsbHM6ICfQmtC+0LvQuNGH0LXRgdGC0LLQviDRiNCw0YDQvtCyJyxcbiAgICBzcGVlZDogJ9Ch0LrQvtGA0L7RgdGC0YwnLFxuICAgIHJlZF9iYWxsczogJ9Ca0YDQsNGB0L3Ri9C1INGI0LDRgNGLJyxcbiAgICBiYWxsc19yYWRpdXM6ICfQoNCw0LTQuNGD0YEnLFxuICAgIG5ld19nYW1lOiAn0J3QvtCy0LDRjyDQuNCz0YDQsCcsXG4gICAgaG9tZTogJ9CU0L7QvNC+0LknLFxuICAgIGxhc3RfcmVzdWx0czogJ9CS0LDRiNC4INC/0L7RgdC70LXQtNC90LjQtSDRgNC10LfRg9C70YzRgtCw0YLRiycsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBsYW5nO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHdpdGhDb29raWVzIH0gZnJvbSAncmVhY3QtY29va2llJztcbmltcG9ydCBNZW51IGZyb20gJy4vY29tcG9uZW50cy9NZW51JztcbmltcG9ydCBGaWx0ZXIgZnJvbSAnLi9jb21wb25lbnRzL0ZpbHRlcic7XG5pbXBvcnQgUmVzdWx0IGZyb20gJy4vY29tcG9uZW50cy9SZXN1bHQnO1xuaW1wb3J0IFA1V3JhcHBlciBmcm9tICcuL1A1V3JhcHBlcic7XG5pbXBvcnQgc2tldGNoIGZyb20gJy4vUDVXcmFwcGVyL3NrZXRjaCc7XG5pbXBvcnQgbGFuZyBmcm9tICcuL2xhbmcnO1xuaW1wb3J0IEJhc2VBcHAgZnJvbSAnLi9CYXNlQXBwJztcblxuZXhwb3J0IGNsYXNzIEFwcCBleHRlbmRzIEJhc2VBcHAge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgY3VycmVudF9sYW5nOiBwcm9wcy5jb29raWVzLmdldCgnbGFuZ3VhZ2UnKSB8fCAnZW4nLFxuICAgICAgcmVzdWx0czogW10sXG4gICAgICBuZXdHYW1lOiBmYWxzZSxcbiAgICAgIGxldmVsOiAxLFxuICAgICAgYmFsbHNDb3VudDogMTIsXG4gICAgICBzcGVlZDogMyxcbiAgICAgIHRhcmdldEJhbGxzQ291bnQ6IDQsXG4gICAgICByYWRpdXM6IDUwLFxuICAgICAgcGxheWVkR2FtZXM6IDAsXG4gICAgICBjb3VudE9mR2FtZXM6IDUsXG4gICAgfTtcbiAgfVxuXG4gIGdlbmVyYXRlUmVzdWx0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGJhbGxzQ291bnQsIHRhcmdldEJhbGxzQ291bnQsIHRhcmdldEJhbGxzLCBzZWxlY3RlZEJhbGxzLCBsZXZlbCwgc3BlZWQsIHJhZGl1cyxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICBsZXQgdHJ1ZUJhbGxzID0gMDtcbiAgICBsZXQgZmFsc2VCYWxscyA9IDA7XG4gICAgY29uc3QgY2xpY2tlZEJhbGxzID0ge307XG4gICAgZm9yIChjb25zdCBiYWxsIG9mIHNlbGVjdGVkQmFsbHMpIHtcbiAgICAgIGJhbGwuaWQgPj0gYmFsbHNDb3VudCAtIHRhcmdldEJhbGxzQ291bnQgPyB0cnVlQmFsbHMrKyA6IGZhbHNlQmFsbHMrKztcbiAgICAgIGNsaWNrZWRCYWxsc1tiYWxsLmlkXSA9IHsgeDogYmFsbC54LnRvRml4ZWQoMyksIHk6IGJhbGwueS50b0ZpeGVkKDMpIH07XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHN1Y2Nlc3M6IHRydWVCYWxscyA9PT0gdGFyZ2V0QmFsbHNDb3VudCAmJiBmYWxzZUJhbGxzID09PSAwLFxuICAgICAgbGV2ZWwsXG4gICAgICB0cnVlX2JhbGxzOiB0cnVlQmFsbHMsXG4gICAgICBmYWxzZV9iYWxsczogZmFsc2VCYWxscyxcbiAgICAgIGJhbGxzOiBiYWxsc0NvdW50LFxuICAgICAgcmVkX2JhbGxzOiB0YXJnZXRCYWxsc0NvdW50LFxuICAgICAgdGFyZ2V0X2JhbGxzOiB0YXJnZXRCYWxscyxcbiAgICAgIGNsaWNrZWRfYmFsbHM6IGNsaWNrZWRCYWxscyxcbiAgICAgIHNwZWVkLFxuICAgICAgcmFkaXVzLFxuICAgIH07XG4gICAgLy8gdGhpcy5zYXZlUmVzdWx0KHJlc3VsdCk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIG5ld0dhbWUsIGJhbGxzQ291bnQsIHRhcmdldEJhbGxzQ291bnQsIHNwZWVkLCBsZXZlbCwgcmFkaXVzLCBwbGF5ZWRHYW1lcywgY291bnRPZkdhbWVzLCBjdXJyZW50X2xhbmcsIHJlc3VsdHMsIHVzZXIsIGlzTG9hZGluZyxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTEwMCBoLTEwMCBkLWZsZXhcIj5cbiAgICAgICAgPE1lbnVcbiAgICAgICAgICBjdXJyZW50X2xldmVsPXt7XG4gICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICAgIGJhbGxzOiBiYWxsc0NvdW50LFxuICAgICAgICAgICAgc3BlZWQsXG4gICAgICAgICAgICByZWRfYmFsbHM6IHRhcmdldEJhbGxzQ291bnQsXG4gICAgICAgICAgfX1cbiAgICAgICAgICByYWRpdXM9e3JhZGl1c31cbiAgICAgICAgICBsYW5nPXtsYW5nW2N1cnJlbnRfbGFuZ119XG4gICAgICAgICAgbmV3R2FtZUJ1dHRvbkNsaWNrPXt0aGlzLm5ld0dhbWVCdXR0b25DbGlja31cbiAgICAgICAgICBnb0hvbWU9e3RoaXMuZ29Ib21lfVxuICAgICAgICAvPlxuICAgICAgICA8RmlsdGVyXG4gICAgICAgICAgbmV3R2FtZT17bmV3R2FtZX1cbiAgICAgICAgICB1c2VyPXt1c2VyfVxuICAgICAgICAgIHJlc3VsdHM9e3Jlc3VsdHN9XG4gICAgICAgICAgaXNMb2FkaW5nPXtpc0xvYWRpbmd9XG4gICAgICAgICAgY3VycmVudF9sYW5nPXtjdXJyZW50X2xhbmd9XG4gICAgICAgICAgbGFuZz17bGFuZ1tjdXJyZW50X2xhbmddfVxuICAgICAgICAgIGNoYW5nZUxhbmd1YWdlPXt0aGlzLmNoYW5nZUxhbmd1YWdlfVxuICAgICAgICAgIFJlc3VsdD17UmVzdWx0fVxuICAgICAgICAvPlxuICAgICAgICA8UDVXcmFwcGVyXG4gICAgICAgICAgcDVQcm9wcz17e1xuICAgICAgICAgICAgbmV3R2FtZSxcbiAgICAgICAgICAgIGJhbGxzQ291bnQsXG4gICAgICAgICAgICB0YXJnZXRCYWxsc0NvdW50LFxuICAgICAgICAgICAgc3BlZWQsXG4gICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICAgIHJhZGl1cyxcbiAgICAgICAgICAgIHBsYXllZEdhbWVzLFxuICAgICAgICAgICAgY291bnRPZkdhbWVzLFxuICAgICAgICAgICAgZ2VuZXJhdGVSZXN1bHQ6IHRoaXMuZ2VuZXJhdGVSZXN1bHQsXG4gICAgICAgICAgfX1cbiAgICAgICAgICBza2V0Y2g9e3NrZXRjaH1cbiAgICAgICAgICBvblNldEFwcFN0YXRlPXt0aGlzLm9uU2V0QXBwU3RhdGV9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhDb29raWVzKEFwcCk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnJlcXVpcmUoJ0BmaXJlYmFzZS9wb2x5ZmlsbCcpO1xudmFyIGZpcmViYXNlID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BmaXJlYmFzZS9hcHAnKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZpcmViYXNlO1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciB0c2xpYl8xID0gcmVxdWlyZSgndHNsaWInKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IEZpcmViYXNlIGNvbnN0YW50cy4gIFNvbWUgb2YgdGhlc2UgKEBkZWZpbmVzKSBjYW4gYmUgb3ZlcnJpZGRlbiBhdCBjb21waWxlLXRpbWUuXHJcbiAqL1xyXG52YXIgQ09OU1RBTlRTID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoaXMgaXMgdGhlIGNsaWVudCBOb2RlLmpzIFNESy5cclxuICAgICAqL1xyXG4gICAgTk9ERV9DTElFTlQ6IGZhbHNlLFxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoaXMgaXMgdGhlIEFkbWluIE5vZGUuanMgU0RLLlxyXG4gICAgICovXHJcbiAgICBOT0RFX0FETUlOOiBmYWxzZSxcclxuICAgIC8qKlxyXG4gICAgICogRmlyZWJhc2UgU0RLIFZlcnNpb25cclxuICAgICAqL1xyXG4gICAgU0RLX1ZFUlNJT046ICcke0pTQ09SRV9WRVJTSU9OfSdcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHByb3ZpZGVkIGFzc2VydGlvbiBpcyBmYWxzeVxyXG4gKiBAcGFyYW0geyp9IGFzc2VydGlvbiBUaGUgYXNzZXJ0aW9uIHRvIGJlIHRlc3RlZCBmb3IgZmFsc2luZXNzXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBkaXNwbGF5IGlmIHRoZSBjaGVjayBmYWlsc1xyXG4gKi9cclxudmFyIGFzc2VydCA9IGZ1bmN0aW9uIChhc3NlcnRpb24sIG1lc3NhZ2UpIHtcclxuICAgIGlmICghYXNzZXJ0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgYXNzZXJ0aW9uRXJyb3IobWVzc2FnZSk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIEVycm9yIG9iamVjdCBzdWl0YWJsZSBmb3IgdGhyb3dpbmcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXHJcbiAqIEByZXR1cm4geyFFcnJvcn1cclxuICovXHJcbnZhciBhc3NlcnRpb25FcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gbmV3IEVycm9yKCdGaXJlYmFzZSBEYXRhYmFzZSAoJyArXHJcbiAgICAgICAgQ09OU1RBTlRTLlNES19WRVJTSU9OICtcclxuICAgICAgICAnKSBJTlRFUk5BTCBBU1NFUlQgRkFJTEVEOiAnICtcclxuICAgICAgICBtZXNzYWdlKTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBzdHJpbmdUb0J5dGVBcnJheSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIC8vIFRPRE8odXNlcik6IFVzZSBuYXRpdmUgaW1wbGVtZW50YXRpb25zIGlmL3doZW4gYXZhaWxhYmxlXHJcbiAgICB2YXIgb3V0ID0gW10sIHAgPSAwO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGZjMDApID09IDB4ZDgwMCAmJlxyXG4gICAgICAgICAgICBpICsgMSA8IHN0ci5sZW5ndGggJiZcclxuICAgICAgICAgICAgKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmMwMCkgPT0gMHhkYzAwKSB7XHJcbiAgICAgICAgICAgIC8vIFN1cnJvZ2F0ZSBQYWlyXHJcbiAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKChjICYgMHgwM2ZmKSA8PCAxMCkgKyAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4MDNmZik7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTgpIHwgMjQwO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQ7XHJcbn07XHJcbi8qKlxyXG4gKiBUdXJucyBhbiBhcnJheSBvZiBudW1iZXJzIGludG8gdGhlIHN0cmluZyBnaXZlbiBieSB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aGVcclxuICogY2hhcmFjdGVycyB0byB3aGljaCB0aGUgbnVtYmVycyBjb3JyZXNwb25kLlxyXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGJ5dGVzIEFycmF5IG9mIG51bWJlcnMgcmVwcmVzZW50aW5nIGNoYXJhY3RlcnMuXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gU3RyaW5naWZpY2F0aW9uIG9mIHRoZSBhcnJheS5cclxuICovXHJcbnZhciBieXRlQXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIChieXRlcykge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIHZhciBvdXQgPSBbXSwgcG9zID0gMCwgYyA9IDA7XHJcbiAgICB3aGlsZSAocG9zIDwgYnl0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGMxID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgIGlmIChjMSA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDE5MSAmJiBjMSA8IDIyNCkge1xyXG4gICAgICAgICAgICB2YXIgYzIgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMzEpIDw8IDYpIHwgKGMyICYgNjMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYzEgPiAyMzkgJiYgYzEgPCAzNjUpIHtcclxuICAgICAgICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcclxuICAgICAgICAgICAgdmFyIGMyID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICB2YXIgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIHZhciBjNCA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgdmFyIHUgPSAoKChjMSAmIDcpIDw8IDE4KSB8ICgoYzIgJiA2MykgPDwgMTIpIHwgKChjMyAmIDYzKSA8PCA2KSB8IChjNCAmIDYzKSkgLVxyXG4gICAgICAgICAgICAgICAgMHgxMDAwMDtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZDgwMCArICh1ID4+IDEwKSk7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGRjMDAgKyAodSAmIDEwMjMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgdmFyIGMzID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjMSAmIDE1KSA8PCAxMikgfCAoKGMyICYgNjMpIDw8IDYpIHwgKGMzICYgNjMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0LmpvaW4oJycpO1xyXG59O1xyXG4vLyBTdGF0aWMgbG9va3VwIG1hcHMsIGxhemlseSBwb3B1bGF0ZWQgYnkgaW5pdF8oKVxyXG52YXIgYmFzZTY0ID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIGJ5dGVzIHRvIGNoYXJhY3RlcnMuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgYnl0ZVRvQ2hhck1hcF86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgY2hhcmFjdGVycyB0byBieXRlcy5cclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBjaGFyVG9CeXRlTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byB3ZWJzYWZlIGNoYXJhY3RlcnMuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgYnl0ZVRvQ2hhck1hcFdlYlNhZmVfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIHdlYnNhZmUgY2hhcmFjdGVycyB0byBieXRlcy5cclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBjaGFyVG9CeXRlTWFwV2ViU2FmZV86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE91ciBkZWZhdWx0IGFscGhhYmV0LCBzaGFyZWQgYmV0d2VlblxyXG4gICAgICogRU5DT0RFRF9WQUxTIGFuZCBFTkNPREVEX1ZBTFNfV0VCU0FGRVxyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgRU5DT0RFRF9WQUxTX0JBU0U6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicgKyAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonICsgJzAxMjM0NTY3ODknLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldC4gVmFsdWUgNjQgKD0pIGlzIHNwZWNpYWw7IGl0IG1lYW5zIFwibm90aGluZy5cIlxyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgZ2V0IEVOQ09ERURfVkFMUygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5FTkNPREVEX1ZBTFNfQkFTRSArICcrLz0nO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogT3VyIHdlYnNhZmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBnZXQgRU5DT0RFRF9WQUxTX1dFQlNBRkUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UgKyAnLV8uJztcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhpcyBicm93c2VyIHN1cHBvcnRzIHRoZSBhdG9iIGFuZCBidG9hIGZ1bmN0aW9ucy4gVGhpcyBleHRlbnNpb25cclxuICAgICAqIHN0YXJ0ZWQgYXQgTW96aWxsYSBidXQgaXMgbm93IGltcGxlbWVudGVkIGJ5IG1hbnkgYnJvd3NlcnMuIFdlIHVzZSB0aGVcclxuICAgICAqIEFTU1VNRV8qIHZhcmlhYmxlcyB0byBhdm9pZCBwdWxsaW5nIGluIHRoZSBmdWxsIHVzZXJhZ2VudCBkZXRlY3Rpb24gbGlicmFyeVxyXG4gICAgICogYnV0IHN0aWxsIGFsbG93aW5nIHRoZSBzdGFuZGFyZCBwZXItYnJvd3NlciBjb21waWxhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIEhBU19OQVRJVkVfU1VQUE9SVDogdHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbicsXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1lbmNvZGUgYW4gYXJyYXkgb2YgYnl0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtBcnJheTxudW1iZXI+fFVpbnQ4QXJyYXl9IGlucHV0IEFuIGFycmF5IG9mIGJ5dGVzIChudW1iZXJzIHdpdGhcclxuICAgICAqICAgICB2YWx1ZSBpbiBbMCwgMjU1XSkgdG8gZW5jb2RlLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3dlYlNhZmUgQm9vbGVhbiBpbmRpY2F0aW5nIHdlIHNob3VsZCB1c2UgdGhlXHJcbiAgICAgKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIGVuY29kZUJ5dGVBcnJheTogZnVuY3Rpb24gKGlucHV0LCBvcHRfd2ViU2FmZSkge1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2VuY29kZUJ5dGVBcnJheSB0YWtlcyBhbiBhcnJheSBhcyBhIHBhcmFtZXRlcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluaXRfKCk7XHJcbiAgICAgICAgdmFyIGJ5dGVUb0NoYXJNYXAgPSBvcHRfd2ViU2FmZVxyXG4gICAgICAgICAgICA/IHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfXHJcbiAgICAgICAgICAgIDogdGhpcy5ieXRlVG9DaGFyTWFwXztcclxuICAgICAgICB2YXIgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkgKz0gMykge1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTEgPSBpbnB1dFtpXTtcclxuICAgICAgICAgICAgdmFyIGhhdmVCeXRlMiA9IGkgKyAxIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTIgPSBoYXZlQnl0ZTIgPyBpbnB1dFtpICsgMV0gOiAwO1xyXG4gICAgICAgICAgICB2YXIgaGF2ZUJ5dGUzID0gaSArIDIgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBieXRlMyA9IGhhdmVCeXRlMyA/IGlucHV0W2kgKyAyXSA6IDA7XHJcbiAgICAgICAgICAgIHZhciBvdXRCeXRlMSA9IGJ5dGUxID4+IDI7XHJcbiAgICAgICAgICAgIHZhciBvdXRCeXRlMiA9ICgoYnl0ZTEgJiAweDAzKSA8PCA0KSB8IChieXRlMiA+PiA0KTtcclxuICAgICAgICAgICAgdmFyIG91dEJ5dGUzID0gKChieXRlMiAmIDB4MGYpIDw8IDIpIHwgKGJ5dGUzID4+IDYpO1xyXG4gICAgICAgICAgICB2YXIgb3V0Qnl0ZTQgPSBieXRlMyAmIDB4M2Y7XHJcbiAgICAgICAgICAgIGlmICghaGF2ZUJ5dGUzKSB7XHJcbiAgICAgICAgICAgICAgICBvdXRCeXRlNCA9IDY0O1xyXG4gICAgICAgICAgICAgICAgaWYgKCFoYXZlQnl0ZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRCeXRlMyA9IDY0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTFdLCBieXRlVG9DaGFyTWFwW291dEJ5dGUyXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlM10sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1lbmNvZGUgYSBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IEEgc3RyaW5nIHRvIGVuY29kZS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF93ZWJTYWZlIElmIHRydWUsIHdlIHNob3VsZCB1c2UgdGhlXHJcbiAgICAgKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIGVuY29kZVN0cmluZzogZnVuY3Rpb24gKGlucHV0LCBvcHRfd2ViU2FmZSkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0IGZvciBNb3ppbGxhIGJyb3dzZXJzIHRoYXQgaW1wbGVtZW50XHJcbiAgICAgICAgLy8gYSBuYXRpdmUgYmFzZTY0IGVuY29kZXIgaW4gdGhlIGZvcm0gb2YgXCJidG9hL2F0b2JcIlxyXG4gICAgICAgIGlmICh0aGlzLkhBU19OQVRJVkVfU1VQUE9SVCAmJiAhb3B0X3dlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJ0b2EoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVCeXRlQXJyYXkoc3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQpLCBvcHRfd2ViU2FmZSk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZGVjb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCB0byBkZWNvZGUuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfd2ViU2FmZSBUcnVlIGlmIHdlIHNob3VsZCB1c2UgdGhlXHJcbiAgICAgKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRlY29kZWQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGRlY29kZVN0cmluZzogZnVuY3Rpb24gKGlucHV0LCBvcHRfd2ViU2FmZSkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0IGZvciBNb3ppbGxhIGJyb3dzZXJzIHRoYXQgaW1wbGVtZW50XHJcbiAgICAgICAgLy8gYSBuYXRpdmUgYmFzZTY0IGVuY29kZXIgaW4gdGhlIGZvcm0gb2YgXCJidG9hL2F0b2JcIlxyXG4gICAgICAgIGlmICh0aGlzLkhBU19OQVRJVkVfU1VQUE9SVCAmJiAhb3B0X3dlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF0b2IoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnl0ZUFycmF5VG9TdHJpbmcodGhpcy5kZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dCwgb3B0X3dlYlNhZmUpKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogSW4gYmFzZS02NCBkZWNvZGluZywgZ3JvdXBzIG9mIGZvdXIgY2hhcmFjdGVycyBhcmUgY29udmVydGVkIGludG8gdGhyZWVcclxuICAgICAqIGJ5dGVzLiAgSWYgdGhlIGVuY29kZXIgZGlkIG5vdCBhcHBseSBwYWRkaW5nLCB0aGUgaW5wdXQgbGVuZ3RoIG1heSBub3RcclxuICAgICAqIGJlIGEgbXVsdGlwbGUgb2YgNC5cclxuICAgICAqXHJcbiAgICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBsYXN0IGdyb3VwIHdpbGwgaGF2ZSBmZXdlciB0aGFuIDQgY2hhcmFjdGVycywgYW5kXHJcbiAgICAgKiBwYWRkaW5nIHdpbGwgYmUgaW5mZXJyZWQuICBJZiB0aGUgZ3JvdXAgaGFzIG9uZSBvciB0d28gY2hhcmFjdGVycywgaXQgZGVjb2Rlc1xyXG4gICAgICogdG8gb25lIGJ5dGUuICBJZiB0aGUgZ3JvdXAgaGFzIHRocmVlIGNoYXJhY3RlcnMsIGl0IGRlY29kZXMgdG8gdHdvIGJ5dGVzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBJbnB1dCB0byBkZWNvZGUuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfd2ViU2FmZSBUcnVlIGlmIHdlIHNob3VsZCB1c2UgdGhlIHdlYi1zYWZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiB7IUFycmF5PG51bWJlcj59IGJ5dGVzIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXk6IGZ1bmN0aW9uIChpbnB1dCwgb3B0X3dlYlNhZmUpIHtcclxuICAgICAgICB0aGlzLmluaXRfKCk7XHJcbiAgICAgICAgdmFyIGNoYXJUb0J5dGVNYXAgPSBvcHRfd2ViU2FmZVxyXG4gICAgICAgICAgICA/IHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfXHJcbiAgICAgICAgICAgIDogdGhpcy5jaGFyVG9CeXRlTWFwXztcclxuICAgICAgICB2YXIgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7KSB7XHJcbiAgICAgICAgICAgIHZhciBieXRlMSA9IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkrKyldO1xyXG4gICAgICAgICAgICB2YXIgaGF2ZUJ5dGUyID0gaSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGJ5dGUyID0gaGF2ZUJ5dGUyID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogMDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICB2YXIgaGF2ZUJ5dGUzID0gaSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGJ5dGUzID0gaGF2ZUJ5dGUzID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgdmFyIGhhdmVCeXRlNCA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBieXRlNCA9IGhhdmVCeXRlNCA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGlmIChieXRlMSA9PSBudWxsIHx8IGJ5dGUyID09IG51bGwgfHwgYnl0ZTMgPT0gbnVsbCB8fCBieXRlNCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBvdXRCeXRlMSA9IChieXRlMSA8PCAyKSB8IChieXRlMiA+PiA0KTtcclxuICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTEpO1xyXG4gICAgICAgICAgICBpZiAoYnl0ZTMgIT0gNjQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvdXRCeXRlMiA9ICgoYnl0ZTIgPDwgNCkgJiAweGYwKSB8IChieXRlMyA+PiAyKTtcclxuICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKG91dEJ5dGUyKTtcclxuICAgICAgICAgICAgICAgIGlmIChieXRlNCAhPSA2NCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvdXRCeXRlMyA9ICgoYnl0ZTMgPDwgNikgJiAweGMwKSB8IGJ5dGU0O1xyXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKG91dEJ5dGUzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogTGF6eSBzdGF0aWMgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24uIENhbGxlZCBiZWZvcmVcclxuICAgICAqIGFjY2Vzc2luZyBhbnkgb2YgdGhlIHN0YXRpYyBtYXAgdmFyaWFibGVzLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgaW5pdF86IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnl0ZVRvQ2hhck1hcF8pIHtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwXyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgcXVpY2sgbWFwcGluZ3MgYmFjayBhbmQgZm9ydGgsIHNvIHdlIHByZWNvbXB1dGUgdHdvIG1hcHMuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5FTkNPREVEX1ZBTFMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF9baV0gPSB0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuYnl0ZVRvQ2hhck1hcF9baV1dID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgLy8gQmUgZm9yZ2l2aW5nIHdoZW4gZGVjb2RpbmcgYW5kIGNvcnJlY3RseSBkZWNvZGUgYm90aCBlbmNvZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSB0aGlzLkVOQ09ERURfVkFMU19CQVNFLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFVSTC1zYWZlIGJhc2U2NCBlbmNvZGluZ1xyXG4gKiBAcGFyYW0geyFzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHshc3RyaW5nfVxyXG4gKi9cclxudmFyIGJhc2U2NEVuY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHZhciB1dGY4Qnl0ZXMgPSBzdHJpbmdUb0J5dGVBcnJheShzdHIpO1xyXG4gICAgcmV0dXJuIGJhc2U2NC5lbmNvZGVCeXRlQXJyYXkodXRmOEJ5dGVzLCB0cnVlKTtcclxufTtcclxuLyoqXHJcbiAqIFVSTC1zYWZlIGJhc2U2NCBkZWNvZGluZ1xyXG4gKlxyXG4gKiBOT1RFOiBETyBOT1QgdXNlIHRoZSBnbG9iYWwgYXRvYigpIGZ1bmN0aW9uIC0gaXQgZG9lcyBOT1Qgc3VwcG9ydCB0aGVcclxuICogYmFzZTY0VXJsIHZhcmlhbnQgZW5jb2RpbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVG8gYmUgZGVjb2RlZFxyXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBEZWNvZGVkIHJlc3VsdCwgaWYgcG9zc2libGVcclxuICovXHJcbnZhciBiYXNlNjREZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBiYXNlNjQuZGVjb2RlU3RyaW5nKHN0ciwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Jhc2U2NERlY29kZSBmYWlsZWQ6ICcsIGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRG8gYSBkZWVwLWNvcHkgb2YgYmFzaWMgSmF2YVNjcmlwdCBPYmplY3RzIG9yIEFycmF5cy5cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBDb3B5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gZGVlcEV4dGVuZCh1bmRlZmluZWQsIHZhbHVlKTtcclxufVxyXG4vKipcclxuICogQ29weSBwcm9wZXJ0aWVzIGZyb20gc291cmNlIHRvIHRhcmdldCAocmVjdXJzaXZlbHkgYWxsb3dzIGV4dGVuc2lvblxyXG4gKiBvZiBPYmplY3RzIGFuZCBBcnJheXMpLiAgU2NhbGFyIHZhbHVlcyBpbiB0aGUgdGFyZ2V0IGFyZSBvdmVyLXdyaXR0ZW4uXHJcbiAqIElmIHRhcmdldCBpcyB1bmRlZmluZWQsIGFuIG9iamVjdCBvZiB0aGUgYXBwcm9wcmlhdGUgdHlwZSB3aWxsIGJlIGNyZWF0ZWRcclxuICogKGFuZCByZXR1cm5lZCkuXHJcbiAqXHJcbiAqIFdlIHJlY3Vyc2l2ZWx5IGNvcHkgYWxsIGNoaWxkIHByb3BlcnRpZXMgb2YgcGxhaW4gT2JqZWN0cyBpbiB0aGUgc291cmNlLSBzb1xyXG4gKiB0aGF0IG5hbWVzcGFjZS0gbGlrZSBkaWN0aW9uYXJpZXMgYXJlIG1lcmdlZC5cclxuICpcclxuICogTm90ZSB0aGF0IHRoZSB0YXJnZXQgY2FuIGJlIGEgZnVuY3Rpb24sIGluIHdoaWNoIGNhc2UgdGhlIHByb3BlcnRpZXMgaW5cclxuICogdGhlIHNvdXJjZSBPYmplY3QgYXJlIGNvcGllZCBvbnRvIGl0IGFzIHN0YXRpYyBwcm9wZXJ0aWVzIG9mIHRoZSBGdW5jdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcclxuICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChzb3VyY2UuY29uc3RydWN0b3IpIHtcclxuICAgICAgICBjYXNlIERhdGU6XHJcbiAgICAgICAgICAgIC8vIFRyZWF0IERhdGVzIGxpa2Ugc2NhbGFyczsgaWYgdGhlIHRhcmdldCBkYXRlIG9iamVjdCBoYWQgYW55IGNoaWxkXHJcbiAgICAgICAgICAgIC8vIHByb3BlcnRpZXMgLSB0aGV5IHdpbGwgYmUgbG9zdCFcclxuICAgICAgICAgICAgdmFyIGRhdGVWYWx1ZSA9IHNvdXJjZTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGVWYWx1ZS5nZXRUaW1lKCkpO1xyXG4gICAgICAgIGNhc2UgT2JqZWN0OlxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgQXJyYXk6XHJcbiAgICAgICAgICAgIC8vIEFsd2F5cyBjb3B5IHRoZSBhcnJheSBzb3VyY2UgYW5kIG92ZXJ3cml0ZSB0aGUgdGFyZ2V0LlxyXG4gICAgICAgICAgICB0YXJnZXQgPSBbXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgLy8gTm90IGEgcGxhaW4gT2JqZWN0IC0gdHJlYXQgaXQgYXMgYSBzY2FsYXIuXHJcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xyXG4gICAgICAgIGlmICghc291cmNlLmhhc093blByb3BlcnR5KHByb3ApKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0YXJnZXRbcHJvcF0gPSBkZWVwRXh0ZW5kKHRhcmdldFtwcm9wXSwgc291cmNlW3Byb3BdKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuLy8gVE9ETzogUmVhbGx5IG5lZWRlZCAoZm9yIEpTQ29tcGlsZXIgdHlwZSBjaGVja2luZyk/XHJcbmZ1bmN0aW9uIHBhdGNoUHJvcGVydHkob2JqLCBwcm9wLCB2YWx1ZSkge1xyXG4gICAgb2JqW3Byb3BdID0gdmFsdWU7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBEZWZlcnJlZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlZmVycmVkKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgX3RoaXMucmVqZWN0ID0gcmVqZWN0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgQVBJIGludGVybmFscyBhcmUgbm90IHByb21pc2VpZmllZCBhbmQgY2Fubm90IGJlY2F1c2Ugb3VyIGNhbGxiYWNrIEFQSXMgaGF2ZSBzdWJ0bGUgZXhwZWN0YXRpb25zIGFyb3VuZFxyXG4gICAgICogaW52b2tpbmcgcHJvbWlzZXMgaW5saW5lLCB3aGljaCBQcm9taXNlcyBhcmUgZm9yYmlkZGVuIHRvIGRvLiBUaGlzIG1ldGhvZCBhY2NlcHRzIGFuIG9wdGlvbmFsIG5vZGUtc3R5bGUgY2FsbGJhY2tcclxuICAgICAqIGFuZCByZXR1cm5zIGEgbm9kZS1zdHlsZSBjYWxsYmFjayB3aGljaCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0IHRoZSBEZWZlcnJlZCdzIHByb21pc2UuXHJcbiAgICAgKiBAcGFyYW0geygoP2Z1bmN0aW9uKD8oRXJyb3IpKTogKD98dW5kZWZpbmVkKSl8ICg/ZnVuY3Rpb24oPyhFcnJvciksPz0pOiAoP3x1bmRlZmluZWQpKSk9fSBjYWxsYmFja1xyXG4gICAgICogQHJldHVybiB7IWZ1bmN0aW9uKD8oRXJyb3IpLCA/PSl9XHJcbiAgICAgKi9cclxuICAgIERlZmVycmVkLnByb3RvdHlwZS53cmFwQ2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXJyb3IsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0dGFjaGluZyBub29wIGhhbmRsZXIganVzdCBpbiBjYXNlIGRldmVsb3BlciB3YXNuJ3QgZXhwZWN0aW5nXHJcbiAgICAgICAgICAgICAgICAvLyBwcm9taXNlc1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7IH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gU29tZSBvZiBvdXIgY2FsbGJhY2tzIGRvbid0IGV4cGVjdCBhIHZhbHVlIGFuZCBvdXIgb3duIHRlc3RzXHJcbiAgICAgICAgICAgICAgICAvLyBhc3NlcnQgdGhhdCB0aGUgcGFyYW1ldGVyIGxlbmd0aCBpcyAxXHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2subGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERlZmVycmVkO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgbmF2aWdhdG9yLnVzZXJBZ2VudCBzdHJpbmcgb3IgJycgaWYgaXQncyBub3QgZGVmaW5lZC5cclxuICogQHJldHVybiB7c3RyaW5nfSB1c2VyIGFnZW50IHN0cmluZ1xyXG4gKi9cclxudmFyIGdldFVBID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvclsndXNlckFnZW50J10gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvclsndXNlckFnZW50J107XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBEZXRlY3QgQ29yZG92YSAvIFBob25lR2FwIC8gSW9uaWMgZnJhbWV3b3JrcyBvbiBhIG1vYmlsZSBkZXZpY2UuXHJcbiAqXHJcbiAqIERlbGliZXJhdGVseSBkb2VzIG5vdCByZWx5IG9uIGNoZWNraW5nIGBmaWxlOi8vYCBVUkxzIChhcyB0aGlzIGZhaWxzIFBob25lR2FwIGluIHRoZSBSaXBwbGUgZW11bGF0b3IpIG5vclxyXG4gKiBDb3Jkb3ZhIGBvbkRldmljZVJlYWR5YCwgd2hpY2ggd291bGQgbm9ybWFsbHkgd2FpdCBmb3IgYSBjYWxsYmFjay5cclxuICpcclxuICogQHJldHVybiB7Ym9vbGVhbn0gaXNNb2JpbGVDb3Jkb3ZhXHJcbiAqL1xyXG52YXIgaXNNb2JpbGVDb3Jkb3ZhID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgICEhKHdpbmRvd1snY29yZG92YSddIHx8IHdpbmRvd1sncGhvbmVnYXAnXSB8fCB3aW5kb3dbJ1Bob25lR2FwJ10pICYmXHJcbiAgICAgICAgL2lvc3xpcGhvbmV8aXBvZHxpcGFkfGFuZHJvaWR8YmxhY2tiZXJyeXxpZW1vYmlsZS9pLnRlc3QoZ2V0VUEoKSkpO1xyXG59O1xyXG4vKipcclxuICogRGV0ZWN0IFJlYWN0IE5hdGl2ZS5cclxuICpcclxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudCBpcyBkZXRlY3RlZC5cclxuICovXHJcbnZhciBpc1JlYWN0TmF0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2YgbmF2aWdhdG9yID09PSAnb2JqZWN0JyAmJiBuYXZpZ2F0b3JbJ3Byb2R1Y3QnXSA9PT0gJ1JlYWN0TmF0aXZlJyk7XHJcbn07XHJcbi8qKlxyXG4gKiBEZXRlY3QgTm9kZS5qcy5cclxuICpcclxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBOb2RlLmpzIGVudmlyb25tZW50IGlzIGRldGVjdGVkLlxyXG4gKi9cclxudmFyIGlzTm9kZVNkayA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBDT05TVEFOVFMuTk9ERV9DTElFTlQgPT09IHRydWUgfHwgQ09OU1RBTlRTLk5PREVfQURNSU4gPT09IHRydWU7XHJcbn07XG5cbnZhciBFUlJPUl9OQU1FID0gJ0ZpcmViYXNlRXJyb3InO1xyXG52YXIgY2FwdHVyZVN0YWNrVHJhY2UgPSBFcnJvclxyXG4gICAgLmNhcHR1cmVTdGFja1RyYWNlO1xyXG4vLyBFeHBvcnQgZm9yIGZha2luZyBpbiB0ZXN0c1xyXG5mdW5jdGlvbiBwYXRjaENhcHR1cmUoY2FwdHVyZUZha2UpIHtcclxuICAgIHZhciByZXN1bHQgPSBjYXB0dXJlU3RhY2tUcmFjZTtcclxuICAgIGNhcHR1cmVTdGFja1RyYWNlID0gY2FwdHVyZUZha2U7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbnZhciBGaXJlYmFzZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlyZWJhc2VFcnJvcihjb2RlLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIC8vIFdlIHdhbnQgdGhlIHN0YWNrIHZhbHVlLCBpZiBpbXBsZW1lbnRlZCBieSBFcnJvclxyXG4gICAgICAgIGlmIChjYXB0dXJlU3RhY2tUcmFjZSkge1xyXG4gICAgICAgICAgICAvLyBQYXRjaGVzIHRoaXMuc3RhY2ssIG9taXR0ZWQgY2FsbHMgYWJvdmUgRXJyb3JGYWN0b3J5I2NyZWF0ZVxyXG4gICAgICAgICAgICBjYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFcnJvckZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgLy8gSW4gY2FzZSBvZiBJRTExLCBzdGFjayB3aWxsIGJlIHNldCBvbmx5IGFmdGVyIGVycm9yIGlzIHJhaXNlZC5cclxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3NjcmlwdGluZy9qYXZhc2NyaXB0L3JlZmVyZW5jZS9zdGFjay1wcm9wZXJ0eS1lcnJvci1qYXZhc2NyaXB0XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IEVSUk9SX05BTUU7XHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIG5vbi1lbnVtZXJhYmxlIGdldHRlciBmb3IgdGhlIHByb3BlcnR5LlxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIHtcclxuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyci5zdGFjaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBGaXJlYmFzZUVycm9yO1xyXG59KCkpO1xyXG4vLyBCYWNrLWRvb3IgaW5oZXJpdGFuY2VcclxuRmlyZWJhc2VFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XHJcbkZpcmViYXNlRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmlyZWJhc2VFcnJvcjtcclxuRmlyZWJhc2VFcnJvci5wcm90b3R5cGUubmFtZSA9IEVSUk9SX05BTUU7XHJcbnZhciBFcnJvckZhY3RvcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFcnJvckZhY3Rvcnkoc2VydmljZSwgc2VydmljZU5hbWUsIGVycm9ycykge1xyXG4gICAgICAgIHRoaXMuc2VydmljZSA9IHNlcnZpY2U7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlTmFtZSA9IHNlcnZpY2VOYW1lO1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgICAgIC8vIE1hdGNoZXMgeyRuYW1lfSwgYnkgZGVmYXVsdC5cclxuICAgICAgICB0aGlzLnBhdHRlcm4gPSAvXFx7XFwkKFtefV0rKX0vZztcclxuICAgICAgICAvLyBlbXB0eVxyXG4gICAgfVxyXG4gICAgRXJyb3JGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoY29kZSwgZGF0YSkge1xyXG4gICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZGF0YSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdGVtcGxhdGUgPSB0aGlzLmVycm9yc1tjb2RlXTtcclxuICAgICAgICB2YXIgZnVsbENvZGUgPSB0aGlzLnNlcnZpY2UgKyAnLycgKyBjb2RlO1xyXG4gICAgICAgIHZhciBtZXNzYWdlO1xyXG4gICAgICAgIGlmICh0ZW1wbGF0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnRXJyb3InO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IHRlbXBsYXRlLnJlcGxhY2UodGhpcy5wYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZGF0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZS50b1N0cmluZygpIDogJzwnICsga2V5ICsgJz8+JztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNlcnZpY2U6IEVycm9yIG1lc3NhZ2UgKHNlcnZpY2UvY29kZSkuXHJcbiAgICAgICAgbWVzc2FnZSA9IHRoaXMuc2VydmljZU5hbWUgKyAnOiAnICsgbWVzc2FnZSArICcgKCcgKyBmdWxsQ29kZSArICcpLic7XHJcbiAgICAgICAgdmFyIGVyciA9IG5ldyBGaXJlYmFzZUVycm9yKGZ1bGxDb2RlLCBtZXNzYWdlKTtcclxuICAgICAgICAvLyBQb3B1bGF0ZSB0aGUgRXJyb3Igb2JqZWN0IHdpdGggbWVzc2FnZSBwYXJ0cyBmb3IgcHJvZ3JhbW1hdGljXHJcbiAgICAgICAgLy8gYWNjZXNzZXMgKGUuZy4sIGUuZmlsZSkuXHJcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShwcm9wKSB8fCBwcm9wLnNsaWNlKC0xKSA9PT0gJ18nKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlcnJbcHJvcF0gPSBkYXRhW3Byb3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXJyO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFcnJvckZhY3Rvcnk7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRXZhbHVhdGVzIGEgSlNPTiBzdHJpbmcgaW50byBhIGphdmFzY3JpcHQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGNvbnRhaW5pbmcgSlNPTi5cclxuICogQHJldHVybiB7Kn0gVGhlIGphdmFzY3JpcHQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIEpTT04uXHJcbiAqL1xyXG5mdW5jdGlvbiBqc29uRXZhbChzdHIpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgSlNPTiByZXByZXNlbnRpbmcgYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICogQHBhcmFtIHsqfSBkYXRhIEphdmFzY3JpcHQgb2JqZWN0IHRvIGJlIHN0cmluZ2lmaWVkLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBKU09OIGNvbnRlbnRzIG9mIHRoZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBzdHJpbmdpZnkoZGF0YSkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGludG8gY29uc3RpdHVlbnQgcGFydHMuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gd2l0aCBpbnZhbGlkIC8gaW5jb21wbGV0ZSBjbGFpbXMgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7P3N0cmluZ30gdG9rZW5cclxuICogQHJldHVybiB7e2hlYWRlcjogKiwgY2xhaW1zOiAqLCBkYXRhOiAqLCBzaWduYXR1cmU6IHN0cmluZ319XHJcbiAqL1xyXG52YXIgZGVjb2RlID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICB2YXIgaGVhZGVyID0ge30sIGNsYWltcyA9IHt9LCBkYXRhID0ge30sIHNpZ25hdHVyZSA9ICcnO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xyXG4gICAgICAgIGhlYWRlciA9IGpzb25FdmFsKGJhc2U2NERlY29kZShwYXJ0c1swXSkgfHwgJycpO1xyXG4gICAgICAgIGNsYWltcyA9IGpzb25FdmFsKGJhc2U2NERlY29kZShwYXJ0c1sxXSkgfHwgJycpO1xyXG4gICAgICAgIHNpZ25hdHVyZSA9IHBhcnRzWzJdO1xyXG4gICAgICAgIGRhdGEgPSBjbGFpbXNbJ2QnXSB8fCB7fTtcclxuICAgICAgICBkZWxldGUgY2xhaW1zWydkJ107XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGhlYWRlcjogaGVhZGVyLFxyXG4gICAgICAgIGNsYWltczogY2xhaW1zLFxyXG4gICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmVcclxuICAgIH07XHJcbn07XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIGNoZWNrcyB0aGUgdmFsaWRpdHkgb2YgaXRzIHRpbWUtYmFzZWQgY2xhaW1zLiBXaWxsIHJldHVybiB0cnVlIGlmIHRoZVxyXG4gKiB0b2tlbiBpcyB3aXRoaW4gdGhlIHRpbWUgd2luZG93IGF1dGhvcml6ZWQgYnkgdGhlICduYmYnIChub3QtYmVmb3JlKSBhbmQgJ2lhdCcgKGlzc3VlZC1hdCkgY2xhaW1zLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIGEgZmFsc2UgbmVnYXRpdmUgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7P3N0cmluZ30gdG9rZW5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnZhciBpc1ZhbGlkVGltZXN0YW1wID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICB2YXIgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXMsIG5vdyA9IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSwgdmFsaWRTaW5jZSwgdmFsaWRVbnRpbDtcclxuICAgIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ25iZicpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkU2luY2UgPSBjbGFpbXNbJ25iZiddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkU2luY2UgPSBjbGFpbXNbJ2lhdCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCdleHAnKSkge1xyXG4gICAgICAgICAgICB2YWxpZFVudGlsID0gY2xhaW1zWydleHAnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRva2VuIHdpbGwgZXhwaXJlIGFmdGVyIDI0aCBieSBkZWZhdWx0XHJcbiAgICAgICAgICAgIHZhbGlkVW50aWwgPSB2YWxpZFNpbmNlICsgODY0MDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChub3cgJiYgdmFsaWRTaW5jZSAmJiB2YWxpZFVudGlsICYmIG5vdyA+PSB2YWxpZFNpbmNlICYmIG5vdyA8PSB2YWxpZFVudGlsKTtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgcmV0dXJucyBpdHMgaXNzdWVkIGF0IHRpbWUgaWYgdmFsaWQsIG51bGwgb3RoZXJ3aXNlLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIG51bGwgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7P3N0cmluZ30gdG9rZW5cclxuICogQHJldHVybiB7P251bWJlcn1cclxuICovXHJcbnZhciBpc3N1ZWRBdFRpbWUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsYWltc1snaWF0J107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgZm9ybWF0LiBFeHBlY3RzIGEgdmFsaWQgaXNzdWVkLWF0IHRpbWUuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICpcclxuICogQHBhcmFtIHs/c3RyaW5nfSB0b2tlblxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzVmFsaWRGb3JtYXQgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBkZWNvZGVkID0gZGVjb2RlKHRva2VuKSwgY2xhaW1zID0gZGVjb2RlZC5jbGFpbXM7XHJcbiAgICByZXR1cm4gISFjbGFpbXMgJiYgdHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcgJiYgY2xhaW1zLmhhc093blByb3BlcnR5KCdpYXQnKTtcclxufTtcclxuLyoqXHJcbiAqIEF0dGVtcHRzIHRvIHBlZXIgaW50byBhbiBhdXRoIHRva2VuIGFuZCBkZXRlcm1pbmUgaWYgaXQncyBhbiBhZG1pbiBhdXRoIHRva2VuIGJ5IGxvb2tpbmcgYXQgdGhlIGNsYWltcyBwb3J0aW9uLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIGEgZmFsc2UgbmVnYXRpdmUgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7P3N0cmluZ30gdG9rZW5cclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnZhciBpc0FkbWluID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICB2YXIgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XHJcbiAgICByZXR1cm4gdHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcgJiYgY2xhaW1zWydhZG1pbiddID09PSB0cnVlO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gU2VlIGh0dHA6Ly93d3cuZGV2dGhvdWdodC5jb20vMjAxMi8wMS8xOC9hbi1vYmplY3QtaXMtbm90LWEtaGFzaC9cclxudmFyIGNvbnRhaW5zID0gZnVuY3Rpb24gKG9iaiwga2V5KSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcclxufTtcclxudmFyIHNhZmVHZXQgPSBmdW5jdGlvbiAob2JqLCBrZXkpIHtcclxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKVxyXG4gICAgICAgIHJldHVybiBvYmpba2V5XTtcclxuICAgIC8vIGVsc2UgcmV0dXJuIHVuZGVmaW5lZC5cclxufTtcclxuLyoqXHJcbiAqIEVudW1lcmF0ZXMgdGhlIGtleXMvdmFsdWVzIGluIGFuIG9iamVjdCwgZXhjbHVkaW5nIGtleXMgZGVmaW5lZCBvbiB0aGUgcHJvdG90eXBlLlxyXG4gKlxyXG4gKiBAcGFyYW0gez9PYmplY3QuPEssVj59IG9iaiBPYmplY3QgdG8gZW51bWVyYXRlLlxyXG4gKiBAcGFyYW0geyFmdW5jdGlvbihLLCBWKX0gZm4gRnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBrZXkgYW5kIHZhbHVlLlxyXG4gKiBAdGVtcGxhdGUgSyxWXHJcbiAqL1xyXG52YXIgZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmosIGZuKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICAgICAgZm4oa2V5LCBvYmpba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogQ29waWVzIGFsbCB0aGUgKG93bikgcHJvcGVydGllcyBmcm9tIG9uZSBvYmplY3QgdG8gYW5vdGhlci5cclxuICogQHBhcmFtIHshT2JqZWN0fSBvYmpUb1xyXG4gKiBAcGFyYW0geyFPYmplY3R9IG9iakZyb21cclxuICogQHJldHVybiB7IU9iamVjdH0gb2JqVG9cclxuICovXHJcbnZhciBleHRlbmQgPSBmdW5jdGlvbiAob2JqVG8sIG9iakZyb20pIHtcclxuICAgIGZvckVhY2gob2JqRnJvbSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICBvYmpUb1trZXldID0gdmFsdWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBvYmpUbztcclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgYSBjbG9uZSBvZiB0aGUgc3BlY2lmaWVkIG9iamVjdC5cclxuICogQHBhcmFtIHshT2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7IU9iamVjdH0gY2xvbmVkIG9iai5cclxuICovXHJcbnZhciBjbG9uZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHJldHVybiBleHRlbmQoe30sIG9iaik7XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqIGhhcyB0eXBlb2YgXCJvYmplY3RcIiBhbmQgaXMgbm90IG51bGwuICBVbmxpa2UgZ29vZy5pc09iamVjdCgpLCBkb2VzIG5vdCByZXR1cm4gdHJ1ZVxyXG4gKiBmb3IgZnVuY3Rpb25zLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqIHsqfSBBIHBvdGVudGlhbCBvYmplY3QuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGl0J3MgYW4gb2JqZWN0LlxyXG4gKi9cclxudmFyIGlzTm9uTnVsbE9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGw7XHJcbn07XHJcbnZhciBpc0VtcHR5ID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xyXG52YXIgZ2V0Q291bnQgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICB2YXIgcnYgPSAwO1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIHJ2Kys7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcnY7XHJcbn07XHJcbnZhciBtYXAgPSBmdW5jdGlvbiAob2JqLCBmLCBvcHRfb2JqKSB7XHJcbiAgICB2YXIgcmVzID0ge307XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgcmVzW2tleV0gPSBmLmNhbGwob3B0X29iaiwgb2JqW2tleV0sIGtleSwgb2JqKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn07XHJcbnZhciBmaW5kS2V5ID0gZnVuY3Rpb24gKG9iaiwgZm4sIG9wdF90aGlzKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKGZuLmNhbGwob3B0X3RoaXMsIG9ialtrZXldLCBrZXksIG9iaikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59O1xyXG52YXIgZmluZFZhbHVlID0gZnVuY3Rpb24gKG9iaiwgZm4sIG9wdF90aGlzKSB7XHJcbiAgICB2YXIga2V5ID0gZmluZEtleShvYmosIGZuLCBvcHRfdGhpcyk7XHJcbiAgICByZXR1cm4ga2V5ICYmIG9ialtrZXldO1xyXG59O1xyXG52YXIgZ2V0QW55S2V5ID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBnZXRWYWx1ZXMgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICB2YXIgcmVzID0gW107XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgcmVzW2krK10gPSBvYmpba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn07XHJcbi8qKlxyXG4gKiBUZXN0cyB3aGV0aGVyIGV2ZXJ5IGtleS92YWx1ZSBwYWlyIGluIGFuIG9iamVjdCBwYXNzIHRoZSB0ZXN0IGltcGxlbWVudGVkXHJcbiAqIGJ5IHRoZSBwcm92aWRlZCBmdW5jdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0gez9PYmplY3QuPEssVj59IG9iaiBPYmplY3QgdG8gdGVzdC5cclxuICogQHBhcmFtIHshZnVuY3Rpb24oSywgVil9IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2gga2V5IGFuZCB2YWx1ZS5cclxuICogQHRlbXBsYXRlIEssVlxyXG4gKi9cclxudmFyIGV2ZXJ5ID0gZnVuY3Rpb24gKG9iaiwgZm4pIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICBpZiAoIWZuKGtleSwgb2JqW2tleV0pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcXVlcnlzdHJpbmctZm9ybWF0dGVkIHN0cmluZyAoZS5nLiAmYXJnPXZhbCZhcmcyPXZhbDIpIGZyb20gYSBwYXJhbXNcclxuICogb2JqZWN0IChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxyXG4gKiBOb3RlOiBZb3UgbXVzdCBwcmVwZW5kIGl0IHdpdGggPyB3aGVuIGFkZGluZyBpdCB0byBhIFVSTC5cclxuICpcclxuICogQHBhcmFtIHshT2JqZWN0fSBxdWVyeXN0cmluZ1BhcmFtc1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG52YXIgcXVlcnlzdHJpbmcgPSBmdW5jdGlvbiAocXVlcnlzdHJpbmdQYXJhbXMpIHtcclxuICAgIHZhciBwYXJhbXMgPSBbXTtcclxuICAgIGZvckVhY2gocXVlcnlzdHJpbmdQYXJhbXMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKGFycmF5VmFsKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChhcnJheVZhbCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcGFyYW1zLmxlbmd0aCA/ICcmJyArIHBhcmFtcy5qb2luKCcmJykgOiAnJztcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBxdWVyeXN0cmluZyAoZS5nLiA/YXJnPXZhbCZhcmcyPXZhbDIpIGludG8gYSBwYXJhbXMgb2JqZWN0IChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlzdHJpbmdcclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnZhciBxdWVyeXN0cmluZ0RlY29kZSA9IGZ1bmN0aW9uIChxdWVyeXN0cmluZykge1xyXG4gICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgdmFyIHRva2VucyA9IHF1ZXJ5c3RyaW5nLnJlcGxhY2UoL15cXD8vLCAnJykuc3BsaXQoJyYnKTtcclxuICAgIHRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gdG9rZW4uc3BsaXQoJz0nKTtcclxuICAgICAgICAgICAgb2JqW2tleVswXV0gPSBrZXlbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gQ29weXJpZ2h0IDIwMTEgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4vL1xyXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcclxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IEFic3RyYWN0IGNyeXB0b2dyYXBoaWMgaGFzaCBpbnRlcmZhY2UuXHJcbiAqXHJcbiAqIFNlZSBTaGExIGFuZCBNZDUgZm9yIHNhbXBsZSBpbXBsZW1lbnRhdGlvbnMuXHJcbiAqXHJcbiAqL1xyXG4vKipcclxuICogQ3JlYXRlIGEgY3J5cHRvZ3JhcGhpYyBoYXNoIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHN0cnVjdFxyXG4gKi9cclxudmFyIEhhc2ggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBIYXNoKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBibG9jayBzaXplIGZvciB0aGUgaGFzaGVyLlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSAtMTtcclxuICAgIH1cclxuICAgIHJldHVybiBIYXNoO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgU0hBLTEgY3J5cHRvZ3JhcGhpYyBoYXNoLlxyXG4gKiBWYXJpYWJsZSBuYW1lcyBmb2xsb3cgdGhlIG5vdGF0aW9uIGluIEZJUFMgUFVCIDE4MC0zOlxyXG4gKiBodHRwOi8vY3NyYy5uaXN0Lmdvdi9wdWJsaWNhdGlvbnMvZmlwcy9maXBzMTgwLTMvZmlwczE4MC0zX2ZpbmFsLnBkZi5cclxuICpcclxuICogVXNhZ2U6XHJcbiAqICAgdmFyIHNoYTEgPSBuZXcgc2hhMSgpO1xyXG4gKiAgIHNoYTEudXBkYXRlKGJ5dGVzKTtcclxuICogICB2YXIgaGFzaCA9IHNoYTEuZGlnZXN0KCk7XHJcbiAqXHJcbiAqIFBlcmZvcm1hbmNlOlxyXG4gKiAgIENocm9tZSAyMzogICB+NDAwIE1iaXQvc1xyXG4gKiAgIEZpcmVmb3ggMTY6ICB+MjUwIE1iaXQvc1xyXG4gKlxyXG4gKi9cclxuLyoqXHJcbiAqIFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaCBjb25zdHJ1Y3Rvci5cclxuICpcclxuICogVGhlIHByb3BlcnRpZXMgZGVjbGFyZWQgaGVyZSBhcmUgZGlzY3Vzc2VkIGluIHRoZSBhYm92ZSBhbGdvcml0aG0gZG9jdW1lbnQuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZXh0ZW5kcyB7SGFzaH1cclxuICogQGZpbmFsXHJcbiAqIEBzdHJ1Y3RcclxuICovXHJcbnZhciBTaGExID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU2hhMSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFNoYTEoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIb2xkcyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIGFjY3VtdWxhdGVkIHZhcmlhYmxlcyBhLWUgaW4gdGhlIGNvbXByZXNzX1xyXG4gICAgICAgICAqIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXk8bnVtYmVyPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF90aGlzLmNoYWluXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgYnVmZmVyIGhvbGRpbmcgdGhlIHBhcnRpYWxseSBjb21wdXRlZCBoYXNoIHJlc3VsdC5cclxuICAgICAgICAgKiBAdHlwZSB7IUFycmF5PG51bWJlcj59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGhpcy5idWZfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgODAgYnl0ZXMsIGVhY2ggYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGhhc2hlZC4gIFJlZmVycmVkIHRvXHJcbiAgICAgICAgICogYXMgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgaW4gdGhlIGRvY3MuXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheTxudW1iZXI+fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgX3RoaXMuV18gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb250YWlucyBkYXRhIG5lZWRlZCB0byBwYWQgbWVzc2FnZXMgbGVzcyB0aGFuIDY0IGJ5dGVzLlxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXk8bnVtYmVyPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF90aGlzLnBhZF8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF90aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgICAgIF90aGlzLmJsb2NrU2l6ZSA9IDUxMiAvIDg7XHJcbiAgICAgICAgX3RoaXMucGFkX1swXSA9IDEyODtcclxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IF90aGlzLmJsb2NrU2l6ZTsgKytpKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnBhZF9baV0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfdGhpcy5yZXNldCgpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIFNoYTEucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gMHg2NzQ1MjMwMTtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9IDB4ZWZjZGFiODk7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAweDk4YmFkY2ZlO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gMHgxMDMyNTQ3NjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9IDB4YzNkMmUxZjA7XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfID0gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEludGVybmFsIGNvbXByZXNzIGhlbHBlciBmdW5jdGlvbi5cclxuICAgICAqIEBwYXJhbSB7IUFycmF5PG51bWJlcj58IVVpbnQ4QXJyYXl8c3RyaW5nfSBidWYgQmxvY2sgdG8gY29tcHJlc3MuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG9wdF9vZmZzZXQgT2Zmc2V0IG9mIHRoZSBibG9jayBpbiB0aGUgYnVmZmVyLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgU2hhMS5wcm90b3R5cGUuY29tcHJlc3NfID0gZnVuY3Rpb24gKGJ1Ziwgb3B0X29mZnNldCkge1xyXG4gICAgICAgIGlmICghb3B0X29mZnNldCkge1xyXG4gICAgICAgICAgICBvcHRfb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIFcgPSB0aGlzLldfO1xyXG4gICAgICAgIC8vIGdldCAxNiBiaWcgZW5kaWFuIHdvcmRzXHJcbiAgICAgICAgaWYgKHR5cGVvZiBidWYgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyh1c2VyKTogW2J1ZyA4MTQwMTIyXSBSZWNlbnQgdmVyc2lvbnMgb2YgU2FmYXJpIGZvciBNYWMgT1MgYW5kIGlPU1xyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGJ1ZyB0aGF0IHR1cm5zIHRoZSBwb3N0LWluY3JlbWVudCArKyBvcGVyYXRvciBpbnRvIHByZS1pbmNyZW1lbnRcclxuICAgICAgICAgICAgICAgIC8vIGR1cmluZyBKSVQgY29tcGlsYXRpb24uICBXZSBoYXZlIGNvZGUgdGhhdCBkZXBlbmRzIGhlYXZpbHkgb24gU0hBLTEgZm9yXHJcbiAgICAgICAgICAgICAgICAvLyBjb3JyZWN0bmVzcyBhbmQgd2hpY2ggaXMgYWZmZWN0ZWQgYnkgdGhpcyBidWcsIHNvIEkndmUgcmVtb3ZlZCBhbGwgdXNlc1xyXG4gICAgICAgICAgICAgICAgLy8gb2YgcG9zdC1pbmNyZW1lbnQgKysgaW4gd2hpY2ggdGhlIHJlc3VsdCB2YWx1ZSBpcyB1c2VkLiAgV2UgY2FuIHJldmVydFxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjaGFuZ2Ugb25jZSB0aGUgU2FmYXJpIGJ1Z1xyXG4gICAgICAgICAgICAgICAgLy8gKGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDkwMzYpIGhhcyBiZWVuIGZpeGVkIGFuZFxyXG4gICAgICAgICAgICAgICAgLy8gbW9zdCBjbGllbnRzIGhhdmUgYmVlbiB1cGRhdGVkLlxyXG4gICAgICAgICAgICAgICAgV1tpXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9wdF9vZmZzZXQpIDw8IDI0KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvcHRfb2Zmc2V0ICsgMSkgPDwgMTYpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9wdF9vZmZzZXQgKyAyKSA8PCA4KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Zi5jaGFyQ29kZUF0KG9wdF9vZmZzZXQgKyAzKTtcclxuICAgICAgICAgICAgICAgIG9wdF9vZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmW29wdF9vZmZzZXRdIDw8IDI0KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWZbb3B0X29mZnNldCArIDFdIDw8IDE2KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWZbb3B0X29mZnNldCArIDJdIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmW29wdF9vZmZzZXQgKyAzXTtcclxuICAgICAgICAgICAgICAgIG9wdF9vZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBleHBhbmQgdG8gODAgd29yZHNcclxuICAgICAgICBmb3IgKHZhciBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB0ID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcclxuICAgICAgICAgICAgV1tpXSA9ICgodCA8PCAxKSB8ICh0ID4+PiAzMSkpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGEgPSB0aGlzLmNoYWluX1swXTtcclxuICAgICAgICB2YXIgYiA9IHRoaXMuY2hhaW5fWzFdO1xyXG4gICAgICAgIHZhciBjID0gdGhpcy5jaGFpbl9bMl07XHJcbiAgICAgICAgdmFyIGQgPSB0aGlzLmNoYWluX1szXTtcclxuICAgICAgICB2YXIgZSA9IHRoaXMuY2hhaW5fWzRdO1xyXG4gICAgICAgIHZhciBmLCBrO1xyXG4gICAgICAgIC8vIFRPRE8odXNlcik6IFRyeSB0byB1bnJvbGwgdGhpcyBsb29wIHRvIHNwZWVkIHVwIHRoZSBjb21wdXRhdGlvbi5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCA0MCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg1YTgyNzk5OTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4NmVkOWViYTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IChiICYgYykgfCAoZCAmIChiIHwgYykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDhmMWJiY2RjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHhjYTYyYzFkNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdCA9ICgoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGYgKyBlICsgayArIFdbaV0pICYgMHhmZmZmZmZmZjtcclxuICAgICAgICAgICAgZSA9IGQ7XHJcbiAgICAgICAgICAgIGQgPSBjO1xyXG4gICAgICAgICAgICBjID0gKChiIDw8IDMwKSB8IChiID4+PiAyKSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgICAgICBiID0gYTtcclxuICAgICAgICAgICAgYSA9IHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gKHRoaXMuY2hhaW5fWzBdICsgYSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzFdID0gKHRoaXMuY2hhaW5fWzFdICsgYikgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzJdID0gKHRoaXMuY2hhaW5fWzJdICsgYykgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gKHRoaXMuY2hhaW5fWzNdICsgZCkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzRdID0gKHRoaXMuY2hhaW5fWzRdICsgZSkgJiAweGZmZmZmZmZmO1xyXG4gICAgfTtcclxuICAgIFNoYTEucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChieXRlcywgb3B0X2xlbmd0aCkge1xyXG4gICAgICAgIC8vIFRPRE8oam9obmxlbnopOiB0aWdodGVuIHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgYW5kIHJlbW92ZSB0aGlzIGNoZWNrXHJcbiAgICAgICAgaWYgKGJ5dGVzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0X2xlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9wdF9sZW5ndGggPSBieXRlcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBsZW5ndGhNaW51c0Jsb2NrID0gb3B0X2xlbmd0aCAtIHRoaXMuYmxvY2tTaXplO1xyXG4gICAgICAgIHZhciBuID0gMDtcclxuICAgICAgICAvLyBVc2luZyBsb2NhbCBpbnN0ZWFkIG9mIG1lbWJlciB2YXJpYWJsZXMgZ2l2ZXMgfjUlIHNwZWVkdXAgb24gRmlyZWZveCAxNi5cclxuICAgICAgICB2YXIgYnVmID0gdGhpcy5idWZfO1xyXG4gICAgICAgIHZhciBpbmJ1ZiA9IHRoaXMuaW5idWZfO1xyXG4gICAgICAgIC8vIFRoZSBvdXRlciB3aGlsZSBsb29wIHNob3VsZCBleGVjdXRlIGF0IG1vc3QgdHdpY2UuXHJcbiAgICAgICAgd2hpbGUgKG4gPCBvcHRfbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgaGF2ZSBubyBkYXRhIGluIHRoZSBibG9jayB0byB0b3AgdXAsIHdlIGNhbiBkaXJlY3RseSBwcm9jZXNzIHRoZVxyXG4gICAgICAgICAgICAvLyBpbnB1dCBidWZmZXIgKGFzc3VtaW5nIGl0IGNvbnRhaW5zIHN1ZmZpY2llbnQgZGF0YSkuIFRoaXMgZ2l2ZXMgfjI1JVxyXG4gICAgICAgICAgICAvLyBzcGVlZHVwIG9uIENocm9tZSAyMyBhbmQgfjE1JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYsIGJ1dCByZXF1aXJlcyB0aGF0XHJcbiAgICAgICAgICAgIC8vIHRoZSBkYXRhIGlzIHByb3ZpZGVkIGluIGxhcmdlIGNodW5rcyAob3IgaW4gbXVsdGlwbGVzIG9mIDY0IGJ5dGVzKS5cclxuICAgICAgICAgICAgaWYgKGluYnVmID09IDApIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDw9IGxlbmd0aE1pbnVzQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhieXRlcywgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgbiArPSB0aGlzLmJsb2NrU2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPCBvcHRfbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzLmNoYXJDb2RlQXQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09IHRoaXMuYmxvY2tTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYnVmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgb3V0ZXIgbG9vcCBzbyB3ZSB1c2UgdGhlIGZ1bGwtYmxvY2sgb3B0aW1pemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8IG9wdF9sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXNbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09IHRoaXMuYmxvY2tTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYnVmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgb3V0ZXIgbG9vcCBzbyB3ZSB1c2UgdGhlIGZ1bGwtYmxvY2sgb3B0aW1pemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSBpbmJ1ZjtcclxuICAgICAgICB0aGlzLnRvdGFsXyArPSBvcHRfbGVuZ3RoO1xyXG4gICAgfTtcclxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cclxuICAgIFNoYTEucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGlnZXN0ID0gW107XHJcbiAgICAgICAgdmFyIHRvdGFsQml0cyA9IHRoaXMudG90YWxfICogODtcclxuICAgICAgICAvLyBBZGQgcGFkIDB4ODAgMHgwMCouXHJcbiAgICAgICAgaWYgKHRoaXMuaW5idWZfIDwgNTYpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy5wYWRfLCA1NiAtIHRoaXMuaW5idWZfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgdGhpcy5ibG9ja1NpemUgLSAodGhpcy5pbmJ1Zl8gLSA1NikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgIyBiaXRzLlxyXG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmJsb2NrU2l6ZSAtIDE7IGkgPj0gNTY7IGktLSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1Zl9baV0gPSB0b3RhbEJpdHMgJiAyNTU7XHJcbiAgICAgICAgICAgIHRvdGFsQml0cyAvPSAyNTY7IC8vIERvbid0IHVzZSBiaXQtc2hpZnRpbmcgaGVyZSFcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb21wcmVzc18odGhpcy5idWZfKTtcclxuICAgICAgICB2YXIgbiA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xyXG4gICAgICAgICAgICAgICAgZGlnZXN0W25dID0gKHRoaXMuY2hhaW5fW2ldID4+IGopICYgMjU1O1xyXG4gICAgICAgICAgICAgICAgKytuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkaWdlc3Q7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNoYTE7XHJcbn0oSGFzaCkpO1xuXG4vKipcclxuICogSGVscGVyIHRvIG1ha2UgYSBTdWJzY3JpYmUgZnVuY3Rpb24gKGp1c3QgbGlrZSBQcm9taXNlIGhlbHBzIG1ha2UgYVxyXG4gKiBUaGVuYWJsZSkuXHJcbiAqXHJcbiAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxyXG4gKiAgICAgYXMgYSBwcm94eS5cclxuICogQHBhcmFtIG9uTm9PYnNlcnZlcnMgQ2FsbGJhY2sgd2hlbiBjb3VudCBvZiBPYnNlcnZlcnMgZ29lcyB0byB6ZXJvLlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlU3Vic2NyaWJlKGV4ZWN1dG9yLCBvbk5vT2JzZXJ2ZXJzKSB7XHJcbiAgICB2YXIgcHJveHkgPSBuZXcgT2JzZXJ2ZXJQcm94eShleGVjdXRvciwgb25Ob09ic2VydmVycyk7XHJcbiAgICByZXR1cm4gcHJveHkuc3Vic2NyaWJlLmJpbmQocHJveHkpO1xyXG59XHJcbi8qKlxyXG4gKiBJbXBsZW1lbnQgZmFuLW91dCBmb3IgYW55IG51bWJlciBvZiBPYnNlcnZlcnMgYXR0YWNoZWQgdmlhIGEgc3Vic2NyaWJlXHJcbiAqIGZ1bmN0aW9uLlxyXG4gKi9cclxudmFyIE9ic2VydmVyUHJveHkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxyXG4gICAgICogICAgIGFzIGEgcHJveHkuXHJcbiAgICAgKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIE9ic2VydmVyUHJveHkoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgPSAwO1xyXG4gICAgICAgIC8vIE1pY3JvLXRhc2sgc2NoZWR1bGluZyBieSBjYWxsaW5nIHRhc2sudGhlbigpLlxyXG4gICAgICAgIHRoaXMudGFzayA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gb25Ob09ic2VydmVycztcclxuICAgICAgICAvLyBDYWxsIHRoZSBleGVjdXRvciBhc3luY2hyb25vdXNseSBzbyBzdWJzY3JpYmVycyB0aGF0IGFyZSBjYWxsZWRcclxuICAgICAgICAvLyBzeW5jaHJvbm91c2x5IGFmdGVyIHRoZSBjcmVhdGlvbiBvZiB0aGUgc3Vic2NyaWJlIGZ1bmN0aW9uXHJcbiAgICAgICAgLy8gY2FuIHN0aWxsIHJlY2VpdmUgdGhlIHZlcnkgZmlyc3QgdmFsdWUgZ2VuZXJhdGVkIGluIHRoZSBleGVjdXRvci5cclxuICAgICAgICB0aGlzLnRhc2tcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBleGVjdXRvcihfdGhpcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmVycm9yKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3Vic2NyaWJlIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gYWRkIGFuIE9ic2VydmVyIHRvIHRoZSBmYW4tb3V0IGxpc3QuXHJcbiAgICAgKlxyXG4gICAgICogLSBXZSByZXF1aXJlIHRoYXQgbm8gZXZlbnQgaXMgc2VudCB0byBhIHN1YnNjcmliZXIgc3ljaHJvbm91c2x5IHRvIHRoZWlyXHJcbiAgICAgKiAgIGNhbGwgdG8gc3Vic2NyaWJlKCkuXHJcbiAgICAgKi9cclxuICAgIE9ic2VydmVyUHJveHkucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgb2JzZXJ2ZXI7XHJcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyID09PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgZXJyb3IgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBjb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBPYnNlcnZlci4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXNzZW1ibGUgYW4gT2JzZXJ2ZXIgb2JqZWN0IHdoZW4gcGFzc2VkIGFzIGNhbGxiYWNrIGZ1bmN0aW9ucy5cclxuICAgICAgICBpZiAoaW1wbGVtZW50c0FueU1ldGhvZHMobmV4dE9yT2JzZXJ2ZXIsIFsnbmV4dCcsICdlcnJvcicsICdjb21wbGV0ZSddKSkge1xyXG4gICAgICAgICAgICBvYnNlcnZlciA9IG5leHRPck9ic2VydmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0OiBuZXh0T3JPYnNlcnZlcixcclxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JzZXJ2ZXIuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvciA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5jb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHVuc3ViID0gdGhpcy51bnN1YnNjcmliZU9uZS5iaW5kKHRoaXMsIHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCk7XHJcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBzdWJzY3JpYmUgdG8gYSB0ZXJtaW5hdGVkIE9ic2VydmFibGUgLSB3ZVxyXG4gICAgICAgIC8vIGp1c3QgcmVzcG9uZCB0byB0aGUgT2JzZXJ2ZXIgd2l0aCB0aGUgZmluYWwgZXJyb3Igb3IgY29tcGxldGVcclxuICAgICAgICAvLyBldmVudC5cclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy50YXNrLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZmluYWxFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihfdGhpcy5maW5hbEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBub3RoaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcclxuICAgICAgICByZXR1cm4gdW5zdWI7XHJcbiAgICB9O1xyXG4gICAgLy8gVW5zdWJzY3JpYmUgaXMgc3luY2hyb25vdXMgLSB3ZSBndWFyYW50ZWUgdGhhdCBubyBldmVudHMgYXJlIHNlbnQgdG9cclxuICAgIC8vIGFueSB1bnN1YnNjcmliZWQgT2JzZXJ2ZXIuXHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS51bnN1YnNjcmliZU9uZSA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzID09PSB1bmRlZmluZWQgfHwgdGhpcy5vYnNlcnZlcnNbaV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tpXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgLT0gMTtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlckNvdW50ID09PSAwICYmIHRoaXMub25Ob09ic2VydmVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuZm9yRWFjaE9ic2VydmVyID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIC8vIEFscmVhZHkgY2xvc2VkIGJ5IHByZXZpb3VzIGV2ZW50Li4uLmp1c3QgZWF0IHRoZSBhZGRpdGlvbmFsIHZhbHVlcy5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTaW5jZSBzZW5kT25lIGNhbGxzIGFzeW5jaHJvbm91c2x5IC0gdGhlcmUgaXMgbm8gY2hhbmNlIHRoYXRcclxuICAgICAgICAvLyB0aGlzLm9ic2VydmVycyB3aWxsIGJlY29tZSB1bmRlZmluZWQuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9ic2VydmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRPbmUoaSwgZm4pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBDYWxsIHRoZSBPYnNlcnZlciB2aWEgb25lIG9mIGl0J3MgY2FsbGJhY2sgZnVuY3Rpb24uIFdlIGFyZSBjYXJlZnVsIHRvXHJcbiAgICAvLyBjb25maXJtIHRoYXQgdGhlIG9ic2VydmUgaGFzIG5vdCBiZWVuIHVuc3Vic2NyaWJlZCBzaW5jZSB0aGlzIGFzeW5jaHJvbm91c1xyXG4gICAgLy8gZnVuY3Rpb24gaGFkIGJlZW4gcXVldWVkLlxyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuc2VuZE9uZSA9IGZ1bmN0aW9uIChpLCBmbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgY2FsbGJhY2sgYXN5bmNocm9ub3VzbHlcclxuICAgICAgICB0aGlzLnRhc2sudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5vYnNlcnZlcnMgIT09IHVuZGVmaW5lZCAmJiBfdGhpcy5vYnNlcnZlcnNbaV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmbihfdGhpcy5vYnNlcnZlcnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgZXhjZXB0aW9ucyByYWlzZWQgaW4gT2JzZXJ2ZXJzIG9yIG1pc3NpbmcgbWV0aG9kcyBvZiBhblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9ic2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExvZyBlcnJvciB0byBjb25zb2xlLiBiLzMxNDA0ODA2XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGVyciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluYWxFcnJvciA9IGVycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJveHkgaXMgbm8gbG9uZ2VyIG5lZWRlZCAtIGdhcmJhZ2UgY29sbGVjdCByZWZlcmVuY2VzXHJcbiAgICAgICAgdGhpcy50YXNrLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIF90aGlzLm9uTm9PYnNlcnZlcnMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ic2VydmVyUHJveHk7XHJcbn0oKSk7XHJcbi8qKiBUdXJuIHN5bmNocm9ub3VzIGZ1bmN0aW9uIGludG8gb25lIGNhbGxlZCBhc3luY2hyb25vdXNseS4gKi9cclxuZnVuY3Rpb24gYXN5bmMoZm4sIG9uRXJyb3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh0cnVlKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAob25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybiB0cnVlIGlmIHRoZSBvYmplY3QgcGFzc2VkIGluIGltcGxlbWVudHMgYW55IG9mIHRoZSBuYW1lZCBtZXRob2RzLlxyXG4gKi9cclxuZnVuY3Rpb24gaW1wbGVtZW50c0FueU1ldGhvZHMob2JqLCBtZXRob2RzKSB7XHJcbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBtZXRob2RzXzEgPSBtZXRob2RzOyBfaSA8IG1ldGhvZHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgbWV0aG9kID0gbWV0aG9kc18xW19pXTtcclxuICAgICAgICBpZiAobWV0aG9kIGluIG9iaiAmJiB0eXBlb2Ygb2JqW21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIG5vb3AoKSB7XHJcbiAgICAvLyBkbyBub3RoaW5nXHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDaGVjayB0byBtYWtlIHN1cmUgdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIGZvciBhIHB1YmxpYyBmdW5jdGlvbi5cclxuICogVGhyb3dzIGFuIGVycm9yIGlmIGl0IGZhaWxzLlxyXG4gKlxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IGZuTmFtZSBUaGUgZnVuY3Rpb24gbmFtZVxyXG4gKiBAcGFyYW0geyFudW1iZXJ9IG1pbkNvdW50IFRoZSBtaW5pbXVtIG51bWJlciBvZiBhcmd1bWVudHMgdG8gYWxsb3cgZm9yIHRoZSBmdW5jdGlvbiBjYWxsXHJcbiAqIEBwYXJhbSB7IW51bWJlcn0gbWF4Q291bnQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50IHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0geyFudW1iZXJ9IGFyZ0NvdW50IFRoZSBhY3R1YWwgbnVtYmVyIG9mIGFyZ3VtZW50cyBwcm92aWRlZC5cclxuICovXHJcbnZhciB2YWxpZGF0ZUFyZ0NvdW50ID0gZnVuY3Rpb24gKGZuTmFtZSwgbWluQ291bnQsIG1heENvdW50LCBhcmdDb3VudCkge1xyXG4gICAgdmFyIGFyZ0Vycm9yO1xyXG4gICAgaWYgKGFyZ0NvdW50IDwgbWluQ291bnQpIHtcclxuICAgICAgICBhcmdFcnJvciA9ICdhdCBsZWFzdCAnICsgbWluQ291bnQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhcmdDb3VudCA+IG1heENvdW50KSB7XHJcbiAgICAgICAgYXJnRXJyb3IgPSBtYXhDb3VudCA9PT0gMCA/ICdub25lJyA6ICdubyBtb3JlIHRoYW4gJyArIG1heENvdW50O1xyXG4gICAgfVxyXG4gICAgaWYgKGFyZ0Vycm9yKSB7XHJcbiAgICAgICAgdmFyIGVycm9yID0gZm5OYW1lICtcclxuICAgICAgICAgICAgJyBmYWlsZWQ6IFdhcyBjYWxsZWQgd2l0aCAnICtcclxuICAgICAgICAgICAgYXJnQ291bnQgK1xyXG4gICAgICAgICAgICAoYXJnQ291bnQgPT09IDEgPyAnIGFyZ3VtZW50LicgOiAnIGFyZ3VtZW50cy4nKSArXHJcbiAgICAgICAgICAgICcgRXhwZWN0cyAnICtcclxuICAgICAgICAgICAgYXJnRXJyb3IgK1xyXG4gICAgICAgICAgICAnLic7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHN0cmluZyB0byBwcmVmaXggYW4gZXJyb3IgbWVzc2FnZSBhYm91dCBmYWlsZWQgYXJndW1lbnQgdmFsaWRhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IGZuTmFtZSBUaGUgZnVuY3Rpb24gbmFtZVxyXG4gKiBAcGFyYW0geyFudW1iZXJ9IGFyZ3VtZW50TnVtYmVyIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnRcclxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb25hbCBXaGV0aGVyIG9yIG5vdCB0aGUgYXJndW1lbnQgaXMgb3B0aW9uYWxcclxuICogQHJldHVybiB7IXN0cmluZ30gVGhlIHByZWZpeCB0byBhZGQgdG8gdGhlIGVycm9yIHRocm93biBmb3IgdmFsaWRhdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKSB7XHJcbiAgICB2YXIgYXJnTmFtZSA9ICcnO1xyXG4gICAgc3dpdGNoIChhcmd1bWVudE51bWJlcikge1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgYXJnTmFtZSA9IG9wdGlvbmFsID8gJ2ZpcnN0JyA6ICdGaXJzdCc7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgYXJnTmFtZSA9IG9wdGlvbmFsID8gJ3NlY29uZCcgOiAnU2Vjb25kJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICBhcmdOYW1lID0gb3B0aW9uYWwgPyAndGhpcmQnIDogJ1RoaXJkJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICBhcmdOYW1lID0gb3B0aW9uYWwgPyAnZm91cnRoJyA6ICdGb3VydGgnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Vycm9yUHJlZml4IGNhbGxlZCB3aXRoIGFyZ3VtZW50TnVtYmVyID4gNC4gIE5lZWQgdG8gdXBkYXRlIGl0PycpO1xyXG4gICAgfVxyXG4gICAgdmFyIGVycm9yID0gZm5OYW1lICsgJyBmYWlsZWQ6ICc7XHJcbiAgICBlcnJvciArPSBhcmdOYW1lICsgJyBhcmd1bWVudCAnO1xyXG4gICAgcmV0dXJuIGVycm9yO1xyXG59XHJcbi8qKlxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IGZuTmFtZVxyXG4gKiBAcGFyYW0geyFudW1iZXJ9IGFyZ3VtZW50TnVtYmVyXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9uYWxcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlTmFtZXNwYWNlKGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG5hbWVzcGFjZSwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhbmFtZXNwYWNlKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIC8vVE9ETzogSSBzaG91bGQgZG8gbW9yZSB2YWxpZGF0aW9uIGhlcmUuIFdlIG9ubHkgYWxsb3cgY2VydGFpbiBjaGFycyBpbiBuYW1lc3BhY2VzLlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgK1xyXG4gICAgICAgICAgICAnbXVzdCBiZSBhIHZhbGlkIGZpcmViYXNlIG5hbWVzcGFjZS4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZUNhbGxiYWNrKGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIGNhbGxiYWNrLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjYWxsYmFjaylcclxuICAgICAgICByZXR1cm47XHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgK1xyXG4gICAgICAgICAgICAnbXVzdCBiZSBhIHZhbGlkIGZ1bmN0aW9uLicpO1xyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQ29udGV4dE9iamVjdChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBjb250ZXh0LCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjb250ZXh0KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGlmICh0eXBlb2YgY29udGV4dCAhPT0gJ29iamVjdCcgfHwgY29udGV4dCA9PT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpICtcclxuICAgICAgICAgICAgJ211c3QgYmUgYSB2YWxpZCBjb250ZXh0IG9iamVjdC4nKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gQ29kZSBvcmlnaW5hbGx5IGNhbWUgZnJvbSBnb29nLmNyeXB0LnN0cmluZ1RvVXRmOEJ5dGVBcnJheSwgYnV0IGZvciBzb21lIHJlYXNvbiB0aGV5XHJcbi8vIGF1dG9tYXRpY2FsbHkgcmVwbGFjZWQgJ1xcclxcbicgd2l0aCAnXFxuJywgYW5kIHRoZXkgZGlkbid0IGhhbmRsZSBzdXJyb2dhdGUgcGFpcnMsXHJcbi8vIHNvIGl0J3MgYmVlbiBtb2RpZmllZC5cclxuLy8gTm90ZSB0aGF0IG5vdCBhbGwgVW5pY29kZSBjaGFyYWN0ZXJzIGFwcGVhciBhcyBzaW5nbGUgY2hhcmFjdGVycyBpbiBKYXZhU2NyaXB0IHN0cmluZ3MuXHJcbi8vIGZyb21DaGFyQ29kZSByZXR1cm5zIHRoZSBVVEYtMTYgZW5jb2Rpbmcgb2YgYSBjaGFyYWN0ZXIgLSBzbyBzb21lIFVuaWNvZGUgY2hhcmFjdGVyc1xyXG4vLyB1c2UgMiBjaGFyYWN0ZXJzIGluIEphdmFzY3JpcHQuICBBbGwgNC1ieXRlIFVURi04IGNoYXJhY3RlcnMgYmVnaW4gd2l0aCBhIGZpcnN0XHJcbi8vIGNoYXJhY3RlciBpbiB0aGUgcmFuZ2UgMHhEODAwIC0gMHhEQkZGICh0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc28tY2FsbGVkIHN1cnJvZ2F0ZVxyXG4vLyBwYWlyKS5cclxuLy8gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS4xLjNcclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqL1xyXG52YXIgc3RyaW5nVG9CeXRlQXJyYXkkMSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHZhciBvdXQgPSBbXSwgcCA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgLy8gSXMgdGhpcyB0aGUgbGVhZCBzdXJyb2dhdGUgaW4gYSBzdXJyb2dhdGUgcGFpcj9cclxuICAgICAgICBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgdmFyIGhpZ2ggPSBjIC0gMHhkODAwOyAvLyB0aGUgaGlnaCAxMCBiaXRzLlxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIGFzc2VydChpIDwgc3RyLmxlbmd0aCwgJ1N1cnJvZ2F0ZSBwYWlyIG1pc3NpbmcgdHJhaWwgc3Vycm9nYXRlLicpO1xyXG4gICAgICAgICAgICB2YXIgbG93ID0gc3RyLmNoYXJDb2RlQXQoaSkgLSAweGRjMDA7IC8vIHRoZSBsb3cgMTAgYml0cy5cclxuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoaGlnaCA8PCAxMCkgKyBsb3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDY1NTM2KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTIpIHwgMjI0O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTgpIHwgMjQwO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQ7XHJcbn07XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgbGVuZ3RoIHdpdGhvdXQgYWN0dWFsbHkgY29udmVydGluZzsgdXNlZnVsIGZvciBkb2luZyBjaGVhcGVyIHZhbGlkYXRpb24uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cclxudmFyIHN0cmluZ0xlbmd0aCA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHZhciBwID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBwKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIHAgKz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgLy8gTGVhZCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci4gIFRoZSBwYWlyIHRvZ2V0aGVyIHdpbGwgdGFrZSA0IGJ5dGVzIHRvIHJlcHJlc2VudC5cclxuICAgICAgICAgICAgcCArPSA0O1xyXG4gICAgICAgICAgICBpKys7IC8vIHNraXAgdHJhaWwgc3Vycm9nYXRlLlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcCArPSAzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cblxuZXhwb3J0cy5hc3NlcnQgPSBhc3NlcnQ7XG5leHBvcnRzLmFzc2VydGlvbkVycm9yID0gYXNzZXJ0aW9uRXJyb3I7XG5leHBvcnRzLmJhc2U2NCA9IGJhc2U2NDtcbmV4cG9ydHMuYmFzZTY0RGVjb2RlID0gYmFzZTY0RGVjb2RlO1xuZXhwb3J0cy5iYXNlNjRFbmNvZGUgPSBiYXNlNjRFbmNvZGU7XG5leHBvcnRzLkNPTlNUQU5UUyA9IENPTlNUQU5UUztcbmV4cG9ydHMuZGVlcENvcHkgPSBkZWVwQ29weTtcbmV4cG9ydHMuZGVlcEV4dGVuZCA9IGRlZXBFeHRlbmQ7XG5leHBvcnRzLnBhdGNoUHJvcGVydHkgPSBwYXRjaFByb3BlcnR5O1xuZXhwb3J0cy5EZWZlcnJlZCA9IERlZmVycmVkO1xuZXhwb3J0cy5nZXRVQSA9IGdldFVBO1xuZXhwb3J0cy5pc01vYmlsZUNvcmRvdmEgPSBpc01vYmlsZUNvcmRvdmE7XG5leHBvcnRzLmlzTm9kZVNkayA9IGlzTm9kZVNkaztcbmV4cG9ydHMuaXNSZWFjdE5hdGl2ZSA9IGlzUmVhY3ROYXRpdmU7XG5leHBvcnRzLkVycm9yRmFjdG9yeSA9IEVycm9yRmFjdG9yeTtcbmV4cG9ydHMuRmlyZWJhc2VFcnJvciA9IEZpcmViYXNlRXJyb3I7XG5leHBvcnRzLnBhdGNoQ2FwdHVyZSA9IHBhdGNoQ2FwdHVyZTtcbmV4cG9ydHMuanNvbkV2YWwgPSBqc29uRXZhbDtcbmV4cG9ydHMuc3RyaW5naWZ5ID0gc3RyaW5naWZ5O1xuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG5leHBvcnRzLmlzQWRtaW4gPSBpc0FkbWluO1xuZXhwb3J0cy5pc3N1ZWRBdFRpbWUgPSBpc3N1ZWRBdFRpbWU7XG5leHBvcnRzLmlzVmFsaWRGb3JtYXQgPSBpc1ZhbGlkRm9ybWF0O1xuZXhwb3J0cy5pc1ZhbGlkVGltZXN0YW1wID0gaXNWYWxpZFRpbWVzdGFtcDtcbmV4cG9ydHMuY2xvbmUgPSBjbG9uZTtcbmV4cG9ydHMuY29udGFpbnMgPSBjb250YWlucztcbmV4cG9ydHMuZXZlcnkgPSBldmVyeTtcbmV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kO1xuZXhwb3J0cy5maW5kS2V5ID0gZmluZEtleTtcbmV4cG9ydHMuZmluZFZhbHVlID0gZmluZFZhbHVlO1xuZXhwb3J0cy5mb3JFYWNoID0gZm9yRWFjaDtcbmV4cG9ydHMuZ2V0QW55S2V5ID0gZ2V0QW55S2V5O1xuZXhwb3J0cy5nZXRDb3VudCA9IGdldENvdW50O1xuZXhwb3J0cy5nZXRWYWx1ZXMgPSBnZXRWYWx1ZXM7XG5leHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xuZXhwb3J0cy5pc05vbk51bGxPYmplY3QgPSBpc05vbk51bGxPYmplY3Q7XG5leHBvcnRzLm1hcCA9IG1hcDtcbmV4cG9ydHMuc2FmZUdldCA9IHNhZmVHZXQ7XG5leHBvcnRzLnF1ZXJ5c3RyaW5nID0gcXVlcnlzdHJpbmc7XG5leHBvcnRzLnF1ZXJ5c3RyaW5nRGVjb2RlID0gcXVlcnlzdHJpbmdEZWNvZGU7XG5leHBvcnRzLlNoYTEgPSBTaGExO1xuZXhwb3J0cy5hc3luYyA9IGFzeW5jO1xuZXhwb3J0cy5jcmVhdGVTdWJzY3JpYmUgPSBjcmVhdGVTdWJzY3JpYmU7XG5leHBvcnRzLmVycm9yUHJlZml4ID0gZXJyb3JQcmVmaXg7XG5leHBvcnRzLnZhbGlkYXRlQXJnQ291bnQgPSB2YWxpZGF0ZUFyZ0NvdW50O1xuZXhwb3J0cy52YWxpZGF0ZUNhbGxiYWNrID0gdmFsaWRhdGVDYWxsYmFjaztcbmV4cG9ydHMudmFsaWRhdGVDb250ZXh0T2JqZWN0ID0gdmFsaWRhdGVDb250ZXh0T2JqZWN0O1xuZXhwb3J0cy52YWxpZGF0ZU5hbWVzcGFjZSA9IHZhbGlkYXRlTmFtZXNwYWNlO1xuZXhwb3J0cy5zdHJpbmdMZW5ndGggPSBzdHJpbmdMZW5ndGg7XG5leHBvcnRzLnN0cmluZ1RvQnl0ZUFycmF5ID0gc3RyaW5nVG9CeXRlQXJyYXkkMTtcbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIGlmIChlLmluZGV4T2YocFtpXSkgPCAwKVxyXG4gICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0geVtvcFswXSAmIDIgPyBcInJldHVyblwiIDogb3BbMF0gPyBcInRocm93XCIgOiBcIm5leHRcIl0pICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gWzAsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7ICB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAob1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG4iLCJpbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5pbXBvcnQgJ3Byb21pc2UtcG9seWZpbGwvbGliL3BvbHlmaWxsJztcbmltcG9ydCAnY29yZS1qcy9mbi9hcnJheS9maW5kJztcbmltcG9ydCAnY29yZS1qcy9mbi9hcnJheS9maW5kLWluZGV4JztcbmltcG9ydCAnY29yZS1qcy9mbi9vYmplY3QvYXNzaWduJztcbmltcG9ydCAnY29yZS1qcy9mbi9zdHJpbmcvc3RhcnRzLXdpdGgnO1xuaW1wb3J0ICdjb3JlLWpzL2ZuL3N0cmluZy9yZXBlYXQnO1xuaW1wb3J0ICdjb3JlLWpzL2ZuL3N5bWJvbCc7XG5pbXBvcnQgJ2NvcmUtanMvZm4vc3ltYm9sL2l0ZXJhdG9yJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXG4iLCIoZnVuY3Rpb24oc2VsZikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKHNlbGYuZmV0Y2gpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdXBwb3J0ID0ge1xuICAgIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgICBibG9iOiAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJiAnQmxvYicgaW4gc2VsZiAmJiAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICAgIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbiAgfVxuXG4gIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gICAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gICAgXVxuXG4gICAgdmFyIGlzRGF0YVZpZXcgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxuICAgIH1cblxuICAgIHZhciBpc0FycmF5QnVmZmVyVmlldyA9IEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgICB9XG4gICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXFxeX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9XG5cbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgICAgfSwgdGhpcylcbiAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXVxuICAgIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSsnLCcrdmFsdWUgOiB2YWx1ZVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChuYW1lKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IGl0ZW1zLnB1c2godmFsdWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdXG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgICB9XG4gICAgYm9keS5ib2R5VXNlZCA9IHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICAgIH1cbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpXG4gICAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGFyc1tpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUodmlld1tpXSlcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG4gIH1cblxuICBmdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgICByZXR1cm4gYnVmLnNsaWNlKDApXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKVxuICAgICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gQm9keSgpIHtcbiAgICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICAgIH1cbiAgICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgICB9XG4gICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICAgIH1cblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ29taXQnXG4gICAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICAgIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICAgIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXG4gICAgfVxuICAgIHRoaXMuX2luaXRCb2R5KGJvZHkpXG4gIH1cblxuICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7IGJvZHk6IHRoaXMuX2JvZHlJbml0IH0pXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gICAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gICAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gaGVhZGVyc1xuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSydcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICAgIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9XG5cbiAgUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICB2YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuICB9XG5cbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxuXG4gIHNlbGYuZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfVxuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuXG4gICAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICAgIH0pXG4gIH1cbiAgc2VsZi5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gU3RvcmUgc2V0VGltZW91dCByZWZlcmVuY2Ugc28gcHJvbWlzZS1wb2x5ZmlsbCB3aWxsIGJlIHVuYWZmZWN0ZWQgYnlcbi8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxudmFyIHNldFRpbWVvdXRGdW5jID0gc2V0VGltZW91dDtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8vIFBvbHlmaWxsIGZvciBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvbWlzZShmbikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSkpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZXMgbXVzdCBiZSBjb25zdHJ1Y3RlZCB2aWEgbmV3Jyk7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIGZ1bmN0aW9uJyk7XG4gIHRoaXMuX3N0YXRlID0gMDtcbiAgdGhpcy5faGFuZGxlZCA9IGZhbHNlO1xuICB0aGlzLl92YWx1ZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fZGVmZXJyZWRzID0gW107XG5cbiAgZG9SZXNvbHZlKGZuLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlKHNlbGYsIGRlZmVycmVkKSB7XG4gIHdoaWxlIChzZWxmLl9zdGF0ZSA9PT0gMykge1xuICAgIHNlbGYgPSBzZWxmLl92YWx1ZTtcbiAgfVxuICBpZiAoc2VsZi5fc3RhdGUgPT09IDApIHtcbiAgICBzZWxmLl9kZWZlcnJlZHMucHVzaChkZWZlcnJlZCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNlbGYuX2hhbmRsZWQgPSB0cnVlO1xuICBQcm9taXNlLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpIHtcbiAgICB2YXIgY2IgPSBzZWxmLl9zdGF0ZSA9PT0gMSA/IGRlZmVycmVkLm9uRnVsZmlsbGVkIDogZGVmZXJyZWQub25SZWplY3RlZDtcbiAgICBpZiAoY2IgPT09IG51bGwpIHtcbiAgICAgIChzZWxmLl9zdGF0ZSA9PT0gMSA/IHJlc29sdmUgOiByZWplY3QpKGRlZmVycmVkLnByb21pc2UsIHNlbGYuX3ZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJldDtcbiAgICB0cnkge1xuICAgICAgcmV0ID0gY2Ioc2VsZi5fdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJlamVjdChkZWZlcnJlZC5wcm9taXNlLCBlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVzb2x2ZShkZWZlcnJlZC5wcm9taXNlLCByZXQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZShzZWxmLCBuZXdWYWx1ZSkge1xuICB0cnkge1xuICAgIC8vIFByb21pc2UgUmVzb2x1dGlvbiBQcm9jZWR1cmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9taXNlcy1hcGx1cy9wcm9taXNlcy1zcGVjI3RoZS1wcm9taXNlLXJlc29sdXRpb24tcHJvY2VkdXJlXG4gICAgaWYgKG5ld1ZhbHVlID09PSBzZWxmKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi4nKTtcbiAgICBpZiAoXG4gICAgICBuZXdWYWx1ZSAmJlxuICAgICAgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG5ld1ZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICkge1xuICAgICAgdmFyIHRoZW4gPSBuZXdWYWx1ZS50aGVuO1xuICAgICAgaWYgKG5ld1ZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBzZWxmLl9zdGF0ZSA9IDM7XG4gICAgICAgIHNlbGYuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIGZpbmFsZShzZWxmKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkb1Jlc29sdmUoYmluZCh0aGVuLCBuZXdWYWx1ZSksIHNlbGYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGYuX3N0YXRlID0gMTtcbiAgICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGZpbmFsZShzZWxmKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlamVjdChzZWxmLCBlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWplY3Qoc2VsZiwgbmV3VmFsdWUpIHtcbiAgc2VsZi5fc3RhdGUgPSAyO1xuICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICBmaW5hbGUoc2VsZik7XG59XG5cbmZ1bmN0aW9uIGZpbmFsZShzZWxmKSB7XG4gIGlmIChzZWxmLl9zdGF0ZSA9PT0gMiAmJiBzZWxmLl9kZWZlcnJlZHMubGVuZ3RoID09PSAwKSB7XG4gICAgUHJvbWlzZS5faW1tZWRpYXRlRm4oZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXNlbGYuX2hhbmRsZWQpIHtcbiAgICAgICAgUHJvbWlzZS5fdW5oYW5kbGVkUmVqZWN0aW9uRm4oc2VsZi5fdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNlbGYuX2RlZmVycmVkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGhhbmRsZShzZWxmLCBzZWxmLl9kZWZlcnJlZHNbaV0pO1xuICB9XG4gIHNlbGYuX2RlZmVycmVkcyA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIEhhbmRsZXIob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb21pc2UpIHtcbiAgdGhpcy5vbkZ1bGZpbGxlZCA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogbnVsbDtcbiAgdGhpcy5vblJlamVjdGVkID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT09ICdmdW5jdGlvbicgPyBvblJlamVjdGVkIDogbnVsbDtcbiAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbn1cblxuLyoqXG4gKiBUYWtlIGEgcG90ZW50aWFsbHkgbWlzYmVoYXZpbmcgcmVzb2x2ZXIgZnVuY3Rpb24gYW5kIG1ha2Ugc3VyZVxuICogb25GdWxmaWxsZWQgYW5kIG9uUmVqZWN0ZWQgYXJlIG9ubHkgY2FsbGVkIG9uY2UuXG4gKlxuICogTWFrZXMgbm8gZ3VhcmFudGVlcyBhYm91dCBhc3luY2hyb255LlxuICovXG5mdW5jdGlvbiBkb1Jlc29sdmUoZm4sIHNlbGYpIHtcbiAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBmbihcbiAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICByZXNvbHZlKHNlbGYsIHZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIHJlamVjdChzZWxmLCByZWFzb24pO1xuICAgICAgfVxuICAgICk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICByZWplY3Qoc2VsZiwgZXgpO1xuICB9XG59XG5cblByb21pc2UucHJvdG90eXBlWydjYXRjaCddID0gZnVuY3Rpb24ob25SZWplY3RlZCkge1xuICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0ZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIHZhciBwcm9tID0gbmV3IHRoaXMuY29uc3RydWN0b3Iobm9vcCk7XG5cbiAgaGFuZGxlKHRoaXMsIG5ldyBIYW5kbGVyKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9tKSk7XG4gIHJldHVybiBwcm9tO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBjb25zdHJ1Y3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY29uc3RydWN0b3IucmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG59O1xuXG5Qcm9taXNlLmFsbCA9IGZ1bmN0aW9uKGFycikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKCFhcnIgfHwgdHlwZW9mIGFyci5sZW5ndGggPT09ICd1bmRlZmluZWQnKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZS5hbGwgYWNjZXB0cyBhbiBhcnJheScpO1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKTtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiByZXNvbHZlKFtdKTtcbiAgICB2YXIgcmVtYWluaW5nID0gYXJncy5sZW5ndGg7XG5cbiAgICBmdW5jdGlvbiByZXMoaSwgdmFsKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodmFsICYmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgIHZhciB0aGVuID0gdmFsLnRoZW47XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwoXG4gICAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgICAgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgcmVzKGksIHZhbCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXJnc1tpXSA9IHZhbDtcbiAgICAgICAgaWYgKC0tcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgcmVzb2x2ZShhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgcmVqZWN0KGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlcyhpLCBhcmdzW2ldKTtcbiAgICB9XG4gIH0pO1xufTtcblxuUHJvbWlzZS5yZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IFByb21pc2UpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9KTtcbn07XG5cblByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlamVjdCh2YWx1ZSk7XG4gIH0pO1xufTtcblxuUHJvbWlzZS5yYWNlID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsdWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0udGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vLyBVc2UgcG9seWZpbGwgZm9yIHNldEltbWVkaWF0ZSBmb3IgcGVyZm9ybWFuY2UgZ2FpbnNcblByb21pc2UuX2ltbWVkaWF0ZUZuID1cbiAgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicgJiZcbiAgICBmdW5jdGlvbihmbikge1xuICAgICAgc2V0SW1tZWRpYXRlKGZuKTtcbiAgICB9KSB8fFxuICBmdW5jdGlvbihmbikge1xuICAgIHNldFRpbWVvdXRGdW5jKGZuLCAwKTtcbiAgfTtcblxuUHJvbWlzZS5fdW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmdW5jdGlvbiBfdW5oYW5kbGVkUmVqZWN0aW9uRm4oZXJyKSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSkge1xuICAgIGNvbnNvbGUud2FybignUG9zc2libGUgVW5oYW5kbGVkIFByb21pc2UgUmVqZWN0aW9uOicsIGVycik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG59O1xuXG52YXIgZ2xvYmFsTlMgPSAoZnVuY3Rpb24oKSB7XG4gIC8vIHRoZSBvbmx5IHJlbGlhYmxlIG1lYW5zIHRvIGdldCB0aGUgZ2xvYmFsIG9iamVjdCBpc1xuICAvLyBgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKWBcbiAgLy8gSG93ZXZlciwgdGhpcyBjYXVzZXMgQ1NQIHZpb2xhdGlvbnMgaW4gQ2hyb21lIGFwcHMuXG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QnKTtcbn0pKCk7XG5cbmlmICghZ2xvYmFsTlMuUHJvbWlzZSkge1xuICBnbG9iYWxOUy5Qcm9taXNlID0gUHJvbWlzZTtcbn1cbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZmluZDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5maW5kSW5kZXg7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuYXNzaWduO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnN0YXJ0c1dpdGg7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5yZXBlYXQ7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiaW1wb3J0IGZpcmViYXNlIGZyb20gJ0BmaXJlYmFzZS9hcHAnOyhmdW5jdGlvbigpIHt2YXIgZyxhYT1hYXx8e30saz10aGlzO2Z1bmN0aW9uIGwoYSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGF9ZnVuY3Rpb24gYmEoYSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBhfWZ1bmN0aW9uIGNhKCl7fVxuZnVuY3Rpb24gZGEoYSl7dmFyIGI9dHlwZW9mIGE7aWYoXCJvYmplY3RcIj09YilpZihhKXtpZihhIGluc3RhbmNlb2YgQXJyYXkpcmV0dXJuXCJhcnJheVwiO2lmKGEgaW5zdGFuY2VvZiBPYmplY3QpcmV0dXJuIGI7dmFyIGM9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpO2lmKFwiW29iamVjdCBXaW5kb3ddXCI9PWMpcmV0dXJuXCJvYmplY3RcIjtpZihcIltvYmplY3QgQXJyYXldXCI9PWN8fFwibnVtYmVyXCI9PXR5cGVvZiBhLmxlbmd0aCYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuc3BsaWNlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5wcm9wZXJ0eUlzRW51bWVyYWJsZSYmIWEucHJvcGVydHlJc0VudW1lcmFibGUoXCJzcGxpY2VcIikpcmV0dXJuXCJhcnJheVwiO2lmKFwiW29iamVjdCBGdW5jdGlvbl1cIj09Y3x8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuY2FsbCYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEucHJvcGVydHlJc0VudW1lcmFibGUmJiFhLnByb3BlcnR5SXNFbnVtZXJhYmxlKFwiY2FsbFwiKSlyZXR1cm5cImZ1bmN0aW9uXCJ9ZWxzZSByZXR1cm5cIm51bGxcIjtcbmVsc2UgaWYoXCJmdW5jdGlvblwiPT1iJiZcInVuZGVmaW5lZFwiPT10eXBlb2YgYS5jYWxsKXJldHVyblwib2JqZWN0XCI7cmV0dXJuIGJ9ZnVuY3Rpb24gZWEoYSl7cmV0dXJuIG51bGw9PT1hfWZ1bmN0aW9uIGZhKGEpe3JldHVyblwiYXJyYXlcIj09ZGEoYSl9ZnVuY3Rpb24gaGEoYSl7dmFyIGI9ZGEoYSk7cmV0dXJuXCJhcnJheVwiPT1ifHxcIm9iamVjdFwiPT1iJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGh9ZnVuY3Rpb24gbihhKXtyZXR1cm5cImZ1bmN0aW9uXCI9PWRhKGEpfWZ1bmN0aW9uIHEoYSl7dmFyIGI9dHlwZW9mIGE7cmV0dXJuXCJvYmplY3RcIj09YiYmbnVsbCE9YXx8XCJmdW5jdGlvblwiPT1ifXZhciBpYT1cImNsb3N1cmVfdWlkX1wiKygxRTkqTWF0aC5yYW5kb20oKT4+PjApLGphPTA7ZnVuY3Rpb24ga2EoYSxiLGMpe3JldHVybiBhLmNhbGwuYXBwbHkoYS5iaW5kLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBtYShhLGIsYyl7aWYoIWEpdGhyb3cgRXJyb3IoKTtpZigyPGFyZ3VtZW50cy5sZW5ndGgpe3ZhciBkPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO0FycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGMsZCk7cmV0dXJuIGEuYXBwbHkoYixjKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYixhcmd1bWVudHMpfX1mdW5jdGlvbiByKGEsYixjKXtGdW5jdGlvbi5wcm90b3R5cGUuYmluZCYmLTEhPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLnRvU3RyaW5nKCkuaW5kZXhPZihcIm5hdGl2ZSBjb2RlXCIpP3I9a2E6cj1tYTtyZXR1cm4gci5hcHBseShudWxsLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBuYShhLGIpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYj1jLnNsaWNlKCk7Yi5wdXNoLmFwcGx5KGIsYXJndW1lbnRzKTtyZXR1cm4gYS5hcHBseSh0aGlzLGIpfX12YXIgb2E9RGF0ZS5ub3d8fGZ1bmN0aW9uKCl7cmV0dXJuK25ldyBEYXRlfTtmdW5jdGlvbiB0KGEsYil7ZnVuY3Rpb24gYygpe31jLnByb3RvdHlwZT1iLnByb3RvdHlwZTthLm9iPWIucHJvdG90eXBlO2EucHJvdG90eXBlPW5ldyBjO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5lZD1mdW5jdGlvbihhLGMsZil7Zm9yKHZhciBkPUFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMiksZT0yO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspZFtlLTJdPWFyZ3VtZW50c1tlXTtyZXR1cm4gYi5wcm90b3R5cGVbY10uYXBwbHkoYSxkKX19O2Z1bmN0aW9uIHBhKGEpe2EucHJvdG90eXBlLnRoZW49YS5wcm90b3R5cGUudGhlbjthLnByb3RvdHlwZS4kZ29vZ19UaGVuYWJsZT0hMH1mdW5jdGlvbiBxYShhKXtpZighYSlyZXR1cm4hMTt0cnl7cmV0dXJuISFhLiRnb29nX1RoZW5hYmxlfWNhdGNoKGIpe3JldHVybiExfX07ZnVuY3Rpb24gdShhKXtpZihFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLHUpO2Vsc2V7dmFyIGI9RXJyb3IoKS5zdGFjaztiJiYodGhpcy5zdGFjaz1iKX1hJiYodGhpcy5tZXNzYWdlPVN0cmluZyhhKSl9dCh1LEVycm9yKTt1LnByb3RvdHlwZS5uYW1lPVwiQ3VzdG9tRXJyb3JcIjtmdW5jdGlvbiByYShhLGIpe2E9YS5zcGxpdChcIiVzXCIpO2Zvcih2YXIgYz1cIlwiLGQ9YS5sZW5ndGgtMSxlPTA7ZTxkO2UrKyljKz1hW2VdKyhlPGIubGVuZ3RoP2JbZV06XCIlc1wiKTt1LmNhbGwodGhpcyxjK2FbZF0pfXQocmEsdSk7cmEucHJvdG90eXBlLm5hbWU9XCJBc3NlcnRpb25FcnJvclwiO2Z1bmN0aW9uIHNhKGEsYil7dGhyb3cgbmV3IHJhKFwiRmFpbHVyZVwiKyhhP1wiOiBcIithOlwiXCIpLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSk7fTtmdW5jdGlvbiB0YShhLGIpe3RoaXMuYz1hO3RoaXMuZj1iO3RoaXMuYj0wO3RoaXMuYT1udWxsfXRhLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXtpZigwPHRoaXMuYil7dGhpcy5iLS07dmFyIGE9dGhpcy5hO3RoaXMuYT1hLm5leHQ7YS5uZXh0PW51bGx9ZWxzZSBhPXRoaXMuYygpO3JldHVybiBhfTtmdW5jdGlvbiB1YShhLGIpe2EuZihiKTsxMDA+YS5iJiYoYS5iKyssYi5uZXh0PWEuYSxhLmE9Yil9O2Z1bmN0aW9uIHZhKCl7dGhpcy5iPXRoaXMuYT1udWxsfXZhciB4YT1uZXcgdGEoZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHdhfSxmdW5jdGlvbihhKXthLnJlc2V0KCl9KTt2YS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGEsYil7dmFyIGM9eGEuZ2V0KCk7Yy5zZXQoYSxiKTt0aGlzLmI/dGhpcy5iLm5leHQ9Yzp0aGlzLmE9Yzt0aGlzLmI9Y307ZnVuY3Rpb24geWEoKXt2YXIgYT16YSxiPW51bGw7YS5hJiYoYj1hLmEsYS5hPWEuYS5uZXh0LGEuYXx8KGEuYj1udWxsKSxiLm5leHQ9bnVsbCk7cmV0dXJuIGJ9ZnVuY3Rpb24gd2EoKXt0aGlzLm5leHQ9dGhpcy5iPXRoaXMuYT1udWxsfXdhLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmE9YTt0aGlzLmI9Yjt0aGlzLm5leHQ9bnVsbH07d2EucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5uZXh0PXRoaXMuYj10aGlzLmE9bnVsbH07dmFyIEFhPUFycmF5LnByb3RvdHlwZS5pbmRleE9mP2Z1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7aWYobChhKSlyZXR1cm4gbChiKSYmMT09Yi5sZW5ndGg/YS5pbmRleE9mKGIsMCk6LTE7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYyBpbiBhJiZhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX0sdj1BcnJheS5wcm90b3R5cGUuZm9yRWFjaD9mdW5jdGlvbihhLGIsYyl7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGIsYyl9OmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YS5sZW5ndGgsZT1sKGEpP2Euc3BsaXQoXCJcIik6YSxmPTA7ZjxkO2YrKylmIGluIGUmJmIuY2FsbChjLGVbZl0sZixhKX07XG5mdW5jdGlvbiBCYShhLGIpe3ZhciBjPWEubGVuZ3RoLGQ9bChhKT9hLnNwbGl0KFwiXCIpOmE7Zm9yKC0tYzswPD1jOy0tYyljIGluIGQmJmIuY2FsbCh2b2lkIDAsZFtjXSxjLGEpfVxudmFyIENhPUFycmF5LnByb3RvdHlwZS5tYXA/ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGEsYix2b2lkIDApfTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPUFycmF5KGMpLGU9bChhKT9hLnNwbGl0KFwiXCIpOmEsZj0wO2Y8YztmKyspZiBpbiBlJiYoZFtmXT1iLmNhbGwodm9pZCAwLGVbZl0sZixhKSk7cmV0dXJuIGR9LERhPUFycmF5LnByb3RvdHlwZS5zb21lP2Z1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9bChhKT9hLnNwbGl0KFwiXCIpOmEsZT0wO2U8YztlKyspaWYoZSBpbiBkJiZiLmNhbGwodm9pZCAwLGRbZV0sZSxhKSlyZXR1cm4hMDtyZXR1cm4hMX07XG5mdW5jdGlvbiBFYShhKXthOnt2YXIgYj1GYTtmb3IodmFyIGM9YS5sZW5ndGgsZD1sKGEpP2Euc3BsaXQoXCJcIik6YSxlPTA7ZTxjO2UrKylpZihlIGluIGQmJmIuY2FsbCh2b2lkIDAsZFtlXSxlLGEpKXtiPWU7YnJlYWsgYX1iPS0xfXJldHVybiAwPmI/bnVsbDpsKGEpP2EuY2hhckF0KGIpOmFbYl19ZnVuY3Rpb24gR2EoYSxiKXtyZXR1cm4gMDw9QWEoYSxiKX1mdW5jdGlvbiBIYShhLGIpe2I9QWEoYSxiKTt2YXIgYzsoYz0wPD1iKSYmQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGEsYiwxKTtyZXR1cm4gY31mdW5jdGlvbiB3KGEsYil7dmFyIGM9MDtCYShhLGZ1bmN0aW9uKGQsZSl7Yi5jYWxsKHZvaWQgMCxkLGUsYSkmJjE9PUFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhLGUsMSkubGVuZ3RoJiZjKyt9KX1mdW5jdGlvbiBJYShhKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSxhcmd1bWVudHMpfVxuZnVuY3Rpb24gSmEoYSl7dmFyIGI9YS5sZW5ndGg7aWYoMDxiKXtmb3IodmFyIGM9QXJyYXkoYiksZD0wO2Q8YjtkKyspY1tkXT1hW2RdO3JldHVybiBjfXJldHVybltdfTtmdW5jdGlvbiBLYShhLGIpe2Zvcih2YXIgYz1hLnNwbGl0KFwiJXNcIiksZD1cIlwiLGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO2UubGVuZ3RoJiYxPGMubGVuZ3RoOylkKz1jLnNoaWZ0KCkrZS5zaGlmdCgpO3JldHVybiBkK2Muam9pbihcIiVzXCIpfXZhciBMYT1TdHJpbmcucHJvdG90eXBlLnRyaW0/ZnVuY3Rpb24oYSl7cmV0dXJuIGEudHJpbSgpfTpmdW5jdGlvbihhKXtyZXR1cm4vXltcXHNcXHhhMF0qKFtcXHNcXFNdKj8pW1xcc1xceGEwXSokLy5leGVjKGEpWzFdfTtcbmZ1bmN0aW9uIE1hKGEpe2lmKCFOYS50ZXN0KGEpKXJldHVybiBhOy0xIT1hLmluZGV4T2YoXCImXCIpJiYoYT1hLnJlcGxhY2UoT2EsXCImYW1wO1wiKSk7LTEhPWEuaW5kZXhPZihcIjxcIikmJihhPWEucmVwbGFjZShQYSxcIiZsdDtcIikpOy0xIT1hLmluZGV4T2YoXCI+XCIpJiYoYT1hLnJlcGxhY2UoUWEsXCImZ3Q7XCIpKTstMSE9YS5pbmRleE9mKCdcIicpJiYoYT1hLnJlcGxhY2UoUmEsXCImcXVvdDtcIikpOy0xIT1hLmluZGV4T2YoXCInXCIpJiYoYT1hLnJlcGxhY2UoU2EsXCImIzM5O1wiKSk7LTEhPWEuaW5kZXhPZihcIlxceDAwXCIpJiYoYT1hLnJlcGxhY2UoVGEsXCImIzA7XCIpKTtyZXR1cm4gYX12YXIgT2E9LyYvZyxQYT0vPC9nLFFhPS8+L2csUmE9L1wiL2csU2E9LycvZyxUYT0vXFx4MDAvZyxOYT0vW1xceDAwJjw+XCInXS87ZnVuY3Rpb24geShhLGIpe3JldHVybi0xIT1hLmluZGV4T2YoYil9ZnVuY3Rpb24gVWEoYSxiKXtyZXR1cm4gYTxiPy0xOmE+Yj8xOjB9O3ZhciBWYTthOnt2YXIgV2E9ay5uYXZpZ2F0b3I7aWYoV2Epe3ZhciBYYT1XYS51c2VyQWdlbnQ7aWYoWGEpe1ZhPVhhO2JyZWFrIGF9fVZhPVwiXCJ9ZnVuY3Rpb24geihhKXtyZXR1cm4geShWYSxhKX07ZnVuY3Rpb24gWWEoYSxiKXtmb3IodmFyIGMgaW4gYSliLmNhbGwodm9pZCAwLGFbY10sYyxhKX1mdW5jdGlvbiBaYShhKXtmb3IodmFyIGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiAkYShhKXt2YXIgYj17fSxjO2ZvcihjIGluIGEpYltjXT1hW2NdO3JldHVybiBifXZhciBhYj1cImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKTtmdW5jdGlvbiBiYihhLGIpe2Zvcih2YXIgYyxkLGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXtkPWFyZ3VtZW50c1tlXTtmb3IoYyBpbiBkKWFbY109ZFtjXTtmb3IodmFyIGY9MDtmPGFiLmxlbmd0aDtmKyspYz1hYltmXSxPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZCxjKSYmKGFbY109ZFtjXSl9fTtmdW5jdGlvbiBjYihhKXtrLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30sMCl9dmFyIGRiO1xuZnVuY3Rpb24gZWIoKXt2YXIgYT1rLk1lc3NhZ2VDaGFubmVsO1widW5kZWZpbmVkXCI9PT10eXBlb2YgYSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5wb3N0TWVzc2FnZSYmd2luZG93LmFkZEV2ZW50TGlzdGVuZXImJiF6KFwiUHJlc3RvXCIpJiYoYT1mdW5jdGlvbigpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJJRlJBTUVcIik7YS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Euc3JjPVwiXCI7ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGEpO3ZhciBiPWEuY29udGVudFdpbmRvdzthPWIuZG9jdW1lbnQ7YS5vcGVuKCk7YS53cml0ZShcIlwiKTthLmNsb3NlKCk7dmFyIGM9XCJjYWxsSW1tZWRpYXRlXCIrTWF0aC5yYW5kb20oKSxkPVwiZmlsZTpcIj09Yi5sb2NhdGlvbi5wcm90b2NvbD9cIipcIjpiLmxvY2F0aW9uLnByb3RvY29sK1wiLy9cIitiLmxvY2F0aW9uLmhvc3Q7YT1yKGZ1bmN0aW9uKGEpe2lmKChcIipcIj09ZHx8YS5vcmlnaW49PWQpJiZhLmRhdGE9PVxuYyl0aGlzLnBvcnQxLm9ubWVzc2FnZSgpfSx0aGlzKTtiLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsYSwhMSk7dGhpcy5wb3J0MT17fTt0aGlzLnBvcnQyPXtwb3N0TWVzc2FnZTpmdW5jdGlvbigpe2IucG9zdE1lc3NhZ2UoYyxkKX19fSk7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhJiYheihcIlRyaWRlbnRcIikmJiF6KFwiTVNJRVwiKSl7dmFyIGI9bmV3IGEsYz17fSxkPWM7Yi5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT1jLm5leHQpe2M9Yy5uZXh0O3ZhciBhPWMud2I7Yy53Yj1udWxsO2EoKX19O3JldHVybiBmdW5jdGlvbihhKXtkLm5leHQ9e3diOmF9O2Q9ZC5uZXh0O2IucG9ydDIucG9zdE1lc3NhZ2UoMCl9fXJldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQmJlwib25yZWFkeXN0YXRlY2hhbmdlXCJpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiU0NSSVBUXCIpP2Z1bmN0aW9uKGEpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJTQ1JJUFRcIik7XG5iLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2Iub25yZWFkeXN0YXRlY2hhbmdlPW51bGw7Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpO2I9bnVsbDthKCk7YT1udWxsfTtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoYil9OmZ1bmN0aW9uKGEpe2suc2V0VGltZW91dChhLDApfX07ZnVuY3Rpb24gZmIoYSxiKXtoYnx8aWIoKTtqYnx8KGhiKCksamI9ITApO3phLmFkZChhLGIpfXZhciBoYjtmdW5jdGlvbiBpYigpe2lmKGsuUHJvbWlzZSYmay5Qcm9taXNlLnJlc29sdmUpe3ZhciBhPWsuUHJvbWlzZS5yZXNvbHZlKHZvaWQgMCk7aGI9ZnVuY3Rpb24oKXthLnRoZW4oa2IpfX1lbHNlIGhiPWZ1bmN0aW9uKCl7dmFyIGE9a2I7IW4oay5zZXRJbW1lZGlhdGUpfHxrLldpbmRvdyYmay5XaW5kb3cucHJvdG90eXBlJiYheihcIkVkZ2VcIikmJmsuV2luZG93LnByb3RvdHlwZS5zZXRJbW1lZGlhdGU9PWsuc2V0SW1tZWRpYXRlPyhkYnx8KGRiPWViKCkpLGRiKGEpKTprLnNldEltbWVkaWF0ZShhKX19dmFyIGpiPSExLHphPW5ldyB2YTtmdW5jdGlvbiBrYigpe2Zvcih2YXIgYTthPXlhKCk7KXt0cnl7YS5hLmNhbGwoYS5iKX1jYXRjaChiKXtjYihiKX11YSh4YSxhKX1qYj0hMX07ZnVuY3Rpb24gQShhLGIpe3RoaXMuYT1sYjt0aGlzLmk9dm9pZCAwO3RoaXMuZj10aGlzLmI9dGhpcy5jPW51bGw7dGhpcy5nPXRoaXMuaD0hMTtpZihhIT1jYSl0cnl7dmFyIGM9dGhpczthLmNhbGwoYixmdW5jdGlvbihhKXttYihjLG5iLGEpfSxmdW5jdGlvbihhKXtpZighKGEgaW5zdGFuY2VvZiBvYikpdHJ5e2lmKGEgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBhO3Rocm93IEVycm9yKFwiUHJvbWlzZSByZWplY3RlZC5cIik7fWNhdGNoKGUpe31tYihjLHBiLGEpfSl9Y2F0Y2goZCl7bWIodGhpcyxwYixkKX19dmFyIGxiPTAsbmI9MixwYj0zO2Z1bmN0aW9uIHFiKCl7dGhpcy5uZXh0PXRoaXMuZj10aGlzLmI9dGhpcy5nPXRoaXMuYT1udWxsO3RoaXMuYz0hMX1xYi5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmY9dGhpcy5iPXRoaXMuZz10aGlzLmE9bnVsbDt0aGlzLmM9ITF9O3ZhciByYj1uZXcgdGEoZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHFifSxmdW5jdGlvbihhKXthLnJlc2V0KCl9KTtcbmZ1bmN0aW9uIHNiKGEsYixjKXt2YXIgZD1yYi5nZXQoKTtkLmc9YTtkLmI9YjtkLmY9YztyZXR1cm4gZH1mdW5jdGlvbiBCKGEpe2lmKGEgaW5zdGFuY2VvZiBBKXJldHVybiBhO3ZhciBiPW5ldyBBKGNhKTttYihiLG5iLGEpO3JldHVybiBifWZ1bmN0aW9uIEMoYSl7cmV0dXJuIG5ldyBBKGZ1bmN0aW9uKGIsYyl7YyhhKX0pfWZ1bmN0aW9uIHRiKGEsYixjKXt1YihhLGIsYyxudWxsKXx8ZmIobmEoYixhKSl9ZnVuY3Rpb24gdmIoYSl7cmV0dXJuIG5ldyBBKGZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS5sZW5ndGgsZT1bXTtpZihkKWZvcih2YXIgZj1mdW5jdGlvbihhLGMpe2QtLTtlW2FdPWM7MD09ZCYmYihlKX0saD1mdW5jdGlvbihhKXtjKGEpfSxtPTAscDttPGEubGVuZ3RoO20rKylwPWFbbV0sdGIocCxuYShmLG0pLGgpO2Vsc2UgYihlKX0pfVxuZnVuY3Rpb24gd2IoYSl7cmV0dXJuIG5ldyBBKGZ1bmN0aW9uKGIpe3ZhciBjPWEubGVuZ3RoLGQ9W107aWYoYylmb3IodmFyIGU9ZnVuY3Rpb24oYSxlLGYpe2MtLTtkW2FdPWU/e0RiOiEwLHZhbHVlOmZ9OntEYjohMSxyZWFzb246Zn07MD09YyYmYihkKX0sZj0wLGg7ZjxhLmxlbmd0aDtmKyspaD1hW2ZdLHRiKGgsbmEoZSxmLCEwKSxuYShlLGYsITEpKTtlbHNlIGIoZCl9KX1BLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4geGIodGhpcyxuKGEpP2E6bnVsbCxuKGIpP2I6bnVsbCxjKX07cGEoQSk7Zz1BLnByb3RvdHlwZTtnLmlhPWZ1bmN0aW9uKGEsYil7YT1zYihhLGEsYik7YS5jPSEwO3liKHRoaXMsYSk7cmV0dXJuIHRoaXN9O2cucz1mdW5jdGlvbihhLGIpe3JldHVybiB4Yih0aGlzLG51bGwsYSxiKX07Zy5jYW5jZWw9ZnVuY3Rpb24oYSl7dGhpcy5hPT1sYiYmZmIoZnVuY3Rpb24oKXt2YXIgYj1uZXcgb2IoYSk7emIodGhpcyxiKX0sdGhpcyl9O1xuZnVuY3Rpb24gemIoYSxiKXtpZihhLmE9PWxiKWlmKGEuYyl7dmFyIGM9YS5jO2lmKGMuYil7Zm9yKHZhciBkPTAsZT1udWxsLGY9bnVsbCxoPWMuYjtoJiYoaC5jfHwoZCsrLGguYT09YSYmKGU9aCksIShlJiYxPGQpKSk7aD1oLm5leHQpZXx8KGY9aCk7ZSYmKGMuYT09bGImJjE9PWQ/emIoYyxiKTooZj8oZD1mLGQubmV4dD09Yy5mJiYoYy5mPWQpLGQubmV4dD1kLm5leHQubmV4dCk6QWIoYyksQmIoYyxlLHBiLGIpKSl9YS5jPW51bGx9ZWxzZSBtYihhLHBiLGIpfWZ1bmN0aW9uIHliKGEsYil7YS5ifHxhLmEhPW5iJiZhLmEhPXBifHxDYihhKTthLmY/YS5mLm5leHQ9YjphLmI9YjthLmY9Yn1cbmZ1bmN0aW9uIHhiKGEsYixjLGQpe3ZhciBlPXNiKG51bGwsbnVsbCxudWxsKTtlLmE9bmV3IEEoZnVuY3Rpb24oYSxoKXtlLmc9Yj9mdW5jdGlvbihjKXt0cnl7dmFyIGU9Yi5jYWxsKGQsYyk7YShlKX1jYXRjaCh4KXtoKHgpfX06YTtlLmI9Yz9mdW5jdGlvbihiKXt0cnl7dmFyIGU9Yy5jYWxsKGQsYik7dm9pZCAwPT09ZSYmYiBpbnN0YW5jZW9mIG9iP2goYik6YShlKX1jYXRjaCh4KXtoKHgpfX06aH0pO2UuYS5jPWE7eWIoYSxlKTtyZXR1cm4gZS5hfWcuTmM9ZnVuY3Rpb24oYSl7dGhpcy5hPWxiO21iKHRoaXMsbmIsYSl9O2cuT2M9ZnVuY3Rpb24oYSl7dGhpcy5hPWxiO21iKHRoaXMscGIsYSl9O1xuZnVuY3Rpb24gbWIoYSxiLGMpe2EuYT09bGImJihhPT09YyYmKGI9cGIsYz1uZXcgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW5ub3QgcmVzb2x2ZSB0byBpdHNlbGZcIikpLGEuYT0xLHViKGMsYS5OYyxhLk9jLGEpfHwoYS5pPWMsYS5hPWIsYS5jPW51bGwsQ2IoYSksYiE9cGJ8fGMgaW5zdGFuY2VvZiBvYnx8RGIoYSxjKSkpfWZ1bmN0aW9uIHViKGEsYixjLGQpe2lmKGEgaW5zdGFuY2VvZiBBKXJldHVybiB5YihhLHNiKGJ8fGNhLGN8fG51bGwsZCkpLCEwO2lmKHFhKGEpKXJldHVybiBhLnRoZW4oYixjLGQpLCEwO2lmKHEoYSkpdHJ5e3ZhciBlPWEudGhlbjtpZihuKGUpKXJldHVybiBFYihhLGUsYixjLGQpLCEwfWNhdGNoKGYpe3JldHVybiBjLmNhbGwoZCxmKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIEViKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXttfHwobT0hMCxkLmNhbGwoZSxhKSl9ZnVuY3Rpb24gaChhKXttfHwobT0hMCxjLmNhbGwoZSxhKSl9dmFyIG09ITE7dHJ5e2IuY2FsbChhLGgsZil9Y2F0Y2gocCl7ZihwKX19ZnVuY3Rpb24gQ2IoYSl7YS5ofHwoYS5oPSEwLGZiKGEuWWIsYSkpfWZ1bmN0aW9uIEFiKGEpe3ZhciBiPW51bGw7YS5iJiYoYj1hLmIsYS5iPWIubmV4dCxiLm5leHQ9bnVsbCk7YS5ifHwoYS5mPW51bGwpO3JldHVybiBifWcuWWI9ZnVuY3Rpb24oKXtmb3IodmFyIGE7YT1BYih0aGlzKTspQmIodGhpcyxhLHRoaXMuYSx0aGlzLmkpO3RoaXMuaD0hMX07XG5mdW5jdGlvbiBCYihhLGIsYyxkKXtpZihjPT1wYiYmYi5iJiYhYi5jKWZvcig7YSYmYS5nO2E9YS5jKWEuZz0hMTtpZihiLmEpYi5hLmM9bnVsbCxGYihiLGMsZCk7ZWxzZSB0cnl7Yi5jP2IuZy5jYWxsKGIuZik6RmIoYixjLGQpfWNhdGNoKGUpe0diLmNhbGwobnVsbCxlKX11YShyYixiKX1mdW5jdGlvbiBGYihhLGIsYyl7Yj09bmI/YS5nLmNhbGwoYS5mLGMpOmEuYiYmYS5iLmNhbGwoYS5mLGMpfWZ1bmN0aW9uIERiKGEsYil7YS5nPSEwO2ZiKGZ1bmN0aW9uKCl7YS5nJiZHYi5jYWxsKG51bGwsYil9KX12YXIgR2I9Y2I7ZnVuY3Rpb24gb2IoYSl7dS5jYWxsKHRoaXMsYSl9dChvYix1KTtvYi5wcm90b3R5cGUubmFtZT1cImNhbmNlbFwiO2Z1bmN0aW9uIEhiKCl7MCE9SWImJihKYlt0aGlzW2lhXXx8KHRoaXNbaWFdPSsramEpXT10aGlzKTt0aGlzLnFhPXRoaXMucWE7dGhpcy5qYT10aGlzLmphfXZhciBJYj0wLEpiPXt9O0hiLnByb3RvdHlwZS5xYT0hMTtmdW5jdGlvbiBLYihhKXtpZighYS5xYSYmKGEucWE9ITAsYS52YSgpLDAhPUliKSl7dmFyIGI9YVtpYV18fChhW2lhXT0rK2phKTtpZigwIT1JYiYmYS5qYSYmMDxhLmphLmxlbmd0aCl0aHJvdyBFcnJvcihhK1wiIGRpZCBub3QgZW1wdHkgaXRzIG9uRGlzcG9zZUNhbGxiYWNrcyBxdWV1ZS4gVGhpcyBwcm9iYWJseSBtZWFucyBpdCBvdmVycm9kZSBkaXNwb3NlKCkgb3IgZGlzcG9zZUludGVybmFsKCkgd2l0aG91dCBjYWxsaW5nIHRoZSBzdXBlcmNsYXNzJyBtZXRob2QuXCIpO2RlbGV0ZSBKYltiXX19SGIucHJvdG90eXBlLnZhPWZ1bmN0aW9uKCl7aWYodGhpcy5qYSlmb3IoO3RoaXMuamEubGVuZ3RoOyl0aGlzLmphLnNoaWZ0KCkoKX07ZnVuY3Rpb24gTGIoYSl7TGJbXCIgXCJdKGEpO3JldHVybiBhfUxiW1wiIFwiXT1jYTtmdW5jdGlvbiBNYihhLGIpe3ZhciBjPU5iO3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYyxhKT9jW2FdOmNbYV09YihhKX07dmFyIE9iPXooXCJPcGVyYVwiKSxQYj16KFwiVHJpZGVudFwiKXx8eihcIk1TSUVcIiksUWI9eihcIkVkZ2VcIiksUmI9UWJ8fFBiLFNiPXooXCJHZWNrb1wiKSYmISh5KFZhLnRvTG93ZXJDYXNlKCksXCJ3ZWJraXRcIikmJiF6KFwiRWRnZVwiKSkmJiEoeihcIlRyaWRlbnRcIil8fHooXCJNU0lFXCIpKSYmIXooXCJFZGdlXCIpLFRiPXkoVmEudG9Mb3dlckNhc2UoKSxcIndlYmtpdFwiKSYmIXooXCJFZGdlXCIpO2Z1bmN0aW9uIFViKCl7dmFyIGE9ay5kb2N1bWVudDtyZXR1cm4gYT9hLmRvY3VtZW50TW9kZTp2b2lkIDB9dmFyIFZiO1xuYTp7dmFyIFdiPVwiXCIsWGI9ZnVuY3Rpb24oKXt2YXIgYT1WYTtpZihTYilyZXR1cm4vcnY6KFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoUWIpcmV0dXJuL0VkZ2VcXC8oW1xcZFxcLl0rKS8uZXhlYyhhKTtpZihQYilyZXR1cm4vXFxiKD86TVNJRXxydilbOiBdKFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoVGIpcmV0dXJuL1dlYktpdFxcLyhcXFMrKS8uZXhlYyhhKTtpZihPYilyZXR1cm4vKD86VmVyc2lvbilbIFxcL10/KFxcUyspLy5leGVjKGEpfSgpO1hiJiYoV2I9WGI/WGJbMV06XCJcIik7aWYoUGIpe3ZhciBZYj1VYigpO2lmKG51bGwhPVliJiZZYj5wYXJzZUZsb2F0KFdiKSl7VmI9U3RyaW5nKFliKTticmVhayBhfX1WYj1XYn12YXIgTmI9e307XG5mdW5jdGlvbiBaYihhKXtyZXR1cm4gTWIoYSxmdW5jdGlvbigpe2Zvcih2YXIgYj0wLGM9TGEoU3RyaW5nKFZiKSkuc3BsaXQoXCIuXCIpLGQ9TGEoU3RyaW5nKGEpKS5zcGxpdChcIi5cIiksZT1NYXRoLm1heChjLmxlbmd0aCxkLmxlbmd0aCksZj0wOzA9PWImJmY8ZTtmKyspe3ZhciBoPWNbZl18fFwiXCIsbT1kW2ZdfHxcIlwiO2Rve2g9LyhcXGQqKShcXEQqKSguKikvLmV4ZWMoaCl8fFtcIlwiLFwiXCIsXCJcIixcIlwiXTttPS8oXFxkKikoXFxEKikoLiopLy5leGVjKG0pfHxbXCJcIixcIlwiLFwiXCIsXCJcIl07aWYoMD09aFswXS5sZW5ndGgmJjA9PW1bMF0ubGVuZ3RoKWJyZWFrO2I9VWEoMD09aFsxXS5sZW5ndGg/MDpwYXJzZUludChoWzFdLDEwKSwwPT1tWzFdLmxlbmd0aD8wOnBhcnNlSW50KG1bMV0sMTApKXx8VWEoMD09aFsyXS5sZW5ndGgsMD09bVsyXS5sZW5ndGgpfHxVYShoWzJdLG1bMl0pO2g9aFszXTttPW1bM119d2hpbGUoMD09Yil9cmV0dXJuIDA8PWJ9KX12YXIgJGI7dmFyIGFjPWsuZG9jdW1lbnQ7XG4kYj1hYyYmUGI/VWIoKXx8KFwiQ1NTMUNvbXBhdFwiPT1hYy5jb21wYXRNb2RlP3BhcnNlSW50KFZiLDEwKTo1KTp2b2lkIDA7dmFyIGJjPU9iamVjdC5mcmVlemV8fGZ1bmN0aW9uKGEpe3JldHVybiBhfTt2YXIgY2M9IVBifHw5PD1OdW1iZXIoJGIpLGRjPVBiJiYhWmIoXCI5XCIpLGVjPWZ1bmN0aW9uKCl7aWYoIWsuYWRkRXZlbnRMaXN0ZW5lcnx8IU9iamVjdC5kZWZpbmVQcm9wZXJ0eSlyZXR1cm4hMTt2YXIgYT0hMSxiPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7YT0hMH19KTtrLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsY2EsYik7ay5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLGNhLGIpO3JldHVybiBhfSgpO2Z1bmN0aW9uIEQoYSxiKXt0aGlzLnR5cGU9YTt0aGlzLmI9dGhpcy50YXJnZXQ9Yjt0aGlzLktiPSEwfUQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7dGhpcy5LYj0hMX07ZnVuY3Rpb24gZmMoYSxiKXtELmNhbGwodGhpcyxhP2EudHlwZTpcIlwiKTt0aGlzLnJlbGF0ZWRUYXJnZXQ9dGhpcy5iPXRoaXMudGFyZ2V0PW51bGw7dGhpcy5idXR0b249dGhpcy5zY3JlZW5ZPXRoaXMuc2NyZWVuWD10aGlzLmNsaWVudFk9dGhpcy5jbGllbnRYPTA7dGhpcy5rZXk9XCJcIjt0aGlzLm1ldGFLZXk9dGhpcy5zaGlmdEtleT10aGlzLmFsdEtleT10aGlzLmN0cmxLZXk9ITE7dGhpcy5wb2ludGVySWQ9MDt0aGlzLnBvaW50ZXJUeXBlPVwiXCI7dGhpcy5hPW51bGw7aWYoYSl7dmFyIGM9dGhpcy50eXBlPWEudHlwZSxkPWEuY2hhbmdlZFRvdWNoZXM/YS5jaGFuZ2VkVG91Y2hlc1swXTpudWxsO3RoaXMudGFyZ2V0PWEudGFyZ2V0fHxhLnNyY0VsZW1lbnQ7dGhpcy5iPWI7aWYoYj1hLnJlbGF0ZWRUYXJnZXQpe2lmKFNiKXthOnt0cnl7TGIoYi5ub2RlTmFtZSk7dmFyIGU9ITA7YnJlYWsgYX1jYXRjaChmKXt9ZT0hMX1lfHwoYj1udWxsKX19ZWxzZVwibW91c2VvdmVyXCI9PWM/Yj1cbmEuZnJvbUVsZW1lbnQ6XCJtb3VzZW91dFwiPT1jJiYoYj1hLnRvRWxlbWVudCk7dGhpcy5yZWxhdGVkVGFyZ2V0PWI7bnVsbD09PWQ/KHRoaXMuY2xpZW50WD12b2lkIDAhPT1hLmNsaWVudFg/YS5jbGllbnRYOmEucGFnZVgsdGhpcy5jbGllbnRZPXZvaWQgMCE9PWEuY2xpZW50WT9hLmNsaWVudFk6YS5wYWdlWSx0aGlzLnNjcmVlblg9YS5zY3JlZW5YfHwwLHRoaXMuc2NyZWVuWT1hLnNjcmVlbll8fDApOih0aGlzLmNsaWVudFg9dm9pZCAwIT09ZC5jbGllbnRYP2QuY2xpZW50WDpkLnBhZ2VYLHRoaXMuY2xpZW50WT12b2lkIDAhPT1kLmNsaWVudFk/ZC5jbGllbnRZOmQucGFnZVksdGhpcy5zY3JlZW5YPWQuc2NyZWVuWHx8MCx0aGlzLnNjcmVlblk9ZC5zY3JlZW5ZfHwwKTt0aGlzLmJ1dHRvbj1hLmJ1dHRvbjt0aGlzLmtleT1hLmtleXx8XCJcIjt0aGlzLmN0cmxLZXk9YS5jdHJsS2V5O3RoaXMuYWx0S2V5PWEuYWx0S2V5O3RoaXMuc2hpZnRLZXk9YS5zaGlmdEtleTt0aGlzLm1ldGFLZXk9XG5hLm1ldGFLZXk7dGhpcy5wb2ludGVySWQ9YS5wb2ludGVySWR8fDA7dGhpcy5wb2ludGVyVHlwZT1sKGEucG9pbnRlclR5cGUpP2EucG9pbnRlclR5cGU6Z2NbYS5wb2ludGVyVHlwZV18fFwiXCI7dGhpcy5hPWE7YS5kZWZhdWx0UHJldmVudGVkJiZ0aGlzLnByZXZlbnREZWZhdWx0KCl9fXQoZmMsRCk7dmFyIGdjPWJjKHsyOlwidG91Y2hcIiwzOlwicGVuXCIsNDpcIm1vdXNlXCJ9KTtmYy5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXtmYy5vYi5wcmV2ZW50RGVmYXVsdC5jYWxsKHRoaXMpO3ZhciBhPXRoaXMuYTtpZihhLnByZXZlbnREZWZhdWx0KWEucHJldmVudERlZmF1bHQoKTtlbHNlIGlmKGEucmV0dXJuVmFsdWU9ITEsZGMpdHJ5e2lmKGEuY3RybEtleXx8MTEyPD1hLmtleUNvZGUmJjEyMz49YS5rZXlDb2RlKWEua2V5Q29kZT0tMX1jYXRjaChiKXt9fTtmYy5wcm90b3R5cGUuZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O3ZhciBoYz1cImNsb3N1cmVfbGlzdGVuYWJsZV9cIisoMUU2Kk1hdGgucmFuZG9tKCl8MCksaWM9MDtmdW5jdGlvbiBqYyhhLGIsYyxkLGUpe3RoaXMubGlzdGVuZXI9YTt0aGlzLnByb3h5PW51bGw7dGhpcy5zcmM9Yjt0aGlzLnR5cGU9Yzt0aGlzLmNhcHR1cmU9ISFkO3RoaXMuTGE9ZTt0aGlzLmtleT0rK2ljO3RoaXMub2E9dGhpcy5JYT0hMX1mdW5jdGlvbiBrYyhhKXthLm9hPSEwO2EubGlzdGVuZXI9bnVsbDthLnByb3h5PW51bGw7YS5zcmM9bnVsbDthLkxhPW51bGx9O2Z1bmN0aW9uIGxjKGEpe3RoaXMuc3JjPWE7dGhpcy5hPXt9O3RoaXMuYj0wfWxjLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLnRvU3RyaW5nKCk7YT10aGlzLmFbZl07YXx8KGE9dGhpcy5hW2ZdPVtdLHRoaXMuYisrKTt2YXIgaD1tYyhhLGIsZCxlKTstMTxoPyhiPWFbaF0sY3x8KGIuSWE9ITEpKTooYj1uZXcgamMoYix0aGlzLnNyYyxmLCEhZCxlKSxiLklhPWMsYS5wdXNoKGIpKTtyZXR1cm4gYn07ZnVuY3Rpb24gbmMoYSxiKXt2YXIgYz1iLnR5cGU7YyBpbiBhLmEmJkhhKGEuYVtjXSxiKSYmKGtjKGIpLDA9PWEuYVtjXS5sZW5ndGgmJihkZWxldGUgYS5hW2NdLGEuYi0tKSl9ZnVuY3Rpb24gbWMoYSxiLGMsZCl7Zm9yKHZhciBlPTA7ZTxhLmxlbmd0aDsrK2Upe3ZhciBmPWFbZV07aWYoIWYub2EmJmYubGlzdGVuZXI9PWImJmYuY2FwdHVyZT09ISFjJiZmLkxhPT1kKXJldHVybiBlfXJldHVybi0xfTt2YXIgb2M9XCJjbG9zdXJlX2xtX1wiKygxRTYqTWF0aC5yYW5kb20oKXwwKSxwYz17fSxxYz0wO2Z1bmN0aW9uIHJjKGEsYixjLGQsZSl7aWYoZCYmZC5vbmNlKXNjKGEsYixjLGQsZSk7ZWxzZSBpZihmYShiKSlmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrKylyYyhhLGJbZl0sYyxkLGUpO2Vsc2UgYz10YyhjKSxhJiZhW2hjXT91YyhhLGIsYyxxKGQpPyEhZC5jYXB0dXJlOiEhZCxlKTp2YyhhLGIsYywhMSxkLGUpfVxuZnVuY3Rpb24gdmMoYSxiLGMsZCxlLGYpe2lmKCFiKXRocm93IEVycm9yKFwiSW52YWxpZCBldmVudCB0eXBlXCIpO3ZhciBoPXEoZSk/ISFlLmNhcHR1cmU6ISFlLG09d2MoYSk7bXx8KGFbb2NdPW09bmV3IGxjKGEpKTtjPW0uYWRkKGIsYyxkLGgsZik7aWYoIWMucHJveHkpe2Q9eGMoKTtjLnByb3h5PWQ7ZC5zcmM9YTtkLmxpc3RlbmVyPWM7aWYoYS5hZGRFdmVudExpc3RlbmVyKWVjfHwoZT1oKSx2b2lkIDA9PT1lJiYoZT0hMSksYS5hZGRFdmVudExpc3RlbmVyKGIudG9TdHJpbmcoKSxkLGUpO2Vsc2UgaWYoYS5hdHRhY2hFdmVudClhLmF0dGFjaEV2ZW50KHljKGIudG9TdHJpbmcoKSksZCk7ZWxzZSBpZihhLmFkZExpc3RlbmVyJiZhLnJlbW92ZUxpc3RlbmVyKWEuYWRkTGlzdGVuZXIoZCk7ZWxzZSB0aHJvdyBFcnJvcihcImFkZEV2ZW50TGlzdGVuZXIgYW5kIGF0dGFjaEV2ZW50IGFyZSB1bmF2YWlsYWJsZS5cIik7cWMrK319XG5mdW5jdGlvbiB4Yygpe3ZhciBhPXpjLGI9Y2M/ZnVuY3Rpb24oYyl7cmV0dXJuIGEuY2FsbChiLnNyYyxiLmxpc3RlbmVyLGMpfTpmdW5jdGlvbihjKXtjPWEuY2FsbChiLnNyYyxiLmxpc3RlbmVyLGMpO2lmKCFjKXJldHVybiBjfTtyZXR1cm4gYn1mdW5jdGlvbiBzYyhhLGIsYyxkLGUpe2lmKGZhKGIpKWZvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7ZisrKXNjKGEsYltmXSxjLGQsZSk7ZWxzZSBjPXRjKGMpLGEmJmFbaGNdP0FjKGEsYixjLHEoZCk/ISFkLmNhcHR1cmU6ISFkLGUpOnZjKGEsYixjLCEwLGQsZSl9XG5mdW5jdGlvbiBFKGEsYixjLGQsZSl7aWYoZmEoYikpZm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspRShhLGJbZl0sYyxkLGUpO2Vsc2UoZD1xKGQpPyEhZC5jYXB0dXJlOiEhZCxjPXRjKGMpLGEmJmFbaGNdKT8oYT1hLmwsYj1TdHJpbmcoYikudG9TdHJpbmcoKSxiIGluIGEuYSYmKGY9YS5hW2JdLGM9bWMoZixjLGQsZSksLTE8YyYmKGtjKGZbY10pLEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChmLGMsMSksMD09Zi5sZW5ndGgmJihkZWxldGUgYS5hW2JdLGEuYi0tKSkpKTphJiYoYT13YyhhKSkmJihiPWEuYVtiLnRvU3RyaW5nKCldLGE9LTEsYiYmKGE9bWMoYixjLGQsZSkpLChjPS0xPGE/YlthXTpudWxsKSYmQmMoYykpfVxuZnVuY3Rpb24gQmMoYSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGEmJmEmJiFhLm9hKXt2YXIgYj1hLnNyYztpZihiJiZiW2hjXSluYyhiLmwsYSk7ZWxzZXt2YXIgYz1hLnR5cGUsZD1hLnByb3h5O2IucmVtb3ZlRXZlbnRMaXN0ZW5lcj9iLnJlbW92ZUV2ZW50TGlzdGVuZXIoYyxkLGEuY2FwdHVyZSk6Yi5kZXRhY2hFdmVudD9iLmRldGFjaEV2ZW50KHljKGMpLGQpOmIuYWRkTGlzdGVuZXImJmIucmVtb3ZlTGlzdGVuZXImJmIucmVtb3ZlTGlzdGVuZXIoZCk7cWMtLTsoYz13YyhiKSk/KG5jKGMsYSksMD09Yy5iJiYoYy5zcmM9bnVsbCxiW29jXT1udWxsKSk6a2MoYSl9fX1mdW5jdGlvbiB5YyhhKXtyZXR1cm4gYSBpbiBwYz9wY1thXTpwY1thXT1cIm9uXCIrYX1cbmZ1bmN0aW9uIENjKGEsYixjLGQpe3ZhciBlPSEwO2lmKGE9d2MoYSkpaWYoYj1hLmFbYi50b1N0cmluZygpXSlmb3IoYj1iLmNvbmNhdCgpLGE9MDthPGIubGVuZ3RoO2ErKyl7dmFyIGY9YlthXTtmJiZmLmNhcHR1cmU9PWMmJiFmLm9hJiYoZj1EYyhmLGQpLGU9ZSYmITEhPT1mKX1yZXR1cm4gZX1mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPWEubGlzdGVuZXIsZD1hLkxhfHxhLnNyYzthLklhJiZCYyhhKTtyZXR1cm4gYy5jYWxsKGQsYil9XG5mdW5jdGlvbiB6YyhhLGIpe2lmKGEub2EpcmV0dXJuITA7aWYoIWNjKXtpZighYilhOntiPVtcIndpbmRvd1wiLFwiZXZlbnRcIl07Zm9yKHZhciBjPWssZD0wO2Q8Yi5sZW5ndGg7ZCsrKWlmKGM9Y1tiW2RdXSxudWxsPT1jKXtiPW51bGw7YnJlYWsgYX1iPWN9ZD1iO2I9bmV3IGZjKGQsdGhpcyk7Yz0hMDtpZighKDA+ZC5rZXlDb2RlfHx2b2lkIDAhPWQucmV0dXJuVmFsdWUpKXthOnt2YXIgZT0hMTtpZigwPT1kLmtleUNvZGUpdHJ5e2Qua2V5Q29kZT0tMTticmVhayBhfWNhdGNoKGgpe2U9ITB9aWYoZXx8dm9pZCAwPT1kLnJldHVyblZhbHVlKWQucmV0dXJuVmFsdWU9ITB9ZD1bXTtmb3IoZT1iLmI7ZTtlPWUucGFyZW50Tm9kZSlkLnB1c2goZSk7YT1hLnR5cGU7Zm9yKGU9ZC5sZW5ndGgtMTswPD1lO2UtLSl7Yi5iPWRbZV07dmFyIGY9Q2MoZFtlXSxhLCEwLGIpO2M9YyYmZn1mb3IoZT0wO2U8ZC5sZW5ndGg7ZSsrKWIuYj1kW2VdLGY9Q2MoZFtlXSxhLCExLGIpLGM9YyYmZn1yZXR1cm4gY31yZXR1cm4gRGMoYSxcbm5ldyBmYyhiLHRoaXMpKX1mdW5jdGlvbiB3YyhhKXthPWFbb2NdO3JldHVybiBhIGluc3RhbmNlb2YgbGM/YTpudWxsfXZhciBFYz1cIl9fY2xvc3VyZV9ldmVudHNfZm5fXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCk7ZnVuY3Rpb24gdGMoYSl7aWYobihhKSlyZXR1cm4gYTthW0VjXXx8KGFbRWNdPWZ1bmN0aW9uKGIpe3JldHVybiBhLmhhbmRsZUV2ZW50KGIpfSk7cmV0dXJuIGFbRWNdfTtmdW5jdGlvbiBGKCl7SGIuY2FsbCh0aGlzKTt0aGlzLmw9bmV3IGxjKHRoaXMpO3RoaXMuUmI9dGhpczt0aGlzLlZhPW51bGx9dChGLEhiKTtGLnByb3RvdHlwZVtoY109ITA7Ri5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyxkKXtyYyh0aGlzLGEsYixjLGQpfTtGLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjLGQpe0UodGhpcyxhLGIsYyxkKX07XG5GLnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50PWZ1bmN0aW9uKGEpe3ZhciBiLGM9dGhpcy5WYTtpZihjKWZvcihiPVtdO2M7Yz1jLlZhKWIucHVzaChjKTtjPXRoaXMuUmI7dmFyIGQ9YS50eXBlfHxhO2lmKGwoYSkpYT1uZXcgRChhLGMpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIEQpYS50YXJnZXQ9YS50YXJnZXR8fGM7ZWxzZXt2YXIgZT1hO2E9bmV3IEQoZCxjKTtiYihhLGUpfWU9ITA7aWYoYilmb3IodmFyIGY9Yi5sZW5ndGgtMTswPD1mO2YtLSl7dmFyIGg9YS5iPWJbZl07ZT1GYyhoLGQsITAsYSkmJmV9aD1hLmI9YztlPUZjKGgsZCwhMCxhKSYmZTtlPUZjKGgsZCwhMSxhKSYmZTtpZihiKWZvcihmPTA7ZjxiLmxlbmd0aDtmKyspaD1hLmI9YltmXSxlPUZjKGgsZCwhMSxhKSYmZTtyZXR1cm4gZX07XG5GLnByb3RvdHlwZS52YT1mdW5jdGlvbigpe0Yub2IudmEuY2FsbCh0aGlzKTtpZih0aGlzLmwpe3ZhciBhPXRoaXMubCxiPTAsYztmb3IoYyBpbiBhLmEpe2Zvcih2YXIgZD1hLmFbY10sZT0wO2U8ZC5sZW5ndGg7ZSsrKSsrYixrYyhkW2VdKTtkZWxldGUgYS5hW2NdO2EuYi0tfX10aGlzLlZhPW51bGx9O2Z1bmN0aW9uIHVjKGEsYixjLGQsZSl7YS5sLmFkZChTdHJpbmcoYiksYywhMSxkLGUpfWZ1bmN0aW9uIEFjKGEsYixjLGQsZSl7YS5sLmFkZChTdHJpbmcoYiksYywhMCxkLGUpfVxuZnVuY3Rpb24gRmMoYSxiLGMsZCl7Yj1hLmwuYVtTdHJpbmcoYildO2lmKCFiKXJldHVybiEwO2I9Yi5jb25jYXQoKTtmb3IodmFyIGU9ITAsZj0wO2Y8Yi5sZW5ndGg7KytmKXt2YXIgaD1iW2ZdO2lmKGgmJiFoLm9hJiZoLmNhcHR1cmU9PWMpe3ZhciBtPWgubGlzdGVuZXIscD1oLkxhfHxoLnNyYztoLklhJiZuYyhhLmwsaCk7ZT0hMSE9PW0uY2FsbChwLGQpJiZlfX1yZXR1cm4gZSYmMCE9ZC5LYn07ZnVuY3Rpb24gR2MoYSxiLGMpe2lmKG4oYSkpYyYmKGE9cihhLGMpKTtlbHNlIGlmKGEmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuaGFuZGxlRXZlbnQpYT1yKGEuaGFuZGxlRXZlbnQsYSk7ZWxzZSB0aHJvdyBFcnJvcihcIkludmFsaWQgbGlzdGVuZXIgYXJndW1lbnRcIik7cmV0dXJuIDIxNDc0ODM2NDc8TnVtYmVyKGIpPy0xOmsuc2V0VGltZW91dChhLGJ8fDApfWZ1bmN0aW9uIEhjKGEpe3ZhciBiPW51bGw7cmV0dXJuKG5ldyBBKGZ1bmN0aW9uKGMsZCl7Yj1HYyhmdW5jdGlvbigpe2Modm9pZCAwKX0sYSk7LTE9PWImJmQoRXJyb3IoXCJGYWlsZWQgdG8gc2NoZWR1bGUgdGltZXIuXCIpKX0pKS5zKGZ1bmN0aW9uKGEpe2suY2xlYXJUaW1lb3V0KGIpO3Rocm93IGE7fSl9O2Z1bmN0aW9uIEljKGEpe2lmKGEuUyYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5TKXJldHVybiBhLlMoKTtpZihsKGEpKXJldHVybiBhLnNwbGl0KFwiXCIpO2lmKGhhKGEpKXtmb3IodmFyIGI9W10sYz1hLmxlbmd0aCxkPTA7ZDxjO2QrKyliLnB1c2goYVtkXSk7cmV0dXJuIGJ9Yj1bXTtjPTA7Zm9yKGQgaW4gYSliW2MrK109YVtkXTtyZXR1cm4gYn1mdW5jdGlvbiBKYyhhKXtpZihhLlUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuVSlyZXR1cm4gYS5VKCk7aWYoIWEuU3x8XCJmdW5jdGlvblwiIT10eXBlb2YgYS5TKXtpZihoYShhKXx8bChhKSl7dmFyIGI9W107YT1hLmxlbmd0aDtmb3IodmFyIGM9MDtjPGE7YysrKWIucHVzaChjKTtyZXR1cm4gYn1iPVtdO2M9MDtmb3IodmFyIGQgaW4gYSliW2MrK109ZDtyZXR1cm4gYn19XG5mdW5jdGlvbiBLYyhhLGIpe2lmKGEuZm9yRWFjaCYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5mb3JFYWNoKWEuZm9yRWFjaChiLHZvaWQgMCk7ZWxzZSBpZihoYShhKXx8bChhKSl2KGEsYix2b2lkIDApO2Vsc2UgZm9yKHZhciBjPUpjKGEpLGQ9SWMoYSksZT1kLmxlbmd0aCxmPTA7ZjxlO2YrKyliLmNhbGwodm9pZCAwLGRbZl0sYyYmY1tmXSxhKX07ZnVuY3Rpb24gTGMoYSxiKXt0aGlzLmI9e307dGhpcy5hPVtdO3RoaXMuYz0wO3ZhciBjPWFyZ3VtZW50cy5sZW5ndGg7aWYoMTxjKXtpZihjJTIpdGhyb3cgRXJyb3IoXCJVbmV2ZW4gbnVtYmVyIG9mIGFyZ3VtZW50c1wiKTtmb3IodmFyIGQ9MDtkPGM7ZCs9Mil0aGlzLnNldChhcmd1bWVudHNbZF0sYXJndW1lbnRzW2QrMV0pfWVsc2UgaWYoYSlpZihhIGluc3RhbmNlb2YgTGMpZm9yKGM9YS5VKCksZD0wO2Q8Yy5sZW5ndGg7ZCsrKXRoaXMuc2V0KGNbZF0sYS5nZXQoY1tkXSkpO2Vsc2UgZm9yKGQgaW4gYSl0aGlzLnNldChkLGFbZF0pfWc9TGMucHJvdG90eXBlO2cuUz1mdW5jdGlvbigpe01jKHRoaXMpO2Zvcih2YXIgYT1bXSxiPTA7Yjx0aGlzLmEubGVuZ3RoO2IrKylhLnB1c2godGhpcy5iW3RoaXMuYVtiXV0pO3JldHVybiBhfTtnLlU9ZnVuY3Rpb24oKXtNYyh0aGlzKTtyZXR1cm4gdGhpcy5hLmNvbmNhdCgpfTtcbmcuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLmI9e307dGhpcy5jPXRoaXMuYS5sZW5ndGg9MH07ZnVuY3Rpb24gTWMoYSl7aWYoYS5jIT1hLmEubGVuZ3RoKXtmb3IodmFyIGI9MCxjPTA7YjxhLmEubGVuZ3RoOyl7dmFyIGQ9YS5hW2JdO05jKGEuYixkKSYmKGEuYVtjKytdPWQpO2IrK31hLmEubGVuZ3RoPWN9aWYoYS5jIT1hLmEubGVuZ3RoKXt2YXIgZT17fTtmb3IoYz1iPTA7YjxhLmEubGVuZ3RoOylkPWEuYVtiXSxOYyhlLGQpfHwoYS5hW2MrK109ZCxlW2RdPTEpLGIrKzthLmEubGVuZ3RoPWN9fWcuZ2V0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIE5jKHRoaXMuYixhKT90aGlzLmJbYV06Yn07Zy5zZXQ9ZnVuY3Rpb24oYSxiKXtOYyh0aGlzLmIsYSl8fCh0aGlzLmMrKyx0aGlzLmEucHVzaChhKSk7dGhpcy5iW2FdPWJ9O1xuZy5mb3JFYWNoPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXRoaXMuVSgpLGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxmPXRoaXMuZ2V0KGUpO2EuY2FsbChiLGYsZSx0aGlzKX19O2Z1bmN0aW9uIE5jKGEsYil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGIpfTt2YXIgT2M9L14oPzooW146Lz8jLl0rKTopPyg/OlxcL1xcLyg/OihbXi8/I10qKUApPyhbXi8jP10qPykoPzo6KFswLTldKykpPyg/PVsvIz9dfCQpKT8oW14/I10rKT8oPzpcXD8oW14jXSopKT8oPzojKFtcXHNcXFNdKikpPyQvO2Z1bmN0aW9uIFBjKGEsYil7aWYoYSl7YT1hLnNwbGl0KFwiJlwiKTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXS5pbmRleE9mKFwiPVwiKSxlPW51bGw7aWYoMDw9ZCl7dmFyIGY9YVtjXS5zdWJzdHJpbmcoMCxkKTtlPWFbY10uc3Vic3RyaW5nKGQrMSl9ZWxzZSBmPWFbY107YihmLGU/ZGVjb2RlVVJJQ29tcG9uZW50KGUucmVwbGFjZSgvXFwrL2csXCIgXCIpKTpcIlwiKX19fTtmdW5jdGlvbiBRYyhhLGIpe3RoaXMuYj10aGlzLmw9dGhpcy5jPVwiXCI7dGhpcy5pPW51bGw7dGhpcy5oPXRoaXMuZz1cIlwiO3RoaXMuZj0hMTtpZihhIGluc3RhbmNlb2YgUWMpe3RoaXMuZj12b2lkIDAhPT1iP2I6YS5mO1JjKHRoaXMsYS5jKTt0aGlzLmw9YS5sO3RoaXMuYj1hLmI7U2ModGhpcyxhLmkpO3RoaXMuZz1hLmc7Yj1hLmE7dmFyIGM9bmV3IFRjO2MuYz1iLmM7Yi5hJiYoYy5hPW5ldyBMYyhiLmEpLGMuYj1iLmIpO1VjKHRoaXMsYyk7dGhpcy5oPWEuaH1lbHNlIGEmJihjPVN0cmluZyhhKS5tYXRjaChPYykpPyh0aGlzLmY9ISFiLFJjKHRoaXMsY1sxXXx8XCJcIiwhMCksdGhpcy5sPVZjKGNbMl18fFwiXCIpLHRoaXMuYj1WYyhjWzNdfHxcIlwiLCEwKSxTYyh0aGlzLGNbNF0pLHRoaXMuZz1WYyhjWzVdfHxcIlwiLCEwKSxVYyh0aGlzLGNbNl18fFwiXCIsITApLHRoaXMuaD1WYyhjWzddfHxcIlwiKSk6KHRoaXMuZj0hIWIsdGhpcy5hPW5ldyBUYyhudWxsLHRoaXMuZikpfVxuUWMucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGE9W10sYj10aGlzLmM7YiYmYS5wdXNoKFdjKGIsWGMsITApLFwiOlwiKTt2YXIgYz10aGlzLmI7aWYoY3x8XCJmaWxlXCI9PWIpYS5wdXNoKFwiLy9cIiksKGI9dGhpcy5sKSYmYS5wdXNoKFdjKGIsWGMsITApLFwiQFwiKSxhLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjKSkucmVwbGFjZSgvJTI1KFswLTlhLWZBLUZdezJ9KS9nLFwiJSQxXCIpKSxjPXRoaXMuaSxudWxsIT1jJiZhLnB1c2goXCI6XCIsU3RyaW5nKGMpKTtpZihjPXRoaXMuZyl0aGlzLmImJlwiL1wiIT1jLmNoYXJBdCgwKSYmYS5wdXNoKFwiL1wiKSxhLnB1c2goV2MoYyxcIi9cIj09Yy5jaGFyQXQoMCk/WWM6WmMsITApKTsoYz10aGlzLmEudG9TdHJpbmcoKSkmJmEucHVzaChcIj9cIixjKTsoYz10aGlzLmgpJiZhLnB1c2goXCIjXCIsV2MoYywkYykpO3JldHVybiBhLmpvaW4oXCJcIil9O1xuZnVuY3Rpb24gUmMoYSxiLGMpe2EuYz1jP1ZjKGIsITApOmI7YS5jJiYoYS5jPWEuYy5yZXBsYWNlKC86JC8sXCJcIikpfWZ1bmN0aW9uIFNjKGEsYil7aWYoYil7Yj1OdW1iZXIoYik7aWYoaXNOYU4oYil8fDA+Yil0aHJvdyBFcnJvcihcIkJhZCBwb3J0IG51bWJlciBcIitiKTthLmk9Yn1lbHNlIGEuaT1udWxsfWZ1bmN0aW9uIFVjKGEsYixjKXtiIGluc3RhbmNlb2YgVGM/KGEuYT1iLGFkKGEuYSxhLmYpKTooY3x8KGI9V2MoYixiZCkpLGEuYT1uZXcgVGMoYixhLmYpKX1mdW5jdGlvbiBHKGEsYixjKXthLmEuc2V0KGIsYyl9ZnVuY3Rpb24gY2QoYSxiKXtyZXR1cm4gYS5hLmdldChiKX1mdW5jdGlvbiBkZChhKXtyZXR1cm4gYSBpbnN0YW5jZW9mIFFjP25ldyBRYyhhKTpuZXcgUWMoYSx2b2lkIDApfWZ1bmN0aW9uIGVkKGEsYil7dmFyIGM9bmV3IFFjKG51bGwsdm9pZCAwKTtSYyhjLFwiaHR0cHNcIik7YSYmKGMuYj1hKTtiJiYoYy5nPWIpO3JldHVybiBjfVxuZnVuY3Rpb24gVmMoYSxiKXtyZXR1cm4gYT9iP2RlY29kZVVSSShhLnJlcGxhY2UoLyUyNS9nLFwiJTI1MjVcIikpOmRlY29kZVVSSUNvbXBvbmVudChhKTpcIlwifWZ1bmN0aW9uIFdjKGEsYixjKXtyZXR1cm4gbChhKT8oYT1lbmNvZGVVUkkoYSkucmVwbGFjZShiLGZkKSxjJiYoYT1hLnJlcGxhY2UoLyUyNShbMC05YS1mQS1GXXsyfSkvZyxcIiUkMVwiKSksYSk6bnVsbH1mdW5jdGlvbiBmZChhKXthPWEuY2hhckNvZGVBdCgwKTtyZXR1cm5cIiVcIisoYT4+NCYxNSkudG9TdHJpbmcoMTYpKyhhJjE1KS50b1N0cmluZygxNil9dmFyIFhjPS9bI1xcL1xcP0BdL2csWmM9L1sjXFw/Ol0vZyxZYz0vWyNcXD9dL2csYmQ9L1sjXFw/QF0vZywkYz0vIy9nO2Z1bmN0aW9uIFRjKGEsYil7dGhpcy5iPXRoaXMuYT1udWxsO3RoaXMuYz1hfHxudWxsO3RoaXMuZj0hIWJ9XG5mdW5jdGlvbiBnZChhKXthLmF8fChhLmE9bmV3IExjLGEuYj0wLGEuYyYmUGMoYS5jLGZ1bmN0aW9uKGIsYyl7YS5hZGQoZGVjb2RlVVJJQ29tcG9uZW50KGIucmVwbGFjZSgvXFwrL2csXCIgXCIpKSxjKX0pKX1mdW5jdGlvbiBoZChhKXt2YXIgYj1KYyhhKTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgYil0aHJvdyBFcnJvcihcIktleXMgYXJlIHVuZGVmaW5lZFwiKTt2YXIgYz1uZXcgVGMobnVsbCx2b2lkIDApO2E9SWMoYSk7Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF0sZj1hW2RdO2ZhKGYpP2lkKGMsZSxmKTpjLmFkZChlLGYpfXJldHVybiBjfWc9VGMucHJvdG90eXBlO2cuYWRkPWZ1bmN0aW9uKGEsYil7Z2QodGhpcyk7dGhpcy5jPW51bGw7YT1qZCh0aGlzLGEpO3ZhciBjPXRoaXMuYS5nZXQoYSk7Y3x8dGhpcy5hLnNldChhLGM9W10pO2MucHVzaChiKTt0aGlzLmIrPTE7cmV0dXJuIHRoaXN9O1xuZnVuY3Rpb24ga2QoYSxiKXtnZChhKTtiPWpkKGEsYik7TmMoYS5hLmIsYikmJihhLmM9bnVsbCxhLmItPWEuYS5nZXQoYikubGVuZ3RoLGE9YS5hLE5jKGEuYixiKSYmKGRlbGV0ZSBhLmJbYl0sYS5jLS0sYS5hLmxlbmd0aD4yKmEuYyYmTWMoYSkpKX1nLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5hPXRoaXMuYz1udWxsO3RoaXMuYj0wfTtmdW5jdGlvbiBsZChhLGIpe2dkKGEpO2I9amQoYSxiKTtyZXR1cm4gTmMoYS5hLmIsYil9Zy5mb3JFYWNoPWZ1bmN0aW9uKGEsYil7Z2QodGhpcyk7dGhpcy5hLmZvckVhY2goZnVuY3Rpb24oYyxkKXt2KGMsZnVuY3Rpb24oYyl7YS5jYWxsKGIsYyxkLHRoaXMpfSx0aGlzKX0sdGhpcyl9O2cuVT1mdW5jdGlvbigpe2dkKHRoaXMpO2Zvcih2YXIgYT10aGlzLmEuUygpLGI9dGhpcy5hLlUoKSxjPVtdLGQ9MDtkPGIubGVuZ3RoO2QrKylmb3IodmFyIGU9YVtkXSxmPTA7ZjxlLmxlbmd0aDtmKyspYy5wdXNoKGJbZF0pO3JldHVybiBjfTtcbmcuUz1mdW5jdGlvbihhKXtnZCh0aGlzKTt2YXIgYj1bXTtpZihsKGEpKWxkKHRoaXMsYSkmJihiPUlhKGIsdGhpcy5hLmdldChqZCh0aGlzLGEpKSkpO2Vsc2V7YT10aGlzLmEuUygpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKWI9SWEoYixhW2NdKX1yZXR1cm4gYn07Zy5zZXQ9ZnVuY3Rpb24oYSxiKXtnZCh0aGlzKTt0aGlzLmM9bnVsbDthPWpkKHRoaXMsYSk7bGQodGhpcyxhKSYmKHRoaXMuYi09dGhpcy5hLmdldChhKS5sZW5ndGgpO3RoaXMuYS5zZXQoYSxbYl0pO3RoaXMuYis9MTtyZXR1cm4gdGhpc307Zy5nZXQ9ZnVuY3Rpb24oYSxiKXthPWE/dGhpcy5TKGEpOltdO3JldHVybiAwPGEubGVuZ3RoP1N0cmluZyhhWzBdKTpifTtmdW5jdGlvbiBpZChhLGIsYyl7a2QoYSxiKTswPGMubGVuZ3RoJiYoYS5jPW51bGwsYS5hLnNldChqZChhLGIpLEphKGMpKSxhLmIrPWMubGVuZ3RoKX1cbmcudG9TdHJpbmc9ZnVuY3Rpb24oKXtpZih0aGlzLmMpcmV0dXJuIHRoaXMuYztpZighdGhpcy5hKXJldHVyblwiXCI7Zm9yKHZhciBhPVtdLGI9dGhpcy5hLlUoKSxjPTA7YzxiLmxlbmd0aDtjKyspe3ZhciBkPWJbY10sZT1lbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGQpKTtkPXRoaXMuUyhkKTtmb3IodmFyIGY9MDtmPGQubGVuZ3RoO2YrKyl7dmFyIGg9ZTtcIlwiIT09ZFtmXSYmKGgrPVwiPVwiK2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZFtmXSkpKTthLnB1c2goaCl9fXJldHVybiB0aGlzLmM9YS5qb2luKFwiJlwiKX07ZnVuY3Rpb24gamQoYSxiKXtiPVN0cmluZyhiKTthLmYmJihiPWIudG9Mb3dlckNhc2UoKSk7cmV0dXJuIGJ9ZnVuY3Rpb24gYWQoYSxiKXtiJiYhYS5mJiYoZ2QoYSksYS5jPW51bGwsYS5hLmZvckVhY2goZnVuY3Rpb24oYSxiKXt2YXIgYz1iLnRvTG93ZXJDYXNlKCk7YiE9YyYmKGtkKHRoaXMsYiksaWQodGhpcyxjLGEpKX0sYSkpO2EuZj1ifTt2YXIgbWQ9IVBifHw5PD1OdW1iZXIoJGIpO2Z1bmN0aW9uIG5kKCl7dGhpcy5hPVwiXCI7dGhpcy5iPW9kfW5kLnByb3RvdHlwZS5uYT0hMDtuZC5wcm90b3R5cGUubWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hfTtuZC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIkNvbnN0e1wiK3RoaXMuYStcIn1cIn07ZnVuY3Rpb24gcGQoYSl7aWYoYSBpbnN0YW5jZW9mIG5kJiZhLmNvbnN0cnVjdG9yPT09bmQmJmEuYj09PW9kKXJldHVybiBhLmE7c2EoXCJleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBDb25zdCwgZ290ICdcIithK1wiJ1wiKTtyZXR1cm5cInR5cGVfZXJyb3I6Q29uc3RcIn12YXIgb2Q9e307ZnVuY3Rpb24gcWQoYSl7dmFyIGI9bmV3IG5kO2IuYT1hO3JldHVybiBifXFkKFwiXCIpO2Z1bmN0aW9uIHJkKCl7dGhpcy5hPVwiXCI7dGhpcy5iPXNkfXJkLnByb3RvdHlwZS5uYT0hMDtyZC5wcm90b3R5cGUubWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hfTtyZC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIlRydXN0ZWRSZXNvdXJjZVVybHtcIit0aGlzLmErXCJ9XCJ9O2Z1bmN0aW9uIHRkKGEpe2lmKGEgaW5zdGFuY2VvZiByZCYmYS5jb25zdHJ1Y3Rvcj09PXJkJiZhLmI9PT1zZClyZXR1cm4gYS5hO3NhKFwiZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgVHJ1c3RlZFJlc291cmNlVXJsLCBnb3QgJ1wiK2ErXCInIG9mIHR5cGUgXCIrZGEoYSkpO3JldHVyblwidHlwZV9lcnJvcjpUcnVzdGVkUmVzb3VyY2VVcmxcIn1cbmZ1bmN0aW9uIHVkKGEsYil7dmFyIGM9cGQoYSk7aWYoIXZkLnRlc3QoYykpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIFRydXN0ZWRSZXNvdXJjZVVybCBmb3JtYXQ6IFwiK2MpO2E9Yy5yZXBsYWNlKHdkLGZ1bmN0aW9uKGEsZSl7aWYoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLGUpKXRocm93IEVycm9yKCdGb3VuZCBtYXJrZXIsIFwiJytlKydcIiwgaW4gZm9ybWF0IHN0cmluZywgXCInK2MrJ1wiLCBidXQgbm8gdmFsaWQgbGFiZWwgbWFwcGluZyBmb3VuZCBpbiBhcmdzOiAnK0pTT04uc3RyaW5naWZ5KGIpKTthPWJbZV07cmV0dXJuIGEgaW5zdGFuY2VvZiBuZD9wZChhKTplbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGEpKX0pO3JldHVybiB4ZChhKX12YXIgd2Q9LyV7KFxcdyspfS9nLHZkPS9eKD86aHR0cHM6KT9cXC9cXC9bMC05YS16LjpbXFxdLV0rXFwvfF5cXC9bXlxcL1xcXFxdfF5hYm91dDpibGFuayMvaSxzZD17fTtcbmZ1bmN0aW9uIHhkKGEpe3ZhciBiPW5ldyByZDtiLmE9YTtyZXR1cm4gYn07ZnVuY3Rpb24geWQoKXt0aGlzLmE9XCJcIjt0aGlzLmI9emR9eWQucHJvdG90eXBlLm5hPSEwO3lkLnByb3RvdHlwZS5tYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O3lkLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiU2FmZVVybHtcIit0aGlzLmErXCJ9XCJ9O2Z1bmN0aW9uIEFkKGEpe2lmKGEgaW5zdGFuY2VvZiB5ZCYmYS5jb25zdHJ1Y3Rvcj09PXlkJiZhLmI9PT16ZClyZXR1cm4gYS5hO3NhKFwiZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgU2FmZVVybCwgZ290ICdcIithK1wiJyBvZiB0eXBlIFwiK2RhKGEpKTtyZXR1cm5cInR5cGVfZXJyb3I6U2FmZVVybFwifXZhciBCZD0vXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwKTp8W146Lz8jXSooPzpbLz8jXXwkKSkvaTtcbmZ1bmN0aW9uIENkKGEpe2lmKGEgaW5zdGFuY2VvZiB5ZClyZXR1cm4gYTthPWEubmE/YS5tYSgpOlN0cmluZyhhKTtCZC50ZXN0KGEpfHwoYT1cImFib3V0OmludmFsaWQjekNsb3N1cmV6XCIpO3JldHVybiBEZChhKX12YXIgemQ9e307ZnVuY3Rpb24gRGQoYSl7dmFyIGI9bmV3IHlkO2IuYT1hO3JldHVybiBifURkKFwiYWJvdXQ6YmxhbmtcIik7ZnVuY3Rpb24gRWQoKXt0aGlzLmE9XCJcIjt0aGlzLmI9RmR9RWQucHJvdG90eXBlLm5hPSEwO0VkLnByb3RvdHlwZS5tYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O0VkLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiU2FmZUh0bWx7XCIrdGhpcy5hK1wifVwifTtmdW5jdGlvbiBHZChhKXtpZihhIGluc3RhbmNlb2YgRWQmJmEuY29uc3RydWN0b3I9PT1FZCYmYS5iPT09RmQpcmV0dXJuIGEuYTtzYShcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFNhZmVIdG1sLCBnb3QgJ1wiK2ErXCInIG9mIHR5cGUgXCIrZGEoYSkpO3JldHVyblwidHlwZV9lcnJvcjpTYWZlSHRtbFwifXZhciBGZD17fTtmdW5jdGlvbiBIZChhKXt2YXIgYj1uZXcgRWQ7Yi5hPWE7cmV0dXJuIGJ9SGQoXCI8IURPQ1RZUEUgaHRtbD5cIik7SGQoXCJcIik7SGQoXCI8YnI+XCIpO2Z1bmN0aW9uIElkKGEpe3ZhciBiPWRvY3VtZW50O3JldHVybiBsKGEpP2IuZ2V0RWxlbWVudEJ5SWQoYSk6YX1mdW5jdGlvbiBKZChhLGIpe1lhKGIsZnVuY3Rpb24oYixkKXtiJiZiLm5hJiYoYj1iLm1hKCkpO1wic3R5bGVcIj09ZD9hLnN0eWxlLmNzc1RleHQ9YjpcImNsYXNzXCI9PWQ/YS5jbGFzc05hbWU9YjpcImZvclwiPT1kP2EuaHRtbEZvcj1iOktkLmhhc093blByb3BlcnR5KGQpP2Euc2V0QXR0cmlidXRlKEtkW2RdLGIpOjA9PWQubGFzdEluZGV4T2YoXCJhcmlhLVwiLDApfHwwPT1kLmxhc3RJbmRleE9mKFwiZGF0YS1cIiwwKT9hLnNldEF0dHJpYnV0ZShkLGIpOmFbZF09Yn0pfVxudmFyIEtkPXtjZWxscGFkZGluZzpcImNlbGxQYWRkaW5nXCIsY2VsbHNwYWNpbmc6XCJjZWxsU3BhY2luZ1wiLGNvbHNwYW46XCJjb2xTcGFuXCIsZnJhbWVib3JkZXI6XCJmcmFtZUJvcmRlclwiLGhlaWdodDpcImhlaWdodFwiLG1heGxlbmd0aDpcIm1heExlbmd0aFwiLG5vbmNlOlwibm9uY2VcIixyb2xlOlwicm9sZVwiLHJvd3NwYW46XCJyb3dTcGFuXCIsdHlwZTpcInR5cGVcIix1c2VtYXA6XCJ1c2VNYXBcIix2YWxpZ246XCJ2QWxpZ25cIix3aWR0aDpcIndpZHRoXCJ9O1xuZnVuY3Rpb24gTGQoYSxiLGMpe3ZhciBkPWFyZ3VtZW50cyxlPWRvY3VtZW50LGY9U3RyaW5nKGRbMF0pLGg9ZFsxXTtpZighbWQmJmgmJihoLm5hbWV8fGgudHlwZSkpe2Y9W1wiPFwiLGZdO2gubmFtZSYmZi5wdXNoKCcgbmFtZT1cIicsTWEoaC5uYW1lKSwnXCInKTtpZihoLnR5cGUpe2YucHVzaCgnIHR5cGU9XCInLE1hKGgudHlwZSksJ1wiJyk7dmFyIG09e307YmIobSxoKTtkZWxldGUgbS50eXBlO2g9bX1mLnB1c2goXCI+XCIpO2Y9Zi5qb2luKFwiXCIpfWY9ZS5jcmVhdGVFbGVtZW50KGYpO2gmJihsKGgpP2YuY2xhc3NOYW1lPWg6ZmEoaCk/Zi5jbGFzc05hbWU9aC5qb2luKFwiIFwiKTpKZChmLGgpKTsyPGQubGVuZ3RoJiZNZChlLGYsZCk7cmV0dXJuIGZ9XG5mdW5jdGlvbiBNZChhLGIsYyl7ZnVuY3Rpb24gZChjKXtjJiZiLmFwcGVuZENoaWxkKGwoYyk/YS5jcmVhdGVUZXh0Tm9kZShjKTpjKX1mb3IodmFyIGU9MjtlPGMubGVuZ3RoO2UrKyl7dmFyIGY9Y1tlXTshaGEoZil8fHEoZikmJjA8Zi5ub2RlVHlwZT9kKGYpOnYoTmQoZik/SmEoZik6ZixkKX19ZnVuY3Rpb24gTmQoYSl7aWYoYSYmXCJudW1iZXJcIj09dHlwZW9mIGEubGVuZ3RoKXtpZihxKGEpKXJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGEuaXRlbXx8XCJzdHJpbmdcIj09dHlwZW9mIGEuaXRlbTtpZihuKGEpKXJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGEuaXRlbX1yZXR1cm4hMX07ZnVuY3Rpb24gT2QoYSl7dmFyIGI9W107UGQobmV3IFFkLGEsYik7cmV0dXJuIGIuam9pbihcIlwiKX1mdW5jdGlvbiBRZCgpe31cbmZ1bmN0aW9uIFBkKGEsYixjKXtpZihudWxsPT1iKWMucHVzaChcIm51bGxcIik7ZWxzZXtpZihcIm9iamVjdFwiPT10eXBlb2YgYil7aWYoZmEoYikpe3ZhciBkPWI7Yj1kLmxlbmd0aDtjLnB1c2goXCJbXCIpO2Zvcih2YXIgZT1cIlwiLGY9MDtmPGI7ZisrKWMucHVzaChlKSxQZChhLGRbZl0sYyksZT1cIixcIjtjLnB1c2goXCJdXCIpO3JldHVybn1pZihiIGluc3RhbmNlb2YgU3RyaW5nfHxiIGluc3RhbmNlb2YgTnVtYmVyfHxiIGluc3RhbmNlb2YgQm9vbGVhbiliPWIudmFsdWVPZigpO2Vsc2V7Yy5wdXNoKFwie1wiKTtlPVwiXCI7Zm9yKGQgaW4gYilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYixkKSYmKGY9YltkXSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBmJiYoYy5wdXNoKGUpLFJkKGQsYyksYy5wdXNoKFwiOlwiKSxQZChhLGYsYyksZT1cIixcIikpO2MucHVzaChcIn1cIik7cmV0dXJufX1zd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJzdHJpbmdcIjpSZChiLGMpO2JyZWFrO2Nhc2UgXCJudW1iZXJcIjpjLnB1c2goaXNGaW5pdGUoYikmJlxuIWlzTmFOKGIpP1N0cmluZyhiKTpcIm51bGxcIik7YnJlYWs7Y2FzZSBcImJvb2xlYW5cIjpjLnB1c2goU3RyaW5nKGIpKTticmVhaztjYXNlIFwiZnVuY3Rpb25cIjpjLnB1c2goXCJudWxsXCIpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJVbmtub3duIHR5cGU6IFwiK3R5cGVvZiBiKTt9fX12YXIgU2Q9eydcIic6J1xcXFxcIicsXCJcXFxcXCI6XCJcXFxcXFxcXFwiLFwiL1wiOlwiXFxcXC9cIixcIlxcYlwiOlwiXFxcXGJcIixcIlxcZlwiOlwiXFxcXGZcIixcIlxcblwiOlwiXFxcXG5cIixcIlxcclwiOlwiXFxcXHJcIixcIlxcdFwiOlwiXFxcXHRcIixcIlxceDBCXCI6XCJcXFxcdTAwMGJcIn0sVGQ9L1xcdWZmZmYvLnRlc3QoXCJcXHVmZmZmXCIpPy9bXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHVmZmZmXS9nOi9bXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHhmZl0vZztcbmZ1bmN0aW9uIFJkKGEsYil7Yi5wdXNoKCdcIicsYS5yZXBsYWNlKFRkLGZ1bmN0aW9uKGEpe3ZhciBiPVNkW2FdO2J8fChiPVwiXFxcXHVcIisoYS5jaGFyQ29kZUF0KDApfDY1NTM2KS50b1N0cmluZygxNikuc3Vic3RyKDEpLFNkW2FdPWIpO3JldHVybiBifSksJ1wiJyl9Oy8qXG5cbiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZnVuY3Rpb24gVWQoKXt2YXIgYT1IKCk7cmV0dXJuIFBiJiYhISRiJiYxMT09JGJ8fC9FZGdlXFwvXFxkKy8udGVzdChhKX1mdW5jdGlvbiBWZCgpe3JldHVybiBrLndpbmRvdyYmay53aW5kb3cubG9jYXRpb24uaHJlZnx8c2VsZiYmc2VsZi5sb2NhdGlvbiYmc2VsZi5sb2NhdGlvbi5ocmVmfHxcIlwifWZ1bmN0aW9uIFdkKGEsYil7Yj1ifHxrLndpbmRvdzt2YXIgYz1cImFib3V0OmJsYW5rXCI7YSYmKGM9QWQoQ2QoYSkpKTtiLmxvY2F0aW9uLmhyZWY9Y31mdW5jdGlvbiBYZChhLGIpe3ZhciBjPVtdLGQ7Zm9yKGQgaW4gYSlkIGluIGI/dHlwZW9mIGFbZF0hPXR5cGVvZiBiW2RdP2MucHVzaChkKTpcIm9iamVjdFwiPT10eXBlb2YgYVtkXSYmbnVsbCE9YVtkXSYmbnVsbCE9YltkXT8wPFhkKGFbZF0sYltkXSkubGVuZ3RoJiZjLnB1c2goZCk6YVtkXSE9PWJbZF0mJmMucHVzaChkKTpjLnB1c2goZCk7Zm9yKGQgaW4gYilkIGluIGF8fGMucHVzaChkKTtyZXR1cm4gY31cbmZ1bmN0aW9uIFlkKCl7dmFyIGE9SCgpO2E9WmQoYSkhPSRkP251bGw6KGE9YS5tYXRjaCgvXFxzQ2hyb21lXFwvKFxcZCspL2kpKSYmMj09YS5sZW5ndGg/cGFyc2VJbnQoYVsxXSwxMCk6bnVsbDtyZXR1cm4gYSYmMzA+YT8hMTohUGJ8fCEkYnx8OTwkYn1mdW5jdGlvbiBhZShhKXthPShhfHxIKCkpLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGEubWF0Y2goL2FuZHJvaWQvKXx8YS5tYXRjaCgvd2Vib3MvKXx8YS5tYXRjaCgvaXBob25lfGlwYWR8aXBvZC8pfHxhLm1hdGNoKC9ibGFja2JlcnJ5Lyl8fGEubWF0Y2goL3dpbmRvd3MgcGhvbmUvKXx8YS5tYXRjaCgvaWVtb2JpbGUvKT8hMDohMX1mdW5jdGlvbiBiZShhKXthPWF8fGsud2luZG93O3RyeXthLmNsb3NlKCl9Y2F0Y2goYil7fX1cbmZ1bmN0aW9uIGNlKGEsYixjKXt2YXIgZD1NYXRoLmZsb29yKDFFOSpNYXRoLnJhbmRvbSgpKS50b1N0cmluZygpO2I9Ynx8NTAwO2M9Y3x8NjAwO3ZhciBlPSh3aW5kb3cuc2NyZWVuLmF2YWlsSGVpZ2h0LWMpLzIsZj0od2luZG93LnNjcmVlbi5hdmFpbFdpZHRoLWIpLzI7Yj17d2lkdGg6YixoZWlnaHQ6Yyx0b3A6MDxlP2U6MCxsZWZ0OjA8Zj9mOjAsbG9jYXRpb246ITAscmVzaXphYmxlOiEwLHN0YXR1c2JhcjohMCx0b29sYmFyOiExfTtjPUgoKS50b0xvd2VyQ2FzZSgpO2QmJihiLnRhcmdldD1kLHkoYyxcImNyaW9zL1wiKSYmKGIudGFyZ2V0PVwiX2JsYW5rXCIpKTtaZChIKCkpPT1kZSYmKGE9YXx8XCJodHRwOi8vbG9jYWxob3N0XCIsYi5zY3JvbGxiYXJzPSEwKTtjPWF8fFwiXCI7KGE9Yil8fChhPXt9KTtkPXdpbmRvdztiPWMgaW5zdGFuY2VvZiB5ZD9jOkNkKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBjLmhyZWY/Yy5ocmVmOlN0cmluZyhjKSk7Yz1hLnRhcmdldHx8Yy50YXJnZXQ7ZT1bXTtcbmZvcihoIGluIGEpc3dpdGNoKGgpe2Nhc2UgXCJ3aWR0aFwiOmNhc2UgXCJoZWlnaHRcIjpjYXNlIFwidG9wXCI6Y2FzZSBcImxlZnRcIjplLnB1c2goaCtcIj1cIithW2hdKTticmVhaztjYXNlIFwidGFyZ2V0XCI6Y2FzZSBcIm5vb3BlbmVyXCI6Y2FzZSBcIm5vcmVmZXJyZXJcIjpicmVhaztkZWZhdWx0OmUucHVzaChoK1wiPVwiKyhhW2hdPzE6MCkpfXZhciBoPWUuam9pbihcIixcIik7KHooXCJpUGhvbmVcIikmJiF6KFwiaVBvZFwiKSYmIXooXCJpUGFkXCIpfHx6KFwiaVBhZFwiKXx8eihcImlQb2RcIikpJiZkLm5hdmlnYXRvciYmZC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSYmYyYmXCJfc2VsZlwiIT1jPyhoPWQuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkFcIiksYiBpbnN0YW5jZW9mIHlkfHxiIGluc3RhbmNlb2YgeWR8fChiPWIubmE/Yi5tYSgpOlN0cmluZyhiKSxCZC50ZXN0KGIpfHwoYj1cImFib3V0OmludmFsaWQjekNsb3N1cmV6XCIpLGI9RGQoYikpLGguaHJlZj1BZChiKSxoLnNldEF0dHJpYnV0ZShcInRhcmdldFwiLGMpLGEubm9yZWZlcnJlciYmXG5oLnNldEF0dHJpYnV0ZShcInJlbFwiLFwibm9yZWZlcnJlclwiKSxhPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudFwiKSxhLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwhMCwhMCxkLDEpLGguZGlzcGF0Y2hFdmVudChhKSxoPXt9KTphLm5vcmVmZXJyZXI/KGg9ZC5vcGVuKFwiXCIsYyxoKSxhPUFkKGIpLGgmJihSYiYmeShhLFwiO1wiKSYmKGE9XCInXCIrYS5yZXBsYWNlKC8nL2csXCIlMjdcIikrXCInXCIpLGgub3BlbmVyPW51bGwscWQoXCJiLzEyMDE0NDEyLCBtZXRhIHRhZyB3aXRoIHNhbml0aXplZCBVUkxcIiksYT0nPG1ldGEgbmFtZT1cInJlZmVycmVyXCIgY29udGVudD1cIm5vLXJlZmVycmVyXCI+PG1ldGEgaHR0cC1lcXVpdj1cInJlZnJlc2hcIiBjb250ZW50PVwiMDsgdXJsPScrTWEoYSkrJ1wiPicsYT1IZChhKSxoLmRvY3VtZW50LndyaXRlKEdkKGEpKSxoLmRvY3VtZW50LmNsb3NlKCkpKTooaD1kLm9wZW4oQWQoYiksYyxoKSkmJmEubm9vcGVuZXImJihoLm9wZW5lcj1udWxsKTtpZihoKXRyeXtoLmZvY3VzKCl9Y2F0Y2gobSl7fXJldHVybiBofVxuZnVuY3Rpb24gZWUoYSl7cmV0dXJuIG5ldyBBKGZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGMoKXtIYygyRTMpLnRoZW4oZnVuY3Rpb24oKXtpZighYXx8YS5jbG9zZWQpYigpO2Vsc2UgcmV0dXJuIGMoKX0pfXJldHVybiBjKCl9KX12YXIgZmU9L15cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM31cXC5cXGR7MSwzfSQvLGdlPS9eW15AXStAW15AXSskLztmdW5jdGlvbiBoZSgpe3ZhciBhPW51bGw7cmV0dXJuKG5ldyBBKGZ1bmN0aW9uKGIpe1wiY29tcGxldGVcIj09ay5kb2N1bWVudC5yZWFkeVN0YXRlP2IoKTooYT1mdW5jdGlvbigpe2IoKX0sc2Mod2luZG93LFwibG9hZFwiLGEpKX0pKS5zKGZ1bmN0aW9uKGIpe0Uod2luZG93LFwibG9hZFwiLGEpO3Rocm93IGI7fSl9XG5mdW5jdGlvbiBpZSgpe3JldHVybiBqZSh2b2lkIDApP2hlKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBuZXcgQShmdW5jdGlvbihhLGIpe3ZhciBjPWsuZG9jdW1lbnQsZD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YihFcnJvcihcIkNvcmRvdmEgZnJhbWV3b3JrIGlzIG5vdCByZWFkeS5cIikpfSwxRTMpO2MuYWRkRXZlbnRMaXN0ZW5lcihcImRldmljZXJlYWR5XCIsZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQoZCk7YSgpfSwhMSl9KX0pOkMoRXJyb3IoXCJDb3Jkb3ZhIG11c3QgcnVuIGluIGFuIEFuZHJvaWQgb3IgaU9TIGZpbGUgc2NoZW1lLlwiKSl9ZnVuY3Rpb24gamUoYSl7YT1hfHxIKCk7cmV0dXJuIShcImZpbGU6XCIhPT1rZSgpfHwhYS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9pcGhvbmV8aXBhZHxpcG9kfGFuZHJvaWQvKSl9ZnVuY3Rpb24gbGUoKXt2YXIgYT1rLndpbmRvdzt0cnl7cmV0dXJuISghYXx8YT09YS50b3ApfWNhdGNoKGIpe3JldHVybiExfX1cbmZ1bmN0aW9uIG1lKCl7cmV0dXJuXCJvYmplY3RcIiE9PXR5cGVvZiBrLndpbmRvdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsuaW1wb3J0U2NyaXB0c31mdW5jdGlvbiBuZSgpe3JldHVybiBmaXJlYmFzZS5JTlRFUk5BTC5oYXNPd25Qcm9wZXJ0eShcInJlYWN0TmF0aXZlXCIpP1wiUmVhY3ROYXRpdmVcIjpmaXJlYmFzZS5JTlRFUk5BTC5oYXNPd25Qcm9wZXJ0eShcIm5vZGVcIik/XCJOb2RlXCI6bWUoKT9cIldvcmtlclwiOlwiQnJvd3NlclwifWZ1bmN0aW9uIG9lKCl7dmFyIGE9bmUoKTtyZXR1cm5cIlJlYWN0TmF0aXZlXCI9PT1hfHxcIk5vZGVcIj09PWF9ZnVuY3Rpb24gcGUoKXtmb3IodmFyIGE9NTAsYj1bXTswPGE7KWIucHVzaChcIjEyMzQ1Njc4OTBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCIuY2hhckF0KE1hdGguZmxvb3IoNjIqTWF0aC5yYW5kb20oKSkpKSxhLS07cmV0dXJuIGIuam9pbihcIlwiKX12YXIgZGU9XCJGaXJlZm94XCIsJGQ9XCJDaHJvbWVcIjtcbmZ1bmN0aW9uIFpkKGEpe3ZhciBiPWEudG9Mb3dlckNhc2UoKTtpZih5KGIsXCJvcGVyYS9cIil8fHkoYixcIm9wci9cIil8fHkoYixcIm9waW9zL1wiKSlyZXR1cm5cIk9wZXJhXCI7aWYoeShiLFwiaWVtb2JpbGVcIikpcmV0dXJuXCJJRU1vYmlsZVwiO2lmKHkoYixcIm1zaWVcIil8fHkoYixcInRyaWRlbnQvXCIpKXJldHVyblwiSUVcIjtpZih5KGIsXCJlZGdlL1wiKSlyZXR1cm5cIkVkZ2VcIjtpZih5KGIsXCJmaXJlZm94L1wiKSlyZXR1cm4gZGU7aWYoeShiLFwic2lsay9cIikpcmV0dXJuXCJTaWxrXCI7aWYoeShiLFwiYmxhY2tiZXJyeVwiKSlyZXR1cm5cIkJsYWNrYmVycnlcIjtpZih5KGIsXCJ3ZWJvc1wiKSlyZXR1cm5cIldlYm9zXCI7aWYoIXkoYixcInNhZmFyaS9cIil8fHkoYixcImNocm9tZS9cIil8fHkoYixcImNyaW9zL1wiKXx8eShiLFwiYW5kcm9pZFwiKSlpZigheShiLFwiY2hyb21lL1wiKSYmIXkoYixcImNyaW9zL1wiKXx8eShiLFwiZWRnZS9cIikpe2lmKHkoYixcImFuZHJvaWRcIikpcmV0dXJuXCJBbmRyb2lkXCI7aWYoKGE9YS5tYXRjaCgvKFthLXpBLVpcXGRcXC5dKylcXC9bYS16QS1aXFxkXFwuXSokLykpJiZcbjI9PWEubGVuZ3RoKXJldHVybiBhWzFdfWVsc2UgcmV0dXJuICRkO2Vsc2UgcmV0dXJuXCJTYWZhcmlcIjtyZXR1cm5cIk90aGVyXCJ9dmFyIHFlPXtVYzpcIkZpcmViYXNlQ29yZS13ZWJcIixXYzpcIkZpcmViYXNlVUktd2ViXCJ9O2Z1bmN0aW9uIHJlKGEsYil7Yj1ifHxbXTt2YXIgYz1bXSxkPXt9LGU7Zm9yKGUgaW4gcWUpZFtxZVtlXV09ITA7Zm9yKGU9MDtlPGIubGVuZ3RoO2UrKylcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRbYltlXV0mJihkZWxldGUgZFtiW2VdXSxjLnB1c2goYltlXSkpO2Muc29ydCgpO2I9YztiLmxlbmd0aHx8KGI9W1wiRmlyZWJhc2VDb3JlLXdlYlwiXSk7Yz1uZSgpO1wiQnJvd3NlclwiPT09Yz8oZD1IKCksYz1aZChkKSk6XCJXb3JrZXJcIj09PWMmJihkPUgoKSxjPVpkKGQpK1wiLVwiK2MpO3JldHVybiBjK1wiL0pzQ29yZS9cIithK1wiL1wiK2Iuam9pbihcIixcIil9ZnVuY3Rpb24gSCgpe3JldHVybiBrLm5hdmlnYXRvciYmay5uYXZpZ2F0b3IudXNlckFnZW50fHxcIlwifVxuZnVuY3Rpb24gSShhLGIpe2E9YS5zcGxpdChcIi5cIik7Yj1ifHxrO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGgmJlwib2JqZWN0XCI9PXR5cGVvZiBiJiZudWxsIT1iO2MrKyliPWJbYVtjXV07YyE9YS5sZW5ndGgmJihiPXZvaWQgMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gc2UoKXt0cnl7dmFyIGE9ay5sb2NhbFN0b3JhZ2UsYj10ZSgpO2lmKGEpcmV0dXJuIGEuc2V0SXRlbShiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oYiksVWQoKT8hIWsuaW5kZXhlZERCOiEwfWNhdGNoKGMpe3JldHVybiBtZSgpJiYhIWsuaW5kZXhlZERCfXJldHVybiExfWZ1bmN0aW9uIHVlKCl7cmV0dXJuKHZlKCl8fFwiY2hyb21lLWV4dGVuc2lvbjpcIj09PWtlKCl8fGplKCkpJiYhb2UoKSYmc2UoKSYmIW1lKCl9ZnVuY3Rpb24gdmUoKXtyZXR1cm5cImh0dHA6XCI9PT1rZSgpfHxcImh0dHBzOlwiPT09a2UoKX1mdW5jdGlvbiBrZSgpe3JldHVybiBrLmxvY2F0aW9uJiZrLmxvY2F0aW9uLnByb3RvY29sfHxudWxsfVxuZnVuY3Rpb24gd2UoYSl7YT1hfHxIKCk7cmV0dXJuIGFlKGEpfHxaZChhKT09ZGU/ITE6ITB9ZnVuY3Rpb24geGUoYSl7cmV0dXJuXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP251bGw6T2QoYSl9ZnVuY3Rpb24geWUoYSl7dmFyIGI9e30sYztmb3IoYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPT1hW2NdJiZ2b2lkIDAhPT1hW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1mdW5jdGlvbiB6ZShhKXtpZihudWxsIT09YSlyZXR1cm4gSlNPTi5wYXJzZShhKX1mdW5jdGlvbiB0ZShhKXtyZXR1cm4gYT9hOk1hdGguZmxvb3IoMUU5Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCl9ZnVuY3Rpb24gQWUoYSl7YT1hfHxIKCk7cmV0dXJuXCJTYWZhcmlcIj09WmQoYSl8fGEudG9Mb3dlckNhc2UoKS5tYXRjaCgvaXBob25lfGlwYWR8aXBvZC8pPyExOiEwfVxuZnVuY3Rpb24gQmUoKXt2YXIgYT1rLl9fX2pzbDtpZihhJiZhLkgpZm9yKHZhciBiIGluIGEuSClpZihhLkhbYl0ucj1hLkhbYl0ucnx8W10sYS5IW2JdLkw9YS5IW2JdLkx8fFtdLGEuSFtiXS5yPWEuSFtiXS5MLmNvbmNhdCgpLGEuQ1ApZm9yKHZhciBjPTA7YzxhLkNQLmxlbmd0aDtjKyspYS5DUFtjXT1udWxsfWZ1bmN0aW9uIENlKGEsYil7aWYoYT5iKXRocm93IEVycm9yKFwiU2hvcnQgZGVsYXkgc2hvdWxkIGJlIGxlc3MgdGhhbiBsb25nIGRlbGF5IVwiKTt0aGlzLmE9YTt0aGlzLmM9YjthPUgoKTtiPW5lKCk7dGhpcy5iPWFlKGEpfHxcIlJlYWN0TmF0aXZlXCI9PT1ifVxuQ2UucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe3ZhciBhPWsubmF2aWdhdG9yO3JldHVybihhJiZcImJvb2xlYW5cIj09PXR5cGVvZiBhLm9uTGluZSYmKHZlKCl8fFwiY2hyb21lLWV4dGVuc2lvbjpcIj09PWtlKCl8fFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYS5jb25uZWN0aW9uKT9hLm9uTGluZToxKT90aGlzLmI/dGhpcy5jOnRoaXMuYTpNYXRoLm1pbig1RTMsdGhpcy5hKX07ZnVuY3Rpb24gRGUoKXt2YXIgYT1rLmRvY3VtZW50O3JldHVybiBhJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEudmlzaWJpbGl0eVN0YXRlP1widmlzaWJsZVwiPT1hLnZpc2liaWxpdHlTdGF0ZTohMH1cbmZ1bmN0aW9uIEVlKCl7dmFyIGE9ay5kb2N1bWVudCxiPW51bGw7cmV0dXJuIERlKCl8fCFhP0IoKToobmV3IEEoZnVuY3Rpb24oYyl7Yj1mdW5jdGlvbigpe0RlKCkmJihhLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsYiwhMSksYygpKX07YS5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLGIsITEpfSkpLnMoZnVuY3Rpb24oYyl7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLGIsITEpO3Rocm93IGM7fSl9ZnVuY3Rpb24gRmUoYSl7dHJ5e3ZhciBiPW5ldyBEYXRlKHBhcnNlSW50KGEsMTApKTtpZighaXNOYU4oYi5nZXRUaW1lKCkpJiYhL1teMC05XS8udGVzdChhKSlyZXR1cm4gYi50b1VUQ1N0cmluZygpfWNhdGNoKGMpe31yZXR1cm4gbnVsbH1mdW5jdGlvbiBHZSgpe3JldHVybiEoIUkoXCJmaXJlYXV0aC5vYXV0aGhlbHBlclwiLGspJiYhSShcImZpcmVhdXRoLmlmcmFtZVwiLGspKX1cbmZ1bmN0aW9uIEhlKCl7dmFyIGE9ay5uYXZpZ2F0b3I7cmV0dXJuIGEmJmEuc2VydmljZVdvcmtlciYmYS5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXJ8fG51bGx9ZnVuY3Rpb24gSWUoKXt2YXIgYT1rLm5hdmlnYXRvcjtyZXR1cm4gYSYmYS5zZXJ2aWNlV29ya2VyP0IoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuc2VydmljZVdvcmtlci5yZWFkeX0pLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIGEuYWN0aXZlfHxudWxsfSkucyhmdW5jdGlvbigpe3JldHVybiBudWxsfSk6QihudWxsKX07dmFyIEplPXt9O2Z1bmN0aW9uIEtlKGEpe0plW2FdfHwoSmVbYV09ITAsXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oYSkpfTt2YXIgTGU7dHJ5e3ZhciBNZT17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWUsXCJhYmNkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOjF9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWUsXCJhYmNkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOjJ9KTtMZT0yPT1NZS5hYmNkfWNhdGNoKGEpe0xlPSExfWZ1bmN0aW9uIEooYSxiLGMpe0xlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOmN9KTphW2JdPWN9ZnVuY3Rpb24gSyhhLGIpe2lmKGIpZm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmSihhLGMsYltjXSl9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9e307SyhiLGEpO3JldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPXt9LGM7Zm9yKGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFBlKGEsYil7aWYoIWJ8fCFiLmxlbmd0aClyZXR1cm4hMDtpZighYSlyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7dmFyIGQ9YVtiW2NdXTtpZih2b2lkIDA9PT1kfHxudWxsPT09ZHx8XCJcIj09PWQpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gUWUoYSl7dmFyIGI9YTtpZihcIm9iamVjdFwiPT10eXBlb2YgYSYmbnVsbCE9YSl7Yj1cImxlbmd0aFwiaW4gYT9bXTp7fTtmb3IodmFyIGMgaW4gYSlKKGIsYyxRZShhW2NdKSl9cmV0dXJuIGJ9O2Z1bmN0aW9uIFJlKGEpe3ZhciBiPXt9LGM9YVtTZV0sZD1hW1RlXTthPWFbVWVdO2lmKCFhfHxhIT1WZSYmIWMpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHByb3ZpZGVyIHVzZXIgaW5mbyFcIik7YltXZV09ZHx8bnVsbDtiW1hlXT1jfHxudWxsO0oodGhpcyxZZSxhKTtKKHRoaXMsWmUsUWUoYikpfXZhciBWZT1cIkVNQUlMX1NJR05JTlwiLFNlPVwiZW1haWxcIixUZT1cIm5ld0VtYWlsXCIsVWU9XCJyZXF1ZXN0VHlwZVwiLFhlPVwiZW1haWxcIixXZT1cImZyb21FbWFpbFwiLFplPVwiZGF0YVwiLFllPVwib3BlcmF0aW9uXCI7ZnVuY3Rpb24gTChhLGIpe3RoaXMuY29kZT0kZSthO3RoaXMubWVzc2FnZT1ifHxhZlthXXx8XCJcIn10KEwsRXJyb3IpO0wucHJvdG90eXBlLkM9ZnVuY3Rpb24oKXtyZXR1cm57Y29kZTp0aGlzLmNvZGUsbWVzc2FnZTp0aGlzLm1lc3NhZ2V9fTtMLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5DKCl9O2Z1bmN0aW9uIGJmKGEpe3ZhciBiPWEmJmEuY29kZTtyZXR1cm4gYj9uZXcgTChiLnN1YnN0cmluZygkZS5sZW5ndGgpLGEubWVzc2FnZSk6bnVsbH1cbnZhciAkZT1cImF1dGgvXCIsYWY9e1wiYXJndW1lbnQtZXJyb3JcIjpcIlwiLFwiYXBwLW5vdC1hdXRob3JpemVkXCI6XCJUaGlzIGFwcCwgaWRlbnRpZmllZCBieSB0aGUgZG9tYWluIHdoZXJlIGl0J3MgaG9zdGVkLCBpcyBub3QgYXV0aG9yaXplZCB0byB1c2UgRmlyZWJhc2UgQXV0aGVudGljYXRpb24gd2l0aCB0aGUgcHJvdmlkZWQgQVBJIGtleS4gUmV2aWV3IHlvdXIga2V5IGNvbmZpZ3VyYXRpb24gaW4gdGhlIEdvb2dsZSBBUEkgY29uc29sZS5cIixcImFwcC1ub3QtaW5zdGFsbGVkXCI6XCJUaGUgcmVxdWVzdGVkIG1vYmlsZSBhcHBsaWNhdGlvbiBjb3JyZXNwb25kaW5nIHRvIHRoZSBpZGVudGlmaWVyIChBbmRyb2lkIHBhY2thZ2UgbmFtZSBvciBpT1MgYnVuZGxlIElEKSBwcm92aWRlZCBpcyBub3QgaW5zdGFsbGVkIG9uIHRoaXMgZGV2aWNlLlwiLFwiY2FwdGNoYS1jaGVjay1mYWlsZWRcIjpcIlRoZSByZUNBUFRDSEEgcmVzcG9uc2UgdG9rZW4gcHJvdmlkZWQgaXMgZWl0aGVyIGludmFsaWQsIGV4cGlyZWQsIGFscmVhZHkgdXNlZCBvciB0aGUgZG9tYWluIGFzc29jaWF0ZWQgd2l0aCBpdCBkb2VzIG5vdCBtYXRjaCB0aGUgbGlzdCBvZiB3aGl0ZWxpc3RlZCBkb21haW5zLlwiLFxuXCJjb2RlLWV4cGlyZWRcIjpcIlRoZSBTTVMgY29kZSBoYXMgZXhwaXJlZC4gUGxlYXNlIHJlLXNlbmQgdGhlIHZlcmlmaWNhdGlvbiBjb2RlIHRvIHRyeSBhZ2Fpbi5cIixcImNvcmRvdmEtbm90LXJlYWR5XCI6XCJDb3Jkb3ZhIGZyYW1ld29yayBpcyBub3QgcmVhZHkuXCIsXCJjb3JzLXVuc3VwcG9ydGVkXCI6XCJUaGlzIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC5cIixcImNyZWRlbnRpYWwtYWxyZWFkeS1pbi11c2VcIjpcIlRoaXMgY3JlZGVudGlhbCBpcyBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCBhIGRpZmZlcmVudCB1c2VyIGFjY291bnQuXCIsXCJjdXN0b20tdG9rZW4tbWlzbWF0Y2hcIjpcIlRoZSBjdXN0b20gdG9rZW4gY29ycmVzcG9uZHMgdG8gYSBkaWZmZXJlbnQgYXVkaWVuY2UuXCIsXCJyZXF1aXJlcy1yZWNlbnQtbG9naW5cIjpcIlRoaXMgb3BlcmF0aW9uIGlzIHNlbnNpdGl2ZSBhbmQgcmVxdWlyZXMgcmVjZW50IGF1dGhlbnRpY2F0aW9uLiBMb2cgaW4gYWdhaW4gYmVmb3JlIHJldHJ5aW5nIHRoaXMgcmVxdWVzdC5cIixcblwiZHluYW1pYy1saW5rLW5vdC1hY3RpdmF0ZWRcIjpcIlBsZWFzZSBhY3RpdmF0ZSBEeW5hbWljIExpbmtzIGluIHRoZSBGaXJlYmFzZSBDb25zb2xlIGFuZCBhZ3JlZSB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMuXCIsXCJlbWFpbC1hbHJlYWR5LWluLXVzZVwiOlwiVGhlIGVtYWlsIGFkZHJlc3MgaXMgYWxyZWFkeSBpbiB1c2UgYnkgYW5vdGhlciBhY2NvdW50LlwiLFwiZXhwaXJlZC1hY3Rpb24tY29kZVwiOlwiVGhlIGFjdGlvbiBjb2RlIGhhcyBleHBpcmVkLiBcIixcImNhbmNlbGxlZC1wb3B1cC1yZXF1ZXN0XCI6XCJUaGlzIG9wZXJhdGlvbiBoYXMgYmVlbiBjYW5jZWxsZWQgZHVlIHRvIGFub3RoZXIgY29uZmxpY3RpbmcgcG9wdXAgYmVpbmcgb3BlbmVkLlwiLFwiaW50ZXJuYWwtZXJyb3JcIjpcIkFuIGludGVybmFsIGVycm9yIGhhcyBvY2N1cnJlZC5cIixcImludmFsaWQtYXBwLWNyZWRlbnRpYWxcIjpcIlRoZSBwaG9uZSB2ZXJpZmljYXRpb24gcmVxdWVzdCBjb250YWlucyBhbiBpbnZhbGlkIGFwcGxpY2F0aW9uIHZlcmlmaWVyLiBUaGUgcmVDQVBUQ0hBIHRva2VuIHJlc3BvbnNlIGlzIGVpdGhlciBpbnZhbGlkIG9yIGV4cGlyZWQuXCIsXG5cImludmFsaWQtYXBwLWlkXCI6XCJUaGUgbW9iaWxlIGFwcCBpZGVudGlmaWVyIGlzIG5vdCByZWdpc3RlZCBmb3IgdGhlIGN1cnJlbnQgcHJvamVjdC5cIixcImludmFsaWQtdXNlci10b2tlblwiOlwiVGhpcyB1c2VyJ3MgY3JlZGVudGlhbCBpc24ndCB2YWxpZCBmb3IgdGhpcyBwcm9qZWN0LiBUaGlzIGNhbiBoYXBwZW4gaWYgdGhlIHVzZXIncyB0b2tlbiBoYXMgYmVlbiB0YW1wZXJlZCB3aXRoLCBvciBpZiB0aGUgdXNlciBpc24ndCBmb3IgdGhlIHByb2plY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgQVBJIGtleS5cIixcImludmFsaWQtYXV0aC1ldmVudFwiOlwiQW4gaW50ZXJuYWwgZXJyb3IgaGFzIG9jY3VycmVkLlwiLFwiaW52YWxpZC12ZXJpZmljYXRpb24tY29kZVwiOlwiVGhlIFNNUyB2ZXJpZmljYXRpb24gY29kZSB1c2VkIHRvIGNyZWF0ZSB0aGUgcGhvbmUgYXV0aCBjcmVkZW50aWFsIGlzIGludmFsaWQuIFBsZWFzZSByZXNlbmQgdGhlIHZlcmlmaWNhdGlvbiBjb2RlIHNtcyBhbmQgYmUgc3VyZSB1c2UgdGhlIHZlcmlmaWNhdGlvbiBjb2RlIHByb3ZpZGVkIGJ5IHRoZSB1c2VyLlwiLFxuXCJpbnZhbGlkLWNvbnRpbnVlLXVyaVwiOlwiVGhlIGNvbnRpbnVlIFVSTCBwcm92aWRlZCBpbiB0aGUgcmVxdWVzdCBpcyBpbnZhbGlkLlwiLFwiaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIjpcIlRoZSBmb2xsb3dpbmcgQ29yZG92YSBwbHVnaW5zIG11c3QgYmUgaW5zdGFsbGVkIHRvIGVuYWJsZSBPQXV0aCBzaWduLWluOiBjb3Jkb3ZhLXBsdWdpbi1idWlsZGluZm8sIGNvcmRvdmEtdW5pdmVyc2FsLWxpbmtzLXBsdWdpbiwgY29yZG92YS1wbHVnaW4tYnJvd3NlcnRhYiwgY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyIGFuZCBjb3Jkb3ZhLXBsdWdpbi1jdXN0b211cmxzY2hlbWUuXCIsXCJpbnZhbGlkLWN1c3RvbS10b2tlblwiOlwiVGhlIGN1c3RvbSB0b2tlbiBmb3JtYXQgaXMgaW5jb3JyZWN0LiBQbGVhc2UgY2hlY2sgdGhlIGRvY3VtZW50YXRpb24uXCIsXCJpbnZhbGlkLWR5bmFtaWMtbGluay1kb21haW5cIjpcIlRoZSBwcm92aWRlZCBkeW5hbWljIGxpbmsgZG9tYWluIGlzIG5vdCBjb25maWd1cmVkIG9yIGF1dGhvcml6ZWQgZm9yIHRoZSBjdXJyZW50IHByb2plY3QuXCIsXG5cImludmFsaWQtZW1haWxcIjpcIlRoZSBlbWFpbCBhZGRyZXNzIGlzIGJhZGx5IGZvcm1hdHRlZC5cIixcImludmFsaWQtYXBpLWtleVwiOlwiWW91ciBBUEkga2V5IGlzIGludmFsaWQsIHBsZWFzZSBjaGVjayB5b3UgaGF2ZSBjb3BpZWQgaXQgY29ycmVjdGx5LlwiLFwiaW52YWxpZC1jZXJ0LWhhc2hcIjpcIlRoZSBTSEEtMSBjZXJ0aWZpY2F0ZSBoYXNoIHByb3ZpZGVkIGlzIGludmFsaWQuXCIsXCJpbnZhbGlkLWNyZWRlbnRpYWxcIjpcIlRoZSBzdXBwbGllZCBhdXRoIGNyZWRlbnRpYWwgaXMgbWFsZm9ybWVkIG9yIGhhcyBleHBpcmVkLlwiLFwiaW52YWxpZC1wZXJzaXN0ZW5jZS10eXBlXCI6XCJUaGUgc3BlY2lmaWVkIHBlcnNpc3RlbmNlIHR5cGUgaXMgaW52YWxpZC4gSXQgY2FuIG9ubHkgYmUgbG9jYWwsIHNlc3Npb24gb3Igbm9uZS5cIixcImludmFsaWQtbWVzc2FnZS1wYXlsb2FkXCI6XCJUaGUgZW1haWwgdGVtcGxhdGUgY29ycmVzcG9uZGluZyB0byB0aGlzIGFjdGlvbiBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgaW4gaXRzIG1lc3NhZ2UuIFBsZWFzZSBmaXggYnkgZ29pbmcgdG8gdGhlIEF1dGggZW1haWwgdGVtcGxhdGVzIHNlY3Rpb24gaW4gdGhlIEZpcmViYXNlIENvbnNvbGUuXCIsXG5cImludmFsaWQtb2F1dGgtcHJvdmlkZXJcIjpcIkVtYWlsQXV0aFByb3ZpZGVyIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgb3BlcmF0aW9uLiBUaGlzIG9wZXJhdGlvbiBvbmx5IHN1cHBvcnRzIE9BdXRoIHByb3ZpZGVycy5cIixcImludmFsaWQtb2F1dGgtY2xpZW50LWlkXCI6XCJUaGUgT0F1dGggY2xpZW50IElEIHByb3ZpZGVkIGlzIGVpdGhlciBpbnZhbGlkIG9yIGRvZXMgbm90IG1hdGNoIHRoZSBzcGVjaWZpZWQgQVBJIGtleS5cIixcInVuYXV0aG9yaXplZC1kb21haW5cIjpcIlRoaXMgZG9tYWluIGlzIG5vdCBhdXRob3JpemVkIGZvciBPQXV0aCBvcGVyYXRpb25zIGZvciB5b3VyIEZpcmViYXNlIHByb2plY3QuIEVkaXQgdGhlIGxpc3Qgb2YgYXV0aG9yaXplZCBkb21haW5zIGZyb20gdGhlIEZpcmViYXNlIGNvbnNvbGUuXCIsXCJpbnZhbGlkLWFjdGlvbi1jb2RlXCI6XCJUaGUgYWN0aW9uIGNvZGUgaXMgaW52YWxpZC4gVGhpcyBjYW4gaGFwcGVuIGlmIHRoZSBjb2RlIGlzIG1hbGZvcm1lZCwgZXhwaXJlZCwgb3IgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiLFxuXCJ3cm9uZy1wYXNzd29yZFwiOlwiVGhlIHBhc3N3b3JkIGlzIGludmFsaWQgb3IgdGhlIHVzZXIgZG9lcyBub3QgaGF2ZSBhIHBhc3N3b3JkLlwiLFwiaW52YWxpZC1waG9uZS1udW1iZXJcIjpcIlRoZSBmb3JtYXQgb2YgdGhlIHBob25lIG51bWJlciBwcm92aWRlZCBpcyBpbmNvcnJlY3QuIFBsZWFzZSBlbnRlciB0aGUgcGhvbmUgbnVtYmVyIGluIGEgZm9ybWF0IHRoYXQgY2FuIGJlIHBhcnNlZCBpbnRvIEUuMTY0IGZvcm1hdC4gRS4xNjQgcGhvbmUgbnVtYmVycyBhcmUgd3JpdHRlbiBpbiB0aGUgZm9ybWF0IFsrXVtjb3VudHJ5IGNvZGVdW3N1YnNjcmliZXIgbnVtYmVyIGluY2x1ZGluZyBhcmVhIGNvZGVdLlwiLFwiaW52YWxpZC1wcm92aWRlci1pZFwiOlwiVGhlIHNwZWNpZmllZCBwcm92aWRlciBJRCBpcyBpbnZhbGlkLlwiLFwiaW52YWxpZC1yZWNpcGllbnQtZW1haWxcIjpcIlRoZSBlbWFpbCBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYWN0aW9uIGZhaWxlZCB0byBzZW5kIGFzIHRoZSBwcm92aWRlZCByZWNpcGllbnQgZW1haWwgYWRkcmVzcyBpcyBpbnZhbGlkLlwiLFxuXCJpbnZhbGlkLXNlbmRlclwiOlwiVGhlIGVtYWlsIHRlbXBsYXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBhY3Rpb24gY29udGFpbnMgYW4gaW52YWxpZCBzZW5kZXIgZW1haWwgb3IgbmFtZS4gUGxlYXNlIGZpeCBieSBnb2luZyB0byB0aGUgQXV0aCBlbWFpbCB0ZW1wbGF0ZXMgc2VjdGlvbiBpbiB0aGUgRmlyZWJhc2UgQ29uc29sZS5cIixcImludmFsaWQtdmVyaWZpY2F0aW9uLWlkXCI6XCJUaGUgdmVyaWZpY2F0aW9uIElEIHVzZWQgdG8gY3JlYXRlIHRoZSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwgaXMgaW52YWxpZC5cIixcIm1pc3NpbmctYW5kcm9pZC1wa2ctbmFtZVwiOlwiQW4gQW5kcm9pZCBQYWNrYWdlIE5hbWUgbXVzdCBiZSBwcm92aWRlZCBpZiB0aGUgQW5kcm9pZCBBcHAgaXMgcmVxdWlyZWQgdG8gYmUgaW5zdGFsbGVkLlwiLFwiYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkXCI6XCJCZSBzdXJlIHRvIGluY2x1ZGUgYXV0aERvbWFpbiB3aGVuIGNhbGxpbmcgZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCgpLCBieSBmb2xsb3dpbmcgdGhlIGluc3RydWN0aW9ucyBpbiB0aGUgRmlyZWJhc2UgY29uc29sZS5cIixcblwibWlzc2luZy1hcHAtY3JlZGVudGlhbFwiOlwiVGhlIHBob25lIHZlcmlmaWNhdGlvbiByZXF1ZXN0IGlzIG1pc3NpbmcgYW4gYXBwbGljYXRpb24gdmVyaWZpZXIgYXNzZXJ0aW9uLiBBIHJlQ0FQVENIQSByZXNwb25zZSB0b2tlbiBuZWVkcyB0byBiZSBwcm92aWRlZC5cIixcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGVcIjpcIlRoZSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwgd2FzIGNyZWF0ZWQgd2l0aCBhbiBlbXB0eSBTTVMgdmVyaWZpY2F0aW9uIGNvZGUuXCIsXCJtaXNzaW5nLWNvbnRpbnVlLXVyaVwiOlwiQSBjb250aW51ZSBVUkwgbXVzdCBiZSBwcm92aWRlZCBpbiB0aGUgcmVxdWVzdC5cIixcIm1pc3NpbmctaWZyYW1lLXN0YXJ0XCI6XCJBbiBpbnRlcm5hbCBlcnJvciBoYXMgb2NjdXJyZWQuXCIsXCJtaXNzaW5nLWlvcy1idW5kbGUtaWRcIjpcIkFuIGlPUyBCdW5kbGUgSUQgbXVzdCBiZSBwcm92aWRlZCBpZiBhbiBBcHAgU3RvcmUgSUQgaXMgcHJvdmlkZWQuXCIsXCJtaXNzaW5nLW9yLWludmFsaWQtbm9uY2VcIjpcIlRoZSBPSURDIElEIHRva2VuIHJlcXVpcmVzIGEgdmFsaWQgdW5oYXNoZWQgbm9uY2UuXCIsXG5cIm1pc3NpbmctcGhvbmUtbnVtYmVyXCI6XCJUbyBzZW5kIHZlcmlmaWNhdGlvbiBjb2RlcywgcHJvdmlkZSBhIHBob25lIG51bWJlciBmb3IgdGhlIHJlY2lwaWVudC5cIixcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWlkXCI6XCJUaGUgcGhvbmUgYXV0aCBjcmVkZW50aWFsIHdhcyBjcmVhdGVkIHdpdGggYW4gZW1wdHkgdmVyaWZpY2F0aW9uIElELlwiLFwiYXBwLWRlbGV0ZWRcIjpcIlRoaXMgaW5zdGFuY2Ugb2YgRmlyZWJhc2VBcHAgaGFzIGJlZW4gZGVsZXRlZC5cIixcImFjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWxcIjpcIkFuIGFjY291bnQgYWxyZWFkeSBleGlzdHMgd2l0aCB0aGUgc2FtZSBlbWFpbCBhZGRyZXNzIGJ1dCBkaWZmZXJlbnQgc2lnbi1pbiBjcmVkZW50aWFscy4gU2lnbiBpbiB1c2luZyBhIHByb3ZpZGVyIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGVtYWlsIGFkZHJlc3MuXCIsXCJuZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI6XCJBIG5ldHdvcmsgZXJyb3IgKHN1Y2ggYXMgdGltZW91dCwgaW50ZXJydXB0ZWQgY29ubmVjdGlvbiBvciB1bnJlYWNoYWJsZSBob3N0KSBoYXMgb2NjdXJyZWQuXCIsXG5cIm5vLWF1dGgtZXZlbnRcIjpcIkFuIGludGVybmFsIGVycm9yIGhhcyBvY2N1cnJlZC5cIixcIm5vLXN1Y2gtcHJvdmlkZXJcIjpcIlVzZXIgd2FzIG5vdCBsaW5rZWQgdG8gYW4gYWNjb3VudCB3aXRoIHRoZSBnaXZlbiBwcm92aWRlci5cIixcIm51bGwtdXNlclwiOlwiQSBudWxsIHVzZXIgb2JqZWN0IHdhcyBwcm92aWRlZCBhcyB0aGUgYXJndW1lbnQgZm9yIGFuIG9wZXJhdGlvbiB3aGljaCByZXF1aXJlcyBhIG5vbi1udWxsIHVzZXIgb2JqZWN0LlwiLFwib3BlcmF0aW9uLW5vdC1hbGxvd2VkXCI6XCJUaGUgZ2l2ZW4gc2lnbi1pbiBwcm92aWRlciBpcyBkaXNhYmxlZCBmb3IgdGhpcyBGaXJlYmFzZSBwcm9qZWN0LiBFbmFibGUgaXQgaW4gdGhlIEZpcmViYXNlIGNvbnNvbGUsIHVuZGVyIHRoZSBzaWduLWluIG1ldGhvZCB0YWIgb2YgdGhlIEF1dGggc2VjdGlvbi5cIixcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIjonVGhpcyBvcGVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGUgZW52aXJvbm1lbnQgdGhpcyBhcHBsaWNhdGlvbiBpcyBydW5uaW5nIG9uLiBcImxvY2F0aW9uLnByb3RvY29sXCIgbXVzdCBiZSBodHRwLCBodHRwcyBvciBjaHJvbWUtZXh0ZW5zaW9uIGFuZCB3ZWIgc3RvcmFnZSBtdXN0IGJlIGVuYWJsZWQuJyxcblwicG9wdXAtYmxvY2tlZFwiOlwiVW5hYmxlIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gd2l0aCB0aGUgcG9wdXAuIEl0IG1heSBoYXZlIGJlZW4gYmxvY2tlZCBieSB0aGUgYnJvd3Nlci5cIixcInBvcHVwLWNsb3NlZC1ieS11c2VyXCI6XCJUaGUgcG9wdXAgaGFzIGJlZW4gY2xvc2VkIGJ5IHRoZSB1c2VyIGJlZm9yZSBmaW5hbGl6aW5nIHRoZSBvcGVyYXRpb24uXCIsXCJwcm92aWRlci1hbHJlYWR5LWxpbmtlZFwiOlwiVXNlciBjYW4gb25seSBiZSBsaW5rZWQgdG8gb25lIGlkZW50aXR5IGZvciB0aGUgZ2l2ZW4gcHJvdmlkZXIuXCIsXCJxdW90YS1leGNlZWRlZFwiOlwiVGhlIHByb2plY3QncyBxdW90YSBmb3IgdGhpcyBvcGVyYXRpb24gaGFzIGJlZW4gZXhjZWVkZWQuXCIsXCJyZWRpcmVjdC1jYW5jZWxsZWQtYnktdXNlclwiOlwiVGhlIHJlZGlyZWN0IG9wZXJhdGlvbiBoYXMgYmVlbiBjYW5jZWxsZWQgYnkgdGhlIHVzZXIgYmVmb3JlIGZpbmFsaXppbmcuXCIsXCJyZWRpcmVjdC1vcGVyYXRpb24tcGVuZGluZ1wiOlwiQSByZWRpcmVjdCBzaWduLWluIG9wZXJhdGlvbiBpcyBhbHJlYWR5IHBlbmRpbmcuXCIsXG5cInJlamVjdGVkLWNyZWRlbnRpYWxcIjpcIlRoZSByZXF1ZXN0IGNvbnRhaW5zIG1hbGZvcm1lZCBvciBtaXNtYXRjaGluZyBjcmVkZW50aWFscy5cIix0aW1lb3V0OlwiVGhlIG9wZXJhdGlvbiBoYXMgdGltZWQgb3V0LlwiLFwidXNlci10b2tlbi1leHBpcmVkXCI6XCJUaGUgdXNlcidzIGNyZWRlbnRpYWwgaXMgbm8gbG9uZ2VyIHZhbGlkLiBUaGUgdXNlciBtdXN0IHNpZ24gaW4gYWdhaW4uXCIsXCJ0b28tbWFueS1yZXF1ZXN0c1wiOlwiV2UgaGF2ZSBibG9ja2VkIGFsbCByZXF1ZXN0cyBmcm9tIHRoaXMgZGV2aWNlIGR1ZSB0byB1bnVzdWFsIGFjdGl2aXR5LiBUcnkgYWdhaW4gbGF0ZXIuXCIsXCJ1bmF1dGhvcml6ZWQtY29udGludWUtdXJpXCI6XCJUaGUgZG9tYWluIG9mIHRoZSBjb250aW51ZSBVUkwgaXMgbm90IHdoaXRlbGlzdGVkLiAgUGxlYXNlIHdoaXRlbGlzdCB0aGUgZG9tYWluIGluIHRoZSBGaXJlYmFzZSBjb25zb2xlLlwiLFwidW5zdXBwb3J0ZWQtcGVyc2lzdGVuY2UtdHlwZVwiOlwiVGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgc3BlY2lmaWVkIHBlcnNpc3RlbmNlIHR5cGUuXCIsXG5cInVzZXItY2FuY2VsbGVkXCI6XCJVc2VyIGRpZCBub3QgZ3JhbnQgeW91ciBhcHBsaWNhdGlvbiB0aGUgcGVybWlzc2lvbnMgaXQgcmVxdWVzdGVkLlwiLFwidXNlci1ub3QtZm91bmRcIjpcIlRoZXJlIGlzIG5vIHVzZXIgcmVjb3JkIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBpZGVudGlmaWVyLiBUaGUgdXNlciBtYXkgaGF2ZSBiZWVuIGRlbGV0ZWQuXCIsXCJ1c2VyLWRpc2FibGVkXCI6XCJUaGUgdXNlciBhY2NvdW50IGhhcyBiZWVuIGRpc2FibGVkIGJ5IGFuIGFkbWluaXN0cmF0b3IuXCIsXCJ1c2VyLW1pc21hdGNoXCI6XCJUaGUgc3VwcGxpZWQgY3JlZGVudGlhbHMgZG8gbm90IGNvcnJlc3BvbmQgdG8gdGhlIHByZXZpb3VzbHkgc2lnbmVkIGluIHVzZXIuXCIsXCJ1c2VyLXNpZ25lZC1vdXRcIjpcIlwiLFwid2Vhay1wYXNzd29yZFwiOlwiVGhlIHBhc3N3b3JkIG11c3QgYmUgNiBjaGFyYWN0ZXJzIGxvbmcgb3IgbW9yZS5cIixcIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCI6XCJUaGlzIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZCBvciAzcmQgcGFydHkgY29va2llcyBhbmQgZGF0YSBtYXkgYmUgZGlzYWJsZWQuXCJ9O2Z1bmN0aW9uIGNmKGEpe3ZhciBiPWFbZGZdO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYil0aHJvdyBuZXcgTChcIm1pc3NpbmctY29udGludWUtdXJpXCIpO2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYnx8XCJzdHJpbmdcIj09PXR5cGVvZiBiJiYhYi5sZW5ndGgpdGhyb3cgbmV3IEwoXCJpbnZhbGlkLWNvbnRpbnVlLXVyaVwiKTt0aGlzLmg9Yjt0aGlzLmI9dGhpcy5hPW51bGw7dGhpcy5nPSExO3ZhciBjPWFbZWZdO2lmKGMmJlwib2JqZWN0XCI9PT10eXBlb2YgYyl7Yj1jW2ZmXTt2YXIgZD1jW2dmXTtjPWNbaGZdO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmYi5sZW5ndGgpe3RoaXMuYT1iO2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZCYmXCJib29sZWFuXCIhPT10eXBlb2YgZCl0aHJvdyBuZXcgTChcImFyZ3VtZW50LWVycm9yXCIsZ2YrXCIgcHJvcGVydHkgbXVzdCBiZSBhIGJvb2xlYW4gd2hlbiBzcGVjaWZpZWQuXCIpO3RoaXMuZz0hIWQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiYoXCJzdHJpbmdcIiE9PVxudHlwZW9mIGN8fFwic3RyaW5nXCI9PT10eXBlb2YgYyYmIWMubGVuZ3RoKSl0aHJvdyBuZXcgTChcImFyZ3VtZW50LWVycm9yXCIsaGYrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBlbXB0eSBzdHJpbmcgd2hlbiBzcGVjaWZpZWQuXCIpO3RoaXMuYj1jfHxudWxsfWVsc2V7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBiKXRocm93IG5ldyBMKFwiYXJndW1lbnQtZXJyb3JcIixmZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgbm9uIGVtcHR5IHN0cmluZyB3aGVuIHNwZWNpZmllZC5cIik7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkfHxcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMpdGhyb3cgbmV3IEwoXCJtaXNzaW5nLWFuZHJvaWQtcGtnLW5hbWVcIik7fX1lbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyl0aHJvdyBuZXcgTChcImFyZ3VtZW50LWVycm9yXCIsZWYrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBudWxsIG9iamVjdCB3aGVuIHNwZWNpZmllZC5cIik7dGhpcy5mPW51bGw7aWYoKGI9YVtqZl0pJiZcIm9iamVjdFwiPT09XG50eXBlb2YgYilpZihiPWJba2ZdLFwic3RyaW5nXCI9PT10eXBlb2YgYiYmYi5sZW5ndGgpdGhpcy5mPWI7ZWxzZXtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGIpdGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLGtmK1wiIHByb3BlcnR5IG11c3QgYmUgYSBub24gZW1wdHkgc3RyaW5nIHdoZW4gc3BlY2lmaWVkLlwiKTt9ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGIpdGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLGpmK1wiIHByb3BlcnR5IG11c3QgYmUgYSBub24gbnVsbCBvYmplY3Qgd2hlbiBzcGVjaWZpZWQuXCIpO2I9YVtsZl07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBiJiZcImJvb2xlYW5cIiE9PXR5cGVvZiBiKXRocm93IG5ldyBMKFwiYXJndW1lbnQtZXJyb3JcIixsZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgYm9vbGVhbiB3aGVuIHNwZWNpZmllZC5cIik7dGhpcy5jPSEhYjthPWFbbWZdO2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYSYmKFwic3RyaW5nXCIhPT10eXBlb2YgYXx8XCJzdHJpbmdcIj09PVxudHlwZW9mIGEmJiFhLmxlbmd0aCkpdGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLG1mK1wiIHByb3BlcnR5IG11c3QgYmUgYSBub24gZW1wdHkgc3RyaW5nIHdoZW4gc3BlY2lmaWVkLlwiKTt0aGlzLmk9YXx8bnVsbH12YXIgZWY9XCJhbmRyb2lkXCIsbWY9XCJkeW5hbWljTGlua0RvbWFpblwiLGxmPVwiaGFuZGxlQ29kZUluQXBwXCIsamY9XCJpT1NcIixkZj1cInVybFwiLGdmPVwiaW5zdGFsbEFwcFwiLGhmPVwibWluaW11bVZlcnNpb25cIixmZj1cInBhY2thZ2VOYW1lXCIsa2Y9XCJidW5kbGVJZFwiO1xuZnVuY3Rpb24gbmYoYSl7dmFyIGI9e307Yi5jb250aW51ZVVybD1hLmg7Yi5jYW5IYW5kbGVDb2RlSW5BcHA9YS5jO2lmKGIuYW5kcm9pZFBhY2thZ2VOYW1lPWEuYSliLmFuZHJvaWRNaW5pbXVtVmVyc2lvbj1hLmIsYi5hbmRyb2lkSW5zdGFsbEFwcD1hLmc7Yi5pT1NCdW5kbGVJZD1hLmY7Yi5keW5hbWljTGlua0RvbWFpbj1hLmk7Zm9yKHZhciBjIGluIGIpbnVsbD09PWJbY10mJmRlbGV0ZSBiW2NdO3JldHVybiBifTtmdW5jdGlvbiBvZihhKXtyZXR1cm4gQ2EoYSxmdW5jdGlvbihhKXthPWEudG9TdHJpbmcoMTYpO3JldHVybiAxPGEubGVuZ3RoP2E6XCIwXCIrYX0pLmpvaW4oXCJcIil9O3ZhciBwZj1udWxsLHFmPW51bGw7ZnVuY3Rpb24gcmYoYSl7dmFyIGI9XCJcIjtzZihhLGZ1bmN0aW9uKGEpe2IrPVN0cmluZy5mcm9tQ2hhckNvZGUoYSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBzZihhLGIpe2Z1bmN0aW9uIGMoYil7Zm9yKDtkPGEubGVuZ3RoOyl7dmFyIGM9YS5jaGFyQXQoZCsrKSxlPXFmW2NdO2lmKG51bGwhPWUpcmV0dXJuIGU7aWYoIS9eW1xcc1xceGEwXSokLy50ZXN0KGMpKXRocm93IEVycm9yKFwiVW5rbm93biBiYXNlNjQgZW5jb2RpbmcgYXQgY2hhcjogXCIrYyk7fXJldHVybiBifXRmKCk7Zm9yKHZhciBkPTA7Oyl7dmFyIGU9YygtMSksZj1jKDApLGg9Yyg2NCksbT1jKDY0KTtpZig2ND09PW0mJi0xPT09ZSlicmVhaztiKGU8PDJ8Zj4+NCk7NjQhPWgmJihiKGY8PDQmMjQwfGg+PjIpLDY0IT1tJiZiKGg8PDYmMTkyfG0pKX19XG5mdW5jdGlvbiB0Zigpe2lmKCFwZil7cGY9e307cWY9e307Zm9yKHZhciBhPTA7NjU+YTthKyspcGZbYV09XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLmNoYXJBdChhKSxxZltwZlthXV09YSw2Mjw9YSYmKHFmW1wiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktXy5cIi5jaGFyQXQoYSldPWEpfX07ZnVuY3Rpb24gdWYoYSl7dGhpcy5jPWEuc3ViO29hKCk7dGhpcy5hPWEucHJvdmlkZXJfaWR8fGEuZmlyZWJhc2UmJmEuZmlyZWJhc2Uuc2lnbl9pbl9wcm92aWRlcnx8bnVsbDt0aGlzLmI9ISFhLmlzX2Fub255bW91c3x8XCJhbm9ueW1vdXNcIj09dGhpcy5hfXVmLnByb3RvdHlwZS5mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYn07ZnVuY3Rpb24gdmYoYSl7cmV0dXJuKGE9d2YoYSkpJiZhLnN1YiYmYS5pc3MmJmEuYXVkJiZhLmV4cD9uZXcgdWYoYSk6bnVsbH1mdW5jdGlvbiB3ZihhKXtpZighYSlyZXR1cm4gbnVsbDthPWEuc3BsaXQoXCIuXCIpO2lmKDMhPWEubGVuZ3RoKXJldHVybiBudWxsO2E9YVsxXTtmb3IodmFyIGI9KDQtYS5sZW5ndGglNCklNCxjPTA7YzxiO2MrKylhKz1cIi5cIjt0cnl7cmV0dXJuIEpTT04ucGFyc2UocmYoYSkpfWNhdGNoKGQpe31yZXR1cm4gbnVsbH07dmFyIHhmPXskYzp7YWI6XCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9pZGVudGl0eXRvb2xraXQvdjMvcmVseWluZ3BhcnR5L1wiLGliOlwiaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLGlkOlwicFwifSxiZDp7YWI6XCJodHRwczovL3N0YWdpbmctd3d3LnNhbmRib3guZ29vZ2xlYXBpcy5jb20vaWRlbnRpdHl0b29sa2l0L3YzL3JlbHlpbmdwYXJ0eS9cIixpYjpcImh0dHBzOi8vc3RhZ2luZy1zZWN1cmV0b2tlbi5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YxL3Rva2VuXCIsaWQ6XCJzXCJ9LGNkOnthYjpcImh0dHBzOi8vd3d3LWdvb2dsZWFwaXMtdGVzdC5zYW5kYm94Lmdvb2dsZS5jb20vaWRlbnRpdHl0b29sa2l0L3YzL3JlbHlpbmdwYXJ0eS9cIixpYjpcImh0dHBzOi8vdGVzdC1zZWN1cmV0b2tlbi5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YxL3Rva2VuXCIsaWQ6XCJ0XCJ9fTtcbmZ1bmN0aW9uIHlmKGEpe2Zvcih2YXIgYiBpbiB4ZilpZih4ZltiXS5pZD09PWEpcmV0dXJuIGE9eGZbYl0se2ZpcmViYXNlRW5kcG9pbnQ6YS5hYixzZWN1cmVUb2tlbkVuZHBvaW50OmEuaWJ9O3JldHVybiBudWxsfXZhciB6Zjt6Zj15ZihcIl9fRUlEX19cIik/XCJfX0VJRF9fXCI6dm9pZCAwO3ZhciBBZj1cIm9hdXRoX2NvbnN1bWVyX2tleSBvYXV0aF9ub25jZSBvYXV0aF9zaWduYXR1cmUgb2F1dGhfc2lnbmF0dXJlX21ldGhvZCBvYXV0aF90aW1lc3RhbXAgb2F1dGhfdG9rZW4gb2F1dGhfdmVyc2lvblwiLnNwbGl0KFwiIFwiKSxCZj1bXCJjbGllbnRfaWRcIixcInJlc3BvbnNlX3R5cGVcIixcInNjb3BlXCIsXCJyZWRpcmVjdF91cmlcIixcInN0YXRlXCJdLENmPXtWYzp7TWE6XCJsb2NhbGVcIixCYTo1MDAsQWE6NjAwLE5hOlwiZmFjZWJvb2suY29tXCIsaGI6QmZ9LFhjOntNYTpudWxsLEJhOjUwMCxBYTo2MjAsTmE6XCJnaXRodWIuY29tXCIsaGI6QmZ9LFljOntNYTpcImhsXCIsQmE6NTE1LEFhOjY4MCxOYTpcImdvb2dsZS5jb21cIixoYjpCZn0sZGQ6e01hOlwibGFuZ1wiLEJhOjQ4NSxBYTo3MDUsTmE6XCJ0d2l0dGVyLmNvbVwiLGhiOkFmfX07ZnVuY3Rpb24gRGYoYSl7Zm9yKHZhciBiIGluIENmKWlmKENmW2JdLk5hPT1hKXJldHVybiBDZltiXTtyZXR1cm4gbnVsbH07ZnVuY3Rpb24gRWYoYSl7dmFyIGI9e307YltcImZhY2Vib29rLmNvbVwiXT1GZjtiW1wiZ29vZ2xlLmNvbVwiXT1HZjtiW1wiZ2l0aHViLmNvbVwiXT1IZjtiW1widHdpdHRlci5jb21cIl09SWY7dmFyIGM9YSYmYVtKZl07dHJ5e2lmKGMpcmV0dXJuIGJbY10/bmV3IGJbY10oYSk6bmV3IEtmKGEpO2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYVtMZl0pcmV0dXJuIG5ldyBNZihhKX1jYXRjaChkKXt9cmV0dXJuIG51bGx9dmFyIExmPVwiaWRUb2tlblwiLEpmPVwicHJvdmlkZXJJZFwiO1xuZnVuY3Rpb24gTWYoYSl7dmFyIGI9YVtKZl07aWYoIWImJmFbTGZdKXt2YXIgYz12ZihhW0xmXSk7YyYmYy5hJiYoYj1jLmEpfWlmKCFiKXRocm93IEVycm9yKFwiSW52YWxpZCBhZGRpdGlvbmFsIHVzZXIgaW5mbyFcIik7aWYoXCJhbm9ueW1vdXNcIj09Ynx8XCJjdXN0b21cIj09YiliPW51bGw7Yz0hMTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEuaXNOZXdVc2VyP2M9ISFhLmlzTmV3VXNlcjpcImlkZW50aXR5dG9vbGtpdCNTaWdudXBOZXdVc2VyUmVzcG9uc2VcIj09PWEua2luZCYmKGM9ITApO0oodGhpcyxcInByb3ZpZGVySWRcIixiKTtKKHRoaXMsXCJpc05ld1VzZXJcIixjKX1mdW5jdGlvbiBLZihhKXtNZi5jYWxsKHRoaXMsYSk7YT16ZShhLnJhd1VzZXJJbmZvfHxcInt9XCIpO0oodGhpcyxcInByb2ZpbGVcIixRZShhfHx7fSkpfXQoS2YsTWYpO1xuZnVuY3Rpb24gRmYoYSl7S2YuY2FsbCh0aGlzLGEpO2lmKFwiZmFjZWJvb2suY29tXCIhPXRoaXMucHJvdmlkZXJJZCl0aHJvdyBFcnJvcihcIkludmFsaWQgcHJvdmlkZXIgSUQhXCIpO310KEZmLEtmKTtmdW5jdGlvbiBIZihhKXtLZi5jYWxsKHRoaXMsYSk7aWYoXCJnaXRodWIuY29tXCIhPXRoaXMucHJvdmlkZXJJZCl0aHJvdyBFcnJvcihcIkludmFsaWQgcHJvdmlkZXIgSUQhXCIpO0oodGhpcyxcInVzZXJuYW1lXCIsdGhpcy5wcm9maWxlJiZ0aGlzLnByb2ZpbGUubG9naW58fG51bGwpfXQoSGYsS2YpO2Z1bmN0aW9uIEdmKGEpe0tmLmNhbGwodGhpcyxhKTtpZihcImdvb2dsZS5jb21cIiE9dGhpcy5wcm92aWRlcklkKXRocm93IEVycm9yKFwiSW52YWxpZCBwcm92aWRlciBJRCFcIik7fXQoR2YsS2YpO1xuZnVuY3Rpb24gSWYoYSl7S2YuY2FsbCh0aGlzLGEpO2lmKFwidHdpdHRlci5jb21cIiE9dGhpcy5wcm92aWRlcklkKXRocm93IEVycm9yKFwiSW52YWxpZCBwcm92aWRlciBJRCFcIik7Sih0aGlzLFwidXNlcm5hbWVcIixhLnNjcmVlbk5hbWV8fG51bGwpfXQoSWYsS2YpO2Z1bmN0aW9uIE5mKGEpe3RoaXMuYT1kZChhKX07ZnVuY3Rpb24gT2YoYSl7dmFyIGI9ZGQoYSksYz1jZChiLFwibGlua1wiKSxkPWNkKGRkKGMpLFwibGlua1wiKTtiPWNkKGIsXCJkZWVwX2xpbmtfaWRcIik7cmV0dXJuIGNkKGRkKGIpLFwibGlua1wiKXx8Ynx8ZHx8Y3x8YX07ZnVuY3Rpb24gUGYoYSxiKXtyZXR1cm4gYS50aGVuKGZ1bmN0aW9uKGEpe2lmKGFbTV0pe3ZhciBjPXZmKGFbTV0pO2lmKCFjfHxiIT1jLmMpdGhyb3cgbmV3IEwoXCJ1c2VyLW1pc21hdGNoXCIpO3JldHVybiBhfXRocm93IG5ldyBMKFwidXNlci1taXNtYXRjaFwiKTt9KS5zKGZ1bmN0aW9uKGEpe3Rocm93IGEmJmEuY29kZSYmYS5jb2RlPT0kZStcInVzZXItbm90LWZvdW5kXCI/bmV3IEwoXCJ1c2VyLW1pc21hdGNoXCIpOmE7fSl9ZnVuY3Rpb24gUWYoYSxiKXtpZihiKXRoaXMuYT1iO2Vsc2UgdGhyb3cgbmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiLFwiZmFpbGVkIHRvIGNvbnN0cnVjdCBhIGNyZWRlbnRpYWxcIik7Sih0aGlzLFwicHJvdmlkZXJJZFwiLGEpO0oodGhpcyxcInNpZ25Jbk1ldGhvZFwiLGEpfVFmLnByb3RvdHlwZS5sYT1mdW5jdGlvbihhKXtyZXR1cm4gUmYoYSxTZih0aGlzKSl9O1xuUWYucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1TZih0aGlzKTtjLmlkVG9rZW49YjtyZXR1cm4gVGYoYSxjKX07UWYucHJvdG90eXBlLmY9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUGYoVWYoYSxTZih0aGlzKSksYil9O2Z1bmN0aW9uIFNmKGEpe3JldHVybntwZW5kaW5nVG9rZW46YS5hLHJlcXVlc3RVcmk6XCJodHRwOi8vbG9jYWxob3N0XCJ9fVFmLnByb3RvdHlwZS5DPWZ1bmN0aW9uKCl7cmV0dXJue3Byb3ZpZGVySWQ6dGhpcy5wcm92aWRlcklkLHNpZ25Jbk1ldGhvZDp0aGlzLnNpZ25Jbk1ldGhvZCxwZW5kaW5nVG9rZW46dGhpcy5hfX07XG5mdW5jdGlvbiBWZihhLGIsYyl7dGhpcy5hPW51bGw7aWYoYi5pZFRva2VufHxiLmFjY2Vzc1Rva2VuKWIuaWRUb2tlbiYmSih0aGlzLFwiaWRUb2tlblwiLGIuaWRUb2tlbiksYi5hY2Nlc3NUb2tlbiYmSih0aGlzLFwiYWNjZXNzVG9rZW5cIixiLmFjY2Vzc1Rva2VuKSxiLm5vbmNlJiYhYi5wZW5kaW5nVG9rZW4mJkoodGhpcyxcIm5vbmNlXCIsYi5ub25jZSksYi5wZW5kaW5nVG9rZW4mJih0aGlzLmE9Yi5wZW5kaW5nVG9rZW4pO2Vsc2UgaWYoYi5vYXV0aFRva2VuJiZiLm9hdXRoVG9rZW5TZWNyZXQpSih0aGlzLFwiYWNjZXNzVG9rZW5cIixiLm9hdXRoVG9rZW4pLEoodGhpcyxcInNlY3JldFwiLGIub2F1dGhUb2tlblNlY3JldCk7ZWxzZSB0aHJvdyBuZXcgTChcImludGVybmFsLWVycm9yXCIsXCJmYWlsZWQgdG8gY29uc3RydWN0IGEgY3JlZGVudGlhbFwiKTtKKHRoaXMsXCJwcm92aWRlcklkXCIsYSk7Sih0aGlzLFwic2lnbkluTWV0aG9kXCIsYyl9XG5WZi5wcm90b3R5cGUubGE9ZnVuY3Rpb24oYSl7cmV0dXJuIFJmKGEsV2YodGhpcykpfTtWZi5wcm90b3R5cGUuYj1mdW5jdGlvbihhLGIpe3ZhciBjPVdmKHRoaXMpO2MuaWRUb2tlbj1iO3JldHVybiBUZihhLGMpfTtWZi5wcm90b3R5cGUuZj1mdW5jdGlvbihhLGIpe3ZhciBjPVdmKHRoaXMpO3JldHVybiBQZihVZihhLGMpLGIpfTtcbmZ1bmN0aW9uIFdmKGEpe3ZhciBiPXt9O2EuaWRUb2tlbiYmKGIuaWRfdG9rZW49YS5pZFRva2VuKTthLmFjY2Vzc1Rva2VuJiYoYi5hY2Nlc3NfdG9rZW49YS5hY2Nlc3NUb2tlbik7YS5zZWNyZXQmJihiLm9hdXRoX3Rva2VuX3NlY3JldD1hLnNlY3JldCk7Yi5wcm92aWRlcklkPWEucHJvdmlkZXJJZDthLm5vbmNlJiYhYS5hJiYoYi5ub25jZT1hLm5vbmNlKTtiPXtwb3N0Qm9keTpoZChiKS50b1N0cmluZygpLHJlcXVlc3RVcmk6XCJodHRwOi8vbG9jYWxob3N0XCJ9O2EuYSYmKGRlbGV0ZSBiLnBvc3RCb2R5LGIucGVuZGluZ1Rva2VuPWEuYSk7cmV0dXJuIGJ9XG5WZi5wcm90b3R5cGUuQz1mdW5jdGlvbigpe3ZhciBhPXtwcm92aWRlcklkOnRoaXMucHJvdmlkZXJJZCxzaWduSW5NZXRob2Q6dGhpcy5zaWduSW5NZXRob2R9O3RoaXMuaWRUb2tlbiYmKGEub2F1dGhJZFRva2VuPXRoaXMuaWRUb2tlbik7dGhpcy5hY2Nlc3NUb2tlbiYmKGEub2F1dGhBY2Nlc3NUb2tlbj10aGlzLmFjY2Vzc1Rva2VuKTt0aGlzLnNlY3JldCYmKGEub2F1dGhUb2tlblNlY3JldD10aGlzLnNlY3JldCk7dGhpcy5ub25jZSYmKGEubm9uY2U9dGhpcy5ub25jZSk7dGhpcy5hJiYoYS5wZW5kaW5nVG9rZW49dGhpcy5hKTtyZXR1cm4gYX07ZnVuY3Rpb24gWGYoYSxiKXt0aGlzLkRjPWJ8fFtdO0sodGhpcyx7cHJvdmlkZXJJZDphLGlzT0F1dGhQcm92aWRlcjohMH0pO3RoaXMueWI9e307dGhpcy5jYj0oRGYoYSl8fHt9KS5NYXx8bnVsbDt0aGlzLiRhPW51bGx9WGYucHJvdG90eXBlLkRhPWZ1bmN0aW9uKGEpe3RoaXMueWI9JGEoYSk7cmV0dXJuIHRoaXN9O1xuZnVuY3Rpb24gWWYoYSl7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhfHwwIT1hLmluZGV4T2YoXCJzYW1sLlwiKSl0aHJvdyBuZXcgTChcImFyZ3VtZW50LWVycm9yXCIsJ1NBTUwgcHJvdmlkZXIgSURzIG11c3QgYmUgcHJlZml4ZWQgd2l0aCBcInNhbWwuXCInKTtYZi5jYWxsKHRoaXMsYSxbXSl9dChZZixYZik7ZnVuY3Rpb24gTihhKXtYZi5jYWxsKHRoaXMsYSxCZik7dGhpcy5hPVtdfXQoTixYZik7Ti5wcm90b3R5cGUudWE9ZnVuY3Rpb24oYSl7R2EodGhpcy5hLGEpfHx0aGlzLmEucHVzaChhKTtyZXR1cm4gdGhpc307Ti5wcm90b3R5cGUuRWI9ZnVuY3Rpb24oKXtyZXR1cm4gSmEodGhpcy5hKX07XG5OLnByb3RvdHlwZS5jcmVkZW50aWFsPWZ1bmN0aW9uKGEsYixjKXtpZighYSYmIWIpdGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLFwiY3JlZGVudGlhbCBmYWlsZWQ6IG11c3QgcHJvdmlkZSB0aGUgSUQgdG9rZW4gYW5kL29yIHRoZSBhY2Nlc3MgdG9rZW4uXCIpO3JldHVybiBuZXcgVmYodGhpcy5wcm92aWRlcklkLHtpZFRva2VuOmF8fG51bGwsYWNjZXNzVG9rZW46Ynx8bnVsbCxub25jZTpjfHxudWxsfSx0aGlzLnByb3ZpZGVySWQpfTtmdW5jdGlvbiBaZigpe04uY2FsbCh0aGlzLFwiZmFjZWJvb2suY29tXCIpfXQoWmYsTik7SihaZixcIlBST1ZJREVSX0lEXCIsXCJmYWNlYm9vay5jb21cIik7SihaZixcIkZBQ0VCT09LX1NJR05fSU5fTUVUSE9EXCIsXCJmYWNlYm9vay5jb21cIik7XG5mdW5jdGlvbiAkZihhKXtpZighYSl0aHJvdyBuZXcgTChcImFyZ3VtZW50LWVycm9yXCIsXCJjcmVkZW50aWFsIGZhaWxlZDogZXhwZWN0ZWQgMSBhcmd1bWVudCAodGhlIE9BdXRoIGFjY2VzcyB0b2tlbikuXCIpO3ZhciBiPWE7cShhKSYmKGI9YS5hY2Nlc3NUb2tlbik7cmV0dXJuKG5ldyBaZikuY3JlZGVudGlhbChudWxsLGIpfWZ1bmN0aW9uIGFnKCl7Ti5jYWxsKHRoaXMsXCJnaXRodWIuY29tXCIpfXQoYWcsTik7SihhZyxcIlBST1ZJREVSX0lEXCIsXCJnaXRodWIuY29tXCIpO0ooYWcsXCJHSVRIVUJfU0lHTl9JTl9NRVRIT0RcIixcImdpdGh1Yi5jb21cIik7ZnVuY3Rpb24gYmcoYSl7aWYoIWEpdGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLFwiY3JlZGVudGlhbCBmYWlsZWQ6IGV4cGVjdGVkIDEgYXJndW1lbnQgKHRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4pLlwiKTt2YXIgYj1hO3EoYSkmJihiPWEuYWNjZXNzVG9rZW4pO3JldHVybihuZXcgYWcpLmNyZWRlbnRpYWwobnVsbCxiKX1cbmZ1bmN0aW9uIGNnKCl7Ti5jYWxsKHRoaXMsXCJnb29nbGUuY29tXCIpO3RoaXMudWEoXCJwcm9maWxlXCIpfXQoY2csTik7SihjZyxcIlBST1ZJREVSX0lEXCIsXCJnb29nbGUuY29tXCIpO0ooY2csXCJHT09HTEVfU0lHTl9JTl9NRVRIT0RcIixcImdvb2dsZS5jb21cIik7ZnVuY3Rpb24gZGcoYSxiKXt2YXIgYz1hO3EoYSkmJihjPWEuaWRUb2tlbixiPWEuYWNjZXNzVG9rZW4pO3JldHVybihuZXcgY2cpLmNyZWRlbnRpYWwoYyxiKX1mdW5jdGlvbiBlZygpe1hmLmNhbGwodGhpcyxcInR3aXR0ZXIuY29tXCIsQWYpfXQoZWcsWGYpO0ooZWcsXCJQUk9WSURFUl9JRFwiLFwidHdpdHRlci5jb21cIik7SihlZyxcIlRXSVRURVJfU0lHTl9JTl9NRVRIT0RcIixcInR3aXR0ZXIuY29tXCIpO1xuZnVuY3Rpb24gZmcoYSxiKXt2YXIgYz1hO3EoYyl8fChjPXtvYXV0aFRva2VuOmEsb2F1dGhUb2tlblNlY3JldDpifSk7aWYoIWMub2F1dGhUb2tlbnx8IWMub2F1dGhUb2tlblNlY3JldCl0aHJvdyBuZXcgTChcImFyZ3VtZW50LWVycm9yXCIsXCJjcmVkZW50aWFsIGZhaWxlZDogZXhwZWN0ZWQgMiBhcmd1bWVudHMgKHRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4gYW5kIHNlY3JldCkuXCIpO3JldHVybiBuZXcgVmYoXCJ0d2l0dGVyLmNvbVwiLGMsXCJ0d2l0dGVyLmNvbVwiKX1mdW5jdGlvbiBnZyhhLGIsYyl7dGhpcy5hPWE7dGhpcy5jPWI7Sih0aGlzLFwicHJvdmlkZXJJZFwiLFwicGFzc3dvcmRcIik7Sih0aGlzLFwic2lnbkluTWV0aG9kXCIsYz09PU8uRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRD9PLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0Q6Ty5FTUFJTF9QQVNTV09SRF9TSUdOX0lOX01FVEhPRCl9XG5nZy5wcm90b3R5cGUubGE9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuc2lnbkluTWV0aG9kPT1PLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0Q/UChhLGhnLHtlbWFpbDp0aGlzLmEsb29iQ29kZTp0aGlzLmN9KTpQKGEsaWcse2VtYWlsOnRoaXMuYSxwYXNzd29yZDp0aGlzLmN9KX07Z2cucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5zaWduSW5NZXRob2Q9PU8uRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRD9QKGEsamcse2lkVG9rZW46YixlbWFpbDp0aGlzLmEsb29iQ29kZTp0aGlzLmN9KTpQKGEsa2cse2lkVG9rZW46YixlbWFpbDp0aGlzLmEscGFzc3dvcmQ6dGhpcy5jfSl9O2dnLnByb3RvdHlwZS5mPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFBmKHRoaXMubGEoYSksYil9O2dnLnByb3RvdHlwZS5DPWZ1bmN0aW9uKCl7cmV0dXJue2VtYWlsOnRoaXMuYSxwYXNzd29yZDp0aGlzLmMsc2lnbkluTWV0aG9kOnRoaXMuc2lnbkluTWV0aG9kfX07XG5mdW5jdGlvbiBPKCl7Syh0aGlzLHtwcm92aWRlcklkOlwicGFzc3dvcmRcIixpc09BdXRoUHJvdmlkZXI6ITF9KX1mdW5jdGlvbiBsZyhhLGIpe2I9bWcoYik7aWYoIWIpdGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLFwiSW52YWxpZCBlbWFpbCBsaW5rIVwiKTtyZXR1cm4gbmV3IGdnKGEsYixPLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0QpfWZ1bmN0aW9uIG1nKGEpe2E9T2YoYSk7YT1uZXcgTmYoYSk7dmFyIGI9Y2QoYS5hLFwib29iQ29kZVwiKXx8bnVsbDtyZXR1cm5cInNpZ25JblwiPT09KGNkKGEuYSxcIm1vZGVcIil8fG51bGwpJiZiP2I6bnVsbH1LKE8se1BST1ZJREVSX0lEOlwicGFzc3dvcmRcIn0pO0soTyx7RU1BSUxfTElOS19TSUdOX0lOX01FVEhPRDpcImVtYWlsTGlua1wifSk7SyhPLHtFTUFJTF9QQVNTV09SRF9TSUdOX0lOX01FVEhPRDpcInBhc3N3b3JkXCJ9KTtcbmZ1bmN0aW9uIG5nKGEpe2lmKCEoYS5UYSYmYS5TYXx8YS5GYSYmYS4kKSl0aHJvdyBuZXcgTChcImludGVybmFsLWVycm9yXCIpO3RoaXMuYT1hO0oodGhpcyxcInByb3ZpZGVySWRcIixcInBob25lXCIpO0oodGhpcyxcInNpZ25Jbk1ldGhvZFwiLFwicGhvbmVcIil9bmcucHJvdG90eXBlLmxhPWZ1bmN0aW9uKGEpe3JldHVybiBhLlVhKG9nKHRoaXMpKX07bmcucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1vZyh0aGlzKTtjLmlkVG9rZW49YjtyZXR1cm4gUChhLHBnLGMpfTtuZy5wcm90b3R5cGUuZj1mdW5jdGlvbihhLGIpe3ZhciBjPW9nKHRoaXMpO2Mub3BlcmF0aW9uPVwiUkVBVVRIXCI7YT1QKGEscWcsYyk7cmV0dXJuIFBmKGEsYil9O1xubmcucHJvdG90eXBlLkM9ZnVuY3Rpb24oKXt2YXIgYT17cHJvdmlkZXJJZDpcInBob25lXCJ9O3RoaXMuYS5UYSYmKGEudmVyaWZpY2F0aW9uSWQ9dGhpcy5hLlRhKTt0aGlzLmEuU2EmJihhLnZlcmlmaWNhdGlvbkNvZGU9dGhpcy5hLlNhKTt0aGlzLmEuRmEmJihhLnRlbXBvcmFyeVByb29mPXRoaXMuYS5GYSk7dGhpcy5hLiQmJihhLnBob25lTnVtYmVyPXRoaXMuYS4kKTtyZXR1cm4gYX07ZnVuY3Rpb24gb2coYSl7cmV0dXJuIGEuYS5GYSYmYS5hLiQ/e3RlbXBvcmFyeVByb29mOmEuYS5GYSxwaG9uZU51bWJlcjphLmEuJH06e3Nlc3Npb25JbmZvOmEuYS5UYSxjb2RlOmEuYS5TYX19XG5mdW5jdGlvbiByZyhhKXt0cnl7dGhpcy5hPWF8fGZpcmViYXNlLmF1dGgoKX1jYXRjaChiKXt0aHJvdyBuZXcgTChcImFyZ3VtZW50LWVycm9yXCIsXCJFaXRoZXIgYW4gaW5zdGFuY2Ugb2YgZmlyZWJhc2UuYXV0aC5BdXRoIG11c3QgYmUgcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBmaXJlYmFzZS5hdXRoLlBob25lQXV0aFByb3ZpZGVyIGNvbnN0cnVjdG9yLCBvciB0aGUgZGVmYXVsdCBmaXJlYmFzZSBBcHAgaW5zdGFuY2UgbXVzdCBiZSBpbml0aWFsaXplZCB2aWEgZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCgpLlwiKTt9Syh0aGlzLHtwcm92aWRlcklkOlwicGhvbmVcIixpc09BdXRoUHJvdmlkZXI6ITF9KX1cbnJnLnByb3RvdHlwZS5VYT1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuYS5iO3JldHVybiBCKGIudmVyaWZ5KCkpLnRoZW4oZnVuY3Rpb24oZCl7aWYoIWwoZCkpdGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLFwiQW4gaW1wbGVtZW50YXRpb24gb2YgZmlyZWJhc2UuYXV0aC5BcHBsaWNhdGlvblZlcmlmaWVyLnByb3RvdHlwZS52ZXJpZnkoKSBtdXN0IHJldHVybiBhIGZpcmViYXNlLlByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgc3RyaW5nLlwiKTtzd2l0Y2goYi50eXBlKXtjYXNlIFwicmVjYXB0Y2hhXCI6cmV0dXJuIHNnKGMse3Bob25lTnVtYmVyOmEscmVjYXB0Y2hhVG9rZW46ZH0pLnRoZW4oZnVuY3Rpb24oYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVzZXQmJmIucmVzZXQoKTtyZXR1cm4gYX0sZnVuY3Rpb24oYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVzZXQmJmIucmVzZXQoKTt0aHJvdyBhO30pO2RlZmF1bHQ6dGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLFxuJ09ubHkgZmlyZWJhc2UuYXV0aC5BcHBsaWNhdGlvblZlcmlmaWVycyB3aXRoIHR5cGU9XCJyZWNhcHRjaGFcIiBhcmUgY3VycmVudGx5IHN1cHBvcnRlZC4nKTt9fSl9O2Z1bmN0aW9uIHRnKGEsYil7aWYoIWEpdGhyb3cgbmV3IEwoXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1pZFwiKTtpZighYil0aHJvdyBuZXcgTChcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGVcIik7cmV0dXJuIG5ldyBuZyh7VGE6YSxTYTpifSl9SyhyZyx7UFJPVklERVJfSUQ6XCJwaG9uZVwifSk7SyhyZyx7UEhPTkVfU0lHTl9JTl9NRVRIT0Q6XCJwaG9uZVwifSk7XG5mdW5jdGlvbiB1ZyhhKXtpZihhLnRlbXBvcmFyeVByb29mJiZhLnBob25lTnVtYmVyKXJldHVybiBuZXcgbmcoe0ZhOmEudGVtcG9yYXJ5UHJvb2YsJDphLnBob25lTnVtYmVyfSk7dmFyIGI9YSYmYS5wcm92aWRlcklkO2lmKCFifHxcInBhc3N3b3JkXCI9PT1iKXJldHVybiBudWxsO3ZhciBjPWEmJmEub2F1dGhBY2Nlc3NUb2tlbixkPWEmJmEub2F1dGhUb2tlblNlY3JldCxlPWEmJmEubm9uY2UsZj1hJiZhLm9hdXRoSWRUb2tlbixoPWEmJmEucGVuZGluZ1Rva2VuO3RyeXtzd2l0Y2goYil7Y2FzZSBcImdvb2dsZS5jb21cIjpyZXR1cm4gZGcoZixjKTtjYXNlIFwiZmFjZWJvb2suY29tXCI6cmV0dXJuICRmKGMpO2Nhc2UgXCJnaXRodWIuY29tXCI6cmV0dXJuIGJnKGMpO2Nhc2UgXCJ0d2l0dGVyLmNvbVwiOnJldHVybiBmZyhjLGQpO2RlZmF1bHQ6cmV0dXJuIGN8fGR8fGZ8fGg/aD8wPT1iLmluZGV4T2YoXCJzYW1sLlwiKT9uZXcgUWYoYixoKTpuZXcgVmYoYix7cGVuZGluZ1Rva2VuOmgsaWRUb2tlbjphLm9hdXRoSWRUb2tlbixcbmFjY2Vzc1Rva2VuOmEub2F1dGhBY2Nlc3NUb2tlbn0sYik6KG5ldyBOKGIpKS5jcmVkZW50aWFsKGYsYyxlKTpudWxsfX1jYXRjaChtKXtyZXR1cm4gbnVsbH19ZnVuY3Rpb24gdmcoYSl7aWYoIWEuaXNPQXV0aFByb3ZpZGVyKXRocm93IG5ldyBMKFwiaW52YWxpZC1vYXV0aC1wcm92aWRlclwiKTt9O2Z1bmN0aW9uIHdnKGEsYixjLGQsZSxmKXt0aGlzLmI9YTt0aGlzLmM9Ynx8bnVsbDt0aGlzLmY9Y3x8bnVsbDt0aGlzLmc9ZHx8bnVsbDt0aGlzLmg9Znx8bnVsbDt0aGlzLmE9ZXx8bnVsbDtpZih0aGlzLmZ8fHRoaXMuYSl7aWYodGhpcy5mJiZ0aGlzLmEpdGhyb3cgbmV3IEwoXCJpbnZhbGlkLWF1dGgtZXZlbnRcIik7aWYodGhpcy5mJiYhdGhpcy5nKXRocm93IG5ldyBMKFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpO31lbHNlIHRocm93IG5ldyBMKFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpO313Zy5wcm90b3R5cGUuQz1mdW5jdGlvbigpe3JldHVybnt0eXBlOnRoaXMuYixldmVudElkOnRoaXMuYyx1cmxSZXNwb25zZTp0aGlzLmYsc2Vzc2lvbklkOnRoaXMuZyxwb3N0Qm9keTp0aGlzLmgsZXJyb3I6dGhpcy5hJiZ0aGlzLmEuQygpfX07XG5mdW5jdGlvbiB4ZyhhKXthPWF8fHt9O3JldHVybiBhLnR5cGU/bmV3IHdnKGEudHlwZSxhLmV2ZW50SWQsYS51cmxSZXNwb25zZSxhLnNlc3Npb25JZCxhLmVycm9yJiZiZihhLmVycm9yKSxhLnBvc3RCb2R5KTpudWxsfTsvKlxuXG4gQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cblxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmZ1bmN0aW9uIHlnKCl7dGhpcy5iPW51bGw7dGhpcy5hPVtdfXZhciB6Zz1udWxsO3lnLnByb3RvdHlwZS5zdWJzY3JpYmU9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpczt0aGlzLmEucHVzaChhKTt0aGlzLmJ8fCh0aGlzLmI9ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPTA7YzxiLmEubGVuZ3RoO2MrKyliLmFbY10oYSl9LGE9SShcInVuaXZlcnNhbExpbmtzLnN1YnNjcmliZVwiLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiZhKG51bGwsdGhpcy5iKSl9O3lnLnByb3RvdHlwZS51bnN1YnNjcmliZT1mdW5jdGlvbihhKXt3KHRoaXMuYSxmdW5jdGlvbihiKXtyZXR1cm4gYj09YX0pfTtmdW5jdGlvbiBBZyhhKXt2YXIgYj1cInVuYXV0aG9yaXplZC1kb21haW5cIixjPXZvaWQgMCxkPWRkKGEpO2E9ZC5iO2Q9ZC5jO1wiY2hyb21lLWV4dGVuc2lvblwiPT1kP2M9S2EoXCJUaGlzIGNocm9tZSBleHRlbnNpb24gSUQgKGNocm9tZS1leHRlbnNpb246Ly8lcykgaXMgbm90IGF1dGhvcml6ZWQgdG8gcnVuIHRoaXMgb3BlcmF0aW9uLiBBZGQgaXQgdG8gdGhlIE9BdXRoIHJlZGlyZWN0IGRvbWFpbnMgbGlzdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSAtPiBBdXRoIHNlY3Rpb24gLT4gU2lnbiBpbiBtZXRob2QgdGFiLlwiLGEpOlwiaHR0cFwiPT1kfHxcImh0dHBzXCI9PWQ/Yz1LYShcIlRoaXMgZG9tYWluICglcykgaXMgbm90IGF1dGhvcml6ZWQgdG8gcnVuIHRoaXMgb3BlcmF0aW9uLiBBZGQgaXQgdG8gdGhlIE9BdXRoIHJlZGlyZWN0IGRvbWFpbnMgbGlzdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSAtPiBBdXRoIHNlY3Rpb24gLT4gU2lnbiBpbiBtZXRob2QgdGFiLlwiLGEpOmI9XCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCI7XG5MLmNhbGwodGhpcyxiLGMpfXQoQWcsTCk7ZnVuY3Rpb24gQmcoYSxiLGMpe0wuY2FsbCh0aGlzLGEsYyk7YT1ifHx7fTthLnpiJiZKKHRoaXMsXCJlbWFpbFwiLGEuemIpO2EuJCYmSih0aGlzLFwicGhvbmVOdW1iZXJcIixhLiQpO2EuY3JlZGVudGlhbCYmSih0aGlzLFwiY3JlZGVudGlhbFwiLGEuY3JlZGVudGlhbCl9dChCZyxMKTtCZy5wcm90b3R5cGUuQz1mdW5jdGlvbigpe3ZhciBhPXtjb2RlOnRoaXMuY29kZSxtZXNzYWdlOnRoaXMubWVzc2FnZX07dGhpcy5lbWFpbCYmKGEuZW1haWw9dGhpcy5lbWFpbCk7dGhpcy5waG9uZU51bWJlciYmKGEucGhvbmVOdW1iZXI9dGhpcy5waG9uZU51bWJlcik7dmFyIGI9dGhpcy5jcmVkZW50aWFsJiZ0aGlzLmNyZWRlbnRpYWwuQygpO2ImJmJiKGEsYik7cmV0dXJuIGF9O0JnLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5DKCl9O1xuZnVuY3Rpb24gQ2coYSl7aWYoYS5jb2RlKXt2YXIgYj1hLmNvZGV8fFwiXCI7MD09Yi5pbmRleE9mKCRlKSYmKGI9Yi5zdWJzdHJpbmcoJGUubGVuZ3RoKSk7dmFyIGM9e2NyZWRlbnRpYWw6dWcoYSl9O2lmKGEuZW1haWwpYy56Yj1hLmVtYWlsO2Vsc2UgaWYoYS5waG9uZU51bWJlciljLiQ9YS5waG9uZU51bWJlcjtlbHNlIGlmKCFjLmNyZWRlbnRpYWwpcmV0dXJuIG5ldyBMKGIsYS5tZXNzYWdlfHx2b2lkIDApO3JldHVybiBuZXcgQmcoYixjLGEubWVzc2FnZSl9cmV0dXJuIG51bGx9O2Z1bmN0aW9uIERnKCl7fURnLnByb3RvdHlwZS5jPW51bGw7ZnVuY3Rpb24gRWcoYSl7cmV0dXJuIGEuY3x8KGEuYz1hLmIoKSl9O3ZhciBGZztmdW5jdGlvbiBHZygpe310KEdnLERnKTtHZy5wcm90b3R5cGUuYT1mdW5jdGlvbigpe3ZhciBhPUhnKHRoaXMpO3JldHVybiBhP25ldyBBY3RpdmVYT2JqZWN0KGEpOm5ldyBYTUxIdHRwUmVxdWVzdH07R2cucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXt2YXIgYT17fTtIZyh0aGlzKSYmKGFbMF09ITAsYVsxXT0hMCk7cmV0dXJuIGF9O1xuZnVuY3Rpb24gSGcoYSl7aWYoIWEuZiYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIFhNTEh0dHBSZXF1ZXN0JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgQWN0aXZlWE9iamVjdCl7Zm9yKHZhciBiPVtcIk1TWE1MMi5YTUxIVFRQLjYuMFwiLFwiTVNYTUwyLlhNTEhUVFAuMy4wXCIsXCJNU1hNTDIuWE1MSFRUUFwiLFwiTWljcm9zb2Z0LlhNTEhUVFBcIl0sYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1iW2NdO3RyeXtyZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoZCksYS5mPWR9Y2F0Y2goZSl7fX10aHJvdyBFcnJvcihcIkNvdWxkIG5vdCBjcmVhdGUgQWN0aXZlWE9iamVjdC4gQWN0aXZlWCBtaWdodCBiZSBkaXNhYmxlZCwgb3IgTVNYTUwgbWlnaHQgbm90IGJlIGluc3RhbGxlZFwiKTt9cmV0dXJuIGEuZn1GZz1uZXcgR2c7ZnVuY3Rpb24gSWcoKXt9dChJZyxEZyk7SWcucHJvdG90eXBlLmE9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgWE1MSHR0cFJlcXVlc3Q7aWYoXCJ3aXRoQ3JlZGVudGlhbHNcImluIGEpcmV0dXJuIGE7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhEb21haW5SZXF1ZXN0KXJldHVybiBuZXcgSmc7dGhyb3cgRXJyb3IoXCJVbnN1cHBvcnRlZCBicm93c2VyXCIpO307SWcucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXtyZXR1cm57fX07XG5mdW5jdGlvbiBKZygpe3RoaXMuYT1uZXcgWERvbWFpblJlcXVlc3Q7dGhpcy5yZWFkeVN0YXRlPTA7dGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbDt0aGlzLnJlc3BvbnNlVGV4dD1cIlwiO3RoaXMuc3RhdHVzPS0xO3RoaXMuc3RhdHVzVGV4dD1cIlwiO3RoaXMuYS5vbmxvYWQ9cih0aGlzLmVjLHRoaXMpO3RoaXMuYS5vbmVycm9yPXIodGhpcy5GYix0aGlzKTt0aGlzLmEub25wcm9ncmVzcz1yKHRoaXMuZmMsdGhpcyk7dGhpcy5hLm9udGltZW91dD1yKHRoaXMuaWMsdGhpcyl9Zz1KZy5wcm90b3R5cGU7Zy5vcGVuPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT1jJiYhYyl0aHJvdyBFcnJvcihcIk9ubHkgYXN5bmMgcmVxdWVzdHMgYXJlIHN1cHBvcnRlZC5cIik7dGhpcy5hLm9wZW4oYSxiKX07XG5nLnNlbmQ9ZnVuY3Rpb24oYSl7aWYoYSlpZihcInN0cmluZ1wiPT10eXBlb2YgYSl0aGlzLmEuc2VuZChhKTtlbHNlIHRocm93IEVycm9yKFwiT25seSBzdHJpbmcgZGF0YSBpcyBzdXBwb3J0ZWRcIik7ZWxzZSB0aGlzLmEuc2VuZCgpfTtnLmFib3J0PWZ1bmN0aW9uKCl7dGhpcy5hLmFib3J0KCl9O2cuc2V0UmVxdWVzdEhlYWRlcj1mdW5jdGlvbigpe307Zy5nZXRSZXNwb25zZUhlYWRlcj1mdW5jdGlvbihhKXtyZXR1cm5cImNvbnRlbnQtdHlwZVwiPT1hLnRvTG93ZXJDYXNlKCk/dGhpcy5hLmNvbnRlbnRUeXBlOlwiXCJ9O2cuZWM9ZnVuY3Rpb24oKXt0aGlzLnN0YXR1cz0yMDA7dGhpcy5yZXNwb25zZVRleHQ9dGhpcy5hLnJlc3BvbnNlVGV4dDtLZyh0aGlzLDQpfTtnLkZiPWZ1bmN0aW9uKCl7dGhpcy5zdGF0dXM9NTAwO3RoaXMucmVzcG9uc2VUZXh0PVwiXCI7S2codGhpcyw0KX07Zy5pYz1mdW5jdGlvbigpe3RoaXMuRmIoKX07XG5nLmZjPWZ1bmN0aW9uKCl7dGhpcy5zdGF0dXM9MjAwO0tnKHRoaXMsMSl9O2Z1bmN0aW9uIEtnKGEsYil7YS5yZWFkeVN0YXRlPWI7aWYoYS5vbnJlYWR5c3RhdGVjaGFuZ2UpYS5vbnJlYWR5c3RhdGVjaGFuZ2UoKX1nLmdldEFsbFJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbigpe3JldHVyblwiY29udGVudC10eXBlOiBcIit0aGlzLmEuY29udGVudFR5cGV9O2Z1bmN0aW9uIExnKGEsYixjKXt0aGlzLnJlc2V0KGEsYixjLHZvaWQgMCx2b2lkIDApfUxnLnByb3RvdHlwZS5hPW51bGw7dmFyIE1nPTA7TGcucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKGEsYixjLGQsZSl7XCJudW1iZXJcIj09dHlwZW9mIGV8fE1nKys7ZHx8b2EoKTtkZWxldGUgdGhpcy5hfTtmdW5jdGlvbiBOZyhhKXt0aGlzLmY9YTt0aGlzLmI9dGhpcy5jPXRoaXMuYT1udWxsfWZ1bmN0aW9uIE9nKGEsYil7dGhpcy5uYW1lPWE7dGhpcy52YWx1ZT1ifU9nLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWV9O3ZhciBQZz1uZXcgT2coXCJTRVZFUkVcIiwxRTMpLFFnPW5ldyBPZyhcIldBUk5JTkdcIiw5MDApLFJnPW5ldyBPZyhcIkNPTkZJR1wiLDcwMCksU2c9bmV3IE9nKFwiRklORVwiLDUwMCk7ZnVuY3Rpb24gVGcoYSl7aWYoYS5jKXJldHVybiBhLmM7aWYoYS5hKXJldHVybiBUZyhhLmEpO3NhKFwiUm9vdCBsb2dnZXIgaGFzIG5vIGxldmVsIHNldC5cIik7cmV0dXJuIG51bGx9TmcucHJvdG90eXBlLmxvZz1mdW5jdGlvbihhLGIsYyl7aWYoYS52YWx1ZT49VGcodGhpcykudmFsdWUpZm9yKG4oYikmJihiPWIoKSksYT1uZXcgTGcoYSxTdHJpbmcoYiksdGhpcy5mKSxjJiYoYS5hPWMpLGM9dGhpcztjOyljPWMuYX07dmFyIFVnPXt9LFZnPW51bGw7XG5mdW5jdGlvbiBXZyhhKXtWZ3x8KFZnPW5ldyBOZyhcIlwiKSxVZ1tcIlwiXT1WZyxWZy5jPVJnKTt2YXIgYjtpZighKGI9VWdbYV0pKXtiPW5ldyBOZyhhKTt2YXIgYz1hLmxhc3RJbmRleE9mKFwiLlwiKSxkPWEuc3Vic3RyKGMrMSk7Yz1XZyhhLnN1YnN0cigwLGMpKTtjLmJ8fChjLmI9e30pO2MuYltkXT1iO2IuYT1jO1VnW2FdPWJ9cmV0dXJuIGJ9O2Z1bmN0aW9uIFhnKGEsYil7YSYmYS5sb2coU2csYix2b2lkIDApfTtmdW5jdGlvbiBZZyhhKXt0aGlzLmY9YX10KFlnLERnKTtZZy5wcm90b3R5cGUuYT1mdW5jdGlvbigpe3JldHVybiBuZXcgWmcodGhpcy5mKX07WWcucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGF9fSh7fSk7ZnVuY3Rpb24gWmcoYSl7Ri5jYWxsKHRoaXMpO3RoaXMuaT1hO3RoaXMucmVhZHlTdGF0ZT0kZzt0aGlzLnN0YXR1cz0wO3RoaXMucmVzcG9uc2VUZXh0PXRoaXMuc3RhdHVzVGV4dD1cIlwiO3RoaXMub25yZWFkeXN0YXRlY2hhbmdlPW51bGw7dGhpcy5nPW5ldyBIZWFkZXJzO3RoaXMuYj1udWxsO3RoaXMuaD1cIkdFVFwiO3RoaXMuYz1cIlwiO3RoaXMuYT0hMTt0aGlzLmY9V2coXCJnb29nLm5ldC5GZXRjaFhtbEh0dHBcIil9dChaZyxGKTt2YXIgJGc9MDtnPVpnLnByb3RvdHlwZTtcbmcub3Blbj1mdW5jdGlvbihhLGIpe2lmKHRoaXMucmVhZHlTdGF0ZSE9JGcpdGhyb3cgdGhpcy5hYm9ydCgpLEVycm9yKFwiRXJyb3IgcmVvcGVuaW5nIGEgY29ubmVjdGlvblwiKTt0aGlzLmg9YTt0aGlzLmM9Yjt0aGlzLnJlYWR5U3RhdGU9MTthaCh0aGlzKX07Zy5zZW5kPWZ1bmN0aW9uKGEpe2lmKDEhPXRoaXMucmVhZHlTdGF0ZSl0aHJvdyB0aGlzLmFib3J0KCksRXJyb3IoXCJuZWVkIHRvIGNhbGwgb3BlbigpIGZpcnN0LiBcIik7dGhpcy5hPSEwO3ZhciBiPXtoZWFkZXJzOnRoaXMuZyxtZXRob2Q6dGhpcy5oLGNyZWRlbnRpYWxzOnZvaWQgMCxjYWNoZTp2b2lkIDB9O2EmJihiLmJvZHk9YSk7dGhpcy5pLmZldGNoKG5ldyBSZXF1ZXN0KHRoaXMuYyxiKSkudGhlbih0aGlzLmhjLmJpbmQodGhpcyksdGhpcy5HYi5iaW5kKHRoaXMpKX07XG5nLmFib3J0PWZ1bmN0aW9uKCl7dGhpcy5yZXNwb25zZVRleHQ9XCJcIjt0aGlzLmc9bmV3IEhlYWRlcnM7dGhpcy5zdGF0dXM9MDsxPD10aGlzLnJlYWR5U3RhdGUmJnRoaXMuYSYmNCE9dGhpcy5yZWFkeVN0YXRlJiYodGhpcy5yZWFkeVN0YXRlPTQsdGhpcy5hPSExLGFoKHRoaXMpKTt0aGlzLnJlYWR5U3RhdGU9JGd9O2cuaGM9ZnVuY3Rpb24oYSl7dGhpcy5hJiYodGhpcy5ifHwodGhpcy5iPWEuaGVhZGVycyx0aGlzLnJlYWR5U3RhdGU9MixhaCh0aGlzKSksdGhpcy5hJiYodGhpcy5yZWFkeVN0YXRlPTMsYWgodGhpcyksdGhpcy5hJiZhLnRleHQoKS50aGVuKHRoaXMuZ2MuYmluZCh0aGlzLGEpLHRoaXMuR2IuYmluZCh0aGlzKSkpKX07Zy5nYz1mdW5jdGlvbihhLGIpe3RoaXMuYSYmKHRoaXMuc3RhdHVzPWEuc3RhdHVzLHRoaXMuc3RhdHVzVGV4dD1hLnN0YXR1c1RleHQsdGhpcy5yZXNwb25zZVRleHQ9Yix0aGlzLnJlYWR5U3RhdGU9NCxhaCh0aGlzKSl9O1xuZy5HYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmY7YiYmYi5sb2coUWcsXCJGYWlsZWQgdG8gZmV0Y2ggdXJsIFwiK3RoaXMuYyxhIGluc3RhbmNlb2YgRXJyb3I/YTpFcnJvcihhKSk7dGhpcy5hJiYodGhpcy5yZWFkeVN0YXRlPTQsYWgodGhpcykpfTtnLnNldFJlcXVlc3RIZWFkZXI9ZnVuY3Rpb24oYSxiKXt0aGlzLmcuYXBwZW5kKGEsYil9O2cuZ2V0UmVzcG9uc2VIZWFkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYj90aGlzLmIuZ2V0KGEudG9Mb3dlckNhc2UoKSl8fFwiXCI6KChhPXRoaXMuZikmJmEubG9nKFFnLFwiQXR0ZW1wdGluZyB0byBnZXQgcmVzcG9uc2UgaGVhZGVyIGJ1dCBubyBoZWFkZXJzIGhhdmUgYmVlbiByZWNlaXZlZCBmb3IgdXJsOiBcIit0aGlzLmMsdm9pZCAwKSxcIlwiKX07XG5nLmdldEFsbFJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbigpe2lmKCF0aGlzLmIpe3ZhciBhPXRoaXMuZjthJiZhLmxvZyhRZyxcIkF0dGVtcHRpbmcgdG8gZ2V0IGFsbCByZXNwb25zZSBoZWFkZXJzIGJ1dCBubyBoZWFkZXJzIGhhdmUgYmVlbiByZWNlaXZlZCBmb3IgdXJsOiBcIit0aGlzLmMsdm9pZCAwKTtyZXR1cm5cIlwifWE9W107Zm9yKHZhciBiPXRoaXMuYi5lbnRyaWVzKCksYz1iLm5leHQoKTshYy5kb25lOyljPWMudmFsdWUsYS5wdXNoKGNbMF0rXCI6IFwiK2NbMV0pLGM9Yi5uZXh0KCk7cmV0dXJuIGEuam9pbihcIlxcclxcblwiKX07ZnVuY3Rpb24gYWgoYSl7YS5vbnJlYWR5c3RhdGVjaGFuZ2UmJmEub25yZWFkeXN0YXRlY2hhbmdlLmNhbGwoYSl9O2Z1bmN0aW9uIGJoKGEpe0YuY2FsbCh0aGlzKTt0aGlzLmhlYWRlcnM9bmV3IExjO3RoaXMuRD1hfHxudWxsO3RoaXMuYz0hMTt0aGlzLnc9dGhpcy5hPW51bGw7dGhpcy5oPXRoaXMuTj10aGlzLm09XCJcIjt0aGlzLmY9dGhpcy5JPXRoaXMuaT10aGlzLkc9ITE7dGhpcy5nPTA7dGhpcy51PW51bGw7dGhpcy5vPWNoO3RoaXMudj10aGlzLk89ITF9dChiaCxGKTt2YXIgY2g9XCJcIjtiaC5wcm90b3R5cGUuYj1XZyhcImdvb2cubmV0LlhocklvXCIpO3ZhciBkaD0vXmh0dHBzPyQvaSxlaD1bXCJQT1NUXCIsXCJQVVRcIl07XG5mdW5jdGlvbiBmaChhLGIsYyxkLGUpe2lmKGEuYSl0aHJvdyBFcnJvcihcIltnb29nLm5ldC5YaHJJb10gT2JqZWN0IGlzIGFjdGl2ZSB3aXRoIGFub3RoZXIgcmVxdWVzdD1cIithLm0rXCI7IG5ld1VyaT1cIitiKTtjPWM/Yy50b1VwcGVyQ2FzZSgpOlwiR0VUXCI7YS5tPWI7YS5oPVwiXCI7YS5OPWM7YS5HPSExO2EuYz0hMDthLmE9YS5EP2EuRC5hKCk6RmcuYSgpO2Eudz1hLkQ/RWcoYS5EKTpFZyhGZyk7YS5hLm9ucmVhZHlzdGF0ZWNoYW5nZT1yKGEuSmIsYSk7dHJ5e1hnKGEuYixnaChhLFwiT3BlbmluZyBYaHJcIikpLGEuST0hMCxhLmEub3BlbihjLFN0cmluZyhiKSwhMCksYS5JPSExfWNhdGNoKGgpe1hnKGEuYixnaChhLFwiRXJyb3Igb3BlbmluZyBYaHI6IFwiK2gubWVzc2FnZSkpO2hoKGEsaCk7cmV0dXJufWI9ZHx8XCJcIjt2YXIgZj1uZXcgTGMoYS5oZWFkZXJzKTtlJiZLYyhlLGZ1bmN0aW9uKGEsYil7Zi5zZXQoYixhKX0pO2U9RWEoZi5VKCkpO2Q9ay5Gb3JtRGF0YSYmYiBpbnN0YW5jZW9mXG5rLkZvcm1EYXRhOyFHYShlaCxjKXx8ZXx8ZHx8Zi5zZXQoXCJDb250ZW50LVR5cGVcIixcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04XCIpO2YuZm9yRWFjaChmdW5jdGlvbihhLGIpe3RoaXMuYS5zZXRSZXF1ZXN0SGVhZGVyKGIsYSl9LGEpO2EubyYmKGEuYS5yZXNwb25zZVR5cGU9YS5vKTtcIndpdGhDcmVkZW50aWFsc1wiaW4gYS5hJiZhLmEud2l0aENyZWRlbnRpYWxzIT09YS5PJiYoYS5hLndpdGhDcmVkZW50aWFscz1hLk8pO3RyeXtpaChhKSwwPGEuZyYmKGEudj1qaChhLmEpLFhnKGEuYixnaChhLFwiV2lsbCBhYm9ydCBhZnRlciBcIithLmcrXCJtcyBpZiBpbmNvbXBsZXRlLCB4aHIyIFwiK2EudikpLGEudj8oYS5hLnRpbWVvdXQ9YS5nLGEuYS5vbnRpbWVvdXQ9cihhLkdhLGEpKTphLnU9R2MoYS5HYSxhLmcsYSkpLFhnKGEuYixnaChhLFwiU2VuZGluZyByZXF1ZXN0XCIpKSxhLmk9ITAsYS5hLnNlbmQoYiksYS5pPSExfWNhdGNoKGgpe1hnKGEuYixcbmdoKGEsXCJTZW5kIGVycm9yOiBcIitoLm1lc3NhZ2UpKSxoaChhLGgpfX1mdW5jdGlvbiBqaChhKXtyZXR1cm4gUGImJlpiKDkpJiZcIm51bWJlclwiPT10eXBlb2YgYS50aW1lb3V0JiZ2b2lkIDAhPT1hLm9udGltZW91dH1mdW5jdGlvbiBGYShhKXtyZXR1cm5cImNvbnRlbnQtdHlwZVwiPT1hLnRvTG93ZXJDYXNlKCl9Zz1iaC5wcm90b3R5cGU7Zy5HYT1mdW5jdGlvbigpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBhYSYmdGhpcy5hJiYodGhpcy5oPVwiVGltZWQgb3V0IGFmdGVyIFwiK3RoaXMuZytcIm1zLCBhYm9ydGluZ1wiLFhnKHRoaXMuYixnaCh0aGlzLHRoaXMuaCkpLHRoaXMuZGlzcGF0Y2hFdmVudChcInRpbWVvdXRcIiksdGhpcy5hYm9ydCg4KSl9O2Z1bmN0aW9uIGhoKGEsYil7YS5jPSExO2EuYSYmKGEuZj0hMCxhLmEuYWJvcnQoKSxhLmY9ITEpO2EuaD1iO2toKGEpO2xoKGEpfVxuZnVuY3Rpb24ga2goYSl7YS5HfHwoYS5HPSEwLGEuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpLGEuZGlzcGF0Y2hFdmVudChcImVycm9yXCIpKX1nLmFib3J0PWZ1bmN0aW9uKCl7dGhpcy5hJiZ0aGlzLmMmJihYZyh0aGlzLmIsZ2godGhpcyxcIkFib3J0aW5nXCIpKSx0aGlzLmM9ITEsdGhpcy5mPSEwLHRoaXMuYS5hYm9ydCgpLHRoaXMuZj0hMSx0aGlzLmRpc3BhdGNoRXZlbnQoXCJjb21wbGV0ZVwiKSx0aGlzLmRpc3BhdGNoRXZlbnQoXCJhYm9ydFwiKSxsaCh0aGlzKSl9O2cudmE9ZnVuY3Rpb24oKXt0aGlzLmEmJih0aGlzLmMmJih0aGlzLmM9ITEsdGhpcy5mPSEwLHRoaXMuYS5hYm9ydCgpLHRoaXMuZj0hMSksbGgodGhpcywhMCkpO2JoLm9iLnZhLmNhbGwodGhpcyl9O2cuSmI9ZnVuY3Rpb24oKXt0aGlzLnFhfHwodGhpcy5JfHx0aGlzLml8fHRoaXMuZj9taCh0aGlzKTp0aGlzLndjKCkpfTtnLndjPWZ1bmN0aW9uKCl7bWgodGhpcyl9O1xuZnVuY3Rpb24gbWgoYSl7aWYoYS5jJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYWEpaWYoYS53WzFdJiY0PT1uaChhKSYmMj09b2goYSkpWGcoYS5iLGdoKGEsXCJMb2NhbCByZXF1ZXN0IGVycm9yIGRldGVjdGVkIGFuZCBpZ25vcmVkXCIpKTtlbHNlIGlmKGEuaSYmND09bmgoYSkpR2MoYS5KYiwwLGEpO2Vsc2UgaWYoYS5kaXNwYXRjaEV2ZW50KFwicmVhZHlzdGF0ZWNoYW5nZVwiKSw0PT1uaChhKSl7WGcoYS5iLGdoKGEsXCJSZXF1ZXN0IGNvbXBsZXRlXCIpKTthLmM9ITE7dHJ5e3ZhciBiPW9oKGEpO2E6c3dpdGNoKGIpe2Nhc2UgMjAwOmNhc2UgMjAxOmNhc2UgMjAyOmNhc2UgMjA0OmNhc2UgMjA2OmNhc2UgMzA0OmNhc2UgMTIyMzp2YXIgYz0hMDticmVhayBhO2RlZmF1bHQ6Yz0hMX12YXIgZDtpZighKGQ9Yykpe3ZhciBlO2lmKGU9MD09PWIpe3ZhciBmPVN0cmluZyhhLm0pLm1hdGNoKE9jKVsxXXx8bnVsbDtpZighZiYmay5zZWxmJiZrLnNlbGYubG9jYXRpb24pe3ZhciBoPWsuc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcbmY9aC5zdWJzdHIoMCxoLmxlbmd0aC0xKX1lPSFkaC50ZXN0KGY/Zi50b0xvd2VyQ2FzZSgpOlwiXCIpfWQ9ZX1pZihkKWEuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpLGEuZGlzcGF0Y2hFdmVudChcInN1Y2Nlc3NcIik7ZWxzZXt0cnl7dmFyIG09MjxuaChhKT9hLmEuc3RhdHVzVGV4dDpcIlwifWNhdGNoKHApe1hnKGEuYixcIkNhbiBub3QgZ2V0IHN0YXR1czogXCIrcC5tZXNzYWdlKSxtPVwiXCJ9YS5oPW0rXCIgW1wiK29oKGEpK1wiXVwiO2toKGEpfX1maW5hbGx5e2xoKGEpfX19ZnVuY3Rpb24gbGgoYSxiKXtpZihhLmEpe2loKGEpO3ZhciBjPWEuYSxkPWEud1swXT9jYTpudWxsO2EuYT1udWxsO2Eudz1udWxsO2J8fGEuZGlzcGF0Y2hFdmVudChcInJlYWR5XCIpO3RyeXtjLm9ucmVhZHlzdGF0ZWNoYW5nZT1kfWNhdGNoKGUpeyhhPWEuYikmJmEubG9nKFBnLFwiUHJvYmxlbSBlbmNvdW50ZXJlZCByZXNldHRpbmcgb25yZWFkeXN0YXRlY2hhbmdlOiBcIitlLm1lc3NhZ2Usdm9pZCAwKX19fVxuZnVuY3Rpb24gaWgoYSl7YS5hJiZhLnYmJihhLmEub250aW1lb3V0PW51bGwpO2EudSYmKGsuY2xlYXJUaW1lb3V0KGEudSksYS51PW51bGwpfWZ1bmN0aW9uIG5oKGEpe3JldHVybiBhLmE/YS5hLnJlYWR5U3RhdGU6MH1mdW5jdGlvbiBvaChhKXt0cnl7cmV0dXJuIDI8bmgoYSk/YS5hLnN0YXR1czotMX1jYXRjaChiKXtyZXR1cm4tMX19ZnVuY3Rpb24gcGgoYSl7dHJ5e3JldHVybiBhLmE/YS5hLnJlc3BvbnNlVGV4dDpcIlwifWNhdGNoKGIpe3JldHVybiBYZyhhLmIsXCJDYW4gbm90IGdldCByZXNwb25zZVRleHQ6IFwiK2IubWVzc2FnZSksXCJcIn19XG5nLmdldFJlc3BvbnNlPWZ1bmN0aW9uKCl7dHJ5e2lmKCF0aGlzLmEpcmV0dXJuIG51bGw7aWYoXCJyZXNwb25zZVwiaW4gdGhpcy5hKXJldHVybiB0aGlzLmEucmVzcG9uc2U7c3dpdGNoKHRoaXMubyl7Y2FzZSBjaDpjYXNlIFwidGV4dFwiOnJldHVybiB0aGlzLmEucmVzcG9uc2VUZXh0O2Nhc2UgXCJhcnJheWJ1ZmZlclwiOmlmKFwibW96UmVzcG9uc2VBcnJheUJ1ZmZlclwiaW4gdGhpcy5hKXJldHVybiB0aGlzLmEubW96UmVzcG9uc2VBcnJheUJ1ZmZlcn12YXIgYT10aGlzLmI7YSYmYS5sb2coUGcsXCJSZXNwb25zZSB0eXBlIFwiK3RoaXMubytcIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3NlclwiLHZvaWQgMCk7cmV0dXJuIG51bGx9Y2F0Y2goYil7cmV0dXJuIFhnKHRoaXMuYixcIkNhbiBub3QgZ2V0IHJlc3BvbnNlOiBcIitiLm1lc3NhZ2UpLG51bGx9fTtmdW5jdGlvbiBnaChhLGIpe3JldHVybiBiK1wiIFtcIithLk4rXCIgXCIrYS5tK1wiIFwiK29oKGEpK1wiXVwifTsvKlxuIFBvcnRpb25zIG9mIHRoaXMgY29kZSBhcmUgZnJvbSBNb2NoaUtpdCwgcmVjZWl2ZWQgYnlcbiBUaGUgQ2xvc3VyZSBBdXRob3JzIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gQWxsIG90aGVyIGNvZGUgaXMgQ29weXJpZ2h0XG4gMjAwNS0yMDA5IFRoZSBDbG9zdXJlIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4qL1xuZnVuY3Rpb24gcWgoYSxiKXt0aGlzLmc9W107dGhpcy52PWE7dGhpcy51PWJ8fG51bGw7dGhpcy5mPXRoaXMuYT0hMTt0aGlzLmM9dm9pZCAwO3RoaXMubT10aGlzLnc9dGhpcy5pPSExO3RoaXMuaD0wO3RoaXMuYj1udWxsO3RoaXMubD0wfXFoLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24oYSl7aWYodGhpcy5hKXRoaXMuYyBpbnN0YW5jZW9mIHFoJiZ0aGlzLmMuY2FuY2VsKCk7ZWxzZXtpZih0aGlzLmIpe3ZhciBiPXRoaXMuYjtkZWxldGUgdGhpcy5iO2E/Yi5jYW5jZWwoYSk6KGIubC0tLDA+PWIubCYmYi5jYW5jZWwoKSl9dGhpcy52P3RoaXMudi5jYWxsKHRoaXMudSx0aGlzKTp0aGlzLm09ITA7dGhpcy5hfHwoYT1uZXcgcmgodGhpcyksc2godGhpcyksdGgodGhpcywhMSxhKSl9fTtxaC5wcm90b3R5cGUubz1mdW5jdGlvbihhLGIpe3RoaXMuaT0hMTt0aCh0aGlzLGEsYil9O2Z1bmN0aW9uIHRoKGEsYixjKXthLmE9ITA7YS5jPWM7YS5mPSFiO3VoKGEpfVxuZnVuY3Rpb24gc2goYSl7aWYoYS5hKXtpZighYS5tKXRocm93IG5ldyB2aChhKTthLm09ITF9fXFoLnByb3RvdHlwZS5EPWZ1bmN0aW9uKCl7c2godGhpcyk7dGgodGhpcywhMCxudWxsKX07ZnVuY3Rpb24gd2goYSxiKXt4aChhLG51bGwsYix2b2lkIDApfWZ1bmN0aW9uIHhoKGEsYixjLGQpe2EuZy5wdXNoKFtiLGMsZF0pO2EuYSYmdWgoYSl9cWgucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1uZXcgQShmdW5jdGlvbihhLGIpe2Q9YTtlPWJ9KTt4aCh0aGlzLGQsZnVuY3Rpb24oYSl7YSBpbnN0YW5jZW9mIHJoP2YuY2FuY2VsKCk6ZShhKX0pO3JldHVybiBmLnRoZW4oYSxiLGMpfTtwYShxaCk7ZnVuY3Rpb24geWgoYSl7cmV0dXJuIERhKGEuZyxmdW5jdGlvbihhKXtyZXR1cm4gbihhWzFdKX0pfVxuZnVuY3Rpb24gdWgoYSl7aWYoYS5oJiZhLmEmJnloKGEpKXt2YXIgYj1hLmgsYz16aFtiXTtjJiYoay5jbGVhclRpbWVvdXQoYy5hKSxkZWxldGUgemhbYl0pO2EuaD0wfWEuYiYmKGEuYi5sLS0sZGVsZXRlIGEuYik7Yj1hLmM7Zm9yKHZhciBkPWM9ITE7YS5nLmxlbmd0aCYmIWEuaTspe3ZhciBlPWEuZy5zaGlmdCgpLGY9ZVswXSxoPWVbMV07ZT1lWzJdO2lmKGY9YS5mP2g6Zil0cnl7dmFyIG09Zi5jYWxsKGV8fGEudSxiKTt2b2lkIDAhPT1tJiYoYS5mPWEuZiYmKG09PWJ8fG0gaW5zdGFuY2VvZiBFcnJvciksYS5jPWI9bSk7aWYocWEoYil8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLlByb21pc2UmJmIgaW5zdGFuY2VvZiBrLlByb21pc2UpZD0hMCxhLmk9ITB9Y2F0Y2gocCl7Yj1wLGEuZj0hMCx5aChhKXx8KGM9ITApfX1hLmM9YjtkJiYobT1yKGEubyxhLCEwKSxkPXIoYS5vLGEsITEpLGIgaW5zdGFuY2VvZiBxaD8oeGgoYixtLGQpLGIudz0hMCk6Yi50aGVuKG0sZCkpO2MmJihiPVxubmV3IEFoKGIpLHpoW2IuYV09YixhLmg9Yi5hKX1mdW5jdGlvbiB2aCgpe3UuY2FsbCh0aGlzKX10KHZoLHUpO3ZoLnByb3RvdHlwZS5tZXNzYWdlPVwiRGVmZXJyZWQgaGFzIGFscmVhZHkgZmlyZWRcIjt2aC5wcm90b3R5cGUubmFtZT1cIkFscmVhZHlDYWxsZWRFcnJvclwiO2Z1bmN0aW9uIHJoKCl7dS5jYWxsKHRoaXMpfXQocmgsdSk7cmgucHJvdG90eXBlLm1lc3NhZ2U9XCJEZWZlcnJlZCB3YXMgY2FuY2VsZWRcIjtyaC5wcm90b3R5cGUubmFtZT1cIkNhbmNlbGVkRXJyb3JcIjtmdW5jdGlvbiBBaChhKXt0aGlzLmE9ay5zZXRUaW1lb3V0KHIodGhpcy5jLHRoaXMpLDApO3RoaXMuYj1hfUFoLnByb3RvdHlwZS5jPWZ1bmN0aW9uKCl7ZGVsZXRlIHpoW3RoaXMuYV07dGhyb3cgdGhpcy5iO307dmFyIHpoPXt9O2Z1bmN0aW9uIEJoKGEpe3ZhciBiPXt9LGM9Yi5kb2N1bWVudHx8ZG9jdW1lbnQsZD10ZChhKSxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJTQ1JJUFRcIiksZj17TGI6ZSxHYTp2b2lkIDB9LGg9bmV3IHFoKENoLGYpLG09bnVsbCxwPW51bGwhPWIudGltZW91dD9iLnRpbWVvdXQ6NUUzOzA8cCYmKG09d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtEaChlLCEwKTt2YXIgYT1uZXcgRWgoRmgsXCJUaW1lb3V0IHJlYWNoZWQgZm9yIGxvYWRpbmcgc2NyaXB0IFwiK2QpO3NoKGgpO3RoKGgsITEsYSl9LHApLGYuR2E9bSk7ZS5vbmxvYWQ9ZS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtlLnJlYWR5U3RhdGUmJlwibG9hZGVkXCIhPWUucmVhZHlTdGF0ZSYmXCJjb21wbGV0ZVwiIT1lLnJlYWR5U3RhdGV8fChEaChlLGIuZmR8fCExLG0pLGguRCgpKX07ZS5vbmVycm9yPWZ1bmN0aW9uKCl7RGgoZSwhMCxtKTt2YXIgYT1uZXcgRWgoR2gsXCJFcnJvciB3aGlsZSBsb2FkaW5nIHNjcmlwdCBcIitcbmQpO3NoKGgpO3RoKGgsITEsYSl9O2Y9Yi5hdHRyaWJ1dGVzfHx7fTtiYihmLHt0eXBlOlwidGV4dC9qYXZhc2NyaXB0XCIsY2hhcnNldDpcIlVURi04XCJ9KTtKZChlLGYpO2Uuc3JjPXRkKGEpO0hoKGMpLmFwcGVuZENoaWxkKGUpO3JldHVybiBofWZ1bmN0aW9uIEhoKGEpe3ZhciBiO3JldHVybihiPShhfHxkb2N1bWVudCkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJIRUFEXCIpKSYmMCE9Yi5sZW5ndGg/YlswXTphLmRvY3VtZW50RWxlbWVudH1mdW5jdGlvbiBDaCgpe2lmKHRoaXMmJnRoaXMuTGIpe3ZhciBhPXRoaXMuTGI7YSYmXCJTQ1JJUFRcIj09YS50YWdOYW1lJiZEaChhLCEwLHRoaXMuR2EpfX1cbmZ1bmN0aW9uIERoKGEsYixjKXtudWxsIT1jJiZrLmNsZWFyVGltZW91dChjKTthLm9ubG9hZD1jYTthLm9uZXJyb3I9Y2E7YS5vbnJlYWR5c3RhdGVjaGFuZ2U9Y2E7YiYmd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXthJiZhLnBhcmVudE5vZGUmJmEucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhKX0sMCl9dmFyIEdoPTAsRmg9MTtmdW5jdGlvbiBFaChhLGIpe3ZhciBjPVwiSnNsb2FkZXIgZXJyb3IgKGNvZGUgI1wiK2ErXCIpXCI7YiYmKGMrPVwiOiBcIitiKTt1LmNhbGwodGhpcyxjKTt0aGlzLmNvZGU9YX10KEVoLHUpO2Z1bmN0aW9uIEloKGEpe3RoaXMuZj1hfXQoSWgsRGcpO0loLnByb3RvdHlwZS5hPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmZ9O0loLnByb3RvdHlwZS5iPWZ1bmN0aW9uKCl7cmV0dXJue319O1xuZnVuY3Rpb24gSmgoYSxiLGMpe3RoaXMuYj1hO2E9Ynx8e307dGhpcy5pPWEuc2VjdXJlVG9rZW5FbmRwb2ludHx8XCJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZWFwaXMuY29tL3YxL3Rva2VuXCI7dGhpcy5sPWEuc2VjdXJlVG9rZW5UaW1lb3V0fHxLaDt0aGlzLmY9JGEoYS5zZWN1cmVUb2tlbkhlYWRlcnN8fExoKTt0aGlzLmc9YS5maXJlYmFzZUVuZHBvaW50fHxcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2lkZW50aXR5dG9vbGtpdC92My9yZWx5aW5ncGFydHkvXCI7dGhpcy5oPWEuZmlyZWJhc2VUaW1lb3V0fHxNaDt0aGlzLmE9JGEoYS5maXJlYmFzZUhlYWRlcnN8fE5oKTtjJiYodGhpcy5hW1wiWC1DbGllbnQtVmVyc2lvblwiXT1jLHRoaXMuZltcIlgtQ2xpZW50LVZlcnNpb25cIl09Yyk7Yz1cIk5vZGVcIj09bmUoKTtjPWsuWE1MSHR0cFJlcXVlc3R8fGMmJmZpcmViYXNlLklOVEVSTkFMLm5vZGUmJmZpcmViYXNlLklOVEVSTkFMLm5vZGUuWE1MSHR0cFJlcXVlc3Q7aWYoIWMmJlxuIW1lKCkpdGhyb3cgbmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiLFwiVGhlIFhNTEh0dHBSZXF1ZXN0IGNvbXBhdGliaWxpdHkgbGlicmFyeSB3YXMgbm90IGZvdW5kLlwiKTt0aGlzLmM9dm9pZCAwO21lKCk/dGhpcy5jPW5ldyBZZyhzZWxmKTpvZSgpP3RoaXMuYz1uZXcgSWgoYyk6dGhpcy5jPW5ldyBJZ312YXIgT2gsTT1cImlkVG9rZW5cIixLaD1uZXcgQ2UoM0U0LDZFNCksTGg9e1wiQ29udGVudC1UeXBlXCI6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIn0sTWg9bmV3IENlKDNFNCw2RTQpLE5oPXtcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24vanNvblwifTtmdW5jdGlvbiBQaChhLGIpe2I/YS5hW1wiWC1GaXJlYmFzZS1Mb2NhbGVcIl09YjpkZWxldGUgYS5hW1wiWC1GaXJlYmFzZS1Mb2NhbGVcIl19XG5mdW5jdGlvbiBRaChhLGIpe2I/KGEuYVtcIlgtQ2xpZW50LVZlcnNpb25cIl09YixhLmZbXCJYLUNsaWVudC1WZXJzaW9uXCJdPWIpOihkZWxldGUgYS5hW1wiWC1DbGllbnQtVmVyc2lvblwiXSxkZWxldGUgYS5mW1wiWC1DbGllbnQtVmVyc2lvblwiXSl9ZnVuY3Rpb24gUmgoYSxiLGMsZCxlLGYsaCl7WWQoKXx8bWUoKT9hPXIoYS5vLGEpOihPaHx8KE9oPW5ldyBBKGZ1bmN0aW9uKGEsYil7U2goYSxiKX0pKSxhPXIoYS5tLGEpKTthKGIsYyxkLGUsZixoKX1cbkpoLnByb3RvdHlwZS5vPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtpZihtZSgpJiYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBrLmZldGNofHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGsuSGVhZGVyc3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBrLlJlcXVlc3QpKXRocm93IG5ldyBMKFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiLFwiZmV0Y2gsIEhlYWRlcnMgYW5kIFJlcXVlc3QgbmF0aXZlIEFQSXMgb3IgZXF1aXZhbGVudCBQb2x5ZmlsbHMgbXVzdCBiZSBhdmFpbGFibGUgdG8gc3VwcG9ydCBIVFRQIHJlcXVlc3RzIGZyb20gYSBXb3JrZXIgZW52aXJvbm1lbnQuXCIpO3ZhciBoPW5ldyBiaCh0aGlzLmMpO2lmKGYpe2guZz1NYXRoLm1heCgwLGYpO3ZhciBtPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtoLmRpc3BhdGNoRXZlbnQoXCJ0aW1lb3V0XCIpfSxmKX11YyhoLFwiY29tcGxldGVcIixmdW5jdGlvbigpe20mJmNsZWFyVGltZW91dChtKTt2YXIgYT1udWxsO3RyeXthPVxuSlNPTi5wYXJzZShwaCh0aGlzKSl8fG51bGx9Y2F0Y2goeCl7YT1udWxsfWImJmIoYSl9KTtBYyhoLFwicmVhZHlcIixmdW5jdGlvbigpe20mJmNsZWFyVGltZW91dChtKTtLYih0aGlzKX0pO0FjKGgsXCJ0aW1lb3V0XCIsZnVuY3Rpb24oKXttJiZjbGVhclRpbWVvdXQobSk7S2IodGhpcyk7YiYmYihudWxsKX0pO2ZoKGgsYSxjLGQsZSl9O3ZhciBUaD1xZChcImh0dHBzOi8vYXBpcy5nb29nbGUuY29tL2pzL2NsaWVudC5qcz9vbmxvYWQ9JXtvbmxvYWR9XCIpLFVoPVwiX19mY2JcIitNYXRoLmZsb29yKDFFNipNYXRoLnJhbmRvbSgpKS50b1N0cmluZygpO1xuZnVuY3Rpb24gU2goYSxiKXtpZigoKHdpbmRvdy5nYXBpfHx7fSkuY2xpZW50fHx7fSkucmVxdWVzdClhKCk7ZWxzZXtrW1VoXT1mdW5jdGlvbigpeygod2luZG93LmdhcGl8fHt9KS5jbGllbnR8fHt9KS5yZXF1ZXN0P2EoKTpiKEVycm9yKFwiQ09SU19VTlNVUFBPUlRFRFwiKSl9O3ZhciBjPXVkKFRoLHtvbmxvYWQ6VWh9KTt3aChCaChjKSxmdW5jdGlvbigpe2IoRXJyb3IoXCJDT1JTX1VOU1VQUE9SVEVEXCIpKX0pfX1cbkpoLnByb3RvdHlwZS5tPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9dGhpcztPaC50aGVuKGZ1bmN0aW9uKCl7d2luZG93LmdhcGkuY2xpZW50LnNldEFwaUtleShmLmIpO3ZhciBoPXdpbmRvdy5nYXBpLmF1dGguZ2V0VG9rZW4oKTt3aW5kb3cuZ2FwaS5hdXRoLnNldFRva2VuKG51bGwpO3dpbmRvdy5nYXBpLmNsaWVudC5yZXF1ZXN0KHtwYXRoOmEsbWV0aG9kOmMsYm9keTpkLGhlYWRlcnM6ZSxhdXRoVHlwZTpcIm5vbmVcIixjYWxsYmFjazpmdW5jdGlvbihhKXt3aW5kb3cuZ2FwaS5hdXRoLnNldFRva2VuKGgpO2ImJmIoYSl9fSl9KS5zKGZ1bmN0aW9uKGEpe2ImJmIoe2Vycm9yOnttZXNzYWdlOmEmJmEubWVzc2FnZXx8XCJDT1JTX1VOU1VQUE9SVEVEXCJ9fSl9KX07XG5mdW5jdGlvbiBWaChhLGIpe3JldHVybiBuZXcgQShmdW5jdGlvbihjLGQpe1wicmVmcmVzaF90b2tlblwiPT1iLmdyYW50X3R5cGUmJmIucmVmcmVzaF90b2tlbnx8XCJhdXRob3JpemF0aW9uX2NvZGVcIj09Yi5ncmFudF90eXBlJiZiLmNvZGU/UmgoYSxhLmkrXCI/a2V5PVwiK2VuY29kZVVSSUNvbXBvbmVudChhLmIpLGZ1bmN0aW9uKGEpe2E/YS5lcnJvcj9kKFdoKGEpKTphLmFjY2Vzc190b2tlbiYmYS5yZWZyZXNoX3Rva2VuP2MoYSk6ZChuZXcgTChcImludGVybmFsLWVycm9yXCIpKTpkKG5ldyBMKFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiKSl9LFwiUE9TVFwiLGhkKGIpLnRvU3RyaW5nKCksYS5mLGEubC5nZXQoKSk6ZChuZXcgTChcImludGVybmFsLWVycm9yXCIpKX0pfVxuZnVuY3Rpb24gWGgoYSxiLGMsZCxlLGYpe3ZhciBoPWRkKGEuZytiKTtHKGgsXCJrZXlcIixhLmIpO2YmJkcoaCxcImNiXCIsb2EoKS50b1N0cmluZygpKTt2YXIgbT1cIkdFVFwiPT1jO2lmKG0pZm9yKHZhciBwIGluIGQpZC5oYXNPd25Qcm9wZXJ0eShwKSYmRyhoLHAsZFtwXSk7cmV0dXJuIG5ldyBBKGZ1bmN0aW9uKGIsZil7UmgoYSxoLnRvU3RyaW5nKCksZnVuY3Rpb24oYSl7YT9hLmVycm9yP2YoV2goYSxlfHx7fSkpOmIoYSk6ZihuZXcgTChcIm5ldHdvcmstcmVxdWVzdC1mYWlsZWRcIikpfSxjLG0/dm9pZCAwOk9kKHllKGQpKSxhLmEsYS5oLmdldCgpKX0pfWZ1bmN0aW9uIFloKGEpe2E9YS5lbWFpbDtpZighbChhKXx8IWdlLnRlc3QoYSkpdGhyb3cgbmV3IEwoXCJpbnZhbGlkLWVtYWlsXCIpO31mdW5jdGlvbiBaaChhKXtcImVtYWlsXCJpbiBhJiZZaChhKX1cbmZ1bmN0aW9uICRoKGEsYil7cmV0dXJuIFAoYSxhaSx7aWRlbnRpZmllcjpiLGNvbnRpbnVlVXJpOnZlKCk/VmQoKTpcImh0dHA6Ly9sb2NhbGhvc3RcIn0pLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIGEuYWxsUHJvdmlkZXJzfHxbXX0pfWZ1bmN0aW9uIGJpKGEsYil7cmV0dXJuIFAoYSxhaSx7aWRlbnRpZmllcjpiLGNvbnRpbnVlVXJpOnZlKCk/VmQoKTpcImh0dHA6Ly9sb2NhbGhvc3RcIn0pLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIGEuc2lnbmluTWV0aG9kc3x8W119KX1mdW5jdGlvbiBjaShhKXtyZXR1cm4gUChhLGRpLHt9KS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBhLmF1dGhvcml6ZWREb21haW5zfHxbXX0pfWZ1bmN0aW9uIGVpKGEpe2lmKCFhW01dKXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIik7fVxuZnVuY3Rpb24gZmkoYSl7aWYoYS5waG9uZU51bWJlcnx8YS50ZW1wb3JhcnlQcm9vZil7aWYoIWEucGhvbmVOdW1iZXJ8fCFhLnRlbXBvcmFyeVByb29mKXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIik7fWVsc2V7aWYoIWEuc2Vzc2lvbkluZm8pdGhyb3cgbmV3IEwoXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1pZFwiKTtpZighYS5jb2RlKXRocm93IG5ldyBMKFwibWlzc2luZy12ZXJpZmljYXRpb24tY29kZVwiKTt9fUpoLnByb3RvdHlwZS5RYT1mdW5jdGlvbigpe3JldHVybiBQKHRoaXMsZ2kse30pfTtKaC5wcm90b3R5cGUucGI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUCh0aGlzLGhpLHtpZFRva2VuOmEsZW1haWw6Yn0pfTtKaC5wcm90b3R5cGUucWI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUCh0aGlzLGtnLHtpZFRva2VuOmEscGFzc3dvcmQ6Yn0pfTt2YXIgaWk9e2Rpc3BsYXlOYW1lOlwiRElTUExBWV9OQU1FXCIscGhvdG9Vcmw6XCJQSE9UT19VUkxcIn07Zz1KaC5wcm90b3R5cGU7XG5nLnJiPWZ1bmN0aW9uKGEsYil7dmFyIGM9e2lkVG9rZW46YX0sZD1bXTtZYShpaSxmdW5jdGlvbihhLGYpe3ZhciBlPWJbZl07bnVsbD09PWU/ZC5wdXNoKGEpOmYgaW4gYiYmKGNbZl09ZSl9KTtkLmxlbmd0aCYmKGMuZGVsZXRlQXR0cmlidXRlPWQpO3JldHVybiBQKHRoaXMsaGksYyl9O2cua2I9ZnVuY3Rpb24oYSxiKXthPXtyZXF1ZXN0VHlwZTpcIlBBU1NXT1JEX1JFU0VUXCIsZW1haWw6YX07YmIoYSxiKTtyZXR1cm4gUCh0aGlzLGppLGEpfTtnLmxiPWZ1bmN0aW9uKGEsYil7YT17cmVxdWVzdFR5cGU6XCJFTUFJTF9TSUdOSU5cIixlbWFpbDphfTtiYihhLGIpO3JldHVybiBQKHRoaXMsa2ksYSl9O2cuamI9ZnVuY3Rpb24oYSxiKXthPXtyZXF1ZXN0VHlwZTpcIlZFUklGWV9FTUFJTFwiLGlkVG9rZW46YX07YmIoYSxiKTtyZXR1cm4gUCh0aGlzLGxpLGEpfTtmdW5jdGlvbiBzZyhhLGIpe3JldHVybiBQKGEsbWksYil9Zy5VYT1mdW5jdGlvbihhKXtyZXR1cm4gUCh0aGlzLG5pLGEpfTtcbmZ1bmN0aW9uIG9pKGEsYixjKXtyZXR1cm4gUChhLHBpLHtpZFRva2VuOmIsZGVsZXRlUHJvdmlkZXI6Y30pfWZ1bmN0aW9uIHFpKGEpe2lmKCFhLnJlcXVlc3RVcml8fCFhLnNlc3Npb25JZCYmIWEucG9zdEJvZHkmJiFhLnBlbmRpbmdUb2tlbil0aHJvdyBuZXcgTChcImludGVybmFsLWVycm9yXCIpO31mdW5jdGlvbiByaShhLGIpe2Iub2F1dGhJZFRva2VuJiZiLnByb3ZpZGVySWQmJjA9PWIucHJvdmlkZXJJZC5pbmRleE9mKFwib2lkYy5cIikmJiFiLnBlbmRpbmdUb2tlbiYmKGEuc2Vzc2lvbklkP2Iubm9uY2U9YS5zZXNzaW9uSWQ6YS5wb3N0Qm9keSYmKGE9bmV3IFRjKGEucG9zdEJvZHkpLGxkKGEsXCJub25jZVwiKSYmKGIubm9uY2U9YS5nZXQoXCJub25jZVwiKSkpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHNpKGEpe3ZhciBiPW51bGw7YS5uZWVkQ29uZmlybWF0aW9uPyhhLmNvZGU9XCJhY2NvdW50LWV4aXN0cy13aXRoLWRpZmZlcmVudC1jcmVkZW50aWFsXCIsYj1DZyhhKSk6XCJGRURFUkFURURfVVNFUl9JRF9BTFJFQURZX0xJTktFRFwiPT1hLmVycm9yTWVzc2FnZT8oYS5jb2RlPVwiY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiLGI9Q2coYSkpOlwiRU1BSUxfRVhJU1RTXCI9PWEuZXJyb3JNZXNzYWdlPyhhLmNvZGU9XCJlbWFpbC1hbHJlYWR5LWluLXVzZVwiLGI9Q2coYSkpOmEuZXJyb3JNZXNzYWdlJiYoYj10aShhLmVycm9yTWVzc2FnZSkpO2lmKGIpdGhyb3cgYjtpZighYVtNXSl0aHJvdyBuZXcgTChcImludGVybmFsLWVycm9yXCIpO31mdW5jdGlvbiBSZihhLGIpe2IucmV0dXJuSWRwQ3JlZGVudGlhbD0hMDtyZXR1cm4gUChhLHVpLGIpfWZ1bmN0aW9uIFRmKGEsYil7Yi5yZXR1cm5JZHBDcmVkZW50aWFsPSEwO3JldHVybiBQKGEsdmksYil9XG5mdW5jdGlvbiBVZihhLGIpe2IucmV0dXJuSWRwQ3JlZGVudGlhbD0hMDtiLmF1dG9DcmVhdGU9ITE7cmV0dXJuIFAoYSx3aSxiKX1mdW5jdGlvbiB4aShhKXtpZighYS5vb2JDb2RlKXRocm93IG5ldyBMKFwiaW52YWxpZC1hY3Rpb24tY29kZVwiKTt9Zy5aYT1mdW5jdGlvbihhLGIpe3JldHVybiBQKHRoaXMseWkse29vYkNvZGU6YSxuZXdQYXNzd29yZDpifSl9O2cuSmE9ZnVuY3Rpb24oYSl7cmV0dXJuIFAodGhpcyx6aSx7b29iQ29kZTphfSl9O2cuV2E9ZnVuY3Rpb24oYSl7cmV0dXJuIFAodGhpcyxBaSx7b29iQ29kZTphfSl9O1xudmFyIEFpPXtlbmRwb2ludDpcInNldEFjY291bnRJbmZvXCIsQjp4aSxkYTpcImVtYWlsXCJ9LHppPXtlbmRwb2ludDpcInJlc2V0UGFzc3dvcmRcIixCOnhpLEo6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXF1ZXN0VHlwZTtpZighYnx8IWEuZW1haWwmJlwiRU1BSUxfU0lHTklOXCIhPWIpdGhyb3cgbmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiKTt9fSxCaT17ZW5kcG9pbnQ6XCJzaWdudXBOZXdVc2VyXCIsQjpmdW5jdGlvbihhKXtZaChhKTtpZighYS5wYXNzd29yZCl0aHJvdyBuZXcgTChcIndlYWstcGFzc3dvcmRcIik7fSxKOmVpLFI6ITB9LGFpPXtlbmRwb2ludDpcImNyZWF0ZUF1dGhVcmlcIn0sQ2k9e2VuZHBvaW50OlwiZGVsZXRlQWNjb3VudFwiLFQ6W1wiaWRUb2tlblwiXX0scGk9e2VuZHBvaW50Olwic2V0QWNjb3VudEluZm9cIixUOltcImlkVG9rZW5cIixcImRlbGV0ZVByb3ZpZGVyXCJdLEI6ZnVuY3Rpb24oYSl7aWYoIWZhKGEuZGVsZXRlUHJvdmlkZXIpKXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIik7fX0saGc9XG57ZW5kcG9pbnQ6XCJlbWFpbExpbmtTaWduaW5cIixUOltcImVtYWlsXCIsXCJvb2JDb2RlXCJdLEI6WWgsSjplaSxSOiEwfSxqZz17ZW5kcG9pbnQ6XCJlbWFpbExpbmtTaWduaW5cIixUOltcImlkVG9rZW5cIixcImVtYWlsXCIsXCJvb2JDb2RlXCJdLEI6WWgsSjplaSxSOiEwfSxEaT17ZW5kcG9pbnQ6XCJnZXRBY2NvdW50SW5mb1wifSxraT17ZW5kcG9pbnQ6XCJnZXRPb2JDb25maXJtYXRpb25Db2RlXCIsVDpbXCJyZXF1ZXN0VHlwZVwiXSxCOmZ1bmN0aW9uKGEpe2lmKFwiRU1BSUxfU0lHTklOXCIhPWEucmVxdWVzdFR5cGUpdGhyb3cgbmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiKTtZaChhKX0sZGE6XCJlbWFpbFwifSxsaT17ZW5kcG9pbnQ6XCJnZXRPb2JDb25maXJtYXRpb25Db2RlXCIsVDpbXCJpZFRva2VuXCIsXCJyZXF1ZXN0VHlwZVwiXSxCOmZ1bmN0aW9uKGEpe2lmKFwiVkVSSUZZX0VNQUlMXCIhPWEucmVxdWVzdFR5cGUpdGhyb3cgbmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiKTt9LGRhOlwiZW1haWxcIn0samk9e2VuZHBvaW50OlwiZ2V0T29iQ29uZmlybWF0aW9uQ29kZVwiLFxuVDpbXCJyZXF1ZXN0VHlwZVwiXSxCOmZ1bmN0aW9uKGEpe2lmKFwiUEFTU1dPUkRfUkVTRVRcIiE9YS5yZXF1ZXN0VHlwZSl0aHJvdyBuZXcgTChcImludGVybmFsLWVycm9yXCIpO1loKGEpfSxkYTpcImVtYWlsXCJ9LGRpPXt1YjohMCxlbmRwb2ludDpcImdldFByb2plY3RDb25maWdcIixJYjpcIkdFVFwifSxFaT17dWI6ITAsZW5kcG9pbnQ6XCJnZXRSZWNhcHRjaGFQYXJhbVwiLEliOlwiR0VUXCIsSjpmdW5jdGlvbihhKXtpZighYS5yZWNhcHRjaGFTaXRlS2V5KXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIik7fX0seWk9e2VuZHBvaW50OlwicmVzZXRQYXNzd29yZFwiLEI6eGksZGE6XCJlbWFpbFwifSxtaT17ZW5kcG9pbnQ6XCJzZW5kVmVyaWZpY2F0aW9uQ29kZVwiLFQ6W1wicGhvbmVOdW1iZXJcIixcInJlY2FwdGNoYVRva2VuXCJdLGRhOlwic2Vzc2lvbkluZm9cIn0saGk9e2VuZHBvaW50Olwic2V0QWNjb3VudEluZm9cIixUOltcImlkVG9rZW5cIl0sQjpaaCxSOiEwfSxrZz17ZW5kcG9pbnQ6XCJzZXRBY2NvdW50SW5mb1wiLFxuVDpbXCJpZFRva2VuXCJdLEI6ZnVuY3Rpb24oYSl7WmgoYSk7aWYoIWEucGFzc3dvcmQpdGhyb3cgbmV3IEwoXCJ3ZWFrLXBhc3N3b3JkXCIpO30sSjplaSxSOiEwfSxnaT17ZW5kcG9pbnQ6XCJzaWdudXBOZXdVc2VyXCIsSjplaSxSOiEwfSx1aT17ZW5kcG9pbnQ6XCJ2ZXJpZnlBc3NlcnRpb25cIixCOnFpLE9hOnJpLEo6c2ksUjohMH0sd2k9e2VuZHBvaW50OlwidmVyaWZ5QXNzZXJ0aW9uXCIsQjpxaSxPYTpyaSxKOmZ1bmN0aW9uKGEpe2lmKGEuZXJyb3JNZXNzYWdlJiZcIlVTRVJfTk9UX0ZPVU5EXCI9PWEuZXJyb3JNZXNzYWdlKXRocm93IG5ldyBMKFwidXNlci1ub3QtZm91bmRcIik7aWYoYS5lcnJvck1lc3NhZ2UpdGhyb3cgdGkoYS5lcnJvck1lc3NhZ2UpO2lmKCFhW01dKXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIik7fSxSOiEwfSx2aT17ZW5kcG9pbnQ6XCJ2ZXJpZnlBc3NlcnRpb25cIixCOmZ1bmN0aW9uKGEpe3FpKGEpO2lmKCFhLmlkVG9rZW4pdGhyb3cgbmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiKTtcbn0sT2E6cmksSjpzaSxSOiEwfSxGaT17ZW5kcG9pbnQ6XCJ2ZXJpZnlDdXN0b21Ub2tlblwiLEI6ZnVuY3Rpb24oYSl7aWYoIWEudG9rZW4pdGhyb3cgbmV3IEwoXCJpbnZhbGlkLWN1c3RvbS10b2tlblwiKTt9LEo6ZWksUjohMH0saWc9e2VuZHBvaW50OlwidmVyaWZ5UGFzc3dvcmRcIixCOmZ1bmN0aW9uKGEpe1loKGEpO2lmKCFhLnBhc3N3b3JkKXRocm93IG5ldyBMKFwid3JvbmctcGFzc3dvcmRcIik7fSxKOmVpLFI6ITB9LG5pPXtlbmRwb2ludDpcInZlcmlmeVBob25lTnVtYmVyXCIsQjpmaSxKOmVpfSxwZz17ZW5kcG9pbnQ6XCJ2ZXJpZnlQaG9uZU51bWJlclwiLEI6ZnVuY3Rpb24oYSl7aWYoIWEuaWRUb2tlbil0aHJvdyBuZXcgTChcImludGVybmFsLWVycm9yXCIpO2ZpKGEpfSxKOmZ1bmN0aW9uKGEpe2lmKGEudGVtcG9yYXJ5UHJvb2YpdGhyb3cgYS5jb2RlPVwiY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiLENnKGEpO2VpKGEpfX0scWc9e1hiOntVU0VSX05PVF9GT1VORDpcInVzZXItbm90LWZvdW5kXCJ9LFxuZW5kcG9pbnQ6XCJ2ZXJpZnlQaG9uZU51bWJlclwiLEI6ZmksSjplaX07ZnVuY3Rpb24gUChhLGIsYyl7aWYoIVBlKGMsYi5UKSlyZXR1cm4gQyhuZXcgTChcImludGVybmFsLWVycm9yXCIpKTt2YXIgZD1iLklifHxcIlBPU1RcIixlO3JldHVybiBCKGMpLnRoZW4oYi5CKS50aGVuKGZ1bmN0aW9uKCl7Yi5SJiYoYy5yZXR1cm5TZWN1cmVUb2tlbj0hMCk7cmV0dXJuIFhoKGEsYi5lbmRwb2ludCxkLGMsYi5YYixiLnVifHwhMSl9KS50aGVuKGZ1bmN0aW9uKGEpe2U9YTtyZXR1cm4gYi5PYT9iLk9hKGMsZSk6ZX0pLnRoZW4oYi5KKS50aGVuKGZ1bmN0aW9uKCl7aWYoIWIuZGEpcmV0dXJuIGU7aWYoIShiLmRhIGluIGUpKXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIik7cmV0dXJuIGVbYi5kYV19KX1mdW5jdGlvbiB0aShhKXtyZXR1cm4gV2goe2Vycm9yOntlcnJvcnM6W3ttZXNzYWdlOmF9XSxjb2RlOjQwMCxtZXNzYWdlOmF9fSl9XG5mdW5jdGlvbiBXaChhLGIpe3ZhciBjPShhLmVycm9yJiZhLmVycm9yLmVycm9ycyYmYS5lcnJvci5lcnJvcnNbMF18fHt9KS5yZWFzb258fFwiXCI7dmFyIGQ9e2tleUludmFsaWQ6XCJpbnZhbGlkLWFwaS1rZXlcIixpcFJlZmVyZXJCbG9ja2VkOlwiYXBwLW5vdC1hdXRob3JpemVkXCJ9O2lmKGM9ZFtjXT9uZXcgTChkW2NdKTpudWxsKXJldHVybiBjO2M9YS5lcnJvciYmYS5lcnJvci5tZXNzYWdlfHxcIlwiO2Q9e0lOVkFMSURfQ1VTVE9NX1RPS0VOOlwiaW52YWxpZC1jdXN0b20tdG9rZW5cIixDUkVERU5USUFMX01JU01BVENIOlwiY3VzdG9tLXRva2VuLW1pc21hdGNoXCIsTUlTU0lOR19DVVNUT01fVE9LRU46XCJpbnRlcm5hbC1lcnJvclwiLElOVkFMSURfSURFTlRJRklFUjpcImludmFsaWQtZW1haWxcIixNSVNTSU5HX0NPTlRJTlVFX1VSSTpcImludGVybmFsLWVycm9yXCIsSU5WQUxJRF9FTUFJTDpcImludmFsaWQtZW1haWxcIixJTlZBTElEX1BBU1NXT1JEOlwid3JvbmctcGFzc3dvcmRcIixVU0VSX0RJU0FCTEVEOlwidXNlci1kaXNhYmxlZFwiLFxuTUlTU0lOR19QQVNTV09SRDpcImludGVybmFsLWVycm9yXCIsRU1BSUxfRVhJU1RTOlwiZW1haWwtYWxyZWFkeS1pbi11c2VcIixQQVNTV09SRF9MT0dJTl9ESVNBQkxFRDpcIm9wZXJhdGlvbi1ub3QtYWxsb3dlZFwiLElOVkFMSURfSURQX1JFU1BPTlNFOlwiaW52YWxpZC1jcmVkZW50aWFsXCIsSU5WQUxJRF9QRU5ESU5HX1RPS0VOOlwiaW52YWxpZC1jcmVkZW50aWFsXCIsRkVERVJBVEVEX1VTRVJfSURfQUxSRUFEWV9MSU5LRUQ6XCJjcmVkZW50aWFsLWFscmVhZHktaW4tdXNlXCIsTUlTU0lOR19PUl9JTlZBTElEX05PTkNFOlwibWlzc2luZy1vci1pbnZhbGlkLW5vbmNlXCIsSU5WQUxJRF9NRVNTQUdFX1BBWUxPQUQ6XCJpbnZhbGlkLW1lc3NhZ2UtcGF5bG9hZFwiLElOVkFMSURfUkVDSVBJRU5UX0VNQUlMOlwiaW52YWxpZC1yZWNpcGllbnQtZW1haWxcIixJTlZBTElEX1NFTkRFUjpcImludmFsaWQtc2VuZGVyXCIsRU1BSUxfTk9UX0ZPVU5EOlwidXNlci1ub3QtZm91bmRcIixSRVNFVF9QQVNTV09SRF9FWENFRURfTElNSVQ6XCJ0b28tbWFueS1yZXF1ZXN0c1wiLFxuRVhQSVJFRF9PT0JfQ09ERTpcImV4cGlyZWQtYWN0aW9uLWNvZGVcIixJTlZBTElEX09PQl9DT0RFOlwiaW52YWxpZC1hY3Rpb24tY29kZVwiLE1JU1NJTkdfT09CX0NPREU6XCJpbnRlcm5hbC1lcnJvclwiLElOVkFMSURfUFJPVklERVJfSUQ6XCJpbnZhbGlkLXByb3ZpZGVyLWlkXCIsQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOOlwicmVxdWlyZXMtcmVjZW50LWxvZ2luXCIsSU5WQUxJRF9JRF9UT0tFTjpcImludmFsaWQtdXNlci10b2tlblwiLFRPS0VOX0VYUElSRUQ6XCJ1c2VyLXRva2VuLWV4cGlyZWRcIixVU0VSX05PVF9GT1VORDpcInVzZXItdG9rZW4tZXhwaXJlZFwiLENPUlNfVU5TVVBQT1JURUQ6XCJjb3JzLXVuc3VwcG9ydGVkXCIsRFlOQU1JQ19MSU5LX05PVF9BQ1RJVkFURUQ6XCJkeW5hbWljLWxpbmstbm90LWFjdGl2YXRlZFwiLElOVkFMSURfQVBQX0lEOlwiaW52YWxpZC1hcHAtaWRcIixUT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVI6XCJ0b28tbWFueS1yZXF1ZXN0c1wiLFdFQUtfUEFTU1dPUkQ6XCJ3ZWFrLXBhc3N3b3JkXCIsXG5PUEVSQVRJT05fTk9UX0FMTE9XRUQ6XCJvcGVyYXRpb24tbm90LWFsbG93ZWRcIixVU0VSX0NBTkNFTExFRDpcInVzZXItY2FuY2VsbGVkXCIsQ0FQVENIQV9DSEVDS19GQUlMRUQ6XCJjYXB0Y2hhLWNoZWNrLWZhaWxlZFwiLElOVkFMSURfQVBQX0NSRURFTlRJQUw6XCJpbnZhbGlkLWFwcC1jcmVkZW50aWFsXCIsSU5WQUxJRF9DT0RFOlwiaW52YWxpZC12ZXJpZmljYXRpb24tY29kZVwiLElOVkFMSURfUEhPTkVfTlVNQkVSOlwiaW52YWxpZC1waG9uZS1udW1iZXJcIixJTlZBTElEX1NFU1NJT05fSU5GTzpcImludmFsaWQtdmVyaWZpY2F0aW9uLWlkXCIsSU5WQUxJRF9URU1QT1JBUllfUFJPT0Y6XCJpbnZhbGlkLWNyZWRlbnRpYWxcIixNSVNTSU5HX0FQUF9DUkVERU5USUFMOlwibWlzc2luZy1hcHAtY3JlZGVudGlhbFwiLE1JU1NJTkdfQ09ERTpcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGVcIixNSVNTSU5HX1BIT05FX05VTUJFUjpcIm1pc3NpbmctcGhvbmUtbnVtYmVyXCIsTUlTU0lOR19TRVNTSU9OX0lORk86XCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1pZFwiLFxuUVVPVEFfRVhDRUVERUQ6XCJxdW90YS1leGNlZWRlZFwiLFNFU1NJT05fRVhQSVJFRDpcImNvZGUtZXhwaXJlZFwiLFJFSkVDVEVEX0NSRURFTlRJQUw6XCJyZWplY3RlZC1jcmVkZW50aWFsXCIsSU5WQUxJRF9DT05USU5VRV9VUkk6XCJpbnZhbGlkLWNvbnRpbnVlLXVyaVwiLE1JU1NJTkdfQU5EUk9JRF9QQUNLQUdFX05BTUU6XCJtaXNzaW5nLWFuZHJvaWQtcGtnLW5hbWVcIixNSVNTSU5HX0lPU19CVU5ETEVfSUQ6XCJtaXNzaW5nLWlvcy1idW5kbGUtaWRcIixVTkFVVEhPUklaRURfRE9NQUlOOlwidW5hdXRob3JpemVkLWNvbnRpbnVlLXVyaVwiLElOVkFMSURfRFlOQU1JQ19MSU5LX0RPTUFJTjpcImludmFsaWQtZHluYW1pYy1saW5rLWRvbWFpblwiLElOVkFMSURfT0FVVEhfQ0xJRU5UX0lEOlwiaW52YWxpZC1vYXV0aC1jbGllbnQtaWRcIixJTlZBTElEX0NFUlRfSEFTSDpcImludmFsaWQtY2VydC1oYXNoXCJ9O2JiKGQsYnx8e30pO2I9KGI9Yy5tYXRjaCgvXlteXFxzXStcXHMqOlxccyooLiopJC8pKSYmMTxiLmxlbmd0aD9cbmJbMV06dm9pZCAwO2Zvcih2YXIgZSBpbiBkKWlmKDA9PT1jLmluZGV4T2YoZSkpcmV0dXJuIG5ldyBMKGRbZV0sYik7IWImJmEmJihiPXhlKGEpKTtyZXR1cm4gbmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiLGIpfTtmdW5jdGlvbiBHaShhKXt0aGlzLmI9YTt0aGlzLmE9bnVsbDt0aGlzLmZiPUhpKHRoaXMpfVxuZnVuY3Rpb24gSGkoYSl7cmV0dXJuIElpKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBuZXcgQShmdW5jdGlvbihiLGMpe0koXCJnYXBpLmlmcmFtZXMuZ2V0Q29udGV4dFwiKSgpLm9wZW4oe3doZXJlOmRvY3VtZW50LmJvZHksdXJsOmEuYixtZXNzYWdlSGFuZGxlcnNGaWx0ZXI6SShcImdhcGkuaWZyYW1lcy5DUk9TU19PUklHSU5fSUZSQU1FU19GSUxURVJcIiksYXR0cmlidXRlczp7c3R5bGU6e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix0b3A6XCItMTAwcHhcIix3aWR0aDpcIjFweFwiLGhlaWdodDpcIjFweFwifX0sZG9udGNsZWFyOiEwfSxmdW5jdGlvbihkKXtmdW5jdGlvbiBlKCl7Y2xlYXJUaW1lb3V0KGYpO2IoKX1hLmE9ZDthLmEucmVzdHlsZSh7c2V0SGlkZU9uTGVhdmU6ITF9KTt2YXIgZj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YyhFcnJvcihcIk5ldHdvcmsgRXJyb3JcIikpfSxKaS5nZXQoKSk7ZC5waW5nKGUpLnRoZW4oZSxmdW5jdGlvbigpe2MoRXJyb3IoXCJOZXR3b3JrIEVycm9yXCIpKX0pfSl9KX0pfVxuZnVuY3Rpb24gS2koYSxiKXtyZXR1cm4gYS5mYi50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBBKGZ1bmN0aW9uKGMpe2EuYS5zZW5kKGIudHlwZSxiLGMsSShcImdhcGkuaWZyYW1lcy5DUk9TU19PUklHSU5fSUZSQU1FU19GSUxURVJcIikpfSl9KX1mdW5jdGlvbiBMaShhLGIpe2EuZmIudGhlbihmdW5jdGlvbigpe2EuYS5yZWdpc3RlcihcImF1dGhFdmVudFwiLGIsSShcImdhcGkuaWZyYW1lcy5DUk9TU19PUklHSU5fSUZSQU1FU19GSUxURVJcIikpfSl9dmFyIE1pPXFkKFwiaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vanMvYXBpLmpzP29ubG9hZD0le29ubG9hZH1cIiksTmk9bmV3IENlKDNFNCw2RTQpLEppPW5ldyBDZSg1RTMsMTVFMyksT2k9bnVsbDtcbmZ1bmN0aW9uIElpKCl7cmV0dXJuIE9pP09pOk9pPShuZXcgQShmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoKXtCZSgpO0koXCJnYXBpLmxvYWRcIikoXCJnYXBpLmlmcmFtZXNcIix7Y2FsbGJhY2s6YSxvbnRpbWVvdXQ6ZnVuY3Rpb24oKXtCZSgpO2IoRXJyb3IoXCJOZXR3b3JrIEVycm9yXCIpKX0sdGltZW91dDpOaS5nZXQoKX0pfWlmKEkoXCJnYXBpLmlmcmFtZXMuSWZyYW1lXCIpKWEoKTtlbHNlIGlmKEkoXCJnYXBpLmxvYWRcIikpYygpO2Vsc2V7dmFyIGQ9XCJfX2lmcmFtZWZjYlwiK01hdGguZmxvb3IoMUU2Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCk7a1tkXT1mdW5jdGlvbigpe0koXCJnYXBpLmxvYWRcIik/YygpOmIoRXJyb3IoXCJOZXR3b3JrIEVycm9yXCIpKX07ZD11ZChNaSx7b25sb2FkOmR9KTtCKEJoKGQpKS5zKGZ1bmN0aW9uKCl7YihFcnJvcihcIk5ldHdvcmsgRXJyb3JcIikpfSl9fSkpLnMoZnVuY3Rpb24oYSl7T2k9bnVsbDt0aHJvdyBhO30pfTtmdW5jdGlvbiBQaShhLGIsYyl7dGhpcy5pPWE7dGhpcy5nPWI7dGhpcy5oPWM7dGhpcy5mPW51bGw7dGhpcy5hPWVkKHRoaXMuaSxcIi9fXy9hdXRoL2lmcmFtZVwiKTtHKHRoaXMuYSxcImFwaUtleVwiLHRoaXMuZyk7Ryh0aGlzLmEsXCJhcHBOYW1lXCIsdGhpcy5oKTt0aGlzLmI9bnVsbDt0aGlzLmM9W119UGkucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dGhpcy5mP0codGhpcy5hLFwidlwiLHRoaXMuZik6a2QodGhpcy5hLmEsXCJ2XCIpO3RoaXMuYj9HKHRoaXMuYSxcImVpZFwiLHRoaXMuYik6a2QodGhpcy5hLmEsXCJlaWRcIik7dGhpcy5jLmxlbmd0aD9HKHRoaXMuYSxcImZ3XCIsdGhpcy5jLmpvaW4oXCIsXCIpKTprZCh0aGlzLmEuYSxcImZ3XCIpO3JldHVybiB0aGlzLmEudG9TdHJpbmcoKX07ZnVuY3Rpb24gUWkoYSxiLGMsZCxlKXt0aGlzLm89YTt0aGlzLm09Yjt0aGlzLmM9Yzt0aGlzLmw9ZDt0aGlzLmg9dGhpcy5nPXRoaXMuaT1udWxsO3RoaXMuYT1lO3RoaXMuZj1udWxsfVxuUWkucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGE9ZWQodGhpcy5vLFwiL19fL2F1dGgvaGFuZGxlclwiKTtHKGEsXCJhcGlLZXlcIix0aGlzLm0pO0coYSxcImFwcE5hbWVcIix0aGlzLmMpO0coYSxcImF1dGhUeXBlXCIsdGhpcy5sKTtpZih0aGlzLmEuaXNPQXV0aFByb3ZpZGVyKXt2YXIgYj10aGlzLmE7dHJ5e3ZhciBjPWZpcmViYXNlLmFwcCh0aGlzLmMpLmF1dGgoKS5lYSgpfWNhdGNoKG0pe2M9bnVsbH1iLiRhPWM7RyhhLFwicHJvdmlkZXJJZFwiLHRoaXMuYS5wcm92aWRlcklkKTtiPXRoaXMuYTtjPXllKGIueWIpO2Zvcih2YXIgZCBpbiBjKWNbZF09Y1tkXS50b1N0cmluZygpO2Q9Yi5EYztjPSRhKGMpO2Zvcih2YXIgZT0wO2U8ZC5sZW5ndGg7ZSsrKXt2YXIgZj1kW2VdO2YgaW4gYyYmZGVsZXRlIGNbZl19Yi5jYiYmYi4kYSYmIWNbYi5jYl0mJihjW2IuY2JdPWIuJGEpO1phKGMpfHxHKGEsXCJjdXN0b21QYXJhbWV0ZXJzXCIseGUoYykpfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB0aGlzLmEuRWImJlxuKGI9dGhpcy5hLkViKCksYi5sZW5ndGgmJkcoYSxcInNjb3Blc1wiLGIuam9pbihcIixcIikpKTt0aGlzLmk/RyhhLFwicmVkaXJlY3RVcmxcIix0aGlzLmkpOmtkKGEuYSxcInJlZGlyZWN0VXJsXCIpO3RoaXMuZz9HKGEsXCJldmVudElkXCIsdGhpcy5nKTprZChhLmEsXCJldmVudElkXCIpO3RoaXMuaD9HKGEsXCJ2XCIsdGhpcy5oKTprZChhLmEsXCJ2XCIpO2lmKHRoaXMuYilmb3IodmFyIGggaW4gdGhpcy5iKXRoaXMuYi5oYXNPd25Qcm9wZXJ0eShoKSYmIWNkKGEsaCkmJkcoYSxoLHRoaXMuYltoXSk7dGhpcy5mP0coYSxcImVpZFwiLHRoaXMuZik6a2QoYS5hLFwiZWlkXCIpO2g9UmkodGhpcy5jKTtoLmxlbmd0aCYmRyhhLFwiZndcIixoLmpvaW4oXCIsXCIpKTtyZXR1cm4gYS50b1N0cmluZygpfTtmdW5jdGlvbiBSaShhKXt0cnl7cmV0dXJuIGZpcmViYXNlLmFwcChhKS5hdXRoKCkueWEoKX1jYXRjaChiKXtyZXR1cm5bXX19XG5mdW5jdGlvbiBTaShhLGIsYyxkLGUpe3RoaXMubT1hO3RoaXMuZj1iO3RoaXMuYj1jO3RoaXMuYz1kfHxudWxsO3RoaXMuaD1lfHxudWxsO3RoaXMubz10aGlzLnU9dGhpcy52PW51bGw7dGhpcy5nPVtdO3RoaXMubD10aGlzLmE9bnVsbH1cbmZ1bmN0aW9uIFRpKGEpe3ZhciBiPVZkKCk7cmV0dXJuIGNpKGEpLnRoZW4oZnVuY3Rpb24oYSl7YTp7dmFyIGM9ZGQoYiksZT1jLmM7Yz1jLmI7Zm9yKHZhciBmPTA7ZjxhLmxlbmd0aDtmKyspe3ZhciBoPWFbZl07dmFyIG09Yzt2YXIgcD1lOzA9PWguaW5kZXhPZihcImNocm9tZS1leHRlbnNpb246Ly9cIik/bT1kZChoKS5iPT1tJiZcImNocm9tZS1leHRlbnNpb25cIj09cDpcImh0dHBcIiE9cCYmXCJodHRwc1wiIT1wP209ITE6ZmUudGVzdChoKT9tPW09PWg6KGg9aC5zcGxpdChcIi5cIikuam9pbihcIlxcXFwuXCIpLG09KG5ldyBSZWdFeHAoXCJeKC4rXFxcXC5cIitoK1wifFwiK2grXCIpJFwiLFwiaVwiKSkudGVzdChtKSk7aWYobSl7YT0hMDticmVhayBhfX1hPSExfWlmKCFhKXRocm93IG5ldyBBZyhWZCgpKTt9KX1cbmZ1bmN0aW9uIFVpKGEpe2lmKGEubClyZXR1cm4gYS5sO2EubD1oZSgpLnRoZW4oZnVuY3Rpb24oKXtpZighYS51KXt2YXIgYj1hLmMsYz1hLmgsZD1SaShhLmIpLGU9bmV3IFBpKGEubSxhLmYsYS5iKTtlLmY9YjtlLmI9YztlLmM9SmEoZHx8W10pO2EudT1lLnRvU3RyaW5nKCl9YS5pPW5ldyBHaShhLnUpO1ZpKGEpfSk7cmV0dXJuIGEubH1nPVNpLnByb3RvdHlwZTtnLkVhPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1uZXcgTChcInBvcHVwLWNsb3NlZC1ieS11c2VyXCIpLGU9bmV3IEwoXCJ3ZWItc3RvcmFnZS11bnN1cHBvcnRlZFwiKSxmPXRoaXMsaD0hMTtyZXR1cm4gdGhpcy5nYSgpLnRoZW4oZnVuY3Rpb24oKXtXaShmKS50aGVuKGZ1bmN0aW9uKGMpe2N8fChhJiZiZShhKSxiKGUpLGg9ITApfSl9KS5zKGZ1bmN0aW9uKCl7fSkudGhlbihmdW5jdGlvbigpe2lmKCFoKXJldHVybiBlZShhKX0pLnRoZW4oZnVuY3Rpb24oKXtpZighaClyZXR1cm4gSGMoYykudGhlbihmdW5jdGlvbigpe2IoZCl9KX0pfTtcbmcuTWI9ZnVuY3Rpb24oKXt2YXIgYT1IKCk7cmV0dXJuIXdlKGEpJiYhQWUoYSl9O2cuSGI9ZnVuY3Rpb24oKXtyZXR1cm4hMX07XG5nLkNiPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGgpe2lmKCFhKXJldHVybiBDKG5ldyBMKFwicG9wdXAtYmxvY2tlZFwiKSk7aWYoaCYmIXdlKCkpcmV0dXJuIHRoaXMuZ2EoKS5zKGZ1bmN0aW9uKGIpe2JlKGEpO2UoYil9KSxkKCksQigpO3RoaXMuYXx8KHRoaXMuYT1UaShYaSh0aGlzKSkpO3ZhciBtPXRoaXM7cmV0dXJuIHRoaXMuYS50aGVuKGZ1bmN0aW9uKCl7dmFyIGI9bS5nYSgpLnMoZnVuY3Rpb24oYil7YmUoYSk7ZShiKTt0aHJvdyBiO30pO2QoKTtyZXR1cm4gYn0pLnRoZW4oZnVuY3Rpb24oKXt2ZyhjKTtpZighaCl7dmFyIGQ9WWkobS5tLG0uZixtLmIsYixjLG51bGwsZixtLmMsdm9pZCAwLG0uaCk7V2QoZCxhKX19KS5zKGZ1bmN0aW9uKGEpe1wiYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI9PWEuY29kZSYmKG0uYT1udWxsKTt0aHJvdyBhO30pfTtcbmZ1bmN0aW9uIFhpKGEpe2Eub3x8KGEudj1hLmM/cmUoYS5jLFJpKGEuYikpOm51bGwsYS5vPW5ldyBKaChhLmYseWYoYS5oKSxhLnYpKTtyZXR1cm4gYS5vfWcuQ2E9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuYXx8KHRoaXMuYT1UaShYaSh0aGlzKSkpO3ZhciBkPXRoaXM7cmV0dXJuIHRoaXMuYS50aGVuKGZ1bmN0aW9uKCl7dmcoYik7dmFyIGU9WWkoZC5tLGQuZixkLmIsYSxiLFZkKCksYyxkLmMsdm9pZCAwLGQuaCk7V2QoZSl9KS5zKGZ1bmN0aW9uKGEpe1wiYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI9PWEuY29kZSYmKGQuYT1udWxsKTt0aHJvdyBhO30pfTtnLmdhPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gVWkodGhpcykudGhlbihmdW5jdGlvbigpe3JldHVybiBhLmkuZmJ9KS5zKGZ1bmN0aW9uKCl7YS5hPW51bGw7dGhyb3cgbmV3IEwoXCJuZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCIpO30pfTtnLlFiPWZ1bmN0aW9uKCl7cmV0dXJuITB9O1xuZnVuY3Rpb24gWWkoYSxiLGMsZCxlLGYsaCxtLHAseCl7YT1uZXcgUWkoYSxiLGMsZCxlKTthLmk9ZjthLmc9aDthLmg9bTthLmI9JGEocHx8bnVsbCk7YS5mPXg7cmV0dXJuIGEudG9TdHJpbmcoKX1mdW5jdGlvbiBWaShhKXtpZighYS5pKXRocm93IEVycm9yKFwiSWZjSGFuZGxlciBtdXN0IGJlIGluaXRpYWxpemVkIVwiKTtMaShhLmksZnVuY3Rpb24oYil7dmFyIGM9e307aWYoYiYmYi5hdXRoRXZlbnQpe3ZhciBkPSExO2I9eGcoYi5hdXRoRXZlbnQpO2ZvcihjPTA7YzxhLmcubGVuZ3RoO2MrKylkPWEuZ1tjXShiKXx8ZDtjPXt9O2Muc3RhdHVzPWQ/XCJBQ0tcIjpcIkVSUk9SXCI7cmV0dXJuIEIoYyl9Yy5zdGF0dXM9XCJFUlJPUlwiO3JldHVybiBCKGMpfSl9XG5mdW5jdGlvbiBXaShhKXt2YXIgYj17dHlwZTpcIndlYlN0b3JhZ2VTdXBwb3J0XCJ9O3JldHVybiBVaShhKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIEtpKGEuaSxiKX0pLnRoZW4oZnVuY3Rpb24oYSl7aWYoYSYmYS5sZW5ndGgmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYVswXS53ZWJTdG9yYWdlU3VwcG9ydClyZXR1cm4gYVswXS53ZWJTdG9yYWdlU3VwcG9ydDt0aHJvdyBFcnJvcigpO30pfWcud2E9ZnVuY3Rpb24oYSl7dGhpcy5nLnB1c2goYSl9O2cuS2E9ZnVuY3Rpb24oYSl7dyh0aGlzLmcsZnVuY3Rpb24oYil7cmV0dXJuIGI9PWF9KX07ZnVuY3Rpb24gWmkoYSl7dGhpcy5hPWF8fGZpcmViYXNlLklOVEVSTkFMLnJlYWN0TmF0aXZlJiZmaXJlYmFzZS5JTlRFUk5BTC5yZWFjdE5hdGl2ZS5Bc3luY1N0b3JhZ2U7aWYoIXRoaXMuYSl0aHJvdyBuZXcgTChcImludGVybmFsLWVycm9yXCIsXCJUaGUgUmVhY3QgTmF0aXZlIGNvbXBhdGliaWxpdHkgbGlicmFyeSB3YXMgbm90IGZvdW5kLlwiKTt0aGlzLnR5cGU9XCJhc3luY1N0b3JhZ2VcIn1nPVppLnByb3RvdHlwZTtnLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gQih0aGlzLmEuZ2V0SXRlbShhKSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gYSYmemUoYSl9KX07Zy5zZXQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQih0aGlzLmEuc2V0SXRlbShhLHhlKGIpKSl9O2cuUD1mdW5jdGlvbihhKXtyZXR1cm4gQih0aGlzLmEucmVtb3ZlSXRlbShhKSl9O2cuWT1mdW5jdGlvbigpe307Zy5jYT1mdW5jdGlvbigpe307ZnVuY3Rpb24gJGkoYSl7dGhpcy5iPWE7dGhpcy5hPXt9O3RoaXMuYz1yKHRoaXMuZix0aGlzKX12YXIgYWo9W107ZnVuY3Rpb24gYmooKXt2YXIgYT1tZSgpP3NlbGY6bnVsbDt2KGFqLGZ1bmN0aW9uKGMpe2MuYj09YSYmKGI9Yyl9KTtpZighYil7dmFyIGI9bmV3ICRpKGEpO2FqLnB1c2goYil9cmV0dXJuIGJ9XG4kaS5wcm90b3R5cGUuZj1mdW5jdGlvbihhKXt2YXIgYj1hLmRhdGEuZXZlbnRUeXBlLGM9YS5kYXRhLmV2ZW50SWQsZD10aGlzLmFbYl07aWYoZCYmMDxkLmxlbmd0aCl7YS5wb3J0c1swXS5wb3N0TWVzc2FnZSh7c3RhdHVzOlwiYWNrXCIsZXZlbnRJZDpjLGV2ZW50VHlwZTpiLHJlc3BvbnNlOm51bGx9KTt2YXIgZT1bXTt2KGQsZnVuY3Rpb24oYil7ZS5wdXNoKEIoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIoYS5vcmlnaW4sYS5kYXRhLmRhdGEpfSkpfSk7d2IoZSkudGhlbihmdW5jdGlvbihkKXt2YXIgZT1bXTt2KGQsZnVuY3Rpb24oYSl7ZS5wdXNoKHtmdWxmaWxsZWQ6YS5EYix2YWx1ZTphLnZhbHVlLHJlYXNvbjphLnJlYXNvbj9hLnJlYXNvbi5tZXNzYWdlOnZvaWQgMH0pfSk7dihlLGZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKVwidW5kZWZpbmVkXCI9PT10eXBlb2YgYVtiXSYmZGVsZXRlIGFbYl19KTthLnBvcnRzWzBdLnBvc3RNZXNzYWdlKHtzdGF0dXM6XCJkb25lXCIsZXZlbnRJZDpjLFxuZXZlbnRUeXBlOmIscmVzcG9uc2U6ZX0pfSl9fTskaS5wcm90b3R5cGUuc3Vic2NyaWJlPWZ1bmN0aW9uKGEsYil7WmEodGhpcy5hKSYmdGhpcy5iLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsdGhpcy5jKTtcInVuZGVmaW5lZFwiPT09dHlwZW9mIHRoaXMuYVthXSYmKHRoaXMuYVthXT1bXSk7dGhpcy5hW2FdLnB1c2goYil9OyRpLnByb3RvdHlwZS51bnN1YnNjcmliZT1mdW5jdGlvbihhLGIpe1widW5kZWZpbmVkXCIhPT10eXBlb2YgdGhpcy5hW2FdJiZiPyh3KHRoaXMuYVthXSxmdW5jdGlvbihhKXtyZXR1cm4gYT09Yn0pLDA9PXRoaXMuYVthXS5sZW5ndGgmJmRlbGV0ZSB0aGlzLmFbYV0pOmJ8fGRlbGV0ZSB0aGlzLmFbYV07WmEodGhpcy5hKSYmdGhpcy5iLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsdGhpcy5jKX07ZnVuY3Rpb24gY2ooYSl7dGhpcy5hPWF9Y2oucHJvdG90eXBlLnBvc3RNZXNzYWdlPWZ1bmN0aW9uKGEsYil7dGhpcy5hLnBvc3RNZXNzYWdlKGEsYil9O2Z1bmN0aW9uIGRqKGEpe3RoaXMuYz1hO3RoaXMuYj0hMTt0aGlzLmE9W119XG5mdW5jdGlvbiBlaihhLGIsYyxkKXt2YXIgZSxmPWN8fHt9LGgsbSxwLHg9bnVsbDtpZihhLmIpcmV0dXJuIEMoRXJyb3IoXCJjb25uZWN0aW9uX3VuYXZhaWxhYmxlXCIpKTt2YXIgZ2I9ZD84MDA6NTAsbGE9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbD9uZXcgTWVzc2FnZUNoYW5uZWw6bnVsbDtyZXR1cm4obmV3IEEoZnVuY3Rpb24oYyxkKXtsYT8oZT1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqTWF0aC5wb3coMTAsMjApKS50b1N0cmluZygpLGxhLnBvcnQxLnN0YXJ0KCksbT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZChFcnJvcihcInVuc3VwcG9ydGVkX2V2ZW50XCIpKX0sZ2IpLGg9ZnVuY3Rpb24oYSl7YS5kYXRhLmV2ZW50SWQ9PT1lJiYoXCJhY2tcIj09PWEuZGF0YS5zdGF0dXM/KGNsZWFyVGltZW91dChtKSxwPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtkKEVycm9yKFwidGltZW91dFwiKSl9LDNFMykpOlwiZG9uZVwiPT09YS5kYXRhLnN0YXR1cz8oY2xlYXJUaW1lb3V0KHApLFxuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLmRhdGEucmVzcG9uc2U/YyhhLmRhdGEucmVzcG9uc2UpOmQoRXJyb3IoXCJ1bmtub3duX2Vycm9yXCIpKSk6KGNsZWFyVGltZW91dChtKSxjbGVhclRpbWVvdXQocCksZChFcnJvcihcImludmFsaWRfcmVzcG9uc2VcIikpKSl9LHg9e21lc3NhZ2VDaGFubmVsOmxhLG9uTWVzc2FnZTpofSxhLmEucHVzaCh4KSxsYS5wb3J0MS5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGgpLGEuYy5wb3N0TWVzc2FnZSh7ZXZlbnRUeXBlOmIsZXZlbnRJZDplLGRhdGE6Zn0sW2xhLnBvcnQyXSkpOmQoRXJyb3IoXCJjb25uZWN0aW9uX3VuYXZhaWxhYmxlXCIpKX0pKS50aGVuKGZ1bmN0aW9uKGIpe2ZqKGEseCk7cmV0dXJuIGJ9KS5zKGZ1bmN0aW9uKGIpe2ZqKGEseCk7dGhyb3cgYjt9KX1cbmZ1bmN0aW9uIGZqKGEsYil7aWYoYil7dmFyIGM9Yi5tZXNzYWdlQ2hhbm5lbCxkPWIub25NZXNzYWdlO2MmJihjLnBvcnQxLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZCksYy5wb3J0MS5jbG9zZSgpKTt3KGEuYSxmdW5jdGlvbihhKXtyZXR1cm4gYT09Yn0pfX1kai5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXtmb3IoOzA8dGhpcy5hLmxlbmd0aDspZmoodGhpcyx0aGlzLmFbMF0pO3RoaXMuYj0hMH07ZnVuY3Rpb24gZ2ooKXtpZighaGooKSl0aHJvdyBuZXcgTChcIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCIpO3RoaXMuYz17fTt0aGlzLmE9W107dGhpcy5iPTA7dGhpcy5tPWsuaW5kZXhlZERCO3RoaXMudHlwZT1cImluZGV4ZWREQlwiO3RoaXMuZz10aGlzLmw9dGhpcy5mPXRoaXMuaT1udWxsO3RoaXMudT0hMTt0aGlzLmg9bnVsbDt2YXIgYT10aGlzO21lKCkmJnNlbGY/KHRoaXMubD1iaigpLHRoaXMubC5zdWJzY3JpYmUoXCJrZXlDaGFuZ2VkXCIsZnVuY3Rpb24oYixjKXtyZXR1cm4gaWooYSkudGhlbihmdW5jdGlvbihiKXswPGIubGVuZ3RoJiZ2KGEuYSxmdW5jdGlvbihhKXthKGIpfSk7cmV0dXJue2tleVByb2Nlc3NlZDpHYShiLGMua2V5KX19KX0pLHRoaXMubC5zdWJzY3JpYmUoXCJwaW5nXCIsZnVuY3Rpb24oKXtyZXR1cm4gQihbXCJrZXlDaGFuZ2VkXCJdKX0pKTpJZSgpLnRoZW4oZnVuY3Rpb24oYil7aWYoYS5oPWIpYS5nPW5ldyBkaihuZXcgY2ooYikpLGVqKGEuZyxcInBpbmdcIixudWxsLFxuITApLnRoZW4oZnVuY3Rpb24oYil7YlswXS5mdWxmaWxsZWQmJkdhKGJbMF0udmFsdWUsXCJrZXlDaGFuZ2VkXCIpJiYoYS51PSEwKX0pLnMoZnVuY3Rpb24oKXt9KX0pfXZhciBqajtmdW5jdGlvbiBraihhKXtyZXR1cm4gbmV3IEEoZnVuY3Rpb24oYixjKXt2YXIgZD1hLm0uZGVsZXRlRGF0YWJhc2UoXCJmaXJlYmFzZUxvY2FsU3RvcmFnZURiXCIpO2Qub25zdWNjZXNzPWZ1bmN0aW9uKCl7YigpfTtkLm9uZXJyb3I9ZnVuY3Rpb24oYSl7YyhFcnJvcihhLnRhcmdldC5lcnJvcikpfX0pfVxuZnVuY3Rpb24gbGooYSl7cmV0dXJuIG5ldyBBKGZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS5tLm9wZW4oXCJmaXJlYmFzZUxvY2FsU3RvcmFnZURiXCIsMSk7ZC5vbmVycm9yPWZ1bmN0aW9uKGEpe3RyeXthLnByZXZlbnREZWZhdWx0KCl9Y2F0Y2goZil7fWMoRXJyb3IoYS50YXJnZXQuZXJyb3IpKX07ZC5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24oYSl7YT1hLnRhcmdldC5yZXN1bHQ7dHJ5e2EuY3JlYXRlT2JqZWN0U3RvcmUoXCJmaXJlYmFzZUxvY2FsU3RvcmFnZVwiLHtrZXlQYXRoOlwiZmJhc2Vfa2V5XCJ9KX1jYXRjaChmKXtjKGYpfX07ZC5vbnN1Y2Nlc3M9ZnVuY3Rpb24oZCl7ZD1kLnRhcmdldC5yZXN1bHQ7ZC5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKFwiZmlyZWJhc2VMb2NhbFN0b3JhZ2VcIik/YihkKTpraihhKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGxqKGEpfSkudGhlbihmdW5jdGlvbihhKXtiKGEpfSkucyhmdW5jdGlvbihhKXtjKGEpfSl9fSl9XG5mdW5jdGlvbiBtaihhKXthLm98fChhLm89bGooYSkpO3JldHVybiBhLm99ZnVuY3Rpb24gaGooKXt0cnl7cmV0dXJuISFrLmluZGV4ZWREQn1jYXRjaChhKXtyZXR1cm4hMX19ZnVuY3Rpb24gbmooYSl7cmV0dXJuIGEub2JqZWN0U3RvcmUoXCJmaXJlYmFzZUxvY2FsU3RvcmFnZVwiKX1mdW5jdGlvbiBvaihhLGIpe3JldHVybiBhLnRyYW5zYWN0aW9uKFtcImZpcmViYXNlTG9jYWxTdG9yYWdlXCJdLGI/XCJyZWFkd3JpdGVcIjpcInJlYWRvbmx5XCIpfWZ1bmN0aW9uIHBqKGEpe3JldHVybiBuZXcgQShmdW5jdGlvbihiLGMpe2Eub25zdWNjZXNzPWZ1bmN0aW9uKGEpe2EmJmEudGFyZ2V0P2IoYS50YXJnZXQucmVzdWx0KTpiKCl9O2Eub25lcnJvcj1mdW5jdGlvbihhKXtjKGEudGFyZ2V0LmVycm9yKX19KX1nPWdqLnByb3RvdHlwZTtcbmcuc2V0PWZ1bmN0aW9uKGEsYil7dmFyIGM9ITEsZCxlPXRoaXM7cmV0dXJuIG1qKHRoaXMpLnRoZW4oZnVuY3Rpb24oYil7ZD1iO2I9bmoob2ooZCwhMCkpO3JldHVybiBwaihiLmdldChhKSl9KS50aGVuKGZ1bmN0aW9uKGYpe3ZhciBoPW5qKG9qKGQsITApKTtpZihmKXJldHVybiBmLnZhbHVlPWIscGooaC5wdXQoZikpO2UuYisrO2M9ITA7Zj17fTtmLmZiYXNlX2tleT1hO2YudmFsdWU9YjtyZXR1cm4gcGooaC5hZGQoZikpfSkudGhlbihmdW5jdGlvbigpe2UuY1thXT1iO3JldHVybiBxaihlLGEpfSkuaWEoZnVuY3Rpb24oKXtjJiZlLmItLX0pfTtmdW5jdGlvbiBxaihhLGIpe3JldHVybiBhLmcmJmEuaCYmSGUoKT09PWEuaD9laihhLmcsXCJrZXlDaGFuZ2VkXCIse2tleTpifSxhLnUpLnRoZW4oZnVuY3Rpb24oKXt9KS5zKGZ1bmN0aW9uKCl7fSk6QigpfVxuZy5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG1qKHRoaXMpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIHBqKG5qKG9qKGIsITEpKS5nZXQoYSkpfSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gYSYmYS52YWx1ZX0pfTtnLlA9ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYz10aGlzO3JldHVybiBtaih0aGlzKS50aGVuKGZ1bmN0aW9uKGQpe2I9ITA7Yy5iKys7cmV0dXJuIHBqKG5qKG9qKGQsITApKVtcImRlbGV0ZVwiXShhKSl9KS50aGVuKGZ1bmN0aW9uKCl7ZGVsZXRlIGMuY1thXTtyZXR1cm4gcWooYyxhKX0pLmlhKGZ1bmN0aW9uKCl7YiYmYy5iLS19KX07XG5mdW5jdGlvbiBpaihhKXtyZXR1cm4gbWooYSkudGhlbihmdW5jdGlvbihhKXt2YXIgYj1uaihvaihhLCExKSk7cmV0dXJuIGIuZ2V0QWxsP3BqKGIuZ2V0QWxsKCkpOm5ldyBBKGZ1bmN0aW9uKGEsYyl7dmFyIGQ9W10sZT1iLm9wZW5DdXJzb3IoKTtlLm9uc3VjY2Vzcz1mdW5jdGlvbihiKXsoYj1iLnRhcmdldC5yZXN1bHQpPyhkLnB1c2goYi52YWx1ZSksYltcImNvbnRpbnVlXCJdKCkpOmEoZCl9O2Uub25lcnJvcj1mdW5jdGlvbihhKXtjKGEudGFyZ2V0LmVycm9yKX19KX0pLnRoZW4oZnVuY3Rpb24oYil7dmFyIGM9e30sZD1bXTtpZigwPT1hLmIpe2ZvcihkPTA7ZDxiLmxlbmd0aDtkKyspY1tiW2RdLmZiYXNlX2tleV09YltkXS52YWx1ZTtkPVhkKGEuYyxjKTthLmM9Y31yZXR1cm4gZH0pfWcuWT1mdW5jdGlvbihhKXswPT10aGlzLmEubGVuZ3RoJiZyaih0aGlzKTt0aGlzLmEucHVzaChhKX07XG5nLmNhPWZ1bmN0aW9uKGEpe3codGhpcy5hLGZ1bmN0aW9uKGIpe3JldHVybiBiPT1hfSk7MD09dGhpcy5hLmxlbmd0aCYmc2oodGhpcyl9O2Z1bmN0aW9uIHJqKGEpe2Z1bmN0aW9uIGIoKXthLmY9c2V0VGltZW91dChmdW5jdGlvbigpe2EuaT1paihhKS50aGVuKGZ1bmN0aW9uKGIpezA8Yi5sZW5ndGgmJnYoYS5hLGZ1bmN0aW9uKGEpe2EoYil9KX0pLnRoZW4oZnVuY3Rpb24oKXtiKCl9KS5zKGZ1bmN0aW9uKGEpe1wiU1RPUF9FVkVOVFwiIT1hLm1lc3NhZ2UmJmIoKX0pfSw4MDApfXNqKGEpO2IoKX1mdW5jdGlvbiBzaihhKXthLmkmJmEuaS5jYW5jZWwoXCJTVE9QX0VWRU5UXCIpO2EuZiYmKGNsZWFyVGltZW91dChhLmYpLGEuZj1udWxsKX07ZnVuY3Rpb24gdGooYSl7dmFyIGI9dGhpcyxjPW51bGw7dGhpcy5hPVtdO3RoaXMudHlwZT1cImluZGV4ZWREQlwiO3RoaXMuYz1hO3RoaXMuYj1CKCkudGhlbihmdW5jdGlvbigpe2lmKGhqKCkpe3ZhciBhPXRlKCksZT1cIl9fc2FrXCIrYTtqanx8KGpqPW5ldyBnaik7Yz1qajtyZXR1cm4gYy5zZXQoZSxhKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0KGUpfSkudGhlbihmdW5jdGlvbihiKXtpZihiIT09YSl0aHJvdyBFcnJvcihcImluZGV4ZWREQiBub3Qgc3VwcG9ydGVkIVwiKTtyZXR1cm4gYy5QKGUpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBjfSkucyhmdW5jdGlvbigpe3JldHVybiBiLmN9KX1yZXR1cm4gYi5jfSkudGhlbihmdW5jdGlvbihhKXtiLnR5cGU9YS50eXBlO2EuWShmdW5jdGlvbihhKXt2KGIuYSxmdW5jdGlvbihiKXtiKGEpfSl9KTtyZXR1cm4gYX0pfWc9dGoucHJvdG90eXBlO2cuZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmIudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gYi5nZXQoYSl9KX07XG5nLnNldD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmIudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYy5zZXQoYSxiKX0pfTtnLlA9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYi50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBiLlAoYSl9KX07Zy5ZPWZ1bmN0aW9uKGEpe3RoaXMuYS5wdXNoKGEpfTtnLmNhPWZ1bmN0aW9uKGEpe3codGhpcy5hLGZ1bmN0aW9uKGIpe3JldHVybiBiPT1hfSl9O2Z1bmN0aW9uIHVqKCl7dGhpcy5hPXt9O3RoaXMudHlwZT1cImluTWVtb3J5XCJ9Zz11ai5wcm90b3R5cGU7Zy5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIEIodGhpcy5hW2FdKX07Zy5zZXQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmFbYV09YjtyZXR1cm4gQigpfTtnLlA9ZnVuY3Rpb24oYSl7ZGVsZXRlIHRoaXMuYVthXTtyZXR1cm4gQigpfTtnLlk9ZnVuY3Rpb24oKXt9O2cuY2E9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIHZqKCl7aWYoIXdqKCkpe2lmKFwiTm9kZVwiPT1uZSgpKXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIixcIlRoZSBMb2NhbFN0b3JhZ2UgY29tcGF0aWJpbGl0eSBsaWJyYXJ5IHdhcyBub3QgZm91bmQuXCIpO3Rocm93IG5ldyBMKFwid2ViLXN0b3JhZ2UtdW5zdXBwb3J0ZWRcIik7fXRoaXMuYT14aigpfHxmaXJlYmFzZS5JTlRFUk5BTC5ub2RlLmxvY2FsU3RvcmFnZTt0aGlzLnR5cGU9XCJsb2NhbFN0b3JhZ2VcIn1mdW5jdGlvbiB4aigpe3RyeXt2YXIgYT1rLmxvY2FsU3RvcmFnZSxiPXRlKCk7YSYmKGEuc2V0SXRlbShiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oYikpO3JldHVybiBhfWNhdGNoKGMpe3JldHVybiBudWxsfX1cbmZ1bmN0aW9uIHdqKCl7dmFyIGE9XCJOb2RlXCI9PW5lKCk7YT14aigpfHxhJiZmaXJlYmFzZS5JTlRFUk5BTC5ub2RlJiZmaXJlYmFzZS5JTlRFUk5BTC5ub2RlLmxvY2FsU3RvcmFnZTtpZighYSlyZXR1cm4hMTt0cnl7cmV0dXJuIGEuc2V0SXRlbShcIl9fc2FrXCIsXCIxXCIpLGEucmVtb3ZlSXRlbShcIl9fc2FrXCIpLCEwfWNhdGNoKGIpe3JldHVybiExfX1nPXZqLnByb3RvdHlwZTtnLmdldD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBCKCkudGhlbihmdW5jdGlvbigpe3ZhciBjPWIuYS5nZXRJdGVtKGEpO3JldHVybiB6ZShjKX0pfTtnLnNldD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIEIoKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGQ9eGUoYik7bnVsbD09PWQ/Yy5QKGEpOmMuYS5zZXRJdGVtKGEsZCl9KX07Zy5QPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIEIoKS50aGVuKGZ1bmN0aW9uKCl7Yi5hLnJlbW92ZUl0ZW0oYSl9KX07XG5nLlk9ZnVuY3Rpb24oYSl7ay53aW5kb3cmJnJjKGsud2luZG93LFwic3RvcmFnZVwiLGEpfTtnLmNhPWZ1bmN0aW9uKGEpe2sud2luZG93JiZFKGsud2luZG93LFwic3RvcmFnZVwiLGEpfTtmdW5jdGlvbiB5aigpe3RoaXMudHlwZT1cIm51bGxTdG9yYWdlXCJ9Zz15ai5wcm90b3R5cGU7Zy5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gQihudWxsKX07Zy5zZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gQigpfTtnLlA9ZnVuY3Rpb24oKXtyZXR1cm4gQigpfTtnLlk9ZnVuY3Rpb24oKXt9O2cuY2E9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIHpqKCl7aWYoIUFqKCkpe2lmKFwiTm9kZVwiPT1uZSgpKXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIixcIlRoZSBTZXNzaW9uU3RvcmFnZSBjb21wYXRpYmlsaXR5IGxpYnJhcnkgd2FzIG5vdCBmb3VuZC5cIik7dGhyb3cgbmV3IEwoXCJ3ZWItc3RvcmFnZS11bnN1cHBvcnRlZFwiKTt9dGhpcy5hPUJqKCl8fGZpcmViYXNlLklOVEVSTkFMLm5vZGUuc2Vzc2lvblN0b3JhZ2U7dGhpcy50eXBlPVwic2Vzc2lvblN0b3JhZ2VcIn1mdW5jdGlvbiBCaigpe3RyeXt2YXIgYT1rLnNlc3Npb25TdG9yYWdlLGI9dGUoKTthJiYoYS5zZXRJdGVtKGIsXCIxXCIpLGEucmVtb3ZlSXRlbShiKSk7cmV0dXJuIGF9Y2F0Y2goYyl7cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gQWooKXt2YXIgYT1cIk5vZGVcIj09bmUoKTthPUJqKCl8fGEmJmZpcmViYXNlLklOVEVSTkFMLm5vZGUmJmZpcmViYXNlLklOVEVSTkFMLm5vZGUuc2Vzc2lvblN0b3JhZ2U7aWYoIWEpcmV0dXJuITE7dHJ5e3JldHVybiBhLnNldEl0ZW0oXCJfX3Nha1wiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oXCJfX3Nha1wiKSwhMH1jYXRjaChiKXtyZXR1cm4hMX19Zz16ai5wcm90b3R5cGU7Zy5nZXQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gQigpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLmEuZ2V0SXRlbShhKTtyZXR1cm4gemUoYyl9KX07Zy5zZXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBCKCkudGhlbihmdW5jdGlvbigpe3ZhciBkPXhlKGIpO251bGw9PT1kP2MuUChhKTpjLmEuc2V0SXRlbShhLGQpfSl9O2cuUD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBCKCkudGhlbihmdW5jdGlvbigpe2IuYS5yZW1vdmVJdGVtKGEpfSl9O2cuWT1mdW5jdGlvbigpe307XG5nLmNhPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBDaigpe3ZhciBhPXt9O2EuQnJvd3Nlcj1EajthLk5vZGU9RWo7YS5SZWFjdE5hdGl2ZT1GajthLldvcmtlcj1Hajt0aGlzLmE9YVtuZSgpXX12YXIgSGosRGo9e0E6dmosUmE6emp9LEVqPXtBOnZqLFJhOnpqfSxGaj17QTpaaSxSYTp5an0sR2o9e0E6dmosUmE6eWp9O3ZhciBJaj17WmM6XCJsb2NhbFwiLE5PTkU6XCJub25lXCIsYWQ6XCJzZXNzaW9uXCJ9O2Z1bmN0aW9uIEpqKGEpe3ZhciBiPW5ldyBMKFwiaW52YWxpZC1wZXJzaXN0ZW5jZS10eXBlXCIpLGM9bmV3IEwoXCJ1bnN1cHBvcnRlZC1wZXJzaXN0ZW5jZS10eXBlXCIpO2E6e2ZvcihkIGluIElqKWlmKElqW2RdPT1hKXt2YXIgZD0hMDticmVhayBhfWQ9ITF9aWYoIWR8fFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBiO3N3aXRjaChuZSgpKXtjYXNlIFwiUmVhY3ROYXRpdmVcIjppZihcInNlc3Npb25cIj09PWEpdGhyb3cgYzticmVhaztjYXNlIFwiTm9kZVwiOmlmKFwibm9uZVwiIT09YSl0aHJvdyBjO2JyZWFrO2RlZmF1bHQ6aWYoIXNlKCkmJlwibm9uZVwiIT09YSl0aHJvdyBjO319XG5mdW5jdGlvbiBLaigpe3ZhciBhPSFBZShIKCkpJiZsZSgpPyEwOiExLGI9d2UoKSxjPXNlKCk7dGhpcy5vPWE7dGhpcy5oPWI7dGhpcy5sPWM7dGhpcy5hPXt9O0hqfHwoSGo9bmV3IENqKTthPUhqO3RyeXt0aGlzLmc9IVVkKCkmJkdlKCl8fCFrLmluZGV4ZWREQj9uZXcgYS5hLkE6bmV3IHRqKG1lKCk/bmV3IHVqOm5ldyBhLmEuQSl9Y2F0Y2goZCl7dGhpcy5nPW5ldyB1aix0aGlzLmg9ITB9dHJ5e3RoaXMuaT1uZXcgYS5hLlJhfWNhdGNoKGQpe3RoaXMuaT1uZXcgdWp9dGhpcy5tPW5ldyB1ajt0aGlzLmY9cih0aGlzLlBiLHRoaXMpO3RoaXMuYj17fX12YXIgTGo7ZnVuY3Rpb24gTWooKXtManx8KExqPW5ldyBLaik7cmV0dXJuIExqfWZ1bmN0aW9uIE5qKGEsYil7c3dpdGNoKGIpe2Nhc2UgXCJzZXNzaW9uXCI6cmV0dXJuIGEuaTtjYXNlIFwibm9uZVwiOnJldHVybiBhLm07ZGVmYXVsdDpyZXR1cm4gYS5nfX1cbmZ1bmN0aW9uIE9qKGEsYil7cmV0dXJuXCJmaXJlYmFzZTpcIithLm5hbWUrKGI/XCI6XCIrYjpcIlwiKX1mdW5jdGlvbiBQaihhLGIsYyl7dmFyIGQ9T2ooYixjKSxlPU5qKGEsYi5BKTtyZXR1cm4gYS5nZXQoYixjKS50aGVuKGZ1bmN0aW9uKGYpe3ZhciBoPW51bGw7dHJ5e2g9emUoay5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShkKSl9Y2F0Y2gobSl7fWlmKGgmJiFmKXJldHVybiBrLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGQpLGEuc2V0KGIsaCxjKTtoJiZmJiZcImxvY2FsU3RvcmFnZVwiIT1lLnR5cGUmJmsubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oZCl9KX1nPUtqLnByb3RvdHlwZTtnLmdldD1mdW5jdGlvbihhLGIpe3JldHVybiBOaih0aGlzLGEuQSkuZ2V0KE9qKGEsYikpfTtmdW5jdGlvbiBRaihhLGIsYyl7Yz1PaihiLGMpO1wibG9jYWxcIj09Yi5BJiYoYS5iW2NdPW51bGwpO3JldHVybiBOaihhLGIuQSkuUChjKX1cbmcuc2V0PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1PaihhLGMpLGU9dGhpcyxmPU5qKHRoaXMsYS5BKTtyZXR1cm4gZi5zZXQoZCxiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGYuZ2V0KGQpfSkudGhlbihmdW5jdGlvbihiKXtcImxvY2FsXCI9PWEuQSYmKGUuYltkXT1iKX0pfTtnLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjKXthPU9qKGEsYik7dGhpcy5sJiYodGhpcy5iW2FdPWsubG9jYWxTdG9yYWdlLmdldEl0ZW0oYSkpO1phKHRoaXMuYSkmJihOaih0aGlzLFwibG9jYWxcIikuWSh0aGlzLmYpLHRoaXMuaHx8KFVkKCl8fCFHZSgpKSYmay5pbmRleGVkREJ8fCF0aGlzLmx8fFJqKHRoaXMpKTt0aGlzLmFbYV18fCh0aGlzLmFbYV09W10pO3RoaXMuYVthXS5wdXNoKGMpfTtcbmcucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMpe2E9T2ooYSxiKTt0aGlzLmFbYV0mJih3KHRoaXMuYVthXSxmdW5jdGlvbihhKXtyZXR1cm4gYT09Y30pLDA9PXRoaXMuYVthXS5sZW5ndGgmJmRlbGV0ZSB0aGlzLmFbYV0pO1phKHRoaXMuYSkmJihOaih0aGlzLFwibG9jYWxcIikuY2EodGhpcy5mKSxTaih0aGlzKSl9O2Z1bmN0aW9uIFJqKGEpe1NqKGEpO2EuYz1zZXRJbnRlcnZhbChmdW5jdGlvbigpe2Zvcih2YXIgYiBpbiBhLmEpe3ZhciBjPWsubG9jYWxTdG9yYWdlLmdldEl0ZW0oYiksZD1hLmJbYl07YyE9ZCYmKGEuYltiXT1jLGM9bmV3IGZjKHt0eXBlOlwic3RvcmFnZVwiLGtleTpiLHRhcmdldDp3aW5kb3csb2xkVmFsdWU6ZCxuZXdWYWx1ZTpjLGE6ITB9KSxhLlBiKGMpKX19LDFFMyl9ZnVuY3Rpb24gU2ooYSl7YS5jJiYoY2xlYXJJbnRlcnZhbChhLmMpLGEuYz1udWxsKX1cbmcuUGI9ZnVuY3Rpb24oYSl7aWYoYSYmYS5mKXt2YXIgYj1hLmEua2V5O2lmKG51bGw9PWIpZm9yKHZhciBjIGluIHRoaXMuYSl7dmFyIGQ9dGhpcy5iW2NdO1widW5kZWZpbmVkXCI9PT10eXBlb2YgZCYmKGQ9bnVsbCk7dmFyIGU9ay5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShjKTtlIT09ZCYmKHRoaXMuYltjXT1lLHRoaXMuWGEoYykpfWVsc2UgaWYoMD09Yi5pbmRleE9mKFwiZmlyZWJhc2U6XCIpJiZ0aGlzLmFbYl0pe1widW5kZWZpbmVkXCIhPT10eXBlb2YgYS5hLmE/TmoodGhpcyxcImxvY2FsXCIpLmNhKHRoaXMuZik6U2oodGhpcyk7aWYodGhpcy5vKWlmKGM9ay5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShiKSxkPWEuYS5uZXdWYWx1ZSxkIT09YyludWxsIT09ZD9rLmxvY2FsU3RvcmFnZS5zZXRJdGVtKGIsZCk6ay5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShiKTtlbHNlIGlmKHRoaXMuYltiXT09PWQmJlwidW5kZWZpbmVkXCI9PT10eXBlb2YgYS5hLmEpcmV0dXJuO3ZhciBmPXRoaXM7Yz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPT1cbnR5cGVvZiBhLmEuYXx8Zi5iW2JdIT09ay5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShiKSlmLmJbYl09ay5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShiKSxmLlhhKGIpfTtQYiYmJGImJjEwPT0kYiYmay5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShiKSE9PWEuYS5uZXdWYWx1ZSYmYS5hLm5ld1ZhbHVlIT09YS5hLm9sZFZhbHVlP3NldFRpbWVvdXQoYywxMCk6YygpfX1lbHNlIHYoYSxyKHRoaXMuWGEsdGhpcykpfTtnLlhhPWZ1bmN0aW9uKGEpe3RoaXMuYVthXSYmdih0aGlzLmFbYV0sZnVuY3Rpb24oYSl7YSgpfSl9O2Z1bmN0aW9uIFRqKGEpe3RoaXMuYT1hO3RoaXMuYj1NaigpfXZhciBVaj17bmFtZTpcImF1dGhFdmVudFwiLEE6XCJsb2NhbFwifTtmdW5jdGlvbiBWaihhKXtyZXR1cm4gYS5iLmdldChVaixhLmEpLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIHhnKGEpfSl9O2Z1bmN0aW9uIFdqKCl7dGhpcy5hPU1qKCl9O2Z1bmN0aW9uIFhqKCl7dGhpcy5iPS0xfTtmdW5jdGlvbiBZaihhLGIpe3RoaXMuYj1aajt0aGlzLmY9ay5VaW50OEFycmF5P25ldyBVaW50OEFycmF5KHRoaXMuYik6QXJyYXkodGhpcy5iKTt0aGlzLmc9dGhpcy5jPTA7dGhpcy5hPVtdO3RoaXMuaT1hO3RoaXMuaD1iO3RoaXMubD1rLkludDMyQXJyYXk/bmV3IEludDMyQXJyYXkoNjQpOkFycmF5KDY0KTt2b2lkIDAhPT1ha3x8KGsuSW50MzJBcnJheT9haz1uZXcgSW50MzJBcnJheShiayk6YWs9YmspO3RoaXMucmVzZXQoKX12YXIgYWs7dChZaixYaik7Zm9yKHZhciBaaj02NCxjaz1aai0xLGRrPVtdLGVrPTA7ZWs8Y2s7ZWsrKylka1tla109MDt2YXIgZms9SWEoMTI4LGRrKTtZai5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmc9dGhpcy5jPTA7dGhpcy5hPWsuSW50MzJBcnJheT9uZXcgSW50MzJBcnJheSh0aGlzLmgpOkphKHRoaXMuaCl9O1xuZnVuY3Rpb24gZ2soYSl7Zm9yKHZhciBiPWEuZixjPWEubCxkPTAsZT0wO2U8Yi5sZW5ndGg7KWNbZCsrXT1iW2VdPDwyNHxiW2UrMV08PDE2fGJbZSsyXTw8OHxiW2UrM10sZT00KmQ7Zm9yKGI9MTY7NjQ+YjtiKyspe2U9Y1tiLTE1XXwwO2Q9Y1tiLTJdfDA7dmFyIGY9KGNbYi0xNl18MCkrKChlPj4+N3xlPDwyNSleKGU+Pj4xOHxlPDwxNCleZT4+PjMpfDAsaD0oY1tiLTddfDApKygoZD4+PjE3fGQ8PDE1KV4oZD4+PjE5fGQ8PDEzKV5kPj4+MTApfDA7Y1tiXT1mK2h8MH1kPWEuYVswXXwwO2U9YS5hWzFdfDA7dmFyIG09YS5hWzJdfDAscD1hLmFbM118MCx4PWEuYVs0XXwwLGdiPWEuYVs1XXwwLGxhPWEuYVs2XXwwO2Y9YS5hWzddfDA7Zm9yKGI9MDs2ND5iO2IrKyl7dmFyIFJsPSgoZD4+PjJ8ZDw8MzApXihkPj4+MTN8ZDw8MTkpXihkPj4+MjJ8ZDw8MTApKSsoZCZlXmQmbV5lJm0pfDA7aD14JmdiXn54JmxhO2Y9ZisoKHg+Pj42fHg8PDI2KV4oeD4+PjExfHg8PDIxKV4oeD4+PlxuMjV8eDw8NykpfDA7aD1oKyhha1tiXXwwKXwwO2g9ZisoaCsoY1tiXXwwKXwwKXwwO2Y9bGE7bGE9Z2I7Z2I9eDt4PXAraHwwO3A9bTttPWU7ZT1kO2Q9aCtSbHwwfWEuYVswXT1hLmFbMF0rZHwwO2EuYVsxXT1hLmFbMV0rZXwwO2EuYVsyXT1hLmFbMl0rbXwwO2EuYVszXT1hLmFbM10rcHwwO2EuYVs0XT1hLmFbNF0reHwwO2EuYVs1XT1hLmFbNV0rZ2J8MDthLmFbNl09YS5hWzZdK2xhfDA7YS5hWzddPWEuYVs3XStmfDB9XG5mdW5jdGlvbiBoayhhLGIsYyl7dm9pZCAwPT09YyYmKGM9Yi5sZW5ndGgpO3ZhciBkPTAsZT1hLmM7aWYobChiKSlmb3IoO2Q8YzspYS5mW2UrK109Yi5jaGFyQ29kZUF0KGQrKyksZT09YS5iJiYoZ2soYSksZT0wKTtlbHNlIGlmKGhhKGIpKWZvcig7ZDxjOyl7dmFyIGY9YltkKytdO2lmKCEoXCJudW1iZXJcIj09dHlwZW9mIGYmJjA8PWYmJjI1NT49ZiYmZj09KGZ8MCkpKXRocm93IEVycm9yKFwibWVzc2FnZSBtdXN0IGJlIGEgYnl0ZSBhcnJheVwiKTthLmZbZSsrXT1mO2U9PWEuYiYmKGdrKGEpLGU9MCl9ZWxzZSB0aHJvdyBFcnJvcihcIm1lc3NhZ2UgbXVzdCBiZSBzdHJpbmcgb3IgYXJyYXlcIik7YS5jPWU7YS5nKz1jfVxudmFyIGJrPVsxMTE2MzUyNDA4LDE4OTk0NDc0NDEsMzA0OTMyMzQ3MSwzOTIxMDA5NTczLDk2MTk4NzE2MywxNTA4OTcwOTkzLDI0NTM2MzU3NDgsMjg3MDc2MzIyMSwzNjI0MzgxMDgwLDMxMDU5ODQwMSw2MDcyMjUyNzgsMTQyNjg4MTk4NywxOTI1MDc4Mzg4LDIxNjIwNzgyMDYsMjYxNDg4ODEwMywzMjQ4MjIyNTgwLDM4MzUzOTA0MDEsNDAyMjIyNDc3NCwyNjQzNDcwNzgsNjA0ODA3NjI4LDc3MDI1NTk4MywxMjQ5MTUwMTIyLDE1NTUwODE2OTIsMTk5NjA2NDk4NiwyNTU0MjIwODgyLDI4MjE4MzQzNDksMjk1Mjk5NjgwOCwzMjEwMzEzNjcxLDMzMzY1NzE4OTEsMzU4NDUyODcxMSwxMTM5MjY5OTMsMzM4MjQxODk1LDY2NjMwNzIwNSw3NzM1Mjk5MTIsMTI5NDc1NzM3MiwxMzk2MTgyMjkxLDE2OTUxODM3MDAsMTk4NjY2MTA1MSwyMTc3MDI2MzUwLDI0NTY5NTYwMzcsMjczMDQ4NTkyMSwyODIwMzAyNDExLDMyNTk3MzA4MDAsMzM0NTc2NDc3MSwzNTE2MDY1ODE3LDM2MDAzNTI4MDQsXG40MDk0NTcxOTA5LDI3NTQyMzM0NCw0MzAyMjc3MzQsNTA2OTQ4NjE2LDY1OTA2MDU1Niw4ODM5OTc4NzcsOTU4MTM5NTcxLDEzMjI4MjIyMTgsMTUzNzAwMjA2MywxNzQ3ODczNzc5LDE5NTU1NjIyMjIsMjAyNDEwNDgxNSwyMjI3NzMwNDUyLDIzNjE4NTI0MjQsMjQyODQzNjQ3NCwyNzU2NzM0MTg3LDMyMDQwMzE0NzksMzMyOTMyNTI5OF07ZnVuY3Rpb24gaWsoKXtZai5jYWxsKHRoaXMsOCxqayl9dChpayxZaik7dmFyIGprPVsxNzc5MDMzNzAzLDMxNDQxMzQyNzcsMTAxMzkwNDI0MiwyNzczNDgwNzYyLDEzNTk4OTMxMTksMjYwMDgyMjkyNCw1Mjg3MzQ2MzUsMTU0MTQ1OTIyNV07ZnVuY3Rpb24ga2soYSxiLGMsZCxlKXt0aGlzLm09YTt0aGlzLmk9Yjt0aGlzLmw9Yzt0aGlzLm89ZHx8bnVsbDt0aGlzLnU9ZXx8bnVsbDt0aGlzLmg9YitcIjpcIitjO3RoaXMudj1uZXcgV2o7dGhpcy5nPW5ldyBUaih0aGlzLmgpO3RoaXMuZj1udWxsO3RoaXMuYj1bXTt0aGlzLmE9dGhpcy5jPW51bGx9ZnVuY3Rpb24gbGsoYSl7cmV0dXJuIG5ldyBMKFwiaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIixhKX1nPWtrLnByb3RvdHlwZTtcbmcuZ2E9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy56YT90aGlzLnphOnRoaXMuemE9aWUoKS50aGVuKGZ1bmN0aW9uKCl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEkoXCJ1bml2ZXJzYWxMaW5rcy5zdWJzY3JpYmVcIixrKSl0aHJvdyBsayhcImNvcmRvdmEtdW5pdmVyc2FsLWxpbmtzLXBsdWdpbi1maXggaXMgbm90IGluc3RhbGxlZFwiKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIEkoXCJCdWlsZEluZm8ucGFja2FnZU5hbWVcIixrKSl0aHJvdyBsayhcImNvcmRvdmEtcGx1Z2luLWJ1aWxkaW5mbyBpcyBub3QgaW5zdGFsbGVkXCIpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBJKFwiY29yZG92YS5wbHVnaW5zLmJyb3dzZXJ0YWIub3BlblVybFwiLGspKXRocm93IGxrKFwiY29yZG92YS1wbHVnaW4tYnJvd3NlcnRhYiBpcyBub3QgaW5zdGFsbGVkXCIpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBJKFwiY29yZG92YS5JbkFwcEJyb3dzZXIub3BlblwiLGspKXRocm93IGxrKFwiY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyIGlzIG5vdCBpbnN0YWxsZWRcIik7XG59LGZ1bmN0aW9uKCl7dGhyb3cgbmV3IEwoXCJjb3Jkb3ZhLW5vdC1yZWFkeVwiKTt9KX07ZnVuY3Rpb24gbWsoKXtmb3IodmFyIGE9MjAsYj1bXTswPGE7KWIucHVzaChcIjEyMzQ1Njc4OTBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCIuY2hhckF0KE1hdGguZmxvb3IoNjIqTWF0aC5yYW5kb20oKSkpKSxhLS07cmV0dXJuIGIuam9pbihcIlwiKX1mdW5jdGlvbiBuayhhKXt2YXIgYj1uZXcgaWs7aGsoYixhKTthPVtdO3ZhciBjPTgqYi5nOzU2PmIuYz9oayhiLGZrLDU2LWIuYyk6aGsoYixmayxiLmItKGIuYy01NikpO2Zvcih2YXIgZD02Mzs1Njw9ZDtkLS0pYi5mW2RdPWMmMjU1LGMvPTI1NjtnayhiKTtmb3IoZD1jPTA7ZDxiLmk7ZCsrKWZvcih2YXIgZT0yNDswPD1lO2UtPTgpYVtjKytdPWIuYVtkXT4+ZSYyNTU7cmV0dXJuIG9mKGEpfVxuZy5FYT1mdW5jdGlvbihhLGIpe2IobmV3IEwoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTtyZXR1cm4gQigpfTtnLkNiPWZ1bmN0aW9uKCl7cmV0dXJuIEMobmV3IEwoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKX07Zy5RYj1mdW5jdGlvbigpe3JldHVybiExfTtnLk1iPWZ1bmN0aW9uKCl7cmV0dXJuITB9O2cuSGI9ZnVuY3Rpb24oKXtyZXR1cm4hMH07XG5nLkNhPWZ1bmN0aW9uKGEsYixjKXtpZih0aGlzLmMpcmV0dXJuIEMobmV3IEwoXCJyZWRpcmVjdC1vcGVyYXRpb24tcGVuZGluZ1wiKSk7dmFyIGQ9dGhpcyxlPWsuZG9jdW1lbnQsZj1udWxsLGg9bnVsbCxtPW51bGwscD1udWxsO3JldHVybiB0aGlzLmM9QigpLnRoZW4oZnVuY3Rpb24oKXt2ZyhiKTtyZXR1cm4gb2soZCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHBrKGQsYSxiLGMpfSkudGhlbihmdW5jdGlvbigpe3JldHVybihuZXcgQShmdW5jdGlvbihhLGIpe2g9ZnVuY3Rpb24oKXt2YXIgYj1JKFwiY29yZG92YS5wbHVnaW5zLmJyb3dzZXJ0YWIuY2xvc2VcIixrKTthKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGImJmIoKTtkLmEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmEuY2xvc2UmJihkLmEuY2xvc2UoKSxkLmE9bnVsbCk7cmV0dXJuITF9O2Qud2EoaCk7bT1mdW5jdGlvbigpe2Z8fChmPUhjKDJFMykudGhlbihmdW5jdGlvbigpe2IobmV3IEwoXCJyZWRpcmVjdC1jYW5jZWxsZWQtYnktdXNlclwiKSl9KSl9O1xucD1mdW5jdGlvbigpe0RlKCkmJm0oKX07ZS5hZGRFdmVudExpc3RlbmVyKFwicmVzdW1lXCIsbSwhMSk7SCgpLnRvTG93ZXJDYXNlKCkubWF0Y2goL2FuZHJvaWQvKXx8ZS5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLHAsITEpfSkpLnMoZnVuY3Rpb24oYSl7cmV0dXJuIHFrKGQpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyBhO30pfSl9KS5pYShmdW5jdGlvbigpe20mJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc3VtZVwiLG0sITEpO3AmJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIixwLCExKTtmJiZmLmNhbmNlbCgpO2gmJmQuS2EoaCk7ZC5jPW51bGx9KX07XG5mdW5jdGlvbiBwayhhLGIsYyxkKXt2YXIgZT1taygpLGY9bmV3IHdnKGIsZCxudWxsLGUsbmV3IEwoXCJuby1hdXRoLWV2ZW50XCIpKSxoPUkoXCJCdWlsZEluZm8ucGFja2FnZU5hbWVcIixrKTtpZihcInN0cmluZ1wiIT09dHlwZW9mIGgpdGhyb3cgbmV3IEwoXCJpbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiKTt2YXIgbT1JKFwiQnVpbGRJbmZvLmRpc3BsYXlOYW1lXCIsaykscD17fTtpZihIKCkudG9Mb3dlckNhc2UoKS5tYXRjaCgvaXBob25lfGlwYWR8aXBvZC8pKXAuaWJpPWg7ZWxzZSBpZihIKCkudG9Mb3dlckNhc2UoKS5tYXRjaCgvYW5kcm9pZC8pKXAuYXBuPWg7ZWxzZSByZXR1cm4gQyhuZXcgTChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO20mJihwLmFwcERpc3BsYXlOYW1lPW0pO2U9bmsoZSk7cC5zZXNzaW9uSWQ9ZTt2YXIgeD1ZaShhLm0sYS5pLGEubCxiLGMsbnVsbCxkLGEubyxwLGEudSk7cmV0dXJuIGEuZ2EoKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGI9XG5hLmg7cmV0dXJuIGEudi5hLnNldChVaixmLkMoKSxiKX0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgYj1JKFwiY29yZG92YS5wbHVnaW5zLmJyb3dzZXJ0YWIuaXNBdmFpbGFibGVcIixrKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYil0aHJvdyBuZXcgTChcImludmFsaWQtY29yZG92YS1jb25maWd1cmF0aW9uXCIpO3ZhciBjPW51bGw7YihmdW5jdGlvbihiKXtpZihiKXtjPUkoXCJjb3Jkb3ZhLnBsdWdpbnMuYnJvd3NlcnRhYi5vcGVuVXJsXCIsayk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgbmV3IEwoXCJpbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiKTtjKHgpfWVsc2V7Yz1JKFwiY29yZG92YS5JbkFwcEJyb3dzZXIub3BlblwiLGspO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IG5ldyBMKFwiaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIik7Yj1IKCk7Yj0hKCFiLm1hdGNoKC8oaVBhZHxpUGhvbmV8aVBvZCkuKk9TIDdfXFxkL2kpJiYhYi5tYXRjaCgvKGlQYWR8aVBob25lfGlQb2QpLipPUyA4X1xcZC9pKSk7XG5hLmE9Yyh4LGI/XCJfYmxhbmtcIjpcIl9zeXN0ZW1cIixcImxvY2F0aW9uPXllc1wiKX19KX0pfWZ1bmN0aW9uIHJrKGEsYil7Zm9yKHZhciBjPTA7YzxhLmIubGVuZ3RoO2MrKyl0cnl7YS5iW2NdKGIpfWNhdGNoKGQpe319ZnVuY3Rpb24gb2soYSl7YS5mfHwoYS5mPWEuZ2EoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBBKGZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGMoZCl7YihkKTthLkthKGMpO3JldHVybiExfWEud2EoYyk7c2soYSl9KX0pKTtyZXR1cm4gYS5mfWZ1bmN0aW9uIHFrKGEpe3ZhciBiPW51bGw7cmV0dXJuIFZqKGEuZykudGhlbihmdW5jdGlvbihjKXtiPWM7Yz1hLmc7cmV0dXJuIFFqKGMuYixVaixjLmEpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBifSl9XG5mdW5jdGlvbiBzayhhKXtmdW5jdGlvbiBiKGIpe2Q9ITA7ZSYmZS5jYW5jZWwoKTtxayhhKS50aGVuKGZ1bmN0aW9uKGQpe3ZhciBlPWM7aWYoZCYmYiYmYi51cmwpe3ZhciBmPW51bGw7ZT1PZihiLnVybCk7LTEhPWUuaW5kZXhPZihcIi9fXy9hdXRoL2NhbGxiYWNrXCIpJiYoZj1kZChlKSxmPXplKGNkKGYsXCJmaXJlYmFzZUVycm9yXCIpfHxudWxsKSxmPShmPVwib2JqZWN0XCI9PT10eXBlb2YgZj9iZihmKTpudWxsKT9uZXcgd2coZC5iLGQuYyxudWxsLG51bGwsZik6bmV3IHdnKGQuYixkLmMsZSxkLmcpKTtlPWZ8fGN9cmsoYSxlKX0pfXZhciBjPW5ldyB3ZyhcInVua25vd25cIixudWxsLG51bGwsbnVsbCxuZXcgTChcIm5vLWF1dGgtZXZlbnRcIikpLGQ9ITEsZT1IYyg1MDApLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gcWsoYSkudGhlbihmdW5jdGlvbigpe2R8fHJrKGEsYyl9KX0pLGY9ay5oYW5kbGVPcGVuVVJMO2suaGFuZGxlT3BlblVSTD1mdW5jdGlvbihhKXswPT1hLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihJKFwiQnVpbGRJbmZvLnBhY2thZ2VOYW1lXCIsXG5rKS50b0xvd2VyQ2FzZSgpK1wiOi8vXCIpJiZiKHt1cmw6YX0pO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKXRyeXtmKGEpfWNhdGNoKG0pe2NvbnNvbGUuZXJyb3IobSl9fTt6Z3x8KHpnPW5ldyB5Zyk7emcuc3Vic2NyaWJlKGIpfWcud2E9ZnVuY3Rpb24oYSl7dGhpcy5iLnB1c2goYSk7b2sodGhpcykucyhmdW5jdGlvbihiKXtcImF1dGgvaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIj09PWIuY29kZSYmKGI9bmV3IHdnKFwidW5rbm93blwiLG51bGwsbnVsbCxudWxsLG5ldyBMKFwibm8tYXV0aC1ldmVudFwiKSksYShiKSl9KX07Zy5LYT1mdW5jdGlvbihhKXt3KHRoaXMuYixmdW5jdGlvbihiKXtyZXR1cm4gYj09YX0pfTtmdW5jdGlvbiB0ayhhKXt0aGlzLmE9YTt0aGlzLmI9TWooKX12YXIgdWs9e25hbWU6XCJwZW5kaW5nUmVkaXJlY3RcIixBOlwic2Vzc2lvblwifTtmdW5jdGlvbiB2ayhhKXtyZXR1cm4gYS5iLnNldCh1ayxcInBlbmRpbmdcIixhLmEpfWZ1bmN0aW9uIHdrKGEpe3JldHVybiBRaihhLmIsdWssYS5hKX1mdW5jdGlvbiB4ayhhKXtyZXR1cm4gYS5iLmdldCh1ayxhLmEpLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuXCJwZW5kaW5nXCI9PWF9KX07ZnVuY3Rpb24geWsoYSxiLGMpe3RoaXMudT1hO3RoaXMubD1iO3RoaXMubT1jO3RoaXMuaD1bXTt0aGlzLmY9ITE7dGhpcy5pPXIodGhpcy5iYix0aGlzKTt0aGlzLmI9bmV3IHprO3RoaXMubz1uZXcgQWs7dGhpcy5nPW5ldyB0ayh0aGlzLmwrXCI6XCIrdGhpcy5tKTt0aGlzLmM9e307dGhpcy5jLnVua25vd249dGhpcy5iO3RoaXMuYy5zaWduSW5WaWFSZWRpcmVjdD10aGlzLmI7dGhpcy5jLmxpbmtWaWFSZWRpcmVjdD10aGlzLmI7dGhpcy5jLnJlYXV0aFZpYVJlZGlyZWN0PXRoaXMuYjt0aGlzLmMuc2lnbkluVmlhUG9wdXA9dGhpcy5vO3RoaXMuYy5saW5rVmlhUG9wdXA9dGhpcy5vO3RoaXMuYy5yZWF1dGhWaWFQb3B1cD10aGlzLm87dGhpcy5hPUJrKHRoaXMudSx0aGlzLmwsdGhpcy5tLHpmKX1mdW5jdGlvbiBCayhhLGIsYyxkKXt2YXIgZT1maXJlYmFzZS5TREtfVkVSU0lPTnx8bnVsbDtyZXR1cm4gamUoKT9uZXcga2soYSxiLGMsZSxkKTpuZXcgU2koYSxiLGMsZSxkKX1nPXlrLnByb3RvdHlwZTtcbmcucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmY9ITE7dGhpcy5hLkthKHRoaXMuaSk7dGhpcy5hPUJrKHRoaXMudSx0aGlzLmwsdGhpcy5tKX07Zy5ZYT1mdW5jdGlvbigpe3RoaXMuYi5ZYSgpfTtmdW5jdGlvbiBDayhhKXthLmZ8fChhLmY9ITAsYS5hLndhKGEuaSkpO3ZhciBiPWEuYTtyZXR1cm4gYS5hLmdhKCkucyhmdW5jdGlvbihjKXthLmE9PWImJmEucmVzZXQoKTt0aHJvdyBjO30pfWZ1bmN0aW9uIERrKGEpe2EuYS5NYigpJiZDayhhKS5zKGZ1bmN0aW9uKGIpe3ZhciBjPW5ldyB3ZyhcInVua25vd25cIixudWxsLG51bGwsbnVsbCxuZXcgTChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO0VrKGIpJiZhLmJiKGMpfSk7YS5hLkhiKCl8fEZrKGEuYil9XG5nLnN1YnNjcmliZT1mdW5jdGlvbihhKXtHYSh0aGlzLmgsYSl8fHRoaXMuaC5wdXNoKGEpO2lmKCF0aGlzLmYpe3ZhciBiPXRoaXM7eGsodGhpcy5nKS50aGVuKGZ1bmN0aW9uKGEpe2E/d2soYi5nKS50aGVuKGZ1bmN0aW9uKCl7Q2soYikucyhmdW5jdGlvbihhKXt2YXIgYz1uZXcgd2coXCJ1bmtub3duXCIsbnVsbCxudWxsLG51bGwsbmV3IEwoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTtFayhhKSYmYi5iYihjKX0pfSk6RGsoYil9KS5zKGZ1bmN0aW9uKCl7RGsoYil9KX19O2cudW5zdWJzY3JpYmU9ZnVuY3Rpb24oYSl7dyh0aGlzLmgsZnVuY3Rpb24oYil7cmV0dXJuIGI9PWF9KX07XG5nLmJiPWZ1bmN0aW9uKGEpe2lmKCFhKXRocm93IG5ldyBMKFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpO2Zvcih2YXIgYj0hMSxjPTA7Yzx0aGlzLmgubGVuZ3RoO2MrKyl7dmFyIGQ9dGhpcy5oW2NdO2lmKGQudmIoYS5iLGEuYykpeyhiPXRoaXMuY1thLmJdKSYmYi5oKGEsZCk7Yj0hMDticmVha319RmsodGhpcy5iKTtyZXR1cm4gYn07dmFyIEdrPW5ldyBDZSgyRTMsMUU0KSxIaz1uZXcgQ2UoM0U0LDZFNCk7eWsucHJvdG90eXBlLmZhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYi5mYSgpfTtmdW5jdGlvbiBJayhhLGIsYyxkLGUsZil7cmV0dXJuIGEuYS5DYihiLGMsZCxmdW5jdGlvbigpe2EuZnx8KGEuZj0hMCxhLmEud2EoYS5pKSl9LGZ1bmN0aW9uKCl7YS5yZXNldCgpfSxlLGYpfWZ1bmN0aW9uIEVrKGEpe3JldHVybiBhJiZcImF1dGgvY29yZG92YS1ub3QtcmVhZHlcIj09YS5jb2RlPyEwOiExfVxueWsucHJvdG90eXBlLkNhPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLGU7cmV0dXJuIHZrKHRoaXMuZykudGhlbihmdW5jdGlvbigpe3JldHVybiBkLmEuQ2EoYSxiLGMpLnMoZnVuY3Rpb24oYSl7aWYoRWsoYSkpdGhyb3cgbmV3IEwoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpO2U9YTtyZXR1cm4gd2soZC5nKS50aGVuKGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZC5hLlFiKCk/bmV3IEEoZnVuY3Rpb24oKXt9KTp3ayhkLmcpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZC5mYSgpfSkudGhlbihmdW5jdGlvbigpe30pLnMoZnVuY3Rpb24oKXt9KX0pfSl9O3lrLnByb3RvdHlwZS5FYT1mdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5hLkVhKGMsZnVuY3Rpb24oYyl7YS5oYShiLG51bGwsYyxkKX0sR2suZ2V0KCkpfTt2YXIgSms9e307XG5mdW5jdGlvbiBLayhhLGIsYyl7dmFyIGQ9YitcIjpcIitjO0prW2RdfHwoSmtbZF09bmV3IHlrKGEsYixjKSk7cmV0dXJuIEprW2RdfWZ1bmN0aW9uIHprKCl7dGhpcy5iPW51bGw7dGhpcy5mPVtdO3RoaXMuYz1bXTt0aGlzLmE9bnVsbDt0aGlzLmk9dGhpcy5nPSExfXprLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMuYj1udWxsO3RoaXMuYSYmKHRoaXMuYS5jYW5jZWwoKSx0aGlzLmE9bnVsbCl9O1xuemsucHJvdG90eXBlLmg9ZnVuY3Rpb24oYSxiKXtpZihhKXt0aGlzLnJlc2V0KCk7dGhpcy5nPSEwO3ZhciBjPWEuYixkPWEuYyxlPWEuYSYmXCJhdXRoL3dlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCI9PWEuYS5jb2RlLGY9YS5hJiZcImF1dGgvb3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiPT1hLmEuY29kZTt0aGlzLmk9ISghZSYmIWYpO1widW5rbm93blwiIT1jfHxlfHxmP2EuYT8oTGsodGhpcywhMCxudWxsLGEuYSksQigpKTpiLnhhKGMsZCk/TWsodGhpcyxhLGIpOkMobmV3IEwoXCJpbnZhbGlkLWF1dGgtZXZlbnRcIikpOihMayh0aGlzLCExLG51bGwsbnVsbCksQigpKX1lbHNlIEMobmV3IEwoXCJpbnZhbGlkLWF1dGgtZXZlbnRcIikpfTtmdW5jdGlvbiBGayhhKXthLmd8fChhLmc9ITAsTGsoYSwhMSxudWxsLG51bGwpKX16ay5wcm90b3R5cGUuWWE9ZnVuY3Rpb24oKXt0aGlzLmcmJiF0aGlzLmkmJkxrKHRoaXMsITEsbnVsbCxudWxsKX07XG5mdW5jdGlvbiBNayhhLGIsYyl7Yz1jLnhhKGIuYixiLmMpO3ZhciBkPWIuZixlPWIuZyxmPWIuaCxoPSEhYi5iLm1hdGNoKC9SZWRpcmVjdCQvKTtjKGQsZSxmKS50aGVuKGZ1bmN0aW9uKGIpe0xrKGEsaCxiLG51bGwpfSkucyhmdW5jdGlvbihiKXtMayhhLGgsbnVsbCxiKX0pfWZ1bmN0aW9uIE5rKGEsYil7YS5iPWZ1bmN0aW9uKCl7cmV0dXJuIEMoYil9O2lmKGEuYy5sZW5ndGgpZm9yKHZhciBjPTA7YzxhLmMubGVuZ3RoO2MrKylhLmNbY10oYil9ZnVuY3Rpb24gT2soYSxiKXthLmI9ZnVuY3Rpb24oKXtyZXR1cm4gQihiKX07aWYoYS5mLmxlbmd0aClmb3IodmFyIGM9MDtjPGEuZi5sZW5ndGg7YysrKWEuZltjXShiKX1mdW5jdGlvbiBMayhhLGIsYyxkKXtiP2Q/TmsoYSxkKTpPayhhLGMpOk9rKGEse3VzZXI6bnVsbH0pO2EuZj1bXTthLmM9W119XG56ay5wcm90b3R5cGUuZmE9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBuZXcgQShmdW5jdGlvbihiLGMpe2EuYj9hLmIoKS50aGVuKGIsYyk6KGEuZi5wdXNoKGIpLGEuYy5wdXNoKGMpLFBrKGEpKX0pfTtmdW5jdGlvbiBQayhhKXt2YXIgYj1uZXcgTChcInRpbWVvdXRcIik7YS5hJiZhLmEuY2FuY2VsKCk7YS5hPUhjKEhrLmdldCgpKS50aGVuKGZ1bmN0aW9uKCl7YS5ifHwoYS5nPSEwLExrKGEsITAsbnVsbCxiKSl9KX1mdW5jdGlvbiBBaygpe31Bay5wcm90b3R5cGUuaD1mdW5jdGlvbihhLGIpe2lmKGEpe3ZhciBjPWEuYixkPWEuYzthLmE/KGIuaGEoYS5iLG51bGwsYS5hLGEuYyksQigpKTpiLnhhKGMsZCk/UWsoYSxiKTpDKG5ldyBMKFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpKX1lbHNlIEMobmV3IEwoXCJpbnZhbGlkLWF1dGgtZXZlbnRcIikpfTtcbmZ1bmN0aW9uIFFrKGEsYil7dmFyIGM9YS5jLGQ9YS5iO2IueGEoZCxjKShhLmYsYS5nLGEuaCkudGhlbihmdW5jdGlvbihhKXtiLmhhKGQsYSxudWxsLGMpfSkucyhmdW5jdGlvbihhKXtiLmhhKGQsbnVsbCxhLGMpfSl9O2Z1bmN0aW9uIFJrKCl7dGhpcy5zYj0hMTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImFwcFZlcmlmaWNhdGlvbkRpc2FibGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNifSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5zYj1hfSxlbnVtZXJhYmxlOiExfSl9O2Z1bmN0aW9uIFNrKGEsYil7dGhpcy5hPWI7Sih0aGlzLFwidmVyaWZpY2F0aW9uSWRcIixhKX1Tay5wcm90b3R5cGUuY29uZmlybT1mdW5jdGlvbihhKXthPXRnKHRoaXMudmVyaWZpY2F0aW9uSWQsYSk7cmV0dXJuIHRoaXMuYShhKX07ZnVuY3Rpb24gVGsoYSxiLGMsZCl7cmV0dXJuKG5ldyByZyhhKSkuVWEoYixjKS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBuZXcgU2soYSxkKX0pfTtmdW5jdGlvbiBVayhhKXt2YXIgYj13ZihhKTtpZighKGImJmIuZXhwJiZiLmF1dGhfdGltZSYmYi5pYXQpKXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIixcIkFuIGludGVybmFsIGVycm9yIG9jY3VycmVkLiBUaGUgdG9rZW4gb2J0YWluZWQgYnkgRmlyZWJhc2UgYXBwZWFycyB0byBiZSBtYWxmb3JtZWQuIFBsZWFzZSByZXRyeSB0aGUgb3BlcmF0aW9uLlwiKTtLKHRoaXMse3Rva2VuOmEsZXhwaXJhdGlvblRpbWU6RmUoMUUzKmIuZXhwKSxhdXRoVGltZTpGZSgxRTMqYi5hdXRoX3RpbWUpLGlzc3VlZEF0VGltZTpGZSgxRTMqYi5pYXQpLHNpZ25JblByb3ZpZGVyOmIuZmlyZWJhc2UmJmIuZmlyZWJhc2Uuc2lnbl9pbl9wcm92aWRlcj9iLmZpcmViYXNlLnNpZ25faW5fcHJvdmlkZXI6bnVsbCxjbGFpbXM6Yn0pfTtmdW5jdGlvbiBWayhhLGIsYyl7dGhpcy5oPWE7dGhpcy5pPWI7dGhpcy5nPWM7dGhpcy5jPTNFNDt0aGlzLmY9OTZFNDt0aGlzLmI9bnVsbDt0aGlzLmE9dGhpcy5jO2lmKHRoaXMuZjx0aGlzLmMpdGhyb3cgRXJyb3IoXCJQcm9hY3RpdmUgcmVmcmVzaCBsb3dlciBib3VuZCBncmVhdGVyIHRoYW4gdXBwZXIgYm91bmQhXCIpO31Way5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXt0aGlzLmE9dGhpcy5jO1drKHRoaXMsITApfTtmdW5jdGlvbiBYayhhLGIpe2lmKGIpcmV0dXJuIGEuYT1hLmMsYS5nKCk7Yj1hLmE7YS5hKj0yO2EuYT5hLmYmJihhLmE9YS5mKTtyZXR1cm4gYn1mdW5jdGlvbiBXayhhLGIpe2Euc3RvcCgpO2EuYj1IYyhYayhhLGIpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIEVlKCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuaCgpfSkudGhlbihmdW5jdGlvbigpe1drKGEsITApfSkucyhmdW5jdGlvbihiKXthLmkoYikmJldrKGEsITEpfSl9XG5Way5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3RoaXMuYiYmKHRoaXMuYi5jYW5jZWwoKSx0aGlzLmI9bnVsbCl9O2Z1bmN0aW9uIFlrKGEpe3RoaXMuZj1hO3RoaXMuYj10aGlzLmE9bnVsbDt0aGlzLmM9MH1Zay5wcm90b3R5cGUuQz1mdW5jdGlvbigpe3JldHVybnthcGlLZXk6dGhpcy5mLmIscmVmcmVzaFRva2VuOnRoaXMuYSxhY2Nlc3NUb2tlbjp0aGlzLmIsZXhwaXJhdGlvblRpbWU6dGhpcy5jfX07ZnVuY3Rpb24gWmsoYSxiKXt2YXIgYz1iW01dLGQ9Yi5yZWZyZXNoVG9rZW47Yj0kayhiLmV4cGlyZXNJbik7YS5iPWM7YS5jPWI7YS5hPWR9ZnVuY3Rpb24gYWwoYSxiKXthLmI9Yi5iO2EuYT1iLmE7YS5jPWIuY31mdW5jdGlvbiAkayhhKXtyZXR1cm4gb2EoKSsxRTMqcGFyc2VJbnQoYSwxMCl9XG5mdW5jdGlvbiBibChhLGIpe3JldHVybiBWaChhLmYsYikudGhlbihmdW5jdGlvbihiKXthLmI9Yi5hY2Nlc3NfdG9rZW47YS5jPSRrKGIuZXhwaXJlc19pbik7YS5hPWIucmVmcmVzaF90b2tlbjtyZXR1cm57YWNjZXNzVG9rZW46YS5iLGV4cGlyYXRpb25UaW1lOmEuYyxyZWZyZXNoVG9rZW46YS5hfX0pLnMoZnVuY3Rpb24oYil7XCJhdXRoL3VzZXItdG9rZW4tZXhwaXJlZFwiPT1iLmNvZGUmJihhLmE9bnVsbCk7dGhyb3cgYjt9KX1Zay5wcm90b3R5cGUuZ2V0VG9rZW49ZnVuY3Rpb24oYSl7YT0hIWE7cmV0dXJuIHRoaXMuYiYmIXRoaXMuYT9DKG5ldyBMKFwidXNlci10b2tlbi1leHBpcmVkXCIpKTphfHwhdGhpcy5ifHxvYSgpPnRoaXMuYy0zRTQ/dGhpcy5hP2JsKHRoaXMse2dyYW50X3R5cGU6XCJyZWZyZXNoX3Rva2VuXCIscmVmcmVzaF90b2tlbjp0aGlzLmF9KTpCKG51bGwpOkIoe2FjY2Vzc1Rva2VuOnRoaXMuYixleHBpcmF0aW9uVGltZTp0aGlzLmMscmVmcmVzaFRva2VuOnRoaXMuYX0pfTtmdW5jdGlvbiBjbChhLGIpe3RoaXMuYT1hfHxudWxsO3RoaXMuYj1ifHxudWxsO0sodGhpcyx7bGFzdFNpZ25JblRpbWU6RmUoYnx8bnVsbCksY3JlYXRpb25UaW1lOkZlKGF8fG51bGwpfSl9ZnVuY3Rpb24gZGwoYSl7cmV0dXJuIG5ldyBjbChhLmEsYS5iKX1jbC5wcm90b3R5cGUuQz1mdW5jdGlvbigpe3JldHVybntsYXN0TG9naW5BdDp0aGlzLmIsY3JlYXRlZEF0OnRoaXMuYX19O2Z1bmN0aW9uIGVsKGEsYixjLGQsZSxmKXtLKHRoaXMse3VpZDphLGRpc3BsYXlOYW1lOmR8fG51bGwscGhvdG9VUkw6ZXx8bnVsbCxlbWFpbDpjfHxudWxsLHBob25lTnVtYmVyOmZ8fG51bGwscHJvdmlkZXJJZDpifSl9ZnVuY3Rpb24gZmwoYSxiKXtELmNhbGwodGhpcyxhKTtmb3IodmFyIGMgaW4gYil0aGlzW2NdPWJbY119dChmbCxEKTtcbmZ1bmN0aW9uIFEoYSxiLGMpe3RoaXMuRz1bXTt0aGlzLm09YS5hcGlLZXk7dGhpcy5vPWEuYXBwTmFtZTt0aGlzLnU9YS5hdXRoRG9tYWlufHxudWxsO2E9ZmlyZWJhc2UuU0RLX1ZFUlNJT04/cmUoZmlyZWJhc2UuU0RLX1ZFUlNJT04pOm51bGw7dGhpcy5iPW5ldyBKaCh0aGlzLm0seWYoemYpLGEpO3RoaXMuaD1uZXcgWWsodGhpcy5iKTtnbCh0aGlzLGJbTV0pO1prKHRoaXMuaCxiKTtKKHRoaXMsXCJyZWZyZXNoVG9rZW5cIix0aGlzLmguYSk7aGwodGhpcyxjfHx7fSk7Ri5jYWxsKHRoaXMpO3RoaXMuST0hMTt0aGlzLnUmJnVlKCkmJih0aGlzLmE9S2sodGhpcy51LHRoaXMubSx0aGlzLm8pKTt0aGlzLk49W107dGhpcy5pPW51bGw7dGhpcy53PWlsKHRoaXMpO3RoaXMuVj1yKHRoaXMuSGEsdGhpcyk7dmFyIGQ9dGhpczt0aGlzLmthPW51bGw7dGhpcy50YT1mdW5jdGlvbihhKXtkLnBhKGEuZyl9O3RoaXMuWD1udWxsO3RoaXMuTz1bXTt0aGlzLnNhPWZ1bmN0aW9uKGEpe2psKGQsXG5hLmMpfTt0aGlzLlc9bnVsbH10KFEsRik7US5wcm90b3R5cGUucGE9ZnVuY3Rpb24oYSl7dGhpcy5rYT1hO1BoKHRoaXMuYixhKX07US5wcm90b3R5cGUuZWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5rYX07ZnVuY3Rpb24ga2woYSxiKXthLlgmJkUoYS5YLFwibGFuZ3VhZ2VDb2RlQ2hhbmdlZFwiLGEudGEpOyhhLlg9YikmJnJjKGIsXCJsYW5ndWFnZUNvZGVDaGFuZ2VkXCIsYS50YSl9ZnVuY3Rpb24gamwoYSxiKXthLk89YjtRaChhLmIsZmlyZWJhc2UuU0RLX1ZFUlNJT04/cmUoZmlyZWJhc2UuU0RLX1ZFUlNJT04sYS5PKTpudWxsKX1RLnByb3RvdHlwZS55YT1mdW5jdGlvbigpe3JldHVybiBKYSh0aGlzLk8pfTtmdW5jdGlvbiBsbChhLGIpe2EuVyYmRShhLlcsXCJmcmFtZXdvcmtDaGFuZ2VkXCIsYS5zYSk7KGEuVz1iKSYmcmMoYixcImZyYW1ld29ya0NoYW5nZWRcIixhLnNhKX1RLnByb3RvdHlwZS5IYT1mdW5jdGlvbigpe3RoaXMudy5iJiYodGhpcy53LnN0b3AoKSx0aGlzLncuc3RhcnQoKSl9O1xuZnVuY3Rpb24gbWwoYSl7dHJ5e3JldHVybiBmaXJlYmFzZS5hcHAoYS5vKS5hdXRoKCl9Y2F0Y2goYil7dGhyb3cgbmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiLFwiTm8gZmlyZWJhc2UuYXV0aC5BdXRoIGluc3RhbmNlIGlzIGF2YWlsYWJsZSBmb3IgdGhlIEZpcmViYXNlIEFwcCAnXCIrYS5vK1wiJyFcIik7fX1mdW5jdGlvbiBpbChhKXtyZXR1cm4gbmV3IFZrKGZ1bmN0aW9uKCl7cmV0dXJuIGEuRighMCl9LGZ1bmN0aW9uKGEpe3JldHVybiBhJiZcImF1dGgvbmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiPT1hLmNvZGU/ITA6ITF9LGZ1bmN0aW9uKCl7dmFyIGI9YS5oLmMtb2EoKS0zRTU7cmV0dXJuIDA8Yj9iOjB9KX1mdW5jdGlvbiBubChhKXthLkR8fGEudy5ifHwoYS53LnN0YXJ0KCksRShhLFwidG9rZW5DaGFuZ2VkXCIsYS5WKSxyYyhhLFwidG9rZW5DaGFuZ2VkXCIsYS5WKSl9ZnVuY3Rpb24gb2woYSl7RShhLFwidG9rZW5DaGFuZ2VkXCIsYS5WKTthLncuc3RvcCgpfVxuZnVuY3Rpb24gZ2woYSxiKXthLnJhPWI7SihhLFwiX2xhdFwiLGIpfWZ1bmN0aW9uIHBsKGEsYil7dyhhLk4sZnVuY3Rpb24oYSl7cmV0dXJuIGE9PWJ9KX1mdW5jdGlvbiBxbChhKXtmb3IodmFyIGI9W10sYz0wO2M8YS5OLmxlbmd0aDtjKyspYi5wdXNoKGEuTltjXShhKSk7cmV0dXJuIHdiKGIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYX0pfWZ1bmN0aW9uIHJsKGEpe2EuYSYmIWEuSSYmKGEuST0hMCxhLmEuc3Vic2NyaWJlKGEpKX1cbmZ1bmN0aW9uIGhsKGEsYil7SyhhLHt1aWQ6Yi51aWQsZGlzcGxheU5hbWU6Yi5kaXNwbGF5TmFtZXx8bnVsbCxwaG90b1VSTDpiLnBob3RvVVJMfHxudWxsLGVtYWlsOmIuZW1haWx8fG51bGwsZW1haWxWZXJpZmllZDpiLmVtYWlsVmVyaWZpZWR8fCExLHBob25lTnVtYmVyOmIucGhvbmVOdW1iZXJ8fG51bGwsaXNBbm9ueW1vdXM6Yi5pc0Fub255bW91c3x8ITEsbWV0YWRhdGE6bmV3IGNsKGIuY3JlYXRlZEF0LGIubGFzdExvZ2luQXQpLHByb3ZpZGVyRGF0YTpbXX0pfUooUS5wcm90b3R5cGUsXCJwcm92aWRlcklkXCIsXCJmaXJlYmFzZVwiKTtmdW5jdGlvbiBzbCgpe31mdW5jdGlvbiB0bChhKXtyZXR1cm4gQigpLnRoZW4oZnVuY3Rpb24oKXtpZihhLkQpdGhyb3cgbmV3IEwoXCJhcHAtZGVsZXRlZFwiKTt9KX1mdW5jdGlvbiB1bChhKXtyZXR1cm4gQ2EoYS5wcm92aWRlckRhdGEsZnVuY3Rpb24oYSl7cmV0dXJuIGEucHJvdmlkZXJJZH0pfVxuZnVuY3Rpb24gdmwoYSxiKXtiJiYod2woYSxiLnByb3ZpZGVySWQpLGEucHJvdmlkZXJEYXRhLnB1c2goYikpfWZ1bmN0aW9uIHdsKGEsYil7dyhhLnByb3ZpZGVyRGF0YSxmdW5jdGlvbihhKXtyZXR1cm4gYS5wcm92aWRlcklkPT1ifSl9ZnVuY3Rpb24geGwoYSxiLGMpeyhcInVpZFwiIT1ifHxjKSYmYS5oYXNPd25Qcm9wZXJ0eShiKSYmSihhLGIsYyl9XG5mdW5jdGlvbiB5bChhLGIpe2EhPWImJihLKGEse3VpZDpiLnVpZCxkaXNwbGF5TmFtZTpiLmRpc3BsYXlOYW1lLHBob3RvVVJMOmIucGhvdG9VUkwsZW1haWw6Yi5lbWFpbCxlbWFpbFZlcmlmaWVkOmIuZW1haWxWZXJpZmllZCxwaG9uZU51bWJlcjpiLnBob25lTnVtYmVyLGlzQW5vbnltb3VzOmIuaXNBbm9ueW1vdXMscHJvdmlkZXJEYXRhOltdfSksYi5tZXRhZGF0YT9KKGEsXCJtZXRhZGF0YVwiLGRsKGIubWV0YWRhdGEpKTpKKGEsXCJtZXRhZGF0YVwiLG5ldyBjbCksdihiLnByb3ZpZGVyRGF0YSxmdW5jdGlvbihiKXt2bChhLGIpfSksYWwoYS5oLGIuaCksSihhLFwicmVmcmVzaFRva2VuXCIsYS5oLmEpKX1nPVEucHJvdG90eXBlO2cucmVsb2FkPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gUih0aGlzLHRsKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gemwoYSkudGhlbihmdW5jdGlvbigpe3JldHVybiBxbChhKX0pLnRoZW4oc2wpfSkpfTtcbmZ1bmN0aW9uIHpsKGEpe3JldHVybiBhLkYoKS50aGVuKGZ1bmN0aW9uKGIpe3ZhciBjPWEuaXNBbm9ueW1vdXM7cmV0dXJuIEFsKGEsYikudGhlbihmdW5jdGlvbigpe2N8fHhsKGEsXCJpc0Fub255bW91c1wiLCExKTtyZXR1cm4gYn0pfSl9Zy5kYz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5GKGEpLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBVayhhKX0pfTtnLkY9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gUih0aGlzLHRsKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYi5oLmdldFRva2VuKGEpfSkudGhlbihmdW5jdGlvbihhKXtpZighYSl0aHJvdyBuZXcgTChcImludGVybmFsLWVycm9yXCIpO2EuYWNjZXNzVG9rZW4hPWIucmEmJihnbChiLGEuYWNjZXNzVG9rZW4pLGIuZGlzcGF0Y2hFdmVudChuZXcgZmwoXCJ0b2tlbkNoYW5nZWRcIikpKTt4bChiLFwicmVmcmVzaFRva2VuXCIsYS5yZWZyZXNoVG9rZW4pO3JldHVybiBhLmFjY2Vzc1Rva2VufSkpfTtcbmZ1bmN0aW9uIEJsKGEsYil7YltNXSYmYS5yYSE9YltNXSYmKFprKGEuaCxiKSxhLmRpc3BhdGNoRXZlbnQobmV3IGZsKFwidG9rZW5DaGFuZ2VkXCIpKSxnbChhLGJbTV0pLHhsKGEsXCJyZWZyZXNoVG9rZW5cIixhLmguYSkpfWZ1bmN0aW9uIEFsKGEsYil7cmV0dXJuIFAoYS5iLERpLHtpZFRva2VuOmJ9KS50aGVuKHIoYS54YyxhKSl9XG5nLnhjPWZ1bmN0aW9uKGEpe2E9YS51c2VycztpZighYXx8IWEubGVuZ3RoKXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIik7YT1hWzBdO2hsKHRoaXMse3VpZDphLmxvY2FsSWQsZGlzcGxheU5hbWU6YS5kaXNwbGF5TmFtZSxwaG90b1VSTDphLnBob3RvVXJsLGVtYWlsOmEuZW1haWwsZW1haWxWZXJpZmllZDohIWEuZW1haWxWZXJpZmllZCxwaG9uZU51bWJlcjphLnBob25lTnVtYmVyLGxhc3RMb2dpbkF0OmEubGFzdExvZ2luQXQsY3JlYXRlZEF0OmEuY3JlYXRlZEF0fSk7Zm9yKHZhciBiPUNsKGEpLGM9MDtjPGIubGVuZ3RoO2MrKyl2bCh0aGlzLGJbY10pO3hsKHRoaXMsXCJpc0Fub255bW91c1wiLCEodGhpcy5lbWFpbCYmYS5wYXNzd29yZEhhc2gpJiYhKHRoaXMucHJvdmlkZXJEYXRhJiZ0aGlzLnByb3ZpZGVyRGF0YS5sZW5ndGgpKX07XG5mdW5jdGlvbiBDbChhKXtyZXR1cm4oYT1hLnByb3ZpZGVyVXNlckluZm8pJiZhLmxlbmd0aD9DYShhLGZ1bmN0aW9uKGEpe3JldHVybiBuZXcgZWwoYS5yYXdJZCxhLnByb3ZpZGVySWQsYS5lbWFpbCxhLmRpc3BsYXlOYW1lLGEucGhvdG9VcmwsYS5waG9uZU51bWJlcil9KTpbXX1nLmdiPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1udWxsO3JldHVybiBSKHRoaXMsYS5mKHRoaXMuYix0aGlzLnVpZCkudGhlbihmdW5jdGlvbihhKXtCbChiLGEpO2M9RGwoYixhLFwicmVhdXRoZW50aWNhdGVcIik7Yi5pPW51bGw7cmV0dXJuIGIucmVsb2FkKCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGN9KSwhMCl9O1xuZy55Yz1mdW5jdGlvbihhKXtLZShcImZpcmViYXNlLlVzZXIucHJvdG90eXBlLnJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWwgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBmaXJlYmFzZS5Vc2VyLnByb3RvdHlwZS5yZWF1dGhlbnRpY2F0ZUFuZFJldHJpZXZlRGF0YVdpdGhDcmVkZW50aWFsIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLmdiKGEpLnRoZW4oZnVuY3Rpb24oKXt9KX07ZnVuY3Rpb24gRWwoYSxiKXtyZXR1cm4gemwoYSkudGhlbihmdW5jdGlvbigpe2lmKEdhKHVsKGEpLGIpKXJldHVybiBxbChhKS50aGVuKGZ1bmN0aW9uKCl7dGhyb3cgbmV3IEwoXCJwcm92aWRlci1hbHJlYWR5LWxpbmtlZFwiKTt9KX0pfVxuZy5lYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9bnVsbDtyZXR1cm4gUih0aGlzLEVsKHRoaXMsYS5wcm92aWRlcklkKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIuRigpfSkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYS5iKGIuYixjKX0pLnRoZW4oZnVuY3Rpb24oYSl7Yz1EbChiLGEsXCJsaW5rXCIpO3JldHVybiBGbChiLGEpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBjfSkpfTtnLnBjPWZ1bmN0aW9uKGEpe0tlKFwiZmlyZWJhc2UuVXNlci5wcm90b3R5cGUubGlua1dpdGhDcmVkZW50aWFsIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgZmlyZWJhc2UuVXNlci5wcm90b3R5cGUubGlua0FuZFJldHJpZXZlRGF0YVdpdGhDcmVkZW50aWFsIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLmViKGEpLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIGEudXNlcn0pfTtcbmcucWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBSKHRoaXMsRWwodGhpcyxcInBob25lXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gVGsobWwoYyksYSxiLHIoYy5lYixjKSl9KSl9O2cuemM9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBSKHRoaXMsQigpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gVGsobWwoYyksYSxiLHIoYy5nYixjKSl9KSwhMCl9O2Z1bmN0aW9uIERsKGEsYixjKXt2YXIgZD11ZyhiKTtiPUVmKGIpO3JldHVybiBOZSh7dXNlcjphLGNyZWRlbnRpYWw6ZCxhZGRpdGlvbmFsVXNlckluZm86YixvcGVyYXRpb25UeXBlOmN9KX1mdW5jdGlvbiBGbChhLGIpe0JsKGEsYik7cmV0dXJuIGEucmVsb2FkKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBhfSl9XG5nLnBiPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIFIodGhpcyx0aGlzLkYoKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBiLmIucGIoYyxhKX0pLnRoZW4oZnVuY3Rpb24oYSl7QmwoYixhKTtyZXR1cm4gYi5yZWxvYWQoKX0pKX07Zy5SYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBSKHRoaXMsdGhpcy5GKCkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYS5iKGIuYixjKX0pLnRoZW4oZnVuY3Rpb24oYSl7QmwoYixhKTtyZXR1cm4gYi5yZWxvYWQoKX0pKX07Zy5xYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBSKHRoaXMsdGhpcy5GKCkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYi5iLnFiKGMsYSl9KS50aGVuKGZ1bmN0aW9uKGEpe0JsKGIsYSk7cmV0dXJuIGIucmVsb2FkKCl9KSl9O1xuZy5yYj1mdW5jdGlvbihhKXtpZih2b2lkIDA9PT1hLmRpc3BsYXlOYW1lJiZ2b2lkIDA9PT1hLnBob3RvVVJMKXJldHVybiB0bCh0aGlzKTt2YXIgYj10aGlzO3JldHVybiBSKHRoaXMsdGhpcy5GKCkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYi5iLnJiKGMse2Rpc3BsYXlOYW1lOmEuZGlzcGxheU5hbWUscGhvdG9Vcmw6YS5waG90b1VSTH0pfSkudGhlbihmdW5jdGlvbihhKXtCbChiLGEpO3hsKGIsXCJkaXNwbGF5TmFtZVwiLGEuZGlzcGxheU5hbWV8fG51bGwpO3hsKGIsXCJwaG90b1VSTFwiLGEucGhvdG9Vcmx8fG51bGwpO3YoYi5wcm92aWRlckRhdGEsZnVuY3Rpb24oYSl7XCJwYXNzd29yZFwiPT09YS5wcm92aWRlcklkJiYoSihhLFwiZGlzcGxheU5hbWVcIixiLmRpc3BsYXlOYW1lKSxKKGEsXCJwaG90b1VSTFwiLGIucGhvdG9VUkwpKX0pO3JldHVybiBxbChiKX0pLnRoZW4oc2wpKX07XG5nLlBjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIFIodGhpcyx6bCh0aGlzKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBHYSh1bChiKSxhKT9vaShiLmIsYyxbYV0pLnRoZW4oZnVuY3Rpb24oYSl7dmFyIGM9e307dihhLnByb3ZpZGVyVXNlckluZm98fFtdLGZ1bmN0aW9uKGEpe2NbYS5wcm92aWRlcklkXT0hMH0pO3YodWwoYiksZnVuY3Rpb24oYSl7Y1thXXx8d2woYixhKX0pO2NbcmcuUFJPVklERVJfSURdfHxKKGIsXCJwaG9uZU51bWJlclwiLG51bGwpO3JldHVybiBxbChiKX0pOnFsKGIpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyBuZXcgTChcIm5vLXN1Y2gtcHJvdmlkZXJcIik7fSl9KSl9O1xuZy5kZWxldGU9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBSKHRoaXMsdGhpcy5GKCkudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gUChhLmIsQ2kse2lkVG9rZW46Yn0pfSkudGhlbihmdW5jdGlvbigpe2EuZGlzcGF0Y2hFdmVudChuZXcgZmwoXCJ1c2VyRGVsZXRlZFwiKSl9KSkudGhlbihmdW5jdGlvbigpe2Zvcih2YXIgYj0wO2I8YS5HLmxlbmd0aDtiKyspYS5HW2JdLmNhbmNlbChcImFwcC1kZWxldGVkXCIpO2tsKGEsbnVsbCk7bGwoYSxudWxsKTthLkc9W107YS5EPSEwO29sKGEpO0ooYSxcInJlZnJlc2hUb2tlblwiLG51bGwpO2EuYSYmYS5hLnVuc3Vic2NyaWJlKGEpfSl9O1xuZy52Yj1mdW5jdGlvbihhLGIpe3JldHVyblwibGlua1ZpYVBvcHVwXCI9PWEmJih0aGlzLmd8fG51bGwpPT1iJiZ0aGlzLmZ8fFwicmVhdXRoVmlhUG9wdXBcIj09YSYmKHRoaXMuZ3x8bnVsbCk9PWImJnRoaXMuZnx8XCJsaW5rVmlhUmVkaXJlY3RcIj09YSYmKHRoaXMuYWF8fG51bGwpPT1ifHxcInJlYXV0aFZpYVJlZGlyZWN0XCI9PWEmJih0aGlzLmFhfHxudWxsKT09Yj8hMDohMX07Zy5oYT1mdW5jdGlvbihhLGIsYyxkKXtcImxpbmtWaWFQb3B1cFwiIT1hJiZcInJlYXV0aFZpYVBvcHVwXCIhPWF8fGQhPSh0aGlzLmd8fG51bGwpfHwoYyYmdGhpcy52P3RoaXMudihjKTpiJiYhYyYmdGhpcy5mJiZ0aGlzLmYoYiksdGhpcy5jJiYodGhpcy5jLmNhbmNlbCgpLHRoaXMuYz1udWxsKSxkZWxldGUgdGhpcy5mLGRlbGV0ZSB0aGlzLnYpfTtcbmcueGE9ZnVuY3Rpb24oYSxiKXtyZXR1cm5cImxpbmtWaWFQb3B1cFwiPT1hJiZiPT0odGhpcy5nfHxudWxsKT9yKHRoaXMuQWIsdGhpcyk6XCJyZWF1dGhWaWFQb3B1cFwiPT1hJiZiPT0odGhpcy5nfHxudWxsKT9yKHRoaXMuQmIsdGhpcyk6XCJsaW5rVmlhUmVkaXJlY3RcIj09YSYmKHRoaXMuYWF8fG51bGwpPT1iP3IodGhpcy5BYix0aGlzKTpcInJlYXV0aFZpYVJlZGlyZWN0XCI9PWEmJih0aGlzLmFhfHxudWxsKT09Yj9yKHRoaXMuQmIsdGhpcyk6bnVsbH07Zy5yYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBHbCh0aGlzLFwibGlua1ZpYVBvcHVwXCIsYSxmdW5jdGlvbigpe3JldHVybiBFbChiLGEucHJvdmlkZXJJZCkudGhlbihmdW5jdGlvbigpe3JldHVybiBxbChiKX0pfSwhMSl9O2cuQWM9ZnVuY3Rpb24oYSl7cmV0dXJuIEdsKHRoaXMsXCJyZWF1dGhWaWFQb3B1cFwiLGEsZnVuY3Rpb24oKXtyZXR1cm4gQigpfSwhMCl9O1xuZnVuY3Rpb24gR2woYSxiLGMsZCxlKXtpZighdWUoKSlyZXR1cm4gQyhuZXcgTChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIikpO2lmKGEuaSYmIWUpcmV0dXJuIEMoYS5pKTt2YXIgZj1EZihjLnByb3ZpZGVySWQpLGg9dGUoYS51aWQrXCI6OjpcIiksbT1udWxsOyghd2UoKXx8bGUoKSkmJmEudSYmYy5pc09BdXRoUHJvdmlkZXImJihtPVlpKGEudSxhLm0sYS5vLGIsYyxudWxsLGgsZmlyZWJhc2UuU0RLX1ZFUlNJT058fG51bGwpKTt2YXIgcD1jZShtLGYmJmYuQmEsZiYmZi5BYSk7ZD1kKCkudGhlbihmdW5jdGlvbigpe0hsKGEpO2lmKCFlKXJldHVybiBhLkYoKS50aGVuKGZ1bmN0aW9uKCl7fSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIElrKGEuYSxwLGIsYyxoLCEhbSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBBKGZ1bmN0aW9uKGMsZCl7YS5oYShiLG51bGwsbmV3IEwoXCJjYW5jZWxsZWQtcG9wdXAtcmVxdWVzdFwiKSxhLmd8fG51bGwpO1xuYS5mPWM7YS52PWQ7YS5nPWg7YS5jPWEuYS5FYShhLGIscCxoKX0pfSkudGhlbihmdW5jdGlvbihhKXtwJiZiZShwKTtyZXR1cm4gYT9OZShhKTpudWxsfSkucyhmdW5jdGlvbihhKXtwJiZiZShwKTt0aHJvdyBhO30pO3JldHVybiBSKGEsZCxlKX1nLnNjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIElsKHRoaXMsXCJsaW5rVmlhUmVkaXJlY3RcIixhLGZ1bmN0aW9uKCl7cmV0dXJuIEVsKGIsYS5wcm92aWRlcklkKX0sITEpfTtnLkJjPWZ1bmN0aW9uKGEpe3JldHVybiBJbCh0aGlzLFwicmVhdXRoVmlhUmVkaXJlY3RcIixhLGZ1bmN0aW9uKCl7cmV0dXJuIEIoKX0sITApfTtcbmZ1bmN0aW9uIElsKGEsYixjLGQsZSl7aWYoIXVlKCkpcmV0dXJuIEMobmV3IEwoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTtpZihhLmkmJiFlKXJldHVybiBDKGEuaSk7dmFyIGY9bnVsbCxoPXRlKGEudWlkK1wiOjo6XCIpO2Q9ZCgpLnRoZW4oZnVuY3Rpb24oKXtIbChhKTtpZighZSlyZXR1cm4gYS5GKCkudGhlbihmdW5jdGlvbigpe30pfSkudGhlbihmdW5jdGlvbigpe2EuYWE9aDtyZXR1cm4gcWwoYSl9KS50aGVuKGZ1bmN0aW9uKGIpe2EuYmEmJihiPWEuYmEsYj1iLmIuc2V0KEpsLGEuQygpLGIuYSkpO3JldHVybiBifSkudGhlbihmdW5jdGlvbigpe3JldHVybiBhLmEuQ2EoYixjLGgpfSkucyhmdW5jdGlvbihiKXtmPWI7aWYoYS5iYSlyZXR1cm4gS2woYS5iYSk7dGhyb3cgZjt9KS50aGVuKGZ1bmN0aW9uKCl7aWYoZil0aHJvdyBmO30pO3JldHVybiBSKGEsZCxlKX1cbmZ1bmN0aW9uIEhsKGEpe2lmKCFhLmF8fCFhLkkpe2lmKGEuYSYmIWEuSSl0aHJvdyBuZXcgTChcImludGVybmFsLWVycm9yXCIpO3Rocm93IG5ldyBMKFwiYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkXCIpO319Zy5BYj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpczt0aGlzLmMmJih0aGlzLmMuY2FuY2VsKCksdGhpcy5jPW51bGwpO3ZhciBlPW51bGwsZj10aGlzLkYoKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBUZihkLmIse3JlcXVlc3RVcmk6YSxwb3N0Qm9keTpjLHNlc3Npb25JZDpiLGlkVG9rZW46ZX0pfSkudGhlbihmdW5jdGlvbihhKXtlPURsKGQsYSxcImxpbmtcIik7cmV0dXJuIEZsKGQsYSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGV9KTtyZXR1cm4gUih0aGlzLGYpfTtcbmcuQmI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXM7dGhpcy5jJiYodGhpcy5jLmNhbmNlbCgpLHRoaXMuYz1udWxsKTt2YXIgZT1udWxsLGY9QigpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gUGYoVWYoZC5iLHtyZXF1ZXN0VXJpOmEsc2Vzc2lvbklkOmIscG9zdEJvZHk6Y30pLGQudWlkKX0pLnRoZW4oZnVuY3Rpb24oYSl7ZT1EbChkLGEsXCJyZWF1dGhlbnRpY2F0ZVwiKTtCbChkLGEpO2QuaT1udWxsO3JldHVybiBkLnJlbG9hZCgpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBlfSk7cmV0dXJuIFIodGhpcyxmLCEwKX07Zy5qYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9bnVsbDtyZXR1cm4gUih0aGlzLHRoaXMuRigpLnRoZW4oZnVuY3Rpb24oYil7Yz1iO3JldHVyblwidW5kZWZpbmVkXCI9PT10eXBlb2YgYXx8WmEoYSk/e306bmYobmV3IGNmKGEpKX0pLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIGIuYi5qYihjLGEpfSkudGhlbihmdW5jdGlvbihhKXtpZihiLmVtYWlsIT1hKXJldHVybiBiLnJlbG9hZCgpfSkudGhlbihmdW5jdGlvbigpe30pKX07XG5mdW5jdGlvbiBSKGEsYixjKXt2YXIgZD1MbChhLGIsYyk7YS5HLnB1c2goZCk7ZC5pYShmdW5jdGlvbigpe0hhKGEuRyxkKX0pO3JldHVybiBkfWZ1bmN0aW9uIExsKGEsYixjKXtyZXR1cm4gYS5pJiYhYz8oYi5jYW5jZWwoKSxDKGEuaSkpOmIucyhmdW5jdGlvbihiKXshYnx8XCJhdXRoL3VzZXItZGlzYWJsZWRcIiE9Yi5jb2RlJiZcImF1dGgvdXNlci10b2tlbi1leHBpcmVkXCIhPWIuY29kZXx8KGEuaXx8YS5kaXNwYXRjaEV2ZW50KG5ldyBmbChcInVzZXJJbnZhbGlkYXRlZFwiKSksYS5pPWIpO3Rocm93IGI7fSl9Zy50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5DKCl9O1xuZy5DPWZ1bmN0aW9uKCl7dmFyIGE9e3VpZDp0aGlzLnVpZCxkaXNwbGF5TmFtZTp0aGlzLmRpc3BsYXlOYW1lLHBob3RvVVJMOnRoaXMucGhvdG9VUkwsZW1haWw6dGhpcy5lbWFpbCxlbWFpbFZlcmlmaWVkOnRoaXMuZW1haWxWZXJpZmllZCxwaG9uZU51bWJlcjp0aGlzLnBob25lTnVtYmVyLGlzQW5vbnltb3VzOnRoaXMuaXNBbm9ueW1vdXMscHJvdmlkZXJEYXRhOltdLGFwaUtleTp0aGlzLm0sYXBwTmFtZTp0aGlzLm8sYXV0aERvbWFpbjp0aGlzLnUsc3RzVG9rZW5NYW5hZ2VyOnRoaXMuaC5DKCkscmVkaXJlY3RFdmVudElkOnRoaXMuYWF8fG51bGx9O3RoaXMubWV0YWRhdGEmJmJiKGEsdGhpcy5tZXRhZGF0YS5DKCkpO3YodGhpcy5wcm92aWRlckRhdGEsZnVuY3Rpb24oYil7YS5wcm92aWRlckRhdGEucHVzaChPZShiKSl9KTtyZXR1cm4gYX07XG5mdW5jdGlvbiBNbChhKXtpZighYS5hcGlLZXkpcmV0dXJuIG51bGw7dmFyIGI9e2FwaUtleTphLmFwaUtleSxhdXRoRG9tYWluOmEuYXV0aERvbWFpbixhcHBOYW1lOmEuYXBwTmFtZX0sYz17fTtpZihhLnN0c1Rva2VuTWFuYWdlciYmYS5zdHNUb2tlbk1hbmFnZXIuYWNjZXNzVG9rZW4mJmEuc3RzVG9rZW5NYW5hZ2VyLmV4cGlyYXRpb25UaW1lKWNbTV09YS5zdHNUb2tlbk1hbmFnZXIuYWNjZXNzVG9rZW4sYy5yZWZyZXNoVG9rZW49YS5zdHNUb2tlbk1hbmFnZXIucmVmcmVzaFRva2VufHxudWxsLGMuZXhwaXJlc0luPShhLnN0c1Rva2VuTWFuYWdlci5leHBpcmF0aW9uVGltZS1vYSgpKS8xRTM7ZWxzZSByZXR1cm4gbnVsbDt2YXIgZD1uZXcgUShiLGMsYSk7YS5wcm92aWRlckRhdGEmJnYoYS5wcm92aWRlckRhdGEsZnVuY3Rpb24oYSl7YSYmdmwoZCxOZShhKSl9KTthLnJlZGlyZWN0RXZlbnRJZCYmKGQuYWE9YS5yZWRpcmVjdEV2ZW50SWQpO3JldHVybiBkfVxuZnVuY3Rpb24gTmwoYSxiLGMsZCl7dmFyIGU9bmV3IFEoYSxiKTtjJiYoZS5iYT1jKTtkJiZqbChlLGQpO3JldHVybiBlLnJlbG9hZCgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZX0pfWZ1bmN0aW9uIE9sKGEsYixjLGQpe2I9Ynx8e2FwaUtleTphLm0sYXV0aERvbWFpbjphLnUsYXBwTmFtZTphLm99O3ZhciBlPWEuaCxmPXt9O2ZbTV09ZS5iO2YucmVmcmVzaFRva2VuPWUuYTtmLmV4cGlyZXNJbj0oZS5jLW9hKCkpLzFFMztiPW5ldyBRKGIsZik7YyYmKGIuYmE9Yyk7ZCYmamwoYixkKTt5bChiLGEpO3JldHVybiBifTtmdW5jdGlvbiBQbChhKXt0aGlzLmE9YTt0aGlzLmI9TWooKX12YXIgSmw9e25hbWU6XCJyZWRpcmVjdFVzZXJcIixBOlwic2Vzc2lvblwifTtmdW5jdGlvbiBLbChhKXtyZXR1cm4gUWooYS5iLEpsLGEuYSl9ZnVuY3Rpb24gUWwoYSxiKXtyZXR1cm4gYS5iLmdldChKbCxhLmEpLnRoZW4oZnVuY3Rpb24oYSl7YSYmYiYmKGEuYXV0aERvbWFpbj1iKTtyZXR1cm4gTWwoYXx8e30pfSl9O2Z1bmN0aW9uIFNsKGEpe3RoaXMuYT1hO3RoaXMuYj1NaigpO3RoaXMuYz1udWxsO3RoaXMuZj1UbCh0aGlzKTt0aGlzLmIuYWRkTGlzdGVuZXIoVWwoXCJsb2NhbFwiKSx0aGlzLmEscih0aGlzLmcsdGhpcykpfVNsLnByb3RvdHlwZS5nPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPVVsKFwibG9jYWxcIik7VmwodGhpcyxmdW5jdGlvbigpe3JldHVybiBCKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBhLmMmJlwibG9jYWxcIiE9YS5jLkE/YS5iLmdldChiLGEuYSk6bnVsbH0pLnRoZW4oZnVuY3Rpb24oYyl7aWYoYylyZXR1cm4gV2woYSxcImxvY2FsXCIpLnRoZW4oZnVuY3Rpb24oKXthLmM9Yn0pfSl9KX07ZnVuY3Rpb24gV2woYSxiKXt2YXIgYz1bXSxkO2ZvcihkIGluIElqKUlqW2RdIT09YiYmYy5wdXNoKFFqKGEuYixVbChJaltkXSksYS5hKSk7Yy5wdXNoKFFqKGEuYixYbCxhLmEpKTtyZXR1cm4gdmIoYyl9XG5mdW5jdGlvbiBUbChhKXt2YXIgYj1VbChcImxvY2FsXCIpLGM9VWwoXCJzZXNzaW9uXCIpLGQ9VWwoXCJub25lXCIpO3JldHVybiBQaihhLmIsYixhLmEpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5iLmdldChjLGEuYSl9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlP2M6YS5iLmdldChkLGEuYSkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYz9kOmEuYi5nZXQoYixhLmEpLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIGM/YjphLmIuZ2V0KFhsLGEuYSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gYT9VbChhKTpifSl9KX0pfSkudGhlbihmdW5jdGlvbihiKXthLmM9YjtyZXR1cm4gV2woYSxiLkEpfSkucyhmdW5jdGlvbigpe2EuY3x8KGEuYz1iKX0pfXZhciBYbD17bmFtZTpcInBlcnNpc3RlbmNlXCIsQTpcInNlc3Npb25cIn07ZnVuY3Rpb24gVWwoYSl7cmV0dXJue25hbWU6XCJhdXRoVXNlclwiLEE6YX19XG5TbC5wcm90b3R5cGUubWI9ZnVuY3Rpb24oYSl7dmFyIGI9bnVsbCxjPXRoaXM7SmooYSk7cmV0dXJuIFZsKHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gYSE9Yy5jLkE/Yy5iLmdldChjLmMsYy5hKS50aGVuKGZ1bmN0aW9uKGQpe2I9ZDtyZXR1cm4gV2woYyxhKX0pLnRoZW4oZnVuY3Rpb24oKXtjLmM9VWwoYSk7aWYoYilyZXR1cm4gYy5iLnNldChjLmMsYixjLmEpfSk6QigpfSl9O2Z1bmN0aW9uIFlsKGEpe3JldHVybiBWbChhLGZ1bmN0aW9uKCl7cmV0dXJuIGEuYi5zZXQoWGwsYS5jLkEsYS5hKX0pfWZ1bmN0aW9uIFpsKGEsYil7cmV0dXJuIFZsKGEsZnVuY3Rpb24oKXtyZXR1cm4gYS5iLnNldChhLmMsYi5DKCksYS5hKX0pfWZ1bmN0aW9uICRsKGEpe3JldHVybiBWbChhLGZ1bmN0aW9uKCl7cmV0dXJuIFFqKGEuYixhLmMsYS5hKX0pfVxuZnVuY3Rpb24gYW0oYSxiKXtyZXR1cm4gVmwoYSxmdW5jdGlvbigpe3JldHVybiBhLmIuZ2V0KGEuYyxhLmEpLnRoZW4oZnVuY3Rpb24oYSl7YSYmYiYmKGEuYXV0aERvbWFpbj1iKTtyZXR1cm4gTWwoYXx8e30pfSl9KX1mdW5jdGlvbiBWbChhLGIpe2EuZj1hLmYudGhlbihiLGIpO3JldHVybiBhLmZ9O2Z1bmN0aW9uIGJtKGEpe3RoaXMubT0hMTtKKHRoaXMsXCJzZXR0aW5nc1wiLG5ldyBSayk7Sih0aGlzLFwiYXBwXCIsYSk7aWYoUyh0aGlzKS5vcHRpb25zJiZTKHRoaXMpLm9wdGlvbnMuYXBpS2V5KWE9ZmlyZWJhc2UuU0RLX1ZFUlNJT04/cmUoZmlyZWJhc2UuU0RLX1ZFUlNJT04pOm51bGwsdGhpcy5iPW5ldyBKaChTKHRoaXMpLm9wdGlvbnMmJlModGhpcykub3B0aW9ucy5hcGlLZXkseWYoemYpLGEpO2Vsc2UgdGhyb3cgbmV3IEwoXCJpbnZhbGlkLWFwaS1rZXlcIik7dGhpcy5OPVtdO3RoaXMubz1bXTt0aGlzLkk9W107dGhpcy5UYj1maXJlYmFzZS5JTlRFUk5BTC5jcmVhdGVTdWJzY3JpYmUocih0aGlzLm1jLHRoaXMpKTt0aGlzLk89dm9pZCAwO3RoaXMuVWI9ZmlyZWJhc2UuSU5URVJOQUwuY3JlYXRlU3Vic2NyaWJlKHIodGhpcy5uYyx0aGlzKSk7Y20odGhpcyxudWxsKTt0aGlzLmg9bmV3IFNsKFModGhpcykub3B0aW9ucy5hcGlLZXkrXCI6XCIrUyh0aGlzKS5uYW1lKTt0aGlzLnc9XG5uZXcgUGwoUyh0aGlzKS5vcHRpb25zLmFwaUtleStcIjpcIitTKHRoaXMpLm5hbWUpO3RoaXMuVj1UKHRoaXMsZG0odGhpcykpO3RoaXMuaT1UKHRoaXMsZW0odGhpcykpO3RoaXMuWD0hMTt0aGlzLmthPXIodGhpcy5NYyx0aGlzKTt0aGlzLkhhPXIodGhpcy5aLHRoaXMpO3RoaXMucmE9cih0aGlzLmJjLHRoaXMpO3RoaXMuc2E9cih0aGlzLmpjLHRoaXMpO3RoaXMudGE9cih0aGlzLmtjLHRoaXMpO2ZtKHRoaXMpO3RoaXMuSU5URVJOQUw9e307dGhpcy5JTlRFUk5BTFtcImRlbGV0ZVwiXT1yKHRoaXMuZGVsZXRlLHRoaXMpO3RoaXMuSU5URVJOQUwubG9nRnJhbWV3b3JrPXIodGhpcy50Yyx0aGlzKTt0aGlzLnU9MDtGLmNhbGwodGhpcyk7Z20odGhpcyk7dGhpcy5HPVtdfXQoYm0sRik7ZnVuY3Rpb24gaG0oYSl7RC5jYWxsKHRoaXMsXCJsYW5ndWFnZUNvZGVDaGFuZ2VkXCIpO3RoaXMuZz1hfXQoaG0sRCk7XG5mdW5jdGlvbiBpbShhKXtELmNhbGwodGhpcyxcImZyYW1ld29ya0NoYW5nZWRcIik7dGhpcy5jPWF9dChpbSxEKTtnPWJtLnByb3RvdHlwZTtnLm1iPWZ1bmN0aW9uKGEpe2E9dGhpcy5oLm1iKGEpO3JldHVybiBUKHRoaXMsYSl9O2cucGE9ZnVuY3Rpb24oYSl7dGhpcy5XPT09YXx8dGhpcy5tfHwodGhpcy5XPWEsUGgodGhpcy5iLHRoaXMuVyksdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBobSh0aGlzLmVhKCkpKSl9O2cuZWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5XfTtnLlNjPWZ1bmN0aW9uKCl7dmFyIGE9ay5uYXZpZ2F0b3I7dGhpcy5wYShhP2EubGFuZ3VhZ2VzJiZhLmxhbmd1YWdlc1swXXx8YS5sYW5ndWFnZXx8YS51c2VyTGFuZ3VhZ2V8fG51bGw6bnVsbCl9O2cudGM9ZnVuY3Rpb24oYSl7dGhpcy5HLnB1c2goYSk7UWgodGhpcy5iLGZpcmViYXNlLlNES19WRVJTSU9OP3JlKGZpcmViYXNlLlNES19WRVJTSU9OLHRoaXMuRyk6bnVsbCk7dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBpbSh0aGlzLkcpKX07XG5nLnlhPWZ1bmN0aW9uKCl7cmV0dXJuIEphKHRoaXMuRyl9O2Z1bmN0aW9uIGdtKGEpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwibGNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWEoKX0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMucGEoYSl9LGVudW1lcmFibGU6ITF9KTthLlc9bnVsbH1nLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnthcGlLZXk6Uyh0aGlzKS5vcHRpb25zLmFwaUtleSxhdXRoRG9tYWluOlModGhpcykub3B0aW9ucy5hdXRoRG9tYWluLGFwcE5hbWU6Uyh0aGlzKS5uYW1lLGN1cnJlbnRVc2VyOlUodGhpcykmJlUodGhpcykuQygpfX07ZnVuY3Rpb24gam0oYSl7cmV0dXJuIGEuU2J8fEMobmV3IEwoXCJhdXRoLWRvbWFpbi1jb25maWctcmVxdWlyZWRcIikpfVxuZnVuY3Rpb24gZm0oYSl7dmFyIGI9UyhhKS5vcHRpb25zLmF1dGhEb21haW4sYz1TKGEpLm9wdGlvbnMuYXBpS2V5O2ImJnVlKCkmJihhLlNiPWEuVi50aGVuKGZ1bmN0aW9uKCl7aWYoIWEubSl7YS5hPUtrKGIsYyxTKGEpLm5hbWUpO2EuYS5zdWJzY3JpYmUoYSk7VShhKSYmcmwoVShhKSk7aWYoYS5EKXtybChhLkQpO3ZhciBkPWEuRDtkLnBhKGEuZWEoKSk7a2woZCxhKTtkPWEuRDtqbChkLGEuRyk7bGwoZCxhKTthLkQ9bnVsbH1yZXR1cm4gYS5hfX0pKX1nLnZiPWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ1bmtub3duXCI6Y2FzZSBcInNpZ25JblZpYVJlZGlyZWN0XCI6cmV0dXJuITA7Y2FzZSBcInNpZ25JblZpYVBvcHVwXCI6cmV0dXJuIHRoaXMuZz09YiYmISF0aGlzLmY7ZGVmYXVsdDpyZXR1cm4hMX19O1xuZy5oYT1mdW5jdGlvbihhLGIsYyxkKXtcInNpZ25JblZpYVBvcHVwXCI9PWEmJnRoaXMuZz09ZCYmKGMmJnRoaXMudj90aGlzLnYoYyk6YiYmIWMmJnRoaXMuZiYmdGhpcy5mKGIpLHRoaXMuYyYmKHRoaXMuYy5jYW5jZWwoKSx0aGlzLmM9bnVsbCksZGVsZXRlIHRoaXMuZixkZWxldGUgdGhpcy52KX07Zy54YT1mdW5jdGlvbihhLGIpe3JldHVyblwic2lnbkluVmlhUmVkaXJlY3RcIj09YXx8XCJzaWduSW5WaWFQb3B1cFwiPT1hJiZ0aGlzLmc9PWImJnRoaXMuZj9yKHRoaXMuYWMsdGhpcyk6bnVsbH07XG5nLmFjPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzO2E9e3JlcXVlc3RVcmk6YSxwb3N0Qm9keTpjLHNlc3Npb25JZDpifTt0aGlzLmMmJih0aGlzLmMuY2FuY2VsKCksdGhpcy5jPW51bGwpO3ZhciBlPW51bGwsZj1udWxsLGg9UmYoZC5iLGEpLnRoZW4oZnVuY3Rpb24oYSl7ZT11ZyhhKTtmPUVmKGEpO3JldHVybiBhfSk7YT1kLlYudGhlbihmdW5jdGlvbigpe3JldHVybiBofSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4ga20oZCxhKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gTmUoe3VzZXI6VShkKSxjcmVkZW50aWFsOmUsYWRkaXRpb25hbFVzZXJJbmZvOmYsb3BlcmF0aW9uVHlwZTpcInNpZ25JblwifSl9KTtyZXR1cm4gVCh0aGlzLGEpfTtcbmcuS2M9ZnVuY3Rpb24oYSl7aWYoIXVlKCkpcmV0dXJuIEMobmV3IEwoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTt2YXIgYj10aGlzLGM9RGYoYS5wcm92aWRlcklkKSxkPXRlKCksZT1udWxsOyghd2UoKXx8bGUoKSkmJlModGhpcykub3B0aW9ucy5hdXRoRG9tYWluJiZhLmlzT0F1dGhQcm92aWRlciYmKGU9WWkoUyh0aGlzKS5vcHRpb25zLmF1dGhEb21haW4sUyh0aGlzKS5vcHRpb25zLmFwaUtleSxTKHRoaXMpLm5hbWUsXCJzaWduSW5WaWFQb3B1cFwiLGEsbnVsbCxkLGZpcmViYXNlLlNES19WRVJTSU9OfHxudWxsKSk7dmFyIGY9Y2UoZSxjJiZjLkJhLGMmJmMuQWEpO2M9am0odGhpcykudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gSWsoYixmLFwic2lnbkluVmlhUG9wdXBcIixhLGQsISFlKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEEoZnVuY3Rpb24oYSxjKXtiLmhhKFwic2lnbkluVmlhUG9wdXBcIixudWxsLG5ldyBMKFwiY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3RcIiksXG5iLmcpO2IuZj1hO2Iudj1jO2IuZz1kO2IuYz1iLmEuRWEoYixcInNpZ25JblZpYVBvcHVwXCIsZixkKX0pfSkudGhlbihmdW5jdGlvbihhKXtmJiZiZShmKTtyZXR1cm4gYT9OZShhKTpudWxsfSkucyhmdW5jdGlvbihhKXtmJiZiZShmKTt0aHJvdyBhO30pO3JldHVybiBUKHRoaXMsYyl9O2cuTGM9ZnVuY3Rpb24oYSl7aWYoIXVlKCkpcmV0dXJuIEMobmV3IEwoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTt2YXIgYj10aGlzLGM9am0odGhpcykudGhlbihmdW5jdGlvbigpe3JldHVybiBZbChiLmgpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBiLmEuQ2EoXCJzaWduSW5WaWFSZWRpcmVjdFwiLGEpfSk7cmV0dXJuIFQodGhpcyxjKX07XG5nLmZhPWZ1bmN0aW9uKCl7aWYoIXVlKCkpcmV0dXJuIEMobmV3IEwoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTt2YXIgYT10aGlzLGI9am0odGhpcykudGhlbihmdW5jdGlvbigpe3JldHVybiBhLmEuZmEoKX0pLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIGE/TmUoYSk6bnVsbH0pO3JldHVybiBUKHRoaXMsYil9O1xuZy5RYz1mdW5jdGlvbihhKXtpZighYSlyZXR1cm4gQyhuZXcgTChcIm51bGwtdXNlclwiKSk7dmFyIGI9dGhpcyxjPXt9O2MuYXBpS2V5PVModGhpcykub3B0aW9ucy5hcGlLZXk7Yy5hdXRoRG9tYWluPVModGhpcykub3B0aW9ucy5hdXRoRG9tYWluO2MuYXBwTmFtZT1TKHRoaXMpLm5hbWU7dmFyIGQ9T2woYSxjLGIudyxiLnlhKCkpO3JldHVybiBUKHRoaXMsdGhpcy5pLnRoZW4oZnVuY3Rpb24oKXtpZihTKGIpLm9wdGlvbnMuYXBpS2V5IT1hLm0pcmV0dXJuIGQucmVsb2FkKCl9KS50aGVuKGZ1bmN0aW9uKCl7aWYoVShiKSYmYS51aWQ9PVUoYikudWlkKXJldHVybiB5bChVKGIpLGEpLGIuWihhKTtjbShiLGQpO3JsKGQpO3JldHVybiBiLlooZCl9KS50aGVuKGZ1bmN0aW9uKCl7bG0oYil9KSl9O1xuZnVuY3Rpb24ga20oYSxiKXt2YXIgYz17fTtjLmFwaUtleT1TKGEpLm9wdGlvbnMuYXBpS2V5O2MuYXV0aERvbWFpbj1TKGEpLm9wdGlvbnMuYXV0aERvbWFpbjtjLmFwcE5hbWU9UyhhKS5uYW1lO3JldHVybiBhLlYudGhlbihmdW5jdGlvbigpe3JldHVybiBObChjLGIsYS53LGEueWEoKSl9KS50aGVuKGZ1bmN0aW9uKGIpe2lmKFUoYSkmJmIudWlkPT1VKGEpLnVpZClyZXR1cm4geWwoVShhKSxiKSxhLlooYik7Y20oYSxiKTtybChiKTtyZXR1cm4gYS5aKGIpfSkudGhlbihmdW5jdGlvbigpe2xtKGEpfSl9XG5mdW5jdGlvbiBjbShhLGIpe1UoYSkmJihwbChVKGEpLGEuSGEpLEUoVShhKSxcInRva2VuQ2hhbmdlZFwiLGEucmEpLEUoVShhKSxcInVzZXJEZWxldGVkXCIsYS5zYSksRShVKGEpLFwidXNlckludmFsaWRhdGVkXCIsYS50YSksb2woVShhKSkpO2ImJihiLk4ucHVzaChhLkhhKSxyYyhiLFwidG9rZW5DaGFuZ2VkXCIsYS5yYSkscmMoYixcInVzZXJEZWxldGVkXCIsYS5zYSkscmMoYixcInVzZXJJbnZhbGlkYXRlZFwiLGEudGEpLDA8YS51JiZubChiKSk7SihhLFwiY3VycmVudFVzZXJcIixiKTtiJiYoYi5wYShhLmVhKCkpLGtsKGIsYSksamwoYixhLkcpLGxsKGIsYSkpfWcubmI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI9dGhpcy5pLnRoZW4oZnVuY3Rpb24oKXtpZighVShhKSlyZXR1cm4gQigpO2NtKGEsbnVsbCk7cmV0dXJuICRsKGEuaCkudGhlbihmdW5jdGlvbigpe2xtKGEpfSl9KTtyZXR1cm4gVCh0aGlzLGIpfTtcbmZ1bmN0aW9uIG1tKGEpe3ZhciBiPVFsKGEudyxTKGEpLm9wdGlvbnMuYXV0aERvbWFpbikudGhlbihmdW5jdGlvbihiKXtpZihhLkQ9YiliLmJhPWEudztyZXR1cm4gS2woYS53KX0pO3JldHVybiBUKGEsYil9ZnVuY3Rpb24gZG0oYSl7dmFyIGI9UyhhKS5vcHRpb25zLmF1dGhEb21haW4sYz1tbShhKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGFtKGEuaCxiKX0pLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGI/KGIuYmE9YS53LGEuRCYmKGEuRC5hYXx8bnVsbCk9PShiLmFhfHxudWxsKT9iOmIucmVsb2FkKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBabChhLmgsYikudGhlbihmdW5jdGlvbigpe3JldHVybiBifSl9KS5zKGZ1bmN0aW9uKGMpe3JldHVyblwiYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI9PWMuY29kZT9iOiRsKGEuaCl9KSk6bnVsbH0pLnRoZW4oZnVuY3Rpb24oYil7Y20oYSxifHxudWxsKX0pO3JldHVybiBUKGEsYyl9XG5mdW5jdGlvbiBlbShhKXtyZXR1cm4gYS5WLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5mYSgpfSkucyhmdW5jdGlvbigpe30pLnRoZW4oZnVuY3Rpb24oKXtpZighYS5tKXJldHVybiBhLmthKCl9KS5zKGZ1bmN0aW9uKCl7fSkudGhlbihmdW5jdGlvbigpe2lmKCFhLm0pe2EuWD0hMDt2YXIgYj1hLmg7Yi5iLmFkZExpc3RlbmVyKFVsKFwibG9jYWxcIiksYi5hLGEua2EpfX0pfVxuZy5NYz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIGFtKHRoaXMuaCxTKHRoaXMpLm9wdGlvbnMuYXV0aERvbWFpbikudGhlbihmdW5jdGlvbihiKXtpZighYS5tKXt2YXIgYztpZihjPVUoYSkmJmIpe2M9VShhKS51aWQ7dmFyIGQ9Yi51aWQ7Yz12b2lkIDA9PT1jfHxudWxsPT09Y3x8XCJcIj09PWN8fHZvaWQgMD09PWR8fG51bGw9PT1kfHxcIlwiPT09ZD8hMTpjPT1kfWlmKGMpcmV0dXJuIHlsKFUoYSksYiksVShhKS5GKCk7aWYoVShhKXx8YiljbShhLGIpLGImJihybChiKSxiLmJhPWEudyksYS5hJiZhLmEuc3Vic2NyaWJlKGEpLGxtKGEpfX0pfTtnLlo9ZnVuY3Rpb24oYSl7cmV0dXJuIFpsKHRoaXMuaCxhKX07Zy5iYz1mdW5jdGlvbigpe2xtKHRoaXMpO3RoaXMuWihVKHRoaXMpKX07Zy5qYz1mdW5jdGlvbigpe3RoaXMubmIoKX07Zy5rYz1mdW5jdGlvbigpe3RoaXMubmIoKX07XG5mdW5jdGlvbiBubShhLGIpe3ZhciBjPW51bGwsZD1udWxsO3JldHVybiBUKGEsYi50aGVuKGZ1bmN0aW9uKGIpe2M9dWcoYik7ZD1FZihiKTtyZXR1cm4ga20oYSxiKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gTmUoe3VzZXI6VShhKSxjcmVkZW50aWFsOmMsYWRkaXRpb25hbFVzZXJJbmZvOmQsb3BlcmF0aW9uVHlwZTpcInNpZ25JblwifSl9KSl9Zy5tYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3RoaXMuYWRkQXV0aFRva2VuTGlzdGVuZXIoZnVuY3Rpb24oKXthLm5leHQoVShiKSl9KX07Zy5uYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO29tKHRoaXMsZnVuY3Rpb24oKXthLm5leHQoVShiKSl9KX07Zy52Yz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpczt0aGlzLlgmJmZpcmViYXNlLlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtuKGEpP2EoVShkKSk6bihhLm5leHQpJiZhLm5leHQoVShkKSl9KTtyZXR1cm4gdGhpcy5UYihhLGIsYyl9O1xuZy51Yz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpczt0aGlzLlgmJmZpcmViYXNlLlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtkLk89ZC5nZXRVaWQoKTtuKGEpP2EoVShkKSk6bihhLm5leHQpJiZhLm5leHQoVShkKSl9KTtyZXR1cm4gdGhpcy5VYihhLGIsYyl9O2cuY2M9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPXRoaXMuaS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFUoYik/VShiKS5GKGEpLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJue2FjY2Vzc1Rva2VuOmF9fSk6bnVsbH0pO3JldHVybiBUKHRoaXMsYyl9O2cuTmI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gdGhpcy5pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbm0oYixQKGIuYixGaSx7dG9rZW46YX0pKX0pLnRoZW4oZnVuY3Rpb24oYSl7dmFyIGM9YS51c2VyO3hsKGMsXCJpc0Fub255bW91c1wiLCExKTtiLlooYyk7cmV0dXJuIGF9KX07XG5nLkVjPWZ1bmN0aW9uKGEpe0tlKFwiZmlyZWJhc2UuYXV0aC5BdXRoLnByb3RvdHlwZS5zaWduSW5BbmRSZXRyaWV2ZURhdGFXaXRoQ3VzdG9tVG9rZW4gaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBmaXJlYmFzZS5hdXRoLkF1dGgucHJvdG90eXBlLnNpZ25JbldpdGhDdXN0b21Ub2tlbiBpbnN0ZWFkLlwiKTtyZXR1cm4gdGhpcy5OYihhKX07Zy5GYz1mdW5jdGlvbihhLGIpe0tlKFwiZmlyZWJhc2UuYXV0aC5BdXRoLnByb3RvdHlwZS5zaWduSW5BbmRSZXRyaWV2ZURhdGFXaXRoRW1haWxBbmRQYXNzd29yZCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpcmViYXNlLmF1dGguQXV0aC5wcm90b3R5cGUuc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMuT2IoYSxiKX07Zy5PYj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIHRoaXMuaS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG5tKGMsUChjLmIsaWcse2VtYWlsOmEscGFzc3dvcmQ6Yn0pKX0pfTtcbmcueGI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiB0aGlzLmkudGhlbihmdW5jdGlvbigpe3JldHVybiBubShjLFAoYy5iLEJpLHtlbWFpbDphLHBhc3N3b3JkOmJ9KSl9KX07Zy5XYj1mdW5jdGlvbihhLGIpe0tlKFwiZmlyZWJhc2UuYXV0aC5BdXRoLnByb3RvdHlwZS5jcmVhdGVVc2VyQW5kUmV0cmlldmVEYXRhV2l0aEVtYWlsQW5kUGFzc3dvcmQgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBmaXJlYmFzZS5hdXRoLkF1dGgucHJvdG90eXBlLmNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCBpbnN0ZWFkLlwiKTtyZXR1cm4gdGhpcy54YihhLGIpfTtnLkhjPWZ1bmN0aW9uKGEpe0tlKFwiZmlyZWJhc2UuYXV0aC5BdXRoLnByb3RvdHlwZS5zaWduSW5XaXRoQ3JlZGVudGlhbCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpcmViYXNlLmF1dGguQXV0aC5wcm90b3R5cGUuc2lnbkluQW5kUmV0cmlldmVEYXRhV2l0aENyZWRlbnRpYWwgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMuUGEoYSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gYS51c2VyfSl9O1xuZy5QYT1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiB0aGlzLmkudGhlbihmdW5jdGlvbigpe3JldHVybiBubShiLGEubGEoYi5iKSl9KX07Zy5RYT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIHRoaXMuaS50aGVuKGZ1bmN0aW9uKCl7dmFyIGI9VShhKTtpZihiJiZiLmlzQW5vbnltb3VzKXt2YXIgYz1OZSh7cHJvdmlkZXJJZDpudWxsLGlzTmV3VXNlcjohMX0pO3JldHVybiBOZSh7dXNlcjpiLGNyZWRlbnRpYWw6bnVsbCxhZGRpdGlvbmFsVXNlckluZm86YyxvcGVyYXRpb25UeXBlOlwic2lnbkluXCJ9KX1yZXR1cm4gbm0oYSxhLmIuUWEoKSkudGhlbihmdW5jdGlvbihiKXt2YXIgYz1iLnVzZXI7eGwoYyxcImlzQW5vbnltb3VzXCIsITApO2EuWihjKTtyZXR1cm4gYn0pfSl9O1xuZy5HYz1mdW5jdGlvbigpe0tlKFwiZmlyZWJhc2UuYXV0aC5BdXRoLnByb3RvdHlwZS5zaWduSW5Bbm9ueW1vdXNseUFuZFJldHJpZXZlRGF0YSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpcmViYXNlLmF1dGguQXV0aC5wcm90b3R5cGUuc2lnbkluQW5vbnltb3VzbHkgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMuUWEoKX07ZnVuY3Rpb24gUyhhKXtyZXR1cm4gYS5hcHB9ZnVuY3Rpb24gVShhKXtyZXR1cm4gYS5jdXJyZW50VXNlcn1nLmdldFVpZD1mdW5jdGlvbigpe3JldHVybiBVKHRoaXMpJiZVKHRoaXMpLnVpZHx8bnVsbH07ZnVuY3Rpb24gcG0oYSl7cmV0dXJuIFUoYSkmJlUoYSkuX2xhdHx8bnVsbH1cbmZ1bmN0aW9uIGxtKGEpe2lmKGEuWCl7Zm9yKHZhciBiPTA7YjxhLm8ubGVuZ3RoO2IrKylpZihhLm9bYl0pYS5vW2JdKHBtKGEpKTtpZihhLk8hPT1hLmdldFVpZCgpJiZhLkkubGVuZ3RoKWZvcihhLk89YS5nZXRVaWQoKSxiPTA7YjxhLkkubGVuZ3RoO2IrKylpZihhLklbYl0pYS5JW2JdKHBtKGEpKX19Zy5WYj1mdW5jdGlvbihhKXt0aGlzLmFkZEF1dGhUb2tlbkxpc3RlbmVyKGEpO3RoaXMudSsrOzA8dGhpcy51JiZVKHRoaXMpJiZubChVKHRoaXMpKX07Zy5DYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3YodGhpcy5vLGZ1bmN0aW9uKGMpe2M9PWEmJmIudS0tfSk7MD50aGlzLnUmJih0aGlzLnU9MCk7MD09dGhpcy51JiZVKHRoaXMpJiZvbChVKHRoaXMpKTt0aGlzLnJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyKGEpfTtcbmcuYWRkQXV0aFRva2VuTGlzdGVuZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpczt0aGlzLm8ucHVzaChhKTtUKHRoaXMsdGhpcy5pLnRoZW4oZnVuY3Rpb24oKXtiLm18fEdhKGIubyxhKSYmYShwbShiKSl9KSl9O2cucmVtb3ZlQXV0aFRva2VuTGlzdGVuZXI9ZnVuY3Rpb24oYSl7dyh0aGlzLm8sZnVuY3Rpb24oYil7cmV0dXJuIGI9PWF9KX07ZnVuY3Rpb24gb20oYSxiKXthLkkucHVzaChiKTtUKGEsYS5pLnRoZW4oZnVuY3Rpb24oKXshYS5tJiZHYShhLkksYikmJmEuTyE9PWEuZ2V0VWlkKCkmJihhLk89YS5nZXRVaWQoKSxiKHBtKGEpKSl9KSl9XG5nLmRlbGV0ZT1mdW5jdGlvbigpe3RoaXMubT0hMDtmb3IodmFyIGE9MDthPHRoaXMuTi5sZW5ndGg7YSsrKXRoaXMuTlthXS5jYW5jZWwoXCJhcHAtZGVsZXRlZFwiKTt0aGlzLk49W107dGhpcy5oJiYoYT10aGlzLmgsYS5iLnJlbW92ZUxpc3RlbmVyKFVsKFwibG9jYWxcIiksYS5hLHRoaXMua2EpKTt0aGlzLmEmJih0aGlzLmEudW5zdWJzY3JpYmUodGhpcyksdGhpcy5hLllhKCkpO3JldHVybiBmaXJlYmFzZS5Qcm9taXNlLnJlc29sdmUoKX07ZnVuY3Rpb24gVChhLGIpe2EuTi5wdXNoKGIpO2IuaWEoZnVuY3Rpb24oKXtIYShhLk4sYil9KTtyZXR1cm4gYn1cbmcuWmI9ZnVuY3Rpb24oYSl7S2UoXCJmaXJlYmFzZS5hdXRoLkF1dGgucHJvdG90eXBlLmZldGNoUHJvdmlkZXJzRm9yRW1haWwgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBmaXJlYmFzZS5hdXRoLkF1dGgucHJvdG90eXBlLmZldGNoU2lnbkluTWV0aG9kc0ZvckVtYWlsIGluc3RlYWQuXCIpO3JldHVybiBUKHRoaXMsJGgodGhpcy5iLGEpKX07Zy4kYj1mdW5jdGlvbihhKXtyZXR1cm4gVCh0aGlzLGJpKHRoaXMuYixhKSl9O2cub2M9ZnVuY3Rpb24oYSl7cmV0dXJuISFtZyhhKX07Zy5sYj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIFQodGhpcyxCKCkudGhlbihmdW5jdGlvbigpe3ZhciBhPW5ldyBjZihiKTtpZighYS5jKXRocm93IG5ldyBMKFwiYXJndW1lbnQtZXJyb3JcIixsZitcIiBtdXN0IGJlIHRydWUgd2hlbiBzZW5kaW5nIHNpZ24gaW4gbGluayB0byBlbWFpbFwiKTtyZXR1cm4gbmYoYSl9KS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBjLmIubGIoYSxiKX0pLnRoZW4oZnVuY3Rpb24oKXt9KSl9O1xuZy5UYz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5KYShhKS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBhLmRhdGEuZW1haWx9KX07Zy5aYT1mdW5jdGlvbihhLGIpe3JldHVybiBUKHRoaXMsdGhpcy5iLlphKGEsYikudGhlbihmdW5jdGlvbigpe30pKX07Zy5KYT1mdW5jdGlvbihhKXtyZXR1cm4gVCh0aGlzLHRoaXMuYi5KYShhKS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBuZXcgUmUoYSl9KSl9O2cuV2E9ZnVuY3Rpb24oYSl7cmV0dXJuIFQodGhpcyx0aGlzLmIuV2EoYSkudGhlbihmdW5jdGlvbigpe30pKX07Zy5rYj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIFQodGhpcyxCKCkudGhlbihmdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8WmEoYik/e306bmYobmV3IGNmKGIpKX0pLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGMuYi5rYihhLGIpfSkudGhlbihmdW5jdGlvbigpe30pKX07XG5nLkpjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFQodGhpcyxUayh0aGlzLGEsYixyKHRoaXMuUGEsdGhpcykpKX07Zy5JYz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIFQodGhpcyxCKCkudGhlbihmdW5jdGlvbigpe3ZhciBkPWxnKGEsYnx8VmQoKSk7cmV0dXJuIGMuUGEoZCl9KSl9O2Z1bmN0aW9uIHFtKCl7fXFtLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt9O3FtLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe307cW0ucHJvdG90eXBlLmdldFJlc3BvbnNlPWZ1bmN0aW9uKCl7fTtxbS5wcm90b3R5cGUuZXhlY3V0ZT1mdW5jdGlvbigpe307ZnVuY3Rpb24gcm0oKXt0aGlzLmE9e307dGhpcy5iPTFFMTJ9dmFyIHNtPW51bGw7cm0ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3RoaXMuYVt0aGlzLmIudG9TdHJpbmcoKV09bmV3IHRtKGEsYik7cmV0dXJuIHRoaXMuYisrfTtybS5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oYSl7dmFyIGI9dW0odGhpcyxhKTthPXZtKGEpO2ImJmEmJihiLmRlbGV0ZSgpLGRlbGV0ZSB0aGlzLmFbYV0pfTtybS5wcm90b3R5cGUuZ2V0UmVzcG9uc2U9ZnVuY3Rpb24oYSl7cmV0dXJuKGE9dW0odGhpcyxhKSk/YS5nZXRSZXNwb25zZSgpOm51bGx9O3JtLnByb3RvdHlwZS5leGVjdXRlPWZ1bmN0aW9uKGEpeyhhPXVtKHRoaXMsYSkpJiZhLmV4ZWN1dGUoKX07ZnVuY3Rpb24gdW0oYSxiKXtyZXR1cm4oYj12bShiKSk/YS5hW2JdfHxudWxsOm51bGx9ZnVuY3Rpb24gdm0oYSl7cmV0dXJuKGE9XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhPzFFMTI6YSk/YS50b1N0cmluZygpOm51bGx9XG5mdW5jdGlvbiB0bShhLGIpe3RoaXMuZz0hMTt0aGlzLmM9Yjt0aGlzLmE9dGhpcy5iPW51bGw7dGhpcy5oPVwiaW52aXNpYmxlXCIhPT10aGlzLmMuc2l6ZTt0aGlzLmY9SWQoYSk7dmFyIGM9dGhpczt0aGlzLmk9ZnVuY3Rpb24oKXtjLmV4ZWN1dGUoKX07dGhpcy5oP3RoaXMuZXhlY3V0ZSgpOnJjKHRoaXMuZixcImNsaWNrXCIsdGhpcy5pKX10bS5wcm90b3R5cGUuZ2V0UmVzcG9uc2U9ZnVuY3Rpb24oKXt3bSh0aGlzKTtyZXR1cm4gdGhpcy5ifTtcbnRtLnByb3RvdHlwZS5leGVjdXRlPWZ1bmN0aW9uKCl7d20odGhpcyk7dmFyIGE9dGhpczt0aGlzLmF8fCh0aGlzLmE9c2V0VGltZW91dChmdW5jdGlvbigpe2EuYj1wZSgpO3ZhciBiPWEuYy5jYWxsYmFjayxjPWEuY1tcImV4cGlyZWQtY2FsbGJhY2tcIl07aWYoYil0cnl7YihhLmIpfWNhdGNoKGQpe31hLmE9c2V0VGltZW91dChmdW5jdGlvbigpe2EuYT1udWxsO2EuYj1udWxsO2lmKGMpdHJ5e2MoKX1jYXRjaChkKXt9YS5oJiZhLmV4ZWN1dGUoKX0sNkU0KX0sNTAwKSl9O3RtLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24oKXt3bSh0aGlzKTt0aGlzLmc9ITA7Y2xlYXJUaW1lb3V0KHRoaXMuYSk7dGhpcy5hPW51bGw7RSh0aGlzLmYsXCJjbGlja1wiLHRoaXMuaSl9O2Z1bmN0aW9uIHdtKGEpe2lmKGEuZyl0aHJvdyBFcnJvcihcInJlQ0FQVENIQSBtb2NrIHdhcyBhbHJlYWR5IGRlbGV0ZWQhXCIpO307ZnVuY3Rpb24geG0oKXt9eG0ucHJvdG90eXBlLmc9ZnVuY3Rpb24oKXtzbXx8KHNtPW5ldyBybSk7cmV0dXJuIEIoc20pfTt4bS5wcm90b3R5cGUuYz1mdW5jdGlvbigpe307dmFyIHltPW51bGw7ZnVuY3Rpb24gem0oKXt0aGlzLmI9ay5ncmVjYXB0Y2hhP0luZmluaXR5OjA7dGhpcy5mPW51bGw7dGhpcy5hPVwiX19yY2JcIitNYXRoLmZsb29yKDFFNipNYXRoLnJhbmRvbSgpKS50b1N0cmluZygpfXZhciBBbT1xZChcImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS5qcz9vbmxvYWQ9JXtvbmxvYWR9JnJlbmRlcj1leHBsaWNpdCZobD0le2hsfVwiKSxCbT1uZXcgQ2UoM0U0LDZFNCk7XG56bS5wcm90b3R5cGUuZz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBuZXcgQShmdW5jdGlvbihjLGQpe3ZhciBlPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtkKG5ldyBMKFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiKSl9LEJtLmdldCgpKTtpZighay5ncmVjYXB0Y2hhfHxhIT09Yi5mJiYhYi5iKXtrW2IuYV09ZnVuY3Rpb24oKXtpZihrLmdyZWNhcHRjaGEpe2IuZj1hO3ZhciBmPWsuZ3JlY2FwdGNoYS5yZW5kZXI7ay5ncmVjYXB0Y2hhLnJlbmRlcj1mdW5jdGlvbihhLGMpe2E9ZihhLGMpO2IuYisrO3JldHVybiBhfTtjbGVhclRpbWVvdXQoZSk7YyhrLmdyZWNhcHRjaGEpfWVsc2UgY2xlYXJUaW1lb3V0KGUpLGQobmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiKSk7ZGVsZXRlIGtbYi5hXX07dmFyIGY9dWQoQW0se29ubG9hZDpiLmEsaGw6YXx8XCJcIn0pO0IoQmgoZikpLnMoZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQoZSk7ZChuZXcgTChcImludGVybmFsLWVycm9yXCIsXCJVbmFibGUgdG8gbG9hZCBleHRlcm5hbCByZUNBUFRDSEEgZGVwZW5kZW5jaWVzIVwiKSl9KX1lbHNlIGNsZWFyVGltZW91dChlKSxcbmMoay5ncmVjYXB0Y2hhKX0pfTt6bS5wcm90b3R5cGUuYz1mdW5jdGlvbigpe3RoaXMuYi0tfTt2YXIgQ209bnVsbDtmdW5jdGlvbiBEbShhLGIsYyxkLGUsZixoKXtKKHRoaXMsXCJ0eXBlXCIsXCJyZWNhcHRjaGFcIik7dGhpcy5jPXRoaXMuZj1udWxsO3RoaXMuRD0hMTt0aGlzLm09Yjt0aGlzLmc9bnVsbDtoPyh5bXx8KHltPW5ldyB4bSksaD15bSk6KENtfHwoQ209bmV3IHptKSxoPUNtKTt0aGlzLm89aDt0aGlzLmE9Y3x8e3RoZW1lOlwibGlnaHRcIix0eXBlOlwiaW1hZ2VcIn07dGhpcy5oPVtdO2lmKHRoaXMuYVtFbV0pdGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLFwic2l0ZWtleSBzaG91bGQgbm90IGJlIHByb3ZpZGVkIGZvciByZUNBUFRDSEEgYXMgb25lIGlzIGF1dG9tYXRpY2FsbHkgcHJvdmlzaW9uZWQgZm9yIHRoZSBjdXJyZW50IHByb2plY3QuXCIpO3RoaXMuaT1cImludmlzaWJsZVwiPT09dGhpcy5hW0ZtXTtpZighay5kb2N1bWVudCl0aHJvdyBuZXcgTChcIm9wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnRcIixcIlJlY2FwdGNoYVZlcmlmaWVyIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgYnJvd3NlciBIVFRQL0hUVFBTIGVudmlyb25tZW50IHdpdGggRE9NIHN1cHBvcnQuXCIpO1xuaWYoIUlkKGIpfHwhdGhpcy5pJiZJZChiKS5oYXNDaGlsZE5vZGVzKCkpdGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLFwicmVDQVBUQ0hBIGNvbnRhaW5lciBpcyBlaXRoZXIgbm90IGZvdW5kIG9yIGFscmVhZHkgY29udGFpbnMgaW5uZXIgZWxlbWVudHMhXCIpO3RoaXMudT1uZXcgSmgoYSxmfHxudWxsLGV8fG51bGwpO3RoaXMudj1kfHxmdW5jdGlvbigpe3JldHVybiBudWxsfTt2YXIgbT10aGlzO3RoaXMubD1bXTt2YXIgcD10aGlzLmFbR21dO3RoaXMuYVtHbV09ZnVuY3Rpb24oYSl7SG0obSxhKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgcClwKGEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBwKXt2YXIgYj1JKHAsayk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGImJmIoYSl9fTt2YXIgeD10aGlzLmFbSW1dO3RoaXMuYVtJbV09ZnVuY3Rpb24oKXtIbShtLG51bGwpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4KXgoKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgeCl7dmFyIGE9XG5JKHgsayk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJmEoKX19fXZhciBHbT1cImNhbGxiYWNrXCIsSW09XCJleHBpcmVkLWNhbGxiYWNrXCIsRW09XCJzaXRla2V5XCIsRm09XCJzaXplXCI7ZnVuY3Rpb24gSG0oYSxiKXtmb3IodmFyIGM9MDtjPGEubC5sZW5ndGg7YysrKXRyeXthLmxbY10oYil9Y2F0Y2goZCl7fX1mdW5jdGlvbiBKbShhLGIpe3coYS5sLGZ1bmN0aW9uKGEpe3JldHVybiBhPT1ifSl9ZnVuY3Rpb24gS20oYSxiKXthLmgucHVzaChiKTtiLmlhKGZ1bmN0aW9uKCl7SGEoYS5oLGIpfSk7cmV0dXJuIGJ9Zz1EbS5wcm90b3R5cGU7XG5nLnphPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gdGhpcy5mP3RoaXMuZjp0aGlzLmY9S20odGhpcyxCKCkudGhlbihmdW5jdGlvbigpe2lmKHZlKCkmJiFtZSgpKXJldHVybiBoZSgpO3Rocm93IG5ldyBMKFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiLFwiUmVjYXB0Y2hhVmVyaWZpZXIgaXMgb25seSBzdXBwb3J0ZWQgaW4gYSBicm93c2VyIEhUVFAvSFRUUFMgZW52aXJvbm1lbnQuXCIpO30pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5vLmcoYS52KCkpfSkudGhlbihmdW5jdGlvbihiKXthLmc9YjtyZXR1cm4gUChhLnUsRWkse30pfSkudGhlbihmdW5jdGlvbihiKXthLmFbRW1dPWIucmVjYXB0Y2hhU2l0ZUtleX0pLnMoZnVuY3Rpb24oYil7YS5mPW51bGw7dGhyb3cgYjt9KSl9O1xuZy5yZW5kZXI9ZnVuY3Rpb24oKXtMbSh0aGlzKTt2YXIgYT10aGlzO3JldHVybiBLbSh0aGlzLHRoaXMuemEoKS50aGVuKGZ1bmN0aW9uKCl7aWYobnVsbD09PWEuYyl7dmFyIGI9YS5tO2lmKCFhLmkpe3ZhciBjPUlkKGIpO2I9TGQoXCJESVZcIik7Yy5hcHBlbmRDaGlsZChiKX1hLmM9YS5nLnJlbmRlcihiLGEuYSl9cmV0dXJuIGEuY30pKX07Zy52ZXJpZnk9ZnVuY3Rpb24oKXtMbSh0aGlzKTt2YXIgYT10aGlzO3JldHVybiBLbSh0aGlzLHRoaXMucmVuZGVyKCkudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gbmV3IEEoZnVuY3Rpb24oYyl7dmFyIGQ9YS5nLmdldFJlc3BvbnNlKGIpO2lmKGQpYyhkKTtlbHNle3ZhciBlPWZ1bmN0aW9uKGIpe2ImJihKbShhLGUpLGMoYikpfTthLmwucHVzaChlKTthLmkmJmEuZy5leGVjdXRlKGEuYyl9fSl9KSl9O2cucmVzZXQ9ZnVuY3Rpb24oKXtMbSh0aGlzKTtudWxsIT09dGhpcy5jJiZ0aGlzLmcucmVzZXQodGhpcy5jKX07XG5mdW5jdGlvbiBMbShhKXtpZihhLkQpdGhyb3cgbmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiLFwiUmVjYXB0Y2hhVmVyaWZpZXIgaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkLlwiKTt9Zy5jbGVhcj1mdW5jdGlvbigpe0xtKHRoaXMpO3RoaXMuRD0hMDt0aGlzLm8uYygpO2Zvcih2YXIgYT0wO2E8dGhpcy5oLmxlbmd0aDthKyspdGhpcy5oW2FdLmNhbmNlbChcIlJlY2FwdGNoYVZlcmlmaWVyIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZC5cIik7aWYoIXRoaXMuaSl7YT1JZCh0aGlzLm0pO2Zvcih2YXIgYjtiPWEuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChiKX19O1xuZnVuY3Rpb24gTW0oYSxiLGMpe3ZhciBkPSExO3RyeXt0aGlzLmI9Y3x8ZmlyZWJhc2UuYXBwKCl9Y2F0Y2goaCl7dGhyb3cgbmV3IEwoXCJhcmd1bWVudC1lcnJvclwiLFwiTm8gZmlyZWJhc2UuYXBwLkFwcCBpbnN0YW5jZSBpcyBjdXJyZW50bHkgaW5pdGlhbGl6ZWQuXCIpO31pZih0aGlzLmIub3B0aW9ucyYmdGhpcy5iLm9wdGlvbnMuYXBpS2V5KWM9dGhpcy5iLm9wdGlvbnMuYXBpS2V5O2Vsc2UgdGhyb3cgbmV3IEwoXCJpbnZhbGlkLWFwaS1rZXlcIik7dmFyIGU9dGhpcyxmPW51bGw7dHJ5e2Y9dGhpcy5iLmF1dGgoKS55YSgpfWNhdGNoKGgpe310cnl7ZD10aGlzLmIuYXV0aCgpLnNldHRpbmdzLmFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZ31jYXRjaChoKXt9Zj1maXJlYmFzZS5TREtfVkVSU0lPTj9yZShmaXJlYmFzZS5TREtfVkVSU0lPTixmKTpudWxsO0RtLmNhbGwodGhpcyxjLGEsYixmdW5jdGlvbigpe3RyeXt2YXIgYT1lLmIuYXV0aCgpLmVhKCl9Y2F0Y2gobSl7YT1cbm51bGx9cmV0dXJuIGF9LGYseWYoemYpLGQpfXQoTW0sRG0pO2Z1bmN0aW9uIE5tKGEsYixjLGQpe2E6e2M9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYyk7dmFyIGU9MDtmb3IodmFyIGY9ITEsaD0wO2g8Yi5sZW5ndGg7aCsrKWlmKGJbaF0ub3B0aW9uYWwpZj0hMDtlbHNle2lmKGYpdGhyb3cgbmV3IEwoXCJpbnRlcm5hbC1lcnJvclwiLFwiQXJndW1lbnQgdmFsaWRhdG9yIGVuY291bnRlcmVkIGEgcmVxdWlyZWQgYXJndW1lbnQgYWZ0ZXIgYW4gb3B0aW9uYWwgYXJndW1lbnQuXCIpO2UrK31mPWIubGVuZ3RoO2lmKGMubGVuZ3RoPGV8fGY8Yy5sZW5ndGgpZD1cIkV4cGVjdGVkIFwiKyhlPT1mPzE9PWU/XCIxIGFyZ3VtZW50XCI6ZStcIiBhcmd1bWVudHNcIjplK1wiLVwiK2YrXCIgYXJndW1lbnRzXCIpK1wiIGJ1dCBnb3QgXCIrYy5sZW5ndGgrXCIuXCI7ZWxzZXtmb3IoZT0wO2U8Yy5sZW5ndGg7ZSsrKWlmKGY9YltlXS5vcHRpb25hbCYmdm9pZCAwPT09Y1tlXSwhYltlXS5NKGNbZV0pJiYhZil7Yj1iW2VdO2lmKDA+ZXx8ZT49T20ubGVuZ3RoKXRocm93IG5ldyBMKFwiaW50ZXJuYWwtZXJyb3JcIixcblwiQXJndW1lbnQgdmFsaWRhdG9yIHJlY2VpdmVkIGFuIHVuc3VwcG9ydGVkIG51bWJlciBvZiBhcmd1bWVudHMuXCIpO2M9T21bZV07ZD0oZD9cIlwiOmMrXCIgYXJndW1lbnQgXCIpKyhiLm5hbWU/J1wiJytiLm5hbWUrJ1wiICc6XCJcIikrXCJtdXN0IGJlIFwiK2IuSytcIi5cIjticmVhayBhfWQ9bnVsbH19aWYoZCl0aHJvdyBuZXcgTChcImFyZ3VtZW50LWVycm9yXCIsYStcIiBmYWlsZWQ6IFwiK2QpO312YXIgT209XCJGaXJzdCBTZWNvbmQgVGhpcmQgRm91cnRoIEZpZnRoIFNpeHRoIFNldmVudGggRWlnaHRoIE5pbnRoXCIuc3BsaXQoXCIgXCIpO2Z1bmN0aW9uIFYoYSxiKXtyZXR1cm57bmFtZTphfHxcIlwiLEs6XCJhIHZhbGlkIHN0cmluZ1wiLG9wdGlvbmFsOiEhYixNOmx9fWZ1bmN0aW9uIFBtKGEsYil7cmV0dXJue25hbWU6YXx8XCJcIixLOlwiYSBib29sZWFuXCIsb3B0aW9uYWw6ISFiLE06YmF9fVxuZnVuY3Rpb24gVyhhLGIpe3JldHVybntuYW1lOmF8fFwiXCIsSzpcImEgdmFsaWQgb2JqZWN0XCIsb3B0aW9uYWw6ISFiLE06cX19ZnVuY3Rpb24gUW0oYSxiKXtyZXR1cm57bmFtZTphfHxcIlwiLEs6XCJhIGZ1bmN0aW9uXCIsb3B0aW9uYWw6ISFiLE06bn19ZnVuY3Rpb24gUm0oYSxiKXtyZXR1cm57bmFtZTphfHxcIlwiLEs6XCJudWxsXCIsb3B0aW9uYWw6ISFiLE06ZWF9fWZ1bmN0aW9uIFNtKCl7cmV0dXJue25hbWU6XCJcIixLOlwiYW4gSFRNTCBlbGVtZW50XCIsb3B0aW9uYWw6ITEsTTpmdW5jdGlvbihhKXtyZXR1cm4hIShhJiZhIGluc3RhbmNlb2YgRWxlbWVudCl9fX1mdW5jdGlvbiBUbSgpe3JldHVybntuYW1lOlwiYXV0aFwiLEs6XCJhbiBpbnN0YW5jZSBvZiBGaXJlYmFzZSBBdXRoXCIsb3B0aW9uYWw6ITAsTTpmdW5jdGlvbihhKXtyZXR1cm4hIShhJiZhIGluc3RhbmNlb2YgYm0pfX19XG5mdW5jdGlvbiBVbSgpe3JldHVybntuYW1lOlwiYXBwXCIsSzpcImFuIGluc3RhbmNlIG9mIEZpcmViYXNlIEFwcFwiLG9wdGlvbmFsOiEwLE06ZnVuY3Rpb24oYSl7cmV0dXJuISEoYSYmYSBpbnN0YW5jZW9mIGZpcmViYXNlLmFwcC5BcHApfX19ZnVuY3Rpb24gVm0oYSl7cmV0dXJue25hbWU6YT9hK1wiQ3JlZGVudGlhbFwiOlwiY3JlZGVudGlhbFwiLEs6YT9cImEgdmFsaWQgXCIrYStcIiBjcmVkZW50aWFsXCI6XCJhIHZhbGlkIGNyZWRlbnRpYWxcIixvcHRpb25hbDohMSxNOmZ1bmN0aW9uKGIpe2lmKCFiKXJldHVybiExO3ZhciBjPSFhfHxiLnByb3ZpZGVySWQ9PT1hO3JldHVybiEoIWIubGF8fCFjKX19fVxuZnVuY3Rpb24gV20oKXtyZXR1cm57bmFtZTpcImF1dGhQcm92aWRlclwiLEs6XCJhIHZhbGlkIEF1dGggcHJvdmlkZXJcIixvcHRpb25hbDohMSxNOmZ1bmN0aW9uKGEpe3JldHVybiEhKGEmJmEucHJvdmlkZXJJZCYmYS5oYXNPd25Qcm9wZXJ0eSYmYS5oYXNPd25Qcm9wZXJ0eShcImlzT0F1dGhQcm92aWRlclwiKSl9fX1mdW5jdGlvbiBYbSgpe3JldHVybntuYW1lOlwiYXBwbGljYXRpb25WZXJpZmllclwiLEs6XCJhbiBpbXBsZW1lbnRhdGlvbiBvZiBmaXJlYmFzZS5hdXRoLkFwcGxpY2F0aW9uVmVyaWZpZXJcIixvcHRpb25hbDohMSxNOmZ1bmN0aW9uKGEpe3JldHVybiEhKGEmJmwoYS50eXBlKSYmbihhLnZlcmlmeSkpfX19ZnVuY3Rpb24gWChhLGIsYyxkKXtyZXR1cm57bmFtZTpjfHxcIlwiLEs6YS5LK1wiIG9yIFwiK2IuSyxvcHRpb25hbDohIWQsTTpmdW5jdGlvbihjKXtyZXR1cm4gYS5NKGMpfHxiLk0oYyl9fX07ZnVuY3Rpb24gWShhLGIpe2Zvcih2YXIgYyBpbiBiKXt2YXIgZD1iW2NdLm5hbWU7YVtkXT1ZbShkLGFbY10sYltjXS5qKX19ZnVuY3Rpb24gWm0oYSxiKXtmb3IodmFyIGMgaW4gYil7dmFyIGQ9YltjXS5uYW1lO2QhPT1jJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxkLHtnZXQ6bmEoZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXNbYV19LGMpLHNldDpuYShmdW5jdGlvbihhLGIsYyxkKXtObShhLFtjXSxbZF0sITApO3RoaXNbYl09ZH0sZCxjLGJbY10udGIpLGVudW1lcmFibGU6ITB9KX19ZnVuY3Rpb24gWihhLGIsYyxkKXthW2JdPVltKGIsYyxkKX1cbmZ1bmN0aW9uIFltKGEsYixjKXtmdW5jdGlvbiBkKCl7dmFyIGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtObShlLGMsYSk7cmV0dXJuIGIuYXBwbHkodGhpcyxhKX1pZighYylyZXR1cm4gYjt2YXIgZT0kbShhKSxmO2ZvcihmIGluIGIpZFtmXT1iW2ZdO2ZvcihmIGluIGIucHJvdG90eXBlKWQucHJvdG90eXBlW2ZdPWIucHJvdG90eXBlW2ZdO3JldHVybiBkfWZ1bmN0aW9uICRtKGEpe2E9YS5zcGxpdChcIi5cIik7cmV0dXJuIGFbYS5sZW5ndGgtMV19O1koYm0ucHJvdG90eXBlLHtXYTp7bmFtZTpcImFwcGx5QWN0aW9uQ29kZVwiLGo6W1YoXCJjb2RlXCIpXX0sSmE6e25hbWU6XCJjaGVja0FjdGlvbkNvZGVcIixqOltWKFwiY29kZVwiKV19LFphOntuYW1lOlwiY29uZmlybVBhc3N3b3JkUmVzZXRcIixqOltWKFwiY29kZVwiKSxWKFwibmV3UGFzc3dvcmRcIildfSx4Yjp7bmFtZTpcImNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZFwiLGo6W1YoXCJlbWFpbFwiKSxWKFwicGFzc3dvcmRcIildfSxXYjp7bmFtZTpcImNyZWF0ZVVzZXJBbmRSZXRyaWV2ZURhdGFXaXRoRW1haWxBbmRQYXNzd29yZFwiLGo6W1YoXCJlbWFpbFwiKSxWKFwicGFzc3dvcmRcIildfSxaYjp7bmFtZTpcImZldGNoUHJvdmlkZXJzRm9yRW1haWxcIixqOltWKFwiZW1haWxcIildfSwkYjp7bmFtZTpcImZldGNoU2lnbkluTWV0aG9kc0ZvckVtYWlsXCIsajpbVihcImVtYWlsXCIpXX0sZmE6e25hbWU6XCJnZXRSZWRpcmVjdFJlc3VsdFwiLGo6W119LG9jOntuYW1lOlwiaXNTaWduSW5XaXRoRW1haWxMaW5rXCIsajpbVihcImVtYWlsTGlua1wiKV19LFxudWM6e25hbWU6XCJvbkF1dGhTdGF0ZUNoYW5nZWRcIixqOltYKFcoKSxRbSgpLFwibmV4dE9yT2JzZXJ2ZXJcIiksUW0oXCJvcHRfZXJyb3JcIiwhMCksUW0oXCJvcHRfY29tcGxldGVkXCIsITApXX0sdmM6e25hbWU6XCJvbklkVG9rZW5DaGFuZ2VkXCIsajpbWChXKCksUW0oKSxcIm5leHRPck9ic2VydmVyXCIpLFFtKFwib3B0X2Vycm9yXCIsITApLFFtKFwib3B0X2NvbXBsZXRlZFwiLCEwKV19LGtiOntuYW1lOlwic2VuZFBhc3N3b3JkUmVzZXRFbWFpbFwiLGo6W1YoXCJlbWFpbFwiKSxYKFcoXCJvcHRfYWN0aW9uQ29kZVNldHRpbmdzXCIsITApLFJtKG51bGwsITApLFwib3B0X2FjdGlvbkNvZGVTZXR0aW5nc1wiLCEwKV19LGxiOntuYW1lOlwic2VuZFNpZ25JbkxpbmtUb0VtYWlsXCIsajpbVihcImVtYWlsXCIpLFcoXCJhY3Rpb25Db2RlU2V0dGluZ3NcIildfSxtYjp7bmFtZTpcInNldFBlcnNpc3RlbmNlXCIsajpbVihcInBlcnNpc3RlbmNlXCIpXX0sUGE6e25hbWU6XCJzaWduSW5BbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbFwiLFxuajpbVm0oKV19LFFhOntuYW1lOlwic2lnbkluQW5vbnltb3VzbHlcIixqOltdfSxHYzp7bmFtZTpcInNpZ25JbkFub255bW91c2x5QW5kUmV0cmlldmVEYXRhXCIsajpbXX0sSGM6e25hbWU6XCJzaWduSW5XaXRoQ3JlZGVudGlhbFwiLGo6W1ZtKCldfSxOYjp7bmFtZTpcInNpZ25JbldpdGhDdXN0b21Ub2tlblwiLGo6W1YoXCJ0b2tlblwiKV19LEVjOntuYW1lOlwic2lnbkluQW5kUmV0cmlldmVEYXRhV2l0aEN1c3RvbVRva2VuXCIsajpbVihcInRva2VuXCIpXX0sT2I6e25hbWU6XCJzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZFwiLGo6W1YoXCJlbWFpbFwiKSxWKFwicGFzc3dvcmRcIildfSxJYzp7bmFtZTpcInNpZ25JbldpdGhFbWFpbExpbmtcIixqOltWKFwiZW1haWxcIiksVihcImVtYWlsTGlua1wiLCEwKV19LEZjOntuYW1lOlwic2lnbkluQW5kUmV0cmlldmVEYXRhV2l0aEVtYWlsQW5kUGFzc3dvcmRcIixqOltWKFwiZW1haWxcIiksVihcInBhc3N3b3JkXCIpXX0sSmM6e25hbWU6XCJzaWduSW5XaXRoUGhvbmVOdW1iZXJcIixqOltWKFwicGhvbmVOdW1iZXJcIiksXG5YbSgpXX0sS2M6e25hbWU6XCJzaWduSW5XaXRoUG9wdXBcIixqOltXbSgpXX0sTGM6e25hbWU6XCJzaWduSW5XaXRoUmVkaXJlY3RcIixqOltXbSgpXX0sUWM6e25hbWU6XCJ1cGRhdGVDdXJyZW50VXNlclwiLGo6W1goZnVuY3Rpb24oYSl7cmV0dXJue25hbWU6XCJ1c2VyXCIsSzpcImFuIGluc3RhbmNlIG9mIEZpcmViYXNlIFVzZXJcIixvcHRpb25hbDohIWEsTTpmdW5jdGlvbihhKXtyZXR1cm4hIShhJiZhIGluc3RhbmNlb2YgUSl9fX0oKSxSbSgpLFwidXNlclwiKV19LG5iOntuYW1lOlwic2lnbk91dFwiLGo6W119LHRvSlNPTjp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfSxTYzp7bmFtZTpcInVzZURldmljZUxhbmd1YWdlXCIsajpbXX0sVGM6e25hbWU6XCJ2ZXJpZnlQYXNzd29yZFJlc2V0Q29kZVwiLGo6W1YoXCJjb2RlXCIpXX19KTtabShibS5wcm90b3R5cGUse2xjOntuYW1lOlwibGFuZ3VhZ2VDb2RlXCIsdGI6WChWKCksUm0oKSxcImxhbmd1YWdlQ29kZVwiKX19KTtibS5QZXJzaXN0ZW5jZT1JajtcbmJtLlBlcnNpc3RlbmNlLkxPQ0FMPVwibG9jYWxcIjtibS5QZXJzaXN0ZW5jZS5TRVNTSU9OPVwic2Vzc2lvblwiO2JtLlBlcnNpc3RlbmNlLk5PTkU9XCJub25lXCI7XG5ZKFEucHJvdG90eXBlLHtcImRlbGV0ZVwiOntuYW1lOlwiZGVsZXRlXCIsajpbXX0sZGM6e25hbWU6XCJnZXRJZFRva2VuUmVzdWx0XCIsajpbUG0oXCJvcHRfZm9yY2VSZWZyZXNoXCIsITApXX0sRjp7bmFtZTpcImdldElkVG9rZW5cIixqOltQbShcIm9wdF9mb3JjZVJlZnJlc2hcIiwhMCldfSxlYjp7bmFtZTpcImxpbmtBbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbFwiLGo6W1ZtKCldfSxwYzp7bmFtZTpcImxpbmtXaXRoQ3JlZGVudGlhbFwiLGo6W1ZtKCldfSxxYzp7bmFtZTpcImxpbmtXaXRoUGhvbmVOdW1iZXJcIixqOltWKFwicGhvbmVOdW1iZXJcIiksWG0oKV19LHJjOntuYW1lOlwibGlua1dpdGhQb3B1cFwiLGo6W1dtKCldfSxzYzp7bmFtZTpcImxpbmtXaXRoUmVkaXJlY3RcIixqOltXbSgpXX0sZ2I6e25hbWU6XCJyZWF1dGhlbnRpY2F0ZUFuZFJldHJpZXZlRGF0YVdpdGhDcmVkZW50aWFsXCIsajpbVm0oKV19LHljOntuYW1lOlwicmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbFwiLGo6W1ZtKCldfSx6Yzp7bmFtZTpcInJlYXV0aGVudGljYXRlV2l0aFBob25lTnVtYmVyXCIsXG5qOltWKFwicGhvbmVOdW1iZXJcIiksWG0oKV19LEFjOntuYW1lOlwicmVhdXRoZW50aWNhdGVXaXRoUG9wdXBcIixqOltXbSgpXX0sQmM6e25hbWU6XCJyZWF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdFwiLGo6W1dtKCldfSxyZWxvYWQ6e25hbWU6XCJyZWxvYWRcIixqOltdfSxqYjp7bmFtZTpcInNlbmRFbWFpbFZlcmlmaWNhdGlvblwiLGo6W1goVyhcIm9wdF9hY3Rpb25Db2RlU2V0dGluZ3NcIiwhMCksUm0obnVsbCwhMCksXCJvcHRfYWN0aW9uQ29kZVNldHRpbmdzXCIsITApXX0sdG9KU09OOntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19LFBjOntuYW1lOlwidW5saW5rXCIsajpbVihcInByb3ZpZGVyXCIpXX0scGI6e25hbWU6XCJ1cGRhdGVFbWFpbFwiLGo6W1YoXCJlbWFpbFwiKV19LHFiOntuYW1lOlwidXBkYXRlUGFzc3dvcmRcIixqOltWKFwicGFzc3dvcmRcIildfSxSYzp7bmFtZTpcInVwZGF0ZVBob25lTnVtYmVyXCIsajpbVm0oXCJwaG9uZVwiKV19LHJiOntuYW1lOlwidXBkYXRlUHJvZmlsZVwiLGo6W1coXCJwcm9maWxlXCIpXX19KTtcblkocm0ucHJvdG90eXBlLHtleGVjdXRlOntuYW1lOlwiZXhlY3V0ZVwifSxyZW5kZXI6e25hbWU6XCJyZW5kZXJcIn0scmVzZXQ6e25hbWU6XCJyZXNldFwifSxnZXRSZXNwb25zZTp7bmFtZTpcImdldFJlc3BvbnNlXCJ9fSk7WShxbS5wcm90b3R5cGUse2V4ZWN1dGU6e25hbWU6XCJleGVjdXRlXCJ9LHJlbmRlcjp7bmFtZTpcInJlbmRlclwifSxyZXNldDp7bmFtZTpcInJlc2V0XCJ9LGdldFJlc3BvbnNlOntuYW1lOlwiZ2V0UmVzcG9uc2VcIn19KTtZKEEucHJvdG90eXBlLHtpYTp7bmFtZTpcImZpbmFsbHlcIn0sczp7bmFtZTpcImNhdGNoXCJ9LHRoZW46e25hbWU6XCJ0aGVuXCJ9fSk7Wm0oUmsucHJvdG90eXBlLHthcHBWZXJpZmljYXRpb25EaXNhYmxlZDp7bmFtZTpcImFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZ1wiLHRiOlBtKFwiYXBwVmVyaWZpY2F0aW9uRGlzYWJsZWRGb3JUZXN0aW5nXCIpfX0pO1koU2sucHJvdG90eXBlLHtjb25maXJtOntuYW1lOlwiY29uZmlybVwiLGo6W1YoXCJ2ZXJpZmljYXRpb25Db2RlXCIpXX19KTtcblooTyxcImNyZWRlbnRpYWxcIixmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgZ2coYSxiKX0sW1YoXCJlbWFpbFwiKSxWKFwicGFzc3dvcmRcIildKTtZKFpmLnByb3RvdHlwZSx7dWE6e25hbWU6XCJhZGRTY29wZVwiLGo6W1YoXCJzY29wZVwiKV19LERhOntuYW1lOlwic2V0Q3VzdG9tUGFyYW1ldGVyc1wiLGo6W1coXCJjdXN0b21PQXV0aFBhcmFtZXRlcnNcIildfX0pO1ooWmYsXCJjcmVkZW50aWFsXCIsJGYsW1goVigpLFcoKSxcInRva2VuXCIpXSk7WihPLFwiY3JlZGVudGlhbFdpdGhMaW5rXCIsbGcsW1YoXCJlbWFpbFwiKSxWKFwiZW1haWxMaW5rXCIpXSk7WShhZy5wcm90b3R5cGUse3VhOntuYW1lOlwiYWRkU2NvcGVcIixqOltWKFwic2NvcGVcIildfSxEYTp7bmFtZTpcInNldEN1c3RvbVBhcmFtZXRlcnNcIixqOltXKFwiY3VzdG9tT0F1dGhQYXJhbWV0ZXJzXCIpXX19KTtaKGFnLFwiY3JlZGVudGlhbFwiLGJnLFtYKFYoKSxXKCksXCJ0b2tlblwiKV0pO1xuWShjZy5wcm90b3R5cGUse3VhOntuYW1lOlwiYWRkU2NvcGVcIixqOltWKFwic2NvcGVcIildfSxEYTp7bmFtZTpcInNldEN1c3RvbVBhcmFtZXRlcnNcIixqOltXKFwiY3VzdG9tT0F1dGhQYXJhbWV0ZXJzXCIpXX19KTtaKGNnLFwiY3JlZGVudGlhbFwiLGRnLFtYKFYoKSxYKFcoKSxSbSgpKSxcImlkVG9rZW5cIiksWChWKCksUm0oKSxcImFjY2Vzc1Rva2VuXCIsITApXSk7WShlZy5wcm90b3R5cGUse0RhOntuYW1lOlwic2V0Q3VzdG9tUGFyYW1ldGVyc1wiLGo6W1coXCJjdXN0b21PQXV0aFBhcmFtZXRlcnNcIildfX0pO1ooZWcsXCJjcmVkZW50aWFsXCIsZmcsW1goVigpLFcoKSxcInRva2VuXCIpLFYoXCJzZWNyZXRcIiwhMCldKTtcblkoTi5wcm90b3R5cGUse3VhOntuYW1lOlwiYWRkU2NvcGVcIixqOltWKFwic2NvcGVcIildfSxjcmVkZW50aWFsOntuYW1lOlwiY3JlZGVudGlhbFwiLGo6W1goVigpLFJtKCksXCJpZFRva2VuXCIsITApLFgoVigpLFJtKCksXCJhY2Nlc3NUb2tlblwiLCEwKSxYKFYoKSxSbSgpLFwibm9uY2VcIiwhMCldfSxEYTp7bmFtZTpcInNldEN1c3RvbVBhcmFtZXRlcnNcIixqOltXKFwiY3VzdG9tT0F1dGhQYXJhbWV0ZXJzXCIpXX19KTtaKHJnLFwiY3JlZGVudGlhbFwiLHRnLFtWKFwidmVyaWZpY2F0aW9uSWRcIiksVihcInZlcmlmaWNhdGlvbkNvZGVcIildKTtZKHJnLnByb3RvdHlwZSx7VWE6e25hbWU6XCJ2ZXJpZnlQaG9uZU51bWJlclwiLGo6W1YoXCJwaG9uZU51bWJlclwiKSxYbSgpXX19KTtZKEwucHJvdG90eXBlLHt0b0pTT046e25hbWU6XCJ0b0pTT05cIixqOltWKG51bGwsITApXX19KTtZKEJnLnByb3RvdHlwZSx7dG9KU09OOntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19fSk7XG5ZKEFnLnByb3RvdHlwZSx7dG9KU09OOntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19fSk7WShNbS5wcm90b3R5cGUse2NsZWFyOntuYW1lOlwiY2xlYXJcIixqOltdfSxyZW5kZXI6e25hbWU6XCJyZW5kZXJcIixqOltdfSx2ZXJpZnk6e25hbWU6XCJ2ZXJpZnlcIixqOltdfX0pO1xuKGZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBmaXJlYmFzZSYmZmlyZWJhc2UuSU5URVJOQUwmJmZpcmViYXNlLklOVEVSTkFMLnJlZ2lzdGVyU2VydmljZSl7dmFyIGE9e0F1dGg6Ym0sRXJyb3I6TH07WihhLFwiRW1haWxBdXRoUHJvdmlkZXJcIixPLFtdKTtaKGEsXCJGYWNlYm9va0F1dGhQcm92aWRlclwiLFpmLFtdKTtaKGEsXCJHaXRodWJBdXRoUHJvdmlkZXJcIixhZyxbXSk7WihhLFwiR29vZ2xlQXV0aFByb3ZpZGVyXCIsY2csW10pO1ooYSxcIlR3aXR0ZXJBdXRoUHJvdmlkZXJcIixlZyxbXSk7WihhLFwiT0F1dGhQcm92aWRlclwiLE4sW1YoXCJwcm92aWRlcklkXCIpXSk7WihhLFwiU0FNTEF1dGhQcm92aWRlclwiLFlmLFtWKFwicHJvdmlkZXJJZFwiKV0pO1ooYSxcIlBob25lQXV0aFByb3ZpZGVyXCIscmcsW1RtKCldKTtaKGEsXCJSZWNhcHRjaGFWZXJpZmllclwiLE1tLFtYKFYoKSxTbSgpLFwicmVjYXB0Y2hhQ29udGFpbmVyXCIpLFcoXCJyZWNhcHRjaGFQYXJhbWV0ZXJzXCIsITApLFVtKCldKTtcbmZpcmViYXNlLklOVEVSTkFMLnJlZ2lzdGVyU2VydmljZShcImF1dGhcIixmdW5jdGlvbihhLGMpe2E9bmV3IGJtKGEpO2Moe0lOVEVSTkFMOntnZXRVaWQ6cihhLmdldFVpZCxhKSxnZXRUb2tlbjpyKGEuY2MsYSksYWRkQXV0aFRva2VuTGlzdGVuZXI6cihhLlZiLGEpLHJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyOnIoYS5DYyxhKX19KTtyZXR1cm4gYX0sYSxmdW5jdGlvbihhLGMpe2lmKFwiY3JlYXRlXCI9PT1hKXRyeXtjLmF1dGgoKX1jYXRjaChkKXt9fSk7ZmlyZWJhc2UuSU5URVJOQUwuZXh0ZW5kTmFtZXNwYWNlKHtVc2VyOlF9KX1lbHNlIHRocm93IEVycm9yKFwiQ2Fubm90IGZpbmQgdGhlIGZpcmViYXNlIG5hbWVzcGFjZTsgYmUgc3VyZSB0byBpbmNsdWRlIGZpcmViYXNlLWFwcC5qcyBiZWZvcmUgdGhpcyBsaWJyYXJ5LlwiKTt9KSgpO30pLmFwcGx5KHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge30pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRoLmVzbS5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciBmaXJlYmFzZSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAZmlyZWJhc2UvYXBwJykpO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKCd0c2xpYicpO1xudmFyIHV0aWwgPSByZXF1aXJlKCdAZmlyZWJhc2UvdXRpbCcpO1xudmFyIGxvZ2dlciQxID0gcmVxdWlyZSgnQGZpcmViYXNlL2xvZ2dlcicpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFdyYXBzIGEgRE9NIFN0b3JhZ2Ugb2JqZWN0IGFuZDpcclxuICogLSBhdXRvbWF0aWNhbGx5IGVuY29kZSBvYmplY3RzIGFzIEpTT04gc3RyaW5ncyBiZWZvcmUgc3RvcmluZyB0aGVtIHRvIGFsbG93IHVzIHRvIHN0b3JlIGFyYml0cmFyeSB0eXBlcy5cclxuICogLSBwcmVmaXhlcyBuYW1lcyB3aXRoIFwiZmlyZWJhc2U6XCIgdG8gYXZvaWQgY29sbGlzaW9ucyB3aXRoIGFwcCBkYXRhLlxyXG4gKlxyXG4gKiBXZSBhdXRvbWF0aWNhbGx5IChzZWUgc3RvcmFnZS5qcykgY3JlYXRlIHR3byBzdWNoIHdyYXBwZXJzLCBvbmUgZm9yIHNlc3Npb25TdG9yYWdlLFxyXG4gKiBhbmQgb25lIGZvciBsb2NhbFN0b3JhZ2UuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIERPTVN0b3JhZ2VXcmFwcGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1N0b3JhZ2V9IGRvbVN0b3JhZ2VfIFRoZSB1bmRlcmx5aW5nIHN0b3JhZ2Ugb2JqZWN0IChlLmcuIGxvY2FsU3RvcmFnZSBvciBzZXNzaW9uU3RvcmFnZSlcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRE9NU3RvcmFnZVdyYXBwZXIoZG9tU3RvcmFnZV8pIHtcclxuICAgICAgICB0aGlzLmRvbVN0b3JhZ2VfID0gZG9tU3RvcmFnZV87XHJcbiAgICAgICAgLy8gVXNlIGEgcHJlZml4IHRvIGF2b2lkIGNvbGxpc2lvbnMgd2l0aCBvdGhlciBzdHVmZiBzYXZlZCBieSB0aGUgYXBwLlxyXG4gICAgICAgIHRoaXMucHJlZml4XyA9ICdmaXJlYmFzZTonO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgdG8gc2F2ZSB0aGUgdmFsdWUgdW5kZXJcclxuICAgICAqIEBwYXJhbSB7P09iamVjdH0gdmFsdWUgVGhlIHZhbHVlIGJlaW5nIHN0b3JlZCwgb3IgbnVsbCB0byByZW1vdmUgdGhlIGtleS5cclxuICAgICAqL1xyXG4gICAgRE9NU3RvcmFnZVdyYXBwZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5kb21TdG9yYWdlXy5yZW1vdmVJdGVtKHRoaXMucHJlZml4ZWROYW1lXyhrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tU3RvcmFnZV8uc2V0SXRlbSh0aGlzLnByZWZpeGVkTmFtZV8oa2V5KSwgdXRpbC5zdHJpbmdpZnkodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XHJcbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgdmFsdWUgdGhhdCB3YXMgc3RvcmVkIHVuZGVyIHRoaXMga2V5LCBvciBudWxsXHJcbiAgICAgKi9cclxuICAgIERPTVN0b3JhZ2VXcmFwcGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIHN0b3JlZFZhbCA9IHRoaXMuZG9tU3RvcmFnZV8uZ2V0SXRlbSh0aGlzLnByZWZpeGVkTmFtZV8oa2V5KSk7XHJcbiAgICAgICAgaWYgKHN0b3JlZFZhbCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHV0aWwuanNvbkV2YWwoc3RvcmVkVmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XHJcbiAgICAgKi9cclxuICAgIERPTVN0b3JhZ2VXcmFwcGVyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdGhpcy5kb21TdG9yYWdlXy5yZW1vdmVJdGVtKHRoaXMucHJlZml4ZWROYW1lXyhrZXkpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIERPTVN0b3JhZ2VXcmFwcGVyLnByb3RvdHlwZS5wcmVmaXhlZE5hbWVfID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcmVmaXhfICsgbmFtZTtcclxuICAgIH07XHJcbiAgICBET01TdG9yYWdlV3JhcHBlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tU3RvcmFnZV8udG9TdHJpbmcoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRE9NU3RvcmFnZVdyYXBwZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQW4gaW4tbWVtb3J5IHN0b3JhZ2UgaW1wbGVtZW50YXRpb24gdGhhdCBtYXRjaGVzIHRoZSBBUEkgb2YgRE9NU3RvcmFnZVdyYXBwZXJcclxuICogKFRPRE86IGNyZWF0ZSBpbnRlcmZhY2UgZm9yIGJvdGggdG8gaW1wbGVtZW50KS5cclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgTWVtb3J5U3RvcmFnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1lbW9yeVN0b3JhZ2UoKSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZV8gPSB7fTtcclxuICAgICAgICB0aGlzLmlzSW5NZW1vcnlTdG9yYWdlID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIE1lbW9yeVN0b3JhZ2UucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2FjaGVfW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNhY2hlX1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE1lbW9yeVN0b3JhZ2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICBpZiAodXRpbC5jb250YWlucyh0aGlzLmNhY2hlXywga2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZV9ba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgTWVtb3J5U3RvcmFnZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmNhY2hlX1trZXldO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNZW1vcnlTdG9yYWdlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEhlbHBlciB0byBjcmVhdGUgYSBET01TdG9yYWdlV3JhcHBlciBvciBlbHNlIGZhbGwgYmFjayB0byBNZW1vcnlTdG9yYWdlLlxyXG4gKiBUT0RPOiBPbmNlIE1lbW9yeVN0b3JhZ2UgYW5kIERPTVN0b3JhZ2VXcmFwcGVyIGhhdmUgYSBzaGFyZWQgaW50ZXJmYWNlIHRoaXMgbWV0aG9kIGFubm90YXRpb24gc2hvdWxkIGNoYW5nZVxyXG4gKiB0byByZWZsZWN0IHRoaXMgdHlwZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZG9tU3RvcmFnZU5hbWUgTmFtZSBvZiB0aGUgdW5kZXJseWluZyBzdG9yYWdlIG9iamVjdFxyXG4gKiAgIChlLmcuICdsb2NhbFN0b3JhZ2UnIG9yICdzZXNzaW9uU3RvcmFnZScpLlxyXG4gKiBAcmV0dXJuIHs/fSBUdXJuaW5nIG9mZiB0eXBlIGluZm9ybWF0aW9uIHVudGlsIGEgY29tbW9uIGludGVyZmFjZSBpcyBkZWZpbmVkLlxyXG4gKi9cclxudmFyIGNyZWF0ZVN0b3JhZ2Vmb3IgPSBmdW5jdGlvbiAoZG9tU3RvcmFnZU5hbWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gTk9URToganVzdCBhY2Nlc3NpbmcgXCJsb2NhbFN0b3JhZ2VcIiBvciBcIndpbmRvd1snbG9jYWxTdG9yYWdlJ11cIiBtYXkgdGhyb3cgYSBzZWN1cml0eSBleGNlcHRpb24sXHJcbiAgICAgICAgLy8gc28gaXQgbXVzdCBiZSBpbnNpZGUgdGhlIHRyeS9jYXRjaC5cclxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHdpbmRvd1tkb21TdG9yYWdlTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIC8vIE5lZWQgdG8gdGVzdCBjYWNoZS4gSnVzdCBiZWNhdXNlIGl0J3MgaGVyZSBkb2Vzbid0IG1lYW4gaXQgd29ya3NcclxuICAgICAgICAgICAgdmFyIGRvbVN0b3JhZ2UgPSB3aW5kb3dbZG9tU3RvcmFnZU5hbWVdO1xyXG4gICAgICAgICAgICBkb21TdG9yYWdlLnNldEl0ZW0oJ2ZpcmViYXNlOnNlbnRpbmVsJywgJ2NhY2hlJyk7XHJcbiAgICAgICAgICAgIGRvbVN0b3JhZ2UucmVtb3ZlSXRlbSgnZmlyZWJhc2U6c2VudGluZWwnKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBET01TdG9yYWdlV3JhcHBlcihkb21TdG9yYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICAvLyBGYWlsZWQgdG8gY3JlYXRlIHdyYXBwZXIuICBKdXN0IHJldHVybiBpbi1tZW1vcnkgc3RvcmFnZS5cclxuICAgIC8vIFRPRE86IGxvZz9cclxuICAgIHJldHVybiBuZXcgTWVtb3J5U3RvcmFnZSgpO1xyXG59O1xyXG4vKiogQSBzdG9yYWdlIG9iamVjdCB0aGF0IGxhc3RzIGFjcm9zcyBzZXNzaW9ucyAqL1xyXG52YXIgUGVyc2lzdGVudFN0b3JhZ2UgPSBjcmVhdGVTdG9yYWdlZm9yKCdsb2NhbFN0b3JhZ2UnKTtcclxuLyoqIEEgc3RvcmFnZSBvYmplY3QgdGhhdCBvbmx5IGxhc3RzIG9uZSBzZXNzaW9uICovXHJcbnZhciBTZXNzaW9uU3RvcmFnZSA9IGNyZWF0ZVN0b3JhZ2Vmb3IoJ3Nlc3Npb25TdG9yYWdlJyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgbG9nQ2xpZW50ID0gbmV3IGxvZ2dlciQxLkxvZ2dlcignQGZpcmViYXNlL2RhdGFiYXNlJyk7XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgbG9jYWxseS11bmlxdWUgSUQgKGdlbmVyYXRlZCBieSBqdXN0IGluY3JlbWVudGluZyB1cCBmcm9tIDAgZWFjaCB0aW1lIGl0cyBjYWxsZWQpLlxyXG4gKiBAdHlwZSB7ZnVuY3Rpb24oKTogbnVtYmVyfSBHZW5lcmF0ZWQgSUQuXHJcbiAqL1xyXG52YXIgTFVJREdlbmVyYXRvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgaWQgPSAxO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gaWQrKztcclxuICAgIH07XHJcbn0pKCk7XHJcbi8qKlxyXG4gKiBTaGExIGhhc2ggb2YgdGhlIGlucHV0IHN0cmluZ1xyXG4gKiBAcGFyYW0geyFzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGhhc2hcclxuICogQHJldHVybiB7IXN0cmluZ30gVGhlIHJlc3VsdGluZyBoYXNoXHJcbiAqL1xyXG52YXIgc2hhMSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHZhciB1dGY4Qnl0ZXMgPSB1dGlsLnN0cmluZ1RvQnl0ZUFycmF5KHN0cik7XHJcbiAgICB2YXIgc2hhMSA9IG5ldyB1dGlsLlNoYTEoKTtcclxuICAgIHNoYTEudXBkYXRlKHV0ZjhCeXRlcyk7XHJcbiAgICB2YXIgc2hhMUJ5dGVzID0gc2hhMS5kaWdlc3QoKTtcclxuICAgIHJldHVybiB1dGlsLmJhc2U2NC5lbmNvZGVCeXRlQXJyYXkoc2hhMUJ5dGVzKTtcclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3NcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxudmFyIGJ1aWxkTG9nTWVzc2FnZV8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmFyX2FyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyX2FyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBtZXNzYWdlID0gJyc7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhcl9hcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFyX2FyZ3NbaV0pIHx8XHJcbiAgICAgICAgICAgICh2YXJfYXJnc1tpXSAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhcl9hcmdzW2ldID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhcl9hcmdzW2ldLmxlbmd0aCA9PT0gJ251bWJlcicpKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gYnVpbGRMb2dNZXNzYWdlXy5hcHBseShudWxsLCB2YXJfYXJnc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YXJfYXJnc1tpXSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSArPSB1dGlsLnN0cmluZ2lmeSh2YXJfYXJnc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtZXNzYWdlICs9IHZhcl9hcmdzW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXNzYWdlICs9ICcgJztcclxuICAgIH1cclxuICAgIHJldHVybiBtZXNzYWdlO1xyXG59O1xyXG4vKipcclxuICogVXNlIHRoaXMgZm9yIGFsbCBkZWJ1ZyBtZXNzYWdlcyBpbiBGaXJlYmFzZS5cclxuICogQHR5cGUgez9mdW5jdGlvbihzdHJpbmcpfVxyXG4gKi9cclxudmFyIGxvZ2dlciA9IG51bGw7XHJcbi8qKlxyXG4gKiBGbGFnIHRvIGNoZWNrIGZvciBsb2cgYXZhaWxhYmlsaXR5IG9uIGZpcnN0IGxvZyBtZXNzYWdlXHJcbiAqIEB0eXBlIHtib29sZWFufVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxudmFyIGZpcnN0TG9nXyA9IHRydWU7XHJcbi8qKlxyXG4gKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgRmlyZWJhc2UuZW5hYmxlTG9nZ2luZyAoZGVmaW5lZCBoZXJlIHRvIGJyZWFrIGRlcGVuZGVuY2llcylcclxuICogQHBhcmFtIHtib29sZWFufD9mdW5jdGlvbihzdHJpbmcpfSBsb2dnZXJfIEEgZmxhZyB0byB0dXJuIG9uIGxvZ2dpbmcsIG9yIGEgY3VzdG9tIGxvZ2dlclxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBwZXJzaXN0ZW50IFdoZXRoZXIgb3Igbm90IHRvIHBlcnNpc3QgbG9nZ2luZyBzZXR0aW5ncyBhY3Jvc3MgcmVmcmVzaGVzXHJcbiAqL1xyXG52YXIgZW5hYmxlTG9nZ2luZyA9IGZ1bmN0aW9uIChsb2dnZXJfLCBwZXJzaXN0ZW50KSB7XHJcbiAgICB1dGlsLmFzc2VydCghcGVyc2lzdGVudCB8fCAobG9nZ2VyXyA9PT0gdHJ1ZSB8fCBsb2dnZXJfID09PSBmYWxzZSksIFwiQ2FuJ3QgdHVybiBvbiBjdXN0b20gbG9nZ2VycyBwZXJzaXN0ZW50bHkuXCIpO1xyXG4gICAgaWYgKGxvZ2dlcl8gPT09IHRydWUpIHtcclxuICAgICAgICBsb2dDbGllbnQubG9nTGV2ZWwgPSBsb2dnZXIkMS5Mb2dMZXZlbC5WRVJCT1NFO1xyXG4gICAgICAgIGxvZ2dlciA9IGxvZ0NsaWVudC5sb2cuYmluZChsb2dDbGllbnQpO1xyXG4gICAgICAgIGlmIChwZXJzaXN0ZW50KVxyXG4gICAgICAgICAgICBTZXNzaW9uU3RvcmFnZS5zZXQoJ2xvZ2dpbmdfZW5hYmxlZCcsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGxvZ2dlcl8gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBsb2dnZXIgPSBsb2dnZXJfO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbG9nZ2VyID0gbnVsbDtcclxuICAgICAgICBTZXNzaW9uU3RvcmFnZS5yZW1vdmUoJ2xvZ2dpbmdfZW5hYmxlZCcpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICpcclxuICogQHBhcmFtIHsuLi4oc3RyaW5nfEFyZ3VtZW50cyl9IHZhcl9hcmdzXHJcbiAqL1xyXG52YXIgbG9nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHZhcl9hcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhcl9hcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoZmlyc3RMb2dfID09PSB0cnVlKSB7XHJcbiAgICAgICAgZmlyc3RMb2dfID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGxvZ2dlciA9PT0gbnVsbCAmJiBTZXNzaW9uU3RvcmFnZS5nZXQoJ2xvZ2dpbmdfZW5hYmxlZCcpID09PSB0cnVlKVxyXG4gICAgICAgICAgICBlbmFibGVMb2dnaW5nKHRydWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxvZ2dlcikge1xyXG4gICAgICAgIHZhciBtZXNzYWdlID0gYnVpbGRMb2dNZXNzYWdlXy5hcHBseShudWxsLCB2YXJfYXJncyk7XHJcbiAgICAgICAgbG9nZ2VyKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHshc3RyaW5nfSBwcmVmaXhcclxuICogQHJldHVybiB7ZnVuY3Rpb24oLi4uWypdKX1cclxuICovXHJcbnZhciBsb2dXcmFwcGVyID0gZnVuY3Rpb24gKHByZWZpeCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmFyX2FyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXJfYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2cuYXBwbHkodm9pZCAwLCBbcHJlZml4XS5jb25jYXQodmFyX2FyZ3MpKTtcclxuICAgIH07XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0gey4uLnN0cmluZ30gdmFyX2FyZ3NcclxuICovXHJcbnZhciBlcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB2YXJfYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXJfYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIG1lc3NhZ2UgPSAnRklSRUJBU0UgSU5URVJOQUwgRVJST1I6ICcgKyBidWlsZExvZ01lc3NhZ2VfLmFwcGx5KHZvaWQgMCwgdmFyX2FyZ3MpO1xyXG4gICAgbG9nQ2xpZW50LmVycm9yKG1lc3NhZ2UpO1xyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHsuLi5zdHJpbmd9IHZhcl9hcmdzXHJcbiAqL1xyXG52YXIgZmF0YWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmFyX2FyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyX2FyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBtZXNzYWdlID0gXCJGSVJFQkFTRSBGQVRBTCBFUlJPUjogXCIgKyBidWlsZExvZ01lc3NhZ2VfLmFwcGx5KHZvaWQgMCwgdmFyX2FyZ3MpO1xyXG4gICAgbG9nQ2xpZW50LmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJnc1xyXG4gKi9cclxudmFyIHdhcm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmFyX2FyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyX2FyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBtZXNzYWdlID0gJ0ZJUkVCQVNFIFdBUk5JTkc6ICcgKyBidWlsZExvZ01lc3NhZ2VfLmFwcGx5KHZvaWQgMCwgdmFyX2FyZ3MpO1xyXG4gICAgbG9nQ2xpZW50Lndhcm4obWVzc2FnZSk7XHJcbn07XHJcbi8qKlxyXG4gKiBMb2dzIGEgd2FybmluZyBpZiB0aGUgY29udGFpbmluZyBwYWdlIHVzZXMgaHR0cHMuIENhbGxlZCB3aGVuIGEgY2FsbCB0byBuZXcgRmlyZWJhc2VcclxuICogZG9lcyBub3QgdXNlIGh0dHBzLlxyXG4gKi9cclxudmFyIHdhcm5JZlBhZ2VJc1NlY3VyZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIEJlIHZlcnkgY2FyZWZ1bCBhY2Nlc3NpbmcgYnJvd3NlciBnbG9iYWxzLiBXaG8ga25vd3Mgd2hhdCBtYXkgb3IgbWF5IG5vdCBleGlzdC5cclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiAmJlxyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAmJlxyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKCdodHRwczonKSAhPT0gLTEpIHtcclxuICAgICAgICB3YXJuKCdJbnNlY3VyZSBGaXJlYmFzZSBhY2Nlc3MgZnJvbSBhIHNlY3VyZSBwYWdlLiAnICtcclxuICAgICAgICAgICAgJ1BsZWFzZSB1c2UgaHR0cHMgaW4gY2FsbHMgdG8gbmV3IEZpcmViYXNlKCkuJyk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgZGF0YSBpcyBOYU4sIG9yICsvLSBJbmZpbml0eS5cclxuICogQHBhcmFtIHsqfSBkYXRhXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG52YXIgaXNJbnZhbGlkSlNPTk51bWJlciA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBkYXRhID09PSAnbnVtYmVyJyAmJlxyXG4gICAgICAgIChkYXRhICE9IGRhdGEgfHwgLy8gTmFOXHJcbiAgICAgICAgICAgIGRhdGEgPT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIHx8XHJcbiAgICAgICAgICAgIGRhdGEgPT0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKSk7XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuXHJcbiAqL1xyXG52YXIgZXhlY3V0ZVdoZW5ET01SZWFkeSA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgaWYgKHV0aWwuaXNOb2RlU2RrKCkgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xyXG4gICAgICAgIGZuKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBNb2RlbGVkIGFmdGVyIGpRdWVyeS4gVHJ5IERPTUNvbnRlbnRMb2FkZWQgYW5kIG9ucmVhZHlzdGF0ZWNoYW5nZSAod2hpY2hcclxuICAgICAgICAvLyBmaXJlIGJlZm9yZSBvbmxvYWQpLCBidXQgZmFsbCBiYWNrIHRvIG9ubG9hZC5cclxuICAgICAgICB2YXIgY2FsbGVkXzEgPSBmYWxzZTtcclxuICAgICAgICB2YXIgd3JhcHBlZEZuXzEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuYm9keSkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCh3cmFwcGVkRm5fMSwgTWF0aC5mbG9vcigxMCkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghY2FsbGVkXzEpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxlZF8xID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGZuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCB3cmFwcGVkRm5fMSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0byBvbmxvYWQuXHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgd3JhcHBlZEZuXzEsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZG9jdW1lbnQuYXR0YWNoRXZlbnQpIHtcclxuICAgICAgICAgICAgLy8gSUUuXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJylcclxuICAgICAgICAgICAgICAgICAgICB3cmFwcGVkRm5fMSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gZmFsbGJhY2sgdG8gb25sb2FkLlxyXG4gICAgICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ29ubG9hZCcsIHdyYXBwZWRGbl8xKTtcclxuICAgICAgICAgICAgLy8galF1ZXJ5IGhhcyBhbiBleHRyYSBoYWNrIGZvciBJRSB0aGF0IHdlIGNvdWxkIGVtcGxveSAoYmFzZWQgb25cclxuICAgICAgICAgICAgLy8gaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0lFQ29udGVudExvYWRlZC8pIEJ1dCBpdCBsb29rcyByZWFsbHkgb2xkLlxyXG4gICAgICAgICAgICAvLyBJJ20gaG9waW5nIHdlIGRvbid0IG5lZWQgaXQuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogTWluaW11bSBrZXkgbmFtZS4gSW52YWxpZCBmb3IgYWN0dWFsIGRhdGEsIHVzZWQgYXMgYSBtYXJrZXIgdG8gc29ydCBiZWZvcmUgYW55IHZhbGlkIG5hbWVzXHJcbiAqIEB0eXBlIHshc3RyaW5nfVxyXG4gKi9cclxudmFyIE1JTl9OQU1FID0gJ1tNSU5fTkFNRV0nO1xyXG4vKipcclxuICogTWF4aW11bSBrZXkgbmFtZS4gSW52YWxpZCBmb3IgYWN0dWFsIGRhdGEsIHVzZWQgYXMgYSBtYXJrZXIgdG8gc29ydCBhYm92ZSBhbnkgdmFsaWQgbmFtZXNcclxuICogQHR5cGUgeyFzdHJpbmd9XHJcbiAqL1xyXG52YXIgTUFYX05BTUUgPSAnW01BWF9OQU1FXSc7XHJcbi8qKlxyXG4gKiBDb21wYXJlcyB2YWxpZCBGaXJlYmFzZSBrZXkgbmFtZXMsIHBsdXMgbWluIGFuZCBtYXggbmFtZVxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IGFcclxuICogQHBhcmFtIHshc3RyaW5nfSBiXHJcbiAqIEByZXR1cm4geyFudW1iZXJ9XHJcbiAqL1xyXG52YXIgbmFtZUNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgaWYgKGEgPT09IGIpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGEgPT09IE1JTl9OQU1FIHx8IGIgPT09IE1BWF9OQU1FKSB7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYiA9PT0gTUlOX05BTUUgfHwgYSA9PT0gTUFYX05BTUUpIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBhQXNJbnQgPSB0cnlQYXJzZUludChhKSwgYkFzSW50ID0gdHJ5UGFyc2VJbnQoYik7XHJcbiAgICAgICAgaWYgKGFBc0ludCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoYkFzSW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYUFzSW50IC0gYkFzSW50ID09IDAgPyBhLmxlbmd0aCAtIGIubGVuZ3RoIDogYUFzSW50IC0gYkFzSW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGJBc0ludCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IGFcclxuICogQHBhcmFtIHshc3RyaW5nfSBiXHJcbiAqIEByZXR1cm4geyFudW1iZXJ9IGNvbXBhcmlzb24gcmVzdWx0LlxyXG4gKi9cclxudmFyIHN0cmluZ0NvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgaWYgKGEgPT09IGIpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGEgPCBiKSB7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7Kn1cclxuICovXHJcbnZhciByZXF1aXJlS2V5ID0gZnVuY3Rpb24gKGtleSwgb2JqKSB7XHJcbiAgICBpZiAob2JqICYmIGtleSBpbiBvYmopIHtcclxuICAgICAgICByZXR1cm4gb2JqW2tleV07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQga2V5ICgnICsga2V5ICsgJykgaW4gb2JqZWN0OiAnICsgdXRpbC5zdHJpbmdpZnkob2JqKSk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0geyp9IG9ialxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG52YXIgT2JqZWN0VG9VbmlxdWVLZXkgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKVxyXG4gICAgICAgIHJldHVybiB1dGlsLnN0cmluZ2lmeShvYmopO1xyXG4gICAgdmFyIGtleXMgPSBbXTtcclxuICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XHJcbiAgICAgICAga2V5cy5wdXNoKGspO1xyXG4gICAgfVxyXG4gICAgLy8gRXhwb3J0IGFzIGpzb24sIGJ1dCB3aXRoIHRoZSBrZXlzIHNvcnRlZC5cclxuICAgIGtleXMuc29ydCgpO1xyXG4gICAgdmFyIGtleSA9ICd7JztcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChpICE9PSAwKVxyXG4gICAgICAgICAgICBrZXkgKz0gJywnO1xyXG4gICAgICAgIGtleSArPSB1dGlsLnN0cmluZ2lmeShrZXlzW2ldKTtcclxuICAgICAgICBrZXkgKz0gJzonO1xyXG4gICAgICAgIGtleSArPSBPYmplY3RUb1VuaXF1ZUtleShvYmpba2V5c1tpXV0pO1xyXG4gICAgfVxyXG4gICAga2V5ICs9ICd9JztcclxuICAgIHJldHVybiBrZXk7XHJcbn07XHJcbi8qKlxyXG4gKiBTcGxpdHMgYSBzdHJpbmcgaW50byBhIG51bWJlciBvZiBzbWFsbGVyIHNlZ21lbnRzIG9mIG1heGltdW0gc2l6ZVxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IHN0ciBUaGUgc3RyaW5nXHJcbiAqIEBwYXJhbSB7IW51bWJlcn0gc2Vnc2l6ZSBUaGUgbWF4aW11bSBudW1iZXIgb2YgY2hhcnMgaW4gdGhlIHN0cmluZy5cclxuICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IFRoZSBzdHJpbmcsIHNwbGl0IGludG8gYXBwcm9wcmlhdGVseS1zaXplZCBjaHVua3NcclxuICovXHJcbnZhciBzcGxpdFN0cmluZ0J5U2l6ZSA9IGZ1bmN0aW9uIChzdHIsIHNlZ3NpemUpIHtcclxuICAgIHZhciBsZW4gPSBzdHIubGVuZ3RoO1xyXG4gICAgaWYgKGxlbiA8PSBzZWdzaXplKSB7XHJcbiAgICAgICAgcmV0dXJuIFtzdHJdO1xyXG4gICAgfVxyXG4gICAgdmFyIGRhdGFTZWdzID0gW107XHJcbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IGxlbjsgYyArPSBzZWdzaXplKSB7XHJcbiAgICAgICAgaWYgKGMgKyBzZWdzaXplID4gbGVuKSB7XHJcbiAgICAgICAgICAgIGRhdGFTZWdzLnB1c2goc3RyLnN1YnN0cmluZyhjLCBsZW4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRhdGFTZWdzLnB1c2goc3RyLnN1YnN0cmluZyhjLCBjICsgc2Vnc2l6ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhU2VncztcclxufTtcclxuLyoqXHJcbiAqIEFwcGx5IGEgZnVuY3Rpb24gdG8gZWFjaCAoa2V5LCB2YWx1ZSkgcGFpciBpbiBhbiBvYmplY3Qgb3JcclxuICogYXBwbHkgYSBmdW5jdGlvbiB0byBlYWNoIChpbmRleCwgdmFsdWUpIHBhaXIgaW4gYW4gYXJyYXlcclxuICogQHBhcmFtIHshKE9iamVjdHxBcnJheSl9IG9iaiBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGl0ZXJhdGUgb3ZlclxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8sID8pfSBmbiBUaGUgZnVuY3Rpb24gdG8gYXBwbHlcclxuICovXHJcbnZhciBlYWNoID0gZnVuY3Rpb24gKG9iaiwgZm4pIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBmbihpLCBvYmpbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGluIHRoZSBjb252ZXJzaW9uIG9mIGNvZGUgd2UgcmVtb3ZlZCB0aGUgZ29vZy5vYmplY3QuZm9yRWFjaFxyXG4gICAgICAgICAqIGZ1bmN0aW9uIHdoaWNoIGRpZCBhIHZhbHVlLGtleSBjYWxsYmFjay4gV2Ugc3RhbmRhcmRpemVkIG9uXHJcbiAgICAgICAgICogYSBzaW5nbGUgaW1wbCB0aGF0IGRvZXMgYSBrZXksIHZhbHVlIGNhbGxiYWNrLiBTbyB3ZSBpbnZlcnRcclxuICAgICAgICAgKiB0byBub3QgaGF2ZSB0byB0b3VjaCB0aGUgYGVhY2hgIGNvZGUgcG9pbnRzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXRpbC5mb3JFYWNoKG9iaiwgZnVuY3Rpb24gKGtleSwgdmFsKSB7IHJldHVybiBmbih2YWwsIGtleSk7IH0pO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogQm9ycm93ZWQgZnJvbSBodHRwOi8vaGcuc2Vjb25kbGlmZS5jb20vbGxzZC9zcmMvdGlwL2pzL3R5cGVkYXJyYXkuanMgKE1JVCBMaWNlbnNlKVxyXG4gKiBJIG1hZGUgb25lIG1vZGlmaWNhdGlvbiBhdCB0aGUgZW5kIGFuZCByZW1vdmVkIHRoZSBOYU4gLyBJbmZpbml0eVxyXG4gKiBoYW5kbGluZyAoc2luY2UgaXQgc2VlbWVkIGJyb2tlbiBbY2F1c2VkIGFuIG92ZXJmbG93XSBhbmQgd2UgZG9uJ3QgbmVlZCBpdCkuICBTZWUgTUpMIGNvbW1lbnRzLlxyXG4gKiBAcGFyYW0geyFudW1iZXJ9IHYgQSBkb3VibGVcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxudmFyIGRvdWJsZVRvSUVFRTc1NFN0cmluZyA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICB1dGlsLmFzc2VydCghaXNJbnZhbGlkSlNPTk51bWJlcih2KSwgJ0ludmFsaWQgSlNPTiBudW1iZXInKTsgLy8gTUpMXHJcbiAgICB2YXIgZWJpdHMgPSAxMSwgZmJpdHMgPSA1MjtcclxuICAgIHZhciBiaWFzID0gKDEgPDwgKGViaXRzIC0gMSkpIC0gMSwgcywgZSwgZiwgbG4sIGksIGJpdHMsIHN0cjtcclxuICAgIC8vIENvbXB1dGUgc2lnbiwgZXhwb25lbnQsIGZyYWN0aW9uXHJcbiAgICAvLyBTa2lwIE5hTiAvIEluZmluaXR5IGhhbmRsaW5nIC0tTUpMLlxyXG4gICAgaWYgKHYgPT09IDApIHtcclxuICAgICAgICBlID0gMDtcclxuICAgICAgICBmID0gMDtcclxuICAgICAgICBzID0gMSAvIHYgPT09IC1JbmZpbml0eSA/IDEgOiAwO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcyA9IHYgPCAwO1xyXG4gICAgICAgIHYgPSBNYXRoLmFicyh2KTtcclxuICAgICAgICBpZiAodiA+PSBNYXRoLnBvdygyLCAxIC0gYmlhcykpIHtcclxuICAgICAgICAgICAgLy8gTm9ybWFsaXplZFxyXG4gICAgICAgICAgICBsbiA9IE1hdGgubWluKE1hdGguZmxvb3IoTWF0aC5sb2codikgLyBNYXRoLkxOMiksIGJpYXMpO1xyXG4gICAgICAgICAgICBlID0gbG4gKyBiaWFzO1xyXG4gICAgICAgICAgICBmID0gTWF0aC5yb3VuZCh2ICogTWF0aC5wb3coMiwgZmJpdHMgLSBsbikgLSBNYXRoLnBvdygyLCBmYml0cykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gRGVub3JtYWxpemVkXHJcbiAgICAgICAgICAgIGUgPSAwO1xyXG4gICAgICAgICAgICBmID0gTWF0aC5yb3VuZCh2IC8gTWF0aC5wb3coMiwgMSAtIGJpYXMgLSBmYml0cykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIFBhY2sgc2lnbiwgZXhwb25lbnQsIGZyYWN0aW9uXHJcbiAgICBiaXRzID0gW107XHJcbiAgICBmb3IgKGkgPSBmYml0czsgaTsgaSAtPSAxKSB7XHJcbiAgICAgICAgYml0cy5wdXNoKGYgJSAyID8gMSA6IDApO1xyXG4gICAgICAgIGYgPSBNYXRoLmZsb29yKGYgLyAyKTtcclxuICAgIH1cclxuICAgIGZvciAoaSA9IGViaXRzOyBpOyBpIC09IDEpIHtcclxuICAgICAgICBiaXRzLnB1c2goZSAlIDIgPyAxIDogMCk7XHJcbiAgICAgICAgZSA9IE1hdGguZmxvb3IoZSAvIDIpO1xyXG4gICAgfVxyXG4gICAgYml0cy5wdXNoKHMgPyAxIDogMCk7XHJcbiAgICBiaXRzLnJldmVyc2UoKTtcclxuICAgIHN0ciA9IGJpdHMuam9pbignJyk7XHJcbiAgICAvLyBSZXR1cm4gdGhlIGRhdGEgYXMgYSBoZXggc3RyaW5nLiAtLU1KTFxyXG4gICAgdmFyIGhleEJ5dGVTdHJpbmcgPSAnJztcclxuICAgIGZvciAoaSA9IDA7IGkgPCA2NDsgaSArPSA4KSB7XHJcbiAgICAgICAgdmFyIGhleEJ5dGUgPSBwYXJzZUludChzdHIuc3Vic3RyKGksIDgpLCAyKS50b1N0cmluZygxNik7XHJcbiAgICAgICAgaWYgKGhleEJ5dGUubGVuZ3RoID09PSAxKVxyXG4gICAgICAgICAgICBoZXhCeXRlID0gJzAnICsgaGV4Qnl0ZTtcclxuICAgICAgICBoZXhCeXRlU3RyaW5nID0gaGV4Qnl0ZVN0cmluZyArIGhleEJ5dGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGV4Qnl0ZVN0cmluZy50b0xvd2VyQ2FzZSgpO1xyXG59O1xyXG4vKipcclxuICogVXNlZCB0byBkZXRlY3QgaWYgd2UncmUgaW4gYSBDaHJvbWUgY29udGVudCBzY3JpcHQgKHdoaWNoIGV4ZWN1dGVzIGluIGFuXHJcbiAqIGlzb2xhdGVkIGVudmlyb25tZW50IHdoZXJlIGxvbmctcG9sbGluZyBkb2Vzbid0IHdvcmspLlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzQ2hyb21lRXh0ZW5zaW9uQ29udGVudFNjcmlwdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAhISh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgIHdpbmRvd1snY2hyb21lJ10gJiZcclxuICAgICAgICB3aW5kb3dbJ2Nocm9tZSddWydleHRlbnNpb24nXSAmJlxyXG4gICAgICAgICEvXmNocm9tZS8udGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikpO1xyXG59O1xyXG4vKipcclxuICogVXNlZCB0byBkZXRlY3QgaWYgd2UncmUgaW4gYSBXaW5kb3dzIDggU3RvcmUgYXBwLlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzV2luZG93c1N0b3JlQXBwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gQ2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBhIGNvdXBsZSBXaW5SVCBnbG9iYWxzXHJcbiAgICByZXR1cm4gdHlwZW9mIFdpbmRvd3MgPT09ICdvYmplY3QnICYmIHR5cGVvZiBXaW5kb3dzLlVJID09PSAnb2JqZWN0JztcclxufTtcclxuLyoqXHJcbiAqIENvbnZlcnRzIGEgc2VydmVyIGVycm9yIGNvZGUgdG8gYSBKYXZhc2NyaXB0IEVycm9yXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gY29kZVxyXG4gKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlcclxuICogQHJldHVybiB7RXJyb3J9XHJcbiAqL1xyXG52YXIgZXJyb3JGb3JTZXJ2ZXJDb2RlID0gZnVuY3Rpb24gKGNvZGUsIHF1ZXJ5KSB7XHJcbiAgICB2YXIgcmVhc29uID0gJ1Vua25vd24gRXJyb3InO1xyXG4gICAgaWYgKGNvZGUgPT09ICd0b29fYmlnJykge1xyXG4gICAgICAgIHJlYXNvbiA9XHJcbiAgICAgICAgICAgICdUaGUgZGF0YSByZXF1ZXN0ZWQgZXhjZWVkcyB0aGUgbWF4aW11bSBzaXplICcgK1xyXG4gICAgICAgICAgICAgICAgJ3RoYXQgY2FuIGJlIGFjY2Vzc2VkIHdpdGggYSBzaW5nbGUgcmVxdWVzdC4nO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY29kZSA9PSAncGVybWlzc2lvbl9kZW5pZWQnKSB7XHJcbiAgICAgICAgcmVhc29uID0gXCJDbGllbnQgZG9lc24ndCBoYXZlIHBlcm1pc3Npb24gdG8gYWNjZXNzIHRoZSBkZXNpcmVkIGRhdGEuXCI7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChjb2RlID09ICd1bmF2YWlsYWJsZScpIHtcclxuICAgICAgICByZWFzb24gPSAnVGhlIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUnO1xyXG4gICAgfVxyXG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGNvZGUgKyAnIGF0ICcgKyBxdWVyeS5wYXRoLnRvU3RyaW5nKCkgKyAnOiAnICsgcmVhc29uKTtcclxuICAgIGVycm9yLmNvZGUgPSBjb2RlLnRvVXBwZXJDYXNlKCk7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn07XHJcbi8qKlxyXG4gKiBVc2VkIHRvIHRlc3QgZm9yIGludGVnZXItbG9va2luZyBzdHJpbmdzXHJcbiAqIEB0eXBlIHtSZWdFeHB9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG52YXIgSU5URUdFUl9SRUdFWFBfID0gbmV3IFJlZ0V4cCgnXi0/XFxcXGR7MSwxMH0kJyk7XHJcbi8qKlxyXG4gKiBJZiB0aGUgc3RyaW5nIGNvbnRhaW5zIGEgMzItYml0IGludGVnZXIsIHJldHVybiBpdC4gIEVsc2UgcmV0dXJuIG51bGwuXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4gez9udW1iZXJ9XHJcbiAqL1xyXG52YXIgdHJ5UGFyc2VJbnQgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBpZiAoSU5URUdFUl9SRUdFWFBfLnRlc3Qoc3RyKSkge1xyXG4gICAgICAgIHZhciBpbnRWYWwgPSBOdW1iZXIoc3RyKTtcclxuICAgICAgICBpZiAoaW50VmFsID49IC0yMTQ3NDgzNjQ4ICYmIGludFZhbCA8PSAyMTQ3NDgzNjQ3KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnRWYWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcbi8qKlxyXG4gKiBIZWxwZXIgdG8gcnVuIHNvbWUgY29kZSBidXQgY2F0Y2ggYW55IGV4Y2VwdGlvbnMgYW5kIHJlLXRocm93IHRoZW0gbGF0ZXIuXHJcbiAqIFVzZWZ1bCBmb3IgcHJldmVudGluZyB1c2VyIGNhbGxiYWNrcyBmcm9tIGJyZWFraW5nIGludGVybmFsIGNvZGUuXHJcbiAqXHJcbiAqIFJlLXRocm93aW5nIHRoZSBleGNlcHRpb24gZnJvbSBhIHNldFRpbWVvdXQgaXMgYSBsaXR0bGUgZXZpbCwgYnV0IGl0J3MgdmVyeVxyXG4gKiBjb252ZW5pZW50ICh3ZSBkb24ndCBoYXZlIHRvIHRyeSB0byBmaWd1cmUgb3V0IHdoZW4gaXMgYSBzYWZlIHBvaW50IHRvXHJcbiAqIHJlLXRocm93IGl0KSwgYW5kIHRoZSBiZWhhdmlvciBzZWVtcyByZWFzb25hYmxlOlxyXG4gKlxyXG4gKiAqIElmIHlvdSBhcmVuJ3QgcGF1c2luZyBvbiBleGNlcHRpb25zLCB5b3UgZ2V0IGFuIGVycm9yIGluIHRoZSBjb25zb2xlIHdpdGhcclxuICogICB0aGUgY29ycmVjdCBzdGFjayB0cmFjZS5cclxuICogKiBJZiB5b3UncmUgcGF1c2luZyBvbiBhbGwgZXhjZXB0aW9ucywgdGhlIGRlYnVnZ2VyIHdpbGwgcGF1c2Ugb24geW91clxyXG4gKiAgIGV4Y2VwdGlvbiBhbmQgdGhlbiBhZ2FpbiB3aGVuIHdlIHJldGhyb3cgaXQuXHJcbiAqICogSWYgeW91J3JlIG9ubHkgcGF1c2luZyBvbiB1bmNhdWdodCBleGNlcHRpb25zLCB0aGUgZGVidWdnZXIgd2lsbCBvbmx5IHBhdXNlXHJcbiAqICAgb24gdXMgcmUtdGhyb3dpbmcgaXQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7IWZ1bmN0aW9uKCl9IGZuIFRoZSBjb2RlIHRvIGd1YXJkLlxyXG4gKi9cclxudmFyIGV4Y2VwdGlvbkd1YXJkID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGZuKCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIFJlLXRocm93IGV4Y2VwdGlvbiB3aGVuIGl0J3Mgc2FmZS5cclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gSXQgdXNlZCB0byBiZSB0aGF0IFwidGhyb3cgZVwiIHdvdWxkIHJlc3VsdCBpbiBhIGdvb2QgY29uc29sZSBlcnJvciB3aXRoXHJcbiAgICAgICAgICAgIC8vIHJlbGV2YW50IGNvbnRleHQsIGJ1dCBhcyBvZiBDaHJvbWUgMzksIHlvdSBqdXN0IGdldCB0aGUgZmlyZWJhc2UuanNcclxuICAgICAgICAgICAgLy8gZmlsZS9saW5lIG51bWJlciB3aGVyZSB3ZSByZS10aHJvdyBpdCwgd2hpY2ggaXMgdXNlbGVzcy4gU28gd2UgbG9nXHJcbiAgICAgICAgICAgIC8vIGUuc3RhY2sgZXhwbGljaXRseS5cclxuICAgICAgICAgICAgdmFyIHN0YWNrID0gZS5zdGFjayB8fCAnJztcclxuICAgICAgICAgICAgd2FybignRXhjZXB0aW9uIHdhcyB0aHJvd24gYnkgdXNlciBjYWxsYmFjay4nLCBzdGFjayk7XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfSwgTWF0aC5mbG9vcigwKSk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHdlIHRoaW5rIHdlJ3JlIGN1cnJlbnRseSBiZWluZyBjcmF3bGVkLlxyXG4gKi9cclxudmFyIGJlaW5nQ3Jhd2xlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB1c2VyQWdlbnQgPSAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICB3aW5kb3dbJ25hdmlnYXRvciddICYmXHJcbiAgICAgICAgd2luZG93WyduYXZpZ2F0b3InXVsndXNlckFnZW50J10pIHx8XHJcbiAgICAgICAgJyc7XHJcbiAgICAvLyBGb3Igbm93IHdlIHdoaXRlbGlzdCB0aGUgbW9zdCBwb3B1bGFyIGNyYXdsZXJzLiAgV2Ugc2hvdWxkIHJlZmluZSB0aGlzIHRvIGJlIHRoZSBzZXQgb2YgY3Jhd2xlcnMgd2VcclxuICAgIC8vIGJlbGlldmUgdG8gc3VwcG9ydCBKYXZhU2NyaXB0L0FKQVggcmVuZGVyaW5nLlxyXG4gICAgLy8gTk9URTogR29vZ2xlIFdlYm1hc3RlciBUb29scyBkb2Vzbid0IHJlYWxseSBiZWxvbmcsIGJ1dCB0aGVpciBcIlRoaXMgaXMgaG93IGEgdmlzaXRvciB0byB5b3VyIHdlYnNpdGVcclxuICAgIC8vIHdvdWxkIGhhdmUgc2VlbiB0aGUgcGFnZVwiIGlzIGZsYWt5IGlmIHdlIGRvbid0IHRyZWF0IGl0IGFzIGEgY3Jhd2xlci5cclxuICAgIHJldHVybiAodXNlckFnZW50LnNlYXJjaCgvZ29vZ2xlYm90fGdvb2dsZSB3ZWJtYXN0ZXIgdG9vbHN8YmluZ2JvdHx5YWhvbyEgc2x1cnB8YmFpZHVzcGlkZXJ8eWFuZGV4Ym90fGR1Y2tkdWNrYm90L2kpID49IDApO1xyXG59O1xyXG4vKipcclxuICogU2FtZSBhcyBzZXRUaW1lb3V0KCkgZXhjZXB0IG9uIE5vZGUuSlMgaXQgd2lsbCAvbm90LyBwcmV2ZW50IHRoZSBwcm9jZXNzIGZyb20gZXhpdGluZy5cclxuICpcclxuICogSXQgaXMgcmVtb3ZlZCB3aXRoIGNsZWFyVGltZW91dCgpIGFzIG5vcm1hbC5cclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gcnVuLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZSBNaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgcnVubmluZy5cclxuICogQHJldHVybiB7bnVtYmVyfE9iamVjdH0gVGhlIHNldFRpbWVvdXQoKSByZXR1cm4gdmFsdWUuXHJcbiAqL1xyXG52YXIgc2V0VGltZW91dE5vbkJsb2NraW5nID0gZnVuY3Rpb24gKGZuLCB0aW1lKSB7XHJcbiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZm4sIHRpbWUpO1xyXG4gICAgaWYgKHR5cGVvZiB0aW1lb3V0ID09PSAnb2JqZWN0JyAmJiB0aW1lb3V0Wyd1bnJlZiddKSB7XHJcbiAgICAgICAgdGltZW91dFsndW5yZWYnXSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRpbWVvdXQ7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQW4gaW1tdXRhYmxlIG9iamVjdCByZXByZXNlbnRpbmcgYSBwYXJzZWQgcGF0aC4gIEl0J3MgaW1tdXRhYmxlIHNvIHRoYXQgeW91XHJcbiAqIGNhbiBwYXNzIHRoZW0gYXJvdW5kIHRvIG90aGVyIGZ1bmN0aW9ucyB3aXRob3V0IHdvcnJ5aW5nIGFib3V0IHRoZW0gY2hhbmdpbmdcclxuICogaXQuXHJcbiAqL1xyXG52YXIgUGF0aCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXkuPHN0cmluZz59IHBhdGhPclN0cmluZyBQYXRoIHN0cmluZyB0byBwYXJzZSxcclxuICAgICAqICAgICAgb3IgYW5vdGhlciBwYXRoLCBvciB0aGUgcmF3IHRva2VucyBhcnJheVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBwaWVjZU51bVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBQYXRoKHBhdGhPclN0cmluZywgcGllY2VOdW0pIHtcclxuICAgICAgICBpZiAocGllY2VOdW0gPT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnBpZWNlc18gPSBwYXRoT3JTdHJpbmcuc3BsaXQoJy8nKTtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGVtcHR5IHBpZWNlcy5cclxuICAgICAgICAgICAgdmFyIGNvcHlUbyA9IDA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5waWVjZXNfLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5waWVjZXNfW2ldLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBpZWNlc19bY29weVRvXSA9IHRoaXMucGllY2VzX1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb3B5VG8rKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnBpZWNlc18ubGVuZ3RoID0gY29weVRvO1xyXG4gICAgICAgICAgICB0aGlzLnBpZWNlTnVtXyA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBpZWNlc18gPSBwYXRoT3JTdHJpbmc7XHJcbiAgICAgICAgICAgIHRoaXMucGllY2VOdW1fID0gcGllY2VOdW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBhdGgsIFwiRW1wdHlcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNpbmdsZXRvbiB0byByZXByZXNlbnQgYW4gZW1wdHkgcGF0aFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGNvbnN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGF0aCgnJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBQYXRoLnByb3RvdHlwZS5nZXRGcm9udCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5waWVjZU51bV8gPj0gdGhpcy5waWVjZXNfLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGllY2VzX1t0aGlzLnBpZWNlTnVtX107XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2Ygc2VnbWVudHMgaW4gdGhpcyBwYXRoXHJcbiAgICAgKi9cclxuICAgIFBhdGgucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5waWVjZXNfLmxlbmd0aCAtIHRoaXMucGllY2VOdW1fO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IVBhdGh9XHJcbiAgICAgKi9cclxuICAgIFBhdGgucHJvdG90eXBlLnBvcEZyb250ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwaWVjZU51bSA9IHRoaXMucGllY2VOdW1fO1xyXG4gICAgICAgIGlmIChwaWVjZU51bSA8IHRoaXMucGllY2VzXy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcGllY2VOdW0rKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYXRoKHRoaXMucGllY2VzXywgcGllY2VOdW0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgUGF0aC5wcm90b3R5cGUuZ2V0QmFjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5waWVjZU51bV8gPCB0aGlzLnBpZWNlc18ubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5waWVjZXNfW3RoaXMucGllY2VzXy5sZW5ndGggLSAxXTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBQYXRoLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcGF0aFN0cmluZyA9ICcnO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnBpZWNlTnVtXzsgaSA8IHRoaXMucGllY2VzXy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5waWVjZXNfW2ldICE9PSAnJylcclxuICAgICAgICAgICAgICAgIHBhdGhTdHJpbmcgKz0gJy8nICsgdGhpcy5waWVjZXNfW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGF0aFN0cmluZyB8fCAnLyc7XHJcbiAgICB9O1xyXG4gICAgUGF0aC5wcm90b3R5cGUudG9VcmxFbmNvZGVkU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwYXRoU3RyaW5nID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMucGllY2VOdW1fOyBpIDwgdGhpcy5waWVjZXNfLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBpZWNlc19baV0gIT09ICcnKVxyXG4gICAgICAgICAgICAgICAgcGF0aFN0cmluZyArPSAnLycgKyBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHRoaXMucGllY2VzX1tpXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGF0aFN0cmluZyB8fCAnLyc7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTaGFsbG93IGNvcHkgb2YgdGhlIHBhcnRzIG9mIHRoZSBwYXRoLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW5cclxuICAgICAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxyXG4gICAgICovXHJcbiAgICBQYXRoLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChiZWdpbikge1xyXG4gICAgICAgIGlmIChiZWdpbiA9PT0gdm9pZCAwKSB7IGJlZ2luID0gMDsgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnBpZWNlc18uc2xpY2UodGhpcy5waWVjZU51bV8gKyBiZWdpbik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/UGF0aH1cclxuICAgICAqL1xyXG4gICAgUGF0aC5wcm90b3R5cGUucGFyZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBpZWNlTnVtXyA+PSB0aGlzLnBpZWNlc18ubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB2YXIgcGllY2VzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMucGllY2VOdW1fOyBpIDwgdGhpcy5waWVjZXNfLmxlbmd0aCAtIDE7IGkrKylcclxuICAgICAgICAgICAgcGllY2VzLnB1c2godGhpcy5waWVjZXNfW2ldKTtcclxuICAgICAgICByZXR1cm4gbmV3IFBhdGgocGllY2VzLCAwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfCFQYXRofSBjaGlsZFBhdGhPYmpcclxuICAgICAqIEByZXR1cm4geyFQYXRofVxyXG4gICAgICovXHJcbiAgICBQYXRoLnByb3RvdHlwZS5jaGlsZCA9IGZ1bmN0aW9uIChjaGlsZFBhdGhPYmopIHtcclxuICAgICAgICB2YXIgcGllY2VzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMucGllY2VOdW1fOyBpIDwgdGhpcy5waWVjZXNfLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICBwaWVjZXMucHVzaCh0aGlzLnBpZWNlc19baV0pO1xyXG4gICAgICAgIGlmIChjaGlsZFBhdGhPYmogaW5zdGFuY2VvZiBQYXRoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjaGlsZFBhdGhPYmoucGllY2VOdW1fOyBpIDwgY2hpbGRQYXRoT2JqLnBpZWNlc18ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKGNoaWxkUGF0aE9iai5waWVjZXNfW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkUGllY2VzID0gY2hpbGRQYXRoT2JqLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRQaWVjZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZFBpZWNlc1tpXS5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKGNoaWxkUGllY2VzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFBhdGgocGllY2VzLCAwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlcmUgYXJlIG5vIHNlZ21lbnRzIGluIHRoaXMgcGF0aFxyXG4gICAgICovXHJcbiAgICBQYXRoLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBpZWNlTnVtXyA+PSB0aGlzLnBpZWNlc18ubGVuZ3RoO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gb3V0ZXJQYXRoXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBpbm5lclBhdGhcclxuICAgICAqIEByZXR1cm4geyFQYXRofSBUaGUgcGF0aCBmcm9tIG91dGVyUGF0aCB0byBpbm5lclBhdGhcclxuICAgICAqL1xyXG4gICAgUGF0aC5yZWxhdGl2ZVBhdGggPSBmdW5jdGlvbiAob3V0ZXJQYXRoLCBpbm5lclBhdGgpIHtcclxuICAgICAgICB2YXIgb3V0ZXIgPSBvdXRlclBhdGguZ2V0RnJvbnQoKSwgaW5uZXIgPSBpbm5lclBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICBpZiAob3V0ZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlubmVyUGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob3V0ZXIgPT09IGlubmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQYXRoLnJlbGF0aXZlUGF0aChvdXRlclBhdGgucG9wRnJvbnQoKSwgaW5uZXJQYXRoLnBvcEZyb250KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJTlRFUk5BTCBFUlJPUjogaW5uZXJQYXRoICgnICtcclxuICAgICAgICAgICAgICAgIGlubmVyUGF0aCArXHJcbiAgICAgICAgICAgICAgICAnKSBpcyBub3Qgd2l0aGluICcgK1xyXG4gICAgICAgICAgICAgICAgJ291dGVyUGF0aCAoJyArXHJcbiAgICAgICAgICAgICAgICBvdXRlclBhdGggK1xyXG4gICAgICAgICAgICAgICAgJyknKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBsZWZ0XHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSByaWdodFxyXG4gICAgICogQHJldHVybiB7bnVtYmVyfSAtMSwgMCwgMSBpZiBsZWZ0IGlzIGxlc3MsIGVxdWFsLCBvciBncmVhdGVyIHRoYW4gdGhlIHJpZ2h0LlxyXG4gICAgICovXHJcbiAgICBQYXRoLmNvbXBhcmVQYXRocyA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xyXG4gICAgICAgIHZhciBsZWZ0S2V5cyA9IGxlZnQuc2xpY2UoKTtcclxuICAgICAgICB2YXIgcmlnaHRLZXlzID0gcmlnaHQuc2xpY2UoKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlZnRLZXlzLmxlbmd0aCAmJiBpIDwgcmlnaHRLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjbXAgPSBuYW1lQ29tcGFyZShsZWZ0S2V5c1tpXSwgcmlnaHRLZXlzW2ldKTtcclxuICAgICAgICAgICAgaWYgKGNtcCAhPT0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBjbXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZWZ0S2V5cy5sZW5ndGggPT09IHJpZ2h0S2V5cy5sZW5ndGgpXHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIHJldHVybiBsZWZ0S2V5cy5sZW5ndGggPCByaWdodEtleXMubGVuZ3RoID8gLTEgOiAxO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UGF0aH0gb3RoZXJcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgcGF0aHMgYXJlIHRoZSBzYW1lLlxyXG4gICAgICovXHJcbiAgICBQYXRoLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5nZXRMZW5ndGgoKSAhPT0gb3RoZXIuZ2V0TGVuZ3RoKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5waWVjZU51bV8sIGogPSBvdGhlci5waWVjZU51bV87IGkgPD0gdGhpcy5waWVjZXNfLmxlbmd0aDsgaSsrLCBqKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGllY2VzX1tpXSAhPT0gb3RoZXIucGllY2VzX1tqXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IG90aGVyXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoaXMgcGF0aCBpcyBhIHBhcmVudCAob3IgdGhlIHNhbWUgYXMpIG90aGVyXHJcbiAgICAgKi9cclxuICAgIFBhdGgucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgdmFyIGkgPSB0aGlzLnBpZWNlTnVtXztcclxuICAgICAgICB2YXIgaiA9IG90aGVyLnBpZWNlTnVtXztcclxuICAgICAgICBpZiAodGhpcy5nZXRMZW5ndGgoKSA+IG90aGVyLmdldExlbmd0aCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnBpZWNlc18ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBpZWNlc19baV0gIT09IG90aGVyLnBpZWNlc19bal0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgICsrajtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBhdGg7XHJcbn0oKSk7IC8vIGVuZCBQYXRoXHJcbi8qKlxyXG4gKiBEeW5hbWljIChtdXRhYmxlKSBwYXRoIHVzZWQgdG8gY291bnQgcGF0aCBsZW5ndGhzLlxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIGlzIHVzZWQgdG8gZWZmaWNpZW50bHkgY2hlY2sgcGF0aHMgZm9yIHZhbGlkXHJcbiAqIGxlbmd0aCAoaW4gVVRGOCBieXRlcykgYW5kIGRlcHRoICh1c2VkIGluIHBhdGggdmFsaWRhdGlvbikuXHJcbiAqXHJcbiAqIFRocm93cyBFcnJvciBleGNlcHRpb24gaWYgcGF0aCBpcyBldmVyIGludmFsaWQuXHJcbiAqXHJcbiAqIFRoZSBkZWZpbml0aW9uIG9mIGEgcGF0aCBhbHdheXMgYmVnaW5zIHdpdGggJy8nLlxyXG4gKi9cclxudmFyIFZhbGlkYXRpb25QYXRoID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoIEluaXRpYWwgUGF0aC5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvclByZWZpeF8gUHJlZml4IGZvciBhbnkgZXJyb3IgbWVzc2FnZXMuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFZhbGlkYXRpb25QYXRoKHBhdGgsIGVycm9yUHJlZml4Xykge1xyXG4gICAgICAgIHRoaXMuZXJyb3JQcmVmaXhfID0gZXJyb3JQcmVmaXhfO1xyXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovXHJcbiAgICAgICAgdGhpcy5wYXJ0c18gPSBwYXRoLnNsaWNlKCk7XHJcbiAgICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9IEluaXRpYWxpemUgdG8gbnVtYmVyIG9mICcvJyBjaGFycyBuZWVkZWQgaW4gcGF0aC4gKi9cclxuICAgICAgICB0aGlzLmJ5dGVMZW5ndGhfID0gTWF0aC5tYXgoMSwgdGhpcy5wYXJ0c18ubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGFydHNfLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZUxlbmd0aF8gKz0gdXRpbC5zdHJpbmdMZW5ndGgodGhpcy5wYXJ0c19baV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoZWNrVmFsaWRfKCk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmFsaWRhdGlvblBhdGgsIFwiTUFYX1BBVEhfREVQVEhcIiwge1xyXG4gICAgICAgIC8qKiBAY29uc3Qge251bWJlcn0gTWF4aW11bSBrZXkgZGVwdGguICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAzMjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWYWxpZGF0aW9uUGF0aCwgXCJNQVhfUEFUSF9MRU5HVEhfQllURVNcIiwge1xyXG4gICAgICAgIC8qKiBAY29uc3Qge251bWJlcn0gTWF4aW11bSBudW1iZXIgb2YgKFVURjgpIGJ5dGVzIGluIGEgRmlyZWJhc2UgcGF0aC4gKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDc2ODtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKiBAcGFyYW0ge3N0cmluZ30gY2hpbGQgKi9cclxuICAgIFZhbGlkYXRpb25QYXRoLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgLy8gQ291bnQgdGhlIG5lZWRlZCAnLydcclxuICAgICAgICBpZiAodGhpcy5wYXJ0c18ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ5dGVMZW5ndGhfICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFydHNfLnB1c2goY2hpbGQpO1xyXG4gICAgICAgIHRoaXMuYnl0ZUxlbmd0aF8gKz0gdXRpbC5zdHJpbmdMZW5ndGgoY2hpbGQpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tWYWxpZF8oKTtcclxuICAgIH07XHJcbiAgICBWYWxpZGF0aW9uUGF0aC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBsYXN0ID0gdGhpcy5wYXJ0c18ucG9wKCk7XHJcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoXyAtPSB1dGlsLnN0cmluZ0xlbmd0aChsYXN0KTtcclxuICAgICAgICAvLyBVbi1jb3VudCB0aGUgcHJldmlvdXMgJy8nXHJcbiAgICAgICAgaWYgKHRoaXMucGFydHNfLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5ieXRlTGVuZ3RoXyAtPSAxO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBWYWxpZGF0aW9uUGF0aC5wcm90b3R5cGUuY2hlY2tWYWxpZF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYnl0ZUxlbmd0aF8gPiBWYWxpZGF0aW9uUGF0aC5NQVhfUEFUSF9MRU5HVEhfQllURVMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuZXJyb3JQcmVmaXhfICtcclxuICAgICAgICAgICAgICAgICdoYXMgYSBrZXkgcGF0aCBsb25nZXIgdGhhbiAnICtcclxuICAgICAgICAgICAgICAgIFZhbGlkYXRpb25QYXRoLk1BWF9QQVRIX0xFTkdUSF9CWVRFUyArXHJcbiAgICAgICAgICAgICAgICAnIGJ5dGVzICgnICtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZUxlbmd0aF8gK1xyXG4gICAgICAgICAgICAgICAgJykuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnBhcnRzXy5sZW5ndGggPiBWYWxpZGF0aW9uUGF0aC5NQVhfUEFUSF9ERVBUSCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5lcnJvclByZWZpeF8gK1xyXG4gICAgICAgICAgICAgICAgJ3BhdGggc3BlY2lmaWVkIGV4Y2VlZHMgdGhlIG1heGltdW0gZGVwdGggdGhhdCBjYW4gYmUgd3JpdHRlbiAoJyArXHJcbiAgICAgICAgICAgICAgICBWYWxpZGF0aW9uUGF0aC5NQVhfUEFUSF9ERVBUSCArXHJcbiAgICAgICAgICAgICAgICAnKSBvciBvYmplY3QgY29udGFpbnMgYSBjeWNsZSAnICtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9FcnJvclN0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdHJpbmcgZm9yIHVzZSBpbiBlcnJvciBtZXNzYWdlcyAtIHVzZXMgJy4nIG5vdGF0aW9uIGZvciBwYXRoLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgVmFsaWRhdGlvblBhdGgucHJvdG90eXBlLnRvRXJyb3JTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFydHNfLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiaW4gcHJvcGVydHkgJ1wiICsgdGhpcy5wYXJ0c18uam9pbignLicpICsgXCInXCI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZhbGlkYXRpb25QYXRoO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIFBST1RPQ09MX1ZFUlNJT04gPSAnNSc7XHJcbnZhciBWRVJTSU9OX1BBUkFNID0gJ3YnO1xyXG52YXIgVFJBTlNQT1JUX1NFU1NJT05fUEFSQU0gPSAncyc7XHJcbnZhciBSRUZFUkVSX1BBUkFNID0gJ3InO1xyXG52YXIgRk9SR0VfUkVGID0gJ2YnO1xyXG52YXIgRk9SR0VfRE9NQUlOID0gJ2ZpcmViYXNlaW8uY29tJztcclxudmFyIExBU1RfU0VTU0lPTl9QQVJBTSA9ICdscyc7XHJcbnZhciBXRUJTT0NLRVQgPSAnd2Vic29ja2V0JztcclxudmFyIExPTkdfUE9MTElORyA9ICdsb25nX3BvbGxpbmcnO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgY2xhc3MgdGhhdCBob2xkcyBtZXRhZGF0YSBhYm91dCBhIFJlcG8gb2JqZWN0XHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFJlcG9JbmZvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaG9zdCBIb3N0bmFtZSBwb3J0aW9uIG9mIHRoZSB1cmwgZm9yIHRoZSByZXBvXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNlY3VyZSBXaGV0aGVyIG9yIG5vdCB0aGlzIHJlcG8gaXMgYWNjZXNzZWQgb3ZlciBzc2xcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSByZXByZXNlbnRlZCBieSB0aGUgcmVwb1xyXG4gICAgICogQHBhcmFtIHtib29sZWFufSB3ZWJTb2NrZXRPbmx5IFdoZXRoZXIgdG8gcHJlZmVyIHdlYnNvY2tldHMgb3ZlciBhbGwgb3RoZXIgdHJhbnNwb3J0cyAodXNlZCBieSBOZXN0KS5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcGVyc2lzdGVuY2VLZXkgT3ZlcnJpZGUgdGhlIGRlZmF1bHQgc2Vzc2lvbiBwZXJzaXN0ZW5jZSBzdG9yYWdlIGtleVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXBvSW5mbyhob3N0LCBzZWN1cmUsIG5hbWVzcGFjZSwgd2ViU29ja2V0T25seSwgcGVyc2lzdGVuY2VLZXkpIHtcclxuICAgICAgICBpZiAocGVyc2lzdGVuY2VLZXkgPT09IHZvaWQgMCkgeyBwZXJzaXN0ZW5jZUtleSA9ICcnOyB9XHJcbiAgICAgICAgdGhpcy5zZWN1cmUgPSBzZWN1cmU7XHJcbiAgICAgICAgdGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRPbmx5ID0gd2ViU29ja2V0T25seTtcclxuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlS2V5ID0gcGVyc2lzdGVuY2VLZXk7XHJcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHRoaXMuZG9tYWluID0gdGhpcy5ob3N0LnN1YnN0cih0aGlzLmhvc3QuaW5kZXhPZignLicpICsgMSk7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbEhvc3QgPSBQZXJzaXN0ZW50U3RvcmFnZS5nZXQoJ2hvc3Q6JyArIGhvc3QpIHx8IHRoaXMuaG9zdDtcclxuICAgIH1cclxuICAgIFJlcG9JbmZvLnByb3RvdHlwZS5uZWVkc1F1ZXJ5UGFyYW0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdCAhPT0gdGhpcy5pbnRlcm5hbEhvc3QgfHwgdGhpcy5pc0N1c3RvbUhvc3QoKTtcclxuICAgIH07XHJcbiAgICBSZXBvSW5mby5wcm90b3R5cGUuaXNDYWNoZWFibGVIb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsSG9zdC5zdWJzdHIoMCwgMikgPT09ICdzLSc7XHJcbiAgICB9O1xyXG4gICAgUmVwb0luZm8ucHJvdG90eXBlLmlzRGVtb0hvc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tYWluID09PSAnZmlyZWJhc2Vpby1kZW1vLmNvbSc7XHJcbiAgICB9O1xyXG4gICAgUmVwb0luZm8ucHJvdG90eXBlLmlzQ3VzdG9tSG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuZG9tYWluICE9PSAnZmlyZWJhc2Vpby5jb20nICYmIHRoaXMuZG9tYWluICE9PSAnZmlyZWJhc2Vpby1kZW1vLmNvbScpO1xyXG4gICAgfTtcclxuICAgIFJlcG9JbmZvLnByb3RvdHlwZS51cGRhdGVIb3N0ID0gZnVuY3Rpb24gKG5ld0hvc3QpIHtcclxuICAgICAgICBpZiAobmV3SG9zdCAhPT0gdGhpcy5pbnRlcm5hbEhvc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbEhvc3QgPSBuZXdIb3N0O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0NhY2hlYWJsZUhvc3QoKSkge1xyXG4gICAgICAgICAgICAgICAgUGVyc2lzdGVudFN0b3JhZ2Uuc2V0KCdob3N0OicgKyB0aGlzLmhvc3QsIHRoaXMuaW50ZXJuYWxIb3N0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHdlYnNvY2tldCBVUkwgZm9yIHRoaXMgcmVwb1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgb2YgY29ubmVjdGlvblxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBsaXN0XHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVUkwgZm9yIHRoaXMgcmVwb1xyXG4gICAgICovXHJcbiAgICBSZXBvSW5mby5wcm90b3R5cGUuY29ubmVjdGlvblVSTCA9IGZ1bmN0aW9uICh0eXBlLCBwYXJhbXMpIHtcclxuICAgICAgICB1dGlsLmFzc2VydCh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycsICd0eXBlb2YgdHlwZSBtdXN0ID09IHN0cmluZycpO1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHR5cGVvZiBwYXJhbXMgPT09ICdvYmplY3QnLCAndHlwZW9mIHBhcmFtcyBtdXN0ID09IG9iamVjdCcpO1xyXG4gICAgICAgIHZhciBjb25uVVJMO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBXRUJTT0NLRVQpIHtcclxuICAgICAgICAgICAgY29ublVSTCA9XHJcbiAgICAgICAgICAgICAgICAodGhpcy5zZWN1cmUgPyAnd3NzOi8vJyA6ICd3czovLycpICsgdGhpcy5pbnRlcm5hbEhvc3QgKyAnLy53cz8nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSBMT05HX1BPTExJTkcpIHtcclxuICAgICAgICAgICAgY29ublVSTCA9XHJcbiAgICAgICAgICAgICAgICAodGhpcy5zZWN1cmUgPyAnaHR0cHM6Ly8nIDogJ2h0dHA6Ly8nKSArIHRoaXMuaW50ZXJuYWxIb3N0ICsgJy8ubHA/JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBjb25uZWN0aW9uIHR5cGU6ICcgKyB0eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubmVlZHNRdWVyeVBhcmFtKCkpIHtcclxuICAgICAgICAgICAgcGFyYW1zWyducyddID0gdGhpcy5uYW1lc3BhY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwYWlycyA9IFtdO1xyXG4gICAgICAgIHV0aWwuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHBhaXJzLnB1c2goa2V5ICsgJz0nICsgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjb25uVVJMICsgcGFpcnMuam9pbignJicpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAcmV0dXJuIHtzdHJpbmd9ICovXHJcbiAgICBSZXBvSW5mby5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHN0ciA9IHRoaXMudG9VUkxTdHJpbmcoKTtcclxuICAgICAgICBpZiAodGhpcy5wZXJzaXN0ZW5jZUtleSkge1xyXG4gICAgICAgICAgICBzdHIgKz0gJzwnICsgdGhpcy5wZXJzaXN0ZW5jZUtleSArICc+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH07XHJcbiAgICAvKiogQHJldHVybiB7c3RyaW5nfSAqL1xyXG4gICAgUmVwb0luZm8ucHJvdG90eXBlLnRvVVJMU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5zZWN1cmUgPyAnaHR0cHM6Ly8nIDogJ2h0dHA6Ly8nKSArIHRoaXMuaG9zdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVwb0luZm87XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQHBhcmFtIHshc3RyaW5nfSBwYXRoU3RyaW5nXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aFN0cmluZykge1xyXG4gICAgdmFyIHBhdGhTdHJpbmdEZWNvZGVkID0gJyc7XHJcbiAgICB2YXIgcGllY2VzID0gcGF0aFN0cmluZy5zcGxpdCgnLycpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwaWVjZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAocGllY2VzW2ldLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHBpZWNlID0gcGllY2VzW2ldO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcGllY2UgPSBkZWNvZGVVUklDb21wb25lbnQocGllY2UucmVwbGFjZSgvXFwrL2csICcgJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cclxuICAgICAgICAgICAgcGF0aFN0cmluZ0RlY29kZWQgKz0gJy8nICsgcGllY2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdGhTdHJpbmdEZWNvZGVkO1xyXG59XHJcbi8qKlxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IHF1ZXJ5U3RyaW5nXHJcbiAqIEByZXR1cm4geyF7W2tleTpzdHJpbmddOnN0cmluZ319IGtleSB2YWx1ZSBoYXNoXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWNvZGVRdWVyeShxdWVyeVN0cmluZykge1xyXG4gICAgdmFyIHJlc3VsdHMgPSB7fTtcclxuICAgIGlmIChxdWVyeVN0cmluZy5jaGFyQXQoMCkgPT09ICc/Jykge1xyXG4gICAgICAgIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcuc3Vic3RyaW5nKDEpO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHF1ZXJ5U3RyaW5nLnNwbGl0KCcmJyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIHNlZ21lbnQgPSBfYVtfaV07XHJcbiAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIga3YgPSBzZWdtZW50LnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgaWYgKGt2Lmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICByZXN1bHRzW2RlY29kZVVSSUNvbXBvbmVudChrdlswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KGt2WzFdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJJbnZhbGlkIHF1ZXJ5IHNlZ21lbnQgJ1wiICsgc2VnbWVudCArIFwiJyBpbiBxdWVyeSAnXCIgKyBxdWVyeVN0cmluZyArIFwiJ1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0cztcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHshc3RyaW5nfSBkYXRhVVJMXHJcbiAqIEByZXR1cm4ge3tyZXBvSW5mbzogIVJlcG9JbmZvLCBwYXRoOiAhUGF0aH19XHJcbiAqL1xyXG52YXIgcGFyc2VSZXBvSW5mbyA9IGZ1bmN0aW9uIChkYXRhVVJMKSB7XHJcbiAgICB2YXIgcGFyc2VkVXJsID0gcGFyc2VVUkwoZGF0YVVSTCksIG5hbWVzcGFjZSA9IHBhcnNlZFVybC5zdWJkb21haW47XHJcbiAgICBpZiAocGFyc2VkVXJsLmRvbWFpbiA9PT0gJ2ZpcmViYXNlJykge1xyXG4gICAgICAgIGZhdGFsKHBhcnNlZFVybC5ob3N0ICtcclxuICAgICAgICAgICAgJyBpcyBubyBsb25nZXIgc3VwcG9ydGVkLiAnICtcclxuICAgICAgICAgICAgJ1BsZWFzZSB1c2UgPFlPVVIgRklSRUJBU0U+LmZpcmViYXNlaW8uY29tIGluc3RlYWQnKTtcclxuICAgIH1cclxuICAgIC8vIENhdGNoIGNvbW1vbiBlcnJvciBvZiB1bmluaXRpYWxpemVkIG5hbWVzcGFjZSB2YWx1ZS5cclxuICAgIGlmICgoIW5hbWVzcGFjZSB8fCBuYW1lc3BhY2UgPT0gJ3VuZGVmaW5lZCcpICYmXHJcbiAgICAgICAgcGFyc2VkVXJsLmRvbWFpbiAhPT0gJ2xvY2FsaG9zdCcpIHtcclxuICAgICAgICBmYXRhbCgnQ2Fubm90IHBhcnNlIEZpcmViYXNlIHVybC4gUGxlYXNlIHVzZSBodHRwczovLzxZT1VSIEZJUkVCQVNFPi5maXJlYmFzZWlvLmNvbScpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFwYXJzZWRVcmwuc2VjdXJlKSB7XHJcbiAgICAgICAgd2FybklmUGFnZUlzU2VjdXJlKCk7XHJcbiAgICB9XHJcbiAgICB2YXIgd2ViU29ja2V0T25seSA9IHBhcnNlZFVybC5zY2hlbWUgPT09ICd3cycgfHwgcGFyc2VkVXJsLnNjaGVtZSA9PT0gJ3dzcyc7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlcG9JbmZvOiBuZXcgUmVwb0luZm8ocGFyc2VkVXJsLmhvc3QsIHBhcnNlZFVybC5zZWN1cmUsIG5hbWVzcGFjZSwgd2ViU29ja2V0T25seSksXHJcbiAgICAgICAgcGF0aDogbmV3IFBhdGgocGFyc2VkVXJsLnBhdGhTdHJpbmcpXHJcbiAgICB9O1xyXG59O1xyXG4vKipcclxuICpcclxuICogQHBhcmFtIHshc3RyaW5nfSBkYXRhVVJMXHJcbiAqIEByZXR1cm4ge3tob3N0OiBzdHJpbmcsIHBvcnQ6IG51bWJlciwgZG9tYWluOiBzdHJpbmcsIHN1YmRvbWFpbjogc3RyaW5nLCBzZWN1cmU6IGJvb2xlYW4sIHNjaGVtZTogc3RyaW5nLCBwYXRoU3RyaW5nOiBzdHJpbmd9fVxyXG4gKi9cclxudmFyIHBhcnNlVVJMID0gZnVuY3Rpb24gKGRhdGFVUkwpIHtcclxuICAgIC8vIERlZmF1bHQgdG8gZW1wdHkgc3RyaW5ncyBpbiB0aGUgZXZlbnQgb2YgYSBtYWxmb3JtZWQgc3RyaW5nLlxyXG4gICAgdmFyIGhvc3QgPSAnJywgZG9tYWluID0gJycsIHN1YmRvbWFpbiA9ICcnLCBwYXRoU3RyaW5nID0gJyc7XHJcbiAgICAvLyBBbHdheXMgZGVmYXVsdCB0byBTU0wsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxyXG4gICAgdmFyIHNlY3VyZSA9IHRydWUsIHNjaGVtZSA9ICdodHRwcycsIHBvcnQgPSA0NDM7XHJcbiAgICAvLyBEb24ndCBkbyBhbnkgdmFsaWRhdGlvbiBoZXJlLiBUaGUgY2FsbGVyIGlzIHJlc3BvbnNpYmxlIGZvciB2YWxpZGF0aW5nIHRoZSByZXN1bHQgb2YgcGFyc2luZy5cclxuICAgIGlmICh0eXBlb2YgZGF0YVVSTCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAvLyBQYXJzZSBzY2hlbWUuXHJcbiAgICAgICAgdmFyIGNvbG9uSW5kID0gZGF0YVVSTC5pbmRleE9mKCcvLycpO1xyXG4gICAgICAgIGlmIChjb2xvbkluZCA+PSAwKSB7XHJcbiAgICAgICAgICAgIHNjaGVtZSA9IGRhdGFVUkwuc3Vic3RyaW5nKDAsIGNvbG9uSW5kIC0gMSk7XHJcbiAgICAgICAgICAgIGRhdGFVUkwgPSBkYXRhVVJMLnN1YnN0cmluZyhjb2xvbkluZCArIDIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQYXJzZSBob3N0LCBwYXRoLCBhbmQgcXVlcnkgc3RyaW5nLlxyXG4gICAgICAgIHZhciBzbGFzaEluZCA9IGRhdGFVUkwuaW5kZXhPZignLycpO1xyXG4gICAgICAgIGlmIChzbGFzaEluZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgc2xhc2hJbmQgPSBkYXRhVVJMLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHF1ZXN0aW9uTWFya0luZCA9IGRhdGFVUkwuaW5kZXhPZignPycpO1xyXG4gICAgICAgIGlmIChxdWVzdGlvbk1hcmtJbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHF1ZXN0aW9uTWFya0luZCA9IGRhdGFVUkwubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBob3N0ID0gZGF0YVVSTC5zdWJzdHJpbmcoMCwgTWF0aC5taW4oc2xhc2hJbmQsIHF1ZXN0aW9uTWFya0luZCkpO1xyXG4gICAgICAgIGlmIChzbGFzaEluZCA8IHF1ZXN0aW9uTWFya0luZCkge1xyXG4gICAgICAgICAgICAvLyBGb3IgcGF0aFN0cmluZywgcXVlc3Rpb25NYXJrSW5kIHdpbGwgYWx3YXlzIGNvbWUgYWZ0ZXIgc2xhc2hJbmRcclxuICAgICAgICAgICAgcGF0aFN0cmluZyA9IGRlY29kZVBhdGgoZGF0YVVSTC5zdWJzdHJpbmcoc2xhc2hJbmQsIHF1ZXN0aW9uTWFya0luZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcXVlcnlQYXJhbXMgPSBkZWNvZGVRdWVyeShkYXRhVVJMLnN1YnN0cmluZyhNYXRoLm1pbihkYXRhVVJMLmxlbmd0aCwgcXVlc3Rpb25NYXJrSW5kKSkpO1xyXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBwb3J0LCB1c2Ugc2NoZW1lIGZvciBkZXRlcm1pbmluZyBpZiBpdCdzIHNlY3VyZS5cclxuICAgICAgICBjb2xvbkluZCA9IGhvc3QuaW5kZXhPZignOicpO1xyXG4gICAgICAgIGlmIChjb2xvbkluZCA+PSAwKSB7XHJcbiAgICAgICAgICAgIHNlY3VyZSA9IHNjaGVtZSA9PT0gJ2h0dHBzJyB8fCBzY2hlbWUgPT09ICd3c3MnO1xyXG4gICAgICAgICAgICBwb3J0ID0gcGFyc2VJbnQoaG9zdC5zdWJzdHJpbmcoY29sb25JbmQgKyAxKSwgMTApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29sb25JbmQgPSBkYXRhVVJMLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHBhcnRzID0gaG9zdC5zcGxpdCgnLicpO1xyXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDMpIHtcclxuICAgICAgICAgICAgLy8gTm9ybWFsaXplIG5hbWVzcGFjZXMgdG8gbG93ZXJjYXNlIHRvIHNoYXJlIHN0b3JhZ2UgLyBjb25uZWN0aW9uLlxyXG4gICAgICAgICAgICBkb21haW4gPSBwYXJ0c1sxXTtcclxuICAgICAgICAgICAgc3ViZG9tYWluID0gcGFydHNbMF0udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgIGRvbWFpbiA9IHBhcnRzWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwYXJ0c1swXS5zbGljZSgwLCBjb2xvbkluZCkudG9Mb3dlckNhc2UoKSA9PT0gJ2xvY2FsaG9zdCcpIHtcclxuICAgICAgICAgICAgZG9tYWluID0gJ2xvY2FsaG9zdCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFN1cHBvcnQgYG5zYCBxdWVyeSBwYXJhbSBpZiBzdWJkb21haW4gbm90IGFscmVhZHkgc2V0XHJcbiAgICAgICAgaWYgKHN1YmRvbWFpbiA9PT0gJycgJiYgJ25zJyBpbiBxdWVyeVBhcmFtcykge1xyXG4gICAgICAgICAgICBzdWJkb21haW4gPSBxdWVyeVBhcmFtc1snbnMnXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGhvc3Q6IGhvc3QsXHJcbiAgICAgICAgcG9ydDogcG9ydCxcclxuICAgICAgICBkb21haW46IGRvbWFpbixcclxuICAgICAgICBzdWJkb21haW46IHN1YmRvbWFpbixcclxuICAgICAgICBzZWN1cmU6IHNlY3VyZSxcclxuICAgICAgICBzY2hlbWU6IHNjaGVtZSxcclxuICAgICAgICBwYXRoU3RyaW5nOiBwYXRoU3RyaW5nXHJcbiAgICB9O1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRydWUgZm9yIGludmFsaWQgRmlyZWJhc2Uga2V5c1xyXG4gKiBAdHlwZSB7UmVnRXhwfVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxudmFyIElOVkFMSURfS0VZX1JFR0VYXyA9IC9bXFxbXFxdLiMkXFwvXFx1MDAwMC1cXHUwMDFGXFx1MDA3Rl0vO1xyXG4vKipcclxuICogVHJ1ZSBmb3IgaW52YWxpZCBGaXJlYmFzZSBwYXRocy5cclxuICogQWxsb3dzICcvJyBpbiBwYXRocy5cclxuICogQHR5cGUge1JlZ0V4cH1cclxuICogQHByaXZhdGVcclxuICovXHJcbnZhciBJTlZBTElEX1BBVEhfUkVHRVhfID0gL1tcXFtcXF0uIyRcXHUwMDAwLVxcdTAwMUZcXHUwMDdGXS87XHJcbi8qKlxyXG4gKiBNYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRvIGFsbG93IGluIGxlYWYgdmFsdWVcclxuICogQHR5cGUge251bWJlcn1cclxuICogQHByaXZhdGVcclxuICovXHJcbnZhciBNQVhfTEVBRl9TSVpFXyA9IDEwICogMTAyNCAqIDEwMjQ7XHJcbi8qKlxyXG4gKiBAcGFyYW0geyp9IGtleVxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzVmFsaWRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5sZW5ndGggIT09IDAgJiYgIUlOVkFMSURfS0VZX1JFR0VYXy50ZXN0KGtleSkpO1xyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhTdHJpbmdcclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnZhciBpc1ZhbGlkUGF0aFN0cmluZyA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBwYXRoU3RyaW5nID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgIHBhdGhTdHJpbmcubGVuZ3RoICE9PSAwICYmXHJcbiAgICAgICAgIUlOVkFMSURfUEFUSF9SRUdFWF8udGVzdChwYXRoU3RyaW5nKSk7XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFN0cmluZ1xyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzVmFsaWRSb290UGF0aFN0cmluZyA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nKSB7XHJcbiAgICBpZiAocGF0aFN0cmluZykge1xyXG4gICAgICAgIC8vIEFsbG93ICcvLmluZm8vJyBhdCB0aGUgYmVnaW5uaW5nLlxyXG4gICAgICAgIHBhdGhTdHJpbmcgPSBwYXRoU3RyaW5nLnJlcGxhY2UoL15cXC8qXFwuaW5mbyhcXC98JCkvLCAnLycpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzVmFsaWRQYXRoU3RyaW5nKHBhdGhTdHJpbmcpO1xyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHsqfSBwcmlvcml0eVxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzVmFsaWRQcmlvcml0eSA9IGZ1bmN0aW9uIChwcmlvcml0eSkge1xyXG4gICAgcmV0dXJuIChwcmlvcml0eSA9PT0gbnVsbCB8fFxyXG4gICAgICAgIHR5cGVvZiBwcmlvcml0eSA9PT0gJ3N0cmluZycgfHxcclxuICAgICAgICAodHlwZW9mIHByaW9yaXR5ID09PSAnbnVtYmVyJyAmJiAhaXNJbnZhbGlkSlNPTk51bWJlcihwcmlvcml0eSkpIHx8XHJcbiAgICAgICAgKHByaW9yaXR5ICYmIHR5cGVvZiBwcmlvcml0eSA9PT0gJ29iamVjdCcgJiYgdXRpbC5jb250YWlucyhwcmlvcml0eSwgJy5zdicpKSk7XHJcbn07XHJcbi8qKlxyXG4gKiBQcmUtdmFsaWRhdGUgYSBkYXR1bSBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gRmlyZWJhc2UgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWVcclxuICogQHBhcmFtIHtudW1iZXJ9IGFyZ3VtZW50TnVtYmVyXHJcbiAqIEBwYXJhbSB7Kn0gZGF0YVxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9uYWxcclxuICovXHJcbnZhciB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZyA9IGZ1bmN0aW9uIChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBkYXRhLCBwYXRoLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmIGRhdGEgPT09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YSh1dGlsLmVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKSwgZGF0YSwgcGF0aCk7XHJcbn07XHJcbi8qKlxyXG4gKiBWYWxpZGF0ZSBhIGRhdGEgb2JqZWN0IGNsaWVudC1zaWRlIGJlZm9yZSBzZW5kaW5nIHRvIHNlcnZlci5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGVycm9yUHJlZml4XHJcbiAqIEBwYXJhbSB7Kn0gZGF0YVxyXG4gKiBAcGFyYW0geyFQYXRofCFWYWxpZGF0aW9uUGF0aH0gcGF0aF9cclxuICovXHJcbnZhciB2YWxpZGF0ZUZpcmViYXNlRGF0YSA9IGZ1bmN0aW9uIChlcnJvclByZWZpeCwgZGF0YSwgcGF0aF8pIHtcclxuICAgIHZhciBwYXRoID0gcGF0aF8gaW5zdGFuY2VvZiBQYXRoID8gbmV3IFZhbGlkYXRpb25QYXRoKHBhdGhfLCBlcnJvclByZWZpeCkgOiBwYXRoXztcclxuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXggKyAnY29udGFpbnMgdW5kZWZpbmVkICcgKyBwYXRoLnRvRXJyb3JTdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXggK1xyXG4gICAgICAgICAgICAnY29udGFpbnMgYSBmdW5jdGlvbiAnICtcclxuICAgICAgICAgICAgcGF0aC50b0Vycm9yU3RyaW5nKCkgK1xyXG4gICAgICAgICAgICAnIHdpdGggY29udGVudHMgPSAnICtcclxuICAgICAgICAgICAgZGF0YS50b1N0cmluZygpKTtcclxuICAgIH1cclxuICAgIGlmIChpc0ludmFsaWRKU09OTnVtYmVyKGRhdGEpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICsgJ2NvbnRhaW5zICcgKyBkYXRhLnRvU3RyaW5nKCkgKyAnICcgKyBwYXRoLnRvRXJyb3JTdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICAvLyBDaGVjayBtYXggbGVhZiBzaXplLCBidXQgdHJ5IHRvIGF2b2lkIHRoZSB1dGY4IGNvbnZlcnNpb24gaWYgd2UgY2FuLlxyXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgIGRhdGEubGVuZ3RoID4gTUFYX0xFQUZfU0laRV8gLyAzICYmXHJcbiAgICAgICAgdXRpbC5zdHJpbmdMZW5ndGgoZGF0YSkgPiBNQVhfTEVBRl9TSVpFXykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArXHJcbiAgICAgICAgICAgICdjb250YWlucyBhIHN0cmluZyBncmVhdGVyIHRoYW4gJyArXHJcbiAgICAgICAgICAgIE1BWF9MRUFGX1NJWkVfICtcclxuICAgICAgICAgICAgJyB1dGY4IGJ5dGVzICcgK1xyXG4gICAgICAgICAgICBwYXRoLnRvRXJyb3JTdHJpbmcoKSArXHJcbiAgICAgICAgICAgIFwiICgnXCIgK1xyXG4gICAgICAgICAgICBkYXRhLnN1YnN0cmluZygwLCA1MCkgK1xyXG4gICAgICAgICAgICBcIi4uLicpXCIpO1xyXG4gICAgfVxyXG4gICAgLy8gVE9ETyA9IFBlcmYgPSBDb25zaWRlciBjb21iaW5pbmcgdGhlIHJlY3Vyc2l2ZSB2YWxpZGF0aW9uIG9mIGtleXMgaW50byBOb2RlRnJvbUpTT05cclxuICAgIC8vIHRvIHNhdmUgZXh0cmEgd2Fsa2luZyBvZiBsYXJnZSBvYmplY3RzLlxyXG4gICAgaWYgKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgdmFyIGhhc0RvdFZhbHVlXzEgPSBmYWxzZSwgaGFzQWN0dWFsQ2hpbGRfMSA9IGZhbHNlO1xyXG4gICAgICAgIHV0aWwuZm9yRWFjaChkYXRhLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnLnZhbHVlJykge1xyXG4gICAgICAgICAgICAgICAgaGFzRG90VmFsdWVfMSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnLnByaW9yaXR5JyAmJiBrZXkgIT09ICcuc3YnKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNBY3R1YWxDaGlsZF8xID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZEtleShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyBjb250YWlucyBhbiBpbnZhbGlkIGtleSAoJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcpICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLnRvRXJyb3JTdHJpbmcoKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcuICBLZXlzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbmQgY2FuXFwndCBjb250YWluIFwiLlwiLCBcIiNcIiwgXCIkXCIsIFwiL1wiLCBcIltcIiwgb3IgXCJdXCInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXRoLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGEoZXJyb3JQcmVmaXgsIHZhbHVlLCBwYXRoKTtcclxuICAgICAgICAgICAgcGF0aC5wb3AoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoaGFzRG90VmFsdWVfMSAmJiBoYXNBY3R1YWxDaGlsZF8xKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArXHJcbiAgICAgICAgICAgICAgICAnIGNvbnRhaW5zIFwiLnZhbHVlXCIgY2hpbGQgJyArXHJcbiAgICAgICAgICAgICAgICBwYXRoLnRvRXJyb3JTdHJpbmcoKSArXHJcbiAgICAgICAgICAgICAgICAnIGluIGFkZGl0aW9uIHRvIGFjdHVhbCBjaGlsZHJlbi4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBQcmUtdmFsaWRhdGUgcGF0aHMgcGFzc2VkIGluIHRoZSBmaXJlYmFzZSBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGVycm9yUHJlZml4XHJcbiAqIEBwYXJhbSB7QXJyYXk8IVBhdGg+fSBtZXJnZVBhdGhzXHJcbiAqL1xyXG52YXIgdmFsaWRhdGVGaXJlYmFzZU1lcmdlUGF0aHMgPSBmdW5jdGlvbiAoZXJyb3JQcmVmaXgsIG1lcmdlUGF0aHMpIHtcclxuICAgIHZhciBpLCBjdXJQYXRoO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IG1lcmdlUGF0aHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjdXJQYXRoID0gbWVyZ2VQYXRoc1tpXTtcclxuICAgICAgICB2YXIga2V5cyA9IGN1clBhdGguc2xpY2UoKTtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgaWYgKGtleXNbal0gPT09ICcucHJpb3JpdHknICYmIGogPT09IGtleXMubGVuZ3RoIC0gMSkgO1xyXG4gICAgICAgICAgICBlbHNlIGlmICghaXNWYWxpZEtleShrZXlzW2pdKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICtcclxuICAgICAgICAgICAgICAgICAgICAnY29udGFpbnMgYW4gaW52YWxpZCBrZXkgKCcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGtleXNbal0gK1xyXG4gICAgICAgICAgICAgICAgICAgICcpIGluIHBhdGggJyArXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyUGF0aC50b1N0cmluZygpICtcclxuICAgICAgICAgICAgICAgICAgICAnLiBLZXlzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2FuZCBjYW5cXCd0IGNvbnRhaW4gXCIuXCIsIFwiI1wiLCBcIiRcIiwgXCIvXCIsIFwiW1wiLCBvciBcIl1cIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgdGhhdCB1cGRhdGUga2V5cyBhcmUgbm90IGRlc2NlbmRhbnRzIG9mIGVhY2ggb3RoZXIuXHJcbiAgICAvLyBXZSByZWx5IG9uIHRoZSBwcm9wZXJ0eSB0aGF0IHNvcnRpbmcgZ3VhcmFudGVlcyB0aGF0IGFuY2VzdG9ycyBjb21lXHJcbiAgICAvLyByaWdodCBiZWZvcmUgZGVzY2VuZGFudHMuXHJcbiAgICBtZXJnZVBhdGhzLnNvcnQoUGF0aC5jb21wYXJlUGF0aHMpO1xyXG4gICAgdmFyIHByZXZQYXRoID0gbnVsbDtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBtZXJnZVBhdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY3VyUGF0aCA9IG1lcmdlUGF0aHNbaV07XHJcbiAgICAgICAgaWYgKHByZXZQYXRoICE9PSBudWxsICYmIHByZXZQYXRoLmNvbnRhaW5zKGN1clBhdGgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArXHJcbiAgICAgICAgICAgICAgICAnY29udGFpbnMgYSBwYXRoICcgK1xyXG4gICAgICAgICAgICAgICAgcHJldlBhdGgudG9TdHJpbmcoKSArXHJcbiAgICAgICAgICAgICAgICAnIHRoYXQgaXMgYW5jZXN0b3Igb2YgYW5vdGhlciBwYXRoICcgK1xyXG4gICAgICAgICAgICAgICAgY3VyUGF0aC50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJldlBhdGggPSBjdXJQYXRoO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogcHJlLXZhbGlkYXRlIGFuIG9iamVjdCBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gZmlyZWJhc2UgZnVuY3Rpb24gKFxyXG4gKiBtdXN0IGJlIGFuIG9iamVjdCAtIGUuZy4gZm9yIGZpcmViYXNlLnVwZGF0ZSgpKS5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGZuTmFtZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gYXJndW1lbnROdW1iZXJcclxuICogQHBhcmFtIHsqfSBkYXRhXHJcbiAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb25hbFxyXG4gKi9cclxudmFyIHZhbGlkYXRlRmlyZWJhc2VNZXJnZURhdGFBcmcgPSBmdW5jdGlvbiAoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgZGF0YSwgcGF0aCwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiBkYXRhID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIGVycm9yUHJlZml4ID0gdXRpbC5lcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCk7XHJcbiAgICBpZiAoIShkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JykgfHwgQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArICcgbXVzdCBiZSBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgY2hpbGRyZW4gdG8gcmVwbGFjZS4nKTtcclxuICAgIH1cclxuICAgIHZhciBtZXJnZVBhdGhzID0gW107XHJcbiAgICB1dGlsLmZvckVhY2goZGF0YSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgY3VyUGF0aCA9IG5ldyBQYXRoKGtleSk7XHJcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGEoZXJyb3JQcmVmaXgsIHZhbHVlLCBwYXRoLmNoaWxkKGN1clBhdGgpKTtcclxuICAgICAgICBpZiAoY3VyUGF0aC5nZXRCYWNrKCkgPT09ICcucHJpb3JpdHknKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNWYWxpZFByaW9yaXR5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICtcclxuICAgICAgICAgICAgICAgICAgICBcImNvbnRhaW5zIGFuIGludmFsaWQgdmFsdWUgZm9yICdcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyUGF0aC50b1N0cmluZygpICtcclxuICAgICAgICAgICAgICAgICAgICBcIicsIHdoaWNoIG11c3QgYmUgYSB2YWxpZCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgJ0ZpcmViYXNlIHByaW9yaXR5IChhIHN0cmluZywgZmluaXRlIG51bWJlciwgc2VydmVyIHZhbHVlLCBvciBudWxsKS4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBtZXJnZVBhdGhzLnB1c2goY3VyUGF0aCk7XHJcbiAgICB9KTtcclxuICAgIHZhbGlkYXRlRmlyZWJhc2VNZXJnZVBhdGhzKGVycm9yUHJlZml4LCBtZXJnZVBhdGhzKTtcclxufTtcclxudmFyIHZhbGlkYXRlUHJpb3JpdHkgPSBmdW5jdGlvbiAoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgcHJpb3JpdHksIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgcHJpb3JpdHkgPT09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBpZiAoaXNJbnZhbGlkSlNPTk51bWJlcihwcmlvcml0eSkpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHV0aWwuZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpICtcclxuICAgICAgICAgICAgJ2lzICcgK1xyXG4gICAgICAgICAgICBwcmlvcml0eS50b1N0cmluZygpICtcclxuICAgICAgICAgICAgJywgYnV0IG11c3QgYmUgYSB2YWxpZCBGaXJlYmFzZSBwcmlvcml0eSAoYSBzdHJpbmcsIGZpbml0ZSBudW1iZXIsICcgK1xyXG4gICAgICAgICAgICAnc2VydmVyIHZhbHVlLCBvciBudWxsKS4nKTtcclxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byBhbGxvdyBpbXBvcnRpbmcgZGF0YSB3aXRoIGEgLnN2LlxyXG4gICAgaWYgKCFpc1ZhbGlkUHJpb3JpdHkocHJpb3JpdHkpKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcih1dGlsLmVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKSArXHJcbiAgICAgICAgICAgICdtdXN0IGJlIGEgdmFsaWQgRmlyZWJhc2UgcHJpb3JpdHkgJyArXHJcbiAgICAgICAgICAgICcoYSBzdHJpbmcsIGZpbml0ZSBudW1iZXIsIHNlcnZlciB2YWx1ZSwgb3IgbnVsbCkuJyk7XHJcbn07XHJcbnZhciB2YWxpZGF0ZUV2ZW50VHlwZSA9IGZ1bmN0aW9uIChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBldmVudFR5cGUsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgZXZlbnRUeXBlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgc3dpdGNoIChldmVudFR5cGUpIHtcclxuICAgICAgICBjYXNlICd2YWx1ZSc6XHJcbiAgICAgICAgY2FzZSAnY2hpbGRfYWRkZWQnOlxyXG4gICAgICAgIGNhc2UgJ2NoaWxkX3JlbW92ZWQnOlxyXG4gICAgICAgIGNhc2UgJ2NoaWxkX2NoYW5nZWQnOlxyXG4gICAgICAgIGNhc2UgJ2NoaWxkX21vdmVkJzpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHV0aWwuZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpICtcclxuICAgICAgICAgICAgICAgICdtdXN0IGJlIGEgdmFsaWQgZXZlbnQgdHlwZSA9IFwidmFsdWVcIiwgXCJjaGlsZF9hZGRlZFwiLCBcImNoaWxkX3JlbW92ZWRcIiwgJyArXHJcbiAgICAgICAgICAgICAgICAnXCJjaGlsZF9jaGFuZ2VkXCIsIG9yIFwiY2hpbGRfbW92ZWRcIi4nKTtcclxuICAgIH1cclxufTtcclxudmFyIHZhbGlkYXRlS2V5ID0gZnVuY3Rpb24gKGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIGtleSwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiBrZXkgPT09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBpZiAoIWlzVmFsaWRLZXkoa2V5KSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodXRpbC5lcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgK1xyXG4gICAgICAgICAgICAnd2FzIGFuIGludmFsaWQga2V5ID0gXCInICtcclxuICAgICAgICAgICAga2V5ICtcclxuICAgICAgICAgICAgJ1wiLiAgRmlyZWJhc2Uga2V5cyBtdXN0IGJlIG5vbi1lbXB0eSBzdHJpbmdzIGFuZCAnICtcclxuICAgICAgICAgICAgJ2NhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIi9cIiwgXCJbXCIsIG9yIFwiXVwiKS4nKTtcclxufTtcclxudmFyIHZhbGlkYXRlUGF0aFN0cmluZyA9IGZ1bmN0aW9uIChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBwYXRoU3RyaW5nLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmIHBhdGhTdHJpbmcgPT09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBpZiAoIWlzVmFsaWRQYXRoU3RyaW5nKHBhdGhTdHJpbmcpKVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcih1dGlsLmVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKSArXHJcbiAgICAgICAgICAgICd3YXMgYW4gaW52YWxpZCBwYXRoID0gXCInICtcclxuICAgICAgICAgICAgcGF0aFN0cmluZyArXHJcbiAgICAgICAgICAgICdcIi4gUGF0aHMgbXVzdCBiZSBub24tZW1wdHkgc3RyaW5ncyBhbmQgJyArXHJcbiAgICAgICAgICAgICdjYW5cXCd0IGNvbnRhaW4gXCIuXCIsIFwiI1wiLCBcIiRcIiwgXCJbXCIsIG9yIFwiXVwiJyk7XHJcbn07XHJcbnZhciB2YWxpZGF0ZVJvb3RQYXRoU3RyaW5nID0gZnVuY3Rpb24gKGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIHBhdGhTdHJpbmcsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAocGF0aFN0cmluZykge1xyXG4gICAgICAgIC8vIEFsbG93ICcvLmluZm8vJyBhdCB0aGUgYmVnaW5uaW5nLlxyXG4gICAgICAgIHBhdGhTdHJpbmcgPSBwYXRoU3RyaW5nLnJlcGxhY2UoL15cXC8qXFwuaW5mbyhcXC98JCkvLCAnLycpO1xyXG4gICAgfVxyXG4gICAgdmFsaWRhdGVQYXRoU3RyaW5nKGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIHBhdGhTdHJpbmcsIG9wdGlvbmFsKTtcclxufTtcclxudmFyIHZhbGlkYXRlV3JpdGFibGVQYXRoID0gZnVuY3Rpb24gKGZuTmFtZSwgcGF0aCkge1xyXG4gICAgaWYgKHBhdGguZ2V0RnJvbnQoKSA9PT0gJy5pbmZvJykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmbk5hbWUgKyBcIiBmYWlsZWQgPSBDYW4ndCBtb2RpZnkgZGF0YSB1bmRlciAvLmluZm8vXCIpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgdmFsaWRhdGVVcmwgPSBmdW5jdGlvbiAoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgcGFyc2VkVXJsKSB7XHJcbiAgICAvLyBUT0RPID0gVmFsaWRhdGUgc2VydmVyIGJldHRlci5cclxuICAgIHZhciBwYXRoU3RyaW5nID0gcGFyc2VkVXJsLnBhdGgudG9TdHJpbmcoKTtcclxuICAgIGlmICghKHR5cGVvZiBwYXJzZWRVcmwucmVwb0luZm8uaG9zdCA9PT0gJ3N0cmluZycpIHx8XHJcbiAgICAgICAgcGFyc2VkVXJsLnJlcG9JbmZvLmhvc3QubGVuZ3RoID09PSAwIHx8XHJcbiAgICAgICAgKCFpc1ZhbGlkS2V5KHBhcnNlZFVybC5yZXBvSW5mby5uYW1lc3BhY2UpICYmXHJcbiAgICAgICAgICAgIHBhcnNlZFVybC5yZXBvSW5mby5ob3N0LnNwbGl0KCc6JylbMF0gIT09ICdsb2NhbGhvc3QnKSB8fFxyXG4gICAgICAgIChwYXRoU3RyaW5nLmxlbmd0aCAhPT0gMCAmJiAhaXNWYWxpZFJvb3RQYXRoU3RyaW5nKHBhdGhTdHJpbmcpKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcih1dGlsLmVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIGZhbHNlKSArXHJcbiAgICAgICAgICAgICdtdXN0IGJlIGEgdmFsaWQgZmlyZWJhc2UgVVJMIGFuZCAnICtcclxuICAgICAgICAgICAgJ3RoZSBwYXRoIGNhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIltcIiwgb3IgXCJdXCIuJyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciB2YWxpZGF0ZUJvb2xlYW4gPSBmdW5jdGlvbiAoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgYm9vbCwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiBib29sID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKHR5cGVvZiBib29sICE9PSAnYm9vbGVhbicpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHV0aWwuZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpICsgJ211c3QgYmUgYSBib29sZWFuLicpO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIE9uRGlzY29ubmVjdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUmVwb30gcmVwb19cclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIE9uRGlzY29ubmVjdChyZXBvXywgcGF0aF8pIHtcclxuICAgICAgICB0aGlzLnJlcG9fID0gcmVwb187XHJcbiAgICAgICAgdGhpcy5wYXRoXyA9IHBhdGhfO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshZmlyZWJhc2UuUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgT25EaXNjb25uZWN0LnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAob25Db21wbGV0ZSkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnT25EaXNjb25uZWN0LmNhbmNlbCcsIDAsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVDYWxsYmFjaygnT25EaXNjb25uZWN0LmNhbmNlbCcsIDEsIG9uQ29tcGxldGUsIHRydWUpO1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyB1dGlsLkRlZmVycmVkKCk7XHJcbiAgICAgICAgdGhpcy5yZXBvXy5vbkRpc2Nvbm5lY3RDYW5jZWwodGhpcy5wYXRoXywgZGVmZXJyZWQud3JhcENhbGxiYWNrKG9uQ29tcGxldGUpKTtcclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oP0Vycm9yKT19IG9uQ29tcGxldGVcclxuICAgICAqIEByZXR1cm4geyFmaXJlYmFzZS5Qcm9taXNlfVxyXG4gICAgICovXHJcbiAgICBPbkRpc2Nvbm5lY3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChvbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdPbkRpc2Nvbm5lY3QucmVtb3ZlJywgMCwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVXcml0YWJsZVBhdGgoJ09uRGlzY29ubmVjdC5yZW1vdmUnLCB0aGlzLnBhdGhfKTtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQ2FsbGJhY2soJ09uRGlzY29ubmVjdC5yZW1vdmUnLCAxLCBvbkNvbXBsZXRlLCB0cnVlKTtcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgdXRpbC5EZWZlcnJlZCgpO1xyXG4gICAgICAgIHRoaXMucmVwb18ub25EaXNjb25uZWN0U2V0KHRoaXMucGF0aF8sIG51bGwsIGRlZmVycmVkLndyYXBDYWxsYmFjayhvbkNvbXBsZXRlKSk7XHJcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshZmlyZWJhc2UuUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgT25EaXNjb25uZWN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodmFsdWUsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ09uRGlzY29ubmVjdC5zZXQnLCAxLCAyLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnT25EaXNjb25uZWN0LnNldCcsIHRoaXMucGF0aF8pO1xyXG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnKCdPbkRpc2Nvbm5lY3Quc2V0JywgMSwgdmFsdWUsIHRoaXMucGF0aF8sIGZhbHNlKTtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQ2FsbGJhY2soJ09uRGlzY29ubmVjdC5zZXQnLCAyLCBvbkNvbXBsZXRlLCB0cnVlKTtcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgdXRpbC5EZWZlcnJlZCgpO1xyXG4gICAgICAgIHRoaXMucmVwb18ub25EaXNjb25uZWN0U2V0KHRoaXMucGF0aF8sIHZhbHVlLCBkZWZlcnJlZC53cmFwQ2FsbGJhY2sob25Db21wbGV0ZSkpO1xyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfG51bGx9IHByaW9yaXR5XHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshZmlyZWJhc2UuUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgT25EaXNjb25uZWN0LnByb3RvdHlwZS5zZXRXaXRoUHJpb3JpdHkgPSBmdW5jdGlvbiAodmFsdWUsIHByaW9yaXR5LCBvbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdPbkRpc2Nvbm5lY3Quc2V0V2l0aFByaW9yaXR5JywgMiwgMywgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVXcml0YWJsZVBhdGgoJ09uRGlzY29ubmVjdC5zZXRXaXRoUHJpb3JpdHknLCB0aGlzLnBhdGhfKTtcclxuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZygnT25EaXNjb25uZWN0LnNldFdpdGhQcmlvcml0eScsIDEsIHZhbHVlLCB0aGlzLnBhdGhfLCBmYWxzZSk7XHJcbiAgICAgICAgdmFsaWRhdGVQcmlvcml0eSgnT25EaXNjb25uZWN0LnNldFdpdGhQcmlvcml0eScsIDIsIHByaW9yaXR5LCBmYWxzZSk7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUNhbGxiYWNrKCdPbkRpc2Nvbm5lY3Quc2V0V2l0aFByaW9yaXR5JywgMywgb25Db21wbGV0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IHV0aWwuRGVmZXJyZWQoKTtcclxuICAgICAgICB0aGlzLnJlcG9fLm9uRGlzY29ubmVjdFNldFdpdGhQcmlvcml0eSh0aGlzLnBhdGhfLCB2YWx1ZSwgcHJpb3JpdHksIGRlZmVycmVkLndyYXBDYWxsYmFjayhvbkNvbXBsZXRlKSk7XHJcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IG9iamVjdFRvTWVyZ2VcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oP0Vycm9yKT19IG9uQ29tcGxldGVcclxuICAgICAqIEByZXR1cm4geyFmaXJlYmFzZS5Qcm9taXNlfVxyXG4gICAgICovXHJcbiAgICBPbkRpc2Nvbm5lY3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChvYmplY3RUb01lcmdlLCBvbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdPbkRpc2Nvbm5lY3QudXBkYXRlJywgMSwgMiwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVXcml0YWJsZVBhdGgoJ09uRGlzY29ubmVjdC51cGRhdGUnLCB0aGlzLnBhdGhfKTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3RUb01lcmdlKSkge1xyXG4gICAgICAgICAgICB2YXIgbmV3T2JqZWN0VG9NZXJnZSA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdFRvTWVyZ2UubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIG5ld09iamVjdFRvTWVyZ2VbJycgKyBpXSA9IG9iamVjdFRvTWVyZ2VbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2JqZWN0VG9NZXJnZSA9IG5ld09iamVjdFRvTWVyZ2U7XHJcbiAgICAgICAgICAgIHdhcm4oJ1Bhc3NpbmcgYW4gQXJyYXkgdG8gZmlyZWJhc2UuZGF0YWJhc2Uub25EaXNjb25uZWN0KCkudXBkYXRlKCkgaXMgZGVwcmVjYXRlZC4gVXNlIHNldCgpIGlmIHlvdSB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgJyArXHJcbiAgICAgICAgICAgICAgICAnZXhpc3RpbmcgZGF0YSwgb3IgYW4gT2JqZWN0IHdpdGggaW50ZWdlciBrZXlzIGlmIHlvdSByZWFsbHkgZG8gd2FudCB0byBvbmx5IHVwZGF0ZSBzb21lIG9mIHRoZSBjaGlsZHJlbi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZU1lcmdlRGF0YUFyZygnT25EaXNjb25uZWN0LnVwZGF0ZScsIDEsIG9iamVjdFRvTWVyZ2UsIHRoaXMucGF0aF8sIGZhbHNlKTtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQ2FsbGJhY2soJ09uRGlzY29ubmVjdC51cGRhdGUnLCAyLCBvbkNvbXBsZXRlLCB0cnVlKTtcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgdXRpbC5EZWZlcnJlZCgpO1xyXG4gICAgICAgIHRoaXMucmVwb18ub25EaXNjb25uZWN0VXBkYXRlKHRoaXMucGF0aF8sIG9iamVjdFRvTWVyZ2UsIGRlZmVycmVkLndyYXBDYWxsYmFjayhvbkNvbXBsZXRlKSk7XHJcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9uRGlzY29ubmVjdDtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBUcmFuc2FjdGlvblJlc3VsdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQSB0eXBlIGZvciB0aGUgcmVzb2x2ZSB2YWx1ZSBvZiBGaXJlYmFzZS50cmFuc2FjdGlvbi5cclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICogQGRpY3RcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tbWl0dGVkXHJcbiAgICAgKiBAcGFyYW0ge0RhdGFTbmFwc2hvdH0gc25hcHNob3RcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVHJhbnNhY3Rpb25SZXN1bHQoY29tbWl0dGVkLCBzbmFwc2hvdCkge1xyXG4gICAgICAgIHRoaXMuY29tbWl0dGVkID0gY29tbWl0dGVkO1xyXG4gICAgICAgIHRoaXMuc25hcHNob3QgPSBzbmFwc2hvdDtcclxuICAgIH1cclxuICAgIC8vIERvIG5vdCBjcmVhdGUgcHVibGljIGRvY3VtZW50YXRpb24uIFRoaXMgaXMgaW50ZW5kZWQgdG8gbWFrZSBKU09OIHNlcmlhbGl6YXRpb24gd29yayBidXQgaXMgb3RoZXJ3aXNlIHVubmVjZXNzYXJ5XHJcbiAgICAvLyBmb3IgZW5kLXVzZXJzXHJcbiAgICBUcmFuc2FjdGlvblJlc3VsdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnVHJhbnNhY3Rpb25SZXN1bHQudG9KU09OJywgMCwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIHsgY29tbWl0dGVkOiB0aGlzLmNvbW1pdHRlZCwgc25hcHNob3Q6IHRoaXMuc25hcHNob3QudG9KU09OKCkgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVHJhbnNhY3Rpb25SZXN1bHQ7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRmFuY3kgSUQgZ2VuZXJhdG9yIHRoYXQgY3JlYXRlcyAyMC1jaGFyYWN0ZXIgc3RyaW5nIGlkZW50aWZpZXJzIHdpdGggdGhlXHJcbiAqIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxyXG4gKlxyXG4gKiAxLiBUaGV5J3JlIGJhc2VkIG9uIHRpbWVzdGFtcCBzbyB0aGF0IHRoZXkgc29ydCAqYWZ0ZXIqIGFueSBleGlzdGluZyBpZHMuXHJcbiAqIDIuIFRoZXkgY29udGFpbiA3Mi1iaXRzIG9mIHJhbmRvbSBkYXRhIGFmdGVyIHRoZSB0aW1lc3RhbXAgc28gdGhhdCBJRHMgd29uJ3RcclxuICogICAgY29sbGlkZSB3aXRoIG90aGVyIGNsaWVudHMnIElEcy5cclxuICogMy4gVGhleSBzb3J0ICpsZXhpY29ncmFwaGljYWxseSogKHNvIHRoZSB0aW1lc3RhbXAgaXMgY29udmVydGVkIHRvIGNoYXJhY3RlcnNcclxuICogICAgdGhhdCB3aWxsIHNvcnQgcHJvcGVybHkpLlxyXG4gKiA0LiBUaGV5J3JlIG1vbm90b25pY2FsbHkgaW5jcmVhc2luZy4gRXZlbiBpZiB5b3UgZ2VuZXJhdGUgbW9yZSB0aGFuIG9uZSBpblxyXG4gKiAgICB0aGUgc2FtZSB0aW1lc3RhbXAsIHRoZSBsYXR0ZXIgb25lcyB3aWxsIHNvcnQgYWZ0ZXIgdGhlIGZvcm1lciBvbmVzLiBXZSBkb1xyXG4gKiAgICB0aGlzIGJ5IHVzaW5nIHRoZSBwcmV2aW91cyByYW5kb20gYml0cyBidXQgXCJpbmNyZW1lbnRpbmdcIiB0aGVtIGJ5IDEgKG9ubHlcclxuICogICAgaW4gdGhlIGNhc2Ugb2YgYSB0aW1lc3RhbXAgY29sbGlzaW9uKS5cclxuICovXHJcbnZhciBuZXh0UHVzaElkID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIE1vZGVsZWQgYWZ0ZXIgYmFzZTY0IHdlYi1zYWZlIGNoYXJzLCBidXQgb3JkZXJlZCBieSBBU0NJSS5cclxuICAgIHZhciBQVVNIX0NIQVJTID0gJy0wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpfYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xyXG4gICAgLy8gVGltZXN0YW1wIG9mIGxhc3QgcHVzaCwgdXNlZCB0byBwcmV2ZW50IGxvY2FsIGNvbGxpc2lvbnMgaWYgeW91IHB1c2ggdHdpY2VcclxuICAgIC8vIGluIG9uZSBtcy5cclxuICAgIHZhciBsYXN0UHVzaFRpbWUgPSAwO1xyXG4gICAgLy8gV2UgZ2VuZXJhdGUgNzItYml0cyBvZiByYW5kb21uZXNzIHdoaWNoIGdldCB0dXJuZWQgaW50byAxMiBjaGFyYWN0ZXJzIGFuZFxyXG4gICAgLy8gYXBwZW5kZWQgdG8gdGhlIHRpbWVzdGFtcCB0byBwcmV2ZW50IGNvbGxpc2lvbnMgd2l0aCBvdGhlciBjbGllbnRzLiBXZVxyXG4gICAgLy8gc3RvcmUgdGhlIGxhc3QgY2hhcmFjdGVycyB3ZSBnZW5lcmF0ZWQgYmVjYXVzZSBpbiB0aGUgZXZlbnQgb2YgYSBjb2xsaXNpb24sXHJcbiAgICAvLyB3ZSdsbCB1c2UgdGhvc2Ugc2FtZSBjaGFyYWN0ZXJzIGV4Y2VwdCBcImluY3JlbWVudGVkXCIgYnkgb25lLlxyXG4gICAgdmFyIGxhc3RSYW5kQ2hhcnMgPSBbXTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAobm93KSB7XHJcbiAgICAgICAgdmFyIGR1cGxpY2F0ZVRpbWUgPSBub3cgPT09IGxhc3RQdXNoVGltZTtcclxuICAgICAgICBsYXN0UHVzaFRpbWUgPSBub3c7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIHRpbWVTdGFtcENoYXJzID0gbmV3IEFycmF5KDgpO1xyXG4gICAgICAgIGZvciAoaSA9IDc7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIHRpbWVTdGFtcENoYXJzW2ldID0gUFVTSF9DSEFSUy5jaGFyQXQobm93ICUgNjQpO1xyXG4gICAgICAgICAgICAvLyBOT1RFOiBDYW4ndCB1c2UgPDwgaGVyZSBiZWNhdXNlIGphdmFzY3JpcHQgd2lsbCBjb252ZXJ0IHRvIGludCBhbmQgbG9zZVxyXG4gICAgICAgICAgICAvLyB0aGUgdXBwZXIgYml0cy5cclxuICAgICAgICAgICAgbm93ID0gTWF0aC5mbG9vcihub3cgLyA2NCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHV0aWwuYXNzZXJ0KG5vdyA9PT0gMCwgJ0Nhbm5vdCBwdXNoIGF0IHRpbWUgPT0gMCcpO1xyXG4gICAgICAgIHZhciBpZCA9IHRpbWVTdGFtcENoYXJzLmpvaW4oJycpO1xyXG4gICAgICAgIGlmICghZHVwbGljYXRlVGltZSkge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGFzdFJhbmRDaGFyc1tpXSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDY0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHRpbWVzdGFtcCBoYXNuJ3QgY2hhbmdlZCBzaW5jZSBsYXN0IHB1c2gsIHVzZSB0aGUgc2FtZSByYW5kb21cclxuICAgICAgICAgICAgLy8gbnVtYmVyLCBleGNlcHQgaW5jcmVtZW50ZWQgYnkgMS5cclxuICAgICAgICAgICAgZm9yIChpID0gMTE7IGkgPj0gMCAmJiBsYXN0UmFuZENoYXJzW2ldID09PSA2MzsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0UmFuZENoYXJzW2ldID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0UmFuZENoYXJzW2ldKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlkICs9IFBVU0hfQ0hBUlMuY2hhckF0KGxhc3RSYW5kQ2hhcnNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlsLmFzc2VydChpZC5sZW5ndGggPT09IDIwLCAnbmV4dFB1c2hJZDogTGVuZ3RoIHNob3VsZCBiZSAyMC4nKTtcclxuICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICB9O1xyXG59KSgpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZVxyXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAc3RydWN0XHJcbiAqL1xyXG52YXIgTmFtZWROb2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTmFtZWROb2RlKG5hbWUsIG5vZGUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWVcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcclxuICAgICAqIEByZXR1cm4ge05hbWVkTm9kZX1cclxuICAgICAqL1xyXG4gICAgTmFtZWROb2RlLldyYXAgPSBmdW5jdGlvbiAobmFtZSwgbm9kZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKG5hbWUsIG5vZGUpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBOYW1lZE5vZGU7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgSW5kZXggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbmRleCgpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oIU5hbWVkTm9kZSwgIU5hbWVkTm9kZSk6bnVtYmVyfSBBIHN0YW5kYWxvbmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3JcclxuICAgICAqIHRoaXMgaW5kZXhcclxuICAgICAqL1xyXG4gICAgSW5kZXgucHJvdG90eXBlLmdldENvbXBhcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZS5iaW5kKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gYSBiZWZvcmUgYW5kIGFmdGVyIHZhbHVlIGZvciBhIG5vZGUsIGRldGVybWluZSBpZiB0aGUgaW5kZXhlZCB2YWx1ZSBoYXMgY2hhbmdlZC4gRXZlbiBpZiB0aGV5IGFyZSBkaWZmZXJlbnQsXHJcbiAgICAgKiBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIGNoYW5nZXMgYXJlIGlzb2xhdGVkIHRvIHBhcnRzIG9mIHRoZSBzbmFwc2hvdCB0aGF0IGFyZSBub3QgaW5kZXhlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBvbGROb2RlXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBuZXdOb2RlXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwb3J0aW9uIG9mIHRoZSBzbmFwc2hvdCBiZWluZyBpbmRleGVkIGNoYW5nZWQgYmV0d2VlbiBvbGROb2RlIGFuZCBuZXdOb2RlXHJcbiAgICAgKi9cclxuICAgIEluZGV4LnByb3RvdHlwZS5pbmRleGVkVmFsdWVDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZE5vZGUsIG5ld05vZGUpIHtcclxuICAgICAgICB2YXIgb2xkV3JhcHBlZCA9IG5ldyBOYW1lZE5vZGUoTUlOX05BTUUsIG9sZE5vZGUpO1xyXG4gICAgICAgIHZhciBuZXdXcmFwcGVkID0gbmV3IE5hbWVkTm9kZShNSU5fTkFNRSwgbmV3Tm9kZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZShvbGRXcmFwcGVkLCBuZXdXcmFwcGVkKSAhPT0gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFOYW1lZE5vZGV9IGEgbm9kZSB3cmFwcGVyIHRoYXQgd2lsbCBzb3J0IGVxdWFsIHRvIG9yIGxlc3MgdGhhblxyXG4gICAgICogYW55IG90aGVyIG5vZGUgd3JhcHBlciwgdXNpbmcgdGhpcyBpbmRleFxyXG4gICAgICovXHJcbiAgICBJbmRleC5wcm90b3R5cGUubWluUG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gTmFtZWROb2RlLk1JTjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gSW5kZXg7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgX19FTVBUWV9OT0RFO1xyXG52YXIgS2V5SW5kZXggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhLZXlJbmRleCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEtleUluZGV4KCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShLZXlJbmRleCwgXCJfX0VNUFRZX05PREVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19FTVBUWV9OT0RFO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgIF9fRU1QVFlfTk9ERSA9IHZhbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgS2V5SW5kZXgucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBuYW1lQ29tcGFyZShhLm5hbWUsIGIubmFtZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBLZXlJbmRleC5wcm90b3R5cGUuaXNEZWZpbmVkT24gPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIC8vIFdlIGNvdWxkIHByb2JhYmx5IHJldHVybiB0cnVlIGhlcmUgKHNpbmNlIGV2ZXJ5IG5vZGUgaGFzIGEga2V5KSwgYnV0IGl0J3MgbmV2ZXIgY2FsbGVkXHJcbiAgICAgICAgLy8gc28ganVzdCBsZWF2aW5nIHVuaW1wbGVtZW50ZWQgZm9yIG5vdy5cclxuICAgICAgICB0aHJvdyB1dGlsLmFzc2VydGlvbkVycm9yKCdLZXlJbmRleC5pc0RlZmluZWRPbiBub3QgZXhwZWN0ZWQgdG8gYmUgY2FsbGVkLicpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgS2V5SW5kZXgucHJvdG90eXBlLmluZGV4ZWRWYWx1ZUNoYW5nZWQgPSBmdW5jdGlvbiAob2xkTm9kZSwgbmV3Tm9kZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gVGhlIGtleSBmb3IgYSBub2RlIG5ldmVyIGNoYW5nZXMuXHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBLZXlJbmRleC5wcm90b3R5cGUubWluUG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gTmFtZWROb2RlLk1JTjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIEtleUluZGV4LnByb3RvdHlwZS5tYXhQb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIHJlYWxseSBiZSBjcmVhdGVkIG9uY2UgYW5kIGNhY2hlZCBpbiBhIHN0YXRpYyBwcm9wZXJ0eSwgYnV0XHJcbiAgICAgICAgLy8gTmFtZWROb2RlIGlzbid0IGRlZmluZWQgeWV0LCBzbyBJIGNhbid0IHVzZSBpdCBpbiBhIHN0YXRpYy4gIEJsZWguXHJcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUoTUFYX05BTUUsIF9fRU1QVFlfTk9ERSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyp9IGluZGV4VmFsdWVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAgICAgKiBAcmV0dXJuIHshTmFtZWROb2RlfVxyXG4gICAgICovXHJcbiAgICBLZXlJbmRleC5wcm90b3R5cGUubWFrZVBvc3QgPSBmdW5jdGlvbiAoaW5kZXhWYWx1ZSwgbmFtZSkge1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHR5cGVvZiBpbmRleFZhbHVlID09PSAnc3RyaW5nJywgJ0tleUluZGV4IGluZGV4VmFsdWUgbXVzdCBhbHdheXMgYmUgYSBzdHJpbmcuJyk7XHJcbiAgICAgICAgLy8gV2UganVzdCB1c2UgZW1wdHkgbm9kZSwgYnV0IGl0J2xsIG5ldmVyIGJlIGNvbXBhcmVkLCBzaW5jZSBvdXIgY29tcGFyYXRvciBvbmx5IGxvb2tzIGF0IG5hbWUuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUoaW5kZXhWYWx1ZSwgX19FTVBUWV9OT0RFKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFzdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBmb3IgaW5jbHVzaW9uIGluIGEgcXVlcnkgc3BlY1xyXG4gICAgICovXHJcbiAgICBLZXlJbmRleC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICcua2V5JztcclxuICAgIH07XHJcbiAgICByZXR1cm4gS2V5SW5kZXg7XHJcbn0oSW5kZXgpKTtcclxudmFyIEtFWV9JTkRFWCA9IG5ldyBLZXlJbmRleCgpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIE1BWF9OT0RFO1xyXG5mdW5jdGlvbiBzZXRNYXhOb2RlKHZhbCkge1xyXG4gICAgTUFYX05PREUgPSB2YWw7XHJcbn1cclxuLyoqXHJcbiAqIEBwYXJhbSB7KCFzdHJpbmd8IW51bWJlcil9IHByaW9yaXR5XHJcbiAqIEByZXR1cm4geyFzdHJpbmd9XHJcbiAqL1xyXG52YXIgcHJpb3JpdHlIYXNoVGV4dCA9IGZ1bmN0aW9uIChwcmlvcml0eSkge1xyXG4gICAgaWYgKHR5cGVvZiBwcmlvcml0eSA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgcmV0dXJuICdudW1iZXI6JyArIGRvdWJsZVRvSUVFRTc1NFN0cmluZyhwcmlvcml0eSk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuICdzdHJpbmc6JyArIHByaW9yaXR5O1xyXG59O1xyXG4vKipcclxuICogVmFsaWRhdGVzIHRoYXQgYSBwcmlvcml0eSBzbmFwc2hvdCBOb2RlIGlzIHZhbGlkLlxyXG4gKlxyXG4gKiBAcGFyYW0geyFOb2RlfSBwcmlvcml0eU5vZGVcclxuICovXHJcbnZhciB2YWxpZGF0ZVByaW9yaXR5Tm9kZSA9IGZ1bmN0aW9uIChwcmlvcml0eU5vZGUpIHtcclxuICAgIGlmIChwcmlvcml0eU5vZGUuaXNMZWFmTm9kZSgpKSB7XHJcbiAgICAgICAgdmFyIHZhbCA9IHByaW9yaXR5Tm9kZS52YWwoKTtcclxuICAgICAgICB1dGlsLmFzc2VydCh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdXRpbC5jb250YWlucyh2YWwsICcuc3YnKSksICdQcmlvcml0eSBtdXN0IGJlIGEgc3RyaW5nIG9yIG51bWJlci4nKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHByaW9yaXR5Tm9kZSA9PT0gTUFYX05PREUgfHwgcHJpb3JpdHlOb2RlLmlzRW1wdHkoKSwgJ3ByaW9yaXR5IG9mIHVuZXhwZWN0ZWQgdHlwZS4nKTtcclxuICAgIH1cclxuICAgIC8vIERvbid0IGNhbGwgZ2V0UHJpb3JpdHkoKSBvbiBNQVhfTk9ERSB0byBhdm9pZCBoaXR0aW5nIGFzc2VydGlvbi5cclxuICAgIHV0aWwuYXNzZXJ0KHByaW9yaXR5Tm9kZSA9PT0gTUFYX05PREUgfHwgcHJpb3JpdHlOb2RlLmdldFByaW9yaXR5KCkuaXNFbXB0eSgpLCBcIlByaW9yaXR5IG5vZGVzIGNhbid0IGhhdmUgYSBwcmlvcml0eSBvZiB0aGVpciBvd24uXCIpO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIF9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3I7XHJcbi8qKlxyXG4gKiBMZWFmTm9kZSBpcyBhIGNsYXNzIGZvciBzdG9yaW5nIGxlYWYgbm9kZXMgaW4gYSBEYXRhU25hcHNob3QuICBJdFxyXG4gKiBpbXBsZW1lbnRzIE5vZGUgYW5kIHN0b3JlcyB0aGUgdmFsdWUgb2YgdGhlIG5vZGUgKGEgc3RyaW5nLFxyXG4gKiBudW1iZXIsIG9yIGJvb2xlYW4pIGFjY2Vzc2libGUgdmlhIGdldFZhbHVlKCkuXHJcbiAqL1xyXG52YXIgTGVhZk5vZGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBpbXBsZW1lbnRzIHtOb2RlfVxyXG4gICAgICogQHBhcmFtIHshKHN0cmluZ3xudW1iZXJ8Ym9vbGVhbnxPYmplY3QpfSB2YWx1ZV8gVGhlIHZhbHVlIHRvIHN0b3JlIGluIHRoaXMgbGVhZiBub2RlLlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBvYmplY3QgdHlwZSBpcyBwb3NzaWJsZSBpbiB0aGUgZXZlbnQgb2YgYSBkZWZlcnJlZCB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHshTm9kZT19IHByaW9yaXR5Tm9kZV8gVGhlIHByaW9yaXR5IG9mIHRoaXMgbm9kZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gTGVhZk5vZGUodmFsdWVfLCBwcmlvcml0eU5vZGVfKSB7XHJcbiAgICAgICAgaWYgKHByaW9yaXR5Tm9kZV8gPT09IHZvaWQgMCkgeyBwcmlvcml0eU5vZGVfID0gTGVhZk5vZGUuX19jaGlsZHJlbk5vZGVDb25zdHJ1Y3Rvci5FTVBUWV9OT0RFOyB9XHJcbiAgICAgICAgdGhpcy52YWx1ZV8gPSB2YWx1ZV87XHJcbiAgICAgICAgdGhpcy5wcmlvcml0eU5vZGVfID0gcHJpb3JpdHlOb2RlXztcclxuICAgICAgICB0aGlzLmxhenlIYXNoXyA9IG51bGw7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQodGhpcy52YWx1ZV8gIT09IHVuZGVmaW5lZCAmJiB0aGlzLnZhbHVlXyAhPT0gbnVsbCwgXCJMZWFmTm9kZSBzaG91bGRuJ3QgYmUgY3JlYXRlZCB3aXRoIG51bGwvdW5kZWZpbmVkIHZhbHVlLlwiKTtcclxuICAgICAgICB2YWxpZGF0ZVByaW9yaXR5Tm9kZSh0aGlzLnByaW9yaXR5Tm9kZV8pO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExlYWZOb2RlLCBcIl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3JcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX19jaGlsZHJlbk5vZGVDb25zdHJ1Y3RvcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBfX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yID0gdmFsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuaXNMZWFmTm9kZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS5nZXRQcmlvcml0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcmlvcml0eU5vZGVfO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLnVwZGF0ZVByaW9yaXR5ID0gZnVuY3Rpb24gKG5ld1ByaW9yaXR5Tm9kZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTGVhZk5vZGUodGhpcy52YWx1ZV8sIG5ld1ByaW9yaXR5Tm9kZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuZ2V0SW1tZWRpYXRlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XHJcbiAgICAgICAgLy8gSGFjayB0byB0cmVhdCBwcmlvcml0eSBhcyBhIHJlZ3VsYXIgY2hpbGRcclxuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmlvcml0eU5vZGVfO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIExlYWZOb2RlLl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IuRU1QVFlfTk9ERTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuZ2V0Q2hpbGQgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIGlmIChwYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGF0aC5nZXRGcm9udCgpID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmlvcml0eU5vZGVfO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIExlYWZOb2RlLl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IuRU1QVFlfTk9ERTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLmdldFByZWRlY2Vzc29yQ2hpbGROYW1lID0gZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGROb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUudXBkYXRlSW1tZWRpYXRlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lLCBuZXdDaGlsZE5vZGUpIHtcclxuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVQcmlvcml0eShuZXdDaGlsZE5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChuZXdDaGlsZE5vZGUuaXNFbXB0eSgpICYmIGNoaWxkTmFtZSAhPT0gJy5wcmlvcml0eScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gTGVhZk5vZGUuX19jaGlsZHJlbk5vZGVDb25zdHJ1Y3Rvci5FTVBUWV9OT0RFLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGNoaWxkTmFtZSwgbmV3Q2hpbGROb2RlKS51cGRhdGVQcmlvcml0eSh0aGlzLnByaW9yaXR5Tm9kZV8pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS51cGRhdGVDaGlsZCA9IGZ1bmN0aW9uIChwYXRoLCBuZXdDaGlsZE5vZGUpIHtcclxuICAgICAgICB2YXIgZnJvbnQgPSBwYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgaWYgKGZyb250ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdDaGlsZE5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG5ld0NoaWxkTm9kZS5pc0VtcHR5KCkgJiYgZnJvbnQgIT09ICcucHJpb3JpdHknKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdXRpbC5hc3NlcnQoZnJvbnQgIT09ICcucHJpb3JpdHknIHx8IHBhdGguZ2V0TGVuZ3RoKCkgPT09IDEsICcucHJpb3JpdHkgbXVzdCBiZSB0aGUgbGFzdCB0b2tlbiBpbiBhIHBhdGgnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSW1tZWRpYXRlQ2hpbGQoZnJvbnQsIExlYWZOb2RlLl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IuRU1QVFlfTk9ERS51cGRhdGVDaGlsZChwYXRoLnBvcEZyb250KCksIG5ld0NoaWxkTm9kZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS5udW1DaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbiAoaW5kZXgsIGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS52YWwgPSBmdW5jdGlvbiAoZXhwb3J0Rm9ybWF0KSB7XHJcbiAgICAgICAgaWYgKGV4cG9ydEZvcm1hdCAmJiAhdGhpcy5nZXRQcmlvcml0eSgpLmlzRW1wdHkoKSlcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICcudmFsdWUnOiB0aGlzLmdldFZhbHVlKCksXHJcbiAgICAgICAgICAgICAgICAnLnByaW9yaXR5JzogdGhpcy5nZXRQcmlvcml0eSgpLnZhbCgpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLmhhc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGF6eUhhc2hfID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciB0b0hhc2ggPSAnJztcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnByaW9yaXR5Tm9kZV8uaXNFbXB0eSgpKVxyXG4gICAgICAgICAgICAgICAgdG9IYXNoICs9XHJcbiAgICAgICAgICAgICAgICAgICAgJ3ByaW9yaXR5OicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlvcml0eUhhc2hUZXh0KHRoaXMucHJpb3JpdHlOb2RlXy52YWwoKSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnOic7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHRoaXMudmFsdWVfO1xyXG4gICAgICAgICAgICB0b0hhc2ggKz0gdHlwZSArICc6JztcclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICB0b0hhc2ggKz0gZG91YmxlVG9JRUVFNzU0U3RyaW5nKHRoaXMudmFsdWVfKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRvSGFzaCArPSB0aGlzLnZhbHVlXztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmxhenlIYXNoXyA9IHNoYTEodG9IYXNoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGF6eUhhc2hfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGxlYWYgbm9kZS5cclxuICAgICAqIEByZXR1cm4ge09iamVjdHxzdHJpbmd8bnVtYmVyfGJvb2xlYW59IFRoZSB2YWx1ZSBvZiB0aGUgbm9kZS5cclxuICAgICAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS5jb21wYXJlVG8gPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAob3RoZXIgPT09IExlYWZOb2RlLl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IuRU1QVFlfTk9ERSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob3RoZXIgaW5zdGFuY2VvZiBMZWFmTm9kZS5fX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0KG90aGVyLmlzTGVhZk5vZGUoKSwgJ1Vua25vd24gbm9kZSB0eXBlJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVUb0xlYWZOb2RlXyhvdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ29tcGFyaXNvbiBzcGVjaWZpY2FsbHkgZm9yIHR3byBsZWFmIG5vZGVzXHJcbiAgICAgKiBAcGFyYW0geyFMZWFmTm9kZX0gb3RoZXJMZWFmXHJcbiAgICAgKiBAcmV0dXJuIHshbnVtYmVyfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLmNvbXBhcmVUb0xlYWZOb2RlXyA9IGZ1bmN0aW9uIChvdGhlckxlYWYpIHtcclxuICAgICAgICB2YXIgb3RoZXJMZWFmVHlwZSA9IHR5cGVvZiBvdGhlckxlYWYudmFsdWVfO1xyXG4gICAgICAgIHZhciB0aGlzTGVhZlR5cGUgPSB0eXBlb2YgdGhpcy52YWx1ZV87XHJcbiAgICAgICAgdmFyIG90aGVySW5kZXggPSBMZWFmTm9kZS5WQUxVRV9UWVBFX09SREVSLmluZGV4T2Yob3RoZXJMZWFmVHlwZSk7XHJcbiAgICAgICAgdmFyIHRoaXNJbmRleCA9IExlYWZOb2RlLlZBTFVFX1RZUEVfT1JERVIuaW5kZXhPZih0aGlzTGVhZlR5cGUpO1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KG90aGVySW5kZXggPj0gMCwgJ1Vua25vd24gbGVhZiB0eXBlOiAnICsgb3RoZXJMZWFmVHlwZSk7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQodGhpc0luZGV4ID49IDAsICdVbmtub3duIGxlYWYgdHlwZTogJyArIHRoaXNMZWFmVHlwZSk7XHJcbiAgICAgICAgaWYgKG90aGVySW5kZXggPT09IHRoaXNJbmRleCkge1xyXG4gICAgICAgICAgICAvLyBTYW1lIHR5cGUsIGNvbXBhcmUgdmFsdWVzXHJcbiAgICAgICAgICAgIGlmICh0aGlzTGVhZlR5cGUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBEZWZlcnJlZCB2YWx1ZSBub2RlcyBhcmUgYWxsIGVxdWFsLCBidXQgd2Ugc2hvdWxkIGFsc28gbmV2ZXIgZ2V0IHRvIHRoaXMgcG9pbnQuLi5cclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgd29ya3MgYmVjYXVzZSB0cnVlID4gZmFsc2UsIGFsbCBvdGhlcnMgYXJlIG51bWJlciBvciBzdHJpbmcgY29tcGFyaXNvbnNcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlXyA8IG90aGVyTGVhZi52YWx1ZV8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnZhbHVlXyA9PT0gb3RoZXJMZWFmLnZhbHVlXykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzSW5kZXggLSBvdGhlckluZGV4O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS53aXRoSW5kZXggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuaXNJbmRleGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKG90aGVyID09PSB0aGlzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvdGhlci5pc0xlYWZOb2RlKCkpIHtcclxuICAgICAgICAgICAgdmFyIG90aGVyTGVhZiA9IG90aGVyO1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMudmFsdWVfID09PSBvdGhlckxlYWYudmFsdWVfICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByaW9yaXR5Tm9kZV8uZXF1YWxzKG90aGVyTGVhZi5wcmlvcml0eU5vZGVfKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHNvcnQgb3JkZXIgZm9yIGNvbXBhcmluZyBsZWFmIG5vZGVzIG9mIGRpZmZlcmVudCB0eXBlcy4gSWYgdHdvIGxlYWYgbm9kZXMgaGF2ZVxyXG4gICAgICogdGhlIHNhbWUgdHlwZSwgdGhlIGNvbXBhcmlzb24gZmFsbHMgYmFjayB0byB0aGVpciB2YWx1ZVxyXG4gICAgICogQHR5cGUge0FycmF5Ljwhc3RyaW5nPn1cclxuICAgICAqIEBjb25zdFxyXG4gICAgICovXHJcbiAgICBMZWFmTm9kZS5WQUxVRV9UWVBFX09SREVSID0gWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnc3RyaW5nJ107XHJcbiAgICByZXR1cm4gTGVhZk5vZGU7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgbm9kZUZyb21KU09OO1xyXG52YXIgTUFYX05PREUkMTtcclxuZnVuY3Rpb24gc2V0Tm9kZUZyb21KU09OKHZhbCkge1xyXG4gICAgbm9kZUZyb21KU09OID0gdmFsO1xyXG59XHJcbmZ1bmN0aW9uIHNldE1heE5vZGUkMSh2YWwpIHtcclxuICAgIE1BWF9OT0RFJDEgPSB2YWw7XHJcbn1cclxuLyoqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZXh0ZW5kcyB7SW5kZXh9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG52YXIgUHJpb3JpdHlJbmRleCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFByaW9yaXR5SW5kZXgsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQcmlvcml0eUluZGV4KCkge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUHJpb3JpdHlJbmRleC5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgdmFyIGFQcmlvcml0eSA9IGEubm9kZS5nZXRQcmlvcml0eSgpO1xyXG4gICAgICAgIHZhciBiUHJpb3JpdHkgPSBiLm5vZGUuZ2V0UHJpb3JpdHkoKTtcclxuICAgICAgICB2YXIgaW5kZXhDbXAgPSBhUHJpb3JpdHkuY29tcGFyZVRvKGJQcmlvcml0eSk7XHJcbiAgICAgICAgaWYgKGluZGV4Q21wID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuYW1lQ29tcGFyZShhLm5hbWUsIGIubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhDbXA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUHJpb3JpdHlJbmRleC5wcm90b3R5cGUuaXNEZWZpbmVkT24gPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiAhbm9kZS5nZXRQcmlvcml0eSgpLmlzRW1wdHkoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFByaW9yaXR5SW5kZXgucHJvdG90eXBlLmluZGV4ZWRWYWx1ZUNoYW5nZWQgPSBmdW5jdGlvbiAob2xkTm9kZSwgbmV3Tm9kZSkge1xyXG4gICAgICAgIHJldHVybiAhb2xkTm9kZS5nZXRQcmlvcml0eSgpLmVxdWFscyhuZXdOb2RlLmdldFByaW9yaXR5KCkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUHJpb3JpdHlJbmRleC5wcm90b3R5cGUubWluUG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gTmFtZWROb2RlLk1JTjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFByaW9yaXR5SW5kZXgucHJvdG90eXBlLm1heFBvc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUoTUFYX05BTUUsIG5ldyBMZWFmTm9kZSgnW1BSSU9SSVRZLVBPU1RdJywgTUFYX05PREUkMSkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHsqfSBpbmRleFZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICogQHJldHVybiB7IU5hbWVkTm9kZX1cclxuICAgICAqL1xyXG4gICAgUHJpb3JpdHlJbmRleC5wcm90b3R5cGUubWFrZVBvc3QgPSBmdW5jdGlvbiAoaW5kZXhWYWx1ZSwgbmFtZSkge1xyXG4gICAgICAgIHZhciBwcmlvcml0eU5vZGUgPSBub2RlRnJvbUpTT04oaW5kZXhWYWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUobmFtZSwgbmV3IExlYWZOb2RlKCdbUFJJT1JJVFktUE9TVF0nLCBwcmlvcml0eU5vZGUpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFzdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBmb3IgaW5jbHVzaW9uIGluIGEgcXVlcnkgc3BlY1xyXG4gICAgICovXHJcbiAgICBQcmlvcml0eUluZGV4LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJy5wcmlvcml0eSc7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFByaW9yaXR5SW5kZXg7XHJcbn0oSW5kZXgpKTtcclxudmFyIFBSSU9SSVRZX0lOREVYID0gbmV3IFByaW9yaXR5SW5kZXgoKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBbiBpdGVyYXRvciBvdmVyIGFuIExMUkJOb2RlLlxyXG4gKi9cclxudmFyIFNvcnRlZE1hcEl0ZXJhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAdGVtcGxhdGUgSywgViwgVFxyXG4gICAgICogQHBhcmFtIHtMTFJCTm9kZXxMTFJCRW1wdHlOb2RlfSBub2RlIE5vZGUgdG8gaXRlcmF0ZS5cclxuICAgICAqIEBwYXJhbSB7P0t9IHN0YXJ0S2V5XHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEssIEspOiBudW1iZXJ9IGNvbXBhcmF0b3JcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNSZXZlcnNlXyBXaGV0aGVyIG9yIG5vdCB0byBpdGVyYXRlIGluIHJldmVyc2VcclxuICAgICAqIEBwYXJhbSB7KGZ1bmN0aW9uKEssIFYpOlQpPX0gcmVzdWx0R2VuZXJhdG9yX1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBTb3J0ZWRNYXBJdGVyYXRvcihub2RlLCBzdGFydEtleSwgY29tcGFyYXRvciwgaXNSZXZlcnNlXywgcmVzdWx0R2VuZXJhdG9yXykge1xyXG4gICAgICAgIGlmIChyZXN1bHRHZW5lcmF0b3JfID09PSB2b2lkIDApIHsgcmVzdWx0R2VuZXJhdG9yXyA9IG51bGw7IH1cclxuICAgICAgICB0aGlzLmlzUmV2ZXJzZV8gPSBpc1JldmVyc2VfO1xyXG4gICAgICAgIHRoaXMucmVzdWx0R2VuZXJhdG9yXyA9IHJlc3VsdEdlbmVyYXRvcl87XHJcbiAgICAgICAgLyoqIEBwcml2YXRlXHJcbiAgICAgICAgICogQHR5cGUge0FycmF5LjwhTExSQk5vZGU+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubm9kZVN0YWNrXyA9IFtdO1xyXG4gICAgICAgIHZhciBjbXAgPSAxO1xyXG4gICAgICAgIHdoaWxlICghbm9kZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGU7XHJcbiAgICAgICAgICAgIGNtcCA9IHN0YXJ0S2V5ID8gY29tcGFyYXRvcihub2RlLmtleSwgc3RhcnRLZXkpIDogMTtcclxuICAgICAgICAgICAgLy8gZmxpcCB0aGUgY29tcGFyaXNvbiBpZiB3ZSdyZSBnb2luZyBpbiByZXZlcnNlXHJcbiAgICAgICAgICAgIGlmIChpc1JldmVyc2VfKVxyXG4gICAgICAgICAgICAgICAgY21wICo9IC0xO1xyXG4gICAgICAgICAgICBpZiAoY21wIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBub2RlIGlzIGxlc3MgdGhhbiBvdXIgc3RhcnQga2V5LiBpZ25vcmUgaXRcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUmV2ZXJzZV8pIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21wID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG5vZGUgaXMgZXhhY3RseSBlcXVhbCB0byBvdXIgc3RhcnQga2V5LiBQdXNoIGl0IG9uIHRoZSBzdGFjaywgYnV0IHN0b3AgaXRlcmF0aW5nO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU3RhY2tfLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgbm9kZSBpcyBncmVhdGVyIHRoYW4gb3VyIHN0YXJ0IGtleSwgYWRkIGl0IHRvIHRoZSBzdGFjayBhbmQgbW92ZSB0byB0aGUgbmV4dCBvbmVcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZVN0YWNrXy5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSZXZlcnNlXykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFNvcnRlZE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5nZXROZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGVTdGFja18ubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZVN0YWNrXy5wb3AoKTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIGlmICh0aGlzLnJlc3VsdEdlbmVyYXRvcl8pXHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucmVzdWx0R2VuZXJhdG9yXyhub2RlLmtleSwgbm9kZS52YWx1ZSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXN1bHQgPSB7IGtleTogbm9kZS5rZXksIHZhbHVlOiBub2RlLnZhbHVlIH07XHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZXZlcnNlXykge1xyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5sZWZ0O1xyXG4gICAgICAgICAgICB3aGlsZSAoIW5vZGUuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTdGFja18ucHVzaChub2RlKTtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5yaWdodDtcclxuICAgICAgICAgICAgd2hpbGUgKCFub2RlLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU3RhY2tfLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5sZWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkTWFwSXRlcmF0b3IucHJvdG90eXBlLmhhc05leHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZVN0YWNrXy5sZW5ndGggPiAwO1xyXG4gICAgfTtcclxuICAgIFNvcnRlZE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGVTdGFja18ubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZVN0YWNrX1t0aGlzLm5vZGVTdGFja18ubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgaWYgKHRoaXMucmVzdWx0R2VuZXJhdG9yXykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHRHZW5lcmF0b3JfKG5vZGUua2V5LCBub2RlLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IGtleTogbm9kZS5rZXksIHZhbHVlOiBub2RlLnZhbHVlIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBTb3J0ZWRNYXBJdGVyYXRvcjtcclxufSgpKTtcclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBub2RlIGluIGEgTGVmdC1sZWFuaW5nIFJlZC1CbGFjayB0cmVlLlxyXG4gKi9cclxudmFyIExMUkJOb2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAdGVtcGxhdGUgSywgVlxyXG4gICAgICogQHBhcmFtIHshS30ga2V5IEtleSBhc3NvY2lhdGVkIHdpdGggdGhpcyBub2RlLlxyXG4gICAgICogQHBhcmFtIHshVn0gdmFsdWUgVmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbm9kZS5cclxuICAgICAqIEBwYXJhbSB7P2Jvb2xlYW59IGNvbG9yIFdoZXRoZXIgdGhpcyBub2RlIGlzIHJlZC5cclxuICAgICAqIEBwYXJhbSB7PyhMTFJCTm9kZXxMTFJCRW1wdHlOb2RlKT19IGxlZnQgTGVmdCBjaGlsZC5cclxuICAgICAqIEBwYXJhbSB7PyhMTFJCTm9kZXxMTFJCRW1wdHlOb2RlKT19IHJpZ2h0IFJpZ2h0IGNoaWxkLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBMTFJCTm9kZShrZXksIHZhbHVlLCBjb2xvciwgbGVmdCwgcmlnaHQpIHtcclxuICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yICE9IG51bGwgPyBjb2xvciA6IExMUkJOb2RlLlJFRDtcclxuICAgICAgICB0aGlzLmxlZnQgPVxyXG4gICAgICAgICAgICBsZWZ0ICE9IG51bGwgPyBsZWZ0IDogU29ydGVkTWFwLkVNUFRZX05PREU7XHJcbiAgICAgICAgdGhpcy5yaWdodCA9XHJcbiAgICAgICAgICAgIHJpZ2h0ICE9IG51bGwgPyByaWdodCA6IFNvcnRlZE1hcC5FTVBUWV9OT0RFO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgY3VycmVudCBub2RlLCBvcHRpb25hbGx5IHJlcGxhY2luZyBwaWVjZXMgb2YgaXQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHs/S30ga2V5IE5ldyBrZXkgZm9yIHRoZSBub2RlLCBvciBudWxsLlxyXG4gICAgICogQHBhcmFtIHs/Vn0gdmFsdWUgTmV3IHZhbHVlIGZvciB0aGUgbm9kZSwgb3IgbnVsbC5cclxuICAgICAqIEBwYXJhbSB7P2Jvb2xlYW59IGNvbG9yIE5ldyBjb2xvciBmb3IgdGhlIG5vZGUsIG9yIG51bGwuXHJcbiAgICAgKiBAcGFyYW0gez9MTFJCTm9kZXxMTFJCRW1wdHlOb2RlfSBsZWZ0IE5ldyBsZWZ0IGNoaWxkIGZvciB0aGUgbm9kZSwgb3IgbnVsbC5cclxuICAgICAqIEBwYXJhbSB7P0xMUkJOb2RlfExMUkJFbXB0eU5vZGV9IHJpZ2h0IE5ldyByaWdodCBjaGlsZCBmb3IgdGhlIG5vZGUsIG9yIG51bGwuXHJcbiAgICAgKiBAcmV0dXJuIHshTExSQk5vZGV9IFRoZSBub2RlIGNvcHkuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGNvbG9yLCBsZWZ0LCByaWdodCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoa2V5ICE9IG51bGwgPyBrZXkgOiB0aGlzLmtleSwgdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogdGhpcy52YWx1ZSwgY29sb3IgIT0gbnVsbCA/IGNvbG9yIDogdGhpcy5jb2xvciwgbGVmdCAhPSBudWxsID8gbGVmdCA6IHRoaXMubGVmdCwgcmlnaHQgIT0gbnVsbCA/IHJpZ2h0IDogdGhpcy5yaWdodCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB0b3RhbCBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIHRyZWUuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LmNvdW50KCkgKyAxICsgdGhpcy5yaWdodC5jb3VudCgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdHJlZSBpcyBlbXB0eS5cclxuICAgICAqL1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJhdmVyc2VzIHRoZSB0cmVlIGluIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZnVuY3Rpb25cclxuICAgICAqIGZvciBlYWNoIG5vZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighSywgIVYpOip9IGFjdGlvbiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZm9yIGVhY2hcclxuICAgICAqICAgbm9kZS4gIElmIGl0IHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXHJcbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XHJcbiAgICAgKiAgIHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvblxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUuaW5vcmRlclRyYXZlcnNhbCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMubGVmdC5pbm9yZGVyVHJhdmVyc2FsKGFjdGlvbikgfHxcclxuICAgICAgICAgICAgYWN0aW9uKHRoaXMua2V5LCB0aGlzLnZhbHVlKSB8fFxyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0Lmlub3JkZXJUcmF2ZXJzYWwoYWN0aW9uKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXHJcbiAgICAgKiBmb3IgZWFjaCBub2RlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIU9iamVjdCwgIU9iamVjdCl9IGFjdGlvbiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZm9yIGVhY2hcclxuICAgICAqIG5vZGUuICBJZiBpdCByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpcyBhYm9ydGVkLlxyXG4gICAgICogQHJldHVybiB7Kn0gVHJ1ZSBpZiB0cmF2ZXJzYWwgd2FzIGFib3J0ZWQuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5yZXZlcnNlVHJhdmVyc2FsID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5yaWdodC5yZXZlcnNlVHJhdmVyc2FsKGFjdGlvbikgfHxcclxuICAgICAgICAgICAgYWN0aW9uKHRoaXMua2V5LCB0aGlzLnZhbHVlKSB8fFxyXG4gICAgICAgICAgICB0aGlzLmxlZnQucmV2ZXJzZVRyYXZlcnNhbChhY3Rpb24pKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFPYmplY3R9IFRoZSBtaW5pbXVtIG5vZGUgaW4gdGhlIHRyZWUuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUubWluXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0LmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZnQubWluXygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFLfSBUaGUgbWF4aW11bSBrZXkgaW4gdGhlIHRyZWUuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5taW5LZXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWluXygpLmtleTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFLfSBUaGUgbWF4aW11bSBrZXkgaW4gdGhlIHRyZWUuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5tYXhLZXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmlnaHQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJpZ2h0Lm1heEtleSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IGtleSBLZXkgdG8gaW5zZXJ0LlxyXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSB2YWx1ZSBWYWx1ZSB0byBpbnNlcnQuXHJcbiAgICAgKiBAcGFyYW0ge0NvbXBhcmF0b3J9IGNvbXBhcmF0b3IgQ29tcGFyYXRvci5cclxuICAgICAqIEByZXR1cm4geyFMTFJCTm9kZX0gTmV3IHRyZWUsIHdpdGggdGhlIGtleS92YWx1ZSBhZGRlZC5cclxuICAgICAqL1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XHJcbiAgICAgICAgdmFyIGNtcCwgbjtcclxuICAgICAgICBuID0gdGhpcztcclxuICAgICAgICBjbXAgPSBjb21wYXJhdG9yKGtleSwgbi5rZXkpO1xyXG4gICAgICAgIGlmIChjbXAgPCAwKSB7XHJcbiAgICAgICAgICAgIG4gPSBuLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgbi5sZWZ0Lmluc2VydChrZXksIHZhbHVlLCBjb21wYXJhdG9yKSwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICBuID0gbi5jb3B5KG51bGwsIHZhbHVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG4gPSBuLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbi5yaWdodC5pbnNlcnQoa2V5LCB2YWx1ZSwgY29tcGFyYXRvcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbi5maXhVcF8oKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJuIHshTExSQk5vZGV8TExSQkVtcHR5Tm9kZX0gTmV3IHRyZWUsIHdpdGggdGhlIG1pbmltdW0ga2V5IHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5yZW1vdmVNaW5fID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmxlZnQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTb3J0ZWRNYXAuRU1QVFlfTk9ERTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xyXG4gICAgICAgIGlmICghbi5sZWZ0LmlzUmVkXygpICYmICFuLmxlZnQubGVmdC5pc1JlZF8oKSlcclxuICAgICAgICAgICAgbiA9IG4ubW92ZVJlZExlZnRfKCk7XHJcbiAgICAgICAgbiA9IG4uY29weShudWxsLCBudWxsLCBudWxsLCBuLmxlZnQucmVtb3ZlTWluXygpLCBudWxsKTtcclxuICAgICAgICByZXR1cm4gbi5maXhVcF8oKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0ga2V5IFRoZSBrZXkgb2YgdGhlIGl0ZW0gdG8gcmVtb3ZlLlxyXG4gICAgICogQHBhcmFtIHtDb21wYXJhdG9yfSBjb21wYXJhdG9yIENvbXBhcmF0b3IuXHJcbiAgICAgKiBAcmV0dXJuIHshTExSQk5vZGV8TExSQkVtcHR5Tm9kZX0gTmV3IHRyZWUsIHdpdGggdGhlIHNwZWNpZmllZCBpdGVtIHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5LCBjb21wYXJhdG9yKSB7XHJcbiAgICAgICAgdmFyIG4sIHNtYWxsZXN0O1xyXG4gICAgICAgIG4gPSB0aGlzO1xyXG4gICAgICAgIGlmIChjb21wYXJhdG9yKGtleSwgbi5rZXkpIDwgMCkge1xyXG4gICAgICAgICAgICBpZiAoIW4ubGVmdC5pc0VtcHR5KCkgJiYgIW4ubGVmdC5pc1JlZF8oKSAmJiAhbi5sZWZ0LmxlZnQuaXNSZWRfKCkpIHtcclxuICAgICAgICAgICAgICAgIG4gPSBuLm1vdmVSZWRMZWZ0XygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG4gPSBuLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgbi5sZWZ0LnJlbW92ZShrZXksIGNvbXBhcmF0b3IpLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChuLmxlZnQuaXNSZWRfKCkpXHJcbiAgICAgICAgICAgICAgICBuID0gbi5yb3RhdGVSaWdodF8oKTtcclxuICAgICAgICAgICAgaWYgKCFuLnJpZ2h0LmlzRW1wdHkoKSAmJiAhbi5yaWdodC5pc1JlZF8oKSAmJiAhbi5yaWdodC5sZWZ0LmlzUmVkXygpKSB7XHJcbiAgICAgICAgICAgICAgICBuID0gbi5tb3ZlUmVkUmlnaHRfKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbXBhcmF0b3Ioa2V5LCBuLmtleSkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChuLnJpZ2h0LmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTb3J0ZWRNYXAuRU1QVFlfTk9ERTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNtYWxsZXN0ID0gbi5yaWdodC5taW5fKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IG4uY29weShzbWFsbGVzdC5rZXksIHNtYWxsZXN0LnZhbHVlLCBudWxsLCBudWxsLCBuLnJpZ2h0LnJlbW92ZU1pbl8oKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbiA9IG4uY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCBuLnJpZ2h0LnJlbW92ZShrZXksIGNvbXBhcmF0b3IpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG4uZml4VXBfKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIGEgUkVEIG5vZGUuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5pc1JlZF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3I7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7IUxMUkJOb2RlfSBOZXcgdHJlZSBhZnRlciBwZXJmb3JtaW5nIGFueSBuZWVkZWQgcm90YXRpb25zLlxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUuZml4VXBfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuID0gdGhpcztcclxuICAgICAgICBpZiAobi5yaWdodC5pc1JlZF8oKSAmJiAhbi5sZWZ0LmlzUmVkXygpKVxyXG4gICAgICAgICAgICBuID0gbi5yb3RhdGVMZWZ0XygpO1xyXG4gICAgICAgIGlmIChuLmxlZnQuaXNSZWRfKCkgJiYgbi5sZWZ0LmxlZnQuaXNSZWRfKCkpXHJcbiAgICAgICAgICAgIG4gPSBuLnJvdGF0ZVJpZ2h0XygpO1xyXG4gICAgICAgIGlmIChuLmxlZnQuaXNSZWRfKCkgJiYgbi5yaWdodC5pc1JlZF8oKSlcclxuICAgICAgICAgICAgbiA9IG4uY29sb3JGbGlwXygpO1xyXG4gICAgICAgIHJldHVybiBuO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4geyFMTFJCTm9kZX0gTmV3IHRyZWUsIGFmdGVyIG1vdmVSZWRMZWZ0LlxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUubW92ZVJlZExlZnRfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuID0gdGhpcy5jb2xvckZsaXBfKCk7XHJcbiAgICAgICAgaWYgKG4ucmlnaHQubGVmdC5pc1JlZF8oKSkge1xyXG4gICAgICAgICAgICBuID0gbi5jb3B5KG51bGwsIG51bGwsIG51bGwsIG51bGwsIG4ucmlnaHQucm90YXRlUmlnaHRfKCkpO1xyXG4gICAgICAgICAgICBuID0gbi5yb3RhdGVMZWZ0XygpO1xyXG4gICAgICAgICAgICBuID0gbi5jb2xvckZsaXBfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4geyFMTFJCTm9kZX0gTmV3IHRyZWUsIGFmdGVyIG1vdmVSZWRSaWdodC5cclxuICAgICAqL1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLm1vdmVSZWRSaWdodF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG4gPSB0aGlzLmNvbG9yRmxpcF8oKTtcclxuICAgICAgICBpZiAobi5sZWZ0LmxlZnQuaXNSZWRfKCkpIHtcclxuICAgICAgICAgICAgbiA9IG4ucm90YXRlUmlnaHRfKCk7XHJcbiAgICAgICAgICAgIG4gPSBuLmNvbG9yRmxpcF8oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG47XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7IUxMUkJOb2RlfSBOZXcgdHJlZSwgYWZ0ZXIgcm90YXRlTGVmdC5cclxuICAgICAqL1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLnJvdGF0ZUxlZnRfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBubCA9IHRoaXMuY29weShudWxsLCBudWxsLCBMTFJCTm9kZS5SRUQsIG51bGwsIHRoaXMucmlnaHQubGVmdCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmlnaHQuY29weShudWxsLCBudWxsLCB0aGlzLmNvbG9yLCBubCwgbnVsbCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7IUxMUkJOb2RlfSBOZXcgdHJlZSwgYWZ0ZXIgcm90YXRlUmlnaHQuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5yb3RhdGVSaWdodF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG5yID0gdGhpcy5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLlJFRCwgdGhpcy5sZWZ0LnJpZ2h0LCBudWxsKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LmNvcHkobnVsbCwgbnVsbCwgdGhpcy5jb2xvciwgbnVsbCwgbnIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4geyFMTFJCTm9kZX0gTmV3IHRyZWUsIGFmdGVyIGNvbG9yRmxpcC5cclxuICAgICAqL1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLmNvbG9yRmxpcF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGxlZnQgPSB0aGlzLmxlZnQuY29weShudWxsLCBudWxsLCAhdGhpcy5sZWZ0LmNvbG9yLCBudWxsLCBudWxsKTtcclxuICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLnJpZ2h0LmNvcHkobnVsbCwgbnVsbCwgIXRoaXMucmlnaHQuY29sb3IsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvcHkobnVsbCwgbnVsbCwgIXRoaXMuY29sb3IsIGxlZnQsIHJpZ2h0KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZvciB0ZXN0aW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFsbCBpcyB3ZWxsLlxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUuY2hlY2tNYXhEZXB0aF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGJsYWNrRGVwdGggPSB0aGlzLmNoZWNrXygpO1xyXG4gICAgICAgIHJldHVybiBNYXRoLnBvdygyLjAsIGJsYWNrRGVwdGgpIDw9IHRoaXMuY291bnQoKSArIDE7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBOb3Qgc3VyZSB3aGF0IHRoaXMgcmV0dXJucyBleGFjdGx5LiA6LSkuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5jaGVja18gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGJsYWNrRGVwdGg7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZWRfKCkgJiYgdGhpcy5sZWZ0LmlzUmVkXygpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVkIG5vZGUgaGFzIHJlZCBjaGlsZCgnICsgdGhpcy5rZXkgKyAnLCcgKyB0aGlzLnZhbHVlICsgJyknKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucmlnaHQuaXNSZWRfKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSaWdodCBjaGlsZCBvZiAoJyArIHRoaXMua2V5ICsgJywnICsgdGhpcy52YWx1ZSArICcpIGlzIHJlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBibGFja0RlcHRoID0gdGhpcy5sZWZ0LmNoZWNrXygpO1xyXG4gICAgICAgIGlmIChibGFja0RlcHRoICE9PSB0aGlzLnJpZ2h0LmNoZWNrXygpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQmxhY2sgZGVwdGhzIGRpZmZlcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJsYWNrRGVwdGggKyAodGhpcy5pc1JlZF8oKSA/IDAgOiAxKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTExSQk5vZGUuUkVEID0gdHJ1ZTtcclxuICAgIExMUkJOb2RlLkJMQUNLID0gZmFsc2U7XHJcbiAgICByZXR1cm4gTExSQk5vZGU7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGFuIGVtcHR5IG5vZGUgKGEgbGVhZiBub2RlIGluIHRoZSBSZWQtQmxhY2sgVHJlZSkuXHJcbiAqL1xyXG52YXIgTExSQkVtcHR5Tm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExMUkJFbXB0eU5vZGUoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IG5vZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7IUxMUkJFbXB0eU5vZGV9IFRoZSBub2RlIGNvcHkuXHJcbiAgICAgKi9cclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgY29sb3IsIGxlZnQsIHJpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS92YWx1ZSBhZGRlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFLfSBrZXkgS2V5IHRvIGJlIGFkZGVkLlxyXG4gICAgICogQHBhcmFtIHshVn0gdmFsdWUgVmFsdWUgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBAcGFyYW0ge0NvbXBhcmF0b3J9IGNvbXBhcmF0b3IgQ29tcGFyYXRvci5cclxuICAgICAqIEByZXR1cm4geyFMTFJCTm9kZX0gTmV3IHRyZWUsIHdpdGggaXRlbSBhZGRlZC5cclxuICAgICAqL1xyXG4gICAgTExSQkVtcHR5Tm9kZS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcclxuICAgICAgICByZXR1cm4gbmV3IExMUkJOb2RlKGtleSwgdmFsdWUsIG51bGwpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIHRyZWUsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkgcmVtb3ZlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFLfSBrZXkgVGhlIGtleSB0byByZW1vdmUuXHJcbiAgICAgKiBAcGFyYW0ge0NvbXBhcmF0b3J9IGNvbXBhcmF0b3IgQ29tcGFyYXRvci5cclxuICAgICAqIEByZXR1cm4geyFMTFJCRW1wdHlOb2RlfSBOZXcgdHJlZSwgd2l0aCBpdGVtIHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChrZXksIGNvbXBhcmF0b3IpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHRvdGFsIG51bWJlciBvZiBub2RlcyBpbiB0aGUgdHJlZS5cclxuICAgICAqL1xyXG4gICAgTExSQkVtcHR5Tm9kZS5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSB0cmVlIGlzIGVtcHR5LlxyXG4gICAgICovXHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJhdmVyc2VzIHRoZSB0cmVlIGluIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZnVuY3Rpb25cclxuICAgICAqIGZvciBlYWNoIG5vZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighSywgIVYpOip9IGFjdGlvbiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZm9yIGVhY2hcclxuICAgICAqIG5vZGUuICBJZiBpdCByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpcyBhYm9ydGVkLlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0cmF2ZXJzYWwgd2FzIGFib3J0ZWQuXHJcbiAgICAgKi9cclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLmlub3JkZXJUcmF2ZXJzYWwgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJhdmVyc2VzIHRoZSB0cmVlIGluIHJldmVyc2Uga2V5IG9yZGVyIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvbiBmdW5jdGlvblxyXG4gICAgICogZm9yIGVhY2ggbm9kZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFLLCAhVil9IGFjdGlvbiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZm9yIGVhY2hcclxuICAgICAqIG5vZGUuICBJZiBpdCByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpcyBhYm9ydGVkLlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0cmF2ZXJzYWwgd2FzIGFib3J0ZWQuXHJcbiAgICAgKi9cclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLnJldmVyc2VUcmF2ZXJzYWwgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7bnVsbH1cclxuICAgICAqL1xyXG4gICAgTExSQkVtcHR5Tm9kZS5wcm90b3R5cGUubWluS2V5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7bnVsbH1cclxuICAgICAqL1xyXG4gICAgTExSQkVtcHR5Tm9kZS5wcm90b3R5cGUubWF4S2V5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gTm90IHN1cmUgd2hhdCB0aGlzIHJldHVybnMgZXhhY3RseS4gOi0pLlxyXG4gICAgICovXHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5jaGVja18gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIG5vZGUgaXMgcmVkLlxyXG4gICAgICovXHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5pc1JlZF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBMTFJCRW1wdHlOb2RlO1xyXG59KCkpO1xyXG4vKipcclxuICogQW4gaW1tdXRhYmxlIHNvcnRlZCBtYXAgaW1wbGVtZW50YXRpb24sIGJhc2VkIG9uIGEgTGVmdC1sZWFuaW5nIFJlZC1CbGFja1xyXG4gKiB0cmVlLlxyXG4gKi9cclxudmFyIFNvcnRlZE1hcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHRlbXBsYXRlIEssIFZcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oSywgSyk6bnVtYmVyfSBjb21wYXJhdG9yXyBLZXkgY29tcGFyYXRvci5cclxuICAgICAqIEBwYXJhbSB7TExSQk5vZGU9fSByb290XyAoT3B0aW9uYWwpIFJvb3Qgbm9kZSBmb3IgdGhlIG1hcC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gU29ydGVkTWFwKGNvbXBhcmF0b3JfLCByb290Xykge1xyXG4gICAgICAgIGlmIChyb290XyA9PT0gdm9pZCAwKSB7IHJvb3RfID0gU29ydGVkTWFwLkVNUFRZX05PREU7IH1cclxuICAgICAgICB0aGlzLmNvbXBhcmF0b3JfID0gY29tcGFyYXRvcl87XHJcbiAgICAgICAgdGhpcy5yb290XyA9IHJvb3RfO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgbWFwLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5L3ZhbHVlIGFkZGVkIG9yIHJlcGxhY2VkLlxyXG4gICAgICogKFRPRE86IFdlIHNob3VsZCBwZXJoYXBzIHJlbmFtZSB0aGlzIG1ldGhvZCB0byAncHV0JylcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFLfSBrZXkgS2V5IHRvIGJlIGFkZGVkLlxyXG4gICAgICogQHBhcmFtIHshVn0gdmFsdWUgVmFsdWUgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBAcmV0dXJuIHshU29ydGVkTWFwLjxLLCBWPn0gTmV3IG1hcCwgd2l0aCBpdGVtIGFkZGVkLlxyXG4gICAgICovXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXAodGhpcy5jb21wYXJhdG9yXywgdGhpcy5yb290X1xyXG4gICAgICAgICAgICAuaW5zZXJ0KGtleSwgdmFsdWUsIHRoaXMuY29tcGFyYXRvcl8pXHJcbiAgICAgICAgICAgIC5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLkJMQUNLLCBudWxsLCBudWxsKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgbWFwLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IHJlbW92ZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshS30ga2V5IFRoZSBrZXkgdG8gcmVtb3ZlLlxyXG4gICAgICogQHJldHVybiB7IVNvcnRlZE1hcC48SywgVj59IE5ldyBtYXAsIHdpdGggaXRlbSByZW1vdmVkLlxyXG4gICAgICovXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcCh0aGlzLmNvbXBhcmF0b3JfLCB0aGlzLnJvb3RfXHJcbiAgICAgICAgICAgIC5yZW1vdmUoa2V5LCB0aGlzLmNvbXBhcmF0b3JfKVxyXG4gICAgICAgICAgICAuY29weShudWxsLCBudWxsLCBMTFJCTm9kZS5CTEFDSywgbnVsbCwgbnVsbCkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIG5vZGUgd2l0aCB0aGUgZ2l2ZW4ga2V5LCBvciBudWxsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IUt9IGtleSBUaGUga2V5IHRvIGxvb2sgdXAuXHJcbiAgICAgKiBAcmV0dXJuIHs/Vn0gVGhlIHZhbHVlIG9mIHRoZSBub2RlIHdpdGggdGhlIGdpdmVuIGtleSwgb3IgbnVsbCBpZiB0aGVcclxuICAgICAqIGtleSBkb2Vzbid0IGV4aXN0LlxyXG4gICAgICovXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgY21wO1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5yb290XztcclxuICAgICAgICB3aGlsZSAoIW5vZGUuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIGNtcCA9IHRoaXMuY29tcGFyYXRvcl8oa2V5LCBub2RlLmtleSk7XHJcbiAgICAgICAgICAgIGlmIChjbXAgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNtcCA8IDApIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21wID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGl0ZW0gKmJlZm9yZSogdGhlIHNwZWNpZmllZCBrZXksIG9yIG51bGwgaWYga2V5IGlzIHRoZSBmaXJzdCBpdGVtLlxyXG4gICAgICogQHBhcmFtIHtLfSBrZXkgVGhlIGtleSB0byBmaW5kIHRoZSBwcmVkZWNlc3NvciBvZlxyXG4gICAgICogQHJldHVybiB7P0t9IFRoZSBwcmVkZWNlc3NvciBrZXkuXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUuZ2V0UHJlZGVjZXNzb3JLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIGNtcCwgbm9kZSA9IHRoaXMucm9vdF8sIHJpZ2h0UGFyZW50ID0gbnVsbDtcclxuICAgICAgICB3aGlsZSAoIW5vZGUuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIGNtcCA9IHRoaXMuY29tcGFyYXRvcl8oa2V5LCBub2RlLmtleSk7XHJcbiAgICAgICAgICAgIGlmIChjbXAgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICghbm9kZS5sZWZ0LmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCFub2RlLnJpZ2h0LmlzRW1wdHkoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUua2V5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmlnaHRQYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmlnaHRQYXJlbnQua2V5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIGZpcnN0IGl0ZW0uXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21wIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjbXAgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICByaWdodFBhcmVudCA9IG5vZGU7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byBmaW5kIHByZWRlY2Vzc29yIGtleSBmb3IgYSBub25leGlzdGVudCBrZXkuICBXaGF0IGdpdmVzPycpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWFwIGlzIGVtcHR5LlxyXG4gICAgICovXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdF8uaXNFbXB0eSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgdG90YWwgbnVtYmVyIG9mIG5vZGVzIGluIHRoZSBtYXAuXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdF8uY291bnQoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gez9LfSBUaGUgbWluaW11bSBrZXkgaW4gdGhlIG1hcC5cclxuICAgICAqL1xyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5taW5LZXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdF8ubWluS2V5KCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/S30gVGhlIG1heGltdW0ga2V5IGluIHRoZSBtYXAuXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUubWF4S2V5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvb3RfLm1heEtleSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJhdmVyc2VzIHRoZSBtYXAgaW4ga2V5IG9yZGVyIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvbiBmdW5jdGlvblxyXG4gICAgICogZm9yIGVhY2gga2V5L3ZhbHVlIHBhaXIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighSywgIVYpOip9IGFjdGlvbiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWRcclxuICAgICAqIGZvciBlYWNoIGtleS92YWx1ZSBwYWlyLiAgSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXHJcbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XHJcbiAgICAgKiAgIHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvblxyXG4gICAgICovXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmlub3JkZXJUcmF2ZXJzYWwgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdF8uaW5vcmRlclRyYXZlcnNhbChhY3Rpb24pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJhdmVyc2VzIHRoZSBtYXAgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXHJcbiAgICAgKiBmb3IgZWFjaCBrZXkvdmFsdWUgcGFpci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFPYmplY3QsICFPYmplY3QpfSBhY3Rpb24gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXHJcbiAgICAgKiBmb3IgZWFjaCBrZXkvdmFsdWUgcGFpci4gIElmIGFjdGlvbiByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpcyBhYm9ydGVkLlxyXG4gICAgICogQHJldHVybiB7Kn0gVHJ1ZSBpZiB0aGUgdHJhdmVyc2FsIHdhcyBhYm9ydGVkLlxyXG4gICAgICovXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLnJldmVyc2VUcmF2ZXJzYWwgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdF8ucmV2ZXJzZVRyYXZlcnNhbChhY3Rpb24pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBpdGVyYXRvciBvdmVyIHRoZSBTb3J0ZWRNYXAuXHJcbiAgICAgKiBAdGVtcGxhdGUgVFxyXG4gICAgICogQHBhcmFtIHsoZnVuY3Rpb24oSywgVik6VCk9fSByZXN1bHRHZW5lcmF0b3JcclxuICAgICAqIEByZXR1cm4ge1NvcnRlZE1hcEl0ZXJhdG9yLjxLLCBWLCBUPn0gVGhlIGl0ZXJhdG9yLlxyXG4gICAgICovXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmdldEl0ZXJhdG9yID0gZnVuY3Rpb24gKHJlc3VsdEdlbmVyYXRvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgU29ydGVkTWFwSXRlcmF0b3IodGhpcy5yb290XywgbnVsbCwgdGhpcy5jb21wYXJhdG9yXywgZmFsc2UsIHJlc3VsdEdlbmVyYXRvcik7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5nZXRJdGVyYXRvckZyb20gPSBmdW5jdGlvbiAoa2V5LCByZXN1bHRHZW5lcmF0b3IpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcEl0ZXJhdG9yKHRoaXMucm9vdF8sIGtleSwgdGhpcy5jb21wYXJhdG9yXywgZmFsc2UsIHJlc3VsdEdlbmVyYXRvcik7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5nZXRSZXZlcnNlSXRlcmF0b3JGcm9tID0gZnVuY3Rpb24gKGtleSwgcmVzdWx0R2VuZXJhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXBJdGVyYXRvcih0aGlzLnJvb3RfLCBrZXksIHRoaXMuY29tcGFyYXRvcl8sIHRydWUsIHJlc3VsdEdlbmVyYXRvcik7XHJcbiAgICB9O1xyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5nZXRSZXZlcnNlSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVzdWx0R2VuZXJhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXBJdGVyYXRvcih0aGlzLnJvb3RfLCBudWxsLCB0aGlzLmNvbXBhcmF0b3JfLCB0cnVlLCByZXN1bHRHZW5lcmF0b3IpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWx3YXlzIHVzZSB0aGUgc2FtZSBlbXB0eSBub2RlLCB0byByZWR1Y2UgbWVtb3J5LlxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5FTVBUWV9OT0RFID0gbmV3IExMUkJFbXB0eU5vZGUoKTtcclxuICAgIHJldHVybiBTb3J0ZWRNYXA7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgTE9HXzIgPSBNYXRoLmxvZygyKTtcclxuLyoqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIEJhc2UxMk51bSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBCYXNlMTJOdW0obGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGxvZ0Jhc2UyID0gZnVuY3Rpb24gKG51bSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoKE1hdGgubG9nKG51bSkgLyBMT0dfMiksIDEwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBiaXRNYXNrID0gZnVuY3Rpb24gKGJpdHMpIHsgcmV0dXJuIHBhcnNlSW50KEFycmF5KGJpdHMgKyAxKS5qb2luKCcxJyksIDIpOyB9O1xyXG4gICAgICAgIHRoaXMuY291bnQgPSBsb2dCYXNlMihsZW5ndGggKyAxKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfID0gdGhpcy5jb3VudCAtIDE7XHJcbiAgICAgICAgdmFyIG1hc2sgPSBiaXRNYXNrKHRoaXMuY291bnQpO1xyXG4gICAgICAgIHRoaXMuYml0c18gPSAobGVuZ3RoICsgMSkgJiBtYXNrO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBCYXNlMTJOdW0ucHJvdG90eXBlLm5leHRCaXRJc09uZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL25vaW5zcGVjdGlvbiBKU0JpdHdpc2VPcGVyYXRvclVzYWdlXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9ICEodGhpcy5iaXRzXyAmICgweDEgPDwgdGhpcy5jdXJyZW50XykpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudF8tLTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCYXNlMTJOdW07XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBUYWtlcyBhIGxpc3Qgb2YgY2hpbGQgbm9kZXMgYW5kIGNvbnN0cnVjdHMgYSBTb3J0ZWRTZXQgdXNpbmcgdGhlIGdpdmVuIGNvbXBhcmlzb25cclxuICogZnVuY3Rpb25cclxuICpcclxuICogVXNlcyB0aGUgYWxnb3JpdGhtIGRlc2NyaWJlZCBpbiB0aGUgcGFwZXIgbGlua2VkIGhlcmU6XHJcbiAqIGh0dHA6Ly9jaXRlc2VlcnguaXN0LnBzdS5lZHUvdmlld2RvYy9zdW1tYXJ5P2RvaT0xMC4xLjEuNDYuMTQ1OFxyXG4gKlxyXG4gKiBAdGVtcGxhdGUgSywgVlxyXG4gKiBAcGFyYW0ge0FycmF5LjwhTmFtZWROb2RlPn0gY2hpbGRMaXN0IFVuc29ydGVkIGxpc3Qgb2YgY2hpbGRyZW5cclxuICogQHBhcmFtIHtmdW5jdGlvbighTmFtZWROb2RlLCAhTmFtZWROb2RlKTpudW1iZXJ9IGNtcCBUaGUgY29tcGFyaXNvbiBtZXRob2QgdG8gYmUgdXNlZFxyXG4gKiBAcGFyYW0geyhmdW5jdGlvbihOYW1lZE5vZGUpOkspPX0ga2V5Rm4gQW4gb3B0aW9uYWwgZnVuY3Rpb24gdG8gZXh0cmFjdCBLIGZyb20gYSBub2RlIHdyYXBwZXIsIGlmIEsnc1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSBpcyBub3QgTmFtZWROb2RlXHJcbiAqIEBwYXJhbSB7KGZ1bmN0aW9uKEssIEspOm51bWJlcik9fSBtYXBTb3J0Rm4gQW4gb3B0aW9uYWwgb3ZlcnJpZGUgZm9yIGNvbXBhcmF0b3IgdXNlZCBieSB0aGUgZ2VuZXJhdGVkIHNvcnRlZCBtYXBcclxuICogQHJldHVybiB7U29ydGVkTWFwLjxLLCBWPn1cclxuICovXHJcbnZhciBidWlsZENoaWxkU2V0ID0gZnVuY3Rpb24gKGNoaWxkTGlzdCwgY21wLCBrZXlGbiwgbWFwU29ydEZuKSB7XHJcbiAgICBjaGlsZExpc3Quc29ydChjbXApO1xyXG4gICAgdmFyIGJ1aWxkQmFsYW5jZWRUcmVlID0gZnVuY3Rpb24gKGxvdywgaGlnaCkge1xyXG4gICAgICAgIHZhciBsZW5ndGggPSBoaWdoIC0gbG93O1xyXG4gICAgICAgIHZhciBuYW1lZE5vZGU7XHJcbiAgICAgICAgdmFyIGtleTtcclxuICAgICAgICBpZiAobGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgIG5hbWVkTm9kZSA9IGNoaWxkTGlzdFtsb3ddO1xyXG4gICAgICAgICAgICBrZXkgPSBrZXlGbiA/IGtleUZuKG5hbWVkTm9kZSkgOiBuYW1lZE5vZGU7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoa2V5LCBuYW1lZE5vZGUubm9kZSwgTExSQk5vZGUuQkxBQ0ssIG51bGwsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIG1pZGRsZSA9IHBhcnNlSW50KChsZW5ndGggLyAyKSwgMTApICsgbG93O1xyXG4gICAgICAgICAgICB2YXIgbGVmdCA9IGJ1aWxkQmFsYW5jZWRUcmVlKGxvdywgbWlkZGxlKTtcclxuICAgICAgICAgICAgdmFyIHJpZ2h0ID0gYnVpbGRCYWxhbmNlZFRyZWUobWlkZGxlICsgMSwgaGlnaCk7XHJcbiAgICAgICAgICAgIG5hbWVkTm9kZSA9IGNoaWxkTGlzdFttaWRkbGVdO1xyXG4gICAgICAgICAgICBrZXkgPSBrZXlGbiA/IGtleUZuKG5hbWVkTm9kZSkgOiBuYW1lZE5vZGU7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoa2V5LCBuYW1lZE5vZGUubm9kZSwgTExSQk5vZGUuQkxBQ0ssIGxlZnQsIHJpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIGJ1aWxkRnJvbTEyQXJyYXkgPSBmdW5jdGlvbiAoYmFzZTEyKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSBudWxsO1xyXG4gICAgICAgIHZhciByb290ID0gbnVsbDtcclxuICAgICAgICB2YXIgaW5kZXggPSBjaGlsZExpc3QubGVuZ3RoO1xyXG4gICAgICAgIHZhciBidWlsZFBlbm5hbnQgPSBmdW5jdGlvbiAoY2h1bmtTaXplLCBjb2xvcikge1xyXG4gICAgICAgICAgICB2YXIgbG93ID0gaW5kZXggLSBjaHVua1NpemU7XHJcbiAgICAgICAgICAgIHZhciBoaWdoID0gaW5kZXg7XHJcbiAgICAgICAgICAgIGluZGV4IC09IGNodW5rU2l6ZTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkVHJlZSA9IGJ1aWxkQmFsYW5jZWRUcmVlKGxvdyArIDEsIGhpZ2gpO1xyXG4gICAgICAgICAgICB2YXIgbmFtZWROb2RlID0gY2hpbGRMaXN0W2xvd107XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlGbiA/IGtleUZuKG5hbWVkTm9kZSkgOiBuYW1lZE5vZGU7XHJcbiAgICAgICAgICAgIGF0dGFjaFBlbm5hbnQobmV3IExMUkJOb2RlKGtleSwgbmFtZWROb2RlLm5vZGUsIGNvbG9yLCBudWxsLCBjaGlsZFRyZWUpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBhdHRhY2hQZW5uYW50ID0gZnVuY3Rpb24gKHBlbm5hbnQpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIG5vZGUubGVmdCA9IHBlbm5hbnQ7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gcGVubmFudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJvb3QgPSBwZW5uYW50O1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IHBlbm5hbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZTEyLmNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIGlzT25lID0gYmFzZTEyLm5leHRCaXRJc09uZSgpO1xyXG4gICAgICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIG5vZGVzIHRha2VuIGluIGVhY2ggc2xpY2UgaXMgMl4oYXJyLmxlbmd0aCAtIChpICsgMSkpXHJcbiAgICAgICAgICAgIHZhciBjaHVua1NpemUgPSBNYXRoLnBvdygyLCBiYXNlMTIuY291bnQgLSAoaSArIDEpKTtcclxuICAgICAgICAgICAgaWYgKGlzT25lKSB7XHJcbiAgICAgICAgICAgICAgICBidWlsZFBlbm5hbnQoY2h1bmtTaXplLCBMTFJCTm9kZS5CTEFDSyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50ID09IDJcclxuICAgICAgICAgICAgICAgIGJ1aWxkUGVubmFudChjaHVua1NpemUsIExMUkJOb2RlLkJMQUNLKTtcclxuICAgICAgICAgICAgICAgIGJ1aWxkUGVubmFudChjaHVua1NpemUsIExMUkJOb2RlLlJFRCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJvb3Q7XHJcbiAgICB9O1xyXG4gICAgdmFyIGJhc2UxMiA9IG5ldyBCYXNlMTJOdW0oY2hpbGRMaXN0Lmxlbmd0aCk7XHJcbiAgICB2YXIgcm9vdCA9IGJ1aWxkRnJvbTEyQXJyYXkoYmFzZTEyKTtcclxuICAgIHJldHVybiBuZXcgU29ydGVkTWFwKG1hcFNvcnRGbiB8fCBjbXAsIHJvb3QpO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIF9kZWZhdWx0SW5kZXhNYXA7XHJcbnZhciBmYWxsYmFja09iamVjdCA9IHt9O1xyXG4vKipcclxuICpcclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgRmFsbGJhY2tUeXBlfFNvcnRlZE1hcC48TmFtZWROb2RlLCBOb2RlPj59IGluZGV4ZXNcclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgSW5kZXg+fSBpbmRleFNldFxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBJbmRleE1hcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEluZGV4TWFwKGluZGV4ZXNfLCBpbmRleFNldF8pIHtcclxuICAgICAgICB0aGlzLmluZGV4ZXNfID0gaW5kZXhlc187XHJcbiAgICAgICAgdGhpcy5pbmRleFNldF8gPSBpbmRleFNldF87XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW5kZXhNYXAsIFwiRGVmYXVsdFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGRlZmF1bHQgSW5kZXhNYXAgZm9yIG5vZGVzIHdpdGhvdXQgYSBwcmlvcml0eVxyXG4gICAgICAgICAqIEB0eXBlIHshSW5kZXhNYXB9XHJcbiAgICAgICAgICogQGNvbnN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0KGZhbGxiYWNrT2JqZWN0ICYmIFBSSU9SSVRZX0lOREVYLCAnQ2hpbGRyZW5Ob2RlLnRzIGhhcyBub3QgYmVlbiBsb2FkZWQnKTtcclxuICAgICAgICAgICAgX2RlZmF1bHRJbmRleE1hcCA9XHJcbiAgICAgICAgICAgICAgICBfZGVmYXVsdEluZGV4TWFwIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IEluZGV4TWFwKHsgJy5wcmlvcml0eSc6IGZhbGxiYWNrT2JqZWN0IH0sIHsgJy5wcmlvcml0eSc6IFBSSU9SSVRZX0lOREVYIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gX2RlZmF1bHRJbmRleE1hcDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gaW5kZXhLZXlcclxuICAgICAqIEByZXR1cm4gez9Tb3J0ZWRNYXAuPE5hbWVkTm9kZSwgTm9kZT59XHJcbiAgICAgKi9cclxuICAgIEluZGV4TWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaW5kZXhLZXkpIHtcclxuICAgICAgICB2YXIgc29ydGVkTWFwID0gdXRpbC5zYWZlR2V0KHRoaXMuaW5kZXhlc18sIGluZGV4S2V5KTtcclxuICAgICAgICBpZiAoIXNvcnRlZE1hcClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbmRleCBkZWZpbmVkIGZvciAnICsgaW5kZXhLZXkpO1xyXG4gICAgICAgIGlmIChzb3J0ZWRNYXAgPT09IGZhbGxiYWNrT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSBpbmRleCBleGlzdHMsIGJ1dCBpdCBmYWxscyBiYWNrIHRvIGp1c3QgbmFtZSBjb21wYXJpc29uLiBSZXR1cm4gbnVsbCBzbyB0aGF0IHRoZSBjYWxsaW5nIGNvZGUgdXNlcyB0aGVcclxuICAgICAgICAgICAgLy8gcmVndWxhciBjaGlsZCBtYXBcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gc29ydGVkTWFwO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUluZGV4fSBpbmRleERlZmluaXRpb25cclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIEluZGV4TWFwLnByb3RvdHlwZS5oYXNJbmRleCA9IGZ1bmN0aW9uIChpbmRleERlZmluaXRpb24pIHtcclxuICAgICAgICByZXR1cm4gdXRpbC5jb250YWlucyh0aGlzLmluZGV4U2V0XywgaW5kZXhEZWZpbml0aW9uLnRvU3RyaW5nKCkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshSW5kZXh9IGluZGV4RGVmaW5pdGlvblxyXG4gICAgICogQHBhcmFtIHshU29ydGVkTWFwLjxzdHJpbmcsICFOb2RlPn0gZXhpc3RpbmdDaGlsZHJlblxyXG4gICAgICogQHJldHVybiB7IUluZGV4TWFwfVxyXG4gICAgICovXHJcbiAgICBJbmRleE1hcC5wcm90b3R5cGUuYWRkSW5kZXggPSBmdW5jdGlvbiAoaW5kZXhEZWZpbml0aW9uLCBleGlzdGluZ0NoaWxkcmVuKSB7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQoaW5kZXhEZWZpbml0aW9uICE9PSBLRVlfSU5ERVgsIFwiS2V5SW5kZXggYWx3YXlzIGV4aXN0cyBhbmQgaXNuJ3QgbWVhbnQgdG8gYmUgYWRkZWQgdG8gdGhlIEluZGV4TWFwLlwiKTtcclxuICAgICAgICB2YXIgY2hpbGRMaXN0ID0gW107XHJcbiAgICAgICAgdmFyIHNhd0luZGV4ZWRWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBpdGVyID0gZXhpc3RpbmdDaGlsZHJlbi5nZXRJdGVyYXRvcihOYW1lZE5vZGUuV3JhcCk7XHJcbiAgICAgICAgdmFyIG5leHQgPSBpdGVyLmdldE5leHQoKTtcclxuICAgICAgICB3aGlsZSAobmV4dCkge1xyXG4gICAgICAgICAgICBzYXdJbmRleGVkVmFsdWUgPVxyXG4gICAgICAgICAgICAgICAgc2F3SW5kZXhlZFZhbHVlIHx8IGluZGV4RGVmaW5pdGlvbi5pc0RlZmluZWRPbihuZXh0Lm5vZGUpO1xyXG4gICAgICAgICAgICBjaGlsZExpc3QucHVzaChuZXh0KTtcclxuICAgICAgICAgICAgbmV4dCA9IGl0ZXIuZ2V0TmV4dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmV3SW5kZXg7XHJcbiAgICAgICAgaWYgKHNhd0luZGV4ZWRWYWx1ZSkge1xyXG4gICAgICAgICAgICBuZXdJbmRleCA9IGJ1aWxkQ2hpbGRTZXQoY2hpbGRMaXN0LCBpbmRleERlZmluaXRpb24uZ2V0Q29tcGFyZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld0luZGV4ID0gZmFsbGJhY2tPYmplY3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpbmRleE5hbWUgPSBpbmRleERlZmluaXRpb24udG9TdHJpbmcoKTtcclxuICAgICAgICB2YXIgbmV3SW5kZXhTZXQgPSB1dGlsLmNsb25lKHRoaXMuaW5kZXhTZXRfKTtcclxuICAgICAgICBuZXdJbmRleFNldFtpbmRleE5hbWVdID0gaW5kZXhEZWZpbml0aW9uO1xyXG4gICAgICAgIHZhciBuZXdJbmRleGVzID0gdXRpbC5jbG9uZSh0aGlzLmluZGV4ZXNfKTtcclxuICAgICAgICBuZXdJbmRleGVzW2luZGV4TmFtZV0gPSBuZXdJbmRleDtcclxuICAgICAgICByZXR1cm4gbmV3IEluZGV4TWFwKG5ld0luZGV4ZXMsIG5ld0luZGV4U2V0KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEVuc3VyZSB0aGF0IHRoaXMgbm9kZSBpcyBwcm9wZXJseSB0cmFja2VkIGluIGFueSBpbmRleGVzIHRoYXQgd2UncmUgbWFpbnRhaW5pbmdcclxuICAgICAqIEBwYXJhbSB7IU5hbWVkTm9kZX0gbmFtZWROb2RlXHJcbiAgICAgKiBAcGFyYW0geyFTb3J0ZWRNYXAuPHN0cmluZywgIU5vZGU+fSBleGlzdGluZ0NoaWxkcmVuXHJcbiAgICAgKiBAcmV0dXJuIHshSW5kZXhNYXB9XHJcbiAgICAgKi9cclxuICAgIEluZGV4TWFwLnByb3RvdHlwZS5hZGRUb0luZGV4ZXMgPSBmdW5jdGlvbiAobmFtZWROb2RlLCBleGlzdGluZ0NoaWxkcmVuKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbmV3SW5kZXhlcyA9IHV0aWwubWFwKHRoaXMuaW5kZXhlc18sIGZ1bmN0aW9uIChpbmRleGVkQ2hpbGRyZW4sIGluZGV4TmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB1dGlsLnNhZmVHZXQoX3RoaXMuaW5kZXhTZXRfLCBpbmRleE5hbWUpO1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydChpbmRleCwgJ01pc3NpbmcgaW5kZXggaW1wbGVtZW50YXRpb24gZm9yICcgKyBpbmRleE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXhlZENoaWxkcmVuID09PSBmYWxsYmFja09iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIG5lZWQgdG8gaW5kZXggZXZlcnl0aGluZ1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4LmlzRGVmaW5lZE9uKG5hbWVkTm9kZS5ub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gYnVpbGQgdGhpcyBpbmRleFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZExpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlciA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0SXRlcmF0b3IoTmFtZWROb2RlLldyYXApO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gaXRlci5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQubmFtZSAhPSBuYW1lZE5vZGUubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRMaXN0LnB1c2gobmV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IGl0ZXIuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3QucHVzaChuYW1lZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBidWlsZENoaWxkU2V0KGNoaWxkTGlzdCwgaW5kZXguZ2V0Q29tcGFyZSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIGNoYW5nZSwgdGhpcyByZW1haW5zIGEgZmFsbGJhY2tcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2tPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdTbmFwID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmFtZWROb2RlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0NoaWxkcmVuID0gaW5kZXhlZENoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nU25hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkcmVuID0gbmV3Q2hpbGRyZW4ucmVtb3ZlKG5ldyBOYW1lZE5vZGUobmFtZWROb2RlLm5hbWUsIGV4aXN0aW5nU25hcCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0NoaWxkcmVuLmluc2VydChuYW1lZE5vZGUsIG5hbWVkTm9kZS5ub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgSW5kZXhNYXAobmV3SW5kZXhlcywgdGhpcy5pbmRleFNldF8pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IEluZGV4TWFwIGluc3RhbmNlIHdpdGggdGhlIGdpdmVuIHZhbHVlIHJlbW92ZWRcclxuICAgICAqIEBwYXJhbSB7IU5hbWVkTm9kZX0gbmFtZWROb2RlXHJcbiAgICAgKiBAcGFyYW0geyFTb3J0ZWRNYXAuPHN0cmluZywgIU5vZGU+fSBleGlzdGluZ0NoaWxkcmVuXHJcbiAgICAgKiBAcmV0dXJuIHshSW5kZXhNYXB9XHJcbiAgICAgKi9cclxuICAgIEluZGV4TWFwLnByb3RvdHlwZS5yZW1vdmVGcm9tSW5kZXhlcyA9IGZ1bmN0aW9uIChuYW1lZE5vZGUsIGV4aXN0aW5nQ2hpbGRyZW4pIHtcclxuICAgICAgICB2YXIgbmV3SW5kZXhlcyA9IHV0aWwubWFwKHRoaXMuaW5kZXhlc18sIGZ1bmN0aW9uIChpbmRleGVkQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ZWRDaGlsZHJlbiA9PT0gZmFsbGJhY2tPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGZhbGxiYWNrLiBKdXN0IHJldHVybiBpdCwgbm90aGluZyB0byBkbyBpbiB0aGlzIGNhc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleGVkQ2hpbGRyZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdTbmFwID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmFtZWROb2RlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nU25hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleGVkQ2hpbGRyZW4ucmVtb3ZlKG5ldyBOYW1lZE5vZGUobmFtZWROb2RlLm5hbWUsIGV4aXN0aW5nU25hcCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTm8gcmVjb3JkIG9mIHRoaXMgY2hpbGRcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXhlZENoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbmRleE1hcChuZXdJbmRleGVzLCB0aGlzLmluZGV4U2V0Xyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEluZGV4TWFwO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gTkFNRV9PTkxZX0NPTVBBUkFUT1IobGVmdCwgcmlnaHQpIHtcclxuICAgIHJldHVybiBuYW1lQ29tcGFyZShsZWZ0Lm5hbWUsIHJpZ2h0Lm5hbWUpO1xyXG59XHJcbmZ1bmN0aW9uIE5BTUVfQ09NUEFSQVRPUihsZWZ0LCByaWdodCkge1xyXG4gICAgcmV0dXJuIG5hbWVDb21wYXJlKGxlZnQsIHJpZ2h0KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gVE9ETzogRm9yIG1lbW9yeSBzYXZpbmdzLCBkb24ndCBzdG9yZSBwcmlvcml0eU5vZGVfIGlmIGl0J3MgZW1wdHkuXHJcbnZhciBFTVBUWV9OT0RFO1xyXG4vKipcclxuICogQ2hpbGRyZW5Ob2RlIGlzIGEgY2xhc3MgZm9yIHN0b3JpbmcgaW50ZXJuYWwgbm9kZXMgaW4gYSBEYXRhU25hcHNob3RcclxuICogKGkuZS4gbm9kZXMgd2l0aCBjaGlsZHJlbikuICBJdCBpbXBsZW1lbnRzIE5vZGUgYW5kIHN0b3JlcyB0aGVcclxuICogbGlzdCBvZiBjaGlsZHJlbiBpbiB0aGUgY2hpbGRyZW4gcHJvcGVydHksIHNvcnRlZCBieSBjaGlsZCBuYW1lLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGltcGxlbWVudHMge05vZGV9XHJcbiAqL1xyXG52YXIgQ2hpbGRyZW5Ob2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshU29ydGVkTWFwLjxzdHJpbmcsICFOb2RlPn0gY2hpbGRyZW5fIExpc3Qgb2YgY2hpbGRyZW5cclxuICAgICAqIG9mIHRoaXMgbm9kZS4uXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBwcmlvcml0eU5vZGVfIFRoZSBwcmlvcml0eSBvZiB0aGlzIG5vZGUgKGFzIGEgc25hcHNob3Qgbm9kZSkuXHJcbiAgICAgKiBAcGFyYW0geyFJbmRleE1hcH0gaW5kZXhNYXBfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIENoaWxkcmVuTm9kZShjaGlsZHJlbl8sIHByaW9yaXR5Tm9kZV8sIGluZGV4TWFwXykge1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW5fID0gY2hpbGRyZW5fO1xyXG4gICAgICAgIHRoaXMucHJpb3JpdHlOb2RlXyA9IHByaW9yaXR5Tm9kZV87XHJcbiAgICAgICAgdGhpcy5pbmRleE1hcF8gPSBpbmRleE1hcF87XHJcbiAgICAgICAgdGhpcy5sYXp5SGFzaF8gPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE5vdGU6IFRoZSBvbmx5IHJlYXNvbiB3ZSBhbGxvdyBudWxsIHByaW9yaXR5IGlzIGZvciBFTVBUWV9OT0RFLCBzaW5jZSB3ZSBjYW4ndCB1c2VcclxuICAgICAgICAgKiBFTVBUWV9OT0RFIGFzIHRoZSBwcmlvcml0eSBvZiBFTVBUWV9OT0RFLiAgV2UgbWlnaHQgd2FudCB0byBjb25zaWRlciBtYWtpbmcgRU1QVFlfTk9ERSBpdHMgb3duXHJcbiAgICAgICAgICogY2xhc3MgaW5zdGVhZCBvZiBhbiBlbXB0eSBDaGlsZHJlbk5vZGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKHRoaXMucHJpb3JpdHlOb2RlXykge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZVByaW9yaXR5Tm9kZSh0aGlzLnByaW9yaXR5Tm9kZV8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbl8uaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0KCF0aGlzLnByaW9yaXR5Tm9kZV8gfHwgdGhpcy5wcmlvcml0eU5vZGVfLmlzRW1wdHkoKSwgJ0FuIGVtcHR5IG5vZGUgY2Fubm90IGhhdmUgYSBwcmlvcml0eScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDaGlsZHJlbk5vZGUsIFwiRU1QVFlfTk9ERVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoRU1QVFlfTk9ERSB8fFxyXG4gICAgICAgICAgICAgICAgKEVNUFRZX05PREUgPSBuZXcgQ2hpbGRyZW5Ob2RlKG5ldyBTb3J0ZWRNYXAoTkFNRV9DT01QQVJBVE9SKSwgbnVsbCwgSW5kZXhNYXAuRGVmYXVsdCkpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5pc0xlYWZOb2RlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuZ2V0UHJpb3JpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpb3JpdHlOb2RlXyB8fCBFTVBUWV9OT0RFO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS51cGRhdGVQcmlvcml0eSA9IGZ1bmN0aW9uIChuZXdQcmlvcml0eU5vZGUpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbl8uaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIC8vIERvbid0IGFsbG93IHByaW9yaXRpZXMgb24gZW1wdHkgbm9kZXNcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENoaWxkcmVuTm9kZSh0aGlzLmNoaWxkcmVuXywgbmV3UHJpb3JpdHlOb2RlLCB0aGlzLmluZGV4TWFwXyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5nZXRJbW1lZGlhdGVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZE5hbWUpIHtcclxuICAgICAgICAvLyBIYWNrIHRvIHRyZWF0IHByaW9yaXR5IGFzIGEgcmVndWxhciBjaGlsZFxyXG4gICAgICAgIGlmIChjaGlsZE5hbWUgPT09ICcucHJpb3JpdHknKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFByaW9yaXR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuXy5nZXQoY2hpbGROYW1lKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkID09PSBudWxsID8gRU1QVFlfTk9ERSA6IGNoaWxkO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuZ2V0Q2hpbGQgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHZhciBmcm9udCA9IHBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICBpZiAoZnJvbnQgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEltbWVkaWF0ZUNoaWxkKGZyb250KS5nZXRDaGlsZChwYXRoLnBvcEZyb250KCkpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5oYXNDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZE5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbl8uZ2V0KGNoaWxkTmFtZSkgIT09IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLnVwZGF0ZUltbWVkaWF0ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkTmFtZSwgbmV3Q2hpbGROb2RlKSB7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQobmV3Q2hpbGROb2RlLCAnV2Ugc2hvdWxkIGFsd2F5cyBiZSBwYXNzaW5nIHNuYXBzaG90IG5vZGVzJyk7XHJcbiAgICAgICAgaWYgKGNoaWxkTmFtZSA9PT0gJy5wcmlvcml0eScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlUHJpb3JpdHkobmV3Q2hpbGROb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lZE5vZGUgPSBuZXcgTmFtZWROb2RlKGNoaWxkTmFtZSwgbmV3Q2hpbGROb2RlKTtcclxuICAgICAgICAgICAgdmFyIG5ld0NoaWxkcmVuID0gdm9pZCAwLCBuZXdJbmRleE1hcCA9IHZvaWQgMCwgbmV3UHJpb3JpdHkgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIGlmIChuZXdDaGlsZE5vZGUuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW5fLnJlbW92ZShjaGlsZE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbmV3SW5kZXhNYXAgPSB0aGlzLmluZGV4TWFwXy5yZW1vdmVGcm9tSW5kZXhlcyhuYW1lZE5vZGUsIHRoaXMuY2hpbGRyZW5fKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ld0NoaWxkcmVuID0gdGhpcy5jaGlsZHJlbl8uaW5zZXJ0KGNoaWxkTmFtZSwgbmV3Q2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgIG5ld0luZGV4TWFwID0gdGhpcy5pbmRleE1hcF8uYWRkVG9JbmRleGVzKG5hbWVkTm9kZSwgdGhpcy5jaGlsZHJlbl8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5ld1ByaW9yaXR5ID0gbmV3Q2hpbGRyZW4uaXNFbXB0eSgpID8gRU1QVFlfTk9ERSA6IHRoaXMucHJpb3JpdHlOb2RlXztcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGlsZHJlbk5vZGUobmV3Q2hpbGRyZW4sIG5ld1ByaW9yaXR5LCBuZXdJbmRleE1hcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS51cGRhdGVDaGlsZCA9IGZ1bmN0aW9uIChwYXRoLCBuZXdDaGlsZE5vZGUpIHtcclxuICAgICAgICB2YXIgZnJvbnQgPSBwYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgaWYgKGZyb250ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdDaGlsZE5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydChwYXRoLmdldEZyb250KCkgIT09ICcucHJpb3JpdHknIHx8IHBhdGguZ2V0TGVuZ3RoKCkgPT09IDEsICcucHJpb3JpdHkgbXVzdCBiZSB0aGUgbGFzdCB0b2tlbiBpbiBhIHBhdGgnKTtcclxuICAgICAgICAgICAgdmFyIG5ld0ltbWVkaWF0ZUNoaWxkID0gdGhpcy5nZXRJbW1lZGlhdGVDaGlsZChmcm9udCkudXBkYXRlQ2hpbGQocGF0aC5wb3BGcm9udCgpLCBuZXdDaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVJbW1lZGlhdGVDaGlsZChmcm9udCwgbmV3SW1tZWRpYXRlQ2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbl8uaXNFbXB0eSgpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5udW1DaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbl8uY291bnQoKTtcclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUudmFsID0gZnVuY3Rpb24gKGV4cG9ydEZvcm1hdCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSlcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgICAgIHZhciBudW1LZXlzID0gMCwgbWF4S2V5ID0gMCwgYWxsSW50ZWdlcktleXMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaENoaWxkKFBSSU9SSVRZX0lOREVYLCBmdW5jdGlvbiAoa2V5LCBjaGlsZE5vZGUpIHtcclxuICAgICAgICAgICAgb2JqW2tleV0gPSBjaGlsZE5vZGUudmFsKGV4cG9ydEZvcm1hdCk7XHJcbiAgICAgICAgICAgIG51bUtleXMrKztcclxuICAgICAgICAgICAgaWYgKGFsbEludGVnZXJLZXlzICYmIENoaWxkcmVuTm9kZS5JTlRFR0VSX1JFR0VYUF8udGVzdChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBtYXhLZXkgPSBNYXRoLm1heChtYXhLZXksIE51bWJlcihrZXkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFsbEludGVnZXJLZXlzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoIWV4cG9ydEZvcm1hdCAmJiBhbGxJbnRlZ2VyS2V5cyAmJiBtYXhLZXkgPCAyICogbnVtS2V5cykge1xyXG4gICAgICAgICAgICAvLyBjb252ZXJ0IHRvIGFycmF5LlxyXG4gICAgICAgICAgICB2YXIgYXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iailcclxuICAgICAgICAgICAgICAgIGFycmF5W2tleV0gPSBvYmpba2V5XTtcclxuICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGV4cG9ydEZvcm1hdCAmJiAhdGhpcy5nZXRQcmlvcml0eSgpLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgb2JqWycucHJpb3JpdHknXSA9IHRoaXMuZ2V0UHJpb3JpdHkoKS52YWwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuaGFzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5sYXp5SGFzaF8gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIHRvSGFzaF8xID0gJyc7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5nZXRQcmlvcml0eSgpLmlzRW1wdHkoKSlcclxuICAgICAgICAgICAgICAgIHRvSGFzaF8xICs9XHJcbiAgICAgICAgICAgICAgICAgICAgJ3ByaW9yaXR5OicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlvcml0eUhhc2hUZXh0KHRoaXMuZ2V0UHJpb3JpdHkoKS52YWwoKSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnOic7XHJcbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaENoaWxkKFBSSU9SSVRZX0lOREVYLCBmdW5jdGlvbiAoa2V5LCBjaGlsZE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZEhhc2ggPSBjaGlsZE5vZGUuaGFzaCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkSGFzaCAhPT0gJycpXHJcbiAgICAgICAgICAgICAgICAgICAgdG9IYXNoXzEgKz0gJzonICsga2V5ICsgJzonICsgY2hpbGRIYXNoO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5sYXp5SGFzaF8gPSB0b0hhc2hfMSA9PT0gJycgPyAnJyA6IHNoYTEodG9IYXNoXzEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5sYXp5SGFzaF87XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldFByZWRlY2Vzc29yQ2hpbGROYW1lID0gZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGROb2RlLCBpbmRleCkge1xyXG4gICAgICAgIHZhciBpZHggPSB0aGlzLnJlc29sdmVJbmRleF8oaW5kZXgpO1xyXG4gICAgICAgIGlmIChpZHgpIHtcclxuICAgICAgICAgICAgdmFyIHByZWRlY2Vzc29yID0gaWR4LmdldFByZWRlY2Vzc29yS2V5KG5ldyBOYW1lZE5vZGUoY2hpbGROYW1lLCBjaGlsZE5vZGUpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHByZWRlY2Vzc29yID8gcHJlZGVjZXNzb3IubmFtZSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbl8uZ2V0UHJlZGVjZXNzb3JLZXkoY2hpbGROYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFJbmRleH0gaW5kZXhEZWZpbml0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldEZpcnN0Q2hpbGROYW1lID0gZnVuY3Rpb24gKGluZGV4RGVmaW5pdGlvbikge1xyXG4gICAgICAgIHZhciBpZHggPSB0aGlzLnJlc29sdmVJbmRleF8oaW5kZXhEZWZpbml0aW9uKTtcclxuICAgICAgICBpZiAoaWR4KSB7XHJcbiAgICAgICAgICAgIHZhciBtaW5LZXkgPSBpZHgubWluS2V5KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBtaW5LZXkgJiYgbWluS2V5Lm5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbl8ubWluS2V5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshSW5kZXh9IGluZGV4RGVmaW5pdGlvblxyXG4gICAgICogQHJldHVybiB7P05hbWVkTm9kZX1cclxuICAgICAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5nZXRGaXJzdENoaWxkID0gZnVuY3Rpb24gKGluZGV4RGVmaW5pdGlvbikge1xyXG4gICAgICAgIHZhciBtaW5LZXkgPSB0aGlzLmdldEZpcnN0Q2hpbGROYW1lKGluZGV4RGVmaW5pdGlvbik7XHJcbiAgICAgICAgaWYgKG1pbktleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE5hbWVkTm9kZShtaW5LZXksIHRoaXMuY2hpbGRyZW5fLmdldChtaW5LZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGFuIGluZGV4LCByZXR1cm4gdGhlIGtleSBuYW1lIG9mIHRoZSBsYXJnZXN0IHZhbHVlIHdlIGhhdmUsIGFjY29yZGluZyB0byB0aGF0IGluZGV4XHJcbiAgICAgKiBAcGFyYW0geyFJbmRleH0gaW5kZXhEZWZpbml0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldExhc3RDaGlsZE5hbWUgPSBmdW5jdGlvbiAoaW5kZXhEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IHRoaXMucmVzb2x2ZUluZGV4XyhpbmRleERlZmluaXRpb24pO1xyXG4gICAgICAgIGlmIChpZHgpIHtcclxuICAgICAgICAgICAgdmFyIG1heEtleSA9IGlkeC5tYXhLZXkoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG1heEtleSAmJiBtYXhLZXkubmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXy5tYXhLZXkoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFJbmRleH0gaW5kZXhEZWZpbml0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHs/TmFtZWROb2RlfVxyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldExhc3RDaGlsZCA9IGZ1bmN0aW9uIChpbmRleERlZmluaXRpb24pIHtcclxuICAgICAgICB2YXIgbWF4S2V5ID0gdGhpcy5nZXRMYXN0Q2hpbGROYW1lKGluZGV4RGVmaW5pdGlvbik7XHJcbiAgICAgICAgaWYgKG1heEtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE5hbWVkTm9kZShtYXhLZXksIHRoaXMuY2hpbGRyZW5fLmdldChtYXhLZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gKGluZGV4LCBhY3Rpb24pIHtcclxuICAgICAgICB2YXIgaWR4ID0gdGhpcy5yZXNvbHZlSW5kZXhfKGluZGV4KTtcclxuICAgICAgICBpZiAoaWR4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpZHguaW5vcmRlclRyYXZlcnNhbChmdW5jdGlvbiAod3JhcHBlZE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb24od3JhcHBlZE5vZGUubmFtZSwgd3JhcHBlZE5vZGUubm9kZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5fLmlub3JkZXJUcmF2ZXJzYWwoYWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFJbmRleH0gaW5kZXhEZWZpbml0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHtTb3J0ZWRNYXBJdGVyYXRvcn1cclxuICAgICAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5nZXRJdGVyYXRvciA9IGZ1bmN0aW9uIChpbmRleERlZmluaXRpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRJdGVyYXRvckZyb20oaW5kZXhEZWZpbml0aW9uLm1pblBvc3QoKSwgaW5kZXhEZWZpbml0aW9uKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFOYW1lZE5vZGV9IHN0YXJ0UG9zdFxyXG4gICAgICogQHBhcmFtIHshSW5kZXh9IGluZGV4RGVmaW5pdGlvblxyXG4gICAgICogQHJldHVybiB7IVNvcnRlZE1hcEl0ZXJhdG9yfVxyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldEl0ZXJhdG9yRnJvbSA9IGZ1bmN0aW9uIChzdGFydFBvc3QsIGluZGV4RGVmaW5pdGlvbikge1xyXG4gICAgICAgIHZhciBpZHggPSB0aGlzLnJlc29sdmVJbmRleF8oaW5kZXhEZWZpbml0aW9uKTtcclxuICAgICAgICBpZiAoaWR4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpZHguZ2V0SXRlcmF0b3JGcm9tKHN0YXJ0UG9zdCwgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5OyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuY2hpbGRyZW5fLmdldEl0ZXJhdG9yRnJvbShzdGFydFBvc3QubmFtZSwgTmFtZWROb2RlLldyYXApO1xyXG4gICAgICAgICAgICB2YXIgbmV4dCA9IGl0ZXJhdG9yLnBlZWsoKTtcclxuICAgICAgICAgICAgd2hpbGUgKG5leHQgIT0gbnVsbCAmJiBpbmRleERlZmluaXRpb24uY29tcGFyZShuZXh0LCBzdGFydFBvc3QpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgaXRlcmF0b3IuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgbmV4dCA9IGl0ZXJhdG9yLnBlZWsoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshSW5kZXh9IGluZGV4RGVmaW5pdGlvblxyXG4gICAgICogQHJldHVybiB7IVNvcnRlZE1hcEl0ZXJhdG9yfVxyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldFJldmVyc2VJdGVyYXRvciA9IGZ1bmN0aW9uIChpbmRleERlZmluaXRpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXZlcnNlSXRlcmF0b3JGcm9tKGluZGV4RGVmaW5pdGlvbi5tYXhQb3N0KCksIGluZGV4RGVmaW5pdGlvbik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFOYW1lZE5vZGV9IGVuZFBvc3RcclxuICAgICAqIEBwYXJhbSB7IUluZGV4fSBpbmRleERlZmluaXRpb25cclxuICAgICAqIEByZXR1cm4geyFTb3J0ZWRNYXBJdGVyYXRvcn1cclxuICAgICAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5nZXRSZXZlcnNlSXRlcmF0b3JGcm9tID0gZnVuY3Rpb24gKGVuZFBvc3QsIGluZGV4RGVmaW5pdGlvbikge1xyXG4gICAgICAgIHZhciBpZHggPSB0aGlzLnJlc29sdmVJbmRleF8oaW5kZXhEZWZpbml0aW9uKTtcclxuICAgICAgICBpZiAoaWR4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpZHguZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbShlbmRQb3N0LCBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuY2hpbGRyZW5fLmdldFJldmVyc2VJdGVyYXRvckZyb20oZW5kUG9zdC5uYW1lLCBOYW1lZE5vZGUuV3JhcCk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0ID0gaXRlcmF0b3IucGVlaygpO1xyXG4gICAgICAgICAgICB3aGlsZSAobmV4dCAhPSBudWxsICYmIGluZGV4RGVmaW5pdGlvbi5jb21wYXJlKG5leHQsIGVuZFBvc3QpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaXRlcmF0b3IuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgbmV4dCA9IGl0ZXJhdG9yLnBlZWsoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5jb21wYXJlVG8gPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgaWYgKG90aGVyLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob3RoZXIuaXNMZWFmTm9kZSgpIHx8IG90aGVyLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob3RoZXIgPT09IE1BWF9OT0RFJDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gTXVzdCBiZSBhbm90aGVyIG5vZGUgd2l0aCBjaGlsZHJlbi5cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS53aXRoSW5kZXggPSBmdW5jdGlvbiAoaW5kZXhEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgaWYgKGluZGV4RGVmaW5pdGlvbiA9PT0gS0VZX0lOREVYIHx8XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXhNYXBfLmhhc0luZGV4KGluZGV4RGVmaW5pdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgbmV3SW5kZXhNYXAgPSB0aGlzLmluZGV4TWFwXy5hZGRJbmRleChpbmRleERlZmluaXRpb24sIHRoaXMuY2hpbGRyZW5fKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGlsZHJlbk5vZGUodGhpcy5jaGlsZHJlbl8sIHRoaXMucHJpb3JpdHlOb2RlXywgbmV3SW5kZXhNYXApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuaXNJbmRleGVkID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSBLRVlfSU5ERVggfHwgdGhpcy5pbmRleE1hcF8uaGFzSW5kZXgoaW5kZXgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAob3RoZXIgPT09IHRoaXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG90aGVyLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgb3RoZXJDaGlsZHJlbk5vZGUgPSBvdGhlcjtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmdldFByaW9yaXR5KCkuZXF1YWxzKG90aGVyQ2hpbGRyZW5Ob2RlLmdldFByaW9yaXR5KCkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jaGlsZHJlbl8uY291bnQoKSA9PT0gb3RoZXJDaGlsZHJlbk5vZGUuY2hpbGRyZW5fLmNvdW50KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzSXRlciA9IHRoaXMuZ2V0SXRlcmF0b3IoUFJJT1JJVFlfSU5ERVgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG90aGVySXRlciA9IG90aGVyQ2hpbGRyZW5Ob2RlLmdldEl0ZXJhdG9yKFBSSU9SSVRZX0lOREVYKTtcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzQ3VycmVudCA9IHRoaXNJdGVyLmdldE5leHQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBvdGhlckN1cnJlbnQgPSBvdGhlckl0ZXIuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXNDdXJyZW50ICYmIG90aGVyQ3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzQ3VycmVudC5uYW1lICE9PSBvdGhlckN1cnJlbnQubmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpc0N1cnJlbnQubm9kZS5lcXVhbHMob3RoZXJDdXJyZW50Lm5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc0N1cnJlbnQgPSB0aGlzSXRlci5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3RoZXJDdXJyZW50ID0gb3RoZXJJdGVyLmdldE5leHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQ3VycmVudCA9PT0gbnVsbCAmJiBvdGhlckN1cnJlbnQgPT09IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgU29ydGVkTWFwIG9yZGVyZWQgYnkgaW5kZXgsIG9yIG51bGwgaWYgdGhlIGRlZmF1bHQgKGJ5LWtleSkgb3JkZXJpbmcgY2FuIGJlIHVzZWRcclxuICAgICAqIGluc3RlYWQuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBwYXJhbSB7IUluZGV4fSBpbmRleERlZmluaXRpb25cclxuICAgICAqIEByZXR1cm4gez9Tb3J0ZWRNYXAuPE5hbWVkTm9kZSwgTm9kZT59XHJcbiAgICAgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUucmVzb2x2ZUluZGV4XyA9IGZ1bmN0aW9uIChpbmRleERlZmluaXRpb24pIHtcclxuICAgICAgICBpZiAoaW5kZXhEZWZpbml0aW9uID09PSBLRVlfSU5ERVgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbmRleE1hcF8uZ2V0KGluZGV4RGVmaW5pdGlvbi50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHR5cGUge1JlZ0V4cH1cclxuICAgICAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLklOVEVHRVJfUkVHRVhQXyA9IC9eKDB8WzEtOV1cXGQqKSQvO1xyXG4gICAgcmV0dXJuIENoaWxkcmVuTm9kZTtcclxufSgpKTtcclxuLyoqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZXh0ZW5kcyB7Q2hpbGRyZW5Ob2RlfVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxudmFyIE1heE5vZGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhNYXhOb2RlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTWF4Tm9kZSgpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgbmV3IFNvcnRlZE1hcChOQU1FX0NPTVBBUkFUT1IpLCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSwgSW5kZXhNYXAuRGVmYXVsdCkgfHwgdGhpcztcclxuICAgIH1cclxuICAgIE1heE5vZGUucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNYXhOb2RlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICAvLyBOb3QgdGhhdCB3ZSBldmVyeSBjb21wYXJlIGl0LCBidXQgTUFYX05PREUgaXMgb25seSBldmVyIGVxdWFsIHRvIGl0c2VsZlxyXG4gICAgICAgIHJldHVybiBvdGhlciA9PT0gdGhpcztcclxuICAgIH07XHJcbiAgICBNYXhOb2RlLnByb3RvdHlwZS5nZXRQcmlvcml0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBNYXhOb2RlLnByb3RvdHlwZS5nZXRJbW1lZGlhdGVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZE5hbWUpIHtcclxuICAgICAgICByZXR1cm4gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICB9O1xyXG4gICAgTWF4Tm9kZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1heE5vZGU7XHJcbn0oQ2hpbGRyZW5Ob2RlKSk7XHJcbi8qKlxyXG4gKiBNYXJrZXIgdGhhdCB3aWxsIHNvcnQgaGlnaGVyIHRoYW4gYW55IG90aGVyIHNuYXBzaG90LlxyXG4gKiBAdHlwZSB7IU1BWF9OT0RFfVxyXG4gKiBAY29uc3RcclxuICovXHJcbnZhciBNQVhfTk9ERSQyID0gbmV3IE1heE5vZGUoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTmFtZWROb2RlLCB7XHJcbiAgICBNSU46IHtcclxuICAgICAgICB2YWx1ZTogbmV3IE5hbWVkTm9kZShNSU5fTkFNRSwgQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUpXHJcbiAgICB9LFxyXG4gICAgTUFYOiB7XHJcbiAgICAgICAgdmFsdWU6IG5ldyBOYW1lZE5vZGUoTUFYX05BTUUsIE1BWF9OT0RFJDIpXHJcbiAgICB9XHJcbn0pO1xyXG4vKipcclxuICogUmVmZXJlbmNlIEV4dGVuc2lvbnNcclxuICovXHJcbktleUluZGV4Ll9fRU1QVFlfTk9ERSA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG5MZWFmTm9kZS5fX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yID0gQ2hpbGRyZW5Ob2RlO1xyXG5zZXRNYXhOb2RlKE1BWF9OT0RFJDIpO1xyXG5zZXRNYXhOb2RlJDEoTUFYX05PREUkMik7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgVVNFX0hJTlpFID0gdHJ1ZTtcclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBzbmFwc2hvdCBub2RlIHJlcHJlc2VudGluZyB0aGUgcGFzc2VkIEpTT04gYW5kIHJldHVybnMgaXQuXHJcbiAqIEBwYXJhbSB7Kn0ganNvbiBKU09OIHRvIGNyZWF0ZSBhIG5vZGUgZm9yLlxyXG4gKiBAcGFyYW0gez9zdHJpbmd8P251bWJlcj19IHByaW9yaXR5IE9wdGlvbmFsIHByaW9yaXR5IHRvIHVzZS4gIFRoaXMgd2lsbCBiZSBpZ25vcmVkIGlmIHRoZVxyXG4gKiBwYXNzZWQgSlNPTiBjb250YWlucyBhIC5wcmlvcml0eSBwcm9wZXJ0eS5cclxuICogQHJldHVybiB7IU5vZGV9XHJcbiAqL1xyXG5mdW5jdGlvbiBub2RlRnJvbUpTT04kMShqc29uLCBwcmlvcml0eSkge1xyXG4gICAgaWYgKHByaW9yaXR5ID09PSB2b2lkIDApIHsgcHJpb3JpdHkgPSBudWxsOyB9XHJcbiAgICBpZiAoanNvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YganNvbiA9PT0gJ29iamVjdCcgJiYgJy5wcmlvcml0eScgaW4ganNvbikge1xyXG4gICAgICAgIHByaW9yaXR5ID0ganNvblsnLnByaW9yaXR5J107XHJcbiAgICB9XHJcbiAgICB1dGlsLmFzc2VydChwcmlvcml0eSA9PT0gbnVsbCB8fFxyXG4gICAgICAgIHR5cGVvZiBwcmlvcml0eSA9PT0gJ3N0cmluZycgfHxcclxuICAgICAgICB0eXBlb2YgcHJpb3JpdHkgPT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgKHR5cGVvZiBwcmlvcml0eSA9PT0gJ29iamVjdCcgJiYgJy5zdicgaW4gcHJpb3JpdHkpLCAnSW52YWxpZCBwcmlvcml0eSB0eXBlIGZvdW5kOiAnICsgdHlwZW9mIHByaW9yaXR5KTtcclxuICAgIGlmICh0eXBlb2YganNvbiA9PT0gJ29iamVjdCcgJiYgJy52YWx1ZScgaW4ganNvbiAmJiBqc29uWycudmFsdWUnXSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGpzb24gPSBqc29uWycudmFsdWUnXTtcclxuICAgIH1cclxuICAgIC8vIFZhbGlkIGxlYWYgbm9kZXMgaW5jbHVkZSBub24tb2JqZWN0cyBvciBzZXJ2ZXItdmFsdWUgd3JhcHBlciBvYmplY3RzXHJcbiAgICBpZiAodHlwZW9mIGpzb24gIT09ICdvYmplY3QnIHx8ICcuc3YnIGluIGpzb24pIHtcclxuICAgICAgICB2YXIganNvbkxlYWYgPSBqc29uO1xyXG4gICAgICAgIHJldHVybiBuZXcgTGVhZk5vZGUoanNvbkxlYWYsIG5vZGVGcm9tSlNPTiQxKHByaW9yaXR5KSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIShqc29uIGluc3RhbmNlb2YgQXJyYXkpICYmIFVTRV9ISU5aRSkge1xyXG4gICAgICAgIHZhciBjaGlsZHJlbl8xID0gW107XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuSGF2ZVByaW9yaXR5XzEgPSBmYWxzZTtcclxuICAgICAgICB2YXIgaGluemVKc29uT2JqXzEgPSBqc29uO1xyXG4gICAgICAgIHV0aWwuZm9yRWFjaChoaW56ZUpzb25PYmpfMSwgZnVuY3Rpb24gKGtleSwgY2hpbGQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnIHx8IGtleS5zdWJzdHJpbmcoMCwgMSkgIT09ICcuJykge1xyXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIG1ldGFkYXRhIG5vZGVzXHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gbm9kZUZyb21KU09OJDEoaGluemVKc29uT2JqXzFba2V5XSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNoaWxkTm9kZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbkhhdmVQcmlvcml0eV8xID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5IYXZlUHJpb3JpdHlfMSB8fCAhY2hpbGROb2RlLmdldFByaW9yaXR5KCkuaXNFbXB0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuXzEucHVzaChuZXcgTmFtZWROb2RlKGtleSwgY2hpbGROb2RlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoY2hpbGRyZW5fMS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjaGlsZFNldCA9IGJ1aWxkQ2hpbGRTZXQoY2hpbGRyZW5fMSwgTkFNRV9PTkxZX0NPTVBBUkFUT1IsIGZ1bmN0aW9uIChuYW1lZE5vZGUpIHsgcmV0dXJuIG5hbWVkTm9kZS5uYW1lOyB9LCBOQU1FX0NPTVBBUkFUT1IpO1xyXG4gICAgICAgIGlmIChjaGlsZHJlbkhhdmVQcmlvcml0eV8xKSB7XHJcbiAgICAgICAgICAgIHZhciBzb3J0ZWRDaGlsZFNldCA9IGJ1aWxkQ2hpbGRTZXQoY2hpbGRyZW5fMSwgUFJJT1JJVFlfSU5ERVguZ2V0Q29tcGFyZSgpKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGlsZHJlbk5vZGUoY2hpbGRTZXQsIG5vZGVGcm9tSlNPTiQxKHByaW9yaXR5KSwgbmV3IEluZGV4TWFwKHsgJy5wcmlvcml0eSc6IHNvcnRlZENoaWxkU2V0IH0sIHsgJy5wcmlvcml0eSc6IFBSSU9SSVRZX0lOREVYIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hpbGRyZW5Ob2RlKGNoaWxkU2V0LCBub2RlRnJvbUpTT04kMShwcmlvcml0eSksIEluZGV4TWFwLkRlZmF1bHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBub2RlXzEgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcclxuICAgICAgICB2YXIganNvbk9ial8xID0ganNvbjtcclxuICAgICAgICB1dGlsLmZvckVhY2goanNvbk9ial8xLCBmdW5jdGlvbiAoa2V5LCBjaGlsZERhdGEpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuY29udGFpbnMoanNvbk9ial8xLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5LnN1YnN0cmluZygwLCAxKSAhPT0gJy4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIG1ldGFkYXRhIG5vZGVzLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBub2RlRnJvbUpTT04kMShjaGlsZERhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZE5vZGUuaXNMZWFmTm9kZSgpIHx8ICFjaGlsZE5vZGUuaXNFbXB0eSgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlXzEgPSBub2RlXzEudXBkYXRlSW1tZWRpYXRlQ2hpbGQoa2V5LCBjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5vZGVfMS51cGRhdGVQcmlvcml0eShub2RlRnJvbUpTT04kMShwcmlvcml0eSkpO1xyXG4gICAgfVxyXG59XHJcbnNldE5vZGVGcm9tSlNPTihub2RlRnJvbUpTT04kMSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBleHRlbmRzIHtJbmRleH1cclxuICogQHByaXZhdGVcclxuICovXHJcbnZhciBWYWx1ZUluZGV4ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVmFsdWVJbmRleCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFZhbHVlSW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBWYWx1ZUluZGV4LnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICB2YXIgaW5kZXhDbXAgPSBhLm5vZGUuY29tcGFyZVRvKGIubm9kZSk7XHJcbiAgICAgICAgaWYgKGluZGV4Q21wID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuYW1lQ29tcGFyZShhLm5hbWUsIGIubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhDbXA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVJbmRleC5wcm90b3R5cGUuaXNEZWZpbmVkT24gPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVJbmRleC5wcm90b3R5cGUuaW5kZXhlZFZhbHVlQ2hhbmdlZCA9IGZ1bmN0aW9uIChvbGROb2RlLCBuZXdOb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuICFvbGROb2RlLmVxdWFscyhuZXdOb2RlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFZhbHVlSW5kZXgucHJvdG90eXBlLm1pblBvc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIE5hbWVkTm9kZS5NSU47XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBWYWx1ZUluZGV4LnByb3RvdHlwZS5tYXhQb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBOYW1lZE5vZGUuTUFYO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHsqfSBpbmRleFZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICogQHJldHVybiB7IU5hbWVkTm9kZX1cclxuICAgICAqL1xyXG4gICAgVmFsdWVJbmRleC5wcm90b3R5cGUubWFrZVBvc3QgPSBmdW5jdGlvbiAoaW5kZXhWYWx1ZSwgbmFtZSkge1xyXG4gICAgICAgIHZhciB2YWx1ZU5vZGUgPSBub2RlRnJvbUpTT04kMShpbmRleFZhbHVlKTtcclxuICAgICAgICByZXR1cm4gbmV3IE5hbWVkTm9kZShuYW1lLCB2YWx1ZU5vZGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IXN0cmluZ30gU3RyaW5nIHJlcHJlc2VudGF0aW9uIGZvciBpbmNsdXNpb24gaW4gYSBxdWVyeSBzcGVjXHJcbiAgICAgKi9cclxuICAgIFZhbHVlSW5kZXgucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAnLnZhbHVlJztcclxuICAgIH07XHJcbiAgICByZXR1cm4gVmFsdWVJbmRleDtcclxufShJbmRleCkpO1xyXG52YXIgVkFMVUVfSU5ERVggPSBuZXcgVmFsdWVJbmRleCgpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBwYXJhbSB7IVBhdGh9IGluZGV4UGF0aFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMge0luZGV4fVxyXG4gKi9cclxudmFyIFBhdGhJbmRleCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFBhdGhJbmRleCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFBhdGhJbmRleChpbmRleFBhdGhfKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5pbmRleFBhdGhfID0gaW5kZXhQYXRoXztcclxuICAgICAgICB1dGlsLmFzc2VydCghaW5kZXhQYXRoXy5pc0VtcHR5KCkgJiYgaW5kZXhQYXRoXy5nZXRGcm9udCgpICE9PSAnLnByaW9yaXR5JywgXCJDYW4ndCBjcmVhdGUgUGF0aEluZGV4IHdpdGggZW1wdHkgcGF0aCBvciAucHJpb3JpdHkga2V5XCIpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gc25hcFxyXG4gICAgICogQHJldHVybiB7IU5vZGV9XHJcbiAgICAgKiBAcHJvdGVjdGVkXHJcbiAgICAgKi9cclxuICAgIFBhdGhJbmRleC5wcm90b3R5cGUuZXh0cmFjdENoaWxkID0gZnVuY3Rpb24gKHNuYXApIHtcclxuICAgICAgICByZXR1cm4gc25hcC5nZXRDaGlsZCh0aGlzLmluZGV4UGF0aF8pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGF0aEluZGV4LnByb3RvdHlwZS5pc0RlZmluZWRPbiA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuICFub2RlLmdldENoaWxkKHRoaXMuaW5kZXhQYXRoXykuaXNFbXB0eSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGF0aEluZGV4LnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICB2YXIgYUNoaWxkID0gdGhpcy5leHRyYWN0Q2hpbGQoYS5ub2RlKTtcclxuICAgICAgICB2YXIgYkNoaWxkID0gdGhpcy5leHRyYWN0Q2hpbGQoYi5ub2RlKTtcclxuICAgICAgICB2YXIgaW5kZXhDbXAgPSBhQ2hpbGQuY29tcGFyZVRvKGJDaGlsZCk7XHJcbiAgICAgICAgaWYgKGluZGV4Q21wID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuYW1lQ29tcGFyZShhLm5hbWUsIGIubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhDbXA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGF0aEluZGV4LnByb3RvdHlwZS5tYWtlUG9zdCA9IGZ1bmN0aW9uIChpbmRleFZhbHVlLCBuYW1lKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlTm9kZSA9IG5vZGVGcm9tSlNPTiQxKGluZGV4VmFsdWUpO1xyXG4gICAgICAgIHZhciBub2RlID0gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUudXBkYXRlQ2hpbGQodGhpcy5pbmRleFBhdGhfLCB2YWx1ZU5vZGUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKG5hbWUsIG5vZGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGF0aEluZGV4LnByb3RvdHlwZS5tYXhQb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBub2RlID0gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUudXBkYXRlQ2hpbGQodGhpcy5pbmRleFBhdGhfLCBNQVhfTk9ERSQyKTtcclxuICAgICAgICByZXR1cm4gbmV3IE5hbWVkTm9kZShNQVhfTkFNRSwgbm9kZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQYXRoSW5kZXgucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4UGF0aF8uc2xpY2UoKS5qb2luKCcvJyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBhdGhJbmRleDtcclxufShJbmRleCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIGZpcmViYXNlIGRhdGEgc25hcHNob3QuICBJdCB3cmFwcyBhIFNuYXBzaG90Tm9kZSBhbmRcclxuICogc3VyZmFjZXMgdGhlIHB1YmxpYyBtZXRob2RzICh2YWwsIGZvckVhY2gsIGV0Yy4pIHdlIHdhbnQgdG8gZXhwb3NlLlxyXG4gKi9cclxudmFyIERhdGFTbmFwc2hvdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gbm9kZV8gQSBTbmFwc2hvdE5vZGUgdG8gd3JhcC5cclxuICAgICAqIEBwYXJhbSB7IVJlZmVyZW5jZX0gcmVmXyBUaGUgcmVmIG9mIHRoZSBsb2NhdGlvbiB0aGlzIHNuYXBzaG90IGNhbWUgZnJvbS5cclxuICAgICAqIEBwYXJhbSB7IUluZGV4fSBpbmRleF8gVGhlIGl0ZXJhdGlvbiBvcmRlciBmb3IgdGhpcyBzbmFwc2hvdFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBEYXRhU25hcHNob3Qobm9kZV8sIHJlZl8sIGluZGV4Xykge1xyXG4gICAgICAgIHRoaXMubm9kZV8gPSBub2RlXztcclxuICAgICAgICB0aGlzLnJlZl8gPSByZWZfO1xyXG4gICAgICAgIHRoaXMuaW5kZXhfID0gaW5kZXhfO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHNuYXBzaG90IGNvbnRlbnRzIGFzIEpTT04uICBSZXR1cm5zIG51bGwgaWYgdGhlIHNuYXBzaG90IGlzXHJcbiAgICAgKiBlbXB0eS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHsqfSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBEYXRhU25hcHNob3QgY29udGVudHMsIG9yIG51bGwgaWYgZW1wdHkuXHJcbiAgICAgKi9cclxuICAgIERhdGFTbmFwc2hvdC5wcm90b3R5cGUudmFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnRGF0YVNuYXBzaG90LnZhbCcsIDAsIDAsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVfLnZhbCgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgc25hcHNob3QgY29udGVudHMgYXMgSlNPTiwgaW5jbHVkaW5nIHByaW9yaXRpZXMgb2Ygbm9kZS4gIFN1aXRhYmxlIGZvciBleHBvcnRpbmdcclxuICAgICAqIHRoZSBlbnRpcmUgbm9kZSBjb250ZW50cy5cclxuICAgICAqIEByZXR1cm4geyp9IEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIERhdGFTbmFwc2hvdCBjb250ZW50cywgb3IgbnVsbCBpZiBlbXB0eS5cclxuICAgICAqL1xyXG4gICAgRGF0YVNuYXBzaG90LnByb3RvdHlwZS5leHBvcnRWYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdEYXRhU25hcHNob3QuZXhwb3J0VmFsJywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZV8udmFsKHRydWUpO1xyXG4gICAgfTtcclxuICAgIC8vIERvIG5vdCBjcmVhdGUgcHVibGljIGRvY3VtZW50YXRpb24uIFRoaXMgaXMgaW50ZW5kZWQgdG8gbWFrZSBKU09OIHNlcmlhbGl6YXRpb24gd29yayBidXQgaXMgb3RoZXJ3aXNlIHVubmVjZXNzYXJ5XHJcbiAgICAvLyBmb3IgZW5kLXVzZXJzXHJcbiAgICBEYXRhU25hcHNob3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBPcHRpb25hbCBzcGFjZXIgYXJndW1lbnQgaXMgdW5uZWNlc3NhcnkgYmVjYXVzZSB3ZSdyZSBkZXBlbmRpbmcgb24gcmVjdXJzaW9uIHJhdGhlciB0aGFuIHN0cmluZ2lmeWluZyB0aGUgY29udGVudFxyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnRGF0YVNuYXBzaG90LnRvSlNPTicsIDAsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4cG9ydFZhbCgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBzbmFwc2hvdCBjb250YWlucyBhIG5vbi1udWxsIHZhbHVlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHNuYXBzaG90IGNvbnRhaW5zIGEgbm9uLW51bGwgdmFsdWUsIG9yIGlzIGVtcHR5LlxyXG4gICAgICovXHJcbiAgICBEYXRhU25hcHNob3QucHJvdG90eXBlLmV4aXN0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ0RhdGFTbmFwc2hvdC5leGlzdHMnLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gIXRoaXMubm9kZV8uaXNFbXB0eSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIERhdGFTbmFwc2hvdCBvZiB0aGUgc3BlY2lmaWVkIGNoaWxkIG5vZGUncyBjb250ZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGNoaWxkUGF0aFN0cmluZyBQYXRoIHRvIGEgY2hpbGQuXHJcbiAgICAgKiBAcmV0dXJuIHshRGF0YVNuYXBzaG90fSBEYXRhU25hcHNob3QgZm9yIGNoaWxkIG5vZGUuXHJcbiAgICAgKi9cclxuICAgIERhdGFTbmFwc2hvdC5wcm90b3R5cGUuY2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRQYXRoU3RyaW5nKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdEYXRhU25hcHNob3QuY2hpbGQnLCAwLCAxLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICAvLyBFbnN1cmUgdGhlIGNoaWxkUGF0aCBpcyBhIHN0cmluZyAoY2FuIGJlIGEgbnVtYmVyKVxyXG4gICAgICAgIGNoaWxkUGF0aFN0cmluZyA9IFN0cmluZyhjaGlsZFBhdGhTdHJpbmcpO1xyXG4gICAgICAgIHZhbGlkYXRlUGF0aFN0cmluZygnRGF0YVNuYXBzaG90LmNoaWxkJywgMSwgY2hpbGRQYXRoU3RyaW5nLCBmYWxzZSk7XHJcbiAgICAgICAgdmFyIGNoaWxkUGF0aCA9IG5ldyBQYXRoKGNoaWxkUGF0aFN0cmluZyk7XHJcbiAgICAgICAgdmFyIGNoaWxkUmVmID0gdGhpcy5yZWZfLmNoaWxkKGNoaWxkUGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhU25hcHNob3QodGhpcy5ub2RlXy5nZXRDaGlsZChjaGlsZFBhdGgpLCBjaGlsZFJlZiwgUFJJT1JJVFlfSU5ERVgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBzbmFwc2hvdCBjb250YWlucyBhIGNoaWxkIGF0IHRoZSBzcGVjaWZpZWQgcGF0aC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGNoaWxkUGF0aFN0cmluZyBQYXRoIHRvIGEgY2hpbGQuXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjaGlsZCBleGlzdHMuXHJcbiAgICAgKi9cclxuICAgIERhdGFTbmFwc2hvdC5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRQYXRoU3RyaW5nKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdEYXRhU25hcHNob3QuaGFzQ2hpbGQnLCAxLCAxLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVBhdGhTdHJpbmcoJ0RhdGFTbmFwc2hvdC5oYXNDaGlsZCcsIDEsIGNoaWxkUGF0aFN0cmluZywgZmFsc2UpO1xyXG4gICAgICAgIHZhciBjaGlsZFBhdGggPSBuZXcgUGF0aChjaGlsZFBhdGhTdHJpbmcpO1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5ub2RlXy5nZXRDaGlsZChjaGlsZFBhdGgpLmlzRW1wdHkoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHByaW9yaXR5IG9mIHRoZSBvYmplY3QsIG9yIG51bGwgaWYgbm8gcHJpb3JpdHkgd2FzIHNldC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVtYmVyfG51bGx9IFRoZSBwcmlvcml0eS5cclxuICAgICAqL1xyXG4gICAgRGF0YVNuYXBzaG90LnByb3RvdHlwZS5nZXRQcmlvcml0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ0RhdGFTbmFwc2hvdC5nZXRQcmlvcml0eScsIDAsIDAsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIC8vIHR5cGVjYXN0IGhlcmUgYmVjYXVzZSB3ZSBuZXZlciByZXR1cm4gZGVmZXJyZWQgdmFsdWVzIG9yIGludGVybmFsIHByaW9yaXRpZXMgKE1BWF9QUklPUklUWSlcclxuICAgICAgICByZXR1cm4gdGhpcy5ub2RlXy5nZXRQcmlvcml0eSgpLnZhbCgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZCBub2RlcyBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZm9yIGVhY2ggb25lLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIURhdGFTbmFwc2hvdCl9IGFjdGlvbiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWRcclxuICAgICAqIGZvciBlYWNoIGNoaWxkLlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBmb3JFYWNoIHdhcyBjYW5jZWxlZCBieSBhY3Rpb24gcmV0dXJuaW5nIHRydWUgZm9yXHJcbiAgICAgKiBvbmUgb2YgdGhlIGNoaWxkIG5vZGVzLlxyXG4gICAgICovXHJcbiAgICBEYXRhU25hcHNob3QucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ0RhdGFTbmFwc2hvdC5mb3JFYWNoJywgMSwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUNhbGxiYWNrKCdEYXRhU25hcHNob3QuZm9yRWFjaCcsIDEsIGFjdGlvbiwgZmFsc2UpO1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGVfLmlzTGVhZk5vZGUoKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHZhciBjaGlsZHJlbk5vZGUgPSB0aGlzLm5vZGVfO1xyXG4gICAgICAgIC8vIFNhbml0aXplIHRoZSByZXR1cm4gdmFsdWUgdG8gYSBib29sZWFuLiBDaGlsZHJlbk5vZGUuZm9yRWFjaENoaWxkIGhhcyBhIHdlaXJkIHJldHVybiB0eXBlLi4uXHJcbiAgICAgICAgcmV0dXJuICEhY2hpbGRyZW5Ob2RlLmZvckVhY2hDaGlsZCh0aGlzLmluZGV4XywgZnVuY3Rpb24gKGtleSwgbm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uKG5ldyBEYXRhU25hcHNob3Qobm9kZSwgX3RoaXMucmVmXy5jaGlsZChrZXkpLCBQUklPUklUWV9JTkRFWCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoaXMgRGF0YVNuYXBzaG90IGhhcyBjaGlsZHJlbi5cclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERhdGFTbmFwc2hvdCBjb250YWlucyAxIG9yIG1vcmUgY2hpbGQgbm9kZXMuXHJcbiAgICAgKi9cclxuICAgIERhdGFTbmFwc2hvdC5wcm90b3R5cGUuaGFzQ2hpbGRyZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdEYXRhU25hcHNob3QuaGFzQ2hpbGRyZW4nLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICBpZiAodGhpcy5ub2RlXy5pc0xlYWZOb2RlKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5ub2RlXy5pc0VtcHR5KCk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERhdGFTbmFwc2hvdC5wcm90b3R5cGUsIFwia2V5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmXy5nZXRLZXkoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGZvciB0aGlzIERhdGFTbmFwc2hvdC5cclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbiB0aGF0IHRoaXMgRGF0YVNuYXBzaG90IGNvbnRhaW5zLlxyXG4gICAgICovXHJcbiAgICBEYXRhU25hcHNob3QucHJvdG90eXBlLm51bUNoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnRGF0YVNuYXBzaG90Lm51bUNoaWxkcmVuJywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZV8ubnVtQ2hpbGRyZW4oKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge1JlZmVyZW5jZX0gVGhlIEZpcmViYXNlIHJlZmVyZW5jZSBmb3IgdGhlIGxvY2F0aW9uIHRoaXMgc25hcHNob3QncyBkYXRhIGNhbWUgZnJvbS5cclxuICAgICAqL1xyXG4gICAgRGF0YVNuYXBzaG90LnByb3RvdHlwZS5nZXRSZWYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdEYXRhU25hcHNob3QucmVmJywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmXztcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0YVNuYXBzaG90LnByb3RvdHlwZSwgXCJyZWZcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWYoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBEYXRhU25hcHNob3Q7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRW5jYXBzdWxhdGVzIHRoZSBkYXRhIG5lZWRlZCB0byByYWlzZSBhbiBldmVudFxyXG4gKiBAaW1wbGVtZW50cyB7RXZlbnR9XHJcbiAqL1xyXG52YXIgRGF0YUV2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGV2ZW50VHlwZSBPbmUgb2Y6IHZhbHVlLCBjaGlsZF9hZGRlZCwgY2hpbGRfY2hhbmdlZCwgY2hpbGRfbW92ZWQsIGNoaWxkX3JlbW92ZWRcclxuICAgICAqIEBwYXJhbSB7IUV2ZW50UmVnaXN0cmF0aW9ufSBldmVudFJlZ2lzdHJhdGlvbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCB0byB3aXRoIHRoZSBldmVudCBkYXRhLiBVc2VyIHByb3ZpZGVkXHJcbiAgICAgKiBAcGFyYW0geyFEYXRhU25hcHNob3R9IHNuYXBzaG90IFRoZSBkYXRhIGJhY2tpbmcgdGhlIGV2ZW50XHJcbiAgICAgKiBAcGFyYW0gez9zdHJpbmc9fSBwcmV2TmFtZSBPcHRpb25hbCwgdGhlIG5hbWUgb2YgdGhlIHByZXZpb3VzIGNoaWxkIGZvciBjaGlsZF8qIGV2ZW50cy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRGF0YUV2ZW50KGV2ZW50VHlwZSwgZXZlbnRSZWdpc3RyYXRpb24sIHNuYXBzaG90LCBwcmV2TmFtZSkge1xyXG4gICAgICAgIHRoaXMuZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xyXG4gICAgICAgIHRoaXMuZXZlbnRSZWdpc3RyYXRpb24gPSBldmVudFJlZ2lzdHJhdGlvbjtcclxuICAgICAgICB0aGlzLnNuYXBzaG90ID0gc25hcHNob3Q7XHJcbiAgICAgICAgdGhpcy5wcmV2TmFtZSA9IHByZXZOYW1lO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBEYXRhRXZlbnQucHJvdG90eXBlLmdldFBhdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlZiA9IHRoaXMuc25hcHNob3QuZ2V0UmVmKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRUeXBlID09PSAndmFsdWUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWYucGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWYuZ2V0UGFyZW50KCkucGF0aDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBEYXRhRXZlbnQucHJvdG90eXBlLmdldEV2ZW50VHlwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ldmVudFR5cGU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBEYXRhRXZlbnQucHJvdG90eXBlLmdldEV2ZW50UnVubmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uLmdldEV2ZW50UnVubmVyKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgRGF0YUV2ZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0UGF0aCgpLnRvU3RyaW5nKCkgK1xyXG4gICAgICAgICAgICAnOicgK1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50VHlwZSArXHJcbiAgICAgICAgICAgICc6JyArXHJcbiAgICAgICAgICAgIHV0aWwuc3RyaW5naWZ5KHRoaXMuc25hcHNob3QuZXhwb3J0VmFsKCkpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGF0YUV2ZW50O1xyXG59KCkpO1xyXG52YXIgQ2FuY2VsRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7RXZlbnRSZWdpc3RyYXRpb259IGV2ZW50UmVnaXN0cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBDYW5jZWxFdmVudChldmVudFJlZ2lzdHJhdGlvbiwgZXJyb3IsIHBhdGgpIHtcclxuICAgICAgICB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uID0gZXZlbnRSZWdpc3RyYXRpb247XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIENhbmNlbEV2ZW50LnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhdGg7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBDYW5jZWxFdmVudC5wcm90b3R5cGUuZ2V0RXZlbnRUeXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAnY2FuY2VsJztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIENhbmNlbEV2ZW50LnByb3RvdHlwZS5nZXRFdmVudFJ1bm5lciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ldmVudFJlZ2lzdHJhdGlvbi5nZXRFdmVudFJ1bm5lcih0aGlzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIENhbmNlbEV2ZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLnRvU3RyaW5nKCkgKyAnOmNhbmNlbCc7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENhbmNlbEV2ZW50O1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgcmVnaXN0cmF0aW9uIGZvciAndmFsdWUnIGV2ZW50cy5cclxuICovXHJcbnZhciBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbighRGF0YVNuYXBzaG90KX0gY2FsbGJhY2tfXHJcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbihFcnJvcil9IGNhbmNlbENhbGxiYWNrX1xyXG4gICAgICogQHBhcmFtIHs/T2JqZWN0fSBjb250ZXh0X1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uKGNhbGxiYWNrXywgY2FuY2VsQ2FsbGJhY2tfLCBjb250ZXh0Xykge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfID0gY2FsbGJhY2tfO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsQ2FsbGJhY2tfID0gY2FuY2VsQ2FsbGJhY2tfO1xyXG4gICAgICAgIHRoaXMuY29udGV4dF8gPSBjb250ZXh0XztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUucmVzcG9uZHNUbyA9IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZXZlbnRUeXBlID09PSAndmFsdWUnO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUuY3JlYXRlRXZlbnQgPSBmdW5jdGlvbiAoY2hhbmdlLCBxdWVyeSkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IHF1ZXJ5LmdldFF1ZXJ5UGFyYW1zKCkuZ2V0SW5kZXgoKTtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGFFdmVudCgndmFsdWUnLCB0aGlzLCBuZXcgRGF0YVNuYXBzaG90KGNoYW5nZS5zbmFwc2hvdE5vZGUsIHF1ZXJ5LmdldFJlZigpLCBpbmRleCkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUuZ2V0RXZlbnRSdW5uZXIgPSBmdW5jdGlvbiAoZXZlbnREYXRhKSB7XHJcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dF87XHJcbiAgICAgICAgaWYgKGV2ZW50RGF0YS5nZXRFdmVudFR5cGUoKSA9PT0gJ2NhbmNlbCcpIHtcclxuICAgICAgICAgICAgdXRpbC5hc3NlcnQodGhpcy5jYW5jZWxDYWxsYmFja18sICdSYWlzaW5nIGEgY2FuY2VsIGV2ZW50IG9uIGEgbGlzdGVuZXIgd2l0aCBubyBjYW5jZWwgY2FsbGJhY2snKTtcclxuICAgICAgICAgICAgdmFyIGNhbmNlbENCXzEgPSB0aGlzLmNhbmNlbENhbGxiYWNrXztcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGtub3cgdGhhdCBlcnJvciBleGlzdHMsIHdlIGNoZWNrZWQgYWJvdmUgdGhhdCB0aGlzIGlzIGEgY2FuY2VsIGV2ZW50XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxDQl8xLmNhbGwoY3R4LCBldmVudERhdGEuZXJyb3IpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNiXzEgPSB0aGlzLmNhbGxiYWNrXztcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNiXzEuY2FsbChjdHgsIGV2ZW50RGF0YS5zbmFwc2hvdCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUuY3JlYXRlQ2FuY2VsRXZlbnQgPSBmdW5jdGlvbiAoZXJyb3IsIHBhdGgpIHtcclxuICAgICAgICBpZiAodGhpcy5jYW5jZWxDYWxsYmFja18pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDYW5jZWxFdmVudCh0aGlzLCBlcnJvciwgcGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFvdGhlci5jYWxsYmFja18gfHwgIXRoaXMuY2FsbGJhY2tfKSB7XHJcbiAgICAgICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIHNwZWNpZmllZCwgd2UgY29uc2lkZXIgaXQgdG8gbWF0Y2ggYW55IGNhbGxiYWNrLlxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAob3RoZXIuY2FsbGJhY2tfID09PSB0aGlzLmNhbGxiYWNrXyAmJiBvdGhlci5jb250ZXh0XyA9PT0gdGhpcy5jb250ZXh0Xyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUuaGFzQW55Q2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbGJhY2tfICE9PSBudWxsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uO1xyXG59KCkpO1xyXG4vKipcclxuICogUmVwcmVzZW50cyB0aGUgcmVnaXN0cmF0aW9uIG9mIDEgb3IgbW9yZSBjaGlsZF94eHggZXZlbnRzLlxyXG4gKlxyXG4gKiBDdXJyZW50bHksIGl0IGlzIGFsd2F5cyBleGFjdGx5IDEgY2hpbGRfeHh4IGV2ZW50LCBidXQgdGhlIGlkZWEgaXMgd2UgbWlnaHQgbGV0IHlvdVxyXG4gKiByZWdpc3RlciBhIGdyb3VwIG9mIGNhbGxiYWNrcyB0b2dldGhlciBpbiB0aGUgZnV0dXJlLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGltcGxlbWVudHMge0V2ZW50UmVnaXN0cmF0aW9ufVxyXG4gKi9cclxudmFyIENoaWxkRXZlbnRSZWdpc3RyYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7P09iamVjdC48c3RyaW5nLCBmdW5jdGlvbighRGF0YVNuYXBzaG90LCA/c3RyaW5nPSk+fSBjYWxsYmFja3NfXHJcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbihFcnJvcil9IGNhbmNlbENhbGxiYWNrX1xyXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb250ZXh0X1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uKGNhbGxiYWNrc18sIGNhbmNlbENhbGxiYWNrXywgY29udGV4dF8pIHtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrc18gPSBjYWxsYmFja3NfO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsQ2FsbGJhY2tfID0gY2FuY2VsQ2FsbGJhY2tfO1xyXG4gICAgICAgIHRoaXMuY29udGV4dF8gPSBjb250ZXh0XztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUucmVzcG9uZHNUbyA9IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcclxuICAgICAgICB2YXIgZXZlbnRUb0NoZWNrID0gZXZlbnRUeXBlID09PSAnY2hpbGRyZW5fYWRkZWQnID8gJ2NoaWxkX2FkZGVkJyA6IGV2ZW50VHlwZTtcclxuICAgICAgICBldmVudFRvQ2hlY2sgPVxyXG4gICAgICAgICAgICBldmVudFRvQ2hlY2sgPT09ICdjaGlsZHJlbl9yZW1vdmVkJyA/ICdjaGlsZF9yZW1vdmVkJyA6IGV2ZW50VG9DaGVjaztcclxuICAgICAgICByZXR1cm4gdXRpbC5jb250YWlucyh0aGlzLmNhbGxiYWNrc18sIGV2ZW50VG9DaGVjayk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uLnByb3RvdHlwZS5jcmVhdGVDYW5jZWxFdmVudCA9IGZ1bmN0aW9uIChlcnJvciwgcGF0aCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbmNlbENhbGxiYWNrXykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENhbmNlbEV2ZW50KHRoaXMsIGVycm9yLCBwYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIENoaWxkRXZlbnRSZWdpc3RyYXRpb24ucHJvdG90eXBlLmNyZWF0ZUV2ZW50ID0gZnVuY3Rpb24gKGNoYW5nZSwgcXVlcnkpIHtcclxuICAgICAgICB1dGlsLmFzc2VydChjaGFuZ2UuY2hpbGROYW1lICE9IG51bGwsICdDaGlsZCBldmVudHMgc2hvdWxkIGhhdmUgYSBjaGlsZE5hbWUuJyk7XHJcbiAgICAgICAgdmFyIHJlZiA9IHF1ZXJ5LmdldFJlZigpLmNoaWxkKC8qKiBAdHlwZSB7IXN0cmluZ30gKi8gKGNoYW5nZS5jaGlsZE5hbWUpKTtcclxuICAgICAgICB2YXIgaW5kZXggPSBxdWVyeS5nZXRRdWVyeVBhcmFtcygpLmdldEluZGV4KCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhRXZlbnQoY2hhbmdlLnR5cGUsIHRoaXMsIG5ldyBEYXRhU25hcHNob3QoY2hhbmdlLnNuYXBzaG90Tm9kZSwgcmVmLCBpbmRleCksIGNoYW5nZS5wcmV2TmFtZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uLnByb3RvdHlwZS5nZXRFdmVudFJ1bm5lciA9IGZ1bmN0aW9uIChldmVudERhdGEpIHtcclxuICAgICAgICB2YXIgY3R4ID0gdGhpcy5jb250ZXh0XztcclxuICAgICAgICBpZiAoZXZlbnREYXRhLmdldEV2ZW50VHlwZSgpID09PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydCh0aGlzLmNhbmNlbENhbGxiYWNrXywgJ1JhaXNpbmcgYSBjYW5jZWwgZXZlbnQgb24gYSBsaXN0ZW5lciB3aXRoIG5vIGNhbmNlbCBjYWxsYmFjaycpO1xyXG4gICAgICAgICAgICB2YXIgY2FuY2VsQ0JfMiA9IHRoaXMuY2FuY2VsQ2FsbGJhY2tfO1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2Uga25vdyB0aGF0IGVycm9yIGV4aXN0cywgd2UgY2hlY2tlZCBhYm92ZSB0aGF0IHRoaXMgaXMgYSBjYW5jZWwgZXZlbnRcclxuICAgICAgICAgICAgICAgIGNhbmNlbENCXzIuY2FsbChjdHgsIGV2ZW50RGF0YS5lcnJvcik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgY2JfMiA9IHRoaXMuY2FsbGJhY2tzX1tldmVudERhdGEuZXZlbnRUeXBlXTtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNiXzIuY2FsbChjdHgsIGV2ZW50RGF0YS5zbmFwc2hvdCwgZXZlbnREYXRhLnByZXZOYW1lKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY2FsbGJhY2tzXyB8fCAhb3RoZXIuY2FsbGJhY2tzXykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jb250ZXh0XyA9PT0gb3RoZXIuY29udGV4dF8pIHtcclxuICAgICAgICAgICAgICAgIHZhciBvdGhlckNvdW50ID0gdXRpbC5nZXRDb3VudChvdGhlci5jYWxsYmFja3NfKTtcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzQ291bnQgPSB1dGlsLmdldENvdW50KHRoaXMuY2FsbGJhY2tzXyk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3RoZXJDb3VudCA9PT0gdGhpc0NvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgY291bnQgaXMgMSwgZG8gYW4gZXhhY3QgbWF0Y2ggb24gZXZlbnRUeXBlLCBpZiBlaXRoZXIgaXMgZGVmaW5lZCBidXQgbnVsbCwgaXQncyBhIG1hdGNoLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vICBJZiBldmVudCB0eXBlcyBkb24ndCBtYXRjaCwgbm90IGEgbWF0Y2hcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBjb3VudCBpcyBub3QgMSwgZXhhY3QgbWF0Y2ggYWNyb3NzIGFsbFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdGhlckNvdW50ID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdGhlcktleSAvKiogQHR5cGUgeyFzdHJpbmd9ICovID0gdXRpbC5nZXRBbnlLZXkob3RoZXIuY2FsbGJhY2tzXyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzS2V5IC8qKiBAdHlwZSB7IXN0cmluZ30gKi8gPSB1dGlsLmdldEFueUtleSh0aGlzLmNhbGxiYWNrc18pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXNLZXkgPT09IG90aGVyS2V5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIW90aGVyLmNhbGxiYWNrc19bb3RoZXJLZXldIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuY2FsbGJhY2tzX1t0aGlzS2V5XSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyLmNhbGxiYWNrc19bb3RoZXJLZXldID09PSB0aGlzLmNhbGxiYWNrc19bdGhpc0tleV0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4YWN0IG1hdGNoIG9uIGVhY2gga2V5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5ldmVyeSh0aGlzLmNhbGxiYWNrc18sIGZ1bmN0aW9uIChldmVudFR5cGUsIGNiKSB7IHJldHVybiBvdGhlci5jYWxsYmFja3NfW2V2ZW50VHlwZV0gPT09IGNiOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUuaGFzQW55Q2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbGJhY2tzXyAhPT0gbnVsbDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfX3JlZmVyZW5jZUNvbnN0cnVjdG9yO1xyXG4vKipcclxuICogQSBRdWVyeSByZXByZXNlbnRzIGEgZmlsdGVyIHRvIGJlIGFwcGxpZWQgdG8gYSBmaXJlYmFzZSBsb2NhdGlvbi4gIFRoaXMgb2JqZWN0IHB1cmVseSByZXByZXNlbnRzIHRoZVxyXG4gKiBxdWVyeSBleHByZXNzaW9uIChhbmQgZXhwb3NlcyBvdXIgcHVibGljIEFQSSB0byBidWlsZCB0aGUgcXVlcnkpLiAgVGhlIGFjdHVhbCBxdWVyeSBsb2dpYyBpcyBpbiBWaWV3QmFzZS5qcy5cclxuICpcclxuICogU2luY2UgZXZlcnkgRmlyZWJhc2UgcmVmZXJlbmNlIGlzIGEgcXVlcnksIEZpcmViYXNlIGluaGVyaXRzIGZyb20gdGhpcyBvYmplY3QuXHJcbiAqL1xyXG52YXIgUXVlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBRdWVyeShyZXBvLCBwYXRoLCBxdWVyeVBhcmFtc18sIG9yZGVyQnlDYWxsZWRfKSB7XHJcbiAgICAgICAgdGhpcy5yZXBvID0gcmVwbztcclxuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xyXG4gICAgICAgIHRoaXMucXVlcnlQYXJhbXNfID0gcXVlcnlQYXJhbXNfO1xyXG4gICAgICAgIHRoaXMub3JkZXJCeUNhbGxlZF8gPSBvcmRlckJ5Q2FsbGVkXztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeSwgXCJfX3JlZmVyZW5jZUNvbnN0cnVjdG9yXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdXRpbC5hc3NlcnQoX19yZWZlcmVuY2VDb25zdHJ1Y3RvciwgJ1JlZmVyZW5jZS50cyBoYXMgbm90IGJlZW4gbG9hZGVkJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBfX3JlZmVyZW5jZUNvbnN0cnVjdG9yO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgIF9fcmVmZXJlbmNlQ29uc3RydWN0b3IgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlcyBzdGFydC9lbmQgdmFsdWVzIGZvciBxdWVyaWVzLlxyXG4gICAgICogQHBhcmFtIHshUXVlcnlQYXJhbXN9IHBhcmFtc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUXVlcnkudmFsaWRhdGVRdWVyeUVuZHBvaW50c18gPSBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgICAgdmFyIHN0YXJ0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgdmFyIGVuZE5vZGUgPSBudWxsO1xyXG4gICAgICAgIGlmIChwYXJhbXMuaGFzU3RhcnQoKSkge1xyXG4gICAgICAgICAgICBzdGFydE5vZGUgPSBwYXJhbXMuZ2V0SW5kZXhTdGFydFZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXJhbXMuaGFzRW5kKCkpIHtcclxuICAgICAgICAgICAgZW5kTm9kZSA9IHBhcmFtcy5nZXRJbmRleEVuZFZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXJhbXMuZ2V0SW5kZXgoKSA9PT0gS0VZX0lOREVYKSB7XHJcbiAgICAgICAgICAgIHZhciB0b29NYW55QXJnc0Vycm9yID0gJ1F1ZXJ5OiBXaGVuIG9yZGVyaW5nIGJ5IGtleSwgeW91IG1heSBvbmx5IHBhc3Mgb25lIGFyZ3VtZW50IHRvICcgK1xyXG4gICAgICAgICAgICAgICAgJ3N0YXJ0QXQoKSwgZW5kQXQoKSwgb3IgZXF1YWxUbygpLic7XHJcbiAgICAgICAgICAgIHZhciB3cm9uZ0FyZ1R5cGVFcnJvciA9ICdRdWVyeTogV2hlbiBvcmRlcmluZyBieSBrZXksIHRoZSBhcmd1bWVudCBwYXNzZWQgdG8gc3RhcnRBdCgpLCBlbmRBdCgpLCcgK1xyXG4gICAgICAgICAgICAgICAgJ29yIGVxdWFsVG8oKSBtdXN0IGJlIGEgc3RyaW5nLic7XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzU3RhcnQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0TmFtZSA9IHBhcmFtcy5nZXRJbmRleFN0YXJ0TmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0TmFtZSAhPSBNSU5fTkFNRSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0b29NYW55QXJnc0Vycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBzdGFydE5vZGUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHdyb25nQXJnVHlwZUVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyYW1zLmhhc0VuZCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW5kTmFtZSA9IHBhcmFtcy5nZXRJbmRleEVuZE5hbWUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChlbmROYW1lICE9IE1BWF9OQU1FKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRvb01hbnlBcmdzRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGVuZE5vZGUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHdyb25nQXJnVHlwZUVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwYXJhbXMuZ2V0SW5kZXgoKSA9PT0gUFJJT1JJVFlfSU5ERVgpIHtcclxuICAgICAgICAgICAgaWYgKChzdGFydE5vZGUgIT0gbnVsbCAmJiAhaXNWYWxpZFByaW9yaXR5KHN0YXJ0Tm9kZSkpIHx8XHJcbiAgICAgICAgICAgICAgICAoZW5kTm9kZSAhPSBudWxsICYmICFpc1ZhbGlkUHJpb3JpdHkoZW5kTm9kZSkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5OiBXaGVuIG9yZGVyaW5nIGJ5IHByaW9yaXR5LCB0aGUgZmlyc3QgYXJndW1lbnQgcGFzc2VkIHRvIHN0YXJ0QXQoKSwgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2VuZEF0KCksIG9yIGVxdWFsVG8oKSBtdXN0IGJlIGEgdmFsaWQgcHJpb3JpdHkgdmFsdWUgKG51bGwsIGEgbnVtYmVyLCBvciBhIHN0cmluZykuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0KHBhcmFtcy5nZXRJbmRleCgpIGluc3RhbmNlb2YgUGF0aEluZGV4IHx8XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMuZ2V0SW5kZXgoKSA9PT0gVkFMVUVfSU5ERVgsICd1bmtub3duIGluZGV4IHR5cGUuJyk7XHJcbiAgICAgICAgICAgIGlmICgoc3RhcnROb2RlICE9IG51bGwgJiYgdHlwZW9mIHN0YXJ0Tm9kZSA9PT0gJ29iamVjdCcpIHx8XHJcbiAgICAgICAgICAgICAgICAoZW5kTm9kZSAhPSBudWxsICYmIHR5cGVvZiBlbmROb2RlID09PSAnb2JqZWN0JykpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUXVlcnk6IEZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBzdGFydEF0KCksIGVuZEF0KCksIG9yIGVxdWFsVG8oKSBjYW5ub3QgYmUgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2FuIG9iamVjdC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlcyB0aGF0IGxpbWl0KiBoYXMgYmVlbiBjYWxsZWQgd2l0aCB0aGUgY29ycmVjdCBjb21iaW5hdGlvbiBvZiBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeVBhcmFtc30gcGFyYW1zXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBRdWVyeS52YWxpZGF0ZUxpbWl0XyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgICBpZiAocGFyYW1zLmhhc1N0YXJ0KCkgJiZcclxuICAgICAgICAgICAgcGFyYW1zLmhhc0VuZCgpICYmXHJcbiAgICAgICAgICAgIHBhcmFtcy5oYXNMaW1pdCgpICYmXHJcbiAgICAgICAgICAgICFwYXJhbXMuaGFzQW5jaG9yZWRMaW1pdCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlF1ZXJ5OiBDYW4ndCBjb21iaW5lIHN0YXJ0QXQoKSwgZW5kQXQoKSwgYW5kIGxpbWl0KCkuIFVzZSBsaW1pdFRvRmlyc3QoKSBvciBsaW1pdFRvTGFzdCgpIGluc3RlYWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlcyB0aGF0IG5vIG90aGVyIG9yZGVyIGJ5IGNhbGwgaGFzIGJlZW4gbWFkZVxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBmbk5hbWVcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS52YWxpZGF0ZU5vUHJldmlvdXNPcmRlckJ5Q2FsbF8gPSBmdW5jdGlvbiAoZm5OYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3JkZXJCeUNhbGxlZF8gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZuTmFtZSArIFwiOiBZb3UgY2FuJ3QgY29tYmluZSBtdWx0aXBsZSBvcmRlckJ5IGNhbGxzLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnlQYXJhbXN9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5nZXRRdWVyeVBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeVBhcmFtc187XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshUmVmZXJlbmNlfVxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUuZ2V0UmVmID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUXVlcnkucmVmJywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgLy8gVGhpcyBpcyBhIHNsaWdodCBoYWNrLiBXZSBjYW5ub3QgZ29vZy5yZXF1aXJlKCdmYi5hcGkuRmlyZWJhc2UnKSwgc2luY2UgRmlyZWJhc2UgcmVxdWlyZXMgZmIuYXBpLlF1ZXJ5LlxyXG4gICAgICAgIC8vIEhvd2V2ZXIsIHdlIHdpbGwgYWx3YXlzIGV4cG9ydCAnRmlyZWJhc2UnIHRvIHRoZSBnbG9iYWwgbmFtZXNwYWNlLCBzbyBpdCdzIGd1YXJhbnRlZWQgdG8gZXhpc3QgYnkgdGhlIHRpbWUgdGhpc1xyXG4gICAgICAgIC8vIG1ldGhvZCBnZXRzIGNhbGxlZC5cclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5Ll9fcmVmZXJlbmNlQ29uc3RydWN0b3IodGhpcy5yZXBvLCB0aGlzLnBhdGgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBldmVudFR5cGVcclxuICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKERhdGFTbmFwc2hvdCwgc3RyaW5nPSl9IGNhbGxiYWNrXHJcbiAgICAgKiBAcGFyYW0geyhmdW5jdGlvbihFcnJvcil8T2JqZWN0KT19IGNhbmNlbENhbGxiYWNrT3JDb250ZXh0XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHRcclxuICAgICAqIEByZXR1cm4geyFmdW5jdGlvbihEYXRhU25hcHNob3QsIHN0cmluZz0pfVxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBjYWxsYmFjaywgY2FuY2VsQ2FsbGJhY2tPckNvbnRleHQsIGNvbnRleHQpIHtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5Lm9uJywgMiwgNCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVFdmVudFR5cGUoJ1F1ZXJ5Lm9uJywgMSwgZXZlbnRUeXBlLCBmYWxzZSk7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUNhbGxiYWNrKCdRdWVyeS5vbicsIDIsIGNhbGxiYWNrLCBmYWxzZSk7XHJcbiAgICAgICAgdmFyIHJldCA9IFF1ZXJ5LmdldENhbmNlbEFuZENvbnRleHRBcmdzXygnUXVlcnkub24nLCBjYW5jZWxDYWxsYmFja09yQ29udGV4dCwgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKGV2ZW50VHlwZSA9PT0gJ3ZhbHVlJykge1xyXG4gICAgICAgICAgICB0aGlzLm9uVmFsdWVFdmVudChjYWxsYmFjaywgcmV0LmNhbmNlbCwgcmV0LmNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHt9O1xyXG4gICAgICAgICAgICBjYWxsYmFja3NbZXZlbnRUeXBlXSA9IGNhbGxiYWNrO1xyXG4gICAgICAgICAgICB0aGlzLm9uQ2hpbGRFdmVudChjYWxsYmFja3MsIHJldC5jYW5jZWwsIHJldC5jb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshZnVuY3Rpb24oIURhdGFTbmFwc2hvdCl9IGNhbGxiYWNrXHJcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbihFcnJvcil9IGNhbmNlbENhbGxiYWNrXHJcbiAgICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbnRleHRcclxuICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLm9uVmFsdWVFdmVudCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY2FuY2VsQ2FsbGJhY2ssIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gbmV3IFZhbHVlRXZlbnRSZWdpc3RyYXRpb24oY2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrIHx8IG51bGwsIGNvbnRleHQgfHwgbnVsbCk7XHJcbiAgICAgICAgdGhpcy5yZXBvLmFkZEV2ZW50Q2FsbGJhY2tGb3JRdWVyeSh0aGlzLCBjb250YWluZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshT2JqZWN0LjxzdHJpbmcsICFmdW5jdGlvbighRGF0YVNuYXBzaG90LCA/c3RyaW5nKT59IGNhbGxiYWNrc1xyXG4gICAgICogQHBhcmFtIHs/ZnVuY3Rpb24oRXJyb3IpfSBjYW5jZWxDYWxsYmFja1xyXG4gICAgICogQHBhcmFtIHs/T2JqZWN0fSBjb250ZXh0XHJcbiAgICAgKiBAcHJvdGVjdGVkXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5vbkNoaWxkRXZlbnQgPSBmdW5jdGlvbiAoY2FsbGJhY2tzLCBjYW5jZWxDYWxsYmFjaywgY29udGV4dCkge1xyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBuZXcgQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbihjYWxsYmFja3MsIGNhbmNlbENhbGxiYWNrLCBjb250ZXh0KTtcclxuICAgICAgICB0aGlzLnJlcG8uYWRkRXZlbnRDYWxsYmFja0ZvclF1ZXJ5KHRoaXMsIGNvbnRhaW5lcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGV2ZW50VHlwZVxyXG4gICAgICogQHBhcmFtIHsoZnVuY3Rpb24oIURhdGFTbmFwc2hvdCwgP3N0cmluZz0pKT19IGNhbGxiYWNrXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHRcclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChldmVudFR5cGUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdRdWVyeS5vZmYnLCAwLCAzLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZUV2ZW50VHlwZSgnUXVlcnkub2ZmJywgMSwgZXZlbnRUeXBlLCB0cnVlKTtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQ2FsbGJhY2soJ1F1ZXJ5Lm9mZicsIDIsIGNhbGxiYWNrLCB0cnVlKTtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQ29udGV4dE9iamVjdCgnUXVlcnkub2ZmJywgMywgY29udGV4dCwgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IG51bGw7XHJcbiAgICAgICAgaWYgKGV2ZW50VHlwZSA9PT0gJ3ZhbHVlJykge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGNhbGxiYWNrIHx8IG51bGw7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IG5ldyBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uKHZhbHVlQ2FsbGJhY2ssIG51bGwsIGNvbnRleHQgfHwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50VHlwZSkge1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzW2V2ZW50VHlwZV0gPSBjYWxsYmFjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250YWluZXIgPSBuZXcgQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbihjYWxsYmFja3MsIG51bGwsIGNvbnRleHQgfHwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVwby5yZW1vdmVFdmVudENhbGxiYWNrRm9yUXVlcnkodGhpcywgY29udGFpbmVyKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaGVzIGEgbGlzdGVuZXIsIHdhaXRzIGZvciB0aGUgZmlyc3QgZXZlbnQsIGFuZCB0aGVuIHJlbW92ZXMgdGhlIGxpc3RlbmVyXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGV2ZW50VHlwZVxyXG4gICAgICogQHBhcmFtIHshZnVuY3Rpb24oIURhdGFTbmFwc2hvdCwgc3RyaW5nPSl9IHVzZXJDYWxsYmFja1xyXG4gICAgICogQHBhcmFtIGNhbmNlbE9yQ29udGV4dFxyXG4gICAgICogQHBhcmFtIGNvbnRleHRcclxuICAgICAqIEByZXR1cm4geyFmaXJlYmFzZS5Qcm9taXNlfVxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIChldmVudFR5cGUsIHVzZXJDYWxsYmFjaywgY2FuY2VsT3JDb250ZXh0LCBjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5Lm9uY2UnLCAxLCA0LCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZUV2ZW50VHlwZSgnUXVlcnkub25jZScsIDEsIGV2ZW50VHlwZSwgZmFsc2UpO1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVDYWxsYmFjaygnUXVlcnkub25jZScsIDIsIHVzZXJDYWxsYmFjaywgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIHJldCA9IFF1ZXJ5LmdldENhbmNlbEFuZENvbnRleHRBcmdzXygnUXVlcnkub25jZScsIGNhbmNlbE9yQ29udGV4dCwgY29udGV4dCk7XHJcbiAgICAgICAgLy8gVE9ETzogSW1wbGVtZW50IHRoaXMgbW9yZSBlZmZpY2llbnRseSAoaW4gcGFydGljdWxhciwgdXNlICdnZXQnIHdpcmUgcHJvdG9jb2wgZm9yICd2YWx1ZScgZXZlbnQpXHJcbiAgICAgICAgLy8gVE9ETzogY29uc2lkZXIgYWN0dWFsbHkgd2lyaW5nIHRoZSBjYWxsYmFja3MgaW50byB0aGUgcHJvbWlzZS4gV2UgY2Fubm90IGRvIHRoaXMgd2l0aG91dCBhIGJyZWFraW5nIGNoYW5nZVxyXG4gICAgICAgIC8vIGJlY2F1c2UgdGhlIEFQSSBjdXJyZW50bHkgZXhwZWN0cyBjYWxsYmFja3Mgd2lsbCBiZSBjYWxsZWQgc3luY2hyb25vdXNseSBpZiB0aGUgZGF0YSBpcyBjYWNoZWQsIGJ1dCB0aGlzIGlzXHJcbiAgICAgICAgLy8gYWdhaW5zdCB0aGUgUHJvbWlzZSBzcGVjaWZpY2F0aW9uLlxyXG4gICAgICAgIHZhciBmaXJzdENhbGwgPSB0cnVlO1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyB1dGlsLkRlZmVycmVkKCk7XHJcbiAgICAgICAgLy8gQSBkdW1teSBlcnJvciBoYW5kbGVyIGluIGNhc2UgYSB1c2VyIHdhc24ndCBleHBlY3RpbmcgcHJvbWlzZXNcclxuICAgICAgICBkZWZlcnJlZC5wcm9taXNlLmNhdGNoKGZ1bmN0aW9uICgpIHsgfSk7XHJcbiAgICAgICAgdmFyIG9uY2VDYWxsYmFjayA9IGZ1bmN0aW9uIChzbmFwc2hvdCkge1xyXG4gICAgICAgICAgICAvLyBOT1RFOiBFdmVuIHRob3VnaCB3ZSB1bnN1YnNjcmliZSwgd2UgbWF5IGdldCBjYWxsZWQgbXVsdGlwbGUgdGltZXMgaWYgYSBzaW5nbGUgYWN0aW9uIChlLmcuIHNldCgpIHdpdGggSlNPTilcclxuICAgICAgICAgICAgLy8gdHJpZ2dlcnMgbXVsdGlwbGUgZXZlbnRzIChlLmcuIGNoaWxkX2FkZGVkIG9yIGNoaWxkX2NoYW5nZWQpLlxyXG4gICAgICAgICAgICBpZiAoZmlyc3RDYWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmaXJzdENhbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9mZihldmVudFR5cGUsIG9uY2VDYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICBpZiAodXNlckNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlckNhbGxiYWNrLmJpbmQocmV0LmNvbnRleHQpKHNuYXBzaG90KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoc25hcHNob3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm9uKGV2ZW50VHlwZSwgb25jZUNhbGxiYWNrLCBcclxuICAgICAgICAvKmNhbmNlbD0qLyBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgIF90aGlzLm9mZihldmVudFR5cGUsIG9uY2VDYWxsYmFjayk7XHJcbiAgICAgICAgICAgIGlmIChyZXQuY2FuY2VsKVxyXG4gICAgICAgICAgICAgICAgcmV0LmNhbmNlbC5iaW5kKHJldC5jb250ZXh0KShlcnIpO1xyXG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldCBhIGxpbWl0IGFuZCBhbmNob3IgaXQgdG8gdGhlIHN0YXJ0IG9mIHRoZSB3aW5kb3cuXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IGxpbWl0XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5saW1pdFRvRmlyc3QgPSBmdW5jdGlvbiAobGltaXQpIHtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5LmxpbWl0VG9GaXJzdCcsIDEsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbGltaXQgIT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IobGltaXQpICE9PSBsaW1pdCB8fFxyXG4gICAgICAgICAgICBsaW1pdCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUXVlcnkubGltaXRUb0ZpcnN0OiBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlci4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucXVlcnlQYXJhbXNfLmhhc0xpbWl0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeS5saW1pdFRvRmlyc3Q6IExpbWl0IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIGxpbWl0LCAnICtcclxuICAgICAgICAgICAgICAgICdsaW1pdFRvRmlyc3QsIG9yIGxpbWl0VG9MYXN0KS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSh0aGlzLnJlcG8sIHRoaXMucGF0aCwgdGhpcy5xdWVyeVBhcmFtc18ubGltaXRUb0ZpcnN0KGxpbWl0KSwgdGhpcy5vcmRlckJ5Q2FsbGVkXyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgYSBsaW1pdCBhbmQgYW5jaG9yIGl0IHRvIHRoZSBlbmQgb2YgdGhlIHdpbmRvdy5cclxuICAgICAqIEBwYXJhbSB7IW51bWJlcn0gbGltaXRcclxuICAgICAqIEByZXR1cm4geyFRdWVyeX1cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLmxpbWl0VG9MYXN0ID0gZnVuY3Rpb24gKGxpbWl0KSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdRdWVyeS5saW1pdFRvTGFzdCcsIDEsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbGltaXQgIT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IobGltaXQpICE9PSBsaW1pdCB8fFxyXG4gICAgICAgICAgICBsaW1pdCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUXVlcnkubGltaXRUb0xhc3Q6IEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5xdWVyeVBhcmFtc18uaGFzTGltaXQoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5LmxpbWl0VG9MYXN0OiBMaW1pdCB3YXMgYWxyZWFkeSBzZXQgKGJ5IGFub3RoZXIgY2FsbCB0byBsaW1pdCwgJyArXHJcbiAgICAgICAgICAgICAgICAnbGltaXRUb0ZpcnN0LCBvciBsaW1pdFRvTGFzdCkuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUXVlcnkodGhpcy5yZXBvLCB0aGlzLnBhdGgsIHRoaXMucXVlcnlQYXJhbXNfLmxpbWl0VG9MYXN0KGxpbWl0KSwgdGhpcy5vcmRlckJ5Q2FsbGVkXyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIGNoaWxkIHBhdGgsIHJldHVybiBhIG5ldyBxdWVyeSBvcmRlcmVkIGJ5IHRoZSBzcGVjaWZpZWQgZ3JhbmRjaGlsZCBwYXRoLlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBwYXRoXHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5vcmRlckJ5Q2hpbGQgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUXVlcnkub3JkZXJCeUNoaWxkJywgMSwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHBhdGggPT09ICcka2V5Jykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5Lm9yZGVyQnlDaGlsZDogXCIka2V5XCIgaXMgaW52YWxpZC4gIFVzZSBRdWVyeS5vcmRlckJ5S2V5KCkgaW5zdGVhZC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGF0aCA9PT0gJyRwcmlvcml0eScpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeS5vcmRlckJ5Q2hpbGQ6IFwiJHByaW9yaXR5XCIgaXMgaW52YWxpZC4gIFVzZSBRdWVyeS5vcmRlckJ5UHJpb3JpdHkoKSBpbnN0ZWFkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwYXRoID09PSAnJHZhbHVlJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5Lm9yZGVyQnlDaGlsZDogXCIkdmFsdWVcIiBpcyBpbnZhbGlkLiAgVXNlIFF1ZXJ5Lm9yZGVyQnlWYWx1ZSgpIGluc3RlYWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbGlkYXRlUGF0aFN0cmluZygnUXVlcnkub3JkZXJCeUNoaWxkJywgMSwgcGF0aCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVOb1ByZXZpb3VzT3JkZXJCeUNhbGxfKCdRdWVyeS5vcmRlckJ5Q2hpbGQnKTtcclxuICAgICAgICB2YXIgcGFyc2VkUGF0aCA9IG5ldyBQYXRoKHBhdGgpO1xyXG4gICAgICAgIGlmIChwYXJzZWRQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5Lm9yZGVyQnlDaGlsZDogY2Fubm90IHBhc3MgaW4gZW1wdHkgcGF0aC4gIFVzZSBRdWVyeS5vcmRlckJ5VmFsdWUoKSBpbnN0ZWFkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaW5kZXggPSBuZXcgUGF0aEluZGV4KHBhcnNlZFBhdGgpO1xyXG4gICAgICAgIHZhciBuZXdQYXJhbXMgPSB0aGlzLnF1ZXJ5UGFyYW1zXy5vcmRlckJ5KGluZGV4KTtcclxuICAgICAgICBRdWVyeS52YWxpZGF0ZVF1ZXJ5RW5kcG9pbnRzXyhuZXdQYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUXVlcnkodGhpcy5yZXBvLCB0aGlzLnBhdGgsIG5ld1BhcmFtcywgLypvcmRlckJ5Q2FsbGVkPSovIHRydWUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IHF1ZXJ5IG9yZGVyZWQgYnkgdGhlIEtleUluZGV4XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5vcmRlckJ5S2V5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUXVlcnkub3JkZXJCeUtleScsIDAsIDAsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVOb1ByZXZpb3VzT3JkZXJCeUNhbGxfKCdRdWVyeS5vcmRlckJ5S2V5Jyk7XHJcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMucXVlcnlQYXJhbXNfLm9yZGVyQnkoS0VZX0lOREVYKTtcclxuICAgICAgICBRdWVyeS52YWxpZGF0ZVF1ZXJ5RW5kcG9pbnRzXyhuZXdQYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUXVlcnkodGhpcy5yZXBvLCB0aGlzLnBhdGgsIG5ld1BhcmFtcywgLypvcmRlckJ5Q2FsbGVkPSovIHRydWUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IHF1ZXJ5IG9yZGVyZWQgYnkgdGhlIFByaW9yaXR5SW5kZXhcclxuICAgICAqIEByZXR1cm4geyFRdWVyeX1cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLm9yZGVyQnlQcmlvcml0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5Lm9yZGVyQnlQcmlvcml0eScsIDAsIDAsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVOb1ByZXZpb3VzT3JkZXJCeUNhbGxfKCdRdWVyeS5vcmRlckJ5UHJpb3JpdHknKTtcclxuICAgICAgICB2YXIgbmV3UGFyYW1zID0gdGhpcy5xdWVyeVBhcmFtc18ub3JkZXJCeShQUklPUklUWV9JTkRFWCk7XHJcbiAgICAgICAgUXVlcnkudmFsaWRhdGVRdWVyeUVuZHBvaW50c18obmV3UGFyYW1zKTtcclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5KHRoaXMucmVwbywgdGhpcy5wYXRoLCBuZXdQYXJhbXMsIC8qb3JkZXJCeUNhbGxlZD0qLyB0cnVlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBhIG5ldyBxdWVyeSBvcmRlcmVkIGJ5IHRoZSBWYWx1ZUluZGV4XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5vcmRlckJ5VmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdRdWVyeS5vcmRlckJ5VmFsdWUnLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnZhbGlkYXRlTm9QcmV2aW91c09yZGVyQnlDYWxsXygnUXVlcnkub3JkZXJCeVZhbHVlJyk7XHJcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMucXVlcnlQYXJhbXNfLm9yZGVyQnkoVkFMVUVfSU5ERVgpO1xyXG4gICAgICAgIFF1ZXJ5LnZhbGlkYXRlUXVlcnlFbmRwb2ludHNfKG5ld1BhcmFtcyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSh0aGlzLnJlcG8sIHRoaXMucGF0aCwgbmV3UGFyYW1zLCAvKm9yZGVyQnlDYWxsZWQ9Ki8gdHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8Ym9vbGVhbnxudWxsfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHs/c3RyaW5nPX0gbmFtZVxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUuc3RhcnRBdCA9IGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7IHZhbHVlID0gbnVsbDsgfVxyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUXVlcnkuc3RhcnRBdCcsIDAsIDIsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnKCdRdWVyeS5zdGFydEF0JywgMSwgdmFsdWUsIHRoaXMucGF0aCwgdHJ1ZSk7XHJcbiAgICAgICAgdmFsaWRhdGVLZXkoJ1F1ZXJ5LnN0YXJ0QXQnLCAyLCBuYW1lLCB0cnVlKTtcclxuICAgICAgICB2YXIgbmV3UGFyYW1zID0gdGhpcy5xdWVyeVBhcmFtc18uc3RhcnRBdCh2YWx1ZSwgbmFtZSk7XHJcbiAgICAgICAgUXVlcnkudmFsaWRhdGVMaW1pdF8obmV3UGFyYW1zKTtcclxuICAgICAgICBRdWVyeS52YWxpZGF0ZVF1ZXJ5RW5kcG9pbnRzXyhuZXdQYXJhbXMpO1xyXG4gICAgICAgIGlmICh0aGlzLnF1ZXJ5UGFyYW1zXy5oYXNTdGFydCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUXVlcnkuc3RhcnRBdDogU3RhcnRpbmcgcG9pbnQgd2FzIGFscmVhZHkgc2V0IChieSBhbm90aGVyIGNhbGwgdG8gc3RhcnRBdCAnICtcclxuICAgICAgICAgICAgICAgICdvciBlcXVhbFRvKS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ2FsbGluZyB3aXRoIG5vIHBhcmFtcyB0ZWxscyB1cyB0byBzdGFydCBhdCB0aGUgYmVnaW5uaW5nLlxyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgbmFtZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUXVlcnkodGhpcy5yZXBvLCB0aGlzLnBhdGgsIG5ld1BhcmFtcywgdGhpcy5vcmRlckJ5Q2FsbGVkXyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8Ym9vbGVhbnxudWxsfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHs/c3RyaW5nPX0gbmFtZVxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUuZW5kQXQgPSBmdW5jdGlvbiAodmFsdWUsIG5hbWUpIHtcclxuICAgICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkgeyB2YWx1ZSA9IG51bGw7IH1cclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5LmVuZEF0JywgMCwgMiwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGFBcmcoJ1F1ZXJ5LmVuZEF0JywgMSwgdmFsdWUsIHRoaXMucGF0aCwgdHJ1ZSk7XHJcbiAgICAgICAgdmFsaWRhdGVLZXkoJ1F1ZXJ5LmVuZEF0JywgMiwgbmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMucXVlcnlQYXJhbXNfLmVuZEF0KHZhbHVlLCBuYW1lKTtcclxuICAgICAgICBRdWVyeS52YWxpZGF0ZUxpbWl0XyhuZXdQYXJhbXMpO1xyXG4gICAgICAgIFF1ZXJ5LnZhbGlkYXRlUXVlcnlFbmRwb2ludHNfKG5ld1BhcmFtcyk7XHJcbiAgICAgICAgaWYgKHRoaXMucXVlcnlQYXJhbXNfLmhhc0VuZCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUXVlcnkuZW5kQXQ6IEVuZGluZyBwb2ludCB3YXMgYWxyZWFkeSBzZXQgKGJ5IGFub3RoZXIgY2FsbCB0byBlbmRBdCBvciAnICtcclxuICAgICAgICAgICAgICAgICdlcXVhbFRvKS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSh0aGlzLnJlcG8sIHRoaXMucGF0aCwgbmV3UGFyYW1zLCB0aGlzLm9yZGVyQnlDYWxsZWRfKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIExvYWQgdGhlIHNlbGVjdGlvbiBvZiBjaGlsZHJlbiB3aXRoIGV4YWN0bHkgdGhlIHNwZWNpZmllZCB2YWx1ZSwgYW5kLCBvcHRpb25hbGx5LFxyXG4gICAgICogdGhlIHNwZWNpZmllZCBuYW1lLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfGJvb2xlYW58bnVsbH0gdmFsdWVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZVxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUuZXF1YWxUbyA9IGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUXVlcnkuZXF1YWxUbycsIDEsIDIsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnKCdRdWVyeS5lcXVhbFRvJywgMSwgdmFsdWUsIHRoaXMucGF0aCwgZmFsc2UpO1xyXG4gICAgICAgIHZhbGlkYXRlS2V5KCdRdWVyeS5lcXVhbFRvJywgMiwgbmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKHRoaXMucXVlcnlQYXJhbXNfLmhhc1N0YXJ0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeS5lcXVhbFRvOiBTdGFydGluZyBwb2ludCB3YXMgYWxyZWFkeSBzZXQgKGJ5IGFub3RoZXIgY2FsbCB0byBzdGFydEF0IG9yICcgK1xyXG4gICAgICAgICAgICAgICAgJ2VxdWFsVG8pLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5xdWVyeVBhcmFtc18uaGFzRW5kKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeS5lcXVhbFRvOiBFbmRpbmcgcG9pbnQgd2FzIGFscmVhZHkgc2V0IChieSBhbm90aGVyIGNhbGwgdG8gZW5kQXQgb3IgJyArXHJcbiAgICAgICAgICAgICAgICAnZXF1YWxUbykuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0QXQodmFsdWUsIG5hbWUpLmVuZEF0KHZhbHVlLCBuYW1lKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFzdHJpbmd9IFVSTCBmb3IgdGhpcyBsb2NhdGlvbi5cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUXVlcnkudG9TdHJpbmcnLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBvLnRvU3RyaW5nKCkgKyB0aGlzLnBhdGgudG9VcmxFbmNvZGVkU3RyaW5nKCk7XHJcbiAgICB9O1xyXG4gICAgLy8gRG8gbm90IGNyZWF0ZSBwdWJsaWMgZG9jdW1lbnRhdGlvbi4gVGhpcyBpcyBpbnRlbmRlZCB0byBtYWtlIEpTT04gc2VyaWFsaXphdGlvbiB3b3JrIGJ1dCBpcyBvdGhlcndpc2UgdW5uZWNlc3NhcnlcclxuICAgIC8vIGZvciBlbmQtdXNlcnMuXHJcbiAgICBRdWVyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIEFuIG9wdGlvbmFsIHNwYWNlciBhcmd1bWVudCBpcyB1bm5lY2Vzc2FyeSBmb3IgYSBzdHJpbmcuXHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdRdWVyeS50b0pTT04nLCAwLCAxLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBxdWVyeSBwYXJhbWV0ZXJzIHVzZWQgYnkgdGhpcyBRdWVyeS5cclxuICAgICAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5xdWVyeU9iamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeVBhcmFtc18uZ2V0UXVlcnlPYmplY3QoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5xdWVyeUlkZW50aWZpZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9iaiA9IHRoaXMucXVlcnlPYmplY3QoKTtcclxuICAgICAgICB2YXIgaWQgPSBPYmplY3RUb1VuaXF1ZUtleShvYmopO1xyXG4gICAgICAgIHJldHVybiBpZCA9PT0gJ3t9JyA/ICdkZWZhdWx0JyA6IGlkO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhpcyBxdWVyeSBhbmQgdGhlIHByb3ZpZGVkIHF1ZXJ5IGFyZSBlcXVpdmFsZW50OyBvdGhlcndpc2UsIHJldHVybiBmYWxzZS5cclxuICAgICAqIEBwYXJhbSB7UXVlcnl9IG90aGVyXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUuaXNFcXVhbCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUXVlcnkuaXNFcXVhbCcsIDEsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgUXVlcnkpKSB7XHJcbiAgICAgICAgICAgIHZhciBlcnJvciA9ICdRdWVyeS5pc0VxdWFsIGZhaWxlZDogRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBmaXJlYmFzZS5kYXRhYmFzZS5RdWVyeS4nO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2FtZVJlcG8gPSB0aGlzLnJlcG8gPT09IG90aGVyLnJlcG87XHJcbiAgICAgICAgdmFyIHNhbWVQYXRoID0gdGhpcy5wYXRoLmVxdWFscyhvdGhlci5wYXRoKTtcclxuICAgICAgICB2YXIgc2FtZVF1ZXJ5SWRlbnRpZmllciA9IHRoaXMucXVlcnlJZGVudGlmaWVyKCkgPT09IG90aGVyLnF1ZXJ5SWRlbnRpZmllcigpO1xyXG4gICAgICAgIHJldHVybiBzYW1lUmVwbyAmJiBzYW1lUGF0aCAmJiBzYW1lUXVlcnlJZGVudGlmaWVyO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIHVzZWQgYnkgLm9uIGFuZCAub25jZSB0byBleHRyYWN0IHRoZSBjb250ZXh0IGFuZCBvciBjYW5jZWwgYXJndW1lbnRzLlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWUgKG9uIG9yIG9uY2UpXHJcbiAgICAgKiBAcGFyYW0geyhmdW5jdGlvbihFcnJvcil8T2JqZWN0KT19IGNhbmNlbE9yQ29udGV4dFxyXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb250ZXh0XHJcbiAgICAgKiBAcmV0dXJuIHt7Y2FuY2VsOiA/ZnVuY3Rpb24oRXJyb3IpLCBjb250ZXh0OiA/T2JqZWN0fX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LmdldENhbmNlbEFuZENvbnRleHRBcmdzXyA9IGZ1bmN0aW9uIChmbk5hbWUsIGNhbmNlbE9yQ29udGV4dCwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciByZXQgPSB7IGNhbmNlbDogbnVsbCwgY29udGV4dDogbnVsbCB9O1xyXG4gICAgICAgIGlmIChjYW5jZWxPckNvbnRleHQgJiYgY29udGV4dCkge1xyXG4gICAgICAgICAgICByZXQuY2FuY2VsID0gY2FuY2VsT3JDb250ZXh0O1xyXG4gICAgICAgICAgICB1dGlsLnZhbGlkYXRlQ2FsbGJhY2soZm5OYW1lLCAzLCByZXQuY2FuY2VsLCB0cnVlKTtcclxuICAgICAgICAgICAgcmV0LmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgICAgICB1dGlsLnZhbGlkYXRlQ29udGV4dE9iamVjdChmbk5hbWUsIDQsIHJldC5jb250ZXh0LCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY2FuY2VsT3JDb250ZXh0KSB7XHJcbiAgICAgICAgICAgIC8vIHdlIGhhdmUgZWl0aGVyIGEgY2FuY2VsIGNhbGxiYWNrIG9yIGEgY29udGV4dC5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYW5jZWxPckNvbnRleHQgPT09ICdvYmplY3QnICYmIGNhbmNlbE9yQ29udGV4dCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gaXQncyBhIGNvbnRleHQhXHJcbiAgICAgICAgICAgICAgICByZXQuY29udGV4dCA9IGNhbmNlbE9yQ29udGV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgY2FuY2VsT3JDb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXQuY2FuY2VsID0gY2FuY2VsT3JDb250ZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHV0aWwuZXJyb3JQcmVmaXgoZm5OYW1lLCAzLCB0cnVlKSArXHJcbiAgICAgICAgICAgICAgICAgICAgJyBtdXN0IGVpdGhlciBiZSBhIGNhbmNlbCBjYWxsYmFjayBvciBhIGNvbnRleHQgb2JqZWN0LicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5LnByb3RvdHlwZSwgXCJyZWZcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWYoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBRdWVyeTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRzIGEgc2V0IHdpdGggYSBjb3VudCBvZiBlbGVtZW50cy5cclxuICpcclxuICogQHRlbXBsYXRlIEssIFZcclxuICovXHJcbnZhciBDb3VudGVkU2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ291bnRlZFNldCgpIHtcclxuICAgICAgICB0aGlzLnNldCA9IHt9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFLfSBpdGVtXHJcbiAgICAgKiBAcGFyYW0ge1Z9IHZhbFxyXG4gICAgICovXHJcbiAgICBDb3VudGVkU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoaXRlbSwgdmFsKSB7XHJcbiAgICAgICAgdGhpcy5zZXRbaXRlbV0gPSB2YWwgIT09IG51bGwgPyB2YWwgOiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshS30ga2V5XHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBDb3VudGVkU2V0LnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICByZXR1cm4gdXRpbC5jb250YWlucyh0aGlzLnNldCwga2V5KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUt9IGl0ZW1cclxuICAgICAqIEByZXR1cm4ge1Z9XHJcbiAgICAgKi9cclxuICAgIENvdW50ZWRTZXQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbnMoaXRlbSkgPyB0aGlzLnNldFtpdGVtXSA6IHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUt9IGl0ZW1cclxuICAgICAqL1xyXG4gICAgQ291bnRlZFNldC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5zZXRbaXRlbV07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZWxldGVzIGV2ZXJ5dGhpbmcgaW4gdGhlIHNldFxyXG4gICAgICovXHJcbiAgICBDb3VudGVkU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNldCA9IHt9O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJ1ZSBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHNldFxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgQ291bnRlZFNldC5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdXRpbC5pc0VtcHR5KHRoaXMuc2V0KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBpdGVtcyBpbiB0aGUgc2V0XHJcbiAgICAgKi9cclxuICAgIENvdW50ZWRTZXQucHJvdG90eXBlLmNvdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB1dGlsLmdldENvdW50KHRoaXMuc2V0KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJ1biBhIGZ1bmN0aW9uIG9uIGVhY2ggayx2IHBhaXIgaW4gdGhlIHNldFxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihLLCBWKX0gZm5cclxuICAgICAqL1xyXG4gICAgQ291bnRlZFNldC5wcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgIHV0aWwuZm9yRWFjaCh0aGlzLnNldCwgZnVuY3Rpb24gKGssIHYpIHsgcmV0dXJuIGZuKGssIHYpOyB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE1vc3RseSBmb3IgZGVidWdnaW5nXHJcbiAgICAgKiBAcmV0dXJuIHtBcnJheS48Sz59IFRoZSBrZXlzIHByZXNlbnQgaW4gdGhpcyBDb3VudGVkU2V0XHJcbiAgICAgKi9cclxuICAgIENvdW50ZWRTZXQucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGtleXMgPSBbXTtcclxuICAgICAgICB1dGlsLmZvckVhY2godGhpcy5zZXQsIGZ1bmN0aW9uIChrKSB7XHJcbiAgICAgICAgICAgIGtleXMucHVzaChrKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4ga2V5cztcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ291bnRlZFNldDtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBIZWxwZXIgY2xhc3MgdG8gc3RvcmUgYSBzcGFyc2Ugc2V0IG9mIHNuYXBzaG90cy5cclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgU3BhcnNlU25hcHNob3RUcmVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3BhcnNlU25hcHNob3RUcmVlKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICogQHR5cGUge05vZGV9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy52YWx1ZV8gPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICogQHR5cGUge0NvdW50ZWRTZXR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbl8gPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBub2RlIHN0b3JlZCBhdCB0aGUgZ2l2ZW4gcGF0aCBpZiBvbmUgZXhpc3RzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGggUGF0aCB0byBsb29rIHVwIHNuYXBzaG90IGZvci5cclxuICAgICAqIEByZXR1cm4gez9Ob2RlfSBUaGUgcmV0cmlldmVkIG5vZGUsIG9yIG51bGwuXHJcbiAgICAgKi9cclxuICAgIFNwYXJzZVNuYXBzaG90VHJlZS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWVfICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVfLmdldENoaWxkKHBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghcGF0aC5pc0VtcHR5KCkgJiYgdGhpcy5jaGlsZHJlbl8gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRLZXkgPSBwYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgICAgIHBhdGggPSBwYXRoLnBvcEZyb250KCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuXy5jb250YWlucyhjaGlsZEtleSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZFRyZWUgPSB0aGlzLmNoaWxkcmVuXy5nZXQoY2hpbGRLZXkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkVHJlZS5maW5kKHBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN0b3JlcyB0aGUgZ2l2ZW4gbm9kZSBhdCB0aGUgc3BlY2lmaWVkIHBhdGguIElmIHRoZXJlIGlzIGFscmVhZHkgYSBub2RlXHJcbiAgICAgKiBhdCBhIHNoYWxsb3dlciBwYXRoLCBpdCBtZXJnZXMgdGhlIG5ldyBkYXRhIGludG8gdGhhdCBzbmFwc2hvdCBub2RlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGggUGF0aCB0byBsb29rIHVwIHNuYXBzaG90IGZvci5cclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IGRhdGEgVGhlIG5ldyBkYXRhLCBvciBudWxsLlxyXG4gICAgICovXHJcbiAgICBTcGFyc2VTbmFwc2hvdFRyZWUucHJvdG90eXBlLnJlbWVtYmVyID0gZnVuY3Rpb24gKHBhdGgsIGRhdGEpIHtcclxuICAgICAgICBpZiAocGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZV8gPSBkYXRhO1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuXyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudmFsdWVfICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVfID0gdGhpcy52YWx1ZV8udXBkYXRlQ2hpbGQocGF0aCwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbl8gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbl8gPSBuZXcgQ291bnRlZFNldCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjaGlsZEtleSA9IHBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuXy5jb250YWlucyhjaGlsZEtleSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5fLmFkZChjaGlsZEtleSwgbmV3IFNwYXJzZVNuYXBzaG90VHJlZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuXy5nZXQoY2hpbGRLZXkpO1xyXG4gICAgICAgICAgICBwYXRoID0gcGF0aC5wb3BGcm9udCgpO1xyXG4gICAgICAgICAgICBjaGlsZC5yZW1lbWJlcihwYXRoLCBkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQdXJnZSB0aGUgZGF0YSBhdCBwYXRoIGZyb20gdGhlIGNhY2hlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGggUGF0aCB0byBsb29rIHVwIHNuYXBzaG90IGZvci5cclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhpcyBub2RlIHNob3VsZCBub3cgYmUgcmVtb3ZlZC5cclxuICAgICAqL1xyXG4gICAgU3BhcnNlU25hcHNob3RUcmVlLnByb3RvdHlwZS5mb3JnZXQgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIGlmIChwYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlXyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5fID0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZV8gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlXy5pc0xlYWZOb2RlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSdyZSB0cnlpbmcgdG8gZm9yZ2V0IGEgbm9kZSB0aGF0IGRvZXNuJ3QgZXhpc3RcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlXztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlXyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGZfMSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuZm9yRWFjaENoaWxkKFBSSU9SSVRZX0lOREVYLCBmdW5jdGlvbiAoa2V5LCB0cmVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGZfMS5yZW1lbWJlcihuZXcgUGF0aChrZXkpLCB0cmVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JnZXQocGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jaGlsZHJlbl8gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZEtleSA9IHBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoLnBvcEZyb250KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbl8uY29udGFpbnMoY2hpbGRLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNhZmVUb1JlbW92ZSA9IHRoaXMuY2hpbGRyZW5fLmdldChjaGlsZEtleSkuZm9yZ2V0KHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzYWZlVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbl8ucmVtb3ZlKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbl8uaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbl8gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWN1cnNpdmVseSBpdGVyYXRlcyB0aHJvdWdoIGFsbCBvZiB0aGUgc3RvcmVkIHRyZWUgYW5kIGNhbGxzIHRoZVxyXG4gICAgICogY2FsbGJhY2sgb24gZWFjaCBvbmUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcHJlZml4UGF0aCBQYXRoIHRvIGxvb2sgdXAgbm9kZSBmb3IuXHJcbiAgICAgKiBAcGFyYW0geyFGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIHRyZWUuXHJcbiAgICAgKi9cclxuICAgIFNwYXJzZVNuYXBzaG90VHJlZS5wcm90b3R5cGUuZm9yRWFjaFRyZWUgPSBmdW5jdGlvbiAocHJlZml4UGF0aCwgZnVuYykge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlXyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBmdW5jKHByZWZpeFBhdGgsIHRoaXMudmFsdWVfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChrZXksIHRyZWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXRoID0gbmV3IFBhdGgocHJlZml4UGF0aC50b1N0cmluZygpICsgJy8nICsga2V5KTtcclxuICAgICAgICAgICAgICAgIHRyZWUuZm9yRWFjaFRyZWUocGF0aCwgZnVuYyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEl0ZXJhdGVzIHRocm91Z2ggZWFjaCBpbW1lZGlhdGUgY2hpbGQgYW5kIHRyaWdnZXJzIHRoZSBjYWxsYmFjay5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIGNoaWxkLlxyXG4gICAgICovXHJcbiAgICBTcGFyc2VTbmFwc2hvdFRyZWUucHJvdG90eXBlLmZvckVhY2hDaGlsZCA9IGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW5fICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5fLmVhY2goZnVuY3Rpb24gKGtleSwgdHJlZSkge1xyXG4gICAgICAgICAgICAgICAgZnVuYyhrZXksIHRyZWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNwYXJzZVNuYXBzaG90VHJlZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSBwbGFjZWhvbGRlcnMgZm9yIGRlZmVycmVkIHZhbHVlcy5cclxuICogQHBhcmFtIHs/T2JqZWN0fSB2YWx1ZXNcclxuICogQHJldHVybiB7IU9iamVjdH1cclxuICovXHJcbnZhciBnZW5lcmF0ZVdpdGhWYWx1ZXMgPSBmdW5jdGlvbiAodmFsdWVzKSB7XHJcbiAgICB2YWx1ZXMgPSB2YWx1ZXMgfHwge307XHJcbiAgICB2YWx1ZXNbJ3RpbWVzdGFtcCddID0gdmFsdWVzWyd0aW1lc3RhbXAnXSB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIHJldHVybiB2YWx1ZXM7XHJcbn07XHJcbi8qKlxyXG4gKiBWYWx1ZSB0byB1c2Ugd2hlbiBmaXJpbmcgbG9jYWwgZXZlbnRzLiBXaGVuIHdyaXRpbmcgc2VydmVyIHZhbHVlcywgZmlyZVxyXG4gKiBsb2NhbCBldmVudHMgd2l0aCBhbiBhcHByb3hpbWF0ZSB2YWx1ZSwgb3RoZXJ3aXNlIHJldHVybiB2YWx1ZSBhcy1pcy5cclxuICogQHBhcmFtIHsoT2JqZWN0fHN0cmluZ3xudW1iZXJ8Ym9vbGVhbil9IHZhbHVlXHJcbiAqIEBwYXJhbSB7IU9iamVjdH0gc2VydmVyVmFsdWVzXHJcbiAqIEByZXR1cm4geyEoc3RyaW5nfG51bWJlcnxib29sZWFuKX1cclxuICovXHJcbnZhciByZXNvbHZlRGVmZXJyZWRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgc2VydmVyVmFsdWVzKSB7XHJcbiAgICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB1dGlsLmFzc2VydCgnLnN2JyBpbiB2YWx1ZSwgJ1VuZXhwZWN0ZWQgbGVhZiBub2RlIG9yIHByaW9yaXR5IGNvbnRlbnRzJyk7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZlclZhbHVlc1t2YWx1ZVsnLnN2J11dO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogUmVjdXJzaXZlbHkgcmVwbGFjZSBhbGwgZGVmZXJyZWQgdmFsdWVzIGFuZCBwcmlvcml0aWVzIGluIHRoZSB0cmVlIHdpdGggdGhlXHJcbiAqIHNwZWNpZmllZCBnZW5lcmF0ZWQgcmVwbGFjZW1lbnQgdmFsdWVzLlxyXG4gKiBAcGFyYW0geyFTcGFyc2VTbmFwc2hvdFRyZWV9IHRyZWVcclxuICogQHBhcmFtIHshT2JqZWN0fSBzZXJ2ZXJWYWx1ZXNcclxuICogQHJldHVybiB7IVNwYXJzZVNuYXBzaG90VHJlZX1cclxuICovXHJcbnZhciByZXNvbHZlRGVmZXJyZWRWYWx1ZVRyZWUgPSBmdW5jdGlvbiAodHJlZSwgc2VydmVyVmFsdWVzKSB7XHJcbiAgICB2YXIgcmVzb2x2ZWRUcmVlID0gbmV3IFNwYXJzZVNuYXBzaG90VHJlZSgpO1xyXG4gICAgdHJlZS5mb3JFYWNoVHJlZShuZXcgUGF0aCgnJyksIGZ1bmN0aW9uIChwYXRoLCBub2RlKSB7XHJcbiAgICAgICAgcmVzb2x2ZWRUcmVlLnJlbWVtYmVyKHBhdGgsIHJlc29sdmVEZWZlcnJlZFZhbHVlU25hcHNob3Qobm9kZSwgc2VydmVyVmFsdWVzKSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXNvbHZlZFRyZWU7XHJcbn07XHJcbi8qKlxyXG4gKiBSZWN1cnNpdmVseSByZXBsYWNlIGFsbCBkZWZlcnJlZCB2YWx1ZXMgYW5kIHByaW9yaXRpZXMgaW4gdGhlIG5vZGUgd2l0aCB0aGVcclxuICogc3BlY2lmaWVkIGdlbmVyYXRlZCByZXBsYWNlbWVudCB2YWx1ZXMuICBJZiB0aGVyZSBhcmUgbm8gc2VydmVyIHZhbHVlcyBpbiB0aGUgbm9kZSxcclxuICogaXQnbGwgYmUgcmV0dXJuZWQgYXMtaXMuXHJcbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcclxuICogQHBhcmFtIHshT2JqZWN0fSBzZXJ2ZXJWYWx1ZXNcclxuICogQHJldHVybiB7IU5vZGV9XHJcbiAqL1xyXG52YXIgcmVzb2x2ZURlZmVycmVkVmFsdWVTbmFwc2hvdCA9IGZ1bmN0aW9uIChub2RlLCBzZXJ2ZXJWYWx1ZXMpIHtcclxuICAgIHZhciByYXdQcmkgPSBub2RlLmdldFByaW9yaXR5KCkudmFsKCk7XHJcbiAgICB2YXIgcHJpb3JpdHkgPSByZXNvbHZlRGVmZXJyZWRWYWx1ZShyYXdQcmksIHNlcnZlclZhbHVlcyk7XHJcbiAgICB2YXIgbmV3Tm9kZTtcclxuICAgIGlmIChub2RlLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgIHZhciBsZWFmTm9kZSA9IG5vZGU7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzb2x2ZURlZmVycmVkVmFsdWUobGVhZk5vZGUuZ2V0VmFsdWUoKSwgc2VydmVyVmFsdWVzKTtcclxuICAgICAgICBpZiAodmFsdWUgIT09IGxlYWZOb2RlLmdldFZhbHVlKCkgfHxcclxuICAgICAgICAgICAgcHJpb3JpdHkgIT09IGxlYWZOb2RlLmdldFByaW9yaXR5KCkudmFsKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMZWFmTm9kZSh2YWx1ZSwgbm9kZUZyb21KU09OJDEocHJpb3JpdHkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBjaGlsZHJlbk5vZGUgPSBub2RlO1xyXG4gICAgICAgIG5ld05vZGUgPSBjaGlsZHJlbk5vZGU7XHJcbiAgICAgICAgaWYgKHByaW9yaXR5ICE9PSBjaGlsZHJlbk5vZGUuZ2V0UHJpb3JpdHkoKS52YWwoKSkge1xyXG4gICAgICAgICAgICBuZXdOb2RlID0gbmV3Tm9kZS51cGRhdGVQcmlvcml0eShuZXcgTGVhZk5vZGUocHJpb3JpdHkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hpbGRyZW5Ob2RlLmZvckVhY2hDaGlsZChQUklPUklUWV9JTkRFWCwgZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdDaGlsZE5vZGUgPSByZXNvbHZlRGVmZXJyZWRWYWx1ZVNuYXBzaG90KGNoaWxkTm9kZSwgc2VydmVyVmFsdWVzKTtcclxuICAgICAgICAgICAgaWYgKG5ld0NoaWxkTm9kZSAhPT0gY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdOb2RlID0gbmV3Tm9kZS51cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUsIG5ld0NoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3Tm9kZTtcclxuICAgIH1cclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKlxyXG4gKiBAZW51bVxyXG4gKi9cclxudmFyIE9wZXJhdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoT3BlcmF0aW9uVHlwZSkge1xyXG4gICAgT3BlcmF0aW9uVHlwZVtPcGVyYXRpb25UeXBlW1wiT1ZFUldSSVRFXCJdID0gMF0gPSBcIk9WRVJXUklURVwiO1xyXG4gICAgT3BlcmF0aW9uVHlwZVtPcGVyYXRpb25UeXBlW1wiTUVSR0VcIl0gPSAxXSA9IFwiTUVSR0VcIjtcclxuICAgIE9wZXJhdGlvblR5cGVbT3BlcmF0aW9uVHlwZVtcIkFDS19VU0VSX1dSSVRFXCJdID0gMl0gPSBcIkFDS19VU0VSX1dSSVRFXCI7XHJcbiAgICBPcGVyYXRpb25UeXBlW09wZXJhdGlvblR5cGVbXCJMSVNURU5fQ09NUExFVEVcIl0gPSAzXSA9IFwiTElTVEVOX0NPTVBMRVRFXCI7XHJcbn0pKE9wZXJhdGlvblR5cGUgfHwgKE9wZXJhdGlvblR5cGUgPSB7fSkpO1xyXG4vKipcclxuICogQHBhcmFtIHtib29sZWFufSBmcm9tVXNlclxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGZyb21TZXJ2ZXJcclxuICogQHBhcmFtIHs/c3RyaW5nfSBxdWVyeUlkXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdGFnZ2VkXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIE9wZXJhdGlvblNvdXJjZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE9wZXJhdGlvblNvdXJjZShmcm9tVXNlciwgZnJvbVNlcnZlciwgcXVlcnlJZCwgdGFnZ2VkKSB7XHJcbiAgICAgICAgdGhpcy5mcm9tVXNlciA9IGZyb21Vc2VyO1xyXG4gICAgICAgIHRoaXMuZnJvbVNlcnZlciA9IGZyb21TZXJ2ZXI7XHJcbiAgICAgICAgdGhpcy5xdWVyeUlkID0gcXVlcnlJZDtcclxuICAgICAgICB0aGlzLnRhZ2dlZCA9IHRhZ2dlZDtcclxuICAgICAgICB1dGlsLmFzc2VydCghdGFnZ2VkIHx8IGZyb21TZXJ2ZXIsICdUYWdnZWQgcXVlcmllcyBtdXN0IGJlIGZyb20gc2VydmVyLicpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEB0eXBlIHshT3BlcmF0aW9uU291cmNlfVxyXG4gICAgICovXHJcbiAgICBPcGVyYXRpb25Tb3VyY2UuVXNlciA9IG5ldyBPcGVyYXRpb25Tb3VyY2UoXHJcbiAgICAvKmZyb21Vc2VyPSovIHRydWUsIGZhbHNlLCBudWxsLCBcclxuICAgIC8qdGFnZ2VkPSovIGZhbHNlKTtcclxuICAgIC8qKlxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAdHlwZSB7IU9wZXJhdGlvblNvdXJjZX1cclxuICAgICAqL1xyXG4gICAgT3BlcmF0aW9uU291cmNlLlNlcnZlciA9IG5ldyBPcGVyYXRpb25Tb3VyY2UoZmFsc2UsIFxyXG4gICAgLypmcm9tU2VydmVyPSovIHRydWUsIG51bGwsIFxyXG4gICAgLyp0YWdnZWQ9Ki8gZmFsc2UpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlJZFxyXG4gICAgICogQHJldHVybiB7IU9wZXJhdGlvblNvdXJjZX1cclxuICAgICAqL1xyXG4gICAgT3BlcmF0aW9uU291cmNlLmZvclNlcnZlclRhZ2dlZFF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5SWQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9wZXJhdGlvblNvdXJjZShmYWxzZSwgXHJcbiAgICAgICAgLypmcm9tU2VydmVyPSovIHRydWUsIHF1ZXJ5SWQsIFxyXG4gICAgICAgIC8qdGFnZ2VkPSovIHRydWUpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBPcGVyYXRpb25Tb3VyY2U7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgQWNrVXNlcldyaXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshSW1tdXRhYmxlVHJlZTwhYm9vbGVhbj59IGFmZmVjdGVkVHJlZSBBIHRyZWUgY29udGFpbmluZyB0cnVlIGZvciBlYWNoIGFmZmVjdGVkIHBhdGguIEFmZmVjdGVkIHBhdGhzIGNhbid0IG92ZXJsYXAuXHJcbiAgICAgKiBAcGFyYW0geyFib29sZWFufSByZXZlcnRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQWNrVXNlcldyaXRlKFxyXG4gICAgLyoqQGluaGVyaXREb2MgKi8gcGF0aCwgXHJcbiAgICAvKipAaW5oZXJpdERvYyAqLyBhZmZlY3RlZFRyZWUsIFxyXG4gICAgLyoqQGluaGVyaXREb2MgKi8gcmV2ZXJ0KSB7XHJcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcclxuICAgICAgICB0aGlzLmFmZmVjdGVkVHJlZSA9IGFmZmVjdGVkVHJlZTtcclxuICAgICAgICB0aGlzLnJldmVydCA9IHJldmVydDtcclxuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgICAgICB0aGlzLnR5cGUgPSBPcGVyYXRpb25UeXBlLkFDS19VU0VSX1dSSVRFO1xyXG4gICAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gT3BlcmF0aW9uU291cmNlLlVzZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIEFja1VzZXJXcml0ZS5wcm90b3R5cGUub3BlcmF0aW9uRm9yQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0KHRoaXMucGF0aC5nZXRGcm9udCgpID09PSBjaGlsZE5hbWUsICdvcGVyYXRpb25Gb3JDaGlsZCBjYWxsZWQgZm9yIHVucmVsYXRlZCBjaGlsZC4nKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBY2tVc2VyV3JpdGUodGhpcy5wYXRoLnBvcEZyb250KCksIHRoaXMuYWZmZWN0ZWRUcmVlLCB0aGlzLnJldmVydCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWZmZWN0ZWRUcmVlLnZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdXRpbC5hc3NlcnQodGhpcy5hZmZlY3RlZFRyZWUuY2hpbGRyZW4uaXNFbXB0eSgpLCAnYWZmZWN0ZWRUcmVlIHNob3VsZCBub3QgaGF2ZSBvdmVybGFwcGluZyBhZmZlY3RlZCBwYXRocy4nKTtcclxuICAgICAgICAgICAgLy8gQWxsIGNoaWxkIGxvY2F0aW9ucyBhcmUgYWZmZWN0ZWQgYXMgd2VsbDsganVzdCByZXR1cm4gc2FtZSBvcGVyYXRpb24uXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkVHJlZSA9IHRoaXMuYWZmZWN0ZWRUcmVlLnN1YnRyZWUobmV3IFBhdGgoY2hpbGROYW1lKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWNrVXNlcldyaXRlKFBhdGguRW1wdHksIGNoaWxkVHJlZSwgdGhpcy5yZXZlcnQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQWNrVXNlcldyaXRlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIGVtcHR5Q2hpbGRyZW5TaW5nbGV0b247XHJcbi8qKlxyXG4gKiBTaW5nbGV0b24gZW1wdHkgY2hpbGRyZW4gY29sbGVjdGlvbi5cclxuICpcclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHshU29ydGVkTWFwLjxzdHJpbmcsICFJbW11dGFibGVUcmVlLjw/Pj59XHJcbiAqL1xyXG52YXIgRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICghZW1wdHlDaGlsZHJlblNpbmdsZXRvbikge1xyXG4gICAgICAgIGVtcHR5Q2hpbGRyZW5TaW5nbGV0b24gPSBuZXcgU29ydGVkTWFwKHN0cmluZ0NvbXBhcmUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVtcHR5Q2hpbGRyZW5TaW5nbGV0b247XHJcbn07XHJcbi8qKlxyXG4gKiBBIHRyZWUgd2l0aCBpbW11dGFibGUgZWxlbWVudHMuXHJcbiAqL1xyXG52YXIgSW1tdXRhYmxlVHJlZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHRlbXBsYXRlIFRcclxuICAgICAqIEBwYXJhbSB7P1R9IHZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge1NvcnRlZE1hcC48c3RyaW5nLCAhSW1tdXRhYmxlVHJlZS48VD4+PX0gY2hpbGRyZW5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gSW1tdXRhYmxlVHJlZSh2YWx1ZSwgY2hpbGRyZW4pIHtcclxuICAgICAgICBpZiAoY2hpbGRyZW4gPT09IHZvaWQgMCkgeyBjaGlsZHJlbiA9IEVtcHR5Q2hpbGRyZW4oKTsgfVxyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEB0ZW1wbGF0ZSBUXHJcbiAgICAgKiBAcGFyYW0geyFPYmplY3QuPHN0cmluZywgIVQ+fSBvYmpcclxuICAgICAqIEByZXR1cm4geyFJbW11dGFibGVUcmVlLjwhVD59XHJcbiAgICAgKi9cclxuICAgIEltbXV0YWJsZVRyZWUuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICB2YXIgdHJlZSA9IEltbXV0YWJsZVRyZWUuRW1wdHk7XHJcbiAgICAgICAgdXRpbC5mb3JFYWNoKG9iaiwgZnVuY3Rpb24gKGNoaWxkUGF0aCwgY2hpbGRTbmFwKSB7XHJcbiAgICAgICAgICAgIHRyZWUgPSB0cmVlLnNldChuZXcgUGF0aChjaGlsZFBhdGgpLCBjaGlsZFNuYXApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0cmVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgZW1wdHkgYW5kIHRoZXJlIGFyZSBubyBjaGlsZHJlblxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gbnVsbCAmJiB0aGlzLmNoaWxkcmVuLmlzRW1wdHkoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGEgcGF0aCBhbmQgcHJlZGljYXRlLCByZXR1cm4gdGhlIGZpcnN0IG5vZGUgYW5kIHRoZSBwYXRoIHRvIHRoYXQgbm9kZVxyXG4gICAgICogd2hlcmUgdGhlIHByZWRpY2F0ZSByZXR1cm5zIHRydWUuXHJcbiAgICAgKlxyXG4gICAgICogVE9ETyBEbyBhIHBlcmYgdGVzdCAtLSBJZiB3ZSdyZSBjcmVhdGluZyBhIGJ1bmNoIG9mIHtwYXRoOiB2YWx1ZTp9IG9iamVjdHNcclxuICAgICAqIG9uIHRoZSB3YXkgYmFjayBvdXQsIGl0IG1heSBiZSBiZXR0ZXIgdG8gcGFzcyBkb3duIGEgcGF0aFNvRmFyIG9iai5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSByZWxhdGl2ZVBhdGggVGhlIHJlbWFpbmRlciBvZiB0aGUgcGF0aFxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihUKTpib29sZWFufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBzYXRpc2Z5IHRvIHJldHVybiBhXHJcbiAgICAgKiAgIG5vZGVcclxuICAgICAqIEByZXR1cm4gez97cGF0aDohUGF0aCwgdmFsdWU6IVR9fVxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5maW5kUm9vdE1vc3RNYXRjaGluZ1BhdGhBbmRWYWx1ZSA9IGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIHByZWRpY2F0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlICE9IG51bGwgJiYgcHJlZGljYXRlKHRoaXMudmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHBhdGg6IFBhdGguRW1wdHksIHZhbHVlOiB0aGlzLnZhbHVlIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmVQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJvbnQgPSByZWxhdGl2ZVBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGZyb250KTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZEV4aXN0aW5nUGF0aEFuZFZhbHVlID0gY2hpbGQuZmluZFJvb3RNb3N0TWF0Y2hpbmdQYXRoQW5kVmFsdWUocmVsYXRpdmVQYXRoLnBvcEZyb250KCksIHByZWRpY2F0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkRXhpc3RpbmdQYXRoQW5kVmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnVsbFBhdGggPSBuZXcgUGF0aChmcm9udCkuY2hpbGQoY2hpbGRFeGlzdGluZ1BhdGhBbmRWYWx1ZS5wYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGF0aDogZnVsbFBhdGgsIHZhbHVlOiBjaGlsZEV4aXN0aW5nUGF0aEFuZFZhbHVlLnZhbHVlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZpbmQsIGlmIGl0IGV4aXN0cywgdGhlIHNob3J0ZXN0IHN1YnBhdGggb2YgdGhlIGdpdmVuIHBhdGggdGhhdCBwb2ludHMgYSBkZWZpbmVkXHJcbiAgICAgKiB2YWx1ZSBpbiB0aGUgdHJlZVxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcmVsYXRpdmVQYXRoXHJcbiAgICAgKiBAcmV0dXJuIHs/e3BhdGg6ICFQYXRoLCB2YWx1ZTogIVR9fVxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5maW5kUm9vdE1vc3RWYWx1ZUFuZFBhdGggPSBmdW5jdGlvbiAocmVsYXRpdmVQYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluZFJvb3RNb3N0TWF0Y2hpbmdQYXRoQW5kVmFsdWUocmVsYXRpdmVQYXRoLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHJlbGF0aXZlUGF0aFxyXG4gICAgICogQHJldHVybiB7IUltbXV0YWJsZVRyZWUuPFQ+fSBUaGUgc3VidHJlZSBhdCB0aGUgZ2l2ZW4gcGF0aFxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5zdWJ0cmVlID0gZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCkge1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZVBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGZyb250ID0gcmVsYXRpdmVQYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFRyZWUgPSB0aGlzLmNoaWxkcmVuLmdldChmcm9udCk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZFRyZWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZFRyZWUuc3VidHJlZShyZWxhdGl2ZVBhdGgucG9wRnJvbnQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW1tdXRhYmxlVHJlZS5FbXB0eTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgYSB2YWx1ZSBhdCB0aGUgc3BlY2lmaWVkIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcmVsYXRpdmVQYXRoIFBhdGggdG8gc2V0IHZhbHVlIGF0LlxyXG4gICAgICogQHBhcmFtIHs/VH0gdG9TZXQgVmFsdWUgdG8gc2V0LlxyXG4gICAgICogQHJldHVybiB7IUltbXV0YWJsZVRyZWUuPFQ+fSBSZXN1bHRpbmcgdHJlZS5cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCwgdG9TZXQpIHtcclxuICAgICAgICBpZiAocmVsYXRpdmVQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEltbXV0YWJsZVRyZWUodG9TZXQsIHRoaXMuY2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGZyb250ID0gcmVsYXRpdmVQYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGZyb250KSB8fCBJbW11dGFibGVUcmVlLkVtcHR5O1xyXG4gICAgICAgICAgICB2YXIgbmV3Q2hpbGQgPSBjaGlsZC5zZXQocmVsYXRpdmVQYXRoLnBvcEZyb250KCksIHRvU2V0KTtcclxuICAgICAgICAgICAgdmFyIG5ld0NoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5pbnNlcnQoZnJvbnQsIG5ld0NoaWxkKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbW11dGFibGVUcmVlKHRoaXMudmFsdWUsIG5ld0NoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIHRoZSB2YWx1ZSBhdCB0aGUgc3BlY2lmaWVkIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcmVsYXRpdmVQYXRoIFBhdGggdG8gdmFsdWUgdG8gcmVtb3ZlLlxyXG4gICAgICogQHJldHVybiB7IUltbXV0YWJsZVRyZWUuPFQ+fSBSZXN1bHRpbmcgdHJlZS5cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCkge1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZVBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEltbXV0YWJsZVRyZWUuRW1wdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEltbXV0YWJsZVRyZWUobnVsbCwgdGhpcy5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBmcm9udCA9IHJlbGF0aXZlUGF0aC5nZXRGcm9udCgpO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuLmdldChmcm9udCk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0NoaWxkID0gY2hpbGQucmVtb3ZlKHJlbGF0aXZlUGF0aC5wb3BGcm9udCgpKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZHJlbiA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdDaGlsZC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4ucmVtb3ZlKGZyb250KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5pbnNlcnQoZnJvbnQsIG5ld0NoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlID09PSBudWxsICYmIG5ld0NoaWxkcmVuLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJbW11dGFibGVUcmVlLkVtcHR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbW11dGFibGVUcmVlKHRoaXMudmFsdWUsIG5ld0NoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIHZhbHVlIGZyb20gdGhlIHRyZWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcmVsYXRpdmVQYXRoIFBhdGggdG8gZ2V0IHZhbHVlIGZvci5cclxuICAgICAqIEByZXR1cm4gez9UfSBWYWx1ZSBhdCBwYXRoLCBvciBudWxsLlxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocmVsYXRpdmVQYXRoKSB7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlUGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZnJvbnQgPSByZWxhdGl2ZVBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbi5nZXQoZnJvbnQpO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZC5nZXQocmVsYXRpdmVQYXRoLnBvcEZyb250KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXBsYWNlIHRoZSBzdWJ0cmVlIGF0IHRoZSBzcGVjaWZpZWQgcGF0aCB3aXRoIHRoZSBnaXZlbiBuZXcgdHJlZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSByZWxhdGl2ZVBhdGggUGF0aCB0byByZXBsYWNlIHN1YnRyZWUgZm9yLlxyXG4gICAgICogQHBhcmFtIHshSW1tdXRhYmxlVHJlZX0gbmV3VHJlZSBOZXcgdHJlZS5cclxuICAgICAqIEByZXR1cm4geyFJbW11dGFibGVUcmVlfSBSZXN1bHRpbmcgdHJlZS5cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuc2V0VHJlZSA9IGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIG5ld1RyZWUpIHtcclxuICAgICAgICBpZiAocmVsYXRpdmVQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3VHJlZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBmcm9udCA9IHJlbGF0aXZlUGF0aC5nZXRGcm9udCgpO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuLmdldChmcm9udCkgfHwgSW1tdXRhYmxlVHJlZS5FbXB0eTtcclxuICAgICAgICAgICAgdmFyIG5ld0NoaWxkID0gY2hpbGQuc2V0VHJlZShyZWxhdGl2ZVBhdGgucG9wRnJvbnQoKSwgbmV3VHJlZSk7XHJcbiAgICAgICAgICAgIHZhciBuZXdDaGlsZHJlbiA9IHZvaWQgMDtcclxuICAgICAgICAgICAgaWYgKG5ld0NoaWxkLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLnJlbW92ZShmcm9udCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4uaW5zZXJ0KGZyb250LCBuZXdDaGlsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbW11dGFibGVUcmVlKHRoaXMudmFsdWUsIG5ld0NoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBhIGRlcHRoIGZpcnN0IGZvbGQgb24gdGhpcyB0cmVlLiBUcmFuc2Zvcm1zIGEgdHJlZSBpbnRvIGEgc2luZ2xlXHJcbiAgICAgKiB2YWx1ZSwgZ2l2ZW4gYSBmdW5jdGlvbiB0aGF0IG9wZXJhdGVzIG9uIHRoZSBwYXRoIHRvIGEgbm9kZSwgYW4gb3B0aW9uYWxcclxuICAgICAqIGN1cnJlbnQgdmFsdWUsIGFuZCBhIG1hcCBvZiBjaGlsZCBuYW1lcyB0byBmb2xkZWQgc3VidHJlZXNcclxuICAgICAqIEB0ZW1wbGF0ZSBWXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKFBhdGgsID9ULCBPYmplY3QuPHN0cmluZywgVj4pOlZ9IGZuXHJcbiAgICAgKiBAcmV0dXJuIHtWfVxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5mb2xkID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9sZF8oUGF0aC5FbXB0eSwgZm4pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVjdXJzaXZlIGhlbHBlciBmb3IgcHVibGljLWZhY2luZyBmb2xkKCkgbWV0aG9kXHJcbiAgICAgKiBAdGVtcGxhdGUgVlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFNvRmFyXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKFBhdGgsID9ULCBPYmplY3QuPHN0cmluZywgVj4pOlZ9IGZuXHJcbiAgICAgKiBAcmV0dXJuIHtWfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuZm9sZF8gPSBmdW5jdGlvbiAocGF0aFNvRmFyLCBmbikge1xyXG4gICAgICAgIHZhciBhY2N1bSA9IHt9O1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uaW5vcmRlclRyYXZlcnNhbChmdW5jdGlvbiAoY2hpbGRLZXksIGNoaWxkVHJlZSkge1xyXG4gICAgICAgICAgICBhY2N1bVtjaGlsZEtleV0gPSBjaGlsZFRyZWUuZm9sZF8ocGF0aFNvRmFyLmNoaWxkKGNoaWxkS2V5KSwgZm4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBmbihwYXRoU29GYXIsIHRoaXMudmFsdWUsIGFjY3VtKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZpbmQgdGhlIGZpcnN0IG1hdGNoaW5nIHZhbHVlIG9uIHRoZSBnaXZlbiBwYXRoLiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBhcHBseWluZyBmIHRvIGl0LlxyXG4gICAgICogQHRlbXBsYXRlIFZcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCFQYXRoLCAhVCk6P1Z9IGZcclxuICAgICAqIEByZXR1cm4gez9WfVxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5maW5kT25QYXRoID0gZnVuY3Rpb24gKHBhdGgsIGYpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maW5kT25QYXRoXyhwYXRoLCBQYXRoLkVtcHR5LCBmKTtcclxuICAgIH07XHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5maW5kT25QYXRoXyA9IGZ1bmN0aW9uIChwYXRoVG9Gb2xsb3csIHBhdGhTb0ZhciwgZikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnZhbHVlID8gZihwYXRoU29GYXIsIHRoaXMudmFsdWUpIDogZmFsc2U7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHBhdGhUb0ZvbGxvdy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZyb250ID0gcGF0aFRvRm9sbG93LmdldEZyb250KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dENoaWxkID0gdGhpcy5jaGlsZHJlbi5nZXQoZnJvbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0Q2hpbGQuZmluZE9uUGF0aF8ocGF0aFRvRm9sbG93LnBvcEZyb250KCksIHBhdGhTb0Zhci5jaGlsZChmcm9udCksIGYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshZnVuY3Rpb24oIVBhdGgsICFUKX0gZlxyXG4gICAgICogQHJldHVybnMgeyFJbW11dGFibGVUcmVlLjxUPn1cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuZm9yZWFjaE9uUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBmKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yZWFjaE9uUGF0aF8ocGF0aCwgUGF0aC5FbXB0eSwgZik7XHJcbiAgICB9O1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuZm9yZWFjaE9uUGF0aF8gPSBmdW5jdGlvbiAocGF0aFRvRm9sbG93LCBjdXJyZW50UmVsYXRpdmVQYXRoLCBmKSB7XHJcbiAgICAgICAgaWYgKHBhdGhUb0ZvbGxvdy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZihjdXJyZW50UmVsYXRpdmVQYXRoLCB0aGlzLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZnJvbnQgPSBwYXRoVG9Gb2xsb3cuZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgdmFyIG5leHRDaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGZyb250KTtcclxuICAgICAgICAgICAgaWYgKG5leHRDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRDaGlsZC5mb3JlYWNoT25QYXRoXyhwYXRoVG9Gb2xsb3cucG9wRnJvbnQoKSwgY3VycmVudFJlbGF0aXZlUGF0aC5jaGlsZChmcm9udCksIGYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEltbXV0YWJsZVRyZWUuRW1wdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxscyB0aGUgZ2l2ZW4gZnVuY3Rpb24gZm9yIGVhY2ggbm9kZSBpbiB0aGUgdHJlZSB0aGF0IGhhcyBhIHZhbHVlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIVBhdGgsICFUKX0gZiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aXRoXHJcbiAgICAgKiAgIHRoZSBwYXRoIGZyb20gdGhlIHJvb3Qgb2YgdGhlIHRyZWUgdG8gYSBub2RlLCBhbmQgdGhlIHZhbHVlIGF0IHRoYXQgbm9kZS5cclxuICAgICAqICAgQ2FsbGVkIGluIGRlcHRoLWZpcnN0IG9yZGVyLlxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5mb3JlYWNoID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICB0aGlzLmZvcmVhY2hfKFBhdGguRW1wdHksIGYpO1xyXG4gICAgfTtcclxuICAgIEltbXV0YWJsZVRyZWUucHJvdG90eXBlLmZvcmVhY2hfID0gZnVuY3Rpb24gKGN1cnJlbnRSZWxhdGl2ZVBhdGgsIGYpIHtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLmlub3JkZXJUcmF2ZXJzYWwoZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGRUcmVlKSB7XHJcbiAgICAgICAgICAgIGNoaWxkVHJlZS5mb3JlYWNoXyhjdXJyZW50UmVsYXRpdmVQYXRoLmNoaWxkKGNoaWxkTmFtZSksIGYpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIGYoY3VycmVudFJlbGF0aXZlUGF0aCwgdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCAhVCl9IGZcclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuZm9yZWFjaENoaWxkID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLmlub3JkZXJUcmF2ZXJzYWwoZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGRUcmVlKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZFRyZWUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGYoY2hpbGROYW1lLCBjaGlsZFRyZWUudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSW1tdXRhYmxlVHJlZS5FbXB0eSA9IG5ldyBJbW11dGFibGVUcmVlKG51bGwpO1xyXG4gICAgcmV0dXJuIEltbXV0YWJsZVRyZWU7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQHBhcmFtIHshT3BlcmF0aW9uU291cmNlfSBzb3VyY2VcclxuICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGltcGxlbWVudHMge09wZXJhdGlvbn1cclxuICovXHJcbnZhciBMaXN0ZW5Db21wbGV0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExpc3RlbkNvbXBsZXRlKHNvdXJjZSwgcGF0aCkge1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICAgICAgdGhpcy50eXBlID0gT3BlcmF0aW9uVHlwZS5MSVNURU5fQ09NUExFVEU7XHJcbiAgICB9XHJcbiAgICBMaXN0ZW5Db21wbGV0ZS5wcm90b3R5cGUub3BlcmF0aW9uRm9yQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaXN0ZW5Db21wbGV0ZSh0aGlzLnNvdXJjZSwgUGF0aC5FbXB0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IExpc3RlbkNvbXBsZXRlKHRoaXMuc291cmNlLCB0aGlzLnBhdGgucG9wRnJvbnQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBMaXN0ZW5Db21wbGV0ZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFPcGVyYXRpb25Tb3VyY2V9IHNvdXJjZVxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAqIEBwYXJhbSB7IU5vZGV9IHNuYXBcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBpbXBsZW1lbnRzIHtPcGVyYXRpb259XHJcbiAqL1xyXG52YXIgT3ZlcndyaXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gT3ZlcndyaXRlKHNvdXJjZSwgcGF0aCwgc25hcCkge1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICAgICAgdGhpcy5zbmFwID0gc25hcDtcclxuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgICAgICB0aGlzLnR5cGUgPSBPcGVyYXRpb25UeXBlLk9WRVJXUklURTtcclxuICAgIH1cclxuICAgIE92ZXJ3cml0ZS5wcm90b3R5cGUub3BlcmF0aW9uRm9yQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBPdmVyd3JpdGUodGhpcy5zb3VyY2UsIFBhdGguRW1wdHksIHRoaXMuc25hcC5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgT3ZlcndyaXRlKHRoaXMuc291cmNlLCB0aGlzLnBhdGgucG9wRnJvbnQoKSwgdGhpcy5zbmFwKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE92ZXJ3cml0ZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAcGFyYW0geyFPcGVyYXRpb25Tb3VyY2V9IHNvdXJjZVxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAqIEBwYXJhbSB7IUltbXV0YWJsZVRyZWUuPCFOb2RlPn0gY2hpbGRyZW5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBpbXBsZW1lbnRzIHtPcGVyYXRpb259XHJcbiAqL1xyXG52YXIgTWVyZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNZXJnZShcclxuICAgIC8qKkBpbmhlcml0RG9jICovIHNvdXJjZSwgXHJcbiAgICAvKipAaW5oZXJpdERvYyAqLyBwYXRoLCBcclxuICAgIC8qKkBpbmhlcml0RG9jICovIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICAgICAgdGhpcy50eXBlID0gT3BlcmF0aW9uVHlwZS5NRVJHRTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTWVyZ2UucHJvdG90eXBlLm9wZXJhdGlvbkZvckNoaWxkID0gZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFRyZWUgPSB0aGlzLmNoaWxkcmVuLnN1YnRyZWUobmV3IFBhdGgoY2hpbGROYW1lKSk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZFRyZWUuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGNoaWxkIGlzIHVuYWZmZWN0ZWRcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkVHJlZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIHNuYXBzaG90IGZvciB0aGUgY2hpbGQgaW4gcXVlc3Rpb24uICBUaGlzIGJlY29tZXMgYW4gb3ZlcndyaXRlIG9mIHRoZSBjaGlsZC5cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgT3ZlcndyaXRlKHRoaXMuc291cmNlLCBQYXRoLkVtcHR5LCBjaGlsZFRyZWUudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIG1lcmdlIGF0IGEgZGVlcGVyIGxldmVsXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE1lcmdlKHRoaXMuc291cmNlLCBQYXRoLkVtcHR5LCBjaGlsZFRyZWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydCh0aGlzLnBhdGguZ2V0RnJvbnQoKSA9PT0gY2hpbGROYW1lLCBcIkNhbid0IGdldCBhIG1lcmdlIGZvciBhIGNoaWxkIG5vdCBvbiB0aGUgcGF0aCBvZiB0aGUgb3BlcmF0aW9uXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE1lcmdlKHRoaXMuc291cmNlLCB0aGlzLnBhdGgucG9wRnJvbnQoKSwgdGhpcy5jaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTWVyZ2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAoJ09wZXJhdGlvbignICtcclxuICAgICAgICAgICAgdGhpcy5wYXRoICtcclxuICAgICAgICAgICAgJzogJyArXHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlLnRvU3RyaW5nKCkgK1xyXG4gICAgICAgICAgICAnIG1lcmdlOiAnICtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi50b1N0cmluZygpICtcclxuICAgICAgICAgICAgJyknKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTWVyZ2U7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQSBjYWNoZSBub2RlIG9ubHkgc3RvcmVzIGNvbXBsZXRlIGNoaWxkcmVuLiBBZGRpdGlvbmFsbHkgaXQgaG9sZHMgYSBmbGFnIHdoZXRoZXIgdGhlIG5vZGUgY2FuIGJlIGNvbnNpZGVyZWQgZnVsbHlcclxuICogaW5pdGlhbGl6ZWQgaW4gdGhlIHNlbnNlIHRoYXQgd2Uga25vdyBhdCBvbmUgcG9pbnQgaW4gdGltZSB0aGlzIHJlcHJlc2VudGVkIGEgdmFsaWQgc3RhdGUgb2YgdGhlIHdvcmxkLCBlLmcuXHJcbiAqIGluaXRpYWxpemVkIHdpdGggZGF0YSBmcm9tIHRoZSBzZXJ2ZXIsIG9yIGEgY29tcGxldGUgb3ZlcndyaXRlIGJ5IHRoZSBjbGllbnQuIFRoZSBmaWx0ZXJlZCBmbGFnIGFsc28gdHJhY2tzXHJcbiAqIHdoZXRoZXIgYSBub2RlIHBvdGVudGlhbGx5IGhhZCBjaGlsZHJlbiByZW1vdmVkIGR1ZSB0byBhIGZpbHRlci5cclxuICovXHJcbnZhciBDYWNoZU5vZGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVfXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZ1bGx5SW5pdGlhbGl6ZWRfXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZpbHRlcmVkX1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBDYWNoZU5vZGUobm9kZV8sIGZ1bGx5SW5pdGlhbGl6ZWRfLCBmaWx0ZXJlZF8pIHtcclxuICAgICAgICB0aGlzLm5vZGVfID0gbm9kZV87XHJcbiAgICAgICAgdGhpcy5mdWxseUluaXRpYWxpemVkXyA9IGZ1bGx5SW5pdGlhbGl6ZWRfO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyZWRfID0gZmlsdGVyZWRfO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBub2RlIHdhcyBmdWxseSBpbml0aWFsaXplZCB3aXRoIGVpdGhlciBzZXJ2ZXIgZGF0YSBvciBhIGNvbXBsZXRlIG92ZXJ3cml0ZSBieSB0aGUgY2xpZW50XHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBDYWNoZU5vZGUucHJvdG90eXBlLmlzRnVsbHlJbml0aWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mdWxseUluaXRpYWxpemVkXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGlzIG5vZGUgaXMgcG90ZW50aWFsbHkgbWlzc2luZyBjaGlsZHJlbiBkdWUgdG8gYSBmaWx0ZXIgYXBwbGllZCB0byB0aGUgbm9kZVxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgQ2FjaGVOb2RlLnByb3RvdHlwZS5pc0ZpbHRlcmVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcmVkXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIENhY2hlTm9kZS5wcm90b3R5cGUuaXNDb21wbGV0ZUZvclBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIGlmIChwYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSAmJiAhdGhpcy5maWx0ZXJlZF87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjaGlsZEtleSA9IHBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0NvbXBsZXRlRm9yQ2hpbGQoY2hpbGRLZXkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBrZXlcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIENhY2hlTm9kZS5wcm90b3R5cGUuaXNDb21wbGV0ZUZvckNoaWxkID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHJldHVybiAoKHRoaXMuaXNGdWxseUluaXRpYWxpemVkKCkgJiYgIXRoaXMuZmlsdGVyZWRfKSB8fCB0aGlzLm5vZGVfLmhhc0NoaWxkKGtleSkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IU5vZGV9XHJcbiAgICAgKi9cclxuICAgIENhY2hlTm9kZS5wcm90b3R5cGUuZ2V0Tm9kZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ub2RlXztcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ2FjaGVOb2RlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFN0b3JlcyB0aGUgZGF0YSB3ZSBoYXZlIGNhY2hlZCBmb3IgYSB2aWV3LlxyXG4gKlxyXG4gKiBzZXJ2ZXJTbmFwIGlzIHRoZSBjYWNoZWQgc2VydmVyIGRhdGEsIGV2ZW50U25hcCBpcyB0aGUgY2FjaGVkIGV2ZW50IGRhdGEgKHNlcnZlciBkYXRhIHBsdXMgYW55IGxvY2FsIHdyaXRlcykuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFZpZXdDYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IUNhY2hlTm9kZX0gZXZlbnRDYWNoZV9cclxuICAgICAqIEBwYXJhbSB7IUNhY2hlTm9kZX0gc2VydmVyQ2FjaGVfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFZpZXdDYWNoZShldmVudENhY2hlXywgc2VydmVyQ2FjaGVfKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudENhY2hlXyA9IGV2ZW50Q2FjaGVfO1xyXG4gICAgICAgIHRoaXMuc2VydmVyQ2FjaGVfID0gc2VydmVyQ2FjaGVfO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBldmVudFNuYXBcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcGxldGVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsdGVyZWRcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKi9cclxuICAgIFZpZXdDYWNoZS5wcm90b3R5cGUudXBkYXRlRXZlbnRTbmFwID0gZnVuY3Rpb24gKGV2ZW50U25hcCwgY29tcGxldGUsIGZpbHRlcmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWaWV3Q2FjaGUobmV3IENhY2hlTm9kZShldmVudFNuYXAsIGNvbXBsZXRlLCBmaWx0ZXJlZCksIHRoaXMuc2VydmVyQ2FjaGVfKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IHNlcnZlclNuYXBcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcGxldGVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsdGVyZWRcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKi9cclxuICAgIFZpZXdDYWNoZS5wcm90b3R5cGUudXBkYXRlU2VydmVyU25hcCA9IGZ1bmN0aW9uIChzZXJ2ZXJTbmFwLCBjb21wbGV0ZSwgZmlsdGVyZWQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZpZXdDYWNoZSh0aGlzLmV2ZW50Q2FjaGVfLCBuZXcgQ2FjaGVOb2RlKHNlcnZlclNuYXAsIGNvbXBsZXRlLCBmaWx0ZXJlZCkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IUNhY2hlTm9kZX1cclxuICAgICAqL1xyXG4gICAgVmlld0NhY2hlLnByb3RvdHlwZS5nZXRFdmVudENhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50Q2FjaGVfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFZpZXdDYWNoZS5wcm90b3R5cGUuZ2V0Q29tcGxldGVFdmVudFNuYXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRDYWNoZV8uaXNGdWxseUluaXRpYWxpemVkKClcclxuICAgICAgICAgICAgPyB0aGlzLmV2ZW50Q2FjaGVfLmdldE5vZGUoKVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshQ2FjaGVOb2RlfVxyXG4gICAgICovXHJcbiAgICBWaWV3Q2FjaGUucHJvdG90eXBlLmdldFNlcnZlckNhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZlckNhY2hlXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfVxyXG4gICAgICovXHJcbiAgICBWaWV3Q2FjaGUucHJvdG90eXBlLmdldENvbXBsZXRlU2VydmVyU25hcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2ZXJDYWNoZV8uaXNGdWxseUluaXRpYWxpemVkKClcclxuICAgICAgICAgICAgPyB0aGlzLnNlcnZlckNhY2hlXy5nZXROb2RlKClcclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAdHlwZSB7Vmlld0NhY2hlfVxyXG4gICAgICovXHJcbiAgICBWaWV3Q2FjaGUuRW1wdHkgPSBuZXcgVmlld0NhY2hlKG5ldyBDYWNoZU5vZGUoQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUsIFxyXG4gICAgLypmdWxseUluaXRpYWxpemVkPSovIGZhbHNlLCBcclxuICAgIC8qZmlsdGVyZWQ9Ki8gZmFsc2UpLCBuZXcgQ2FjaGVOb2RlKENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFLCBcclxuICAgIC8qZnVsbHlJbml0aWFsaXplZD0qLyBmYWxzZSwgXHJcbiAgICAvKmZpbHRlcmVkPSovIGZhbHNlKSk7XHJcbiAgICByZXR1cm4gVmlld0NhY2hlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAc3RydWN0XHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZVxyXG4gKiBAcGFyYW0geyFOb2RlfSBzbmFwc2hvdE5vZGUgVGhlIGRhdGFcclxuICogQHBhcmFtIHtzdHJpbmc9fSBjaGlsZE5hbWUgVGhlIG5hbWUgZm9yIHRoaXMgY2hpbGQsIGlmIGl0J3MgYSBjaGlsZCBldmVudFxyXG4gKiBAcGFyYW0ge05vZGU9fSBvbGRTbmFwIFVzZWQgZm9yIGludGVybWVkaWF0ZSBwcm9jZXNzaW5nIG9mIGNoaWxkIGNoYW5nZWQgZXZlbnRzXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcHJldk5hbWUgVGhlIG5hbWUgZm9yIHRoZSBwcmV2aW91cyBjaGlsZCwgaWYgYXBwbGljYWJsZVxyXG4gKi9cclxudmFyIENoYW5nZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENoYW5nZSh0eXBlLCBzbmFwc2hvdE5vZGUsIGNoaWxkTmFtZSwgb2xkU25hcCwgcHJldk5hbWUpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuc25hcHNob3ROb2RlID0gc25hcHNob3ROb2RlO1xyXG4gICAgICAgIHRoaXMuY2hpbGROYW1lID0gY2hpbGROYW1lO1xyXG4gICAgICAgIHRoaXMub2xkU25hcCA9IG9sZFNuYXA7XHJcbiAgICAgICAgdGhpcy5wcmV2TmFtZSA9IHByZXZOYW1lO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBzbmFwc2hvdFxyXG4gICAgICogQHJldHVybiB7IUNoYW5nZX1cclxuICAgICAqL1xyXG4gICAgQ2hhbmdlLnZhbHVlQ2hhbmdlID0gZnVuY3Rpb24gKHNuYXBzaG90KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2UoQ2hhbmdlLlZBTFVFLCBzbmFwc2hvdCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2hpbGRLZXlcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IHNuYXBzaG90XHJcbiAgICAgKiBAcmV0dXJuIHshQ2hhbmdlfVxyXG4gICAgICovXHJcbiAgICBDaGFuZ2UuY2hpbGRBZGRlZENoYW5nZSA9IGZ1bmN0aW9uIChjaGlsZEtleSwgc25hcHNob3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IENoYW5nZShDaGFuZ2UuQ0hJTERfQURERUQsIHNuYXBzaG90LCBjaGlsZEtleSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2hpbGRLZXlcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IHNuYXBzaG90XHJcbiAgICAgKiBAcmV0dXJuIHshQ2hhbmdlfVxyXG4gICAgICovXHJcbiAgICBDaGFuZ2UuY2hpbGRSZW1vdmVkQ2hhbmdlID0gZnVuY3Rpb24gKGNoaWxkS2V5LCBzbmFwc2hvdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2hhbmdlKENoYW5nZS5DSElMRF9SRU1PVkVELCBzbmFwc2hvdCwgY2hpbGRLZXkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNoaWxkS2V5XHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBuZXdTbmFwc2hvdFxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gb2xkU25hcHNob3RcclxuICAgICAqIEByZXR1cm4geyFDaGFuZ2V9XHJcbiAgICAgKi9cclxuICAgIENoYW5nZS5jaGlsZENoYW5nZWRDaGFuZ2UgPSBmdW5jdGlvbiAoY2hpbGRLZXksIG5ld1NuYXBzaG90LCBvbGRTbmFwc2hvdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2hhbmdlKENoYW5nZS5DSElMRF9DSEFOR0VELCBuZXdTbmFwc2hvdCwgY2hpbGRLZXksIG9sZFNuYXBzaG90KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjaGlsZEtleVxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gc25hcHNob3RcclxuICAgICAqIEByZXR1cm4geyFDaGFuZ2V9XHJcbiAgICAgKi9cclxuICAgIENoYW5nZS5jaGlsZE1vdmVkQ2hhbmdlID0gZnVuY3Rpb24gKGNoaWxkS2V5LCBzbmFwc2hvdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2hhbmdlKENoYW5nZS5DSElMRF9NT1ZFRCwgc25hcHNob3QsIGNoaWxkS2V5KTtcclxuICAgIH07XHJcbiAgICAvL2V2ZW50IHR5cGVzXHJcbiAgICAvKiogRXZlbnQgdHlwZSBmb3IgYSBjaGlsZCBhZGRlZCAqL1xyXG4gICAgQ2hhbmdlLkNISUxEX0FEREVEID0gJ2NoaWxkX2FkZGVkJztcclxuICAgIC8qKiBFdmVudCB0eXBlIGZvciBhIGNoaWxkIHJlbW92ZWQgKi9cclxuICAgIENoYW5nZS5DSElMRF9SRU1PVkVEID0gJ2NoaWxkX3JlbW92ZWQnO1xyXG4gICAgLyoqIEV2ZW50IHR5cGUgZm9yIGEgY2hpbGQgY2hhbmdlZCAqL1xyXG4gICAgQ2hhbmdlLkNISUxEX0NIQU5HRUQgPSAnY2hpbGRfY2hhbmdlZCc7XHJcbiAgICAvKiogRXZlbnQgdHlwZSBmb3IgYSBjaGlsZCBtb3ZlZCAqL1xyXG4gICAgQ2hhbmdlLkNISUxEX01PVkVEID0gJ2NoaWxkX21vdmVkJztcclxuICAgIC8qKiBFdmVudCB0eXBlIGZvciBhIHZhbHVlIGNoYW5nZSAqL1xyXG4gICAgQ2hhbmdlLlZBTFVFID0gJ3ZhbHVlJztcclxuICAgIHJldHVybiBDaGFuZ2U7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRG9lc24ndCByZWFsbHkgZmlsdGVyIG5vZGVzIGJ1dCBhcHBsaWVzIGFuIGluZGV4IHRvIHRoZSBub2RlIGFuZCBrZWVwcyB0cmFjayBvZiBhbnkgY2hhbmdlc1xyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGltcGxlbWVudHMge05vZGVGaWx0ZXJ9XHJcbiAqIEBwYXJhbSB7IUluZGV4fSBpbmRleFxyXG4gKi9cclxudmFyIEluZGV4ZWRGaWx0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbmRleGVkRmlsdGVyKGluZGV4Xykge1xyXG4gICAgICAgIHRoaXMuaW5kZXhfID0gaW5kZXhfO1xyXG4gICAgfVxyXG4gICAgSW5kZXhlZEZpbHRlci5wcm90b3R5cGUudXBkYXRlQ2hpbGQgPSBmdW5jdGlvbiAoc25hcCwga2V5LCBuZXdDaGlsZCwgYWZmZWN0ZWRQYXRoLCBzb3VyY2UsIG9wdENoYW5nZUFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQoc25hcC5pc0luZGV4ZWQodGhpcy5pbmRleF8pLCAnQSBub2RlIG11c3QgYmUgaW5kZXhlZCBpZiBvbmx5IGEgY2hpbGQgaXMgdXBkYXRlZCcpO1xyXG4gICAgICAgIHZhciBvbGRDaGlsZCA9IHNuYXAuZ2V0SW1tZWRpYXRlQ2hpbGQoa2V5KTtcclxuICAgICAgICAvLyBDaGVjayBpZiBhbnl0aGluZyBhY3R1YWxseSBjaGFuZ2VkLlxyXG4gICAgICAgIGlmIChvbGRDaGlsZC5nZXRDaGlsZChhZmZlY3RlZFBhdGgpLmVxdWFscyhuZXdDaGlsZC5nZXRDaGlsZChhZmZlY3RlZFBhdGgpKSkge1xyXG4gICAgICAgICAgICAvLyBUaGVyZSdzIGFuIGVkZ2UgY2FzZSB3aGVyZSBhIGNoaWxkIGNhbiBlbnRlciBvciBsZWF2ZSB0aGUgdmlldyBiZWNhdXNlIGFmZmVjdGVkUGF0aCB3YXMgc2V0IHRvIG51bGwuXHJcbiAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSwgYWZmZWN0ZWRQYXRoIHdpbGwgYXBwZWFyIG51bGwgaW4gYm90aCB0aGUgb2xkIGFuZCBuZXcgc25hcHNob3RzLiAgU28gd2UgbmVlZFxyXG4gICAgICAgICAgICAvLyB0byBhdm9pZCB0cmVhdGluZyB0aGVzZSBjYXNlcyBhcyBcIm5vdGhpbmcgY2hhbmdlZC5cIlxyXG4gICAgICAgICAgICBpZiAob2xkQ2hpbGQuaXNFbXB0eSgpID09IG5ld0NoaWxkLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gTm90aGluZyBjaGFuZ2VkLlxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBhc3NlcnQgc2hvdWxkIGJlIHZhbGlkLCBidXQgaXQncyBleHBlbnNpdmUgKGNhbiBkb21pbmF0ZSBwZXJmIHRlc3RpbmcpIHNvIGRvbid0IGFjdHVhbGx5IGRvIGl0LlxyXG4gICAgICAgICAgICAgICAgLy9hc3NlcnQob2xkQ2hpbGQuZXF1YWxzKG5ld0NoaWxkKSwgJ09sZCBhbmQgbmV3IHNuYXBzaG90cyBzaG91bGQgYmUgZXF1YWwuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc25hcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0Q2hhbmdlQWNjdW11bGF0b3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAobmV3Q2hpbGQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc25hcC5oYXNDaGlsZChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0Q2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShDaGFuZ2UuY2hpbGRSZW1vdmVkQ2hhbmdlKGtleSwgb2xkQ2hpbGQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0KHNuYXAuaXNMZWFmTm9kZSgpLCAnQSBjaGlsZCByZW1vdmUgd2l0aG91dCBhbiBvbGQgY2hpbGQgb25seSBtYWtlcyBzZW5zZSBvbiBhIGxlYWYgbm9kZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9sZENoaWxkLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0Q2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShDaGFuZ2UuY2hpbGRBZGRlZENoYW5nZShrZXksIG5ld0NoaWxkKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRDaGFuZ2VBY2N1bXVsYXRvci50cmFja0NoaWxkQ2hhbmdlKENoYW5nZS5jaGlsZENoYW5nZWRDaGFuZ2Uoa2V5LCBuZXdDaGlsZCwgb2xkQ2hpbGQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc25hcC5pc0xlYWZOb2RlKCkgJiYgbmV3Q2hpbGQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzbmFwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBub2RlIGlzIGluZGV4ZWRcclxuICAgICAgICAgICAgcmV0dXJuIHNuYXAudXBkYXRlSW1tZWRpYXRlQ2hpbGQoa2V5LCBuZXdDaGlsZCkud2l0aEluZGV4KHRoaXMuaW5kZXhfKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBJbmRleGVkRmlsdGVyLnByb3RvdHlwZS51cGRhdGVGdWxsTm9kZSA9IGZ1bmN0aW9uIChvbGRTbmFwLCBuZXdTbmFwLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcikge1xyXG4gICAgICAgIGlmIChvcHRDaGFuZ2VBY2N1bXVsYXRvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmICghb2xkU25hcC5pc0xlYWZOb2RlKCkpIHtcclxuICAgICAgICAgICAgICAgIG9sZFNuYXAuZm9yRWFjaENoaWxkKFBSSU9SSVRZX0lOREVYLCBmdW5jdGlvbiAoa2V5LCBjaGlsZE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld1NuYXAuaGFzQ2hpbGQoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRDaGFuZ2VBY2N1bXVsYXRvci50cmFja0NoaWxkQ2hhbmdlKENoYW5nZS5jaGlsZFJlbW92ZWRDaGFuZ2Uoa2V5LCBjaGlsZE5vZGUpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIW5ld1NuYXAuaXNMZWFmTm9kZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTbmFwLmZvckVhY2hDaGlsZChQUklPUklUWV9JTkRFWCwgZnVuY3Rpb24gKGtleSwgY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFNuYXAuaGFzQ2hpbGQoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2xkQ2hpbGQgPSBvbGRTbmFwLmdldEltbWVkaWF0ZUNoaWxkKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2xkQ2hpbGQuZXF1YWxzKGNoaWxkTm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdENoYW5nZUFjY3VtdWxhdG9yLnRyYWNrQ2hpbGRDaGFuZ2UoQ2hhbmdlLmNoaWxkQ2hhbmdlZENoYW5nZShrZXksIGNoaWxkTm9kZSwgb2xkQ2hpbGQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0Q2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShDaGFuZ2UuY2hpbGRBZGRlZENoYW5nZShrZXksIGNoaWxkTm9kZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdTbmFwLndpdGhJbmRleCh0aGlzLmluZGV4Xyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBJbmRleGVkRmlsdGVyLnByb3RvdHlwZS51cGRhdGVQcmlvcml0eSA9IGZ1bmN0aW9uIChvbGRTbmFwLCBuZXdQcmlvcml0eSkge1xyXG4gICAgICAgIGlmIChvbGRTbmFwLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gb2xkU25hcC51cGRhdGVQcmlvcml0eShuZXdQcmlvcml0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgSW5kZXhlZEZpbHRlci5wcm90b3R5cGUuZmlsdGVyc05vZGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIEluZGV4ZWRGaWx0ZXIucHJvdG90eXBlLmdldEluZGV4ZWRGaWx0ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBJbmRleGVkRmlsdGVyLnByb3RvdHlwZS5nZXRJbmRleCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleF87XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEluZGV4ZWRGaWx0ZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENoaWxkQ2hhbmdlQWNjdW11bGF0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VNYXBfID0ge307XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUNoYW5nZX0gY2hhbmdlXHJcbiAgICAgKi9cclxuICAgIENoaWxkQ2hhbmdlQWNjdW11bGF0b3IucHJvdG90eXBlLnRyYWNrQ2hpbGRDaGFuZ2UgPSBmdW5jdGlvbiAoY2hhbmdlKSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBjaGFuZ2UudHlwZTtcclxuICAgICAgICB2YXIgY2hpbGRLZXkgLyoqIEB0eXBlIHshc3RyaW5nfSAqLyA9IGNoYW5nZS5jaGlsZE5hbWU7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQodHlwZSA9PSBDaGFuZ2UuQ0hJTERfQURERUQgfHxcclxuICAgICAgICAgICAgdHlwZSA9PSBDaGFuZ2UuQ0hJTERfQ0hBTkdFRCB8fFxyXG4gICAgICAgICAgICB0eXBlID09IENoYW5nZS5DSElMRF9SRU1PVkVELCAnT25seSBjaGlsZCBjaGFuZ2VzIHN1cHBvcnRlZCBmb3IgdHJhY2tpbmcnKTtcclxuICAgICAgICB1dGlsLmFzc2VydChjaGlsZEtleSAhPT0gJy5wcmlvcml0eScsICdPbmx5IG5vbi1wcmlvcml0eSBjaGlsZCBjaGFuZ2VzIGNhbiBiZSB0cmFja2VkLicpO1xyXG4gICAgICAgIHZhciBvbGRDaGFuZ2UgPSB1dGlsLnNhZmVHZXQodGhpcy5jaGFuZ2VNYXBfLCBjaGlsZEtleSk7XHJcbiAgICAgICAgaWYgKG9sZENoYW5nZSkge1xyXG4gICAgICAgICAgICB2YXIgb2xkVHlwZSA9IG9sZENoYW5nZS50eXBlO1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PSBDaGFuZ2UuQ0hJTERfQURERUQgJiYgb2xkVHlwZSA9PSBDaGFuZ2UuQ0hJTERfUkVNT1ZFRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VNYXBfW2NoaWxkS2V5XSA9IENoYW5nZS5jaGlsZENoYW5nZWRDaGFuZ2UoY2hpbGRLZXksIGNoYW5nZS5zbmFwc2hvdE5vZGUsIG9sZENoYW5nZS5zbmFwc2hvdE5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT0gQ2hhbmdlLkNISUxEX1JFTU9WRUQgJiZcclxuICAgICAgICAgICAgICAgIG9sZFR5cGUgPT0gQ2hhbmdlLkNISUxEX0FEREVEKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jaGFuZ2VNYXBfW2NoaWxkS2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09IENoYW5nZS5DSElMRF9SRU1PVkVEICYmXHJcbiAgICAgICAgICAgICAgICBvbGRUeXBlID09IENoYW5nZS5DSElMRF9DSEFOR0VEKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZU1hcF9bY2hpbGRLZXldID0gQ2hhbmdlLmNoaWxkUmVtb3ZlZENoYW5nZShjaGlsZEtleSwgb2xkQ2hhbmdlLm9sZFNuYXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT0gQ2hhbmdlLkNISUxEX0NIQU5HRUQgJiZcclxuICAgICAgICAgICAgICAgIG9sZFR5cGUgPT0gQ2hhbmdlLkNISUxEX0FEREVEKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZU1hcF9bY2hpbGRLZXldID0gQ2hhbmdlLmNoaWxkQWRkZWRDaGFuZ2UoY2hpbGRLZXksIGNoYW5nZS5zbmFwc2hvdE5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT0gQ2hhbmdlLkNISUxEX0NIQU5HRUQgJiZcclxuICAgICAgICAgICAgICAgIG9sZFR5cGUgPT0gQ2hhbmdlLkNISUxEX0NIQU5HRUQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwX1tjaGlsZEtleV0gPSBDaGFuZ2UuY2hpbGRDaGFuZ2VkQ2hhbmdlKGNoaWxkS2V5LCBjaGFuZ2Uuc25hcHNob3ROb2RlLCBvbGRDaGFuZ2Uub2xkU25hcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyB1dGlsLmFzc2VydGlvbkVycm9yKCdJbGxlZ2FsIGNvbWJpbmF0aW9uIG9mIGNoYW5nZXM6ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZSArXHJcbiAgICAgICAgICAgICAgICAgICAgJyBvY2N1cnJlZCBhZnRlciAnICtcclxuICAgICAgICAgICAgICAgICAgICBvbGRDaGFuZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZU1hcF9bY2hpbGRLZXldID0gY2hhbmdlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUNoYW5nZT59XHJcbiAgICAgKi9cclxuICAgIENoaWxkQ2hhbmdlQWNjdW11bGF0b3IucHJvdG90eXBlLmdldENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHV0aWwuZ2V0VmFsdWVzKHRoaXMuY2hhbmdlTWFwXyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENoaWxkQ2hhbmdlQWNjdW11bGF0b3I7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgQ29tcGxldGVDaGlsZFNvdXJjZSB0aGF0IG5ldmVyIHJldHVybnMgYW55IGFkZGl0aW9uYWwgY2hpbGRyZW5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBpbXBsZW1lbnRzIENvbXBsZXRlQ2hpbGRTb3VyY2VcclxuICovXHJcbnZhciBOb0NvbXBsZXRlQ2hpbGRTb3VyY2VfID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTm9Db21wbGV0ZUNoaWxkU291cmNlXygpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTm9Db21wbGV0ZUNoaWxkU291cmNlXy5wcm90b3R5cGUuZ2V0Q29tcGxldGVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZEtleSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTm9Db21wbGV0ZUNoaWxkU291cmNlXy5wcm90b3R5cGUuZ2V0Q2hpbGRBZnRlckNoaWxkID0gZnVuY3Rpb24gKGluZGV4LCBjaGlsZCwgcmV2ZXJzZSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBOb0NvbXBsZXRlQ2hpbGRTb3VyY2VfO1xyXG59KCkpO1xyXG4vKipcclxuICogU2luZ2xldG9uIGluc3RhbmNlLlxyXG4gKiBAY29uc3RcclxuICogQHR5cGUgeyFDb21wbGV0ZUNoaWxkU291cmNlfVxyXG4gKi9cclxudmFyIE5PX0NPTVBMRVRFX0NISUxEX1NPVVJDRSA9IG5ldyBOb0NvbXBsZXRlQ2hpbGRTb3VyY2VfKCk7XHJcbi8qKlxyXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBDb21wbGV0ZUNoaWxkU291cmNlIHRoYXQgdXNlcyBhIFdyaXRlVHJlZSBpbiBhZGRpdGlvbiB0byBhbnkgb3RoZXIgc2VydmVyIGRhdGEgb3JcclxuICogb2xkIGV2ZW50IGNhY2hlcyBhdmFpbGFibGUgdG8gY2FsY3VsYXRlIGNvbXBsZXRlIGNoaWxkcmVuLlxyXG4gKlxyXG4gKlxyXG4gKiBAaW1wbGVtZW50cyBDb21wbGV0ZUNoaWxkU291cmNlXHJcbiAqL1xyXG52YXIgV3JpdGVUcmVlQ29tcGxldGVDaGlsZFNvdXJjZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNfXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IHZpZXdDYWNoZV9cclxuICAgICAqIEBwYXJhbSB7P05vZGV9IG9wdENvbXBsZXRlU2VydmVyQ2FjaGVfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFdyaXRlVHJlZUNvbXBsZXRlQ2hpbGRTb3VyY2Uod3JpdGVzXywgdmlld0NhY2hlXywgb3B0Q29tcGxldGVTZXJ2ZXJDYWNoZV8pIHtcclxuICAgICAgICBpZiAob3B0Q29tcGxldGVTZXJ2ZXJDYWNoZV8gPT09IHZvaWQgMCkgeyBvcHRDb21wbGV0ZVNlcnZlckNhY2hlXyA9IG51bGw7IH1cclxuICAgICAgICB0aGlzLndyaXRlc18gPSB3cml0ZXNfO1xyXG4gICAgICAgIHRoaXMudmlld0NhY2hlXyA9IHZpZXdDYWNoZV87XHJcbiAgICAgICAgdGhpcy5vcHRDb21wbGV0ZVNlcnZlckNhY2hlXyA9IG9wdENvbXBsZXRlU2VydmVyQ2FjaGVfO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWVDb21wbGV0ZUNoaWxkU291cmNlLnByb3RvdHlwZS5nZXRDb21wbGV0ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkS2V5KSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnZpZXdDYWNoZV8uZ2V0RXZlbnRDYWNoZSgpO1xyXG4gICAgICAgIGlmIChub2RlLmlzQ29tcGxldGVGb3JDaGlsZChjaGlsZEtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZ2V0Tm9kZSgpLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBzZXJ2ZXJOb2RlID0gdGhpcy5vcHRDb21wbGV0ZVNlcnZlckNhY2hlXyAhPSBudWxsXHJcbiAgICAgICAgICAgICAgICA/IG5ldyBDYWNoZU5vZGUodGhpcy5vcHRDb21wbGV0ZVNlcnZlckNhY2hlXywgdHJ1ZSwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMudmlld0NhY2hlXy5nZXRTZXJ2ZXJDYWNoZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy53cml0ZXNfLmNhbGNDb21wbGV0ZUNoaWxkKGNoaWxkS2V5LCBzZXJ2ZXJOb2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWVDb21wbGV0ZUNoaWxkU291cmNlLnByb3RvdHlwZS5nZXRDaGlsZEFmdGVyQ2hpbGQgPSBmdW5jdGlvbiAoaW5kZXgsIGNoaWxkLCByZXZlcnNlKSB7XHJcbiAgICAgICAgdmFyIGNvbXBsZXRlU2VydmVyRGF0YSA9IHRoaXMub3B0Q29tcGxldGVTZXJ2ZXJDYWNoZV8gIT0gbnVsbFxyXG4gICAgICAgICAgICA/IHRoaXMub3B0Q29tcGxldGVTZXJ2ZXJDYWNoZV9cclxuICAgICAgICAgICAgOiB0aGlzLnZpZXdDYWNoZV8uZ2V0Q29tcGxldGVTZXJ2ZXJTbmFwKCk7XHJcbiAgICAgICAgdmFyIG5vZGVzID0gdGhpcy53cml0ZXNfLmNhbGNJbmRleGVkU2xpY2UoY29tcGxldGVTZXJ2ZXJEYXRhLCBjaGlsZCwgMSwgcmV2ZXJzZSwgaW5kZXgpO1xyXG4gICAgICAgIGlmIChub2Rlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbm9kZXNbMF07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBXcml0ZVRyZWVDb21wbGV0ZUNoaWxkU291cmNlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAc3RydWN0XHJcbiAqL1xyXG52YXIgUHJvY2Vzc29yUmVzdWx0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IHZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPCFDaGFuZ2U+fSBjaGFuZ2VzXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFByb2Nlc3NvclJlc3VsdCh2aWV3Q2FjaGUsIGNoYW5nZXMpIHtcclxuICAgICAgICB0aGlzLnZpZXdDYWNoZSA9IHZpZXdDYWNoZTtcclxuICAgICAgICB0aGlzLmNoYW5nZXMgPSBjaGFuZ2VzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByb2Nlc3NvclJlc3VsdDtcclxufSgpKTtcclxuLyoqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFZpZXdQcm9jZXNzb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU5vZGVGaWx0ZXJ9IGZpbHRlcl9cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVmlld1Byb2Nlc3NvcihmaWx0ZXJfKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJfID0gZmlsdGVyXztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshVmlld0NhY2hlfSB2aWV3Q2FjaGVcclxuICAgICAqL1xyXG4gICAgVmlld1Byb2Nlc3Nvci5wcm90b3R5cGUuYXNzZXJ0SW5kZXhlZCA9IGZ1bmN0aW9uICh2aWV3Q2FjaGUpIHtcclxuICAgICAgICB1dGlsLmFzc2VydCh2aWV3Q2FjaGVcclxuICAgICAgICAgICAgLmdldEV2ZW50Q2FjaGUoKVxyXG4gICAgICAgICAgICAuZ2V0Tm9kZSgpXHJcbiAgICAgICAgICAgIC5pc0luZGV4ZWQodGhpcy5maWx0ZXJfLmdldEluZGV4KCkpLCAnRXZlbnQgc25hcCBub3QgaW5kZXhlZCcpO1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHZpZXdDYWNoZVxyXG4gICAgICAgICAgICAuZ2V0U2VydmVyQ2FjaGUoKVxyXG4gICAgICAgICAgICAuZ2V0Tm9kZSgpXHJcbiAgICAgICAgICAgIC5pc0luZGV4ZWQodGhpcy5maWx0ZXJfLmdldEluZGV4KCkpLCAnU2VydmVyIHNuYXAgbm90IGluZGV4ZWQnKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVZpZXdDYWNoZX0gb2xkVmlld0NhY2hlXHJcbiAgICAgKiBAcGFyYW0geyFPcGVyYXRpb259IG9wZXJhdGlvblxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gY29tcGxldGVDYWNoZVxyXG4gICAgICogQHJldHVybiB7IVByb2Nlc3NvclJlc3VsdH1cclxuICAgICAqL1xyXG4gICAgVmlld1Byb2Nlc3Nvci5wcm90b3R5cGUuYXBwbHlPcGVyYXRpb24gPSBmdW5jdGlvbiAob2xkVmlld0NhY2hlLCBvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlKSB7XHJcbiAgICAgICAgdmFyIGFjY3VtdWxhdG9yID0gbmV3IENoaWxkQ2hhbmdlQWNjdW11bGF0b3IoKTtcclxuICAgICAgICB2YXIgbmV3Vmlld0NhY2hlLCBmaWx0ZXJTZXJ2ZXJOb2RlO1xyXG4gICAgICAgIGlmIChvcGVyYXRpb24udHlwZSA9PT0gT3BlcmF0aW9uVHlwZS5PVkVSV1JJVEUpIHtcclxuICAgICAgICAgICAgdmFyIG92ZXJ3cml0ZSA9IG9wZXJhdGlvbjtcclxuICAgICAgICAgICAgaWYgKG92ZXJ3cml0ZS5zb3VyY2UuZnJvbVVzZXIpIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IHRoaXMuYXBwbHlVc2VyT3ZlcndyaXRlXyhvbGRWaWV3Q2FjaGUsIG92ZXJ3cml0ZS5wYXRoLCBvdmVyd3JpdGUuc25hcCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0KG92ZXJ3cml0ZS5zb3VyY2UuZnJvbVNlcnZlciwgJ1Vua25vd24gc291cmNlLicpO1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgZmlsdGVyIHRoZSBub2RlIGlmIGl0J3MgYSB0YWdnZWQgdXBkYXRlIG9yIHRoZSBub2RlIGhhcyBiZWVuIHByZXZpb3VzbHkgZmlsdGVyZWQgIGFuZCB0aGVcclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBpcyBub3QgYXQgdGhlIHJvb3QgaW4gd2hpY2ggY2FzZSBpdCBpcyBvayAoYW5kIG5lY2Vzc2FyeSkgdG8gbWFyayB0aGUgbm9kZSB1bmZpbHRlcmVkXHJcbiAgICAgICAgICAgICAgICAvLyBhZ2FpblxyXG4gICAgICAgICAgICAgICAgZmlsdGVyU2VydmVyTm9kZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXRlLnNvdXJjZS50YWdnZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKG9sZFZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzRmlsdGVyZWQoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIW92ZXJ3cml0ZS5wYXRoLmlzRW1wdHkoKSk7XHJcbiAgICAgICAgICAgICAgICBuZXdWaWV3Q2FjaGUgPSB0aGlzLmFwcGx5U2VydmVyT3ZlcndyaXRlXyhvbGRWaWV3Q2FjaGUsIG92ZXJ3cml0ZS5wYXRoLCBvdmVyd3JpdGUuc25hcCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGZpbHRlclNlcnZlck5vZGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvcGVyYXRpb24udHlwZSA9PT0gT3BlcmF0aW9uVHlwZS5NRVJHRSkge1xyXG4gICAgICAgICAgICB2YXIgbWVyZ2UgPSBvcGVyYXRpb247XHJcbiAgICAgICAgICAgIGlmIChtZXJnZS5zb3VyY2UuZnJvbVVzZXIpIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IHRoaXMuYXBwbHlVc2VyTWVyZ2VfKG9sZFZpZXdDYWNoZSwgbWVyZ2UucGF0aCwgbWVyZ2UuY2hpbGRyZW4sIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmFzc2VydChtZXJnZS5zb3VyY2UuZnJvbVNlcnZlciwgJ1Vua25vd24gc291cmNlLicpO1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgZmlsdGVyIHRoZSBub2RlIGlmIGl0J3MgYSB0YWdnZWQgdXBkYXRlIG9yIHRoZSBub2RlIGhhcyBiZWVuIHByZXZpb3VzbHkgZmlsdGVyZWRcclxuICAgICAgICAgICAgICAgIGZpbHRlclNlcnZlck5vZGUgPVxyXG4gICAgICAgICAgICAgICAgICAgIG1lcmdlLnNvdXJjZS50YWdnZWQgfHwgb2xkVmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuaXNGaWx0ZXJlZCgpO1xyXG4gICAgICAgICAgICAgICAgbmV3Vmlld0NhY2hlID0gdGhpcy5hcHBseVNlcnZlck1lcmdlXyhvbGRWaWV3Q2FjaGUsIG1lcmdlLnBhdGgsIG1lcmdlLmNoaWxkcmVuLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgZmlsdGVyU2VydmVyTm9kZSwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG9wZXJhdGlvbi50eXBlID09PSBPcGVyYXRpb25UeXBlLkFDS19VU0VSX1dSSVRFKSB7XHJcbiAgICAgICAgICAgIHZhciBhY2tVc2VyV3JpdGUgPSBvcGVyYXRpb247XHJcbiAgICAgICAgICAgIGlmICghYWNrVXNlcldyaXRlLnJldmVydCkge1xyXG4gICAgICAgICAgICAgICAgbmV3Vmlld0NhY2hlID0gdGhpcy5hY2tVc2VyV3JpdGVfKG9sZFZpZXdDYWNoZSwgYWNrVXNlcldyaXRlLnBhdGgsIGFja1VzZXJXcml0ZS5hZmZlY3RlZFRyZWUsIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdWaWV3Q2FjaGUgPSB0aGlzLnJldmVydFVzZXJXcml0ZV8ob2xkVmlld0NhY2hlLCBhY2tVc2VyV3JpdGUucGF0aCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvcGVyYXRpb24udHlwZSA9PT0gT3BlcmF0aW9uVHlwZS5MSVNURU5fQ09NUExFVEUpIHtcclxuICAgICAgICAgICAgbmV3Vmlld0NhY2hlID0gdGhpcy5saXN0ZW5Db21wbGV0ZV8ob2xkVmlld0NhY2hlLCBvcGVyYXRpb24ucGF0aCwgd3JpdGVzQ2FjaGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IHV0aWwuYXNzZXJ0aW9uRXJyb3IoJ1Vua25vd24gb3BlcmF0aW9uIHR5cGU6ICcgKyBvcGVyYXRpb24udHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjaGFuZ2VzID0gYWNjdW11bGF0b3IuZ2V0Q2hhbmdlcygpO1xyXG4gICAgICAgIFZpZXdQcm9jZXNzb3IubWF5YmVBZGRWYWx1ZUV2ZW50XyhvbGRWaWV3Q2FjaGUsIG5ld1ZpZXdDYWNoZSwgY2hhbmdlcyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9jZXNzb3JSZXN1bHQobmV3Vmlld0NhY2hlLCBjaGFuZ2VzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVZpZXdDYWNoZX0gb2xkVmlld0NhY2hlXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IG5ld1ZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPCFDaGFuZ2U+fSBhY2N1bXVsYXRvclxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgVmlld1Byb2Nlc3Nvci5tYXliZUFkZFZhbHVlRXZlbnRfID0gZnVuY3Rpb24gKG9sZFZpZXdDYWNoZSwgbmV3Vmlld0NhY2hlLCBhY2N1bXVsYXRvcikge1xyXG4gICAgICAgIHZhciBldmVudFNuYXAgPSBuZXdWaWV3Q2FjaGUuZ2V0RXZlbnRDYWNoZSgpO1xyXG4gICAgICAgIGlmIChldmVudFNuYXAuaXNGdWxseUluaXRpYWxpemVkKCkpIHtcclxuICAgICAgICAgICAgdmFyIGlzTGVhZk9yRW1wdHkgPSBldmVudFNuYXAuZ2V0Tm9kZSgpLmlzTGVhZk5vZGUoKSB8fCBldmVudFNuYXAuZ2V0Tm9kZSgpLmlzRW1wdHkoKTtcclxuICAgICAgICAgICAgdmFyIG9sZENvbXBsZXRlU25hcCA9IG9sZFZpZXdDYWNoZS5nZXRDb21wbGV0ZUV2ZW50U25hcCgpO1xyXG4gICAgICAgICAgICBpZiAoYWNjdW11bGF0b3IubGVuZ3RoID4gMCB8fFxyXG4gICAgICAgICAgICAgICAgIW9sZFZpZXdDYWNoZS5nZXRFdmVudENhY2hlKCkuaXNGdWxseUluaXRpYWxpemVkKCkgfHxcclxuICAgICAgICAgICAgICAgIChpc0xlYWZPckVtcHR5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIWV2ZW50U25hcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Tm9kZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcXVhbHMoLyoqIEB0eXBlIHshTm9kZX0gKi8gKG9sZENvbXBsZXRlU25hcCkpKSB8fFxyXG4gICAgICAgICAgICAgICAgIWV2ZW50U25hcFxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXROb2RlKClcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0UHJpb3JpdHkoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5lcXVhbHMob2xkQ29tcGxldGVTbmFwLmdldFByaW9yaXR5KCkpKSB7XHJcbiAgICAgICAgICAgICAgICBhY2N1bXVsYXRvci5wdXNoKENoYW5nZS52YWx1ZUNoYW5nZShcclxuICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7IU5vZGV9ICovIG5ld1ZpZXdDYWNoZS5nZXRDb21wbGV0ZUV2ZW50U25hcCgpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IHZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gY2hhbmdlUGF0aFxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQ29tcGxldGVDaGlsZFNvdXJjZX0gc291cmNlXHJcbiAgICAgKiBAcGFyYW0geyFDaGlsZENoYW5nZUFjY3VtdWxhdG9yfSBhY2N1bXVsYXRvclxyXG4gICAgICogQHJldHVybiB7IVZpZXdDYWNoZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFZpZXdQcm9jZXNzb3IucHJvdG90eXBlLmdlbmVyYXRlRXZlbnRDYWNoZUFmdGVyU2VydmVyRXZlbnRfID0gZnVuY3Rpb24gKHZpZXdDYWNoZSwgY2hhbmdlUGF0aCwgd3JpdGVzQ2FjaGUsIHNvdXJjZSwgYWNjdW11bGF0b3IpIHtcclxuICAgICAgICB2YXIgb2xkRXZlbnRTbmFwID0gdmlld0NhY2hlLmdldEV2ZW50Q2FjaGUoKTtcclxuICAgICAgICBpZiAod3JpdGVzQ2FjaGUuc2hhZG93aW5nV3JpdGUoY2hhbmdlUGF0aCkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyB3ZSBoYXZlIGEgc2hhZG93aW5nIHdyaXRlLCBpZ25vcmUgY2hhbmdlc1xyXG4gICAgICAgICAgICByZXR1cm4gdmlld0NhY2hlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIG5ld0V2ZW50Q2FjaGUgPSB2b2lkIDAsIHNlcnZlck5vZGUgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogZmlndXJlIG91dCBob3cgdGhpcyBwbGF5cyB3aXRoIFwic2xpZGluZyBhY2sgd2luZG93c1wiXHJcbiAgICAgICAgICAgICAgICB1dGlsLmFzc2VydCh2aWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSwgJ0lmIGNoYW5nZSBwYXRoIGlzIGVtcHR5LCB3ZSBtdXN0IGhhdmUgY29tcGxldGUgc2VydmVyIGRhdGEnKTtcclxuICAgICAgICAgICAgICAgIGlmICh2aWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKS5pc0ZpbHRlcmVkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHNwZWNpYWwgY2FzZSB0aGlzLCBiZWNhdXNlIHdlIG5lZWQgdG8gb25seSBhcHBseSB3cml0ZXMgdG8gY29tcGxldGUgY2hpbGRyZW4sIG9yXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbWlnaHQgZW5kIHVwIHJhaXNpbmcgZXZlbnRzIGZvciBpbmNvbXBsZXRlIGNoaWxkcmVuLiBJZiB0aGUgc2VydmVyIGRhdGEgaXMgZmlsdGVyZWQgZGVlcFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdyaXRlcyBjYW5ub3QgYmUgZ3VhcmFudGVlZCB0byBiZSBjb21wbGV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJ2ZXJDYWNoZSA9IHZpZXdDYWNoZS5nZXRDb21wbGV0ZVNlcnZlclNuYXAoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29tcGxldGVDaGlsZHJlbiA9IHNlcnZlckNhY2hlIGluc3RhbmNlb2YgQ2hpbGRyZW5Ob2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2VydmVyQ2FjaGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29tcGxldGVFdmVudENoaWxkcmVuID0gd3JpdGVzQ2FjaGUuY2FsY0NvbXBsZXRlRXZlbnRDaGlsZHJlbihjb21wbGV0ZUNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdGhpcy5maWx0ZXJfLnVwZGF0ZUZ1bGxOb2RlKHZpZXdDYWNoZS5nZXRFdmVudENhY2hlKCkuZ2V0Tm9kZSgpLCBjb21wbGV0ZUV2ZW50Q2hpbGRyZW4sIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZU5vZGUgPSB3cml0ZXNDYWNoZS5jYWxjQ29tcGxldGVFdmVudENhY2hlKHZpZXdDYWNoZS5nZXRDb21wbGV0ZVNlcnZlclNuYXAoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IHRoaXMuZmlsdGVyXy51cGRhdGVGdWxsTm9kZSh2aWV3Q2FjaGUuZ2V0RXZlbnRDYWNoZSgpLmdldE5vZGUoKSwgY29tcGxldGVOb2RlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRLZXkgPSBjaGFuZ2VQYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRLZXkgPT0gJy5wcmlvcml0eScpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlsLmFzc2VydChjaGFuZ2VQYXRoLmdldExlbmd0aCgpID09IDEsIFwiQ2FuJ3QgaGF2ZSBhIHByaW9yaXR5IHdpdGggYWRkaXRpb25hbCBwYXRoIGNvbXBvbmVudHNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZEV2ZW50Tm9kZSA9IG9sZEV2ZW50U25hcC5nZXROb2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyTm9kZSA9IHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmdldE5vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBtaWdodCBoYXZlIG92ZXJ3cml0ZXMgZm9yIHRoaXMgcHJpb3JpdHlcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFByaW9yaXR5ID0gd3JpdGVzQ2FjaGUuY2FsY0V2ZW50Q2FjaGVBZnRlclNlcnZlck92ZXJ3cml0ZShjaGFuZ2VQYXRoLCBvbGRFdmVudE5vZGUsIHNlcnZlck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkUHJpb3JpdHkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdGhpcy5maWx0ZXJfLnVwZGF0ZVByaW9yaXR5KG9sZEV2ZW50Tm9kZSwgdXBkYXRlZFByaW9yaXR5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByaW9yaXR5IGRpZG4ndCBjaGFuZ2UsIGtlZXAgb2xkIG5vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IG9sZEV2ZW50U25hcC5nZXROb2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkQ2hhbmdlUGF0aCA9IGNoYW5nZVBhdGgucG9wRnJvbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgY2hpbGRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RXZlbnRDaGlsZCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkRXZlbnRTbmFwLmlzQ29tcGxldGVGb3JDaGlsZChjaGlsZEtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyTm9kZSA9IHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmdldE5vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50Q2hpbGRVcGRhdGUgPSB3cml0ZXNDYWNoZS5jYWxjRXZlbnRDYWNoZUFmdGVyU2VydmVyT3ZlcndyaXRlKGNoYW5nZVBhdGgsIG9sZEV2ZW50U25hcC5nZXROb2RlKCksIHNlcnZlck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRDaGlsZFVwZGF0ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENoaWxkID0gb2xkRXZlbnRTbmFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldE5vZGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZEtleSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlQ2hpbGQoY2hpbGRDaGFuZ2VQYXRoLCBldmVudENoaWxkVXBkYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGhpbmcgY2hhbmdlZCwganVzdCBrZWVwIHRoZSBvbGQgY2hpbGRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2hpbGQgPSBvbGRFdmVudFNuYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Tm9kZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDaGlsZCA9IHdyaXRlc0NhY2hlLmNhbGNDb21wbGV0ZUNoaWxkKGNoaWxkS2V5LCB2aWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdFdmVudENoaWxkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IHRoaXMuZmlsdGVyXy51cGRhdGVDaGlsZChvbGRFdmVudFNuYXAuZ2V0Tm9kZSgpLCBjaGlsZEtleSwgbmV3RXZlbnRDaGlsZCwgY2hpbGRDaGFuZ2VQYXRoLCBzb3VyY2UsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIGNvbXBsZXRlIGNoaWxkIGF2YWlsYWJsZSBvciBubyBjaGFuZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IG9sZEV2ZW50U25hcC5nZXROb2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2aWV3Q2FjaGUudXBkYXRlRXZlbnRTbmFwKG5ld0V2ZW50Q2FjaGUsIG9sZEV2ZW50U25hcC5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSB8fCBjaGFuZ2VQYXRoLmlzRW1wdHkoKSwgdGhpcy5maWx0ZXJfLmZpbHRlcnNOb2RlcygpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IG9sZFZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gY2hhbmdlUGF0aFxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gY2hhbmdlZFNuYXBcclxuICAgICAqIEBwYXJhbSB7IVdyaXRlVHJlZVJlZn0gd3JpdGVzQ2FjaGVcclxuICAgICAqIEBwYXJhbSB7P05vZGV9IGNvbXBsZXRlQ2FjaGVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsdGVyU2VydmVyTm9kZVxyXG4gICAgICogQHBhcmFtIHshQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvcn0gYWNjdW11bGF0b3JcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBWaWV3UHJvY2Vzc29yLnByb3RvdHlwZS5hcHBseVNlcnZlck92ZXJ3cml0ZV8gPSBmdW5jdGlvbiAob2xkVmlld0NhY2hlLCBjaGFuZ2VQYXRoLCBjaGFuZ2VkU25hcCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGZpbHRlclNlcnZlck5vZGUsIGFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgdmFyIG9sZFNlcnZlclNuYXAgPSBvbGRWaWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKTtcclxuICAgICAgICB2YXIgbmV3U2VydmVyQ2FjaGU7XHJcbiAgICAgICAgdmFyIHNlcnZlckZpbHRlciA9IGZpbHRlclNlcnZlck5vZGVcclxuICAgICAgICAgICAgPyB0aGlzLmZpbHRlcl9cclxuICAgICAgICAgICAgOiB0aGlzLmZpbHRlcl8uZ2V0SW5kZXhlZEZpbHRlcigpO1xyXG4gICAgICAgIGlmIChjaGFuZ2VQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICBuZXdTZXJ2ZXJDYWNoZSA9IHNlcnZlckZpbHRlci51cGRhdGVGdWxsTm9kZShvbGRTZXJ2ZXJTbmFwLmdldE5vZGUoKSwgY2hhbmdlZFNuYXAsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzZXJ2ZXJGaWx0ZXIuZmlsdGVyc05vZGVzKCkgJiYgIW9sZFNlcnZlclNuYXAuaXNGaWx0ZXJlZCgpKSB7XHJcbiAgICAgICAgICAgIC8vIHdlIHdhbnQgdG8gZmlsdGVyIHRoZSBzZXJ2ZXIgbm9kZSwgYnV0IHdlIGRpZG4ndCBmaWx0ZXIgdGhlIHNlcnZlciBub2RlIHlldCwgc28gc2ltdWxhdGUgYSBmdWxsIHVwZGF0ZVxyXG4gICAgICAgICAgICB2YXIgbmV3U2VydmVyTm9kZSA9IG9sZFNlcnZlclNuYXBcclxuICAgICAgICAgICAgICAgIC5nZXROb2RlKClcclxuICAgICAgICAgICAgICAgIC51cGRhdGVDaGlsZChjaGFuZ2VQYXRoLCBjaGFuZ2VkU25hcCk7XHJcbiAgICAgICAgICAgIG5ld1NlcnZlckNhY2hlID0gc2VydmVyRmlsdGVyLnVwZGF0ZUZ1bGxOb2RlKG9sZFNlcnZlclNuYXAuZ2V0Tm9kZSgpLCBuZXdTZXJ2ZXJOb2RlLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZEtleSA9IGNoYW5nZVBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgaWYgKCFvbGRTZXJ2ZXJTbmFwLmlzQ29tcGxldGVGb3JQYXRoKGNoYW5nZVBhdGgpICYmXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VQYXRoLmdldExlbmd0aCgpID4gMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgdXBkYXRlIGluY29tcGxldGUgbm9kZXMgd2l0aCB1cGRhdGVzIGludGVuZGVkIGZvciBvdGhlciBsaXN0ZW5lcnNcclxuICAgICAgICAgICAgICAgIHJldHVybiBvbGRWaWV3Q2FjaGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGNoaWxkQ2hhbmdlUGF0aCA9IGNoYW5nZVBhdGgucG9wRnJvbnQoKTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IG9sZFNlcnZlclNuYXAuZ2V0Tm9kZSgpLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgdmFyIG5ld0NoaWxkTm9kZSA9IGNoaWxkTm9kZS51cGRhdGVDaGlsZChjaGlsZENoYW5nZVBhdGgsIGNoYW5nZWRTbmFwKTtcclxuICAgICAgICAgICAgaWYgKGNoaWxkS2V5ID09ICcucHJpb3JpdHknKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTZXJ2ZXJDYWNoZSA9IHNlcnZlckZpbHRlci51cGRhdGVQcmlvcml0eShvbGRTZXJ2ZXJTbmFwLmdldE5vZGUoKSwgbmV3Q2hpbGROb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ld1NlcnZlckNhY2hlID0gc2VydmVyRmlsdGVyLnVwZGF0ZUNoaWxkKG9sZFNlcnZlclNuYXAuZ2V0Tm9kZSgpLCBjaGlsZEtleSwgbmV3Q2hpbGROb2RlLCBjaGlsZENoYW5nZVBhdGgsIE5PX0NPTVBMRVRFX0NISUxEX1NPVVJDRSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG5ld1ZpZXdDYWNoZSA9IG9sZFZpZXdDYWNoZS51cGRhdGVTZXJ2ZXJTbmFwKG5ld1NlcnZlckNhY2hlLCBvbGRTZXJ2ZXJTbmFwLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8IGNoYW5nZVBhdGguaXNFbXB0eSgpLCBzZXJ2ZXJGaWx0ZXIuZmlsdGVyc05vZGVzKCkpO1xyXG4gICAgICAgIHZhciBzb3VyY2UgPSBuZXcgV3JpdGVUcmVlQ29tcGxldGVDaGlsZFNvdXJjZSh3cml0ZXNDYWNoZSwgbmV3Vmlld0NhY2hlLCBjb21wbGV0ZUNhY2hlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUV2ZW50Q2FjaGVBZnRlclNlcnZlckV2ZW50XyhuZXdWaWV3Q2FjaGUsIGNoYW5nZVBhdGgsIHdyaXRlc0NhY2hlLCBzb3VyY2UsIGFjY3VtdWxhdG9yKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVZpZXdDYWNoZX0gb2xkVmlld0NhY2hlXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBjaGFuZ2VQYXRoXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBjaGFuZ2VkU25hcFxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gY29tcGxldGVDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvcn0gYWNjdW11bGF0b3JcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBWaWV3UHJvY2Vzc29yLnByb3RvdHlwZS5hcHBseVVzZXJPdmVyd3JpdGVfID0gZnVuY3Rpb24gKG9sZFZpZXdDYWNoZSwgY2hhbmdlUGF0aCwgY2hhbmdlZFNuYXAsIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBhY2N1bXVsYXRvcikge1xyXG4gICAgICAgIHZhciBvbGRFdmVudFNuYXAgPSBvbGRWaWV3Q2FjaGUuZ2V0RXZlbnRDYWNoZSgpO1xyXG4gICAgICAgIHZhciBuZXdWaWV3Q2FjaGUsIG5ld0V2ZW50Q2FjaGU7XHJcbiAgICAgICAgdmFyIHNvdXJjZSA9IG5ldyBXcml0ZVRyZWVDb21wbGV0ZUNoaWxkU291cmNlKHdyaXRlc0NhY2hlLCBvbGRWaWV3Q2FjaGUsIGNvbXBsZXRlQ2FjaGUpO1xyXG4gICAgICAgIGlmIChjaGFuZ2VQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdGhpcy5maWx0ZXJfLnVwZGF0ZUZ1bGxOb2RlKG9sZFZpZXdDYWNoZS5nZXRFdmVudENhY2hlKCkuZ2V0Tm9kZSgpLCBjaGFuZ2VkU25hcCwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgICAgICBuZXdWaWV3Q2FjaGUgPSBvbGRWaWV3Q2FjaGUudXBkYXRlRXZlbnRTbmFwKG5ld0V2ZW50Q2FjaGUsIHRydWUsIHRoaXMuZmlsdGVyXy5maWx0ZXJzTm9kZXMoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRLZXkgPSBjaGFuZ2VQYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZEtleSA9PT0gJy5wcmlvcml0eScpIHtcclxuICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2FjaGUgPSB0aGlzLmZpbHRlcl8udXBkYXRlUHJpb3JpdHkob2xkVmlld0NhY2hlLmdldEV2ZW50Q2FjaGUoKS5nZXROb2RlKCksIGNoYW5nZWRTbmFwKTtcclxuICAgICAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IG9sZFZpZXdDYWNoZS51cGRhdGVFdmVudFNuYXAobmV3RXZlbnRDYWNoZSwgb2xkRXZlbnRTbmFwLmlzRnVsbHlJbml0aWFsaXplZCgpLCBvbGRFdmVudFNuYXAuaXNGaWx0ZXJlZCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZENoYW5nZVBhdGggPSBjaGFuZ2VQYXRoLnBvcEZyb250KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2xkQ2hpbGQgPSBvbGRFdmVudFNuYXAuZ2V0Tm9kZSgpLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZENoYW5nZVBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hpbGQgb3ZlcndyaXRlLCB3ZSBjYW4gcmVwbGFjZSB0aGUgY2hpbGRcclxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZCA9IGNoYW5nZWRTbmFwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IHNvdXJjZS5nZXRDb21wbGV0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGROb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkQ2hhbmdlUGF0aC5nZXRCYWNrKCkgPT09ICcucHJpb3JpdHknICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUuZ2V0Q2hpbGQoY2hpbGRDaGFuZ2VQYXRoLnBhcmVudCgpKS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBwcmlvcml0eSB1cGRhdGUgb24gYW4gZW1wdHkgbm9kZS4gSWYgdGhpcyBub2RlIGV4aXN0cyBvbiB0aGUgc2VydmVyLCB0aGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlcnZlciB3aWxsIHNlbmQgZG93biB0aGUgcHJpb3JpdHkgaW4gdGhlIHVwZGF0ZSwgc28gaWdub3JlIGZvciBub3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkID0gY2hpbGROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQgPSBjaGlsZE5vZGUudXBkYXRlQ2hpbGQoY2hpbGRDaGFuZ2VQYXRoLCBjaGFuZ2VkU25hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIGNvbXBsZXRlIGNoaWxkIG5vZGUgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkID0gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFvbGRDaGlsZC5lcXVhbHMobmV3Q2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0V2ZW50U25hcCA9IHRoaXMuZmlsdGVyXy51cGRhdGVDaGlsZChvbGRFdmVudFNuYXAuZ2V0Tm9kZSgpLCBjaGlsZEtleSwgbmV3Q2hpbGQsIGNoaWxkQ2hhbmdlUGF0aCwgc291cmNlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Vmlld0NhY2hlID0gb2xkVmlld0NhY2hlLnVwZGF0ZUV2ZW50U25hcChuZXdFdmVudFNuYXAsIG9sZEV2ZW50U25hcC5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSwgdGhpcy5maWx0ZXJfLmZpbHRlcnNOb2RlcygpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IG9sZFZpZXdDYWNoZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3Vmlld0NhY2hlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshVmlld0NhY2hlfSB2aWV3Q2FjaGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjaGlsZEtleVxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFZpZXdQcm9jZXNzb3IuY2FjaGVIYXNDaGlsZF8gPSBmdW5jdGlvbiAodmlld0NhY2hlLCBjaGlsZEtleSkge1xyXG4gICAgICAgIHJldHVybiB2aWV3Q2FjaGUuZ2V0RXZlbnRDYWNoZSgpLmlzQ29tcGxldGVGb3JDaGlsZChjaGlsZEtleSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IHZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHtJbW11dGFibGVUcmVlLjwhTm9kZT59IGNoYW5nZWRDaGlsZHJlblxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gc2VydmVyQ2FjaGVcclxuICAgICAqIEBwYXJhbSB7IUNoaWxkQ2hhbmdlQWNjdW11bGF0b3J9IGFjY3VtdWxhdG9yXHJcbiAgICAgKiBAcmV0dXJuIHshVmlld0NhY2hlfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgVmlld1Byb2Nlc3Nvci5wcm90b3R5cGUuYXBwbHlVc2VyTWVyZ2VfID0gZnVuY3Rpb24gKHZpZXdDYWNoZSwgcGF0aCwgY2hhbmdlZENoaWxkcmVuLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIGFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBIQUNLOiBJbiB0aGUgY2FzZSBvZiBhIGxpbWl0IHF1ZXJ5LCB0aGVyZSBtYXkgYmUgc29tZSBjaGFuZ2VzIHRoYXQgYnVtcCB0aGluZ3Mgb3V0IG9mIHRoZVxyXG4gICAgICAgIC8vIHdpbmRvdyBsZWF2aW5nIHJvb20gZm9yIG5ldyBpdGVtcy4gIEl0J3MgaW1wb3J0YW50IHdlIHByb2Nlc3MgdGhlc2UgY2hhbmdlcyBmaXJzdCwgc28gd2VcclxuICAgICAgICAvLyBpdGVyYXRlIHRoZSBjaGFuZ2VzIHR3aWNlLCBmaXJzdCBwcm9jZXNzaW5nIGFueSB0aGF0IGFmZmVjdCBpdGVtcyBjdXJyZW50bHkgaW4gdmlldy5cclxuICAgICAgICAvLyBUT0RPOiBJIGNvbnNpZGVyIGFuIGl0ZW0gXCJpbiB2aWV3XCIgaWYgY2FjaGVIYXNDaGlsZCBpcyB0cnVlLCB3aGljaCBjaGVja3MgYm90aCB0aGUgc2VydmVyXHJcbiAgICAgICAgLy8gYW5kIGV2ZW50IHNuYXAuICBJJ20gbm90IHN1cmUgaWYgdGhpcyB3aWxsIHJlc3VsdCBpbiBlZGdlIGNhc2VzIHdoZW4gYSBjaGlsZCBpcyBpbiBvbmUgYnV0XHJcbiAgICAgICAgLy8gbm90IHRoZSBvdGhlci5cclxuICAgICAgICB2YXIgY3VyVmlld0NhY2hlID0gdmlld0NhY2hlO1xyXG4gICAgICAgIGNoYW5nZWRDaGlsZHJlbi5mb3JlYWNoKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgd3JpdGVQYXRoID0gcGF0aC5jaGlsZChyZWxhdGl2ZVBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoVmlld1Byb2Nlc3Nvci5jYWNoZUhhc0NoaWxkXyh2aWV3Q2FjaGUsIHdyaXRlUGF0aC5nZXRGcm9udCgpKSkge1xyXG4gICAgICAgICAgICAgICAgY3VyVmlld0NhY2hlID0gX3RoaXMuYXBwbHlVc2VyT3ZlcndyaXRlXyhjdXJWaWV3Q2FjaGUsIHdyaXRlUGF0aCwgY2hpbGROb2RlLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNoYW5nZWRDaGlsZHJlbi5mb3JlYWNoKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgd3JpdGVQYXRoID0gcGF0aC5jaGlsZChyZWxhdGl2ZVBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoIVZpZXdQcm9jZXNzb3IuY2FjaGVIYXNDaGlsZF8odmlld0NhY2hlLCB3cml0ZVBhdGguZ2V0RnJvbnQoKSkpIHtcclxuICAgICAgICAgICAgICAgIGN1clZpZXdDYWNoZSA9IF90aGlzLmFwcGx5VXNlck92ZXJ3cml0ZV8oY3VyVmlld0NhY2hlLCB3cml0ZVBhdGgsIGNoaWxkTm9kZSwgd3JpdGVzQ2FjaGUsIHNlcnZlckNhY2hlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY3VyVmlld0NhY2hlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gbm9kZVxyXG4gICAgICogQHBhcmFtIHtJbW11dGFibGVUcmVlLjwhTm9kZT59IG1lcmdlXHJcbiAgICAgKiBAcmV0dXJuIHshTm9kZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFZpZXdQcm9jZXNzb3IucHJvdG90eXBlLmFwcGx5TWVyZ2VfID0gZnVuY3Rpb24gKG5vZGUsIG1lcmdlKSB7XHJcbiAgICAgICAgbWVyZ2UuZm9yZWFjaChmdW5jdGlvbiAocmVsYXRpdmVQYXRoLCBjaGlsZE5vZGUpIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUudXBkYXRlQ2hpbGQocmVsYXRpdmVQYXRoLCBjaGlsZE5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshVmlld0NhY2hlfSB2aWV3Q2FjaGVcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEBwYXJhbSB7IUltbXV0YWJsZVRyZWUuPCFOb2RlPn0gY2hhbmdlZENoaWxkcmVuXHJcbiAgICAgKiBAcGFyYW0geyFXcml0ZVRyZWVSZWZ9IHdyaXRlc0NhY2hlXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBzZXJ2ZXJDYWNoZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmaWx0ZXJTZXJ2ZXJOb2RlXHJcbiAgICAgKiBAcGFyYW0geyFDaGlsZENoYW5nZUFjY3VtdWxhdG9yfSBhY2N1bXVsYXRvclxyXG4gICAgICogQHJldHVybiB7IVZpZXdDYWNoZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFZpZXdQcm9jZXNzb3IucHJvdG90eXBlLmFwcGx5U2VydmVyTWVyZ2VfID0gZnVuY3Rpb24gKHZpZXdDYWNoZSwgcGF0aCwgY2hhbmdlZENoaWxkcmVuLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIGZpbHRlclNlcnZlck5vZGUsIGFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgY2FjaGUgeWV0LCB0aGlzIG1lcmdlIHdhcyBpbnRlbmRlZCBmb3IgYSBwcmV2aW91c2x5IGxpc3RlbiBpbiB0aGUgc2FtZSBsb2NhdGlvbi4gSWdub3JlIGl0IGFuZFxyXG4gICAgICAgIC8vIHdhaXQgZm9yIHRoZSBjb21wbGV0ZSBkYXRhIHVwZGF0ZSBjb21pbmcgc29vbi5cclxuICAgICAgICBpZiAodmlld0NhY2hlXHJcbiAgICAgICAgICAgIC5nZXRTZXJ2ZXJDYWNoZSgpXHJcbiAgICAgICAgICAgIC5nZXROb2RlKClcclxuICAgICAgICAgICAgLmlzRW1wdHkoKSAmJlxyXG4gICAgICAgICAgICAhdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuaXNGdWxseUluaXRpYWxpemVkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZpZXdDYWNoZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSEFDSzogSW4gdGhlIGNhc2Ugb2YgYSBsaW1pdCBxdWVyeSwgdGhlcmUgbWF5IGJlIHNvbWUgY2hhbmdlcyB0aGF0IGJ1bXAgdGhpbmdzIG91dCBvZiB0aGVcclxuICAgICAgICAvLyB3aW5kb3cgbGVhdmluZyByb29tIGZvciBuZXcgaXRlbXMuICBJdCdzIGltcG9ydGFudCB3ZSBwcm9jZXNzIHRoZXNlIGNoYW5nZXMgZmlyc3QsIHNvIHdlXHJcbiAgICAgICAgLy8gaXRlcmF0ZSB0aGUgY2hhbmdlcyB0d2ljZSwgZmlyc3QgcHJvY2Vzc2luZyBhbnkgdGhhdCBhZmZlY3QgaXRlbXMgY3VycmVudGx5IGluIHZpZXcuXHJcbiAgICAgICAgLy8gVE9ETzogSSBjb25zaWRlciBhbiBpdGVtIFwiaW4gdmlld1wiIGlmIGNhY2hlSGFzQ2hpbGQgaXMgdHJ1ZSwgd2hpY2ggY2hlY2tzIGJvdGggdGhlIHNlcnZlclxyXG4gICAgICAgIC8vIGFuZCBldmVudCBzbmFwLiAgSSdtIG5vdCBzdXJlIGlmIHRoaXMgd2lsbCByZXN1bHQgaW4gZWRnZSBjYXNlcyB3aGVuIGEgY2hpbGQgaXMgaW4gb25lIGJ1dFxyXG4gICAgICAgIC8vIG5vdCB0aGUgb3RoZXIuXHJcbiAgICAgICAgdmFyIGN1clZpZXdDYWNoZSA9IHZpZXdDYWNoZTtcclxuICAgICAgICB2YXIgdmlld01lcmdlVHJlZTtcclxuICAgICAgICBpZiAocGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgdmlld01lcmdlVHJlZSA9IGNoYW5nZWRDaGlsZHJlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZpZXdNZXJnZVRyZWUgPSBJbW11dGFibGVUcmVlLkVtcHR5LnNldFRyZWUocGF0aCwgY2hhbmdlZENoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNlcnZlck5vZGUgPSB2aWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKS5nZXROb2RlKCk7XHJcbiAgICAgICAgdmlld01lcmdlVHJlZS5jaGlsZHJlbi5pbm9yZGVyVHJhdmVyc2FsKGZ1bmN0aW9uIChjaGlsZEtleSwgY2hpbGRUcmVlKSB7XHJcbiAgICAgICAgICAgIGlmIChzZXJ2ZXJOb2RlLmhhc0NoaWxkKGNoaWxkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcnZlckNoaWxkID0gdmlld0NhY2hlXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldFNlcnZlckNhY2hlKClcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0Tm9kZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZCA9IF90aGlzLmFwcGx5TWVyZ2VfKHNlcnZlckNoaWxkLCBjaGlsZFRyZWUpO1xyXG4gICAgICAgICAgICAgICAgY3VyVmlld0NhY2hlID0gX3RoaXMuYXBwbHlTZXJ2ZXJPdmVyd3JpdGVfKGN1clZpZXdDYWNoZSwgbmV3IFBhdGgoY2hpbGRLZXkpLCBuZXdDaGlsZCwgd3JpdGVzQ2FjaGUsIHNlcnZlckNhY2hlLCBmaWx0ZXJTZXJ2ZXJOb2RlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB2aWV3TWVyZ2VUcmVlLmNoaWxkcmVuLmlub3JkZXJUcmF2ZXJzYWwoZnVuY3Rpb24gKGNoaWxkS2V5LCBjaGlsZE1lcmdlVHJlZSkge1xyXG4gICAgICAgICAgICB2YXIgaXNVbmtub3duRGVlcE1lcmdlID0gIXZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzQ29tcGxldGVGb3JDaGlsZChjaGlsZEtleSkgJiZcclxuICAgICAgICAgICAgICAgIGNoaWxkTWVyZ2VUcmVlLnZhbHVlID09IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghc2VydmVyTm9kZS5oYXNDaGlsZChjaGlsZEtleSkgJiYgIWlzVW5rbm93bkRlZXBNZXJnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcnZlckNoaWxkID0gdmlld0NhY2hlXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldFNlcnZlckNhY2hlKClcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0Tm9kZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZCA9IF90aGlzLmFwcGx5TWVyZ2VfKHNlcnZlckNoaWxkLCBjaGlsZE1lcmdlVHJlZSk7XHJcbiAgICAgICAgICAgICAgICBjdXJWaWV3Q2FjaGUgPSBfdGhpcy5hcHBseVNlcnZlck92ZXJ3cml0ZV8oY3VyVmlld0NhY2hlLCBuZXcgUGF0aChjaGlsZEtleSksIG5ld0NoaWxkLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIGZpbHRlclNlcnZlck5vZGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjdXJWaWV3Q2FjaGU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IHZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gYWNrUGF0aFxyXG4gICAgICogQHBhcmFtIHshSW1tdXRhYmxlVHJlZTwhYm9vbGVhbj59IGFmZmVjdGVkVHJlZVxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gY29tcGxldGVDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvcn0gYWNjdW11bGF0b3JcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBWaWV3UHJvY2Vzc29yLnByb3RvdHlwZS5hY2tVc2VyV3JpdGVfID0gZnVuY3Rpb24gKHZpZXdDYWNoZSwgYWNrUGF0aCwgYWZmZWN0ZWRUcmVlLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgYWNjdW11bGF0b3IpIHtcclxuICAgICAgICBpZiAod3JpdGVzQ2FjaGUuc2hhZG93aW5nV3JpdGUoYWNrUGF0aCkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmlld0NhY2hlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBPbmx5IGZpbHRlciBzZXJ2ZXIgbm9kZSBpZiBpdCBpcyBjdXJyZW50bHkgZmlsdGVyZWRcclxuICAgICAgICB2YXIgZmlsdGVyU2VydmVyTm9kZSA9IHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzRmlsdGVyZWQoKTtcclxuICAgICAgICAvLyBFc3NlbnRpYWxseSB3ZSdsbCBqdXN0IGdldCBvdXIgZXhpc3Rpbmcgc2VydmVyIGNhY2hlIGZvciB0aGUgYWZmZWN0ZWQgcGF0aHMgYW5kIHJlLWFwcGx5IGl0IGFzIGEgc2VydmVyIHVwZGF0ZVxyXG4gICAgICAgIC8vIG5vdyB0aGF0IGl0IHdvbid0IGJlIHNoYWRvd2VkLlxyXG4gICAgICAgIHZhciBzZXJ2ZXJDYWNoZSA9IHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpO1xyXG4gICAgICAgIGlmIChhZmZlY3RlZFRyZWUudmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGFuIG92ZXJ3cml0ZS5cclxuICAgICAgICAgICAgaWYgKChhY2tQYXRoLmlzRW1wdHkoKSAmJiBzZXJ2ZXJDYWNoZS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSkgfHxcclxuICAgICAgICAgICAgICAgIHNlcnZlckNhY2hlLmlzQ29tcGxldGVGb3JQYXRoKGFja1BhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVNlcnZlck92ZXJ3cml0ZV8odmlld0NhY2hlLCBhY2tQYXRoLCBzZXJ2ZXJDYWNoZS5nZXROb2RlKCkuZ2V0Q2hpbGQoYWNrUGF0aCksIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBmaWx0ZXJTZXJ2ZXJOb2RlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYWNrUGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBnb29meSBlZGdlIGNhc2Ugd2hlcmUgd2UgYXJlIGFja2luZyBkYXRhIGF0IHRoaXMgbG9jYXRpb24gYnV0IGRvbid0IGhhdmUgZnVsbCBkYXRhLiAgV2VcclxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBqdXN0IHJlLWFwcGx5IHdoYXRldmVyIHdlIGhhdmUgaW4gb3VyIGNhY2hlIGFzIGEgbWVyZ2UuXHJcbiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlZENoaWxkcmVuXzEgPSBJbW11dGFibGVUcmVlLkVtcHR5O1xyXG4gICAgICAgICAgICAgICAgc2VydmVyQ2FjaGUuZ2V0Tm9kZSgpLmZvckVhY2hDaGlsZChLRVlfSU5ERVgsIGZ1bmN0aW9uIChuYW1lLCBub2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZENoaWxkcmVuXzEgPSBjaGFuZ2VkQ2hpbGRyZW5fMS5zZXQobmV3IFBhdGgobmFtZSksIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVNlcnZlck1lcmdlXyh2aWV3Q2FjaGUsIGFja1BhdGgsIGNoYW5nZWRDaGlsZHJlbl8xLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgZmlsdGVyU2VydmVyTm9kZSwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdDYWNoZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIG1lcmdlLlxyXG4gICAgICAgICAgICB2YXIgY2hhbmdlZENoaWxkcmVuXzIgPSBJbW11dGFibGVUcmVlLkVtcHR5O1xyXG4gICAgICAgICAgICBhZmZlY3RlZFRyZWUuZm9yZWFjaChmdW5jdGlvbiAobWVyZ2VQYXRoLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcnZlckNhY2hlUGF0aCA9IGFja1BhdGguY2hpbGQobWVyZ2VQYXRoKTtcclxuICAgICAgICAgICAgICAgIGlmIChzZXJ2ZXJDYWNoZS5pc0NvbXBsZXRlRm9yUGF0aChzZXJ2ZXJDYWNoZVBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZENoaWxkcmVuXzIgPSBjaGFuZ2VkQ2hpbGRyZW5fMi5zZXQobWVyZ2VQYXRoLCBzZXJ2ZXJDYWNoZS5nZXROb2RlKCkuZ2V0Q2hpbGQoc2VydmVyQ2FjaGVQYXRoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVNlcnZlck1lcmdlXyh2aWV3Q2FjaGUsIGFja1BhdGgsIGNoYW5nZWRDaGlsZHJlbl8yLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgZmlsdGVyU2VydmVyTm9kZSwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVZpZXdDYWNoZX0gdmlld0NhY2hlXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0geyFXcml0ZVRyZWVSZWZ9IHdyaXRlc0NhY2hlXHJcbiAgICAgKiBAcGFyYW0geyFDaGlsZENoYW5nZUFjY3VtdWxhdG9yfSBhY2N1bXVsYXRvclxyXG4gICAgICogQHJldHVybiB7IVZpZXdDYWNoZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFZpZXdQcm9jZXNzb3IucHJvdG90eXBlLmxpc3RlbkNvbXBsZXRlXyA9IGZ1bmN0aW9uICh2aWV3Q2FjaGUsIHBhdGgsIHdyaXRlc0NhY2hlLCBhY2N1bXVsYXRvcikge1xyXG4gICAgICAgIHZhciBvbGRTZXJ2ZXJOb2RlID0gdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCk7XHJcbiAgICAgICAgdmFyIG5ld1ZpZXdDYWNoZSA9IHZpZXdDYWNoZS51cGRhdGVTZXJ2ZXJTbmFwKG9sZFNlcnZlck5vZGUuZ2V0Tm9kZSgpLCBvbGRTZXJ2ZXJOb2RlLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8IHBhdGguaXNFbXB0eSgpLCBvbGRTZXJ2ZXJOb2RlLmlzRmlsdGVyZWQoKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVFdmVudENhY2hlQWZ0ZXJTZXJ2ZXJFdmVudF8obmV3Vmlld0NhY2hlLCBwYXRoLCB3cml0ZXNDYWNoZSwgTk9fQ09NUExFVEVfQ0hJTERfU09VUkNFLCBhY2N1bXVsYXRvcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IHZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gY29tcGxldGVTZXJ2ZXJDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvcn0gYWNjdW11bGF0b3JcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBWaWV3UHJvY2Vzc29yLnByb3RvdHlwZS5yZXZlcnRVc2VyV3JpdGVfID0gZnVuY3Rpb24gKHZpZXdDYWNoZSwgcGF0aCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlU2VydmVyQ2FjaGUsIGFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgdmFyIGNvbXBsZXRlO1xyXG4gICAgICAgIGlmICh3cml0ZXNDYWNoZS5zaGFkb3dpbmdXcml0ZShwYXRoKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2aWV3Q2FjaGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgc291cmNlID0gbmV3IFdyaXRlVHJlZUNvbXBsZXRlQ2hpbGRTb3VyY2Uod3JpdGVzQ2FjaGUsIHZpZXdDYWNoZSwgY29tcGxldGVTZXJ2ZXJDYWNoZSk7XHJcbiAgICAgICAgICAgIHZhciBvbGRFdmVudENhY2hlID0gdmlld0NhY2hlLmdldEV2ZW50Q2FjaGUoKS5nZXROb2RlKCk7XHJcbiAgICAgICAgICAgIHZhciBuZXdFdmVudENhY2hlID0gdm9pZCAwO1xyXG4gICAgICAgICAgICBpZiAocGF0aC5pc0VtcHR5KCkgfHwgcGF0aC5nZXRGcm9udCgpID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld05vZGUgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuaXNGdWxseUluaXRpYWxpemVkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gd3JpdGVzQ2FjaGUuY2FsY0NvbXBsZXRlRXZlbnRDYWNoZSh2aWV3Q2FjaGUuZ2V0Q29tcGxldGVTZXJ2ZXJTbmFwKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZlckNoaWxkcmVuID0gdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuZ2V0Tm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0KHNlcnZlckNoaWxkcmVuIGluc3RhbmNlb2YgQ2hpbGRyZW5Ob2RlLCAnc2VydmVyQ2hpbGRyZW4gd291bGQgYmUgY29tcGxldGUgaWYgbGVhZiBub2RlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Tm9kZSA9IHdyaXRlc0NhY2hlLmNhbGNDb21wbGV0ZUV2ZW50Q2hpbGRyZW4oc2VydmVyQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbmV3Tm9kZSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdGhpcy5maWx0ZXJfLnVwZGF0ZUZ1bGxOb2RlKG9sZEV2ZW50Q2FjaGUsIG5ld05vZGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZEtleSA9IHBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZCA9IHdyaXRlc0NhY2hlLmNhbGNDb21wbGV0ZUNoaWxkKGNoaWxkS2V5LCB2aWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3Q2hpbGQgPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzQ29tcGxldGVGb3JDaGlsZChjaGlsZEtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZCA9IG9sZEV2ZW50Q2FjaGUuZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGRLZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0NoaWxkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdGhpcy5maWx0ZXJfLnVwZGF0ZUNoaWxkKG9sZEV2ZW50Q2FjaGUsIGNoaWxkS2V5LCBuZXdDaGlsZCwgcGF0aC5wb3BGcm9udCgpLCBzb3VyY2UsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZpZXdDYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXRFdmVudENhY2hlKClcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0Tm9kZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmhhc0NoaWxkKGNoaWxkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIGNvbXBsZXRlIGNoaWxkIGF2YWlsYWJsZSwgZGVsZXRlIHRoZSBleGlzdGluZyBvbmUsIGlmIGFueVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2FjaGUgPSB0aGlzLmZpbHRlcl8udXBkYXRlQ2hpbGQob2xkRXZlbnRDYWNoZSwgY2hpbGRLZXksIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFLCBwYXRoLnBvcEZyb250KCksIHNvdXJjZSwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IG9sZEV2ZW50Q2FjaGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3RXZlbnRDYWNoZS5pc0VtcHR5KCkgJiZcclxuICAgICAgICAgICAgICAgICAgICB2aWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG1pZ2h0IGhhdmUgcmV2ZXJ0ZWQgYWxsIGNoaWxkIHdyaXRlcy4gTWF5YmUgdGhlIG9sZCBldmVudCB3YXMgYSBsZWFmIG5vZGVcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IHdyaXRlc0NhY2hlLmNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUodmlld0NhY2hlLmdldENvbXBsZXRlU2VydmVyU25hcCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGxldGUuaXNMZWFmTm9kZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2FjaGUgPSB0aGlzLmZpbHRlcl8udXBkYXRlRnVsbE5vZGUobmV3RXZlbnRDYWNoZSwgY29tcGxldGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29tcGxldGUgPVxyXG4gICAgICAgICAgICAgICAgdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuaXNGdWxseUluaXRpYWxpemVkKCkgfHxcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZXNDYWNoZS5zaGFkb3dpbmdXcml0ZShQYXRoLkVtcHR5KSAhPSBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gdmlld0NhY2hlLnVwZGF0ZUV2ZW50U25hcChuZXdFdmVudENhY2hlLCBjb21wbGV0ZSwgdGhpcy5maWx0ZXJfLmZpbHRlcnNOb2RlcygpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZpZXdQcm9jZXNzb3I7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQW4gRXZlbnRHZW5lcmF0b3IgaXMgdXNlZCB0byBjb252ZXJ0IFwicmF3XCIgY2hhbmdlcyAoQ2hhbmdlKSBhcyBjb21wdXRlZCBieSB0aGVcclxuICogQ2FjaGVEaWZmZXIgaW50byBhY3R1YWwgZXZlbnRzIChFdmVudCkgdGhhdCBjYW4gYmUgcmFpc2VkLiAgU2VlIGdlbmVyYXRlRXZlbnRzRm9yQ2hhbmdlcygpXHJcbiAqIGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBFdmVudEdlbmVyYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5fSBxdWVyeV9cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRXZlbnRHZW5lcmF0b3IocXVlcnlfKSB7XHJcbiAgICAgICAgdGhpcy5xdWVyeV8gPSBxdWVyeV87XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAdHlwZSB7IUluZGV4fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaW5kZXhfID0gdGhpcy5xdWVyeV8uZ2V0UXVlcnlQYXJhbXMoKS5nZXRJbmRleCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIHNldCBvZiByYXcgY2hhbmdlcyAobm8gbW92ZWQgZXZlbnRzIGFuZCBwcmV2TmFtZSBub3Qgc3BlY2lmaWVkIHlldCksIGFuZCBhIHNldCBvZlxyXG4gICAgICogRXZlbnRSZWdpc3RyYXRpb25zIHRoYXQgc2hvdWxkIGJlIG5vdGlmaWVkIG9mIHRoZXNlIGNoYW5nZXMsIGdlbmVyYXRlIHRoZSBhY3R1YWwgZXZlbnRzIHRvIGJlIHJhaXNlZC5cclxuICAgICAqXHJcbiAgICAgKiBOb3RlczpcclxuICAgICAqICAtIGNoaWxkX21vdmVkIGV2ZW50cyB3aWxsIGJlIHN5bnRoZXNpemVkIGF0IHRoaXMgdGltZSBmb3IgYW55IGNoaWxkX2NoYW5nZWQgZXZlbnRzIHRoYXQgYWZmZWN0XHJcbiAgICAgKiAgICBvdXIgaW5kZXguXHJcbiAgICAgKiAgLSBwcmV2TmFtZSB3aWxsIGJlIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIGluZGV4IG9yZGVyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IUFycmF5LjwhQ2hhbmdlPn0gY2hhbmdlc1xyXG4gICAgICogQHBhcmFtIHshTm9kZX0gZXZlbnRDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPCFFdmVudFJlZ2lzdHJhdGlvbj59IGV2ZW50UmVnaXN0cmF0aW9uc1xyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fVxyXG4gICAgICovXHJcbiAgICBFdmVudEdlbmVyYXRvci5wcm90b3R5cGUuZ2VuZXJhdGVFdmVudHNGb3JDaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMsIGV2ZW50Q2FjaGUsIGV2ZW50UmVnaXN0cmF0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IFtdO1xyXG4gICAgICAgIHZhciBtb3ZlcyA9IFtdO1xyXG4gICAgICAgIGNoYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hhbmdlKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlLkNISUxEX0NIQU5HRUQgJiZcclxuICAgICAgICAgICAgICAgIF90aGlzLmluZGV4Xy5pbmRleGVkVmFsdWVDaGFuZ2VkKGNoYW5nZS5vbGRTbmFwLCBjaGFuZ2Uuc25hcHNob3ROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgbW92ZXMucHVzaChDaGFuZ2UuY2hpbGRNb3ZlZENoYW5nZShjaGFuZ2UuY2hpbGROYW1lLCBjaGFuZ2Uuc25hcHNob3ROb2RlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlRXZlbnRzRm9yVHlwZV8oZXZlbnRzLCBDaGFuZ2UuQ0hJTERfUkVNT1ZFRCwgY2hhbmdlcywgZXZlbnRSZWdpc3RyYXRpb25zLCBldmVudENhY2hlKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlRXZlbnRzRm9yVHlwZV8oZXZlbnRzLCBDaGFuZ2UuQ0hJTERfQURERUQsIGNoYW5nZXMsIGV2ZW50UmVnaXN0cmF0aW9ucywgZXZlbnRDYWNoZSk7XHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUV2ZW50c0ZvclR5cGVfKGV2ZW50cywgQ2hhbmdlLkNISUxEX01PVkVELCBtb3ZlcywgZXZlbnRSZWdpc3RyYXRpb25zLCBldmVudENhY2hlKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlRXZlbnRzRm9yVHlwZV8oZXZlbnRzLCBDaGFuZ2UuQ0hJTERfQ0hBTkdFRCwgY2hhbmdlcywgZXZlbnRSZWdpc3RyYXRpb25zLCBldmVudENhY2hlKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlRXZlbnRzRm9yVHlwZV8oZXZlbnRzLCBDaGFuZ2UuVkFMVUUsIGNoYW5nZXMsIGV2ZW50UmVnaXN0cmF0aW9ucywgZXZlbnRDYWNoZSk7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50cztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGNoYW5nZXMgb2YgYSBzaW5nbGUgY2hhbmdlIHR5cGUsIGdlbmVyYXRlIHRoZSBjb3JyZXNwb25kaW5nIGV2ZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48IUV2ZW50Pn0gZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGV2ZW50VHlwZVxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPCFDaGFuZ2U+fSBjaGFuZ2VzXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48IUV2ZW50UmVnaXN0cmF0aW9uPn0gcmVnaXN0cmF0aW9uc1xyXG4gICAgICogQHBhcmFtIHshTm9kZX0gZXZlbnRDYWNoZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgRXZlbnRHZW5lcmF0b3IucHJvdG90eXBlLmdlbmVyYXRlRXZlbnRzRm9yVHlwZV8gPSBmdW5jdGlvbiAoZXZlbnRzLCBldmVudFR5cGUsIGNoYW5nZXMsIHJlZ2lzdHJhdGlvbnMsIGV2ZW50Q2FjaGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBmaWx0ZXJlZENoYW5nZXMgPSBjaGFuZ2VzLmZpbHRlcihmdW5jdGlvbiAoY2hhbmdlKSB7IHJldHVybiBjaGFuZ2UudHlwZSA9PT0gZXZlbnRUeXBlOyB9KTtcclxuICAgICAgICBmaWx0ZXJlZENoYW5nZXMuc29ydCh0aGlzLmNvbXBhcmVDaGFuZ2VzXy5iaW5kKHRoaXMpKTtcclxuICAgICAgICBmaWx0ZXJlZENoYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbGl6ZWRDaGFuZ2UgPSBfdGhpcy5tYXRlcmlhbGl6ZVNpbmdsZUNoYW5nZV8oY2hhbmdlLCBldmVudENhY2hlKTtcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChyZWdpc3RyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZWdpc3RyYXRpb24ucmVzcG9uZHNUbyhjaGFuZ2UudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudHMucHVzaChyZWdpc3RyYXRpb24uY3JlYXRlRXZlbnQobWF0ZXJpYWxpemVkQ2hhbmdlLCBfdGhpcy5xdWVyeV8pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFDaGFuZ2V9IGNoYW5nZVxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gZXZlbnRDYWNoZVxyXG4gICAgICogQHJldHVybiB7IUNoYW5nZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIEV2ZW50R2VuZXJhdG9yLnByb3RvdHlwZS5tYXRlcmlhbGl6ZVNpbmdsZUNoYW5nZV8gPSBmdW5jdGlvbiAoY2hhbmdlLCBldmVudENhY2hlKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZS50eXBlID09PSAndmFsdWUnIHx8IGNoYW5nZS50eXBlID09PSAnY2hpbGRfcmVtb3ZlZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNoYW5nZS5wcmV2TmFtZSA9IGV2ZW50Q2FjaGUuZ2V0UHJlZGVjZXNzb3JDaGlsZE5hbWUoXHJcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7IXN0cmluZ30gKi9cclxuICAgICAgICAgICAgY2hhbmdlLmNoaWxkTmFtZSwgY2hhbmdlLnNuYXBzaG90Tm9kZSwgdGhpcy5pbmRleF8pO1xyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUNoYW5nZX0gYVxyXG4gICAgICogQHBhcmFtIHshQ2hhbmdlfSBiXHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBFdmVudEdlbmVyYXRvci5wcm90b3R5cGUuY29tcGFyZUNoYW5nZXNfID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5jaGlsZE5hbWUgPT0gbnVsbCB8fCBiLmNoaWxkTmFtZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IHV0aWwuYXNzZXJ0aW9uRXJyb3IoJ1Nob3VsZCBvbmx5IGNvbXBhcmUgY2hpbGRfIGV2ZW50cy4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFXcmFwcGVkID0gbmV3IE5hbWVkTm9kZShhLmNoaWxkTmFtZSwgYS5zbmFwc2hvdE5vZGUpO1xyXG4gICAgICAgIHZhciBiV3JhcHBlZCA9IG5ldyBOYW1lZE5vZGUoYi5jaGlsZE5hbWUsIGIuc25hcHNob3ROb2RlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleF8uY29tcGFyZShhV3JhcHBlZCwgYldyYXBwZWQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFdmVudEdlbmVyYXRvcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBIHZpZXcgcmVwcmVzZW50cyBhIHNwZWNpZmljIGxvY2F0aW9uIGFuZCBxdWVyeSB0aGF0IGhhcyAxIG9yIG1vcmUgZXZlbnQgcmVnaXN0cmF0aW9ucy5cclxuICpcclxuICogSXQgZG9lcyBzZXZlcmFsIHRoaW5nczpcclxuICogIC0gTWFpbnRhaW5zIHRoZSBsaXN0IG9mIGV2ZW50IHJlZ2lzdHJhdGlvbnMgZm9yIHRoaXMgbG9jYXRpb24vcXVlcnkuXHJcbiAqICAtIE1haW50YWlucyBhIGNhY2hlIG9mIHRoZSBkYXRhIHZpc2libGUgZm9yIHRoaXMgbG9jYXRpb24vcXVlcnkuXHJcbiAqICAtIEFwcGxpZXMgbmV3IG9wZXJhdGlvbnMgKHZpYSBhcHBseU9wZXJhdGlvbiksIHVwZGF0ZXMgdGhlIGNhY2hlLCBhbmQgYmFzZWQgb24gdGhlIGV2ZW50XHJcbiAqICAgIHJlZ2lzdHJhdGlvbnMgcmV0dXJucyB0aGUgc2V0IG9mIGV2ZW50cyB0byBiZSByYWlzZWQuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFZpZXcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlfXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IGluaXRpYWxWaWV3Q2FjaGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVmlldyhxdWVyeV8sIGluaXRpYWxWaWV3Q2FjaGUpIHtcclxuICAgICAgICB0aGlzLnF1ZXJ5XyA9IHF1ZXJ5XztcclxuICAgICAgICB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uc18gPSBbXTtcclxuICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5xdWVyeV8uZ2V0UXVlcnlQYXJhbXMoKTtcclxuICAgICAgICB2YXIgaW5kZXhGaWx0ZXIgPSBuZXcgSW5kZXhlZEZpbHRlcihwYXJhbXMuZ2V0SW5kZXgoKSk7XHJcbiAgICAgICAgdmFyIGZpbHRlciA9IHBhcmFtcy5nZXROb2RlRmlsdGVyKCk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge1ZpZXdQcm9jZXNzb3J9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnByb2Nlc3Nvcl8gPSBuZXcgVmlld1Byb2Nlc3NvcihmaWx0ZXIpO1xyXG4gICAgICAgIHZhciBpbml0aWFsU2VydmVyQ2FjaGUgPSBpbml0aWFsVmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCk7XHJcbiAgICAgICAgdmFyIGluaXRpYWxFdmVudENhY2hlID0gaW5pdGlhbFZpZXdDYWNoZS5nZXRFdmVudENhY2hlKCk7XHJcbiAgICAgICAgLy8gRG9uJ3QgZmlsdGVyIHNlcnZlciBub2RlIHdpdGggb3RoZXIgZmlsdGVyIHRoYW4gaW5kZXgsIHdhaXQgZm9yIHRhZ2dlZCBsaXN0ZW5cclxuICAgICAgICB2YXIgc2VydmVyU25hcCA9IGluZGV4RmlsdGVyLnVwZGF0ZUZ1bGxOb2RlKENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFLCBpbml0aWFsU2VydmVyQ2FjaGUuZ2V0Tm9kZSgpLCBudWxsKTtcclxuICAgICAgICB2YXIgZXZlbnRTbmFwID0gZmlsdGVyLnVwZGF0ZUZ1bGxOb2RlKENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFLCBpbml0aWFsRXZlbnRDYWNoZS5nZXROb2RlKCksIG51bGwpO1xyXG4gICAgICAgIHZhciBuZXdTZXJ2ZXJDYWNoZSA9IG5ldyBDYWNoZU5vZGUoc2VydmVyU25hcCwgaW5pdGlhbFNlcnZlckNhY2hlLmlzRnVsbHlJbml0aWFsaXplZCgpLCBpbmRleEZpbHRlci5maWx0ZXJzTm9kZXMoKSk7XHJcbiAgICAgICAgdmFyIG5ld0V2ZW50Q2FjaGUgPSBuZXcgQ2FjaGVOb2RlKGV2ZW50U25hcCwgaW5pdGlhbEV2ZW50Q2FjaGUuaXNGdWxseUluaXRpYWxpemVkKCksIGZpbHRlci5maWx0ZXJzTm9kZXMoKSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUgeyFWaWV3Q2FjaGV9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnZpZXdDYWNoZV8gPSBuZXcgVmlld0NhY2hlKG5ld0V2ZW50Q2FjaGUsIG5ld1NlcnZlckNhY2hlKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7IUV2ZW50R2VuZXJhdG9yfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5ldmVudEdlbmVyYXRvcl8gPSBuZXcgRXZlbnRHZW5lcmF0b3IodGhpcy5xdWVyeV8pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFZpZXcucHJvdG90eXBlLmdldFF1ZXJ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5XztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfVxyXG4gICAgICovXHJcbiAgICBWaWV3LnByb3RvdHlwZS5nZXRTZXJ2ZXJDYWNoZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWV3Q2FjaGVfLmdldFNlcnZlckNhY2hlKCkuZ2V0Tm9kZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFZpZXcucHJvdG90eXBlLmdldENvbXBsZXRlU2VydmVyQ2FjaGUgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHZhciBjYWNoZSA9IHRoaXMudmlld0NhY2hlXy5nZXRDb21wbGV0ZVNlcnZlclNuYXAoKTtcclxuICAgICAgICBpZiAoY2FjaGUpIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhpcyBpc24ndCBhIFwibG9hZHNBbGxEYXRhXCIgdmlldywgdGhlbiBjYWNoZSBpc24ndCBhY3R1YWxseSBhIGNvbXBsZXRlIGNhY2hlIGFuZFxyXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHNlZSBpZiBpdCBjb250YWlucyB0aGUgY2hpbGQgd2UncmUgaW50ZXJlc3RlZCBpbi5cclxuICAgICAgICAgICAgaWYgKHRoaXMucXVlcnlfLmdldFF1ZXJ5UGFyYW1zKCkubG9hZHNBbGxEYXRhKCkgfHxcclxuICAgICAgICAgICAgICAgICghcGF0aC5pc0VtcHR5KCkgJiYgIWNhY2hlLmdldEltbWVkaWF0ZUNoaWxkKHBhdGguZ2V0RnJvbnQoKSkuaXNFbXB0eSgpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLmdldENoaWxkKHBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgVmlldy5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ldmVudFJlZ2lzdHJhdGlvbnNfLmxlbmd0aCA9PT0gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUV2ZW50UmVnaXN0cmF0aW9ufSBldmVudFJlZ2lzdHJhdGlvblxyXG4gICAgICovXHJcbiAgICBWaWV3LnByb3RvdHlwZS5hZGRFdmVudFJlZ2lzdHJhdGlvbiA9IGZ1bmN0aW9uIChldmVudFJlZ2lzdHJhdGlvbikge1xyXG4gICAgICAgIHRoaXMuZXZlbnRSZWdpc3RyYXRpb25zXy5wdXNoKGV2ZW50UmVnaXN0cmF0aW9uKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7P0V2ZW50UmVnaXN0cmF0aW9ufSBldmVudFJlZ2lzdHJhdGlvbiBJZiBudWxsLCByZW1vdmUgYWxsIGNhbGxiYWNrcy5cclxuICAgICAqIEBwYXJhbSB7RXJyb3I9fSBjYW5jZWxFcnJvciBJZiBhIGNhbmNlbEVycm9yIGlzIHByb3ZpZGVkLCBhcHByb3ByaWF0ZSBjYW5jZWwgZXZlbnRzIHdpbGwgYmUgcmV0dXJuZWQuXHJcbiAgICAgKiBAcmV0dXJuIHshQXJyYXkuPCFFdmVudD59IENhbmNlbCBldmVudHMsIGlmIGNhbmNlbEVycm9yIHdhcyBwcm92aWRlZC5cclxuICAgICAqL1xyXG4gICAgVmlldy5wcm90b3R5cGUucmVtb3ZlRXZlbnRSZWdpc3RyYXRpb24gPSBmdW5jdGlvbiAoZXZlbnRSZWdpc3RyYXRpb24sIGNhbmNlbEVycm9yKSB7XHJcbiAgICAgICAgdmFyIGNhbmNlbEV2ZW50cyA9IFtdO1xyXG4gICAgICAgIGlmIChjYW5jZWxFcnJvcikge1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydChldmVudFJlZ2lzdHJhdGlvbiA9PSBudWxsLCAnQSBjYW5jZWwgc2hvdWxkIGNhbmNlbCBhbGwgZXZlbnQgcmVnaXN0cmF0aW9ucy4nKTtcclxuICAgICAgICAgICAgdmFyIHBhdGhfMSA9IHRoaXMucXVlcnlfLnBhdGg7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRSZWdpc3RyYXRpb25zXy5mb3JFYWNoKGZ1bmN0aW9uIChyZWdpc3RyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbEVycm9yIC8qKiBAdHlwZSB7IUVycm9yfSAqLyA9IGNhbmNlbEVycm9yO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1heWJlRXZlbnQgPSByZWdpc3RyYXRpb24uY3JlYXRlQ2FuY2VsRXZlbnQoY2FuY2VsRXJyb3IsIHBhdGhfMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF5YmVFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEV2ZW50cy5wdXNoKG1heWJlRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV2ZW50UmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uc18ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZyA9IHRoaXMuZXZlbnRSZWdpc3RyYXRpb25zX1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghZXhpc3RpbmcubWF0Y2hlcyhldmVudFJlZ2lzdHJhdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1haW5pbmcucHVzaChleGlzdGluZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudFJlZ2lzdHJhdGlvbi5oYXNBbnlDYWxsYmFjaygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UncmUgcmVtb3ZpbmcganVzdCB0aGlzIG9uZVxyXG4gICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZyA9IHJlbWFpbmluZy5jb25jYXQodGhpcy5ldmVudFJlZ2lzdHJhdGlvbnNfLnNsaWNlKGkgKyAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5ldmVudFJlZ2lzdHJhdGlvbnNfID0gcmVtYWluaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudFJlZ2lzdHJhdGlvbnNfID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjYW5jZWxFdmVudHM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaWVzIHRoZSBnaXZlbiBPcGVyYXRpb24sIHVwZGF0ZXMgb3VyIGNhY2hlLCBhbmQgcmV0dXJucyB0aGUgYXBwcm9wcmlhdGUgZXZlbnRzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IU9wZXJhdGlvbn0gb3BlcmF0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFXcml0ZVRyZWVSZWZ9IHdyaXRlc0NhY2hlXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBjb21wbGV0ZVNlcnZlckNhY2hlXHJcbiAgICAgKiBAcmV0dXJuIHshQXJyYXkuPCFFdmVudD59XHJcbiAgICAgKi9cclxuICAgIFZpZXcucHJvdG90eXBlLmFwcGx5T3BlcmF0aW9uID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlU2VydmVyQ2FjaGUpIHtcclxuICAgICAgICBpZiAob3BlcmF0aW9uLnR5cGUgPT09IE9wZXJhdGlvblR5cGUuTUVSR0UgJiZcclxuICAgICAgICAgICAgb3BlcmF0aW9uLnNvdXJjZS5xdWVyeUlkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0KHRoaXMudmlld0NhY2hlXy5nZXRDb21wbGV0ZVNlcnZlclNuYXAoKSwgJ1dlIHNob3VsZCBhbHdheXMgaGF2ZSBhIGZ1bGwgY2FjaGUgYmVmb3JlIGhhbmRsaW5nIG1lcmdlcycpO1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydCh0aGlzLnZpZXdDYWNoZV8uZ2V0Q29tcGxldGVFdmVudFNuYXAoKSwgJ01pc3NpbmcgZXZlbnQgY2FjaGUsIGV2ZW4gdGhvdWdoIHdlIGhhdmUgYSBzZXJ2ZXIgY2FjaGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9sZFZpZXdDYWNoZSA9IHRoaXMudmlld0NhY2hlXztcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wcm9jZXNzb3JfLmFwcGx5T3BlcmF0aW9uKG9sZFZpZXdDYWNoZSwgb3BlcmF0aW9uLCB3cml0ZXNDYWNoZSwgY29tcGxldGVTZXJ2ZXJDYWNoZSk7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzb3JfLmFzc2VydEluZGV4ZWQocmVzdWx0LnZpZXdDYWNoZSk7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQocmVzdWx0LnZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8XHJcbiAgICAgICAgICAgICFvbGRWaWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSwgJ09uY2UgYSBzZXJ2ZXIgc25hcCBpcyBjb21wbGV0ZSwgaXQgc2hvdWxkIG5ldmVyIGdvIGJhY2snKTtcclxuICAgICAgICB0aGlzLnZpZXdDYWNoZV8gPSByZXN1bHQudmlld0NhY2hlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlRXZlbnRzRm9yQ2hhbmdlc18ocmVzdWx0LmNoYW5nZXMsIHJlc3VsdC52aWV3Q2FjaGUuZ2V0RXZlbnRDYWNoZSgpLmdldE5vZGUoKSwgbnVsbCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFFdmVudFJlZ2lzdHJhdGlvbn0gcmVnaXN0cmF0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHshQXJyYXkuPCFFdmVudD59XHJcbiAgICAgKi9cclxuICAgIFZpZXcucHJvdG90eXBlLmdldEluaXRpYWxFdmVudHMgPSBmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50U25hcCA9IHRoaXMudmlld0NhY2hlXy5nZXRFdmVudENhY2hlKCk7XHJcbiAgICAgICAgdmFyIGluaXRpYWxDaGFuZ2VzID0gW107XHJcbiAgICAgICAgaWYgKCFldmVudFNuYXAuZ2V0Tm9kZSgpLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgICAgICB2YXIgZXZlbnROb2RlID0gZXZlbnRTbmFwLmdldE5vZGUoKTtcclxuICAgICAgICAgICAgZXZlbnROb2RlLmZvckVhY2hDaGlsZChQUklPUklUWV9JTkRFWCwgZnVuY3Rpb24gKGtleSwgY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBpbml0aWFsQ2hhbmdlcy5wdXNoKENoYW5nZS5jaGlsZEFkZGVkQ2hhbmdlKGtleSwgY2hpbGROb2RlKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXZlbnRTbmFwLmlzRnVsbHlJbml0aWFsaXplZCgpKSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxDaGFuZ2VzLnB1c2goQ2hhbmdlLnZhbHVlQ2hhbmdlKGV2ZW50U25hcC5nZXROb2RlKCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVFdmVudHNGb3JDaGFuZ2VzXyhpbml0aWFsQ2hhbmdlcywgZXZlbnRTbmFwLmdldE5vZGUoKSwgcmVnaXN0cmF0aW9uKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48IUNoYW5nZT59IGNoYW5nZXNcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IGV2ZW50Q2FjaGVcclxuICAgICAqIEBwYXJhbSB7RXZlbnRSZWdpc3RyYXRpb249fSBldmVudFJlZ2lzdHJhdGlvblxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fVxyXG4gICAgICovXHJcbiAgICBWaWV3LnByb3RvdHlwZS5nZW5lcmF0ZUV2ZW50c0ZvckNoYW5nZXNfID0gZnVuY3Rpb24gKGNoYW5nZXMsIGV2ZW50Q2FjaGUsIGV2ZW50UmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIHJlZ2lzdHJhdGlvbnMgPSBldmVudFJlZ2lzdHJhdGlvblxyXG4gICAgICAgICAgICA/IFtldmVudFJlZ2lzdHJhdGlvbl1cclxuICAgICAgICAgICAgOiB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uc187XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRHZW5lcmF0b3JfLmdlbmVyYXRlRXZlbnRzRm9yQ2hhbmdlcyhjaGFuZ2VzLCBldmVudENhY2hlLCByZWdpc3RyYXRpb25zKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVmlldztcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfX3JlZmVyZW5jZUNvbnN0cnVjdG9yJDE7XHJcbi8qKlxyXG4gKiBTeW5jUG9pbnQgcmVwcmVzZW50cyBhIHNpbmdsZSBsb2NhdGlvbiBpbiBhIFN5bmNUcmVlIHdpdGggMSBvciBtb3JlIGV2ZW50IHJlZ2lzdHJhdGlvbnMsIG1lYW5pbmcgd2UgbmVlZCB0b1xyXG4gKiBtYWludGFpbiAxIG9yIG1vcmUgVmlld3MgYXQgdGhpcyBsb2NhdGlvbiB0byBjYWNoZSBzZXJ2ZXIgZGF0YSBhbmQgcmFpc2UgYXBwcm9wcmlhdGUgZXZlbnRzIGZvciBzZXJ2ZXIgY2hhbmdlc1xyXG4gKiBhbmQgdXNlciB3cml0ZXMgKHNldCwgdHJhbnNhY3Rpb24sIHVwZGF0ZSkuXHJcbiAqXHJcbiAqIEl0J3MgcmVzcG9uc2libGUgZm9yOlxyXG4gKiAgLSBNYWludGFpbmluZyB0aGUgc2V0IG9mIDEgb3IgbW9yZSB2aWV3cyBuZWNlc3NhcnkgYXQgdGhpcyBsb2NhdGlvbiAoYSBTeW5jUG9pbnQgd2l0aCAwIHZpZXdzIHNob3VsZCBiZSByZW1vdmVkKS5cclxuICogIC0gUHJveHlpbmcgdXNlciAvIHNlcnZlciBvcGVyYXRpb25zIHRvIHRoZSB2aWV3cyBhcyBhcHByb3ByaWF0ZSAoaS5lLiBhcHBseVNlcnZlck92ZXJ3cml0ZSxcclxuICogICAgYXBwbHlVc2VyT3ZlcndyaXRlLCBldGMuKVxyXG4gKi9cclxudmFyIFN5bmNQb2ludCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN5bmNQb2ludCgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgVmlld3MgYmVpbmcgdHJhY2tlZCBhdCB0aGlzIGxvY2F0aW9uIGluIHRoZSB0cmVlLCBzdG9yZWQgYXMgYSBtYXAgd2hlcmUgdGhlIGtleSBpcyBhXHJcbiAgICAgICAgICogcXVlcnlJZCBhbmQgdGhlIHZhbHVlIGlzIHRoZSBWaWV3IGZvciB0aGF0IHF1ZXJ5LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogTk9URTogVGhpcyBsaXN0IHdpbGwgYmUgcXVpdGUgc21hbGwgKHVzdWFsbHkgMSwgYnV0IHBlcmhhcHMgMiBvciAzOyBhbnkgbW9yZSBpcyBhbiBvZGQgdXNlIGNhc2UpLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUgeyFPYmplY3QuPCFzdHJpbmcsICFWaWV3Pn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudmlld3NfID0ge307XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3luY1BvaW50LCBcIl9fcmVmZXJlbmNlQ29uc3RydWN0b3JcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydChfX3JlZmVyZW5jZUNvbnN0cnVjdG9yJDEsICdSZWZlcmVuY2UudHMgaGFzIG5vdCBiZWVuIGxvYWRlZCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gX19yZWZlcmVuY2VDb25zdHJ1Y3RvciQxO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0KCFfX3JlZmVyZW5jZUNvbnN0cnVjdG9yJDEsICdfX3JlZmVyZW5jZUNvbnN0cnVjdG9yIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCcpO1xyXG4gICAgICAgICAgICBfX3JlZmVyZW5jZUNvbnN0cnVjdG9yJDEgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFN5bmNQb2ludC5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdXRpbC5pc0VtcHR5KHRoaXMudmlld3NfKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFPcGVyYXRpb259IG9wZXJhdGlvblxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gb3B0Q29tcGxldGVTZXJ2ZXJDYWNoZVxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fVxyXG4gICAgICovXHJcbiAgICBTeW5jUG9pbnQucHJvdG90eXBlLmFwcGx5T3BlcmF0aW9uID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgd3JpdGVzQ2FjaGUsIG9wdENvbXBsZXRlU2VydmVyQ2FjaGUpIHtcclxuICAgICAgICB2YXIgcXVlcnlJZCA9IG9wZXJhdGlvbi5zb3VyY2UucXVlcnlJZDtcclxuICAgICAgICBpZiAocXVlcnlJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IHV0aWwuc2FmZUdldCh0aGlzLnZpZXdzXywgcXVlcnlJZCk7XHJcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0KHZpZXcgIT0gbnVsbCwgJ1N5bmNUcmVlIGdhdmUgdXMgYW4gb3AgZm9yIGFuIGludmFsaWQgcXVlcnkuJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB2aWV3LmFwcGx5T3BlcmF0aW9uKG9wZXJhdGlvbiwgd3JpdGVzQ2FjaGUsIG9wdENvbXBsZXRlU2VydmVyQ2FjaGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGV2ZW50c18xID0gW107XHJcbiAgICAgICAgICAgIHV0aWwuZm9yRWFjaCh0aGlzLnZpZXdzXywgZnVuY3Rpb24gKGtleSwgdmlldykge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzXzEgPSBldmVudHNfMS5jb25jYXQodmlldy5hcHBseU9wZXJhdGlvbihvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBvcHRDb21wbGV0ZVNlcnZlckNhY2hlKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRzXzE7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGFuIGV2ZW50IGNhbGxiYWNrIGZvciB0aGUgc3BlY2lmaWVkIHF1ZXJ5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5fSBxdWVyeVxyXG4gICAgICogQHBhcmFtIHshRXZlbnRSZWdpc3RyYXRpb259IGV2ZW50UmVnaXN0cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFXcml0ZVRyZWVSZWZ9IHdyaXRlc0NhY2hlXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBzZXJ2ZXJDYWNoZSBDb21wbGV0ZSBzZXJ2ZXIgY2FjaGUsIGlmIHdlIGhhdmUgaXQuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNlcnZlckNhY2hlQ29tcGxldGVcclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUV2ZW50Pn0gRXZlbnRzIHRvIHJhaXNlLlxyXG4gICAgICovXHJcbiAgICBTeW5jUG9pbnQucHJvdG90eXBlLmFkZEV2ZW50UmVnaXN0cmF0aW9uID0gZnVuY3Rpb24gKHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbiwgd3JpdGVzQ2FjaGUsIHNlcnZlckNhY2hlLCBzZXJ2ZXJDYWNoZUNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFyIHF1ZXJ5SWQgPSBxdWVyeS5xdWVyeUlkZW50aWZpZXIoKTtcclxuICAgICAgICB2YXIgdmlldyA9IHV0aWwuc2FmZUdldCh0aGlzLnZpZXdzXywgcXVlcnlJZCk7XHJcbiAgICAgICAgaWYgKCF2aWV3KSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IG1ha2Ugd3JpdGVzQ2FjaGUgdGFrZSBmbGFnIGZvciBjb21wbGV0ZSBzZXJ2ZXIgbm9kZVxyXG4gICAgICAgICAgICB2YXIgZXZlbnRDYWNoZSA9IHdyaXRlc0NhY2hlLmNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUoc2VydmVyQ2FjaGVDb21wbGV0ZSA/IHNlcnZlckNhY2hlIDogbnVsbCk7XHJcbiAgICAgICAgICAgIHZhciBldmVudENhY2hlQ29tcGxldGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGV2ZW50Q2FjaGUpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Q2FjaGVDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2VydmVyQ2FjaGUgaW5zdGFuY2VvZiBDaGlsZHJlbk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Q2FjaGUgPSB3cml0ZXNDYWNoZS5jYWxjQ29tcGxldGVFdmVudENoaWxkcmVuKHNlcnZlckNhY2hlKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50Q2FjaGVDb21wbGV0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRDYWNoZSA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgICAgICAgICAgZXZlbnRDYWNoZUNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZpZXdDYWNoZSA9IG5ldyBWaWV3Q2FjaGUobmV3IENhY2hlTm9kZShcclxuICAgICAgICAgICAgLyoqIEB0eXBlIHshTm9kZX0gKi8gKGV2ZW50Q2FjaGUpLCBldmVudENhY2hlQ29tcGxldGUsIGZhbHNlKSwgbmV3IENhY2hlTm9kZShcclxuICAgICAgICAgICAgLyoqIEB0eXBlIHshTm9kZX0gKi8gKHNlcnZlckNhY2hlKSwgc2VydmVyQ2FjaGVDb21wbGV0ZSwgZmFsc2UpKTtcclxuICAgICAgICAgICAgdmlldyA9IG5ldyBWaWV3KHF1ZXJ5LCB2aWV3Q2FjaGUpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdzX1txdWVyeUlkXSA9IHZpZXc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRoaXMgaXMgZ3VhcmFudGVlZCB0byBleGlzdCBub3csIHdlIGp1c3QgY3JlYXRlZCBhbnl0aGluZyB0aGF0IHdhcyBtaXNzaW5nXHJcbiAgICAgICAgdmlldy5hZGRFdmVudFJlZ2lzdHJhdGlvbihldmVudFJlZ2lzdHJhdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIHZpZXcuZ2V0SW5pdGlhbEV2ZW50cyhldmVudFJlZ2lzdHJhdGlvbik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgZXZlbnQgY2FsbGJhY2socykuICBSZXR1cm4gY2FuY2VsRXZlbnRzIGlmIGEgY2FuY2VsRXJyb3IgaXMgc3BlY2lmaWVkLlxyXG4gICAgICpcclxuICAgICAqIElmIHF1ZXJ5IGlzIHRoZSBkZWZhdWx0IHF1ZXJ5LCB3ZSdsbCBjaGVjayBhbGwgdmlld3MgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnRSZWdpc3RyYXRpb24uXHJcbiAgICAgKiBJZiBldmVudFJlZ2lzdHJhdGlvbiBpcyBudWxsLCB3ZSdsbCByZW1vdmUgYWxsIGNhbGxiYWNrcyBmb3IgdGhlIHNwZWNpZmllZCB2aWV3KHMpLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5fSBxdWVyeVxyXG4gICAgICogQHBhcmFtIHs/RXZlbnRSZWdpc3RyYXRpb259IGV2ZW50UmVnaXN0cmF0aW9uIElmIG51bGwsIHJlbW92ZSBhbGwgY2FsbGJhY2tzLlxyXG4gICAgICogQHBhcmFtIHtFcnJvcj19IGNhbmNlbEVycm9yIElmIGEgY2FuY2VsRXJyb3IgaXMgcHJvdmlkZWQsIGFwcHJvcHJpYXRlIGNhbmNlbCBldmVudHMgd2lsbCBiZSByZXR1cm5lZC5cclxuICAgICAqIEByZXR1cm4ge3tyZW1vdmVkOiFBcnJheS48IVF1ZXJ5PiwgZXZlbnRzOiFBcnJheS48IUV2ZW50Pn19IHJlbW92ZWQgcXVlcmllcyBhbmQgYW55IGNhbmNlbCBldmVudHNcclxuICAgICAqL1xyXG4gICAgU3luY1BvaW50LnByb3RvdHlwZS5yZW1vdmVFdmVudFJlZ2lzdHJhdGlvbiA9IGZ1bmN0aW9uIChxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24sIGNhbmNlbEVycm9yKSB7XHJcbiAgICAgICAgdmFyIHF1ZXJ5SWQgPSBxdWVyeS5xdWVyeUlkZW50aWZpZXIoKTtcclxuICAgICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xyXG4gICAgICAgIHZhciBjYW5jZWxFdmVudHMgPSBbXTtcclxuICAgICAgICB2YXIgaGFkQ29tcGxldGVWaWV3ID0gdGhpcy5oYXNDb21wbGV0ZVZpZXcoKTtcclxuICAgICAgICBpZiAocXVlcnlJZCA9PT0gJ2RlZmF1bHQnKSB7XHJcbiAgICAgICAgICAgIC8vIFdoZW4geW91IGRvIHJlZi5vZmYoLi4uKSwgd2Ugc2VhcmNoIGFsbCB2aWV3cyBmb3IgdGhlIHJlZ2lzdHJhdGlvbiB0byByZW1vdmUuXHJcbiAgICAgICAgICAgIHZhciBzZWxmXzEgPSB0aGlzO1xyXG4gICAgICAgICAgICB1dGlsLmZvckVhY2godGhpcy52aWV3c18sIGZ1bmN0aW9uICh2aWV3UXVlcnlJZCwgdmlldykge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsRXZlbnRzID0gY2FuY2VsRXZlbnRzLmNvbmNhdCh2aWV3LnJlbW92ZUV2ZW50UmVnaXN0cmF0aW9uKGV2ZW50UmVnaXN0cmF0aW9uLCBjYW5jZWxFcnJvcikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZpZXcuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGZfMS52aWV3c19bdmlld1F1ZXJ5SWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlJ2xsIGRlYWwgd2l0aCBjb21wbGV0ZSB2aWV3cyBsYXRlci5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZpZXdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldFF1ZXJ5KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldFF1ZXJ5UGFyYW1zKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmxvYWRzQWxsRGF0YSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaCh2aWV3LmdldFF1ZXJ5KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGNhbGxiYWNrIGZyb20gdGhlIHNwZWNpZmljIHZpZXcuXHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gdXRpbC5zYWZlR2V0KHRoaXMudmlld3NfLCBxdWVyeUlkKTtcclxuICAgICAgICAgICAgaWYgKHZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbEV2ZW50cyA9IGNhbmNlbEV2ZW50cy5jb25jYXQodmlldy5yZW1vdmVFdmVudFJlZ2lzdHJhdGlvbihldmVudFJlZ2lzdHJhdGlvbiwgY2FuY2VsRXJyb3IpKTtcclxuICAgICAgICAgICAgICAgIGlmICh2aWV3LmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnZpZXdzX1txdWVyeUlkXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSdsbCBkZWFsIHdpdGggY29tcGxldGUgdmlld3MgbGF0ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2aWV3XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRRdWVyeSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRRdWVyeVBhcmFtcygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5sb2Fkc0FsbERhdGEoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2godmlldy5nZXRRdWVyeSgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGhhZENvbXBsZXRlVmlldyAmJiAhdGhpcy5oYXNDb21wbGV0ZVZpZXcoKSkge1xyXG4gICAgICAgICAgICAvLyBXZSByZW1vdmVkIG91ciBsYXN0IGNvbXBsZXRlIHZpZXcuXHJcbiAgICAgICAgICAgIHJlbW92ZWQucHVzaChuZXcgU3luY1BvaW50Ll9fcmVmZXJlbmNlQ29uc3RydWN0b3IocXVlcnkucmVwbywgcXVlcnkucGF0aCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyByZW1vdmVkOiByZW1vdmVkLCBldmVudHM6IGNhbmNlbEV2ZW50cyB9O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhVmlldz59XHJcbiAgICAgKi9cclxuICAgIFN5bmNQb2ludC5wcm90b3R5cGUuZ2V0UXVlcnlWaWV3cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciB2YWx1ZXMgPSBPYmplY3Qua2V5cyh0aGlzLnZpZXdzXykubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIF90aGlzLnZpZXdzX1trZXldOyB9KTtcclxuICAgICAgICByZXR1cm4gdmFsdWVzLmZpbHRlcihmdW5jdGlvbiAodmlldykge1xyXG4gICAgICAgICAgICByZXR1cm4gIXZpZXdcclxuICAgICAgICAgICAgICAgIC5nZXRRdWVyeSgpXHJcbiAgICAgICAgICAgICAgICAuZ2V0UXVlcnlQYXJhbXMoKVxyXG4gICAgICAgICAgICAgICAgLmxvYWRzQWxsRGF0YSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGggVGhlIHBhdGggdG8gdGhlIGRlc2lyZWQgY29tcGxldGUgc25hcHNob3RcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfSBBIGNvbXBsZXRlIGNhY2hlLCBpZiBpdCBleGlzdHNcclxuICAgICAqL1xyXG4gICAgU3luY1BvaW50LnByb3RvdHlwZS5nZXRDb21wbGV0ZVNlcnZlckNhY2hlID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICB2YXIgc2VydmVyQ2FjaGUgPSBudWxsO1xyXG4gICAgICAgIHV0aWwuZm9yRWFjaCh0aGlzLnZpZXdzXywgZnVuY3Rpb24gKGtleSwgdmlldykge1xyXG4gICAgICAgICAgICBzZXJ2ZXJDYWNoZSA9IHNlcnZlckNhY2hlIHx8IHZpZXcuZ2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShwYXRoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gc2VydmVyQ2FjaGU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlcclxuICAgICAqIEByZXR1cm4gez9WaWV3fVxyXG4gICAgICovXHJcbiAgICBTeW5jUG9pbnQucHJvdG90eXBlLnZpZXdGb3JRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIHZhciBwYXJhbXMgPSBxdWVyeS5nZXRRdWVyeVBhcmFtcygpO1xyXG4gICAgICAgIGlmIChwYXJhbXMubG9hZHNBbGxEYXRhKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcGxldGVWaWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlJZCA9IHF1ZXJ5LnF1ZXJ5SWRlbnRpZmllcigpO1xyXG4gICAgICAgICAgICByZXR1cm4gdXRpbC5zYWZlR2V0KHRoaXMudmlld3NfLCBxdWVyeUlkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFN5bmNQb2ludC5wcm90b3R5cGUudmlld0V4aXN0c0ZvclF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0ZvclF1ZXJ5KHF1ZXJ5KSAhPSBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgU3luY1BvaW50LnByb3RvdHlwZS5oYXNDb21wbGV0ZVZpZXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcGxldGVWaWV3KCkgIT0gbnVsbDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gez9WaWV3fVxyXG4gICAgICovXHJcbiAgICBTeW5jUG9pbnQucHJvdG90eXBlLmdldENvbXBsZXRlVmlldyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY29tcGxldGVWaWV3ID0gdXRpbC5maW5kVmFsdWUodGhpcy52aWV3c18sIGZ1bmN0aW9uICh2aWV3KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2aWV3XHJcbiAgICAgICAgICAgICAgICAuZ2V0UXVlcnkoKVxyXG4gICAgICAgICAgICAgICAgLmdldFF1ZXJ5UGFyYW1zKClcclxuICAgICAgICAgICAgICAgIC5sb2Fkc0FsbERhdGEoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY29tcGxldGVWaWV3IHx8IG51bGw7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN5bmNQb2ludDtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGhvbGRzIGEgY29sbGVjdGlvbiBvZiB3cml0ZXMgdGhhdCBjYW4gYmUgYXBwbGllZCB0byBub2RlcyBpbiB1bmlzb24uIEl0IGFic3RyYWN0cyBhd2F5IHRoZSBsb2dpYyB3aXRoXHJcbiAqIGRlYWxpbmcgd2l0aCBwcmlvcml0eSB3cml0ZXMgYW5kIG11bHRpcGxlIG5lc3RlZCB3cml0ZXMuIEF0IGFueSBnaXZlbiBwYXRoIHRoZXJlIGlzIG9ubHkgYWxsb3dlZCB0byBiZSBvbmUgd3JpdGVcclxuICogbW9kaWZ5aW5nIHRoYXQgcGF0aC4gQW55IHdyaXRlIHRvIGFuIGV4aXN0aW5nIHBhdGggb3Igc2hhZG93aW5nIGFuIGV4aXN0aW5nIHBhdGggd2lsbCBtb2RpZnkgdGhhdCBleGlzdGluZyB3cml0ZVxyXG4gKiB0byByZWZsZWN0IHRoZSB3cml0ZSBhZGRlZC5cclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7IUltbXV0YWJsZVRyZWUuPCFOb2RlPn0gd3JpdGVUcmVlXHJcbiAqL1xyXG52YXIgQ29tcG91bmRXcml0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbXBvdW5kV3JpdGUod3JpdGVUcmVlXykge1xyXG4gICAgICAgIHRoaXMud3JpdGVUcmVlXyA9IHdyaXRlVHJlZV87XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcclxuICAgICAqIEByZXR1cm4geyFDb21wb3VuZFdyaXRlfVxyXG4gICAgICovXHJcbiAgICBDb21wb3VuZFdyaXRlLnByb3RvdHlwZS5hZGRXcml0ZSA9IGZ1bmN0aW9uIChwYXRoLCBub2RlKSB7XHJcbiAgICAgICAgaWYgKHBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcG91bmRXcml0ZShuZXcgSW1tdXRhYmxlVHJlZShub2RlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcm9vdG1vc3QgPSB0aGlzLndyaXRlVHJlZV8uZmluZFJvb3RNb3N0VmFsdWVBbmRQYXRoKHBhdGgpO1xyXG4gICAgICAgICAgICBpZiAocm9vdG1vc3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJvb3RNb3N0UGF0aCA9IHJvb3Rtb3N0LnBhdGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByb290bW9zdC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHZhciByZWxhdGl2ZVBhdGggPSBQYXRoLnJlbGF0aXZlUGF0aChyb290TW9zdFBhdGgsIHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS51cGRhdGVDaGlsZChyZWxhdGl2ZVBhdGgsIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb3VuZFdyaXRlKHRoaXMud3JpdGVUcmVlXy5zZXQocm9vdE1vc3RQYXRoLCB2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1YnRyZWUgPSBuZXcgSW1tdXRhYmxlVHJlZShub2RlKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdXcml0ZVRyZWUgPSB0aGlzLndyaXRlVHJlZV8uc2V0VHJlZShwYXRoLCBzdWJ0cmVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcG91bmRXcml0ZShuZXdXcml0ZVRyZWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshT2JqZWN0LjxzdHJpbmcsICFOb2RlPn0gdXBkYXRlc1xyXG4gICAgICogQHJldHVybiB7IUNvbXBvdW5kV3JpdGV9XHJcbiAgICAgKi9cclxuICAgIENvbXBvdW5kV3JpdGUucHJvdG90eXBlLmFkZFdyaXRlcyA9IGZ1bmN0aW9uIChwYXRoLCB1cGRhdGVzKSB7XHJcbiAgICAgICAgdmFyIG5ld1dyaXRlID0gdGhpcztcclxuICAgICAgICB1dGlsLmZvckVhY2godXBkYXRlcywgZnVuY3Rpb24gKGNoaWxkS2V5LCBub2RlKSB7XHJcbiAgICAgICAgICAgIG5ld1dyaXRlID0gbmV3V3JpdGUuYWRkV3JpdGUocGF0aC5jaGlsZChjaGlsZEtleSksIG5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXdXcml0ZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgcmVtb3ZlIGEgd3JpdGUgYXQgdGhlIGdpdmVuIHBhdGggYW5kIGRlZXBlciBwYXRocy4gVGhpcyB3aWxsIDxlbT5ub3Q8L2VtPiBtb2RpZnkgYSB3cml0ZSBhdCBhIGhpZ2hlclxyXG4gICAgICogbG9jYXRpb24sIHdoaWNoIG11c3QgYmUgcmVtb3ZlZCBieSBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpdGggdGhhdCBwYXRoLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGggVGhlIHBhdGggYXQgd2hpY2ggYSB3cml0ZSBhbmQgYWxsIGRlZXBlciB3cml0ZXMgc2hvdWxkIGJlIHJlbW92ZWRcclxuICAgICAqIEByZXR1cm4geyFDb21wb3VuZFdyaXRlfSBUaGUgbmV3IENvbXBvdW5kV3JpdGUgd2l0aCB0aGUgcmVtb3ZlZCBwYXRoXHJcbiAgICAgKi9cclxuICAgIENvbXBvdW5kV3JpdGUucHJvdG90eXBlLnJlbW92ZVdyaXRlID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICBpZiAocGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIENvbXBvdW5kV3JpdGUuRW1wdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgbmV3V3JpdGVUcmVlID0gdGhpcy53cml0ZVRyZWVfLnNldFRyZWUocGF0aCwgSW1tdXRhYmxlVHJlZS5FbXB0eSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcG91bmRXcml0ZShuZXdXcml0ZVRyZWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGlzIENvbXBvdW5kV3JpdGUgd2lsbCBmdWxseSBvdmVyd3JpdGUgYSBub2RlIGF0IGEgZ2l2ZW4gbG9jYXRpb24gYW5kIGNhbiB0aGVyZWZvcmUgYmVcclxuICAgICAqIGNvbnNpZGVyZWQgXCJjb21wbGV0ZVwiLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGggVGhlIHBhdGggdG8gY2hlY2sgZm9yXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZXJlIGlzIGEgY29tcGxldGUgd3JpdGUgYXQgdGhhdCBwYXRoXHJcbiAgICAgKi9cclxuICAgIENvbXBvdW5kV3JpdGUucHJvdG90eXBlLmhhc0NvbXBsZXRlV3JpdGUgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbXBsZXRlTm9kZShwYXRoKSAhPSBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIG5vZGUgZm9yIGEgcGF0aCBpZiBhbmQgb25seSBpZiB0aGUgbm9kZSBpcyBhIFwiY29tcGxldGVcIiBvdmVyd3JpdGUgYXQgdGhhdCBwYXRoLiBUaGlzIHdpbGwgbm90IGFnZ3JlZ2F0ZVxyXG4gICAgICogd3JpdGVzIGZyb20gZGVlcGVyIHBhdGhzLCBidXQgd2lsbCByZXR1cm4gY2hpbGQgbm9kZXMgZnJvbSBhIG1vcmUgc2hhbGxvdyBwYXRoLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGggVGhlIHBhdGggdG8gZ2V0IGEgY29tcGxldGUgd3JpdGVcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfSBUaGUgbm9kZSBpZiBjb21wbGV0ZSBhdCB0aGF0IHBhdGgsIG9yIG51bGwgb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcbiAgICBDb21wb3VuZFdyaXRlLnByb3RvdHlwZS5nZXRDb21wbGV0ZU5vZGUgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHZhciByb290bW9zdCA9IHRoaXMud3JpdGVUcmVlXy5maW5kUm9vdE1vc3RWYWx1ZUFuZFBhdGgocGF0aCk7XHJcbiAgICAgICAgaWYgKHJvb3Rtb3N0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVUcmVlX1xyXG4gICAgICAgICAgICAgICAgLmdldChyb290bW9zdC5wYXRoKVxyXG4gICAgICAgICAgICAgICAgLmdldENoaWxkKFBhdGgucmVsYXRpdmVQYXRoKHJvb3Rtb3N0LnBhdGgsIHBhdGgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYWxsIGNoaWxkcmVuIHRoYXQgYXJlIGd1YXJhbnRlZWQgdG8gYmUgYSBjb21wbGV0ZSBvdmVyd3JpdGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjxOYW1lZE5vZGU+fSBBIGxpc3Qgb2YgYWxsIGNvbXBsZXRlIGNoaWxkcmVuLlxyXG4gICAgICovXHJcbiAgICBDb21wb3VuZFdyaXRlLnByb3RvdHlwZS5nZXRDb21wbGV0ZUNoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy53cml0ZVRyZWVfLnZhbHVlO1xyXG4gICAgICAgIGlmIChub2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gSWYgaXQncyBhIGxlYWYgbm9kZSwgaXQgaGFzIG5vIGNoaWxkcmVuOyBzbyBub3RoaW5nIHRvIGRvLlxyXG4gICAgICAgICAgICBpZiAoIW5vZGUuaXNMZWFmTm9kZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmZvckVhY2hDaGlsZChQUklPUklUWV9JTkRFWCwgZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChuZXcgTmFtZWROb2RlKGNoaWxkTmFtZSwgY2hpbGROb2RlKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy53cml0ZVRyZWVfLmNoaWxkcmVuLmlub3JkZXJUcmF2ZXJzYWwoZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGRUcmVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRUcmVlLnZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKG5ldyBOYW1lZE5vZGUoY2hpbGROYW1lLCBjaGlsZFRyZWUudmFsdWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjaGlsZHJlbjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEByZXR1cm4geyFDb21wb3VuZFdyaXRlfVxyXG4gICAgICovXHJcbiAgICBDb21wb3VuZFdyaXRlLnByb3RvdHlwZS5jaGlsZENvbXBvdW5kV3JpdGUgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIGlmIChwYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBzaGFkb3dpbmdOb2RlID0gdGhpcy5nZXRDb21wbGV0ZU5vZGUocGF0aCk7XHJcbiAgICAgICAgICAgIGlmIChzaGFkb3dpbmdOb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcG91bmRXcml0ZShuZXcgSW1tdXRhYmxlVHJlZShzaGFkb3dpbmdOb2RlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBvdW5kV3JpdGUodGhpcy53cml0ZVRyZWVfLnN1YnRyZWUocGF0aCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgQ29tcG91bmRXcml0ZSBpcyBlbXB0eSBhbmQgdGhlcmVmb3JlIGRvZXMgbm90IG1vZGlmeSBhbnkgbm9kZXMuXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgQ29tcG91bmRXcml0ZSBpcyBlbXB0eVxyXG4gICAgICovXHJcbiAgICBDb21wb3VuZFdyaXRlLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlVHJlZV8uaXNFbXB0eSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXBwbGllcyB0aGlzIENvbXBvdW5kV3JpdGUgdG8gYSBub2RlLiBUaGUgbm9kZSBpcyByZXR1cm5lZCB3aXRoIGFsbCB3cml0ZXMgZnJvbSB0aGlzIENvbXBvdW5kV3JpdGUgYXBwbGllZCB0byB0aGVcclxuICAgICAqIG5vZGVcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgVGhlIG5vZGUgdG8gYXBwbHkgdGhpcyBDb21wb3VuZFdyaXRlIHRvXHJcbiAgICAgKiBAcmV0dXJuIHshTm9kZX0gVGhlIG5vZGUgd2l0aCBhbGwgd3JpdGVzIGFwcGxpZWRcclxuICAgICAqL1xyXG4gICAgQ29tcG91bmRXcml0ZS5wcm90b3R5cGUuYXBwbHkgPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiBDb21wb3VuZFdyaXRlLmFwcGx5U3VidHJlZVdyaXRlXyhQYXRoLkVtcHR5LCB0aGlzLndyaXRlVHJlZV8sIG5vZGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgeyFDb21wb3VuZFdyaXRlfVxyXG4gICAgICovXHJcbiAgICBDb21wb3VuZFdyaXRlLkVtcHR5ID0gbmV3IENvbXBvdW5kV3JpdGUobmV3IEltbXV0YWJsZVRyZWUobnVsbCkpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSByZWxhdGl2ZVBhdGhcclxuICAgICAqIEBwYXJhbSB7IUltbXV0YWJsZVRyZWUuPCFOb2RlPn0gd3JpdGVUcmVlXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXHJcbiAgICAgKiBAcmV0dXJuIHshTm9kZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIENvbXBvdW5kV3JpdGUuYXBwbHlTdWJ0cmVlV3JpdGVfID0gZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCwgd3JpdGVUcmVlLCBub2RlKSB7XHJcbiAgICAgICAgaWYgKHdyaXRlVHJlZS52YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIFNpbmNlIHRoZXJlIGEgd3JpdGUgaXMgYWx3YXlzIGEgbGVhZiwgd2UncmUgZG9uZSBoZXJlXHJcbiAgICAgICAgICAgIHJldHVybiBub2RlLnVwZGF0ZUNoaWxkKHJlbGF0aXZlUGF0aCwgd3JpdGVUcmVlLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBwcmlvcml0eVdyaXRlXzEgPSBudWxsO1xyXG4gICAgICAgICAgICB3cml0ZVRyZWUuY2hpbGRyZW4uaW5vcmRlclRyYXZlcnNhbChmdW5jdGlvbiAoY2hpbGRLZXksIGNoaWxkVHJlZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkS2V5ID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IHByaW9yaXRpZXMgYXQgdGhlIGVuZCBzbyB3ZSBkb24ndCB1cGRhdGUgcHJpb3JpdGllcyBmb3IgZWl0aGVyIGVtcHR5IG5vZGVzIG9yIGZvcmdldFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGFwcGx5IHByaW9yaXRpZXMgdG8gZW1wdHkgbm9kZXMgdGhhdCBhcmUgbGF0ZXIgZmlsbGVkXHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5hc3NlcnQoY2hpbGRUcmVlLnZhbHVlICE9PSBudWxsLCAnUHJpb3JpdHkgd3JpdGVzIG11c3QgYWx3YXlzIGJlIGxlYWYgbm9kZXMnKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmlvcml0eVdyaXRlXzEgPSBjaGlsZFRyZWUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlID0gQ29tcG91bmRXcml0ZS5hcHBseVN1YnRyZWVXcml0ZV8ocmVsYXRpdmVQYXRoLmNoaWxkKGNoaWxkS2V5KSwgY2hpbGRUcmVlLCBub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIHdhcyBhIHByaW9yaXR5IHdyaXRlLCB3ZSBvbmx5IGFwcGx5IGl0IGlmIHRoZSBub2RlIGlzIG5vdCBlbXB0eVxyXG4gICAgICAgICAgICBpZiAoIW5vZGUuZ2V0Q2hpbGQocmVsYXRpdmVQYXRoKS5pc0VtcHR5KCkgJiYgcHJpb3JpdHlXcml0ZV8xICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS51cGRhdGVDaGlsZChyZWxhdGl2ZVBhdGguY2hpbGQoJy5wcmlvcml0eScpLCBwcmlvcml0eVdyaXRlXzEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29tcG91bmRXcml0ZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBXcml0ZVRyZWUgdHJhY2tzIGFsbCBwZW5kaW5nIHVzZXItaW5pdGlhdGVkIHdyaXRlcyBhbmQgaGFzIG1ldGhvZHMgdG8gY2FsY3VsYXRlIHRoZSByZXN1bHQgb2YgbWVyZ2luZyB0aGVtXHJcbiAqIHdpdGggdW5kZXJseWluZyBzZXJ2ZXIgZGF0YSAodG8gY3JlYXRlIFwiZXZlbnQgY2FjaGVcIiBkYXRhKS4gIFBlbmRpbmcgd3JpdGVzIGFyZSBhZGRlZCB3aXRoIGFkZE92ZXJ3cml0ZSgpXHJcbiAqIGFuZCBhZGRNZXJnZSgpLCBhbmQgcmVtb3ZlZCB3aXRoIHJlbW92ZVdyaXRlKCkuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFdyaXRlVHJlZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFdyaXRlVHJlZSgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIHRyZWUgdHJhY2tpbmcgdGhlIHJlc3VsdCBvZiBhcHBseWluZyBhbGwgdmlzaWJsZSB3cml0ZXMuICBUaGlzIGRvZXMgbm90IGluY2x1ZGUgdHJhbnNhY3Rpb25zIHdpdGhcclxuICAgICAgICAgKiBhcHBseUxvY2FsbHk9ZmFsc2Ugb3Igd3JpdGVzIHRoYXQgYXJlIGNvbXBsZXRlbHkgc2hhZG93ZWQgYnkgb3RoZXIgd3JpdGVzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUgeyFDb21wb3VuZFdyaXRlfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy52aXNpYmxlV3JpdGVzXyA9IENvbXBvdW5kV3JpdGUuRW1wdHk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsaXN0IG9mIGFsbCBwZW5kaW5nIHdyaXRlcywgcmVnYXJkbGVzcyBvZiB2aXNpYmlsaXR5IGFuZCBzaGFkb3dlZC1uZXNzLiAgVXNlZCB0byBjYWxjdWxhdGUgYXJiaXRyYXJ5XHJcbiAgICAgICAgICogc2V0cyBvZiB0aGUgY2hhbmdlZCBkYXRhLCBzdWNoIGFzIGhpZGRlbiB3cml0ZXMgKGZyb20gdHJhbnNhY3Rpb25zKSBvciBjaGFuZ2VzIHdpdGggY2VydGFpbiB3cml0ZXMgZXhjbHVkZWQgKGFsc29cclxuICAgICAgICAgKiB1c2VkIGJ5IHRyYW5zYWN0aW9ucykuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7IUFycmF5LjwhV3JpdGVSZWNvcmQ+fVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5hbGxXcml0ZXNfID0gW107XHJcbiAgICAgICAgdGhpcy5sYXN0V3JpdGVJZF8gPSAtMTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IFdyaXRlVHJlZVJlZiBmb3IgdGhlIGdpdmVuIHBhdGguIEZvciB1c2Ugd2l0aCBhIG5ldyBzeW5jIHBvaW50IGF0IHRoZSBnaXZlbiBwYXRoLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEByZXR1cm4geyFXcml0ZVRyZWVSZWZ9XHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUuY2hpbGRXcml0ZXMgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgV3JpdGVUcmVlUmVmKHBhdGgsIHRoaXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVjb3JkIGEgbmV3IG92ZXJ3cml0ZSBmcm9tIHVzZXIgY29kZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBzbmFwXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IHdyaXRlSWRcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZpc2libGUgVGhpcyBpcyBzZXQgdG8gZmFsc2UgYnkgc29tZSB0cmFuc2FjdGlvbnMuIEl0IHNob3VsZCBiZSBleGNsdWRlZCBmcm9tIGV2ZW50IGNhY2hlc1xyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWUucHJvdG90eXBlLmFkZE92ZXJ3cml0ZSA9IGZ1bmN0aW9uIChwYXRoLCBzbmFwLCB3cml0ZUlkLCB2aXNpYmxlKSB7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQod3JpdGVJZCA+IHRoaXMubGFzdFdyaXRlSWRfLCAnU3RhY2tpbmcgYW4gb2xkZXIgd3JpdGUgb24gdG9wIG9mIG5ld2VyIG9uZXMnKTtcclxuICAgICAgICBpZiAodmlzaWJsZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFsbFdyaXRlc18ucHVzaCh7XHJcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXHJcbiAgICAgICAgICAgIHNuYXA6IHNuYXAsXHJcbiAgICAgICAgICAgIHdyaXRlSWQ6IHdyaXRlSWQsXHJcbiAgICAgICAgICAgIHZpc2libGU6IHZpc2libGVcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodmlzaWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLnZpc2libGVXcml0ZXNfID0gdGhpcy52aXNpYmxlV3JpdGVzXy5hZGRXcml0ZShwYXRoLCBzbmFwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sYXN0V3JpdGVJZF8gPSB3cml0ZUlkO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVjb3JkIGEgbmV3IG1lcmdlIGZyb20gdXNlciBjb2RlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEBwYXJhbSB7IU9iamVjdC48c3RyaW5nLCAhTm9kZT59IGNoYW5nZWRDaGlsZHJlblxyXG4gICAgICogQHBhcmFtIHshbnVtYmVyfSB3cml0ZUlkXHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUuYWRkTWVyZ2UgPSBmdW5jdGlvbiAocGF0aCwgY2hhbmdlZENoaWxkcmVuLCB3cml0ZUlkKSB7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQod3JpdGVJZCA+IHRoaXMubGFzdFdyaXRlSWRfLCAnU3RhY2tpbmcgYW4gb2xkZXIgbWVyZ2Ugb24gdG9wIG9mIG5ld2VyIG9uZXMnKTtcclxuICAgICAgICB0aGlzLmFsbFdyaXRlc18ucHVzaCh7XHJcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBjaGFuZ2VkQ2hpbGRyZW4sXHJcbiAgICAgICAgICAgIHdyaXRlSWQ6IHdyaXRlSWQsXHJcbiAgICAgICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnZpc2libGVXcml0ZXNfID0gdGhpcy52aXNpYmxlV3JpdGVzXy5hZGRXcml0ZXMocGF0aCwgY2hhbmdlZENoaWxkcmVuKTtcclxuICAgICAgICB0aGlzLmxhc3RXcml0ZUlkXyA9IHdyaXRlSWQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IHdyaXRlSWRcclxuICAgICAqIEByZXR1cm4gez9Xcml0ZVJlY29yZH1cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5nZXRXcml0ZSA9IGZ1bmN0aW9uICh3cml0ZUlkKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFsbFdyaXRlc18ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IHRoaXMuYWxsV3JpdGVzX1tpXTtcclxuICAgICAgICAgICAgaWYgKHJlY29yZC53cml0ZUlkID09PSB3cml0ZUlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGEgd3JpdGUgKGVpdGhlciBhbiBvdmVyd3JpdGUgb3IgbWVyZ2UpIHRoYXQgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGFja25vd2xlZGdlIGJ5IHRoZSBzZXJ2ZXIuIFJlY2FsY3VsYXRlc1xyXG4gICAgICogdGhlIHRyZWUgaWYgbmVjZXNzYXJ5LiAgV2UgcmV0dXJuIHRydWUgaWYgaXQgbWF5IGhhdmUgYmVlbiB2aXNpYmxlLCBtZWFuaW5nIHZpZXdzIG5lZWQgdG8gcmVldmFsdWF0ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IHdyaXRlSWRcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIHdyaXRlIG1heSBoYXZlIGJlZW4gdmlzaWJsZSAobWVhbmluZyB3ZSdsbCBuZWVkIHRvIHJlZXZhbHVhdGUgLyByYWlzZVxyXG4gICAgICogZXZlbnRzIGFzIGEgcmVzdWx0KS5cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5yZW1vdmVXcml0ZSA9IGZ1bmN0aW9uICh3cml0ZUlkKSB7XHJcbiAgICAgICAgLy8gTm90ZTogZGlzYWJsaW5nIHRoaXMgY2hlY2suIEl0IGNvdWxkIGJlIGEgdHJhbnNhY3Rpb24gdGhhdCBwcmVlbXB0ZWQgYW5vdGhlciB0cmFuc2FjdGlvbiwgYW5kIHRodXMgd2FzIGFwcGxpZWRcclxuICAgICAgICAvLyBvdXQgb2Ygb3JkZXIuXHJcbiAgICAgICAgLy9jb25zdCB2YWxpZENsZWFyID0gcmV2ZXJ0IHx8IHRoaXMuYWxsV3JpdGVzXy5sZW5ndGggPT09IDAgfHwgd3JpdGVJZCA8PSB0aGlzLmFsbFdyaXRlc19bMF0ud3JpdGVJZDtcclxuICAgICAgICAvL2Fzc2VydCh2YWxpZENsZWFyLCBcIkVpdGhlciB3ZSBkb24ndCBoYXZlIHRoaXMgd3JpdGUsIG9yIGl0J3MgdGhlIGZpcnN0IG9uZSBpbiB0aGUgcXVldWVcIik7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgaWR4ID0gdGhpcy5hbGxXcml0ZXNfLmZpbmRJbmRleChmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICByZXR1cm4gcy53cml0ZUlkID09PSB3cml0ZUlkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KGlkeCA+PSAwLCAncmVtb3ZlV3JpdGUgY2FsbGVkIHdpdGggbm9uZXhpc3RlbnQgd3JpdGVJZC4nKTtcclxuICAgICAgICB2YXIgd3JpdGVUb1JlbW92ZSA9IHRoaXMuYWxsV3JpdGVzX1tpZHhdO1xyXG4gICAgICAgIHRoaXMuYWxsV3JpdGVzXy5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICB2YXIgcmVtb3ZlZFdyaXRlV2FzVmlzaWJsZSA9IHdyaXRlVG9SZW1vdmUudmlzaWJsZTtcclxuICAgICAgICB2YXIgcmVtb3ZlZFdyaXRlT3ZlcmxhcHNXaXRoT3RoZXJXcml0ZXMgPSBmYWxzZTtcclxuICAgICAgICB2YXIgaSA9IHRoaXMuYWxsV3JpdGVzXy5sZW5ndGggLSAxO1xyXG4gICAgICAgIHdoaWxlIChyZW1vdmVkV3JpdGVXYXNWaXNpYmxlICYmIGkgPj0gMCkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFdyaXRlID0gdGhpcy5hbGxXcml0ZXNfW2ldO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudFdyaXRlLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID49IGlkeCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb3JkQ29udGFpbnNQYXRoXyhjdXJyZW50V3JpdGUsIHdyaXRlVG9SZW1vdmUucGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmVtb3ZlZCB3cml0ZSB3YXMgY29tcGxldGVseSBzaGFkb3dlZCBieSBhIHN1YnNlcXVlbnQgd3JpdGUuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZFdyaXRlV2FzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAod3JpdGVUb1JlbW92ZS5wYXRoLmNvbnRhaW5zKGN1cnJlbnRXcml0ZS5wYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEVpdGhlciB3ZSdyZSBjb3ZlcmluZyBzb21lIHdyaXRlcyBvciB0aGV5J3JlIGNvdmVyaW5nIHBhcnQgb2YgdXMgKGRlcGVuZGluZyBvbiB3aGljaCBjYW1lIGZpcnN0KS5cclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVkV3JpdGVPdmVybGFwc1dpdGhPdGhlcldyaXRlcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXJlbW92ZWRXcml0ZVdhc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChyZW1vdmVkV3JpdGVPdmVybGFwc1dpdGhPdGhlcldyaXRlcykge1xyXG4gICAgICAgICAgICAvLyBUaGVyZSdzIHNvbWUgc2hhZG93aW5nIGdvaW5nIG9uLiBKdXN0IHJlYnVpbGQgdGhlIHZpc2libGUgd3JpdGVzIGZyb20gc2NyYXRjaC5cclxuICAgICAgICAgICAgdGhpcy5yZXNldFRyZWVfKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVGhlcmUncyBubyBzaGFkb3dpbmcuICBXZSBjYW4gc2FmZWx5IGp1c3QgcmVtb3ZlIHRoZSB3cml0ZShzKSBmcm9tIHZpc2libGVXcml0ZXMuXHJcbiAgICAgICAgICAgIGlmICh3cml0ZVRvUmVtb3ZlLnNuYXApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZVdyaXRlc18gPSB0aGlzLnZpc2libGVXcml0ZXNfLnJlbW92ZVdyaXRlKHdyaXRlVG9SZW1vdmUucGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB3cml0ZVRvUmVtb3ZlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudmlzaWJsZVdyaXRlc18gPSBfdGhpcy52aXNpYmxlV3JpdGVzXy5yZW1vdmVXcml0ZSh3cml0ZVRvUmVtb3ZlLnBhdGguY2hpbGQoY2hpbGROYW1lKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gYSBjb21wbGV0ZSBzbmFwc2hvdCBmb3IgdGhlIGdpdmVuIHBhdGggaWYgdGhlcmUncyB2aXNpYmxlIHdyaXRlIGRhdGEgYXQgdGhhdCBwYXRoLCBlbHNlIG51bGwuXHJcbiAgICAgKiBObyBzZXJ2ZXIgZGF0YSBpcyBjb25zaWRlcmVkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWUucHJvdG90eXBlLmdldENvbXBsZXRlV3JpdGVEYXRhID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aXNpYmxlV3JpdGVzXy5nZXRDb21wbGV0ZU5vZGUocGF0aCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBvcHRpb25hbCwgdW5kZXJseWluZyBzZXJ2ZXIgZGF0YSwgYW5kIGFuIG9wdGlvbmFsIHNldCBvZiBjb25zdHJhaW50cyAoZXhjbHVkZSBzb21lIHNldHMsIGluY2x1ZGUgaGlkZGVuXHJcbiAgICAgKiB3cml0ZXMpLCBhdHRlbXB0IHRvIGNhbGN1bGF0ZSBhIGNvbXBsZXRlIHNuYXBzaG90IGZvciB0aGUgZ2l2ZW4gcGF0aFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHRyZWVQYXRoXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBjb21wbGV0ZVNlcnZlckNhY2hlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+PX0gd3JpdGVJZHNUb0V4Y2x1ZGUgQW4gb3B0aW9uYWwgc2V0IHRvIGJlIGV4Y2x1ZGVkXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpbmNsdWRlSGlkZGVuV3JpdGVzIERlZmF1bHRzIHRvIGZhbHNlLCB3aGV0aGVyIG9yIG5vdCB0byBsYXllciBvbiB3cml0ZXMgd2l0aCB2aXNpYmxlIHNldCB0byBmYWxzZVxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUuY2FsY0NvbXBsZXRlRXZlbnRDYWNoZSA9IGZ1bmN0aW9uICh0cmVlUGF0aCwgY29tcGxldGVTZXJ2ZXJDYWNoZSwgd3JpdGVJZHNUb0V4Y2x1ZGUsIGluY2x1ZGVIaWRkZW5Xcml0ZXMpIHtcclxuICAgICAgICBpZiAoIXdyaXRlSWRzVG9FeGNsdWRlICYmICFpbmNsdWRlSGlkZGVuV3JpdGVzKSB7XHJcbiAgICAgICAgICAgIHZhciBzaGFkb3dpbmdOb2RlID0gdGhpcy52aXNpYmxlV3JpdGVzXy5nZXRDb21wbGV0ZU5vZGUodHJlZVBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoc2hhZG93aW5nTm9kZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hhZG93aW5nTm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdWJNZXJnZSA9IHRoaXMudmlzaWJsZVdyaXRlc18uY2hpbGRDb21wb3VuZFdyaXRlKHRyZWVQYXRoKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdWJNZXJnZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcGxldGVTZXJ2ZXJDYWNoZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbXBsZXRlU2VydmVyQ2FjaGUgPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICFzdWJNZXJnZS5oYXNDb21wbGV0ZVdyaXRlKFBhdGguRW1wdHkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2Ugd291bGRuJ3QgaGF2ZSBhIGNvbXBsZXRlIHNuYXBzaG90LCBzaW5jZSB0aGVyZSdzIG5vIHVuZGVybHlpbmcgZGF0YSBhbmQgbm8gY29tcGxldGUgc2hhZG93XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGF5ZXJlZENhY2hlID0gY29tcGxldGVTZXJ2ZXJDYWNoZSB8fCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ViTWVyZ2UuYXBwbHkobGF5ZXJlZENhY2hlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIG1lcmdlID0gdGhpcy52aXNpYmxlV3JpdGVzXy5jaGlsZENvbXBvdW5kV3JpdGUodHJlZVBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoIWluY2x1ZGVIaWRkZW5Xcml0ZXMgJiYgbWVyZ2UuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGxldGVTZXJ2ZXJDYWNoZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBzZXJ2ZXIgY2FjaGUgaXMgbnVsbCwgYW5kIHdlIGRvbid0IGhhdmUgYSBjb21wbGV0ZSBjYWNoZSwgd2UgbmVlZCB0byByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgaWYgKCFpbmNsdWRlSGlkZGVuV3JpdGVzICYmXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVTZXJ2ZXJDYWNoZSA9PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIW1lcmdlLmhhc0NvbXBsZXRlV3JpdGUoUGF0aC5FbXB0eSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBmdW5jdGlvbiAod3JpdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgod3JpdGUudmlzaWJsZSB8fCBpbmNsdWRlSGlkZGVuV3JpdGVzKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCF3cml0ZUlkc1RvRXhjbHVkZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF+d3JpdGVJZHNUb0V4Y2x1ZGUuaW5kZXhPZih3cml0ZS53cml0ZUlkKSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3cml0ZS5wYXRoLmNvbnRhaW5zKHRyZWVQYXRoKSB8fCB0cmVlUGF0aC5jb250YWlucyh3cml0ZS5wYXRoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lcmdlQXRQYXRoID0gV3JpdGVUcmVlLmxheWVyVHJlZV8odGhpcy5hbGxXcml0ZXNfLCBmaWx0ZXIsIHRyZWVQYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGF5ZXJlZENhY2hlID0gY29tcGxldGVTZXJ2ZXJDYWNoZSB8fCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVyZ2VBdFBhdGguYXBwbHkobGF5ZXJlZENhY2hlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFdpdGggb3B0aW9uYWwsIHVuZGVybHlpbmcgc2VydmVyIGRhdGEsIGF0dGVtcHQgdG8gcmV0dXJuIGEgY2hpbGRyZW4gbm9kZSBvZiBjaGlsZHJlbiB0aGF0IHdlIGhhdmUgY29tcGxldGUgZGF0YSBmb3IuXHJcbiAgICAgKiBVc2VkIHdoZW4gY3JlYXRpbmcgbmV3IHZpZXdzLCB0byBwcmUtZmlsbCB0aGVpciBjb21wbGV0ZSBldmVudCBjaGlsZHJlbiBzbmFwc2hvdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSB0cmVlUGF0aFxyXG4gICAgICogQHBhcmFtIHs/Q2hpbGRyZW5Ob2RlfSBjb21wbGV0ZVNlcnZlckNoaWxkcmVuXHJcbiAgICAgKiBAcmV0dXJuIHshQ2hpbGRyZW5Ob2RlfVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWUucHJvdG90eXBlLmNhbGNDb21wbGV0ZUV2ZW50Q2hpbGRyZW4gPSBmdW5jdGlvbiAodHJlZVBhdGgsIGNvbXBsZXRlU2VydmVyQ2hpbGRyZW4pIHtcclxuICAgICAgICB2YXIgY29tcGxldGVDaGlsZHJlbiA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgIHZhciB0b3BMZXZlbFNldCA9IHRoaXMudmlzaWJsZVdyaXRlc18uZ2V0Q29tcGxldGVOb2RlKHRyZWVQYXRoKTtcclxuICAgICAgICBpZiAodG9wTGV2ZWxTZXQpIHtcclxuICAgICAgICAgICAgaWYgKCF0b3BMZXZlbFNldC5pc0xlYWZOb2RlKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdlJ3JlIHNoYWRvd2luZyBldmVyeXRoaW5nLiBSZXR1cm4gdGhlIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICAgICAgdG9wTGV2ZWxTZXQuZm9yRWFjaENoaWxkKFBSSU9SSVRZX0lOREVYLCBmdW5jdGlvbiAoY2hpbGROYW1lLCBjaGlsZFNuYXApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZUNoaWxkcmVuID0gY29tcGxldGVDaGlsZHJlbi51cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUsIGNoaWxkU25hcCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGVDaGlsZHJlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29tcGxldGVTZXJ2ZXJDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAvLyBMYXllciBhbnkgY2hpbGRyZW4gd2UgaGF2ZSBvbiB0b3Agb2YgdGhpc1xyXG4gICAgICAgICAgICAvLyBXZSBrbm93IHdlIGRvbid0IGhhdmUgYSB0b3AtbGV2ZWwgc2V0LCBzbyBqdXN0IGVudW1lcmF0ZSBleGlzdGluZyBjaGlsZHJlblxyXG4gICAgICAgICAgICB2YXIgbWVyZ2VfMSA9IHRoaXMudmlzaWJsZVdyaXRlc18uY2hpbGRDb21wb3VuZFdyaXRlKHRyZWVQYXRoKTtcclxuICAgICAgICAgICAgY29tcGxldGVTZXJ2ZXJDaGlsZHJlbi5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIGZ1bmN0aW9uIChjaGlsZE5hbWUsIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBtZXJnZV8xXHJcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkQ29tcG91bmRXcml0ZShuZXcgUGF0aChjaGlsZE5hbWUpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBseShjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGVDaGlsZHJlbiA9IGNvbXBsZXRlQ2hpbGRyZW4udXBkYXRlSW1tZWRpYXRlQ2hpbGQoY2hpbGROYW1lLCBub2RlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIEFkZCBhbnkgY29tcGxldGUgY2hpbGRyZW4gd2UgaGF2ZSBmcm9tIHRoZSBzZXRcclxuICAgICAgICAgICAgbWVyZ2VfMS5nZXRDb21wbGV0ZUNoaWxkcmVuKCkuZm9yRWFjaChmdW5jdGlvbiAobmFtZWROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUNoaWxkcmVuID0gY29tcGxldGVDaGlsZHJlbi51cGRhdGVJbW1lZGlhdGVDaGlsZChuYW1lZE5vZGUubmFtZSwgbmFtZWROb2RlLm5vZGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlQ2hpbGRyZW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBXZSBkb24ndCBoYXZlIGFueXRoaW5nIHRvIGxheWVyIG9uIHRvcCBvZi4gTGF5ZXIgb24gYW55IGNoaWxkcmVuIHdlIGhhdmVcclxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGNhbiByZXR1cm4gYW4gZW1wdHkgc25hcCBpZiB3ZSBoYXZlIGEgZGVmaW5lZCBkZWxldGVcclxuICAgICAgICAgICAgdmFyIG1lcmdlID0gdGhpcy52aXNpYmxlV3JpdGVzXy5jaGlsZENvbXBvdW5kV3JpdGUodHJlZVBhdGgpO1xyXG4gICAgICAgICAgICBtZXJnZS5nZXRDb21wbGV0ZUNoaWxkcmVuKCkuZm9yRWFjaChmdW5jdGlvbiAobmFtZWROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUNoaWxkcmVuID0gY29tcGxldGVDaGlsZHJlbi51cGRhdGVJbW1lZGlhdGVDaGlsZChuYW1lZE5vZGUubmFtZSwgbmFtZWROb2RlLm5vZGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlQ2hpbGRyZW47XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gdGhhdCB0aGUgdW5kZXJseWluZyBzZXJ2ZXIgZGF0YSBoYXMgdXBkYXRlZCwgZGV0ZXJtaW5lIHdoYXQsIGlmIGFueXRoaW5nLCBuZWVkcyB0byBiZVxyXG4gICAgICogYXBwbGllZCB0byB0aGUgZXZlbnQgY2FjaGUuXHJcbiAgICAgKlxyXG4gICAgICogUG9zc2liaWxpdGllczpcclxuICAgICAqXHJcbiAgICAgKiAxLiBObyB3cml0ZXMgYXJlIHNoYWRvd2luZy4gRXZlbnRzIHNob3VsZCBiZSByYWlzZWQsIHRoZSBzbmFwIHRvIGJlIGFwcGxpZWQgY29tZXMgZnJvbSB0aGUgc2VydmVyIGRhdGFcclxuICAgICAqXHJcbiAgICAgKiAyLiBTb21lIHdyaXRlIGlzIGNvbXBsZXRlbHkgc2hhZG93aW5nLiBObyBldmVudHMgdG8gYmUgcmFpc2VkXHJcbiAgICAgKlxyXG4gICAgICogMy4gSXMgcGFydGlhbGx5IHNoYWRvd2VkLiBFdmVudHNcclxuICAgICAqXHJcbiAgICAgKiBFaXRoZXIgZXhpc3RpbmdFdmVudFNuYXAgb3IgZXhpc3RpbmdTZXJ2ZXJTbmFwIG11c3QgZXhpc3RcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSB0cmVlUGF0aFxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gY2hpbGRQYXRoXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBleGlzdGluZ0V2ZW50U25hcFxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gZXhpc3RpbmdTZXJ2ZXJTbmFwXHJcbiAgICAgKiBAcmV0dXJuIHs/Tm9kZX1cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5jYWxjRXZlbnRDYWNoZUFmdGVyU2VydmVyT3ZlcndyaXRlID0gZnVuY3Rpb24gKHRyZWVQYXRoLCBjaGlsZFBhdGgsIGV4aXN0aW5nRXZlbnRTbmFwLCBleGlzdGluZ1NlcnZlclNuYXApIHtcclxuICAgICAgICB1dGlsLmFzc2VydChleGlzdGluZ0V2ZW50U25hcCB8fCBleGlzdGluZ1NlcnZlclNuYXAsICdFaXRoZXIgZXhpc3RpbmdFdmVudFNuYXAgb3IgZXhpc3RpbmdTZXJ2ZXJTbmFwIG11c3QgZXhpc3QnKTtcclxuICAgICAgICB2YXIgcGF0aCA9IHRyZWVQYXRoLmNoaWxkKGNoaWxkUGF0aCk7XHJcbiAgICAgICAgaWYgKHRoaXMudmlzaWJsZVdyaXRlc18uaGFzQ29tcGxldGVXcml0ZShwYXRoKSkge1xyXG4gICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGNhbiBwcm9iYWJseSBndWFyYW50ZWUgdGhhdCB3ZSdyZSBpbiBjYXNlIDIsIG1lYW5pbmcgbm8gZXZlbnRzXHJcbiAgICAgICAgICAgIC8vIE1heSBuZWVkIHRvIGNoZWNrIHZpc2liaWxpdHkgd2hpbGUgZG9pbmcgdGhlIGZpbmRSb290TW9zdFZhbHVlQW5kUGF0aCBjYWxsXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gTm8gY29tcGxldGUgc2hhZG93aW5nLiBXZSdyZSBlaXRoZXIgcGFydGlhbGx5IHNoYWRvd2luZyBvciBub3Qgc2hhZG93aW5nIGF0IGFsbC5cclxuICAgICAgICAgICAgdmFyIGNoaWxkTWVyZ2UgPSB0aGlzLnZpc2libGVXcml0ZXNfLmNoaWxkQ29tcG91bmRXcml0ZShwYXRoKTtcclxuICAgICAgICAgICAgaWYgKGNoaWxkTWVyZ2UuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSdyZSBub3Qgc2hhZG93aW5nIGF0IGFsbC4gQ2FzZSAxXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdTZXJ2ZXJTbmFwLmdldENoaWxkKGNoaWxkUGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGNvdWxkIGJlIG1vcmUgZWZmaWNpZW50IGlmIHRoZSBzZXJ2ZXJOb2RlICsgdXBkYXRlcyBkb2Vzbid0IGNoYW5nZSB0aGUgZXZlbnRTbmFwXHJcbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyIHRoaXMgaXMgdHJpY2t5IHRvIGZpbmQgb3V0LCBzaW5jZSB1c2VyIHVwZGF0ZXMgZG9uJ3QgbmVjZXNzYXJ5IGNoYW5nZSB0aGUgc2VydmVyXHJcbiAgICAgICAgICAgICAgICAvLyBzbmFwLCBlLmcuIHByaW9yaXR5IHVwZGF0ZXMgb24gZW1wdHkgbm9kZXMsIG9yIGRlZXAgZGVsZXRlcy4gQW5vdGhlciBzcGVjaWFsIGNhc2UgaXMgaWYgdGhlIHNlcnZlclxyXG4gICAgICAgICAgICAgICAgLy8gYWRkcyBub2RlcywgYnV0IGRvZXNuJ3QgY2hhbmdlIGFueSBleGlzdGluZyB3cml0ZXMuIEl0IGlzIHRoZXJlZm9yZSBub3QgZW5vdWdoIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGNoZWNrIGlmIHRoZSB1cGRhdGVzIGNoYW5nZSB0aGUgc2VydmVyTm9kZS5cclxuICAgICAgICAgICAgICAgIC8vIE1heWJlIGNoZWNrIGlmIHRoZSBtZXJnZSB0cmVlIGNvbnRhaW5zIHRoZXNlIHNwZWNpYWwgY2FzZXMgYW5kIG9ubHkgZG8gYSBmdWxsIG92ZXJ3cml0ZSBpbiB0aGF0IGNhc2U/XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRNZXJnZS5hcHBseShleGlzdGluZ1NlcnZlclNuYXAuZ2V0Q2hpbGQoY2hpbGRQYXRoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgY29tcGxldGUgY2hpbGQgZm9yIGEgZ2l2ZW4gc2VydmVyIHNuYXAgYWZ0ZXIgYXBwbHlpbmcgYWxsIHVzZXIgd3JpdGVzIG9yIG51bGwgaWYgdGhlcmUgaXMgbm9cclxuICAgICAqIGNvbXBsZXRlIGNoaWxkIGZvciB0aGlzIENoaWxkS2V5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHRyZWVQYXRoXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGNoaWxkS2V5XHJcbiAgICAgKiBAcGFyYW0geyFDYWNoZU5vZGV9IGV4aXN0aW5nU2VydmVyU25hcFxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUuY2FsY0NvbXBsZXRlQ2hpbGQgPSBmdW5jdGlvbiAodHJlZVBhdGgsIGNoaWxkS2V5LCBleGlzdGluZ1NlcnZlclNuYXApIHtcclxuICAgICAgICB2YXIgcGF0aCA9IHRyZWVQYXRoLmNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICB2YXIgc2hhZG93aW5nTm9kZSA9IHRoaXMudmlzaWJsZVdyaXRlc18uZ2V0Q29tcGxldGVOb2RlKHBhdGgpO1xyXG4gICAgICAgIGlmIChzaGFkb3dpbmdOb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNoYWRvd2luZ05vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdTZXJ2ZXJTbmFwLmlzQ29tcGxldGVGb3JDaGlsZChjaGlsZEtleSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZE1lcmdlID0gdGhpcy52aXNpYmxlV3JpdGVzXy5jaGlsZENvbXBvdW5kV3JpdGUocGF0aCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRNZXJnZS5hcHBseShleGlzdGluZ1NlcnZlclNuYXAuZ2V0Tm9kZSgpLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBub2RlIGlmIHRoZXJlIGlzIGEgY29tcGxldGUgb3ZlcndyaXRlIGZvciB0aGlzIHBhdGguIE1vcmUgc3BlY2lmaWNhbGx5LCBpZiB0aGVyZSBpcyBhIHdyaXRlIGF0XHJcbiAgICAgKiBhIGhpZ2hlciBwYXRoLCB0aGlzIHdpbGwgcmV0dXJuIHRoZSBjaGlsZCBvZiB0aGF0IHdyaXRlIHJlbGF0aXZlIHRvIHRoZSB3cml0ZSBhbmQgdGhpcyBwYXRoLlxyXG4gICAgICogUmV0dXJucyBudWxsIGlmIHRoZXJlIGlzIG5vIHdyaXRlIGF0IHRoaXMgcGF0aC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcmV0dXJuIHs/Tm9kZX1cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5zaGFkb3dpbmdXcml0ZSA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlzaWJsZVdyaXRlc18uZ2V0Q29tcGxldGVOb2RlKHBhdGgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB3aGVuIHByb2Nlc3NpbmcgY2hpbGQgcmVtb3ZlIGV2ZW50cyBvbiBhIHF1ZXJ5LiBJZiB3ZSBjYW4sIHdlIHB1bGwgaW4gY2hpbGRyZW4gdGhhdCB3ZXJlIG91dHNpZGVcclxuICAgICAqIHRoZSB3aW5kb3csIGJ1dCBtYXkgbm93IGJlIGluIHRoZSB3aW5kb3cuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gdHJlZVBhdGhcclxuICAgICAqIEBwYXJhbSB7P05vZGV9IGNvbXBsZXRlU2VydmVyRGF0YVxyXG4gICAgICogQHBhcmFtIHshTmFtZWROb2RlfSBzdGFydFBvc3RcclxuICAgICAqIEBwYXJhbSB7IW51bWJlcn0gY291bnRcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmV2ZXJzZVxyXG4gICAgICogQHBhcmFtIHshSW5kZXh9IGluZGV4XHJcbiAgICAgKiBAcmV0dXJuIHshQXJyYXkuPCFOYW1lZE5vZGU+fVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWUucHJvdG90eXBlLmNhbGNJbmRleGVkU2xpY2UgPSBmdW5jdGlvbiAodHJlZVBhdGgsIGNvbXBsZXRlU2VydmVyRGF0YSwgc3RhcnRQb3N0LCBjb3VudCwgcmV2ZXJzZSwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgdG9JdGVyYXRlO1xyXG4gICAgICAgIHZhciBtZXJnZSA9IHRoaXMudmlzaWJsZVdyaXRlc18uY2hpbGRDb21wb3VuZFdyaXRlKHRyZWVQYXRoKTtcclxuICAgICAgICB2YXIgc2hhZG93aW5nTm9kZSA9IG1lcmdlLmdldENvbXBsZXRlTm9kZShQYXRoLkVtcHR5KTtcclxuICAgICAgICBpZiAoc2hhZG93aW5nTm9kZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRvSXRlcmF0ZSA9IHNoYWRvd2luZ05vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNvbXBsZXRlU2VydmVyRGF0YSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRvSXRlcmF0ZSA9IG1lcmdlLmFwcGx5KGNvbXBsZXRlU2VydmVyRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBubyBjaGlsZHJlbiB0byBpdGVyYXRlIG9uXHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdG9JdGVyYXRlID0gdG9JdGVyYXRlLndpdGhJbmRleChpbmRleCk7XHJcbiAgICAgICAgaWYgKCF0b0l0ZXJhdGUuaXNFbXB0eSgpICYmICF0b0l0ZXJhdGUuaXNMZWFmTm9kZSgpKSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlcyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgY21wID0gaW5kZXguZ2V0Q29tcGFyZSgpO1xyXG4gICAgICAgICAgICB2YXIgaXRlciA9IHJldmVyc2VcclxuICAgICAgICAgICAgICAgID8gdG9JdGVyYXRlLmdldFJldmVyc2VJdGVyYXRvckZyb20oc3RhcnRQb3N0LCBpbmRleClcclxuICAgICAgICAgICAgICAgIDogdG9JdGVyYXRlLmdldEl0ZXJhdG9yRnJvbShzdGFydFBvc3QsIGluZGV4KTtcclxuICAgICAgICAgICAgdmFyIG5leHQgPSBpdGVyLmdldE5leHQoKTtcclxuICAgICAgICAgICAgd2hpbGUgKG5leHQgJiYgbm9kZXMubGVuZ3RoIDwgY291bnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjbXAobmV4dCwgc3RhcnRQb3N0KSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobmV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0ID0gaXRlci5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVdyaXRlUmVjb3JkfSB3cml0ZVJlY29yZFxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUucmVjb3JkQ29udGFpbnNQYXRoXyA9IGZ1bmN0aW9uICh3cml0ZVJlY29yZCwgcGF0aCkge1xyXG4gICAgICAgIGlmICh3cml0ZVJlY29yZC5zbmFwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3cml0ZVJlY29yZC5wYXRoLmNvbnRhaW5zKHBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZmluZEtleSBjYW4gcmV0dXJuIHVuZGVmaW5lZCwgc28gdXNlICEhIHRvIGNvZXJjZSB0byBib29sZWFuXHJcbiAgICAgICAgICAgIHJldHVybiAhIXV0aWwuZmluZEtleSh3cml0ZVJlY29yZC5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkU25hcCwgY2hpbGROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JpdGVSZWNvcmQucGF0aC5jaGlsZChjaGlsZE5hbWUpLmNvbnRhaW5zKHBhdGgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZS1sYXllciB0aGUgd3JpdGVzIGFuZCBtZXJnZXMgaW50byBhIHRyZWUgc28gd2UgY2FuIGVmZmljaWVudGx5IGNhbGN1bGF0ZSBldmVudCBzbmFwc2hvdHNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUucmVzZXRUcmVlXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnZpc2libGVXcml0ZXNfID0gV3JpdGVUcmVlLmxheWVyVHJlZV8odGhpcy5hbGxXcml0ZXNfLCBXcml0ZVRyZWUuRGVmYXVsdEZpbHRlcl8sIFBhdGguRW1wdHkpO1xyXG4gICAgICAgIGlmICh0aGlzLmFsbFdyaXRlc18ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RXcml0ZUlkXyA9IHRoaXMuYWxsV3JpdGVzX1t0aGlzLmFsbFdyaXRlc18ubGVuZ3RoIC0gMV0ud3JpdGVJZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFdyaXRlSWRfID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGRlZmF1bHQgZmlsdGVyIHVzZWQgd2hlbiBjb25zdHJ1Y3RpbmcgdGhlIHRyZWUuIEtlZXAgZXZlcnl0aGluZyB0aGF0J3MgdmlzaWJsZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFXcml0ZVJlY29yZH0gd3JpdGVcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWUuRGVmYXVsdEZpbHRlcl8gPSBmdW5jdGlvbiAod3JpdGUpIHtcclxuICAgICAgICByZXR1cm4gd3JpdGUudmlzaWJsZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN0YXRpYyBtZXRob2QuIEdpdmVuIGFuIGFycmF5IG9mIFdyaXRlUmVjb3JkcywgYSBmaWx0ZXIgZm9yIHdoaWNoIG9uZXMgdG8gaW5jbHVkZSwgYW5kIGEgcGF0aCwgY29uc3RydWN0IHRoZSB0cmVlIG9mXHJcbiAgICAgKiBldmVudCBkYXRhIGF0IHRoYXQgcGF0aC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48IVdyaXRlUmVjb3JkPn0gd3JpdGVzXHJcbiAgICAgKiBAcGFyYW0geyFmdW5jdGlvbighV3JpdGVSZWNvcmQpOmJvb2xlYW59IGZpbHRlclxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gdHJlZVJvb3RcclxuICAgICAqIEByZXR1cm4geyFDb21wb3VuZFdyaXRlfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLmxheWVyVHJlZV8gPSBmdW5jdGlvbiAod3JpdGVzLCBmaWx0ZXIsIHRyZWVSb290KSB7XHJcbiAgICAgICAgdmFyIGNvbXBvdW5kV3JpdGUgPSBDb21wb3VuZFdyaXRlLkVtcHR5O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd3JpdGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciB3cml0ZSA9IHdyaXRlc1tpXTtcclxuICAgICAgICAgICAgLy8gVGhlb3J5LCBhIGxhdGVyIHNldCB3aWxsIGVpdGhlcjpcclxuICAgICAgICAgICAgLy8gYSkgYWJvcnQgYSByZWxldmFudCB0cmFuc2FjdGlvbiwgc28gbm8gbmVlZCB0byB3b3JyeSBhYm91dCBleGNsdWRpbmcgaXQgZnJvbSBjYWxjdWxhdGluZyB0aGF0IHRyYW5zYWN0aW9uXHJcbiAgICAgICAgICAgIC8vIGIpIG5vdCBiZSByZWxldmFudCB0byBhIHRyYW5zYWN0aW9uIChzZXBhcmF0ZSBicmFuY2gpLCBzbyBhZ2FpbiB3aWxsIG5vdCBhZmZlY3QgdGhlIGRhdGEgZm9yIHRoYXQgdHJhbnNhY3Rpb25cclxuICAgICAgICAgICAgaWYgKGZpbHRlcih3cml0ZSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB3cml0ZVBhdGggPSB3cml0ZS5wYXRoO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlbGF0aXZlUGF0aCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIGlmICh3cml0ZS5zbmFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyZWVSb290LmNvbnRhaW5zKHdyaXRlUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVQYXRoID0gUGF0aC5yZWxhdGl2ZVBhdGgodHJlZVJvb3QsIHdyaXRlUGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvdW5kV3JpdGUgPSBjb21wb3VuZFdyaXRlLmFkZFdyaXRlKHJlbGF0aXZlUGF0aCwgd3JpdGUuc25hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdyaXRlUGF0aC5jb250YWlucyh0cmVlUm9vdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVQYXRoID0gUGF0aC5yZWxhdGl2ZVBhdGgod3JpdGVQYXRoLCB0cmVlUm9vdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvdW5kV3JpdGUgPSBjb21wb3VuZFdyaXRlLmFkZFdyaXRlKFBhdGguRW1wdHksIHdyaXRlLnNuYXAuZ2V0Q2hpbGQocmVsYXRpdmVQYXRoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAod3JpdGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJlZVJvb3QuY29udGFpbnMod3JpdGVQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZVBhdGggPSBQYXRoLnJlbGF0aXZlUGF0aCh0cmVlUm9vdCwgd3JpdGVQYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG91bmRXcml0ZSA9IGNvbXBvdW5kV3JpdGUuYWRkV3JpdGVzKHJlbGF0aXZlUGF0aCwgd3JpdGUuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh3cml0ZVBhdGguY29udGFpbnModHJlZVJvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlUGF0aCA9IFBhdGgucmVsYXRpdmVQYXRoKHdyaXRlUGF0aCwgdHJlZVJvb3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmVQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG91bmRXcml0ZSA9IGNvbXBvdW5kV3JpdGUuYWRkV3JpdGVzKFBhdGguRW1wdHksIHdyaXRlLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHV0aWwuc2FmZUdldCh3cml0ZS5jaGlsZHJlbiwgcmVsYXRpdmVQYXRoLmdldEZyb250KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgZXhpc3RzIGEgY2hpbGQgaW4gdGhpcyBub2RlIHRoYXQgbWF0Y2hlcyB0aGUgcm9vdCBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZXBOb2RlID0gY2hpbGQuZ2V0Q2hpbGQocmVsYXRpdmVQYXRoLnBvcEZyb250KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvdW5kV3JpdGUgPSBjb21wb3VuZFdyaXRlLmFkZFdyaXRlKFBhdGguRW1wdHksIGRlZXBOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IHV0aWwuYXNzZXJ0aW9uRXJyb3IoJ1dyaXRlUmVjb3JkIHNob3VsZCBoYXZlIC5zbmFwIG9yIC5jaGlsZHJlbicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb21wb3VuZFdyaXRlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBXcml0ZVRyZWU7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBBIFdyaXRlVHJlZVJlZiB3cmFwcyBhIFdyaXRlVHJlZSBhbmQgYSBwYXRoLCBmb3IgY29udmVuaWVudCBhY2Nlc3MgdG8gYSBwYXJ0aWN1bGFyIHN1YnRyZWUuICBBbGwgb2YgdGhlIG1ldGhvZHNcclxuICoganVzdCBwcm94eSB0byB0aGUgdW5kZXJseWluZyBXcml0ZVRyZWUuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFdyaXRlVHJlZVJlZiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlfSB3cml0ZVRyZWVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gV3JpdGVUcmVlUmVmKHBhdGgsIHdyaXRlVHJlZSkge1xyXG4gICAgICAgIHRoaXMudHJlZVBhdGhfID0gcGF0aDtcclxuICAgICAgICB0aGlzLndyaXRlVHJlZV8gPSB3cml0ZVRyZWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIElmIHBvc3NpYmxlLCByZXR1cm5zIGEgY29tcGxldGUgZXZlbnQgY2FjaGUsIHVzaW5nIHRoZSB1bmRlcmx5aW5nIHNlcnZlciBkYXRhIGlmIHBvc3NpYmxlLiBJbiBhZGRpdGlvbiwgY2FuIGJlIHVzZWRcclxuICAgICAqIHRvIGdldCBhIGNhY2hlIHRoYXQgaW5jbHVkZXMgaGlkZGVuIHdyaXRlcywgYW5kIGV4Y2x1ZGVzIGFyYml0cmFyeSB3cml0ZXMuIE5vdGUgdGhhdCBjdXN0b21pemluZyB0aGUgcmV0dXJuZWQgbm9kZVxyXG4gICAgICogY2FuIGxlYWQgdG8gYSBtb3JlIGV4cGVuc2l2ZSBjYWxjdWxhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBjb21wbGV0ZVNlcnZlckNhY2hlXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+PX0gd3JpdGVJZHNUb0V4Y2x1ZGUgT3B0aW9uYWwgd3JpdGVzIHRvIGV4Y2x1ZGUuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpbmNsdWRlSGlkZGVuV3JpdGVzIERlZmF1bHRzIHRvIGZhbHNlLCB3aGV0aGVyIG9yIG5vdCB0byBsYXllciBvbiB3cml0ZXMgd2l0aCB2aXNpYmxlIHNldCB0byBmYWxzZVxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZVJlZi5wcm90b3R5cGUuY2FsY0NvbXBsZXRlRXZlbnRDYWNoZSA9IGZ1bmN0aW9uIChjb21wbGV0ZVNlcnZlckNhY2hlLCB3cml0ZUlkc1RvRXhjbHVkZSwgaW5jbHVkZUhpZGRlbldyaXRlcykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlVHJlZV8uY2FsY0NvbXBsZXRlRXZlbnRDYWNoZSh0aGlzLnRyZWVQYXRoXywgY29tcGxldGVTZXJ2ZXJDYWNoZSwgd3JpdGVJZHNUb0V4Y2x1ZGUsIGluY2x1ZGVIaWRkZW5Xcml0ZXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSWYgcG9zc2libGUsIHJldHVybnMgYSBjaGlsZHJlbiBub2RlIGNvbnRhaW5pbmcgYWxsIG9mIHRoZSBjb21wbGV0ZSBjaGlsZHJlbiB3ZSBoYXZlIGRhdGEgZm9yLiBUaGUgcmV0dXJuZWQgZGF0YSBpcyBhXHJcbiAgICAgKiBtaXggb2YgdGhlIGdpdmVuIHNlcnZlciBkYXRhIGFuZCB3cml0ZSBkYXRhLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7P0NoaWxkcmVuTm9kZX0gY29tcGxldGVTZXJ2ZXJDaGlsZHJlblxyXG4gICAgICogQHJldHVybiB7IUNoaWxkcmVuTm9kZX1cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlUmVmLnByb3RvdHlwZS5jYWxjQ29tcGxldGVFdmVudENoaWxkcmVuID0gZnVuY3Rpb24gKGNvbXBsZXRlU2VydmVyQ2hpbGRyZW4pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cml0ZVRyZWVfLmNhbGNDb21wbGV0ZUV2ZW50Q2hpbGRyZW4odGhpcy50cmVlUGF0aF8sIGNvbXBsZXRlU2VydmVyQ2hpbGRyZW4pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gdGhhdCBlaXRoZXIgdGhlIHVuZGVybHlpbmcgc2VydmVyIGRhdGEgaGFzIHVwZGF0ZWQgb3IgdGhlIG91dHN0YW5kaW5nIHdyaXRlcyBoYXZlIHVwZGF0ZWQsIGRldGVybWluZSB3aGF0LFxyXG4gICAgICogaWYgYW55dGhpbmcsIG5lZWRzIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGV2ZW50IGNhY2hlLlxyXG4gICAgICpcclxuICAgICAqIFBvc3NpYmlsaXRpZXM6XHJcbiAgICAgKlxyXG4gICAgICogMS4gTm8gd3JpdGVzIGFyZSBzaGFkb3dpbmcuIEV2ZW50cyBzaG91bGQgYmUgcmFpc2VkLCB0aGUgc25hcCB0byBiZSBhcHBsaWVkIGNvbWVzIGZyb20gdGhlIHNlcnZlciBkYXRhXHJcbiAgICAgKlxyXG4gICAgICogMi4gU29tZSB3cml0ZSBpcyBjb21wbGV0ZWx5IHNoYWRvd2luZy4gTm8gZXZlbnRzIHRvIGJlIHJhaXNlZFxyXG4gICAgICpcclxuICAgICAqIDMuIElzIHBhcnRpYWxseSBzaGFkb3dlZC4gRXZlbnRzIHNob3VsZCBiZSByYWlzZWRcclxuICAgICAqXHJcbiAgICAgKiBFaXRoZXIgZXhpc3RpbmdFdmVudFNuYXAgb3IgZXhpc3RpbmdTZXJ2ZXJTbmFwIG11c3QgZXhpc3QsIHRoaXMgaXMgdmFsaWRhdGVkIHZpYSBhbiBhc3NlcnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBleGlzdGluZ0V2ZW50U25hcFxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gZXhpc3RpbmdTZXJ2ZXJTbmFwXHJcbiAgICAgKiBAcmV0dXJuIHs/Tm9kZX1cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlUmVmLnByb3RvdHlwZS5jYWxjRXZlbnRDYWNoZUFmdGVyU2VydmVyT3ZlcndyaXRlID0gZnVuY3Rpb24gKHBhdGgsIGV4aXN0aW5nRXZlbnRTbmFwLCBleGlzdGluZ1NlcnZlclNuYXApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cml0ZVRyZWVfLmNhbGNFdmVudENhY2hlQWZ0ZXJTZXJ2ZXJPdmVyd3JpdGUodGhpcy50cmVlUGF0aF8sIHBhdGgsIGV4aXN0aW5nRXZlbnRTbmFwLCBleGlzdGluZ1NlcnZlclNuYXApO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIG5vZGUgaWYgdGhlcmUgaXMgYSBjb21wbGV0ZSBvdmVyd3JpdGUgZm9yIHRoaXMgcGF0aC4gTW9yZSBzcGVjaWZpY2FsbHksIGlmIHRoZXJlIGlzIGEgd3JpdGUgYXRcclxuICAgICAqIGEgaGlnaGVyIHBhdGgsIHRoaXMgd2lsbCByZXR1cm4gdGhlIGNoaWxkIG9mIHRoYXQgd3JpdGUgcmVsYXRpdmUgdG8gdGhlIHdyaXRlIGFuZCB0aGlzIHBhdGguXHJcbiAgICAgKiBSZXR1cm5zIG51bGwgaWYgdGhlcmUgaXMgbm8gd3JpdGUgYXQgdGhpcyBwYXRoLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWVSZWYucHJvdG90eXBlLnNoYWRvd2luZ1dyaXRlID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cml0ZVRyZWVfLnNoYWRvd2luZ1dyaXRlKHRoaXMudHJlZVBhdGhfLmNoaWxkKHBhdGgpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgd2hlbiBwcm9jZXNzaW5nIGNoaWxkIHJlbW92ZSBldmVudHMgb24gYSBxdWVyeS4gSWYgd2UgY2FuLCB3ZSBwdWxsIGluIGNoaWxkcmVuIHRoYXQgd2VyZSBvdXRzaWRlXHJcbiAgICAgKiB0aGUgd2luZG93LCBidXQgbWF5IG5vdyBiZSBpbiB0aGUgd2luZG93XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gY29tcGxldGVTZXJ2ZXJEYXRhXHJcbiAgICAgKiBAcGFyYW0geyFOYW1lZE5vZGV9IHN0YXJ0UG9zdFxyXG4gICAgICogQHBhcmFtIHshbnVtYmVyfSBjb3VudFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSByZXZlcnNlXHJcbiAgICAgKiBAcGFyYW0geyFJbmRleH0gaW5kZXhcclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IU5hbWVkTm9kZT59XHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZVJlZi5wcm90b3R5cGUuY2FsY0luZGV4ZWRTbGljZSA9IGZ1bmN0aW9uIChjb21wbGV0ZVNlcnZlckRhdGEsIHN0YXJ0UG9zdCwgY291bnQsIHJldmVyc2UsIGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVUcmVlXy5jYWxjSW5kZXhlZFNsaWNlKHRoaXMudHJlZVBhdGhfLCBjb21wbGV0ZVNlcnZlckRhdGEsIHN0YXJ0UG9zdCwgY291bnQsIHJldmVyc2UsIGluZGV4KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBjb21wbGV0ZSBjaGlsZCBmb3IgYSBnaXZlbiBzZXJ2ZXIgc25hcCBhZnRlciBhcHBseWluZyBhbGwgdXNlciB3cml0ZXMgb3IgbnVsbCBpZiB0aGVyZSBpcyBub1xyXG4gICAgICogY29tcGxldGUgY2hpbGQgZm9yIHRoaXMgQ2hpbGRLZXkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBjaGlsZEtleVxyXG4gICAgICogQHBhcmFtIHshQ2FjaGVOb2RlfSBleGlzdGluZ1NlcnZlckNhY2hlXHJcbiAgICAgKiBAcmV0dXJuIHs/Tm9kZX1cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlUmVmLnByb3RvdHlwZS5jYWxjQ29tcGxldGVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZEtleSwgZXhpc3RpbmdTZXJ2ZXJDYWNoZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlVHJlZV8uY2FsY0NvbXBsZXRlQ2hpbGQodGhpcy50cmVlUGF0aF8sIGNoaWxkS2V5LCBleGlzdGluZ1NlcnZlckNhY2hlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBhIFdyaXRlVHJlZVJlZiBmb3IgYSBjaGlsZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2hpbGROYW1lXHJcbiAgICAgKiBAcmV0dXJuIHshV3JpdGVUcmVlUmVmfVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWVSZWYucHJvdG90eXBlLmNoaWxkID0gZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgV3JpdGVUcmVlUmVmKHRoaXMudHJlZVBhdGhfLmNoaWxkKGNoaWxkTmFtZSksIHRoaXMud3JpdGVUcmVlXyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdyaXRlVHJlZVJlZjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBTeW5jVHJlZSBpcyB0aGUgY2VudHJhbCBjbGFzcyBmb3IgbWFuYWdpbmcgZXZlbnQgY2FsbGJhY2sgcmVnaXN0cmF0aW9uLCBkYXRhIGNhY2hpbmcsIHZpZXdzXHJcbiAqIChxdWVyeSBwcm9jZXNzaW5nKSwgYW5kIGV2ZW50IGdlbmVyYXRpb24uICBUaGVyZSBhcmUgdHlwaWNhbGx5IHR3byBTeW5jVHJlZSBpbnN0YW5jZXMgZm9yXHJcbiAqIGVhY2ggUmVwbywgb25lIGZvciB0aGUgbm9ybWFsIEZpcmViYXNlIGRhdGEsIGFuZCBvbmUgZm9yIHRoZSAuaW5mbyBkYXRhLlxyXG4gKlxyXG4gKiBJdCBoYXMgYSBudW1iZXIgb2YgcmVzcG9uc2liaWxpdGllcywgaW5jbHVkaW5nOlxyXG4gKiAgLSBUcmFja2luZyBhbGwgdXNlciBldmVudCBjYWxsYmFja3MgKHJlZ2lzdGVyZWQgdmlhIGFkZEV2ZW50UmVnaXN0cmF0aW9uKCkgYW5kIHJlbW92ZUV2ZW50UmVnaXN0cmF0aW9uKCkpLlxyXG4gKiAgLSBBcHBseWluZyBhbmQgY2FjaGluZyBkYXRhIGNoYW5nZXMgZm9yIHVzZXIgc2V0KCksIHRyYW5zYWN0aW9uKCksIGFuZCB1cGRhdGUoKSBjYWxsc1xyXG4gKiAgICAoYXBwbHlVc2VyT3ZlcndyaXRlKCksIGFwcGx5VXNlck1lcmdlKCkpLlxyXG4gKiAgLSBBcHBseWluZyBhbmQgY2FjaGluZyBkYXRhIGNoYW5nZXMgZm9yIHNlcnZlciBkYXRhIGNoYW5nZXMgKGFwcGx5U2VydmVyT3ZlcndyaXRlKCksXHJcbiAqICAgIGFwcGx5U2VydmVyTWVyZ2UoKSkuXHJcbiAqICAtIEdlbmVyYXRpbmcgdXNlci1mYWNpbmcgZXZlbnRzIGZvciBzZXJ2ZXIgYW5kIHVzZXIgY2hhbmdlcyAoYWxsIG9mIHRoZSBhcHBseSogbWV0aG9kc1xyXG4gKiAgICByZXR1cm4gdGhlIHNldCBvZiBldmVudHMgdGhhdCBuZWVkIHRvIGJlIHJhaXNlZCBhcyBhIHJlc3VsdCkuXHJcbiAqICAtIE1haW50YWluaW5nIHRoZSBhcHByb3ByaWF0ZSBzZXQgb2Ygc2VydmVyIGxpc3RlbnMgdG8gZW5zdXJlIHdlIGFyZSBhbHdheXMgc3Vic2NyaWJlZFxyXG4gKiAgICB0byB0aGUgY29ycmVjdCBzZXQgb2YgcGF0aHMgYW5kIHF1ZXJpZXMgdG8gc2F0aXNmeSB0aGUgY3VycmVudCBzZXQgb2YgdXNlciBldmVudFxyXG4gKiAgICBjYWxsYmFja3MgKGxpc3RlbnMgYXJlIHN0YXJ0ZWQvc3RvcHBlZCB1c2luZyB0aGUgcHJvdmlkZWQgbGlzdGVuUHJvdmlkZXIpLlxyXG4gKlxyXG4gKiBOT1RFOiBBbHRob3VnaCBTeW5jVHJlZSB0cmFja3MgZXZlbnQgY2FsbGJhY2tzIGFuZCBjYWxjdWxhdGVzIGV2ZW50cyB0byByYWlzZSwgdGhlIGFjdHVhbFxyXG4gKiBldmVudHMgYXJlIHJldHVybmVkIHRvIHRoZSBjYWxsZXIgcmF0aGVyIHRoYW4gcmFpc2VkIHN5bmNocm9ub3VzbHkuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFN5bmNUcmVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFMaXN0ZW5Qcm92aWRlcn0gbGlzdGVuUHJvdmlkZXJfIFVzZWQgYnkgU3luY1RyZWUgdG8gc3RhcnQgLyBzdG9wIGxpc3RlbmluZ1xyXG4gICAgICogICB0byBzZXJ2ZXIgZGF0YS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gU3luY1RyZWUobGlzdGVuUHJvdmlkZXJfKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5Qcm92aWRlcl8gPSBsaXN0ZW5Qcm92aWRlcl87XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVHJlZSBvZiBTeW5jUG9pbnRzLiAgVGhlcmUncyBhIFN5bmNQb2ludCBhdCBhbnkgbG9jYXRpb24gdGhhdCBoYXMgMSBvciBtb3JlIHZpZXdzLlxyXG4gICAgICAgICAqIEB0eXBlIHshSW1tdXRhYmxlVHJlZS48IVN5bmNQb2ludD59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnN5bmNQb2ludFRyZWVfID0gSW1tdXRhYmxlVHJlZS5FbXB0eTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIHRyZWUgb2YgYWxsIHBlbmRpbmcgdXNlciB3cml0ZXMgKHVzZXItaW5pdGlhdGVkIHNldCgpJ3MsIHRyYW5zYWN0aW9uKCkncywgdXBkYXRlKCkncywgZXRjLikuXHJcbiAgICAgICAgICogQHR5cGUgeyFXcml0ZVRyZWV9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnBlbmRpbmdXcml0ZVRyZWVfID0gbmV3IFdyaXRlVHJlZSgpO1xyXG4gICAgICAgIHRoaXMudGFnVG9RdWVyeU1hcF8gPSB7fTtcclxuICAgICAgICB0aGlzLnF1ZXJ5VG9UYWdNYXBfID0ge307XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IHRoZSBkYXRhIGNoYW5nZXMgZm9yIGEgdXNlci1nZW5lcmF0ZWQgc2V0KCkgb3IgdHJhbnNhY3Rpb24oKSBjYWxsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5ld0RhdGFcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3cml0ZUlkXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2aXNpYmxlXHJcbiAgICAgKiBAcmV0dXJuIHshQXJyYXkuPCFFdmVudD59IEV2ZW50cyB0byByYWlzZS5cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFwcGx5VXNlck92ZXJ3cml0ZSA9IGZ1bmN0aW9uIChwYXRoLCBuZXdEYXRhLCB3cml0ZUlkLCB2aXNpYmxlKSB7XHJcbiAgICAgICAgLy8gUmVjb3JkIHBlbmRpbmcgd3JpdGUuXHJcbiAgICAgICAgdGhpcy5wZW5kaW5nV3JpdGVUcmVlXy5hZGRPdmVyd3JpdGUocGF0aCwgbmV3RGF0YSwgd3JpdGVJZCwgdmlzaWJsZSk7XHJcbiAgICAgICAgaWYgKCF2aXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5T3BlcmF0aW9uVG9TeW5jUG9pbnRzXyhuZXcgT3ZlcndyaXRlKE9wZXJhdGlvblNvdXJjZS5Vc2VyLCBwYXRoLCBuZXdEYXRhKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgdGhlIGRhdGEgZnJvbSBhIHVzZXItZ2VuZXJhdGVkIHVwZGF0ZSgpIGNhbGxcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0geyFPYmplY3QuPHN0cmluZywgIU5vZGU+fSBjaGFuZ2VkQ2hpbGRyZW5cclxuICAgICAqIEBwYXJhbSB7IW51bWJlcn0gd3JpdGVJZFxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fSBFdmVudHMgdG8gcmFpc2UuXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5hcHBseVVzZXJNZXJnZSA9IGZ1bmN0aW9uIChwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4sIHdyaXRlSWQpIHtcclxuICAgICAgICAvLyBSZWNvcmQgcGVuZGluZyBtZXJnZS5cclxuICAgICAgICB0aGlzLnBlbmRpbmdXcml0ZVRyZWVfLmFkZE1lcmdlKHBhdGgsIGNoYW5nZWRDaGlsZHJlbiwgd3JpdGVJZCk7XHJcbiAgICAgICAgdmFyIGNoYW5nZVRyZWUgPSBJbW11dGFibGVUcmVlLmZyb21PYmplY3QoY2hhbmdlZENoaWxkcmVuKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseU9wZXJhdGlvblRvU3luY1BvaW50c18obmV3IE1lcmdlKE9wZXJhdGlvblNvdXJjZS5Vc2VyLCBwYXRoLCBjaGFuZ2VUcmVlKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBY2tub3dsZWRnZSBhIHBlbmRpbmcgdXNlciB3cml0ZSB0aGF0IHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgd2l0aCBhcHBseVVzZXJPdmVyd3JpdGUoKSBvciBhcHBseVVzZXJNZXJnZSgpLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IW51bWJlcn0gd3JpdGVJZFxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gcmV2ZXJ0IFRydWUgaWYgdGhlIGdpdmVuIHdyaXRlIGZhaWxlZCBhbmQgbmVlZHMgdG8gYmUgcmV2ZXJ0ZWRcclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUV2ZW50Pn0gRXZlbnRzIHRvIHJhaXNlLlxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5wcm90b3R5cGUuYWNrVXNlcldyaXRlID0gZnVuY3Rpb24gKHdyaXRlSWQsIHJldmVydCkge1xyXG4gICAgICAgIGlmIChyZXZlcnQgPT09IHZvaWQgMCkgeyByZXZlcnQgPSBmYWxzZTsgfVxyXG4gICAgICAgIHZhciB3cml0ZSA9IHRoaXMucGVuZGluZ1dyaXRlVHJlZV8uZ2V0V3JpdGUod3JpdGVJZCk7XHJcbiAgICAgICAgdmFyIG5lZWRUb1JlZXZhbHVhdGUgPSB0aGlzLnBlbmRpbmdXcml0ZVRyZWVfLnJlbW92ZVdyaXRlKHdyaXRlSWQpO1xyXG4gICAgICAgIGlmICghbmVlZFRvUmVldmFsdWF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgYWZmZWN0ZWRUcmVlXzEgPSBJbW11dGFibGVUcmVlLkVtcHR5O1xyXG4gICAgICAgICAgICBpZiAod3JpdGUuc25hcCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBvdmVyd3JpdGVcclxuICAgICAgICAgICAgICAgIGFmZmVjdGVkVHJlZV8xID0gYWZmZWN0ZWRUcmVlXzEuc2V0KFBhdGguRW1wdHksIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5mb3JFYWNoKHdyaXRlLmNoaWxkcmVuLCBmdW5jdGlvbiAocGF0aFN0cmluZywgbm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkVHJlZV8xID0gYWZmZWN0ZWRUcmVlXzEuc2V0KG5ldyBQYXRoKHBhdGhTdHJpbmcpLCBub2RlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5T3BlcmF0aW9uVG9TeW5jUG9pbnRzXyhuZXcgQWNrVXNlcldyaXRlKHdyaXRlLnBhdGgsIGFmZmVjdGVkVHJlZV8xLCByZXZlcnQpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBuZXcgc2VydmVyIGRhdGEgZm9yIHRoZSBzcGVjaWZpZWQgcGF0aC4uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gbmV3RGF0YVxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fSBFdmVudHMgdG8gcmFpc2UuXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5hcHBseVNlcnZlck92ZXJ3cml0ZSA9IGZ1bmN0aW9uIChwYXRoLCBuZXdEYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlPcGVyYXRpb25Ub1N5bmNQb2ludHNfKG5ldyBPdmVyd3JpdGUoT3BlcmF0aW9uU291cmNlLlNlcnZlciwgcGF0aCwgbmV3RGF0YSkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgbmV3IHNlcnZlciBkYXRhIHRvIGJlIG1lcmdlZCBpbiBhdCB0aGUgc3BlY2lmaWVkIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshT2JqZWN0LjxzdHJpbmcsICFOb2RlPn0gY2hhbmdlZENoaWxkcmVuXHJcbiAgICAgKiBAcmV0dXJuIHshQXJyYXkuPCFFdmVudD59IEV2ZW50cyB0byByYWlzZS5cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFwcGx5U2VydmVyTWVyZ2UgPSBmdW5jdGlvbiAocGF0aCwgY2hhbmdlZENoaWxkcmVuKSB7XHJcbiAgICAgICAgdmFyIGNoYW5nZVRyZWUgPSBJbW11dGFibGVUcmVlLmZyb21PYmplY3QoY2hhbmdlZENoaWxkcmVuKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseU9wZXJhdGlvblRvU3luY1BvaW50c18obmV3IE1lcmdlKE9wZXJhdGlvblNvdXJjZS5TZXJ2ZXIsIHBhdGgsIGNoYW5nZVRyZWUpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IGEgbGlzdGVuIGNvbXBsZXRlIGZvciBhIHF1ZXJ5XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fSBFdmVudHMgdG8gcmFpc2UuXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5hcHBseUxpc3RlbkNvbXBsZXRlID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseU9wZXJhdGlvblRvU3luY1BvaW50c18obmV3IExpc3RlbkNvbXBsZXRlKE9wZXJhdGlvblNvdXJjZS5TZXJ2ZXIsIHBhdGgpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IG5ldyBzZXJ2ZXIgZGF0YSBmb3IgdGhlIHNwZWNpZmllZCB0YWdnZWQgcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gc25hcFxyXG4gICAgICogQHBhcmFtIHshbnVtYmVyfSB0YWdcclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUV2ZW50Pn0gRXZlbnRzIHRvIHJhaXNlLlxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5wcm90b3R5cGUuYXBwbHlUYWdnZWRRdWVyeU92ZXJ3cml0ZSA9IGZ1bmN0aW9uIChwYXRoLCBzbmFwLCB0YWcpIHtcclxuICAgICAgICB2YXIgcXVlcnlLZXkgPSB0aGlzLnF1ZXJ5S2V5Rm9yVGFnXyh0YWcpO1xyXG4gICAgICAgIGlmIChxdWVyeUtleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciByID0gU3luY1RyZWUucGFyc2VRdWVyeUtleV8ocXVlcnlLZXkpO1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlQYXRoID0gci5wYXRoLCBxdWVyeUlkID0gci5xdWVyeUlkO1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmVQYXRoID0gUGF0aC5yZWxhdGl2ZVBhdGgocXVlcnlQYXRoLCBwYXRoKTtcclxuICAgICAgICAgICAgdmFyIG9wID0gbmV3IE92ZXJ3cml0ZShPcGVyYXRpb25Tb3VyY2UuZm9yU2VydmVyVGFnZ2VkUXVlcnkocXVlcnlJZCksIHJlbGF0aXZlUGF0aCwgc25hcCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5VGFnZ2VkT3BlcmF0aW9uXyhxdWVyeVBhdGgsIG9wKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFF1ZXJ5IG11c3QgaGF2ZSBiZWVuIHJlbW92ZWQgYWxyZWFkeVxyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgc2VydmVyIGRhdGEgdG8gYmUgbWVyZ2VkIGluIGZvciB0aGUgc3BlY2lmaWVkIHRhZ2dlZCBxdWVyeS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0geyFPYmplY3QuPHN0cmluZywgIU5vZGU+fSBjaGFuZ2VkQ2hpbGRyZW5cclxuICAgICAqIEBwYXJhbSB7IW51bWJlcn0gdGFnXHJcbiAgICAgKiBAcmV0dXJuIHshQXJyYXkuPCFFdmVudD59IEV2ZW50cyB0byByYWlzZS5cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFwcGx5VGFnZ2VkUXVlcnlNZXJnZSA9IGZ1bmN0aW9uIChwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4sIHRhZykge1xyXG4gICAgICAgIHZhciBxdWVyeUtleSA9IHRoaXMucXVlcnlLZXlGb3JUYWdfKHRhZyk7XHJcbiAgICAgICAgaWYgKHF1ZXJ5S2V5KSB7XHJcbiAgICAgICAgICAgIHZhciByID0gU3luY1RyZWUucGFyc2VRdWVyeUtleV8ocXVlcnlLZXkpO1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlQYXRoID0gci5wYXRoLCBxdWVyeUlkID0gci5xdWVyeUlkO1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmVQYXRoID0gUGF0aC5yZWxhdGl2ZVBhdGgocXVlcnlQYXRoLCBwYXRoKTtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZVRyZWUgPSBJbW11dGFibGVUcmVlLmZyb21PYmplY3QoY2hhbmdlZENoaWxkcmVuKTtcclxuICAgICAgICAgICAgdmFyIG9wID0gbmV3IE1lcmdlKE9wZXJhdGlvblNvdXJjZS5mb3JTZXJ2ZXJUYWdnZWRRdWVyeShxdWVyeUlkKSwgcmVsYXRpdmVQYXRoLCBjaGFuZ2VUcmVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlUYWdnZWRPcGVyYXRpb25fKHF1ZXJ5UGF0aCwgb3ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gV2UndmUgYWxyZWFkeSByZW1vdmVkIHRoZSBxdWVyeS4gTm8gYmlnIGRlYWwsIGlnbm9yZSB0aGUgdXBkYXRlXHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBhIGxpc3RlbiBjb21wbGV0ZSBmb3IgYSB0YWdnZWQgcXVlcnlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IHRhZ1xyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fSBFdmVudHMgdG8gcmFpc2UuXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5hcHBseVRhZ2dlZExpc3RlbkNvbXBsZXRlID0gZnVuY3Rpb24gKHBhdGgsIHRhZykge1xyXG4gICAgICAgIHZhciBxdWVyeUtleSA9IHRoaXMucXVlcnlLZXlGb3JUYWdfKHRhZyk7XHJcbiAgICAgICAgaWYgKHF1ZXJ5S2V5KSB7XHJcbiAgICAgICAgICAgIHZhciByID0gU3luY1RyZWUucGFyc2VRdWVyeUtleV8ocXVlcnlLZXkpO1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlQYXRoID0gci5wYXRoLCBxdWVyeUlkID0gci5xdWVyeUlkO1xyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmVQYXRoID0gUGF0aC5yZWxhdGl2ZVBhdGgocXVlcnlQYXRoLCBwYXRoKTtcclxuICAgICAgICAgICAgdmFyIG9wID0gbmV3IExpc3RlbkNvbXBsZXRlKE9wZXJhdGlvblNvdXJjZS5mb3JTZXJ2ZXJUYWdnZWRRdWVyeShxdWVyeUlkKSwgcmVsYXRpdmVQYXRoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlUYWdnZWRPcGVyYXRpb25fKHF1ZXJ5UGF0aCwgb3ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gV2UndmUgYWxyZWFkeSByZW1vdmVkIHRoZSBxdWVyeS4gTm8gYmlnIGRlYWwsIGlnbm9yZSB0aGUgdXBkYXRlXHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYW4gZXZlbnQgY2FsbGJhY2sgZm9yIHRoZSBzcGVjaWZpZWQgcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUXVlcnl9IHF1ZXJ5XHJcbiAgICAgKiBAcGFyYW0geyFFdmVudFJlZ2lzdHJhdGlvbn0gZXZlbnRSZWdpc3RyYXRpb25cclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUV2ZW50Pn0gRXZlbnRzIHRvIHJhaXNlLlxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5wcm90b3R5cGUuYWRkRXZlbnRSZWdpc3RyYXRpb24gPSBmdW5jdGlvbiAocXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIHBhdGggPSBxdWVyeS5wYXRoO1xyXG4gICAgICAgIHZhciBzZXJ2ZXJDYWNoZSA9IG51bGw7XHJcbiAgICAgICAgdmFyIGZvdW5kQW5jZXN0b3JEZWZhdWx0VmlldyA9IGZhbHNlO1xyXG4gICAgICAgIC8vIEFueSBjb3ZlcmluZyB3cml0ZXMgd2lsbCBuZWNlc3NhcmlseSBiZSBhdCB0aGUgcm9vdCwgc28gcmVhbGx5IGFsbCB3ZSBuZWVkIHRvIGZpbmQgaXMgdGhlIHNlcnZlciBjYWNoZS5cclxuICAgICAgICAvLyBDb25zaWRlciBvcHRpbWl6aW5nIHRoaXMgb25jZSB0aGVyZSdzIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2Ygd2hhdCBhY3R1YWwgYmVoYXZpb3Igd2lsbCBiZS5cclxuICAgICAgICB0aGlzLnN5bmNQb2ludFRyZWVfLmZvcmVhY2hPblBhdGgocGF0aCwgZnVuY3Rpb24gKHBhdGhUb1N5bmNQb2ludCwgc3ApIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlUGF0aCA9IFBhdGgucmVsYXRpdmVQYXRoKHBhdGhUb1N5bmNQb2ludCwgcGF0aCk7XHJcbiAgICAgICAgICAgIHNlcnZlckNhY2hlID0gc2VydmVyQ2FjaGUgfHwgc3AuZ2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShyZWxhdGl2ZVBhdGgpO1xyXG4gICAgICAgICAgICBmb3VuZEFuY2VzdG9yRGVmYXVsdFZpZXcgPVxyXG4gICAgICAgICAgICAgICAgZm91bmRBbmNlc3RvckRlZmF1bHRWaWV3IHx8IHNwLmhhc0NvbXBsZXRlVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBzeW5jUG9pbnQgPSB0aGlzLnN5bmNQb2ludFRyZWVfLmdldChwYXRoKTtcclxuICAgICAgICBpZiAoIXN5bmNQb2ludCkge1xyXG4gICAgICAgICAgICBzeW5jUG9pbnQgPSBuZXcgU3luY1BvaW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3luY1BvaW50VHJlZV8gPSB0aGlzLnN5bmNQb2ludFRyZWVfLnNldChwYXRoLCBzeW5jUG9pbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm91bmRBbmNlc3RvckRlZmF1bHRWaWV3ID1cclxuICAgICAgICAgICAgICAgIGZvdW5kQW5jZXN0b3JEZWZhdWx0VmlldyB8fCBzeW5jUG9pbnQuaGFzQ29tcGxldGVWaWV3KCk7XHJcbiAgICAgICAgICAgIHNlcnZlckNhY2hlID0gc2VydmVyQ2FjaGUgfHwgc3luY1BvaW50LmdldENvbXBsZXRlU2VydmVyQ2FjaGUoUGF0aC5FbXB0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzZXJ2ZXJDYWNoZUNvbXBsZXRlO1xyXG4gICAgICAgIGlmIChzZXJ2ZXJDYWNoZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHNlcnZlckNhY2hlQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2VydmVyQ2FjaGVDb21wbGV0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZXJ2ZXJDYWNoZSA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgICAgICB2YXIgc3VidHJlZSA9IHRoaXMuc3luY1BvaW50VHJlZV8uc3VidHJlZShwYXRoKTtcclxuICAgICAgICAgICAgc3VidHJlZS5mb3JlYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGRTeW5jUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZUNhY2hlID0gY2hpbGRTeW5jUG9pbnQuZ2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShQYXRoLkVtcHR5KTtcclxuICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZUNhY2hlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyQ2FjaGUgPSBzZXJ2ZXJDYWNoZS51cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUsIGNvbXBsZXRlQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZpZXdBbHJlYWR5RXhpc3RzID0gc3luY1BvaW50LnZpZXdFeGlzdHNGb3JRdWVyeShxdWVyeSk7XHJcbiAgICAgICAgaWYgKCF2aWV3QWxyZWFkeUV4aXN0cyAmJiAhcXVlcnkuZ2V0UXVlcnlQYXJhbXMoKS5sb2Fkc0FsbERhdGEoKSkge1xyXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHRyYWNrIGEgdGFnIGZvciB0aGlzIHF1ZXJ5XHJcbiAgICAgICAgICAgIHZhciBxdWVyeUtleSA9IFN5bmNUcmVlLm1ha2VRdWVyeUtleV8ocXVlcnkpO1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydCghKHF1ZXJ5S2V5IGluIHRoaXMucXVlcnlUb1RhZ01hcF8pLCAnVmlldyBkb2VzIG5vdCBleGlzdCwgYnV0IHdlIGhhdmUgYSB0YWcnKTtcclxuICAgICAgICAgICAgdmFyIHRhZyA9IFN5bmNUcmVlLmdldE5leHRRdWVyeVRhZ18oKTtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeVRvVGFnTWFwX1txdWVyeUtleV0gPSB0YWc7XHJcbiAgICAgICAgICAgIC8vIENvZXJjZSB0byBzdHJpbmcgdG8gYXZvaWQgc3BhcnNlIGFycmF5cy5cclxuICAgICAgICAgICAgdGhpcy50YWdUb1F1ZXJ5TWFwX1snXycgKyB0YWddID0gcXVlcnlLZXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB3cml0ZXNDYWNoZSA9IHRoaXMucGVuZGluZ1dyaXRlVHJlZV8uY2hpbGRXcml0ZXMocGF0aCk7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IHN5bmNQb2ludC5hZGRFdmVudFJlZ2lzdHJhdGlvbihxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24sIHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZSwgc2VydmVyQ2FjaGVDb21wbGV0ZSk7XHJcbiAgICAgICAgaWYgKCF2aWV3QWxyZWFkeUV4aXN0cyAmJiAhZm91bmRBbmNlc3RvckRlZmF1bHRWaWV3KSB7XHJcbiAgICAgICAgICAgIHZhciB2aWV3IC8qKiBAdHlwZSAhVmlldyAqLyA9IHN5bmNQb2ludC52aWV3Rm9yUXVlcnkocXVlcnkpO1xyXG4gICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHRoaXMuc2V0dXBMaXN0ZW5lcl8ocXVlcnksIHZpZXcpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50cztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBldmVudCBjYWxsYmFjayhzKS5cclxuICAgICAqXHJcbiAgICAgKiBJZiBxdWVyeSBpcyB0aGUgZGVmYXVsdCBxdWVyeSwgd2UnbGwgY2hlY2sgYWxsIHF1ZXJpZXMgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnRSZWdpc3RyYXRpb24uXHJcbiAgICAgKiBJZiBldmVudFJlZ2lzdHJhdGlvbiBpcyBudWxsLCB3ZSdsbCByZW1vdmUgYWxsIGNhbGxiYWNrcyBmb3IgdGhlIHNwZWNpZmllZCBxdWVyeS9xdWVyaWVzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5fSBxdWVyeVxyXG4gICAgICogQHBhcmFtIHs/RXZlbnRSZWdpc3RyYXRpb259IGV2ZW50UmVnaXN0cmF0aW9uIElmIG51bGwsIGFsbCBjYWxsYmFja3MgYXJlIHJlbW92ZWQuXHJcbiAgICAgKiBAcGFyYW0ge0Vycm9yPX0gY2FuY2VsRXJyb3IgSWYgYSBjYW5jZWxFcnJvciBpcyBwcm92aWRlZCwgYXBwcm9wcmlhdGUgY2FuY2VsIGV2ZW50cyB3aWxsIGJlIHJldHVybmVkLlxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fSBDYW5jZWwgZXZlbnRzLCBpZiBjYW5jZWxFcnJvciB3YXMgcHJvdmlkZWQuXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5yZW1vdmVFdmVudFJlZ2lzdHJhdGlvbiA9IGZ1bmN0aW9uIChxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24sIGNhbmNlbEVycm9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBGaW5kIHRoZSBzeW5jUG9pbnQgZmlyc3QuIFRoZW4gZGVhbCB3aXRoIHdoZXRoZXIgb3Igbm90IGl0IGhhcyBtYXRjaGluZyBsaXN0ZW5lcnNcclxuICAgICAgICB2YXIgcGF0aCA9IHF1ZXJ5LnBhdGg7XHJcbiAgICAgICAgdmFyIG1heWJlU3luY1BvaW50ID0gdGhpcy5zeW5jUG9pbnRUcmVlXy5nZXQocGF0aCk7XHJcbiAgICAgICAgdmFyIGNhbmNlbEV2ZW50cyA9IFtdO1xyXG4gICAgICAgIC8vIEEgcmVtb3ZhbCBvbiBhIGRlZmF1bHQgcXVlcnkgYWZmZWN0cyBhbGwgcXVlcmllcyBhdCB0aGF0IGxvY2F0aW9uLiBBIHJlbW92YWwgb24gYW4gaW5kZXhlZCBxdWVyeSwgZXZlbiBvbmUgd2l0aG91dFxyXG4gICAgICAgIC8vIG90aGVyIHF1ZXJ5IGNvbnN0cmFpbnRzLCBkb2VzICpub3QqIGFmZmVjdCBhbGwgcXVlcmllcyBhdCB0aGF0IGxvY2F0aW9uLiBTbyB0aGlzIGNoZWNrIG11c3QgYmUgZm9yICdkZWZhdWx0JywgYW5kXHJcbiAgICAgICAgLy8gbm90IGxvYWRzQWxsRGF0YSgpLlxyXG4gICAgICAgIGlmIChtYXliZVN5bmNQb2ludCAmJlxyXG4gICAgICAgICAgICAocXVlcnkucXVlcnlJZGVudGlmaWVyKCkgPT09ICdkZWZhdWx0JyB8fFxyXG4gICAgICAgICAgICAgICAgbWF5YmVTeW5jUG9pbnQudmlld0V4aXN0c0ZvclF1ZXJ5KHF1ZXJ5KSkpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHt7cmVtb3ZlZDogIUFycmF5LjwhUXVlcnk+LCBldmVudHM6ICFBcnJheS48IUV2ZW50Pn19XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlZEFuZEV2ZW50cyA9IG1heWJlU3luY1BvaW50LnJlbW92ZUV2ZW50UmVnaXN0cmF0aW9uKHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbiwgY2FuY2VsRXJyb3IpO1xyXG4gICAgICAgICAgICBpZiAobWF5YmVTeW5jUG9pbnQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN5bmNQb2ludFRyZWVfID0gdGhpcy5zeW5jUG9pbnRUcmVlXy5yZW1vdmUocGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlbW92ZWQgPSByZW1vdmVkQW5kRXZlbnRzLnJlbW92ZWQ7XHJcbiAgICAgICAgICAgIGNhbmNlbEV2ZW50cyA9IHJlbW92ZWRBbmRFdmVudHMuZXZlbnRzO1xyXG4gICAgICAgICAgICAvLyBXZSBtYXkgaGF2ZSBqdXN0IHJlbW92ZWQgb25lIG9mIG1hbnkgbGlzdGVuZXJzIGFuZCBjYW4gc2hvcnQtY2lyY3VpdCB0aGlzIHdob2xlIHByb2Nlc3NcclxuICAgICAgICAgICAgLy8gV2UgbWF5IGFsc28gbm90IGhhdmUgcmVtb3ZlZCBhIGRlZmF1bHQgbGlzdGVuZXIsIGluIHdoaWNoIGNhc2UgYWxsIG9mIHRoZSBkZXNjZW5kYW50IGxpc3RlbmVycyBzaG91bGQgYWxyZWFkeSBiZVxyXG4gICAgICAgICAgICAvLyBwcm9wZXJseSBzZXQgdXAuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vIFNpbmNlIGluZGV4ZWQgcXVlcmllcyBjYW4gc2hhZG93IGlmIHRoZXkgZG9uJ3QgaGF2ZSBvdGhlciBxdWVyeSBjb25zdHJhaW50cywgY2hlY2sgZm9yIGxvYWRzQWxsRGF0YSgpLCBpbnN0ZWFkIG9mXHJcbiAgICAgICAgICAgIC8vIHF1ZXJ5SWQgPT09ICdkZWZhdWx0J1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZpbmdEZWZhdWx0ID0gLTEgIT09XHJcbiAgICAgICAgICAgICAgICByZW1vdmVkLmZpbmRJbmRleChmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnkuZ2V0UXVlcnlQYXJhbXMoKS5sb2Fkc0FsbERhdGEoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgY292ZXJlZCA9IHRoaXMuc3luY1BvaW50VHJlZV8uZmluZE9uUGF0aChwYXRoLCBmdW5jdGlvbiAocmVsYXRpdmVQYXRoLCBwYXJlbnRTeW5jUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRTeW5jUG9pbnQuaGFzQ29tcGxldGVWaWV3KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAocmVtb3ZpbmdEZWZhdWx0ICYmICFjb3ZlcmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3VidHJlZSA9IHRoaXMuc3luY1BvaW50VHJlZV8uc3VidHJlZShwYXRoKTtcclxuICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBwb3RlbnRpYWxseSBjaGlsZCBsaXN0ZW5lcnMuIERldGVybWluZSB3aGF0IGlmIGFueSBsaXN0ZW5zIHdlIG5lZWQgdG8gc2VuZCBiZWZvcmUgZXhlY3V0aW5nIHRoZVxyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZhbFxyXG4gICAgICAgICAgICAgICAgaWYgKCFzdWJ0cmVlLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZm9sZCBvdmVyIG91ciBzdWJ0cmVlIGFuZCBjb2xsZWN0IHRoZSBsaXN0ZW5lcnMgdG8gc2VuZFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdWaWV3cyA9IHRoaXMuY29sbGVjdERpc3RpbmN0Vmlld3NGb3JTdWJUcmVlXyhzdWJ0cmVlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBPaywgd2UndmUgY29sbGVjdGVkIGFsbCB0aGUgbGlzdGVucyB3ZSBuZWVkLiBTZXQgdGhlbSB1cC5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1ZpZXdzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3Vmlld3NbaV0sIG5ld1F1ZXJ5ID0gdmlldy5nZXRRdWVyeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSB0aGlzLmNyZWF0ZUxpc3RlbmVyRm9yVmlld18odmlldyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuUHJvdmlkZXJfLnN0YXJ0TGlzdGVuaW5nKFN5bmNUcmVlLnF1ZXJ5Rm9yTGlzdGVuaW5nXyhuZXdRdWVyeSksIHRoaXMudGFnRm9yUXVlcnlfKG5ld1F1ZXJ5KSwgbGlzdGVuZXIuaGFzaEZuLCBsaXN0ZW5lci5vbkNvbXBsZXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gSWYgd2UgcmVtb3ZlZCBhbnl0aGluZyBhbmQgd2UncmUgbm90IGNvdmVyZWQgYnkgYSBoaWdoZXIgdXAgbGlzdGVuLCB3ZSBuZWVkIHRvIHN0b3AgbGlzdGVuaW5nIG9uIHRoaXMgcXVlcnlcclxuICAgICAgICAgICAgLy8gVGhlIGFib3ZlIGJsb2NrIGhhcyB1cyBjb3ZlcmVkIGluIHRlcm1zIG9mIG1ha2luZyBzdXJlIHdlJ3JlIHNldCB1cCBvbiBsaXN0ZW5zIGxvd2VyIGluIHRoZSB0cmVlLlxyXG4gICAgICAgICAgICAvLyBBbHNvLCBub3RlIHRoYXQgaWYgd2UgaGF2ZSBhIGNhbmNlbEVycm9yLCBpdCdzIGFscmVhZHkgYmVlbiByZW1vdmVkIGF0IHRoZSBwcm92aWRlciBsZXZlbC5cclxuICAgICAgICAgICAgaWYgKCFjb3ZlcmVkICYmIHJlbW92ZWQubGVuZ3RoID4gMCAmJiAhY2FuY2VsRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlbW92ZWQgYSBkZWZhdWx0LCB0aGVuIHdlIHdlcmVuJ3QgbGlzdGVuaW5nIG9uIGFueSBvZiB0aGUgb3RoZXIgcXVlcmllcyBoZXJlLiBKdXN0IGNhbmNlbCB0aGUgb25lXHJcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0LiBPdGhlcndpc2UsIHdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIGFuZCBjYW5jZWwgZWFjaCBpbmRpdmlkdWFsIHF1ZXJ5XHJcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZpbmdEZWZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgdGFnIGRlZmF1bHQgbGlzdGVuZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRUYWcgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuUHJvdmlkZXJfLnN0b3BMaXN0ZW5pbmcoU3luY1RyZWUucXVlcnlGb3JMaXN0ZW5pbmdfKHF1ZXJ5KSwgZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVkLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhZ1RvUmVtb3ZlID0gX3RoaXMucXVlcnlUb1RhZ01hcF9bU3luY1RyZWUubWFrZVF1ZXJ5S2V5XyhxdWVyeVRvUmVtb3ZlKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxpc3RlblByb3ZpZGVyXy5zdG9wTGlzdGVuaW5nKFN5bmNUcmVlLnF1ZXJ5Rm9yTGlzdGVuaW5nXyhxdWVyeVRvUmVtb3ZlKSwgdGFnVG9SZW1vdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE5vdywgY2xlYXIgYWxsIG9mIHRoZSB0YWdzIHdlJ3JlIHRyYWNraW5nIGZvciB0aGUgcmVtb3ZlZCBsaXN0ZW5zXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVGFnc18ocmVtb3ZlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjYW5jZWxFdmVudHM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgY29tcGxldGUgY2FjaGUsIGlmIHdlIGhhdmUgb25lLCBvZiB0aGUgZGF0YSBhdCBhIHBhcnRpY3VsYXIgcGF0aC4gVGhlIGxvY2F0aW9uIG11c3QgaGF2ZSBhIGxpc3RlbmVyIGFib3ZlXHJcbiAgICAgKiBpdCwgYnV0IGFzIHRoaXMgaXMgb25seSB1c2VkIGJ5IHRyYW5zYWN0aW9uIGNvZGUsIHRoYXQgc2hvdWxkIGFsd2F5cyBiZSB0aGUgY2FzZSBhbnl3YXlzLlxyXG4gICAgICpcclxuICAgICAqIE5vdGU6IHRoaXMgbWV0aG9kIHdpbGwgKmluY2x1ZGUqIGhpZGRlbiB3cml0ZXMgZnJvbSB0cmFuc2FjdGlvbiB3aXRoIGFwcGx5TG9jYWxseSBzZXQgdG8gZmFsc2UuXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoIFRoZSBwYXRoIHRvIHRoZSBkYXRhIHdlIHdhbnRcclxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj49fSB3cml0ZUlkc1RvRXhjbHVkZSBBIHNwZWNpZmljIHNldCB0byBiZSBleGNsdWRlZFxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5jYWxjQ29tcGxldGVFdmVudENhY2hlID0gZnVuY3Rpb24gKHBhdGgsIHdyaXRlSWRzVG9FeGNsdWRlKSB7XHJcbiAgICAgICAgdmFyIGluY2x1ZGVIaWRkZW5TZXRzID0gdHJ1ZTtcclxuICAgICAgICB2YXIgd3JpdGVUcmVlID0gdGhpcy5wZW5kaW5nV3JpdGVUcmVlXztcclxuICAgICAgICB2YXIgc2VydmVyQ2FjaGUgPSB0aGlzLnN5bmNQb2ludFRyZWVfLmZpbmRPblBhdGgocGF0aCwgZnVuY3Rpb24gKHBhdGhTb0Zhciwgc3luY1BvaW50KSB7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZVBhdGggPSBQYXRoLnJlbGF0aXZlUGF0aChwYXRoU29GYXIsIHBhdGgpO1xyXG4gICAgICAgICAgICB2YXIgc2VydmVyQ2FjaGUgPSBzeW5jUG9pbnQuZ2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShyZWxhdGl2ZVBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoc2VydmVyQ2FjaGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2ZXJDYWNoZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB3cml0ZVRyZWUuY2FsY0NvbXBsZXRlRXZlbnRDYWNoZShwYXRoLCBzZXJ2ZXJDYWNoZSwgd3JpdGVJZHNUb0V4Y2x1ZGUsIGluY2x1ZGVIaWRkZW5TZXRzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgY29sbGFwc2VzIG11bHRpcGxlIHVuZmlsdGVyZWQgdmlld3MgaW50byBhIHNpbmdsZSB2aWV3LCBzaW5jZSB3ZSBvbmx5IG5lZWQgYSBzaW5nbGVcclxuICAgICAqIGxpc3RlbmVyIGZvciB0aGVtLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IUltbXV0YWJsZVRyZWUuPCFTeW5jUG9pbnQ+fSBzdWJ0cmVlXHJcbiAgICAgKiBAcmV0dXJuIHshQXJyYXkuPCFWaWV3Pn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5jb2xsZWN0RGlzdGluY3RWaWV3c0ZvclN1YlRyZWVfID0gZnVuY3Rpb24gKHN1YnRyZWUpIHtcclxuICAgICAgICByZXR1cm4gc3VidHJlZS5mb2xkKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIG1heWJlQ2hpbGRTeW5jUG9pbnQsIGNoaWxkTWFwKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXliZUNoaWxkU3luY1BvaW50ICYmIG1heWJlQ2hpbGRTeW5jUG9pbnQuaGFzQ29tcGxldGVWaWV3KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZVZpZXcgPSBtYXliZUNoaWxkU3luY1BvaW50LmdldENvbXBsZXRlVmlldygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtjb21wbGV0ZVZpZXddO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTm8gY29tcGxldGUgdmlldyBoZXJlLCBmbGF0dGVuIGFueSBkZWVwZXIgbGlzdGVucyBpbnRvIGFuIGFycmF5XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlld3NfMSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1heWJlQ2hpbGRTeW5jUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3c18xID0gbWF5YmVDaGlsZFN5bmNQb2ludC5nZXRRdWVyeVZpZXdzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1dGlsLmZvckVhY2goY2hpbGRNYXAsIGZ1bmN0aW9uIChrZXksIGNoaWxkVmlld3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3c18xID0gdmlld3NfMS5jb25jYXQoY2hpbGRWaWV3cyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2aWV3c18xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48IVF1ZXJ5Pn0gcXVlcmllc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLnJlbW92ZVRhZ3NfID0gZnVuY3Rpb24gKHF1ZXJpZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHF1ZXJpZXMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgdmFyIHJlbW92ZWRRdWVyeSA9IHF1ZXJpZXNbal07XHJcbiAgICAgICAgICAgIGlmICghcmVtb3ZlZFF1ZXJ5LmdldFF1ZXJ5UGFyYW1zKCkubG9hZHNBbGxEYXRhKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZCBoYXZlIGEgdGFnIGZvciB0aGlzXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlZFF1ZXJ5S2V5ID0gU3luY1RyZWUubWFrZVF1ZXJ5S2V5XyhyZW1vdmVkUXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlbW92ZWRRdWVyeVRhZyA9IHRoaXMucXVlcnlUb1RhZ01hcF9bcmVtb3ZlZFF1ZXJ5S2V5XTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnF1ZXJ5VG9UYWdNYXBfW3JlbW92ZWRRdWVyeUtleV07XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy50YWdUb1F1ZXJ5TWFwX1snXycgKyByZW1vdmVkUXVlcnlUYWddO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTm9ybWFsaXplcyBhIHF1ZXJ5IHRvIGEgcXVlcnkgd2Ugc2VuZCB0aGUgc2VydmVyIGZvciBsaXN0ZW5pbmdcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5fSBxdWVyeVxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5fSBUaGUgbm9ybWFsaXplZCBxdWVyeVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucXVlcnlGb3JMaXN0ZW5pbmdfID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgICAgaWYgKHF1ZXJ5LmdldFF1ZXJ5UGFyYW1zKCkubG9hZHNBbGxEYXRhKCkgJiZcclxuICAgICAgICAgICAgIXF1ZXJ5LmdldFF1ZXJ5UGFyYW1zKCkuaXNEZWZhdWx0KCkpIHtcclxuICAgICAgICAgICAgLy8gV2UgdHJlYXQgcXVlcmllcyB0aGF0IGxvYWQgYWxsIGRhdGEgYXMgZGVmYXVsdCBxdWVyaWVzXHJcbiAgICAgICAgICAgIC8vIENhc3QgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgcmVmKCkgdGVjaG5pY2FsbHkgcmV0dXJucyBGaXJlYmFzZSB3aGljaCBpcyBhY3R1YWxseSBmYi5hcGkuRmlyZWJhc2Ugd2hpY2ggaW5oZXJpdHNcclxuICAgICAgICAgICAgLy8gZnJvbSBRdWVyeVxyXG4gICAgICAgICAgICByZXR1cm4gLyoqIEB0eXBlIHshUXVlcnl9ICovIHF1ZXJ5LmdldFJlZigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZvciBhIGdpdmVuIG5ldyBsaXN0ZW4sIG1hbmFnZSB0aGUgZGUtZHVwbGljYXRpb24gb2Ygb3V0c3RhbmRpbmcgc3Vic2NyaXB0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlcclxuICAgICAqIEBwYXJhbSB7IVZpZXd9IHZpZXdcclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUV2ZW50Pn0gVGhpcyBtZXRob2QgY2FuIHJldHVybiBldmVudHMgdG8gc3VwcG9ydCBzeW5jaHJvbm91cyBkYXRhIHNvdXJjZXNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5zZXR1cExpc3RlbmVyXyA9IGZ1bmN0aW9uIChxdWVyeSwgdmlldykge1xyXG4gICAgICAgIHZhciBwYXRoID0gcXVlcnkucGF0aDtcclxuICAgICAgICB2YXIgdGFnID0gdGhpcy50YWdGb3JRdWVyeV8ocXVlcnkpO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lciA9IHRoaXMuY3JlYXRlTGlzdGVuZXJGb3JWaWV3Xyh2aWV3KTtcclxuICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5saXN0ZW5Qcm92aWRlcl8uc3RhcnRMaXN0ZW5pbmcoU3luY1RyZWUucXVlcnlGb3JMaXN0ZW5pbmdfKHF1ZXJ5KSwgdGFnLCBsaXN0ZW5lci5oYXNoRm4sIGxpc3RlbmVyLm9uQ29tcGxldGUpO1xyXG4gICAgICAgIHZhciBzdWJ0cmVlID0gdGhpcy5zeW5jUG9pbnRUcmVlXy5zdWJ0cmVlKHBhdGgpO1xyXG4gICAgICAgIC8vIFRoZSByb290IG9mIHRoaXMgc3VidHJlZSBoYXMgb3VyIHF1ZXJ5LiBXZSdyZSBoZXJlIGJlY2F1c2Ugd2UgZGVmaW5pdGVseSBuZWVkIHRvIHNlbmQgYSBsaXN0ZW4gZm9yIHRoYXQsIGJ1dCB3ZVxyXG4gICAgICAgIC8vIG1heSBuZWVkIHRvIHNoYWRvdyBvdGhlciBsaXN0ZW5zIGFzIHdlbGwuXHJcbiAgICAgICAgaWYgKHRhZykge1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydCghc3VidHJlZS52YWx1ZS5oYXNDb21wbGV0ZVZpZXcoKSwgXCJJZiB3ZSdyZSBhZGRpbmcgYSBxdWVyeSwgaXQgc2hvdWxkbid0IGJlIHNoYWRvd2VkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gU2hhZG93IGV2ZXJ5dGhpbmcgYXQgb3IgYmVsb3cgdGhpcyBsb2NhdGlvbiwgdGhpcyBpcyBhIGRlZmF1bHQgbGlzdGVuZXIuXHJcbiAgICAgICAgICAgIHZhciBxdWVyaWVzVG9TdG9wID0gc3VidHJlZS5mb2xkKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIG1heWJlQ2hpbGRTeW5jUG9pbnQsIGNoaWxkTWFwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlbGF0aXZlUGF0aC5pc0VtcHR5KCkgJiZcclxuICAgICAgICAgICAgICAgICAgICBtYXliZUNoaWxkU3luY1BvaW50ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgbWF5YmVDaGlsZFN5bmNQb2ludC5oYXNDb21wbGV0ZVZpZXcoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbWF5YmVDaGlsZFN5bmNQb2ludC5nZXRDb21wbGV0ZVZpZXcoKS5nZXRRdWVyeSgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIGRlZmF1bHQgbGlzdGVuZXIgaGVyZSwgZmxhdHRlbiBhbnkgZGVlcGVyIHF1ZXJpZXMgaW50byBhbiBhcnJheVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBxdWVyaWVzXzEgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF5YmVDaGlsZFN5bmNQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyaWVzXzEgPSBxdWVyaWVzXzEuY29uY2F0KG1heWJlQ2hpbGRTeW5jUG9pbnQuZ2V0UXVlcnlWaWV3cygpLm1hcChmdW5jdGlvbiAodmlldykgeyByZXR1cm4gdmlldy5nZXRRdWVyeSgpOyB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuZm9yRWFjaChjaGlsZE1hcCwgZnVuY3Rpb24gKGtleSwgY2hpbGRRdWVyaWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJpZXNfMSA9IHF1ZXJpZXNfMS5jb25jYXQoY2hpbGRRdWVyaWVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcmllc18xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWVyaWVzVG9TdG9wLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlUb1N0b3AgPSBxdWVyaWVzVG9TdG9wW2ldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Qcm92aWRlcl8uc3RvcExpc3RlbmluZyhTeW5jVHJlZS5xdWVyeUZvckxpc3RlbmluZ18ocXVlcnlUb1N0b3ApLCB0aGlzLnRhZ0ZvclF1ZXJ5XyhxdWVyeVRvU3RvcCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBldmVudHM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshVmlld30gdmlld1xyXG4gICAgICogQHJldHVybiB7e2hhc2hGbjogZnVuY3Rpb24oKSwgb25Db21wbGV0ZTogZnVuY3Rpb24oIXN0cmluZywgKil9fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmNyZWF0ZUxpc3RlbmVyRm9yVmlld18gPSBmdW5jdGlvbiAodmlldykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdmlldy5nZXRRdWVyeSgpO1xyXG4gICAgICAgIHZhciB0YWcgPSB0aGlzLnRhZ0ZvclF1ZXJ5XyhxdWVyeSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaGFzaEZuOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FjaGUgPSB2aWV3LmdldFNlcnZlckNhY2hlKCkgfHwgQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGUuaGFzaCgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiAoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnb2snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuYXBwbHlUYWdnZWRMaXN0ZW5Db21wbGV0ZShxdWVyeS5wYXRoLCB0YWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFwcGx5TGlzdGVuQ29tcGxldGUocXVlcnkucGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSBsaXN0ZW4gZmFpbGVkLCBraWxsIGFsbCBvZiB0aGUgbGlzdGVuZXJzIGhlcmUsIG5vdCBqdXN0IHRoZSBvbmUgdGhhdCB0cmlnZ2VyZWQgdGhlIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBuZWVkIHRvIGJlIHNjb3BlZCB0byBqdXN0IHRoaXMgbGlzdGVuZXIgaWYgd2UgY2hhbmdlIHBlcm1pc3Npb25zIG9uIGZpbHRlcmVkIGNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gZXJyb3JGb3JTZXJ2ZXJDb2RlKHN0YXR1cywgcXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdmVFdmVudFJlZ2lzdHJhdGlvbihxdWVyeSwgXHJcbiAgICAgICAgICAgICAgICAgICAgLypldmVudFJlZ2lzdHJhdGlvbiovIG51bGwsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIHF1ZXJ5LCBjb21wdXRlcyBhIFwicXVlcnlLZXlcIiBzdWl0YWJsZSBmb3IgdXNlIGluIG91ciBxdWVyeVRvVGFnTWFwXy5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUubWFrZVF1ZXJ5S2V5XyA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIHJldHVybiBxdWVyeS5wYXRoLnRvU3RyaW5nKCkgKyAnJCcgKyBxdWVyeS5xdWVyeUlkZW50aWZpZXIoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGEgcXVlcnlLZXkgKGNyZWF0ZWQgYnkgbWFrZVF1ZXJ5S2V5KSwgcGFyc2UgaXQgYmFjayBpbnRvIGEgcGF0aCBhbmQgcXVlcnlJZC5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IHF1ZXJ5S2V5XHJcbiAgICAgKiBAcmV0dXJuIHt7cXVlcnlJZDogIXN0cmluZywgcGF0aDogIVBhdGh9fVxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5wYXJzZVF1ZXJ5S2V5XyA9IGZ1bmN0aW9uIChxdWVyeUtleSkge1xyXG4gICAgICAgIHZhciBzcGxpdEluZGV4ID0gcXVlcnlLZXkuaW5kZXhPZignJCcpO1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHNwbGl0SW5kZXggIT09IC0xICYmIHNwbGl0SW5kZXggPCBxdWVyeUtleS5sZW5ndGggLSAxLCAnQmFkIHF1ZXJ5S2V5LicpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHF1ZXJ5SWQ6IHF1ZXJ5S2V5LnN1YnN0cihzcGxpdEluZGV4ICsgMSksXHJcbiAgICAgICAgICAgIHBhdGg6IG5ldyBQYXRoKHF1ZXJ5S2V5LnN1YnN0cigwLCBzcGxpdEluZGV4KSlcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSBxdWVyeSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIHRhZywgaWYgd2UgaGF2ZSBvbmVcclxuICAgICAqIEBwYXJhbSB7IW51bWJlcn0gdGFnXHJcbiAgICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLnF1ZXJ5S2V5Rm9yVGFnXyA9IGZ1bmN0aW9uICh0YWcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50YWdUb1F1ZXJ5TWFwX1snXycgKyB0YWddO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSB0YWcgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBxdWVyeS5cclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5fSBxdWVyeVxyXG4gICAgICogQHJldHVybiB7P251bWJlcn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS50YWdGb3JRdWVyeV8gPSBmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgICAgICB2YXIgcXVlcnlLZXkgPSBTeW5jVHJlZS5tYWtlUXVlcnlLZXlfKHF1ZXJ5KTtcclxuICAgICAgICByZXR1cm4gdXRpbC5zYWZlR2V0KHRoaXMucXVlcnlUb1RhZ01hcF8sIHF1ZXJ5S2V5KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN0YXRpYyBhY2Nlc3NvciBmb3IgcXVlcnkgdGFncy5cclxuICAgICAqIEByZXR1cm4ge251bWJlcn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLmdldE5leHRRdWVyeVRhZ18gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFN5bmNUcmVlLm5leHRRdWVyeVRhZ18rKztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEEgaGVscGVyIG1ldGhvZCB0byBhcHBseSB0YWdnZWQgb3BlcmF0aW9uc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHF1ZXJ5UGF0aFxyXG4gICAgICogQHBhcmFtIHshT3BlcmF0aW9ufSBvcGVyYXRpb25cclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUV2ZW50Pn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5hcHBseVRhZ2dlZE9wZXJhdGlvbl8gPSBmdW5jdGlvbiAocXVlcnlQYXRoLCBvcGVyYXRpb24pIHtcclxuICAgICAgICB2YXIgc3luY1BvaW50ID0gdGhpcy5zeW5jUG9pbnRUcmVlXy5nZXQocXVlcnlQYXRoKTtcclxuICAgICAgICB1dGlsLmFzc2VydChzeW5jUG9pbnQsIFwiTWlzc2luZyBzeW5jIHBvaW50IGZvciBxdWVyeSB0YWcgdGhhdCB3ZSdyZSB0cmFja2luZ1wiKTtcclxuICAgICAgICB2YXIgd3JpdGVzQ2FjaGUgPSB0aGlzLnBlbmRpbmdXcml0ZVRyZWVfLmNoaWxkV3JpdGVzKHF1ZXJ5UGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIHN5bmNQb2ludC5hcHBseU9wZXJhdGlvbihvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBcclxuICAgICAgICAvKnNlcnZlckNhY2hlPSovIG51bGwpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQSBoZWxwZXIgbWV0aG9kIHRoYXQgdmlzaXRzIGFsbCBkZXNjZW5kYW50IGFuZCBhbmNlc3RvciBTeW5jUG9pbnRzLCBhcHBseWluZyB0aGUgb3BlcmF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIE5PVEVTOlxyXG4gICAgICogLSBEZXNjZW5kYW50IFN5bmNQb2ludHMgd2lsbCBiZSB2aXNpdGVkIGZpcnN0IChzaW5jZSB3ZSByYWlzZSBldmVudHMgZGVwdGgtZmlyc3QpLlxyXG4gIFxuICAgICAqIC0gV2UgY2FsbCBhcHBseU9wZXJhdGlvbigpIG9uIGVhY2ggU3luY1BvaW50IHBhc3NpbmcgdGhyZWUgdGhpbmdzOlxyXG4gICAgICogICAxLiBBIHZlcnNpb24gb2YgdGhlIE9wZXJhdGlvbiB0aGF0IGhhcyBiZWVuIG1hZGUgcmVsYXRpdmUgdG8gdGhlIFN5bmNQb2ludCBsb2NhdGlvbi5cclxuICAgICAqICAgMi4gQSBXcml0ZVRyZWVSZWYgb2YgYW55IHdyaXRlcyB3ZSBoYXZlIGNhY2hlZCBhdCB0aGUgU3luY1BvaW50IGxvY2F0aW9uLlxyXG4gICAgICogICAzLiBBIHNuYXBzaG90IE5vZGUgd2l0aCBjYWNoZWQgc2VydmVyIGRhdGEsIGlmIHdlIGhhdmUgaXQuXHJcbiAgXG4gICAgICogLSBXZSBjb25jYXRlbmF0ZSBhbGwgb2YgdGhlIGV2ZW50cyByZXR1cm5lZCBieSBlYWNoIFN5bmNQb2ludCBhbmQgcmV0dXJuIHRoZSByZXN1bHQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshT3BlcmF0aW9ufSBvcGVyYXRpb25cclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUV2ZW50Pn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5hcHBseU9wZXJhdGlvblRvU3luY1BvaW50c18gPSBmdW5jdGlvbiAob3BlcmF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlPcGVyYXRpb25IZWxwZXJfKG9wZXJhdGlvbiwgdGhpcy5zeW5jUG9pbnRUcmVlXywgXHJcbiAgICAgICAgLypzZXJ2ZXJDYWNoZT0qLyBudWxsLCB0aGlzLnBlbmRpbmdXcml0ZVRyZWVfLmNoaWxkV3JpdGVzKFBhdGguRW1wdHkpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlY3Vyc2l2ZSBoZWxwZXIgZm9yIGFwcGx5T3BlcmF0aW9uVG9TeW5jUG9pbnRzX1xyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcGFyYW0geyFPcGVyYXRpb259IG9wZXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtJbW11dGFibGVUcmVlLjwhU3luY1BvaW50Pn0gc3luY1BvaW50VHJlZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gc2VydmVyQ2FjaGVcclxuICAgICAqIEBwYXJhbSB7IVdyaXRlVHJlZVJlZn0gd3JpdGVzQ2FjaGVcclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUV2ZW50Pn1cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFwcGx5T3BlcmF0aW9uSGVscGVyXyA9IGZ1bmN0aW9uIChvcGVyYXRpb24sIHN5bmNQb2ludFRyZWUsIHNlcnZlckNhY2hlLCB3cml0ZXNDYWNoZSkge1xyXG4gICAgICAgIGlmIChvcGVyYXRpb24ucGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlPcGVyYXRpb25EZXNjZW5kYW50c0hlbHBlcl8ob3BlcmF0aW9uLCBzeW5jUG9pbnRUcmVlLCBzZXJ2ZXJDYWNoZSwgd3JpdGVzQ2FjaGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHN5bmNQb2ludCA9IHN5bmNQb2ludFRyZWUuZ2V0KFBhdGguRW1wdHkpO1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGNhY2hlZCBzZXJ2ZXIgZGF0YSwgc2VlIGlmIHdlIGNhbiBnZXQgaXQgZnJvbSB0aGlzIFN5bmNQb2ludC5cclxuICAgICAgICAgICAgaWYgKHNlcnZlckNhY2hlID09IG51bGwgJiYgc3luY1BvaW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNlcnZlckNhY2hlID0gc3luY1BvaW50LmdldENvbXBsZXRlU2VydmVyQ2FjaGUoUGF0aC5FbXB0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGV2ZW50cyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGROYW1lID0gb3BlcmF0aW9uLnBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkT3BlcmF0aW9uID0gb3BlcmF0aW9uLm9wZXJhdGlvbkZvckNoaWxkKGNoaWxkTmFtZSk7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFRyZWUgPSBzeW5jUG9pbnRUcmVlLmNoaWxkcmVuLmdldChjaGlsZE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRUcmVlICYmIGNoaWxkT3BlcmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRTZXJ2ZXJDYWNoZSA9IHNlcnZlckNhY2hlXHJcbiAgICAgICAgICAgICAgICAgICAgPyBzZXJ2ZXJDYWNoZS5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkV3JpdGVzQ2FjaGUgPSB3cml0ZXNDYWNoZS5jaGlsZChjaGlsZE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdCh0aGlzLmFwcGx5T3BlcmF0aW9uSGVscGVyXyhjaGlsZE9wZXJhdGlvbiwgY2hpbGRUcmVlLCBjaGlsZFNlcnZlckNhY2hlLCBjaGlsZFdyaXRlc0NhY2hlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN5bmNQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdChzeW5jUG9pbnQuYXBwbHlPcGVyYXRpb24ob3BlcmF0aW9uLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRzO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlY3Vyc2l2ZSBoZWxwZXIgZm9yIGFwcGx5T3BlcmF0aW9uVG9TeW5jUG9pbnRzX1xyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcGFyYW0geyFPcGVyYXRpb259IG9wZXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtJbW11dGFibGVUcmVlLjwhU3luY1BvaW50Pn0gc3luY1BvaW50VHJlZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gc2VydmVyQ2FjaGVcclxuICAgICAqIEBwYXJhbSB7IVdyaXRlVHJlZVJlZn0gd3JpdGVzQ2FjaGVcclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUV2ZW50Pn1cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFwcGx5T3BlcmF0aW9uRGVzY2VuZGFudHNIZWxwZXJfID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgc3luY1BvaW50VHJlZSwgc2VydmVyQ2FjaGUsIHdyaXRlc0NhY2hlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgc3luY1BvaW50ID0gc3luY1BvaW50VHJlZS5nZXQoUGF0aC5FbXB0eSk7XHJcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBjYWNoZWQgc2VydmVyIGRhdGEsIHNlZSBpZiB3ZSBjYW4gZ2V0IGl0IGZyb20gdGhpcyBTeW5jUG9pbnQuXHJcbiAgICAgICAgaWYgKHNlcnZlckNhY2hlID09IG51bGwgJiYgc3luY1BvaW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgc2VydmVyQ2FjaGUgPSBzeW5jUG9pbnQuZ2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShQYXRoLkVtcHR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IFtdO1xyXG4gICAgICAgIHN5bmNQb2ludFRyZWUuY2hpbGRyZW4uaW5vcmRlclRyYXZlcnNhbChmdW5jdGlvbiAoY2hpbGROYW1lLCBjaGlsZFRyZWUpIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkU2VydmVyQ2FjaGUgPSBzZXJ2ZXJDYWNoZVxyXG4gICAgICAgICAgICAgICAgPyBzZXJ2ZXJDYWNoZS5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUpXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFdyaXRlc0NhY2hlID0gd3JpdGVzQ2FjaGUuY2hpbGQoY2hpbGROYW1lKTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkT3BlcmF0aW9uID0gb3BlcmF0aW9uLm9wZXJhdGlvbkZvckNoaWxkKGNoaWxkTmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZE9wZXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdChfdGhpcy5hcHBseU9wZXJhdGlvbkRlc2NlbmRhbnRzSGVscGVyXyhjaGlsZE9wZXJhdGlvbiwgY2hpbGRUcmVlLCBjaGlsZFNlcnZlckNhY2hlLCBjaGlsZFdyaXRlc0NhY2hlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoc3luY1BvaW50KSB7XHJcbiAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQoc3luY1BvaW50LmFwcGx5T3BlcmF0aW9uKG9wZXJhdGlvbiwgd3JpdGVzQ2FjaGUsIHNlcnZlckNhY2hlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBldmVudHM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdGF0aWMgdHJhY2tlciBmb3IgbmV4dCBxdWVyeSB0YWcuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUubmV4dFF1ZXJ5VGFnXyA9IDE7XHJcbiAgICByZXR1cm4gU3luY1RyZWU7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogTXV0YWJsZSBvYmplY3Qgd2hpY2ggYmFzaWNhbGx5IGp1c3Qgc3RvcmVzIGEgcmVmZXJlbmNlIHRvIHRoZSBcImxhdGVzdFwiIGltbXV0YWJsZSBzbmFwc2hvdC5cclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgU25hcHNob3RIb2xkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTbmFwc2hvdEhvbGRlcigpIHtcclxuICAgICAgICB0aGlzLnJvb3ROb2RlXyA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgfVxyXG4gICAgU25hcHNob3RIb2xkZXIucHJvdG90eXBlLmdldE5vZGUgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvb3ROb2RlXy5nZXRDaGlsZChwYXRoKTtcclxuICAgIH07XHJcbiAgICBTbmFwc2hvdEhvbGRlci5wcm90b3R5cGUudXBkYXRlU25hcHNob3QgPSBmdW5jdGlvbiAocGF0aCwgbmV3U25hcHNob3ROb2RlKSB7XHJcbiAgICAgICAgdGhpcy5yb290Tm9kZV8gPSB0aGlzLnJvb3ROb2RlXy51cGRhdGVDaGlsZChwYXRoLCBuZXdTbmFwc2hvdE5vZGUpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTbmFwc2hvdEhvbGRlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBYnN0cmFjdGlvbiBhcm91bmQgRmlyZWJhc2VBcHAncyB0b2tlbiBmZXRjaGluZyBjYXBhYmlsaXRpZXMuXHJcbiAqL1xyXG52YXIgQXV0aFRva2VuUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUZpcmViYXNlQXBwfSBhcHBfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEF1dGhUb2tlblByb3ZpZGVyKGFwcF8pIHtcclxuICAgICAgICB0aGlzLmFwcF8gPSBhcHBfO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlUmVmcmVzaFxyXG4gICAgICogQHJldHVybiB7IVByb21pc2U8RmlyZWJhc2VBdXRoVG9rZW5EYXRhPn1cclxuICAgICAqL1xyXG4gICAgQXV0aFRva2VuUHJvdmlkZXIucHJvdG90eXBlLmdldFRva2VuID0gZnVuY3Rpb24gKGZvcmNlUmVmcmVzaCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcF9bJ0lOVEVSTkFMJ11bJ2dldFRva2VuJ10oZm9yY2VSZWZyZXNoKS50aGVuKG51bGwsIFxyXG4gICAgICAgIC8vIC5jYXRjaFxyXG4gICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBOZWVkIHRvIGZpZ3VyZSBvdXQgYWxsIHRoZSBjYXNlcyB0aGlzIGlzIHJhaXNlZCBhbmQgd2hldGhlclxyXG4gICAgICAgICAgICAvLyB0aGlzIG1ha2VzIHNlbnNlLlxyXG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gJ2F1dGgvdG9rZW4tbm90LWluaXRpYWxpemVkJykge1xyXG4gICAgICAgICAgICAgICAgbG9nKCdHb3QgYXV0aC90b2tlbi1ub3QtaW5pdGlhbGl6ZWQgZXJyb3IuICBUcmVhdGluZyBhcyBudWxsIHRva2VuLicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQXV0aFRva2VuUHJvdmlkZXIucHJvdG90eXBlLmFkZFRva2VuQ2hhbmdlTGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcclxuICAgICAgICAvLyBUT0RPOiBXZSBtaWdodCB3YW50IHRvIHdyYXAgdGhlIGxpc3RlbmVyIGFuZCBjYWxsIGl0IHdpdGggbm8gYXJncyB0b1xyXG4gICAgICAgIC8vIGF2b2lkIGEgbGVha3kgYWJzdHJhY3Rpb24sIGJ1dCB0aGF0IG1ha2VzIHJlbW92aW5nIHRoZSBsaXN0ZW5lciBoYXJkZXIuXHJcbiAgICAgICAgdGhpcy5hcHBfWydJTlRFUk5BTCddWydhZGRBdXRoVG9rZW5MaXN0ZW5lciddKGxpc3RlbmVyKTtcclxuICAgIH07XHJcbiAgICBBdXRoVG9rZW5Qcm92aWRlci5wcm90b3R5cGUucmVtb3ZlVG9rZW5DaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMuYXBwX1snSU5URVJOQUwnXVsncmVtb3ZlQXV0aFRva2VuTGlzdGVuZXInXShsaXN0ZW5lcik7XHJcbiAgICB9O1xyXG4gICAgQXV0aFRva2VuUHJvdmlkZXIucHJvdG90eXBlLm5vdGlmeUZvckludmFsaWRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gJ1Byb3ZpZGVkIGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIGZvciB0aGUgYXBwIG5hbWVkIFwiJyArXHJcbiAgICAgICAgICAgIHRoaXMuYXBwXy5uYW1lICtcclxuICAgICAgICAgICAgJ1wiIGFyZSBpbnZhbGlkLiBUaGlzIHVzdWFsbHkgaW5kaWNhdGVzIHlvdXIgYXBwIHdhcyBub3QgJyArXHJcbiAgICAgICAgICAgICdpbml0aWFsaXplZCBjb3JyZWN0bHkuICc7XHJcbiAgICAgICAgaWYgKCdjcmVkZW50aWFsJyBpbiB0aGlzLmFwcF8ub3B0aW9ucykge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz1cclxuICAgICAgICAgICAgICAgICdNYWtlIHN1cmUgdGhlIFwiY3JlZGVudGlhbFwiIHByb3BlcnR5IHByb3ZpZGVkIHRvIGluaXRpYWxpemVBcHAoKSAnICtcclxuICAgICAgICAgICAgICAgICAgICAnaXMgYXV0aG9yaXplZCB0byBhY2Nlc3MgdGhlIHNwZWNpZmllZCBcImRhdGFiYXNlVVJMXCIgYW5kIGlzIGZyb20gdGhlIGNvcnJlY3QgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ3Byb2plY3QuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoJ3NlcnZpY2VBY2NvdW50JyBpbiB0aGlzLmFwcF8ub3B0aW9ucykge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz1cclxuICAgICAgICAgICAgICAgICdNYWtlIHN1cmUgdGhlIFwic2VydmljZUFjY291bnRcIiBwcm9wZXJ0eSBwcm92aWRlZCB0byBpbml0aWFsaXplQXBwKCkgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2lzIGF1dGhvcml6ZWQgdG8gYWNjZXNzIHRoZSBzcGVjaWZpZWQgXCJkYXRhYmFzZVVSTFwiIGFuZCBpcyBmcm9tIHRoZSBjb3JyZWN0ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICdwcm9qZWN0Lic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz1cclxuICAgICAgICAgICAgICAgICdNYWtlIHN1cmUgdGhlIFwiYXBpS2V5XCIgYW5kIFwiZGF0YWJhc2VVUkxcIiBwcm9wZXJ0aWVzIHByb3ZpZGVkIHRvICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICdpbml0aWFsaXplQXBwKCkgbWF0Y2ggdGhlIHZhbHVlcyBwcm92aWRlZCBmb3IgeW91ciBhcHAgYXQgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vY29uc29sZS5maXJlYmFzZS5nb29nbGUuY29tLy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3YXJuKGVycm9yTWVzc2FnZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEF1dGhUb2tlblByb3ZpZGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRyYWNrcyBhIGNvbGxlY3Rpb24gb2Ygc3RhdHMuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFN0YXRzQ29sbGVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0YXRzQ29sbGVjdGlvbigpIHtcclxuICAgICAgICB0aGlzLmNvdW50ZXJzXyA9IHt9O1xyXG4gICAgfVxyXG4gICAgU3RhdHNDb2xsZWN0aW9uLnByb3RvdHlwZS5pbmNyZW1lbnRDb3VudGVyID0gZnVuY3Rpb24gKG5hbWUsIGFtb3VudCkge1xyXG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAxOyB9XHJcbiAgICAgICAgaWYgKCF1dGlsLmNvbnRhaW5zKHRoaXMuY291bnRlcnNfLCBuYW1lKSlcclxuICAgICAgICAgICAgdGhpcy5jb3VudGVyc19bbmFtZV0gPSAwO1xyXG4gICAgICAgIHRoaXMuY291bnRlcnNfW25hbWVdICs9IGFtb3VudDtcclxuICAgIH07XHJcbiAgICBTdGF0c0NvbGxlY3Rpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdXRpbC5kZWVwQ29weSh0aGlzLmNvdW50ZXJzXyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN0YXRzQ29sbGVjdGlvbjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBTdGF0c01hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTdGF0c01hbmFnZXIoKSB7XHJcbiAgICB9XHJcbiAgICBTdGF0c01hbmFnZXIuZ2V0Q29sbGVjdGlvbiA9IGZ1bmN0aW9uIChyZXBvSW5mbykge1xyXG4gICAgICAgIHZhciBoYXNoU3RyaW5nID0gcmVwb0luZm8udG9TdHJpbmcoKTtcclxuICAgICAgICBpZiAoIXRoaXMuY29sbGVjdGlvbnNfW2hhc2hTdHJpbmddKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnNfW2hhc2hTdHJpbmddID0gbmV3IFN0YXRzQ29sbGVjdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uc19baGFzaFN0cmluZ107XHJcbiAgICB9O1xyXG4gICAgU3RhdHNNYW5hZ2VyLmdldE9yQ3JlYXRlUmVwb3J0ZXIgPSBmdW5jdGlvbiAocmVwb0luZm8sIGNyZWF0b3JGdW5jdGlvbikge1xyXG4gICAgICAgIHZhciBoYXNoU3RyaW5nID0gcmVwb0luZm8udG9TdHJpbmcoKTtcclxuICAgICAgICBpZiAoIXRoaXMucmVwb3J0ZXJzX1toYXNoU3RyaW5nXSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlcG9ydGVyc19baGFzaFN0cmluZ10gPSBjcmVhdG9yRnVuY3Rpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXJzX1toYXNoU3RyaW5nXTtcclxuICAgIH07XHJcbiAgICBTdGF0c01hbmFnZXIuY29sbGVjdGlvbnNfID0ge307XHJcbiAgICBTdGF0c01hbmFnZXIucmVwb3J0ZXJzXyA9IHt9O1xyXG4gICAgcmV0dXJuIFN0YXRzTWFuYWdlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBkZWx0YSBmcm9tIHRoZSBwcmV2aW91cyBjYWxsIHRvIGdldCBzdGF0cy5cclxuICpcclxuICogQHBhcmFtIGNvbGxlY3Rpb25fIFRoZSBjb2xsZWN0aW9uIHRvIFwibGlzdGVuXCIgdG8uXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFN0YXRzTGlzdGVuZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTdGF0c0xpc3RlbmVyKGNvbGxlY3Rpb25fKSB7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uXyA9IGNvbGxlY3Rpb25fO1xyXG4gICAgICAgIHRoaXMubGFzdF8gPSBudWxsO1xyXG4gICAgfVxyXG4gICAgU3RhdHNMaXN0ZW5lci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuZXdTdGF0cyA9IHRoaXMuY29sbGVjdGlvbl8uZ2V0KCk7XHJcbiAgICAgICAgdmFyIGRlbHRhID0gdXRpbC5jbG9uZShuZXdTdGF0cyk7XHJcbiAgICAgICAgaWYgKHRoaXMubGFzdF8pIHtcclxuICAgICAgICAgICAgdXRpbC5mb3JFYWNoKHRoaXMubGFzdF8sIGZ1bmN0aW9uIChzdGF0LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsdGFbc3RhdF0gPSBkZWx0YVtzdGF0XSAtIHZhbHVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sYXN0XyA9IG5ld1N0YXRzO1xyXG4gICAgICAgIHJldHVybiBkZWx0YTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU3RhdHNMaXN0ZW5lcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIEFzc3VtaW5nIHNvbWUgYXBwcyBtYXkgaGF2ZSBhIHNob3J0IGFtb3VudCBvZiB0aW1lIG9uIHBhZ2UsIGFuZCBhIGJ1bGsgb2YgZmlyZWJhc2Ugb3BlcmF0aW9ucyBwcm9iYWJseVxyXG4vLyBoYXBwZW4gb24gcGFnZSBsb2FkLCB3ZSB0cnkgdG8gcmVwb3J0IG91ciBmaXJzdCBzZXQgb2Ygc3RhdHMgcHJldHR5IHF1aWNrbHksIGJ1dCB3ZSB3YWl0IGF0IGxlYXN0IDEwXHJcbi8vIHNlY29uZHMgdG8gdHJ5IHRvIGVuc3VyZSB0aGUgRmlyZWJhc2UgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZCAvIHNldHRsZWQuXHJcbnZhciBGSVJTVF9TVEFUU19NSU5fVElNRSA9IDEwICogMTAwMDtcclxudmFyIEZJUlNUX1NUQVRTX01BWF9USU1FID0gMzAgKiAxMDAwO1xyXG4vLyBXZSdsbCBjb250aW51ZSB0byByZXBvcnQgc3RhdHMgb24gYXZlcmFnZSBldmVyeSA1IG1pbnV0ZXMuXHJcbnZhciBSRVBPUlRfU1RBVFNfSU5URVJWQUwgPSA1ICogNjAgKiAxMDAwO1xyXG4vKipcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgU3RhdHNSZXBvcnRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25cclxuICAgICAqIEBwYXJhbSBzZXJ2ZXJfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFN0YXRzUmVwb3J0ZXIoY29sbGVjdGlvbiwgc2VydmVyXykge1xyXG4gICAgICAgIHRoaXMuc2VydmVyXyA9IHNlcnZlcl87XHJcbiAgICAgICAgdGhpcy5zdGF0c1RvUmVwb3J0XyA9IHt9O1xyXG4gICAgICAgIHRoaXMuc3RhdHNMaXN0ZW5lcl8gPSBuZXcgU3RhdHNMaXN0ZW5lcihjb2xsZWN0aW9uKTtcclxuICAgICAgICB2YXIgdGltZW91dCA9IEZJUlNUX1NUQVRTX01JTl9USU1FICtcclxuICAgICAgICAgICAgKEZJUlNUX1NUQVRTX01BWF9USU1FIC0gRklSU1RfU1RBVFNfTUlOX1RJTUUpICogTWF0aC5yYW5kb20oKTtcclxuICAgICAgICBzZXRUaW1lb3V0Tm9uQmxvY2tpbmcodGhpcy5yZXBvcnRTdGF0c18uYmluZCh0aGlzKSwgTWF0aC5mbG9vcih0aW1lb3V0KSk7XHJcbiAgICB9XHJcbiAgICBTdGF0c1JlcG9ydGVyLnByb3RvdHlwZS5pbmNsdWRlU3RhdCA9IGZ1bmN0aW9uIChzdGF0KSB7XHJcbiAgICAgICAgdGhpcy5zdGF0c1RvUmVwb3J0X1tzdGF0XSA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgU3RhdHNSZXBvcnRlci5wcm90b3R5cGUucmVwb3J0U3RhdHNfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHN0YXRzID0gdGhpcy5zdGF0c0xpc3RlbmVyXy5nZXQoKTtcclxuICAgICAgICB2YXIgcmVwb3J0ZWRTdGF0cyA9IHt9O1xyXG4gICAgICAgIHZhciBoYXZlU3RhdHNUb1JlcG9ydCA9IGZhbHNlO1xyXG4gICAgICAgIHV0aWwuZm9yRWFjaChzdGF0cywgZnVuY3Rpb24gKHN0YXQsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IDAgJiYgdXRpbC5jb250YWlucyhfdGhpcy5zdGF0c1RvUmVwb3J0Xywgc3RhdCkpIHtcclxuICAgICAgICAgICAgICAgIHJlcG9ydGVkU3RhdHNbc3RhdF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGhhdmVTdGF0c1RvUmVwb3J0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChoYXZlU3RhdHNUb1JlcG9ydCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlcnZlcl8ucmVwb3J0U3RhdHMocmVwb3J0ZWRTdGF0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHF1ZXVlIG91ciBuZXh0IHJ1bi5cclxuICAgICAgICBzZXRUaW1lb3V0Tm9uQmxvY2tpbmcodGhpcy5yZXBvcnRTdGF0c18uYmluZCh0aGlzKSwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMiAqIFJFUE9SVF9TVEFUU19JTlRFUlZBTCkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTdGF0c1JlcG9ydGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRoZSBldmVudCBxdWV1ZSBzZXJ2ZXMgYSBmZXcgcHVycG9zZXM6XHJcbiAqIDEuIEl0IGVuc3VyZXMgd2UgbWFpbnRhaW4gZXZlbnQgb3JkZXIgaW4gdGhlIGZhY2Ugb2YgZXZlbnQgY2FsbGJhY2tzIGRvaW5nIG9wZXJhdGlvbnMgdGhhdCByZXN1bHQgaW4gbW9yZVxyXG4gKiAgICBldmVudHMgYmVpbmcgcXVldWVkLlxyXG4gKiAyLiByYWlzZVF1ZXVlZEV2ZW50cygpIGhhbmRsZXMgYmVpbmcgY2FsbGVkIHJlZW50cmFudGx5IG5pY2VseS4gIFRoYXQgaXMsIGlmIGluIHRoZSBjb3Vyc2Ugb2YgcmFpc2luZyBldmVudHMsXHJcbiAqICAgIHJhaXNlUXVldWVkRXZlbnRzKCkgaXMgY2FsbGVkIGFnYWluLCB0aGUgXCJpbm5lclwiIGNhbGwgd2lsbCBwaWNrIHVwIHJhaXNpbmcgZXZlbnRzIHdoZXJlIHRoZSBcIm91dGVyXCIgY2FsbFxyXG4gKiAgICBsZWZ0IG9mZiwgZW5zdXJpbmcgdGhhdCB0aGUgZXZlbnRzIGFyZSBzdGlsbCByYWlzZWQgc3luY2hyb25vdXNseSBhbmQgaW4gb3JkZXIuXHJcbiAqIDMuIFlvdSBjYW4gdXNlIHJhaXNlRXZlbnRzQXRQYXRoIGFuZCByYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoIHRvIGVuc3VyZSBvbmx5IHJlbGV2YW50IHByZXZpb3VzbHktcXVldWVkXHJcbiAqICAgIGV2ZW50cyBhcmUgcmFpc2VkIHN5bmNocm9ub3VzbHkuXHJcbiAqXHJcbiAqIE5PVEU6IFRoaXMgY2FuIGFsbCBnbyBhd2F5IGlmL3doZW4gd2UgbW92ZSB0byBhc3luYyBldmVudHMuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIEV2ZW50UXVldWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFdmVudFF1ZXVlKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheS48RXZlbnRMaXN0Pn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmV2ZW50TGlzdHNfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVHJhY2tzIHJlY3Vyc2lvbiBkZXB0aCBvZiByYWlzZVF1ZXVlZEV2ZW50c18sIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAdHlwZSB7IW51bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnJlY3Vyc2lvbkRlcHRoXyA9IDA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUFycmF5LjxFdmVudD59IGV2ZW50RGF0YUxpc3QgVGhlIG5ldyBldmVudHMgdG8gcXVldWUuXHJcbiAgICAgKi9cclxuICAgIEV2ZW50UXVldWUucHJvdG90eXBlLnF1ZXVlRXZlbnRzID0gZnVuY3Rpb24gKGV2ZW50RGF0YUxpc3QpIHtcclxuICAgICAgICAvLyBXZSBncm91cCBldmVudHMgYnkgcGF0aCwgc3RvcmluZyB0aGVtIGluIGEgc2luZ2xlIEV2ZW50TGlzdCwgdG8gbWFrZSBpdCBlYXNpZXIgdG8gc2tpcCBvdmVyIHRoZW0gcXVpY2tseS5cclxuICAgICAgICB2YXIgY3Vyckxpc3QgPSBudWxsO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnREYXRhTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZXZlbnREYXRhID0gZXZlbnREYXRhTGlzdFtpXTtcclxuICAgICAgICAgICAgdmFyIGV2ZW50UGF0aCA9IGV2ZW50RGF0YS5nZXRQYXRoKCk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyTGlzdCAhPT0gbnVsbCAmJiAhZXZlbnRQYXRoLmVxdWFscyhjdXJyTGlzdC5nZXRQYXRoKCkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TGlzdHNfLnB1c2goY3Vyckxpc3QpO1xyXG4gICAgICAgICAgICAgICAgY3Vyckxpc3QgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjdXJyTGlzdCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY3Vyckxpc3QgPSBuZXcgRXZlbnRMaXN0KGV2ZW50UGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3Vyckxpc3QuYWRkKGV2ZW50RGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjdXJyTGlzdCkge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50TGlzdHNfLnB1c2goY3Vyckxpc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFF1ZXVlcyB0aGUgc3BlY2lmaWVkIGV2ZW50cyBhbmQgc3luY2hyb25vdXNseSByYWlzZXMgYWxsIGV2ZW50cyAoaW5jbHVkaW5nIHByZXZpb3VzbHkgcXVldWVkIG9uZXMpXHJcbiAgICAgKiBmb3IgdGhlIHNwZWNpZmllZCBwYXRoLlxyXG4gICAgICpcclxuICAgICAqIEl0IGlzIGFzc3VtZWQgdGhhdCB0aGUgbmV3IGV2ZW50cyBhcmUgYWxsIGZvciB0aGUgc3BlY2lmaWVkIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aCBUaGUgcGF0aCB0byByYWlzZSBldmVudHMgZm9yLlxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPEV2ZW50Pn0gZXZlbnREYXRhTGlzdCBUaGUgbmV3IGV2ZW50cyB0byByYWlzZS5cclxuICAgICAqL1xyXG4gICAgRXZlbnRRdWV1ZS5wcm90b3R5cGUucmFpc2VFdmVudHNBdFBhdGggPSBmdW5jdGlvbiAocGF0aCwgZXZlbnREYXRhTGlzdCkge1xyXG4gICAgICAgIHRoaXMucXVldWVFdmVudHMoZXZlbnREYXRhTGlzdCk7XHJcbiAgICAgICAgdGhpcy5yYWlzZVF1ZXVlZEV2ZW50c01hdGNoaW5nUHJlZGljYXRlXyhmdW5jdGlvbiAoZXZlbnRQYXRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBldmVudFBhdGguZXF1YWxzKHBhdGgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUXVldWVzIHRoZSBzcGVjaWZpZWQgZXZlbnRzIGFuZCBzeW5jaHJvbm91c2x5IHJhaXNlcyBhbGwgZXZlbnRzIChpbmNsdWRpbmcgcHJldmlvdXNseSBxdWV1ZWQgb25lcykgZm9yXHJcbiAgICAgKiBsb2NhdGlvbnMgcmVsYXRlZCB0byB0aGUgc3BlY2lmaWVkIGNoYW5nZSBwYXRoIChpLmUuIGFsbCBhbmNlc3RvcnMgYW5kIGRlc2NlbmRhbnRzKS5cclxuICAgICAqXHJcbiAgICAgKiBJdCBpcyBhc3N1bWVkIHRoYXQgdGhlIG5ldyBldmVudHMgYXJlIGFsbCByZWxhdGVkIChhbmNlc3RvciBvciBkZXNjZW5kYW50KSB0byB0aGUgc3BlY2lmaWVkIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gY2hhbmdlZFBhdGggVGhlIHBhdGggdG8gcmFpc2UgZXZlbnRzIGZvci5cclxuICAgICAqIEBwYXJhbSB7IUFycmF5LjwhRXZlbnQ+fSBldmVudERhdGFMaXN0IFRoZSBldmVudHMgdG8gcmFpc2VcclxuICAgICAqL1xyXG4gICAgRXZlbnRRdWV1ZS5wcm90b3R5cGUucmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aCA9IGZ1bmN0aW9uIChjaGFuZ2VkUGF0aCwgZXZlbnREYXRhTGlzdCkge1xyXG4gICAgICAgIHRoaXMucXVldWVFdmVudHMoZXZlbnREYXRhTGlzdCk7XHJcbiAgICAgICAgdGhpcy5yYWlzZVF1ZXVlZEV2ZW50c01hdGNoaW5nUHJlZGljYXRlXyhmdW5jdGlvbiAoZXZlbnRQYXRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBldmVudFBhdGguY29udGFpbnMoY2hhbmdlZFBhdGgpIHx8IGNoYW5nZWRQYXRoLmNvbnRhaW5zKGV2ZW50UGF0aCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFmdW5jdGlvbighUGF0aCk6Ym9vbGVhbn0gcHJlZGljYXRlXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBFdmVudFF1ZXVlLnByb3RvdHlwZS5yYWlzZVF1ZXVlZEV2ZW50c01hdGNoaW5nUHJlZGljYXRlXyA9IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcclxuICAgICAgICB0aGlzLnJlY3Vyc2lvbkRlcHRoXysrO1xyXG4gICAgICAgIHZhciBzZW50QWxsID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZXZlbnRMaXN0c18ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGV2ZW50TGlzdCA9IHRoaXMuZXZlbnRMaXN0c19baV07XHJcbiAgICAgICAgICAgIGlmIChldmVudExpc3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudFBhdGggPSBldmVudExpc3QuZ2V0UGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShldmVudFBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RzX1tpXS5yYWlzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0c19baV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VudEFsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZW50QWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0c18gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZWN1cnNpb25EZXB0aF8tLTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRXZlbnRRdWV1ZTtcclxufSgpKTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgRXZlbnRMaXN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXZlbnRMaXN0KHBhdGhfKSB7XHJcbiAgICAgICAgdGhpcy5wYXRoXyA9IHBhdGhfO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXkuPEV2ZW50Pn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZXZlbnRzXyA9IFtdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFFdmVudH0gZXZlbnREYXRhXHJcbiAgICAgKi9cclxuICAgIEV2ZW50TGlzdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGV2ZW50RGF0YSkge1xyXG4gICAgICAgIHRoaXMuZXZlbnRzXy5wdXNoKGV2ZW50RGF0YSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIHRoZSBsaXN0IGFuZCByYWlzZXMgZWFjaCBldmVudFxyXG4gICAgICovXHJcbiAgICBFdmVudExpc3QucHJvdG90eXBlLnJhaXNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ldmVudHNfLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBldmVudERhdGEgPSB0aGlzLmV2ZW50c19baV07XHJcbiAgICAgICAgICAgIGlmIChldmVudERhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzX1tpXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRGbiA9IGV2ZW50RGF0YS5nZXRFdmVudFJ1bm5lcigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxvZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZygnZXZlbnQ6ICcgKyBldmVudERhdGEudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBleGNlcHRpb25HdWFyZChldmVudEZuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFQYXRofVxyXG4gICAgICovXHJcbiAgICBFdmVudExpc3QucHJvdG90eXBlLmdldFBhdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aF87XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEV2ZW50TGlzdDtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBCYXNlIGNsYXNzIHRvIGJlIHVzZWQgaWYgeW91IHdhbnQgdG8gZW1pdCBldmVudHMuIENhbGwgdGhlIGNvbnN0cnVjdG9yIHdpdGhcclxuICogdGhlIHNldCBvZiBhbGxvd2VkIGV2ZW50IG5hbWVzLlxyXG4gKi9cclxudmFyIEV2ZW50RW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPHN0cmluZz59IGFsbG93ZWRFdmVudHNfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcihhbGxvd2VkRXZlbnRzXykge1xyXG4gICAgICAgIHRoaXMuYWxsb3dlZEV2ZW50c18gPSBhbGxvd2VkRXZlbnRzXztcclxuICAgICAgICB0aGlzLmxpc3RlbmVyc18gPSB7fTtcclxuICAgICAgICB1dGlsLmFzc2VydChBcnJheS5pc0FycmF5KGFsbG93ZWRFdmVudHNfKSAmJiBhbGxvd2VkRXZlbnRzXy5sZW5ndGggPiAwLCAnUmVxdWlyZXMgYSBub24tZW1wdHkgYXJyYXknKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVG8gYmUgY2FsbGVkIGJ5IGRlcml2ZWQgY2xhc3NlcyB0byB0cmlnZ2VyIGV2ZW50cy5cclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gZXZlbnRUeXBlXHJcbiAgICAgKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzXHJcbiAgICAgKi9cclxuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcclxuICAgICAgICB2YXIgdmFyX2FyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXJfYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5saXN0ZW5lcnNfW2V2ZW50VHlwZV0pKSB7XHJcbiAgICAgICAgICAgIC8vIENsb25lIHRoZSBsaXN0LCBzaW5jZSBjYWxsYmFja3MgY291bGQgYWRkL3JlbW92ZSBsaXN0ZW5lcnMuXHJcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc19bZXZlbnRUeXBlXS5zbGljZSgpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmNhbGxiYWNrLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCB2YXJfYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudFR5cGUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy52YWxpZGF0ZUV2ZW50VHlwZV8oZXZlbnRUeXBlKTtcclxuICAgICAgICB0aGlzLmxpc3RlbmVyc19bZXZlbnRUeXBlXSA9IHRoaXMubGlzdGVuZXJzX1tldmVudFR5cGVdIHx8IFtdO1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzX1tldmVudFR5cGVdLnB1c2goeyBjYWxsYmFjazogY2FsbGJhY2ssIGNvbnRleHQ6IGNvbnRleHQgfSk7XHJcbiAgICAgICAgdmFyIGV2ZW50RGF0YSA9IHRoaXMuZ2V0SW5pdGlhbEV2ZW50KGV2ZW50VHlwZSk7XHJcbiAgICAgICAgaWYgKGV2ZW50RGF0YSkge1xyXG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseShjb250ZXh0LCBldmVudERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChldmVudFR5cGUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy52YWxpZGF0ZUV2ZW50VHlwZV8oZXZlbnRUeXBlKTtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNfW2V2ZW50VHlwZV0gfHwgW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5jYWxsYmFjayA9PT0gY2FsbGJhY2sgJiZcclxuICAgICAgICAgICAgICAgICghY29udGV4dCB8fCBjb250ZXh0ID09PSBsaXN0ZW5lcnNbaV0uY29udGV4dCkpIHtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS52YWxpZGF0ZUV2ZW50VHlwZV8gPSBmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQodGhpcy5hbGxvd2VkRXZlbnRzXy5maW5kKGZ1bmN0aW9uIChldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXQgPT09IGV2ZW50VHlwZTtcclxuICAgICAgICB9KSwgJ1Vua25vd24gZXZlbnQ6ICcgKyBldmVudFR5cGUpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGV4dGVuZHMge0V2ZW50RW1pdHRlcn1cclxuICovXHJcbnZhciBWaXNpYmlsaXR5TW9uaXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFZpc2liaWxpdHlNb25pdG9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gVmlzaWJpbGl0eU1vbml0b3IoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgWyd2aXNpYmxlJ10pIHx8IHRoaXM7XHJcbiAgICAgICAgdmFyIGhpZGRlbjtcclxuICAgICAgICB2YXIgdmlzaWJpbGl0eUNoYW5nZTtcclxuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudFsnaGlkZGVuJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBPcGVyYSAxMi4xMCBhbmQgRmlyZWZveCAxOCBhbmQgbGF0ZXIgc3VwcG9ydFxyXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcclxuICAgICAgICAgICAgICAgIGhpZGRlbiA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudFsnbW96SGlkZGVuJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlID0gJ21venZpc2liaWxpdHljaGFuZ2UnO1xyXG4gICAgICAgICAgICAgICAgaGlkZGVuID0gJ21vekhpZGRlbic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50Wydtc0hpZGRlbiddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9ICdtc3Zpc2liaWxpdHljaGFuZ2UnO1xyXG4gICAgICAgICAgICAgICAgaGlkZGVuID0gJ21zSGlkZGVuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnRbJ3dlYmtpdEhpZGRlbiddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcclxuICAgICAgICAgICAgICAgIGhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEluaXRpYWxseSwgd2UgYWx3YXlzIGFzc3VtZSB3ZSBhcmUgdmlzaWJsZS4gVGhpcyBlbnN1cmVzIHRoYXQgaW4gYnJvd3NlcnNcclxuICAgICAgICAvLyB3aXRob3V0IHBhZ2UgdmlzaWJpbGl0eSBzdXBwb3J0IG9yIGluIGNhc2VzIHdoZXJlIHdlIGFyZSBuZXZlciB2aXNpYmxlXHJcbiAgICAgICAgLy8gKGUuZy4gY2hyb21lIGV4dGVuc2lvbiksIHdlIGFjdCBhcyBpZiB3ZSBhcmUgdmlzaWJsZSwgaS5lLiBkb24ndCBkZWxheVxyXG4gICAgICAgIC8vIHJlY29ubmVjdHNcclxuICAgICAgICBfdGhpcy52aXNpYmxlXyA9IHRydWU7XHJcbiAgICAgICAgaWYgKHZpc2liaWxpdHlDaGFuZ2UpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih2aXNpYmlsaXR5Q2hhbmdlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlzaWJsZSA9ICFkb2N1bWVudFtoaWRkZW5dO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZpc2libGUgIT09IF90aGlzLnZpc2libGVfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudmlzaWJsZV8gPSB2aXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRyaWdnZXIoJ3Zpc2libGUnLCB2aXNpYmxlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBWaXNpYmlsaXR5TW9uaXRvci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZpc2liaWxpdHlNb25pdG9yKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGV2ZW50VHlwZVxyXG4gICAgICogQHJldHVybiB7QXJyYXkuPGJvb2xlYW4+fVxyXG4gICAgICovXHJcbiAgICBWaXNpYmlsaXR5TW9uaXRvci5wcm90b3R5cGUuZ2V0SW5pdGlhbEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50VHlwZSkge1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KGV2ZW50VHlwZSA9PT0gJ3Zpc2libGUnLCAnVW5rbm93biBldmVudCB0eXBlOiAnICsgZXZlbnRUeXBlKTtcclxuICAgICAgICByZXR1cm4gW3RoaXMudmlzaWJsZV9dO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBWaXNpYmlsaXR5TW9uaXRvcjtcclxufShFdmVudEVtaXR0ZXIpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBNb25pdG9ycyBvbmxpbmUgc3RhdGUgKGFzIHJlcG9ydGVkIGJ5IHdpbmRvdy5vbmxpbmUvb2ZmbGluZSBldmVudHMpLlxyXG4gKlxyXG4gKiBUaGUgZXhwZWN0YXRpb24gaXMgdGhhdCB0aGlzIGNvdWxkIGhhdmUgbWFueSBmYWxzZSBwb3NpdGl2ZXMgKHRoaW5rcyB3ZSBhcmUgb25saW5lXHJcbiAqIHdoZW4gd2UncmUgbm90KSwgYnV0IG5vIGZhbHNlIG5lZ2F0aXZlcy4gIFNvIHdlIGNhbiBzYWZlbHkgdXNlIGl0IHRvIGRldGVybWluZSB3aGVuXHJcbiAqIHdlIGRlZmluaXRlbHkgY2Fubm90IHJlYWNoIHRoZSBpbnRlcm5ldC5cclxuICpcclxuICogQGV4dGVuZHMge0V2ZW50RW1pdHRlcn1cclxuICovXHJcbnZhciBPbmxpbmVNb25pdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoT25saW5lTW9uaXRvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE9ubGluZU1vbml0b3IoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgWydvbmxpbmUnXSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5vbmxpbmVfID0gdHJ1ZTtcclxuICAgICAgICAvLyBXZSd2ZSBoYWQgcmVwZWF0ZWQgY29tcGxhaW50cyB0aGF0IENvcmRvdmEgYXBwcyBjYW4gZ2V0IHN0dWNrIFwib2ZmbGluZVwiLCBlLmcuXHJcbiAgICAgICAgLy8gaHR0cHM6Ly9mb3J1bS5pb25pY2ZyYW1ld29yay5jb20vdC9maXJlYmFzZS1jb25uZWN0aW9uLWlzLWxvc3QtYW5kLW5ldmVyLWNvbWUtYmFjay80MzgxMFxyXG4gICAgICAgIC8vIEl0IHdvdWxkIHNlZW0gdGhhdCB0aGUgJ29ubGluZScgZXZlbnQgZG9lcyBub3QgYWx3YXlzIGZpcmUgY29uc2lzdGVudGx5LiBTbyB3ZSBkaXNhYmxlIGl0XHJcbiAgICAgICAgLy8gZm9yIENvcmRvdmEuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAgICAgIXV0aWwuaXNNb2JpbGVDb3Jkb3ZhKCkpIHtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubGluZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMub25saW5lXykge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9ubGluZV8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRyaWdnZXIoJ29ubGluZScsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9ubGluZV8pIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbmxpbmVfID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlcignb25saW5lJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9ubGluZU1vbml0b3IuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPbmxpbmVNb25pdG9yKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGV2ZW50VHlwZVxyXG4gICAgICogQHJldHVybiB7QXJyYXkuPGJvb2xlYW4+fVxyXG4gICAgICovXHJcbiAgICBPbmxpbmVNb25pdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQoZXZlbnRUeXBlID09PSAnb25saW5lJywgJ1Vua25vd24gZXZlbnQgdHlwZTogJyArIGV2ZW50VHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLm9ubGluZV9dO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgT25saW5lTW9uaXRvci5wcm90b3R5cGUuY3VycmVudGx5T25saW5lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9ubGluZV87XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ubGluZU1vbml0b3I7XHJcbn0oRXZlbnRFbWl0dGVyKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhpcyBjbGFzcyBlbnN1cmVzIHRoZSBwYWNrZXRzIGZyb20gdGhlIHNlcnZlciBhcnJpdmUgaW4gb3JkZXJcclxuICogVGhpcyBjbGFzcyB0YWtlcyBkYXRhIGZyb20gdGhlIHNlcnZlciBhbmQgZW5zdXJlcyBpdCBnZXRzIHBhc3NlZCBpbnRvIHRoZSBjYWxsYmFja3MgaW4gb3JkZXIuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFBhY2tldFJlY2VpdmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gb25NZXNzYWdlX1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBQYWNrZXRSZWNlaXZlcihvbk1lc3NhZ2VfKSB7XHJcbiAgICAgICAgdGhpcy5vbk1lc3NhZ2VfID0gb25NZXNzYWdlXztcclxuICAgICAgICB0aGlzLnBlbmRpbmdSZXNwb25zZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRSZXNwb25zZU51bSA9IDA7XHJcbiAgICAgICAgdGhpcy5jbG9zZUFmdGVyUmVzcG9uc2UgPSAtMTtcclxuICAgICAgICB0aGlzLm9uQ2xvc2UgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgUGFja2V0UmVjZWl2ZXIucHJvdG90eXBlLmNsb3NlQWZ0ZXIgPSBmdW5jdGlvbiAocmVzcG9uc2VOdW0sIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZUFmdGVyUmVzcG9uc2UgPSByZXNwb25zZU51bTtcclxuICAgICAgICB0aGlzLm9uQ2xvc2UgPSBjYWxsYmFjaztcclxuICAgICAgICBpZiAodGhpcy5jbG9zZUFmdGVyUmVzcG9uc2UgPCB0aGlzLmN1cnJlbnRSZXNwb25zZU51bSkge1xyXG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5vbkNsb3NlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBFYWNoIG1lc3NhZ2UgZnJvbSB0aGUgc2VydmVyIGNvbWVzIHdpdGggYSByZXNwb25zZSBudW1iZXIsIGFuZCBhbiBhcnJheSBvZiBkYXRhLiBUaGUgcmVzcG9uc2VOdW1iZXJcclxuICAgICAqIGFsbG93cyB1cyB0byBlbnN1cmUgdGhhdCB3ZSBwcm9jZXNzIHRoZW0gaW4gdGhlIHJpZ2h0IG9yZGVyLCBzaW5jZSB3ZSBjYW4ndCBiZSBndWFyYW50ZWVkIHRoYXQgYWxsXHJcbiAgICAgKiBicm93c2VycyB3aWxsIHJlc3BvbmQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHJlcXVlc3RzIHdlIHNlbnRcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByZXF1ZXN0TnVtXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhXHJcbiAgICAgKi9cclxuICAgIFBhY2tldFJlY2VpdmVyLnByb3RvdHlwZS5oYW5kbGVSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXF1ZXN0TnVtLCBkYXRhKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnBlbmRpbmdSZXNwb25zZXNbcmVxdWVzdE51bV0gPSBkYXRhO1xyXG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdG9Qcm9jZXNzID0gdGhpc18xLnBlbmRpbmdSZXNwb25zZXNbdGhpc18xLmN1cnJlbnRSZXNwb25zZU51bV07XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzXzEucGVuZGluZ1Jlc3BvbnNlc1t0aGlzXzEuY3VycmVudFJlc3BvbnNlTnVtXTtcclxuICAgICAgICAgICAgdmFyIF9sb29wXzIgPSBmdW5jdGlvbiAoaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvUHJvY2Vzc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbkd1YXJkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMub25NZXNzYWdlXyh0b1Byb2Nlc3NbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvUHJvY2Vzcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgX2xvb3BfMihpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpc18xLmN1cnJlbnRSZXNwb25zZU51bSA9PT0gdGhpc18xLmNsb3NlQWZ0ZXJSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNfMS5vbkNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc18xLm9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzXzEub25DbG9zZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJicmVha1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXNfMS5jdXJyZW50UmVzcG9uc2VOdW0rKztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciB0aGlzXzEgPSB0aGlzO1xyXG4gICAgICAgIHdoaWxlICh0aGlzLnBlbmRpbmdSZXNwb25zZXNbdGhpcy5jdXJyZW50UmVzcG9uc2VOdW1dKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZV8xID0gX2xvb3BfMSgpO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGVfMSA9PT0gXCJicmVha1wiKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBQYWNrZXRSZWNlaXZlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIFVSTCBxdWVyeSBwYXJhbWV0ZXJzIGFzc29jaWF0ZWQgd2l0aCBsb25ncG9sbGluZ1xyXG52YXIgRklSRUJBU0VfTE9OR1BPTExfU1RBUlRfUEFSQU0gPSAnc3RhcnQnO1xyXG52YXIgRklSRUJBU0VfTE9OR1BPTExfQ0xPU0VfQ09NTUFORCA9ICdjbG9zZSc7XHJcbnZhciBGSVJFQkFTRV9MT05HUE9MTF9DT01NQU5EX0NCX05BTUUgPSAncExQQ29tbWFuZCc7XHJcbnZhciBGSVJFQkFTRV9MT05HUE9MTF9EQVRBX0NCX05BTUUgPSAncFJUTFBDQic7XHJcbnZhciBGSVJFQkFTRV9MT05HUE9MTF9JRF9QQVJBTSA9ICdpZCc7XHJcbnZhciBGSVJFQkFTRV9MT05HUE9MTF9QV19QQVJBTSA9ICdwdyc7XHJcbnZhciBGSVJFQkFTRV9MT05HUE9MTF9TRVJJQUxfUEFSQU0gPSAnc2VyJztcclxudmFyIEZJUkVCQVNFX0xPTkdQT0xMX0NBTExCQUNLX0lEX1BBUkFNID0gJ2NiJztcclxudmFyIEZJUkVCQVNFX0xPTkdQT0xMX1NFR01FTlRfTlVNX1BBUkFNID0gJ3NlZyc7XHJcbnZhciBGSVJFQkFTRV9MT05HUE9MTF9TRUdNRU5UU19JTl9QQUNLRVQgPSAndHMnO1xyXG52YXIgRklSRUJBU0VfTE9OR1BPTExfREFUQV9QQVJBTSA9ICdkJztcclxudmFyIEZJUkVCQVNFX0xPTkdQT0xMX0RJU0NPTk5fRlJBTUVfUEFSQU0gPSAnZGlzY29ubic7XHJcbnZhciBGSVJFQkFTRV9MT05HUE9MTF9ESVNDT05OX0ZSQU1FX1JFUVVFU1RfUEFSQU0gPSAnZGZyYW1lJztcclxuLy9EYXRhIHNpemUgY29uc3RhbnRzLlxyXG4vL1RPRE86IFBlcmY6IHRoZSBtYXhpbXVtIGxlbmd0aCBhY3R1YWxseSBkaWZmZXJzIGZyb20gYnJvd3NlciB0byBicm93c2VyLlxyXG4vLyBXZSBzaG91bGQgY2hlY2sgd2hhdCBicm93c2VyIHdlJ3JlIG9uIGFuZCBzZXQgYWNjb3JkaW5nbHkuXHJcbnZhciBNQVhfVVJMX0RBVEFfU0laRSA9IDE4NzA7XHJcbnZhciBTRUdfSEVBREVSX1NJWkUgPSAzMDsgLy9pZTogJnNlZz04Mjk5MjM0JnRzPTk4MjM4OTEyMyZkPVxyXG52YXIgTUFYX1BBWUxPQURfU0laRSA9IE1BWF9VUkxfREFUQV9TSVpFIC0gU0VHX0hFQURFUl9TSVpFO1xyXG4vKipcclxuICogS2VlcGFsaXZlIHBlcmlvZFxyXG4gKiBzZW5kIGEgZnJlc2ggcmVxdWVzdCBhdCBtaW5pbXVtIGV2ZXJ5IDI1IHNlY29uZHMuIE9wZXJhIGhhcyBhIG1heGltdW0gcmVxdWVzdFxyXG4gKiBsZW5ndGggb2YgMzAgc2Vjb25kcyB0aGF0IHdlIGNhbid0IGV4Y2VlZC5cclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xyXG52YXIgS0VFUEFMSVZFX1JFUVVFU1RfSU5URVJWQUwgPSAyNTAwMDtcclxuLyoqXHJcbiAqIEhvdyBsb25nIHRvIHdhaXQgYmVmb3JlIGFib3J0aW5nIGEgbG9uZy1wb2xsaW5nIGNvbm5lY3Rpb24gYXR0ZW1wdC5cclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xyXG52YXIgTFBfQ09OTkVDVF9USU1FT1VUID0gMzAwMDA7XHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIG1hbmFnZXMgYSBzaW5nbGUgbG9uZy1wb2xsaW5nIGNvbm5lY3Rpb24uXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAaW1wbGVtZW50cyB7VHJhbnNwb3J0fVxyXG4gKi9cclxudmFyIEJyb3dzZXJQb2xsQ29ubmVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbm5JZCBBbiBpZGVudGlmaWVyIGZvciB0aGlzIGNvbm5lY3Rpb24sIHVzZWQgZm9yIGxvZ2dpbmdcclxuICAgICAqIEBwYXJhbSB7UmVwb0luZm99IHJlcG9JbmZvIFRoZSBpbmZvIGZvciB0aGUgZW5kcG9pbnQgdG8gc2VuZCBkYXRhIHRvLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSB0cmFuc3BvcnRTZXNzaW9uSWQgT3B0aW9uYWwgdHJhbnNwb3J0U2Vzc2lvbmlkIGlmIHdlIGFyZSByZWNvbm5lY3RpbmcgZm9yIGFuIGV4aXN0aW5nXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0IHNlc3Npb25cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gIGxhc3RTZXNzaW9uSWQgT3B0aW9uYWwgbGFzdFNlc3Npb25JZCBpZiB0aGUgUGVyc2lzdGVudENvbm5lY3Rpb24gaGFzIGFscmVhZHkgY3JlYXRlZCBhXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uIHByZXZpb3VzbHlcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQnJvd3NlclBvbGxDb25uZWN0aW9uKGNvbm5JZCwgcmVwb0luZm8sIHRyYW5zcG9ydFNlc3Npb25JZCwgbGFzdFNlc3Npb25JZCkge1xyXG4gICAgICAgIHRoaXMuY29ubklkID0gY29ubklkO1xyXG4gICAgICAgIHRoaXMucmVwb0luZm8gPSByZXBvSW5mbztcclxuICAgICAgICB0aGlzLnRyYW5zcG9ydFNlc3Npb25JZCA9IHRyYW5zcG9ydFNlc3Npb25JZDtcclxuICAgICAgICB0aGlzLmxhc3RTZXNzaW9uSWQgPSBsYXN0U2Vzc2lvbklkO1xyXG4gICAgICAgIHRoaXMuYnl0ZXNTZW50ID0gMDtcclxuICAgICAgICB0aGlzLmJ5dGVzUmVjZWl2ZWQgPSAwO1xyXG4gICAgICAgIHRoaXMuZXZlckNvbm5lY3RlZF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxvZ18gPSBsb2dXcmFwcGVyKGNvbm5JZCk7XHJcbiAgICAgICAgdGhpcy5zdGF0c18gPSBTdGF0c01hbmFnZXIuZ2V0Q29sbGVjdGlvbihyZXBvSW5mbyk7XHJcbiAgICAgICAgdGhpcy51cmxGbiA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcG9JbmZvLmNvbm5lY3Rpb25VUkwoTE9OR19QT0xMSU5HLCBwYXJhbXMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKE9iamVjdCl9IG9uTWVzc2FnZSBDYWxsYmFjayB3aGVuIG1lc3NhZ2VzIGFycml2ZVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBvbkRpc2Nvbm5lY3QgQ2FsbGJhY2sgd2l0aCBjb25uZWN0aW9uIGxvc3QuXHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChvbk1lc3NhZ2UsIG9uRGlzY29ubmVjdCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jdXJTZWdtZW50TnVtID0gMDtcclxuICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8gPSBvbkRpc2Nvbm5lY3Q7XHJcbiAgICAgICAgdGhpcy5teVBhY2tldE9yZGVyZXIgPSBuZXcgUGFja2V0UmVjZWl2ZXIob25NZXNzYWdlKTtcclxuICAgICAgICB0aGlzLmlzQ2xvc2VkXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdFRpbWVvdXRUaW1lcl8gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMubG9nXygnVGltZWQgb3V0IHRyeWluZyB0byBjb25uZWN0LicpO1xyXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgY2xlYXIgdGhlIGhvc3QgY2FjaGVcclxuICAgICAgICAgICAgX3RoaXMub25DbG9zZWRfKCk7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfID0gbnVsbDtcclxuICAgICAgICB9LCBNYXRoLmZsb29yKExQX0NPTk5FQ1RfVElNRU9VVCkpO1xyXG4gICAgICAgIC8vIEVuc3VyZSB3ZSBkZWxheSB0aGUgY3JlYXRpb24gb2YgdGhlIGlmcmFtZSB1bnRpbCB0aGUgRE9NIGlzIGxvYWRlZC5cclxuICAgICAgICBleGVjdXRlV2hlbkRPTVJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmlzQ2xvc2VkXylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgLy9TZXQgdXAgYSBjYWxsYmFjayB0aGF0IGdldHMgdHJpZ2dlcmVkIG9uY2UgYSBjb25uZWN0aW9uIGlzIHNldCB1cC5cclxuICAgICAgICAgICAgX3RoaXMuc2NyaXB0VGFnSG9sZGVyID0gbmV3IEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBjb21tYW5kID0gYXJnc1swXSwgYXJnMSA9IGFyZ3NbMV0sIGFyZzIgPSBhcmdzWzJdO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuaW5jcmVtZW50SW5jb21pbmdCeXRlc18oYXJncyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnNjcmlwdFRhZ0hvbGRlcilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIHdlIGNsb3NlZCB0aGUgY29ubmVjdGlvbi5cclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb25uZWN0VGltZW91dFRpbWVyXykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5jb25uZWN0VGltZW91dFRpbWVyXyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29ubmVjdFRpbWVvdXRUaW1lcl8gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3RoaXMuZXZlckNvbm5lY3RlZF8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT0gRklSRUJBU0VfTE9OR1BPTExfU1RBUlRfUEFSQU0pIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5pZCA9IGFyZzE7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucGFzc3dvcmQgPSBhcmcyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29tbWFuZCA9PT0gRklSRUJBU0VfTE9OR1BPTExfQ0xPU0VfQ09NTUFORCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGNsZWFyIHRoZSBob3N0IGNhY2hlLiBXZSBnb3QgYSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIsIHNvIHdlIGtub3cgaXQncyByZWFjaGFibGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBhcmVuJ3QgZXhwZWN0aW5nIGFueSBtb3JlIGRhdGEgKG90aGVyIHRoYW4gd2hhdCB0aGUgc2VydmVyJ3MgYWxyZWFkeSBpbiB0aGUgcHJvY2VzcyBvZiBzZW5kaW5nIHVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRocm91Z2ggb3VyIGFscmVhZHkgb3BlbiBwb2xscyksIHNvIGRvbid0IHNlbmQgYW55IG1vcmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNjcmlwdFRhZ0hvbGRlci5zZW5kTmV3UG9sbHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJnMSBpbiB0aGlzIGNhc2UgaXMgdGhlIGxhc3QgcmVzcG9uc2UgbnVtYmVyIHNlbnQgYnkgdGhlIHNlcnZlci4gV2Ugc2hvdWxkIHRyeSB0byByZWNlaXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsbCBvZiB0aGUgcmVzcG9uc2VzIHVwIHRvIHRoaXMgb25lIGJlZm9yZSBjbG9zaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm15UGFja2V0T3JkZXJlci5jbG9zZUFmdGVyKGFyZzEsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uQ2xvc2VkXygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uQ2xvc2VkXygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkIGNvbW1hbmQgcmVjZWl2ZWQ6ICcgKyBjb21tYW5kKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHBOID0gYXJnc1swXSwgZGF0YSA9IGFyZ3NbMV07XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5pbmNyZW1lbnRJbmNvbWluZ0J5dGVzXyhhcmdzKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLm15UGFja2V0T3JkZXJlci5oYW5kbGVSZXNwb25zZShwTiwgZGF0YSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9uQ2xvc2VkXygpO1xyXG4gICAgICAgICAgICB9LCBfdGhpcy51cmxGbik7XHJcbiAgICAgICAgICAgIC8vU2VuZCB0aGUgaW5pdGlhbCByZXF1ZXN0IHRvIGNvbm5lY3QuIFRoZSBzZXJpYWwgbnVtYmVyIGlzIHNpbXBseSB0byBrZWVwIHRoZSBicm93c2VyIGZyb20gcHVsbGluZyBwcmV2aW91cyByZXN1bHRzXHJcbiAgICAgICAgICAgIC8vZnJvbSBjYWNoZS5cclxuICAgICAgICAgICAgdmFyIHVybFBhcmFtcyA9IHt9O1xyXG4gICAgICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfU1RBUlRfUEFSQU1dID0gJ3QnO1xyXG4gICAgICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfU0VSSUFMX1BBUkFNXSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5zY3JpcHRUYWdIb2xkZXIudW5pcXVlQ2FsbGJhY2tJZGVudGlmaWVyKVxyXG4gICAgICAgICAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX0NBTExCQUNLX0lEX1BBUkFNXSA9IF90aGlzLnNjcmlwdFRhZ0hvbGRlci51bmlxdWVDYWxsYmFja0lkZW50aWZpZXI7XHJcbiAgICAgICAgICAgIHVybFBhcmFtc1tWRVJTSU9OX1BBUkFNXSA9IFBST1RPQ09MX1ZFUlNJT047XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy50cmFuc3BvcnRTZXNzaW9uSWQpIHtcclxuICAgICAgICAgICAgICAgIHVybFBhcmFtc1tUUkFOU1BPUlRfU0VTU0lPTl9QQVJBTV0gPSBfdGhpcy50cmFuc3BvcnRTZXNzaW9uSWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKF90aGlzLmxhc3RTZXNzaW9uSWQpIHtcclxuICAgICAgICAgICAgICAgIHVybFBhcmFtc1tMQVNUX1NFU1NJT05fUEFSQU1dID0gX3RoaXMubGFzdFNlc3Npb25JZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNOb2RlU2RrKCkgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgJiZcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYuaW5kZXhPZihGT1JHRV9ET01BSU4pICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdXJsUGFyYW1zW1JFRkVSRVJfUEFSQU1dID0gRk9SR0VfUkVGO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjb25uZWN0VVJMID0gX3RoaXMudXJsRm4odXJsUGFyYW1zKTtcclxuICAgICAgICAgICAgX3RoaXMubG9nXygnQ29ubmVjdGluZyB2aWEgbG9uZy1wb2xsIHRvICcgKyBjb25uZWN0VVJMKTtcclxuICAgICAgICAgICAgX3RoaXMuc2NyaXB0VGFnSG9sZGVyLmFkZFRhZyhjb25uZWN0VVJMLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvKiBkbyBub3RoaW5nICovXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbCB0aGlzIHdoZW4gYSBoYW5kc2hha2UgaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkgYW5kIHdlIHdhbnQgdG8gY29uc2lkZXIgdGhlIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWRcclxuICAgICAqL1xyXG4gICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNjcmlwdFRhZ0hvbGRlci5zdGFydExvbmdQb2xsKHRoaXMuaWQsIHRoaXMucGFzc3dvcmQpO1xyXG4gICAgICAgIHRoaXMuYWRkRGlzY29ubmVjdFBpbmdGcmFtZSh0aGlzLmlkLCB0aGlzLnBhc3N3b3JkKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZvcmNlcyBsb25nIHBvbGxpbmcgdG8gYmUgY29uc2lkZXJlZCBhcyBhIHBvdGVudGlhbCB0cmFuc3BvcnRcclxuICAgICAqL1xyXG4gICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLmZvcmNlQWxsb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLmZvcmNlQWxsb3dfID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZvcmNlcyBsb25ncG9sbGluZyB0byBub3QgYmUgY29uc2lkZXJlZCBhcyBhIHBvdGVudGlhbCB0cmFuc3BvcnRcclxuICAgICAqL1xyXG4gICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLmZvcmNlRGlzYWxsb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLmZvcmNlRGlzYWxsb3dfID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICAvLyBTdGF0aWMgbWV0aG9kLCB1c2Ugc3RyaW5nIGxpdGVyYWwgc28gaXQgY2FuIGJlIGFjY2Vzc2VkIGluIGEgZ2VuZXJpYyB3YXlcclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5pc0F2YWlsYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBOT1RFOiBJbiBSZWFjdC1OYXRpdmUgdGhlcmUncyBub3JtYWxseSBubyAnZG9jdW1lbnQnLCBidXQgaWYgeW91IGRlYnVnIGEgUmVhY3QtTmF0aXZlIGFwcCBpblxyXG4gICAgICAgIC8vIHRoZSBDaHJvbWUgZGVidWdnZXIsICdkb2N1bWVudCcgaXMgZGVmaW5lZCwgYnV0IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgbnVsbCAoMjAxNS8wNi8wOCkuXHJcbiAgICAgICAgcmV0dXJuIChCcm93c2VyUG9sbENvbm5lY3Rpb24uZm9yY2VBbGxvd18gfHxcclxuICAgICAgICAgICAgKCFCcm93c2VyUG9sbENvbm5lY3Rpb24uZm9yY2VEaXNhbGxvd18gJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgIWlzQ2hyb21lRXh0ZW5zaW9uQ29udGVudFNjcmlwdCgpICYmXHJcbiAgICAgICAgICAgICAgICAhaXNXaW5kb3dzU3RvcmVBcHAoKSAmJlxyXG4gICAgICAgICAgICAgICAgIXV0aWwuaXNOb2RlU2RrKCkpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE5vLW9wIGZvciBwb2xsaW5nXHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5wcm90b3R5cGUubWFya0Nvbm5lY3Rpb25IZWFsdGh5ID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyBwb2xsaW5nIGFuZCBjbGVhbnMgdXAgdGhlIGlmcmFtZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLnByb3RvdHlwZS5zaHV0ZG93bl8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pc0Nsb3NlZF8gPSB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLnNjcmlwdFRhZ0hvbGRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnNjcmlwdFRhZ0hvbGRlci5jbG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnNjcmlwdFRhZ0hvbGRlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vcmVtb3ZlIHRoZSBkaXNjb25uZWN0IGZyYW1lLCB3aGljaCB3aWxsIHRyaWdnZXIgYW4gWEhSIGNhbGwgdG8gdGhlIHNlcnZlciB0byB0ZWxsIGl0IHdlJ3JlIGxlYXZpbmcuXHJcbiAgICAgICAgaWYgKHRoaXMubXlEaXNjb25uRnJhbWUpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLm15RGlzY29ubkZyYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5teURpc2Nvbm5GcmFtZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0VGltZW91dFRpbWVyXyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gdGhpcyB0cmFuc3BvcnQgaXMgY2xvc2VkXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBCcm93c2VyUG9sbENvbm5lY3Rpb24ucHJvdG90eXBlLm9uQ2xvc2VkXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNDbG9zZWRfKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnTG9uZ3BvbGwgaXMgY2xvc2luZyBpdHNlbGYnKTtcclxuICAgICAgICAgICAgdGhpcy5zaHV0ZG93bl8oKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub25EaXNjb25uZWN0Xykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RfKHRoaXMuZXZlckNvbm5lY3RlZF8pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RfID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEV4dGVybmFsLWZhY2luZyBjbG9zZSBoYW5kbGVyLiBSZWFsVGltZSBoYXMgcmVxdWVzdGVkIHdlIHNodXQgZG93bi4gS2lsbCBvdXIgY29ubmVjdGlvbiBhbmQgdGVsbCB0aGUgc2VydmVyXHJcbiAgICAgKiB0aGF0IHdlJ3ZlIGxlZnQuXHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQ2xvc2VkXykge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ0xvbmdwb2xsIGlzIGJlaW5nIGNsb3NlZC4nKTtcclxuICAgICAgICAgICAgdGhpcy5zaHV0ZG93bl8oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSBKU09OIG9iamVjdCBkb3duIHRvIHRoZSBzZXJ2ZXIuIEl0IHdpbGwgbmVlZCB0byBiZSBzdHJpbmdpZmllZCwgYmFzZTY0IGVuY29kZWQsIGFuZCB0aGVuXHJcbiAgICAgKiBicm9rZW4gaW50byBjaHVua3MgKHNpbmNlIFVSTHMgaGF2ZSBhIHNtYWxsIG1heGltdW0gbGVuZ3RoKS5cclxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gZGF0YSBUaGUgSlNPTiBkYXRhIHRvIHRyYW5zbWl0LlxyXG4gICAgICovXHJcbiAgICBCcm93c2VyUG9sbENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciBkYXRhU3RyID0gdXRpbC5zdHJpbmdpZnkoZGF0YSk7XHJcbiAgICAgICAgdGhpcy5ieXRlc1NlbnQgKz0gZGF0YVN0ci5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5zdGF0c18uaW5jcmVtZW50Q291bnRlcignYnl0ZXNfc2VudCcsIGRhdGFTdHIubGVuZ3RoKTtcclxuICAgICAgICAvL2ZpcnN0LCBsZXRzIGdldCB0aGUgYmFzZTY0LWVuY29kZWQgZGF0YVxyXG4gICAgICAgIHZhciBiYXNlNjRkYXRhID0gdXRpbC5iYXNlNjRFbmNvZGUoZGF0YVN0cik7XHJcbiAgICAgICAgLy9XZSBjYW4gb25seSBmaXQgYSBjZXJ0YWluIGFtb3VudCBpbiBlYWNoIFVSTCwgc28gd2UgbmVlZCB0byBzcGxpdCB0aGlzIHJlcXVlc3RcclxuICAgICAgICAvL3VwIGludG8gbXVsdGlwbGUgcGllY2VzIGlmIGl0IGRvZXNuJ3QgZml0IGluIG9uZSByZXF1ZXN0LlxyXG4gICAgICAgIHZhciBkYXRhU2VncyA9IHNwbGl0U3RyaW5nQnlTaXplKGJhc2U2NGRhdGEsIE1BWF9QQVlMT0FEX1NJWkUpO1xyXG4gICAgICAgIC8vRW5xdWV1ZSBlYWNoIHNlZ21lbnQgZm9yIHRyYW5zbWlzc2lvbi4gV2UgYXNzaWduIGVhY2ggY2h1bmsgYSBzZXF1ZW50aWFsIElEIGFuZCBhIHRvdGFsIG51bWJlclxyXG4gICAgICAgIC8vb2Ygc2VnbWVudHMgc28gdGhhdCB3ZSBjYW4gcmVhc3NlbWJsZSB0aGUgcGFja2V0IG9uIHRoZSBzZXJ2ZXIuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhU2Vncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNjcmlwdFRhZ0hvbGRlci5lbnF1ZXVlU2VnbWVudCh0aGlzLmN1clNlZ21lbnROdW0sIGRhdGFTZWdzLmxlbmd0aCwgZGF0YVNlZ3NbaV0pO1xyXG4gICAgICAgICAgICB0aGlzLmN1clNlZ21lbnROdW0rKztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGlzIGhvdyB3ZSBub3RpZnkgdGhlIHNlcnZlciB0aGF0IHdlJ3JlIGxlYXZpbmcuXHJcbiAgICAgKiBXZSBhcmVuJ3QgYWJsZSB0byBzZW5kIHJlcXVlc3RzIHdpdGggREhUTUwgb24gYSB3aW5kb3cgY2xvc2UgZXZlbnQsIGJ1dCB3ZSBjYW5cclxuICAgICAqIHRyaWdnZXIgWEhSIHJlcXVlc3RzIGluIHNvbWUgYnJvd3NlcnMgKGV2ZXJ5dGhpbmcgYnV0IE9wZXJhIGJhc2ljYWxseSkuXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGlkXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IHB3XHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkRGlzY29ubmVjdFBpbmdGcmFtZSA9IGZ1bmN0aW9uIChpZCwgcHcpIHtcclxuICAgICAgICBpZiAodXRpbC5pc05vZGVTZGsoKSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMubXlEaXNjb25uRnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcclxuICAgICAgICB2YXIgdXJsUGFyYW1zID0ge307XHJcbiAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX0RJU0NPTk5fRlJBTUVfUkVRVUVTVF9QQVJBTV0gPSAndCc7XHJcbiAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX0lEX1BBUkFNXSA9IGlkO1xyXG4gICAgICAgIHVybFBhcmFtc1tGSVJFQkFTRV9MT05HUE9MTF9QV19QQVJBTV0gPSBwdztcclxuICAgICAgICB0aGlzLm15RGlzY29ubkZyYW1lLnNyYyA9IHRoaXMudXJsRm4odXJsUGFyYW1zKTtcclxuICAgICAgICB0aGlzLm15RGlzY29ubkZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLm15RGlzY29ubkZyYW1lKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdHJhY2sgdGhlIGJ5dGVzIHJlY2VpdmVkIGJ5IHRoaXMgY2xpZW50XHJcbiAgICAgKiBAcGFyYW0geyp9IGFyZ3NcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5wcm90b3R5cGUuaW5jcmVtZW50SW5jb21pbmdCeXRlc18gPSBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgIC8vIFRPRE86IFRoaXMgaXMgYW4gYW5ub3lpbmcgcGVyZiBoaXQganVzdCB0byB0cmFjayB0aGUgbnVtYmVyIG9mIGluY29taW5nIGJ5dGVzLiAgTWF5YmUgaXQgc2hvdWxkIGJlIG9wdC1pbi5cclxuICAgICAgICB2YXIgYnl0ZXNSZWNlaXZlZCA9IHV0aWwuc3RyaW5naWZ5KGFyZ3MpLmxlbmd0aDtcclxuICAgICAgICB0aGlzLmJ5dGVzUmVjZWl2ZWQgKz0gYnl0ZXNSZWNlaXZlZDtcclxuICAgICAgICB0aGlzLnN0YXRzXy5pbmNyZW1lbnRDb3VudGVyKCdieXRlc19yZWNlaXZlZCcsIGJ5dGVzUmVjZWl2ZWQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCcm93c2VyUG9sbENvbm5lY3Rpb247XHJcbn0oKSk7XHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICogQSB3cmFwcGVyIGFyb3VuZCBhbiBpZnJhbWUgdGhhdCBpcyB1c2VkIGFzIGEgbG9uZy1wb2xsaW5nIHNjcmlwdCBob2xkZXIuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG52YXIgRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjb21tYW5kQ0IgLSBUaGUgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gY29udHJvbCBjb21tYW5kcyBhcmUgcmVjZXZpZWQgZnJvbSB0aGUgc2VydmVyLlxyXG4gICAgICogQHBhcmFtIG9uTWVzc2FnZUNCIC0gVGhlIGNhbGxiYWNrIHRvIGJlIHRyaWdnZXJlZCB3aGVuIHJlc3BvbnNlcyBhcnJpdmUgZnJvbSB0aGUgc2VydmVyLlxyXG4gICAgICogQHBhcmFtIG9uRGlzY29ubmVjdCAtIFRoZSBjYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiB0aGlzIHRhZyBob2xkZXIgaXMgY2xvc2VkXHJcbiAgICAgKiBAcGFyYW0gdXJsRm4gLSBBIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgdGhlIFVSTCBvZiB0aGUgZW5kcG9pbnQgdG8gc2VuZCBkYXRhIHRvLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBGaXJlYmFzZUlGcmFtZVNjcmlwdEhvbGRlcihjb21tYW5kQ0IsIG9uTWVzc2FnZUNCLCBvbkRpc2Nvbm5lY3QsIHVybEZuKSB7XHJcbiAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3QgPSBvbkRpc2Nvbm5lY3Q7XHJcbiAgICAgICAgdGhpcy51cmxGbiA9IHVybEZuO1xyXG4gICAgICAgIC8vV2UgbWFpbnRhaW4gYSBjb3VudCBvZiBhbGwgb2YgdGhlIG91dHN0YW5kaW5nIHJlcXVlc3RzLCBiZWNhdXNlIGlmIHdlIGhhdmUgdG9vIG1hbnkgYWN0aXZlIGF0IG9uY2UgaXQgY2FuIGNhdXNlXHJcbiAgICAgICAgLy9wcm9ibGVtcyBpbiBzb21lIGJyb3dzZXJzLlxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtDb3VudGVkU2V0LjxudW1iZXIsIG51bWJlcj59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vdXRzdGFuZGluZ1JlcXVlc3RzID0gbmV3IENvdW50ZWRTZXQoKTtcclxuICAgICAgICAvL0EgcXVldWUgb2YgdGhlIHBlbmRpbmcgc2VnbWVudHMgd2FpdGluZyBmb3IgdHJhbnNtaXNzaW9uIHRvIHRoZSBzZXJ2ZXIuXHJcbiAgICAgICAgdGhpcy5wZW5kaW5nU2VncyA9IFtdO1xyXG4gICAgICAgIC8vQSBzZXJpYWwgbnVtYmVyLiBXZSB1c2UgdGhpcyBmb3IgdHdvIHRoaW5nczpcclxuICAgICAgICAvLyAxKSBBIHdheSB0byBlbnN1cmUgdGhlIGJyb3dzZXIgZG9lc24ndCBjYWNoZSByZXNwb25zZXMgdG8gcG9sbHNcclxuICAgICAgICAvLyAyKSBBIHdheSB0byBtYWtlIHRoZSBzZXJ2ZXIgYXdhcmUgd2hlbiBsb25nLXBvbGxzIGFycml2ZSBpbiBhIGRpZmZlcmVudCBvcmRlciB0aGFuIHdlIHN0YXJ0ZWQgdGhlbS4gVGhlXHJcbiAgICAgICAgLy8gICAgc2VydmVyIG5lZWRzIHRvIHJlbGVhc2UgYm90aCBwb2xscyBpbiB0aGlzIGNhc2Ugb3IgaXQgd2lsbCBjYXVzZSBwcm9ibGVtcyBpbiBPcGVyYSBzaW5jZSBPcGVyYSBjYW4gb25seSBleGVjdXRlXHJcbiAgICAgICAgLy8gICAgSlNPTlAgY29kZSBpbiB0aGUgb3JkZXIgaXQgd2FzIGFkZGVkIHRvIHRoZSBpZnJhbWUuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50U2VyaWFsID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgICAgICAvLyBUaGlzIGdldHMgc2V0IHRvIGZhbHNlIHdoZW4gd2UncmUgXCJjbG9zaW5nIGRvd25cIiB0aGUgY29ubmVjdGlvbiAoZS5nLiB3ZSdyZSBzd2l0Y2hpbmcgdHJhbnNwb3J0cyBidXQgdGhlcmUncyBzdGlsbFxyXG4gICAgICAgIC8vIGluY29taW5nIGRhdGEgZnJvbSB0aGUgc2VydmVyIHRoYXQgd2UncmUgd2FpdGluZyBmb3IpLlxyXG4gICAgICAgIHRoaXMuc2VuZE5ld1BvbGxzID0gdHJ1ZTtcclxuICAgICAgICBpZiAoIXV0aWwuaXNOb2RlU2RrKCkpIHtcclxuICAgICAgICAgICAgLy9FYWNoIHNjcmlwdCBob2xkZXIgcmVnaXN0ZXJzIGEgY291cGxlIG9mIHVuaXF1ZWx5IG5hbWVkIGNhbGxiYWNrcyB3aXRoIHRoZSB3aW5kb3cuIFRoZXNlIGFyZSBjYWxsZWQgZnJvbSB0aGVcclxuICAgICAgICAgICAgLy9pZnJhbWVzIHdoZXJlIHdlIHB1dCB0aGUgbG9uZy1wb2xsaW5nIHNjcmlwdCB0YWdzLiBXZSBoYXZlIHR3byBjYWxsYmFja3M6XHJcbiAgICAgICAgICAgIC8vICAgMSkgQ29tbWFuZCBDYWxsYmFjayAtIFRyaWdnZXJlZCBmb3IgY29udHJvbCBpc3N1ZXMsIGxpa2Ugc3RhcnRpbmcgYSBjb25uZWN0aW9uLlxyXG4gICAgICAgICAgICAvLyAgIDIpIE1lc3NhZ2UgQ2FsbGJhY2sgLSBUcmlnZ2VyZWQgd2hlbiBuZXcgZGF0YSBhcnJpdmVzLlxyXG4gICAgICAgICAgICB0aGlzLnVuaXF1ZUNhbGxiYWNrSWRlbnRpZmllciA9IExVSURHZW5lcmF0b3IoKTtcclxuICAgICAgICAgICAgd2luZG93W0ZJUkVCQVNFX0xPTkdQT0xMX0NPTU1BTkRfQ0JfTkFNRSArIHRoaXMudW5pcXVlQ2FsbGJhY2tJZGVudGlmaWVyXSA9IGNvbW1hbmRDQjtcclxuICAgICAgICAgICAgd2luZG93W0ZJUkVCQVNFX0xPTkdQT0xMX0RBVEFfQ0JfTkFNRSArIHRoaXMudW5pcXVlQ2FsbGJhY2tJZGVudGlmaWVyXSA9IG9uTWVzc2FnZUNCO1xyXG4gICAgICAgICAgICAvL0NyZWF0ZSBhbiBpZnJhbWUgZm9yIHVzIHRvIGFkZCBzY3JpcHQgdGFncyB0by5cclxuICAgICAgICAgICAgdGhpcy5teUlGcmFtZSA9IEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyLmNyZWF0ZUlGcmFtZV8oKTtcclxuICAgICAgICAgICAgLy8gU2V0IHRoZSBpZnJhbWUncyBjb250ZW50cy5cclxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9ICcnO1xyXG4gICAgICAgICAgICAvLyBpZiB3ZSBzZXQgYSBqYXZhc2NyaXB0IHVybCwgaXQncyBJRSBhbmQgd2UgbmVlZCB0byBzZXQgdGhlIGRvY3VtZW50IGRvbWFpbi4gVGhlIGphdmFzY3JpcHQgdXJsIGlzIHN1ZmZpY2llbnRcclxuICAgICAgICAgICAgLy8gZm9yIGllOSwgYnV0IGllOCBuZWVkcyB0byBkbyBpdCBhZ2FpbiBpbiB0aGUgZG9jdW1lbnQgaXRzZWxmLlxyXG4gICAgICAgICAgICBpZiAodGhpcy5teUlGcmFtZS5zcmMgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMubXlJRnJhbWUuc3JjLnN1YnN0cigwLCAnamF2YXNjcmlwdDonLmxlbmd0aCkgPT09ICdqYXZhc2NyaXB0OicpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50RG9tYWluID0gZG9jdW1lbnQuZG9tYWluO1xyXG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gJzxzY3JpcHQ+ZG9jdW1lbnQuZG9tYWluPVwiJyArIGN1cnJlbnREb21haW4gKyAnXCI7PC9zY3JpcHQ+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaWZyYW1lQ29udGVudHMgPSAnPGh0bWw+PGJvZHk+JyArIHNjcmlwdCArICc8L2JvZHk+PC9odG1sPic7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm15SUZyYW1lLmRvYy5vcGVuKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm15SUZyYW1lLmRvYy53cml0ZShpZnJhbWVDb250ZW50cyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm15SUZyYW1lLmRvYy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBsb2coJ2ZyYW1lIHdyaXRpbmcgZXhjZXB0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5zdGFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZyhlLnN0YWNrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxvZyhlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jb21tYW5kQ0IgPSBjb21tYW5kQ0I7XHJcbiAgICAgICAgICAgIHRoaXMub25NZXNzYWdlQ0IgPSBvbk1lc3NhZ2VDQjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEVhY2ggYnJvd3NlciBoYXMgaXRzIG93biBmdW5ueSB3YXkgdG8gaGFuZGxlIGlmcmFtZXMuIEhlcmUgd2UgbXVzaCB0aGVtIGFsbCB0b2dldGhlciBpbnRvIG9uZSBvYmplY3QgdGhhdCBJIGNhblxyXG4gICAgICogYWN0dWFsbHkgdXNlLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4ge0VsZW1lbnR9XHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyLmNyZWF0ZUlGcmFtZV8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xyXG4gICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGluIG9yZGVyIHRvIGluaXRpYWxpemUgdGhlIGRvY3VtZW50IGluc2lkZSB0aGUgaWZyYW1lXHJcbiAgICAgICAgaWYgKGRvY3VtZW50LmJvZHkpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgZG9jdW1lbnQuZG9tYWluIGhhcyBiZWVuIG1vZGlmaWVkIGluIElFLCB0aGlzIHdpbGwgdGhyb3cgYW4gZXJyb3IsIGFuZCB3ZSBuZWVkIHRvIHNldCB0aGVcclxuICAgICAgICAgICAgICAgIC8vIGRvbWFpbiBvZiB0aGUgaWZyYW1lJ3MgZG9jdW1lbnQgbWFudWFsbHkuIFdlIGNhbiBkbyB0aGlzIHZpYSBhIGphdmFzY3JpcHQ6IHVybCBhcyB0aGUgc3JjIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICAgICAgLy8gQWxzbyBub3RlIHRoYXQgd2UgbXVzdCBkbyB0aGlzICphZnRlciogdGhlIGlmcmFtZSBoYXMgYmVlbiBhcHBlbmRlZCB0byB0aGUgcGFnZS4gT3RoZXJ3aXNlIGl0IGRvZXNuJ3Qgd29yay5cclxuICAgICAgICAgICAgICAgIHZhciBhID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBBcG9sb2dpZXMgZm9yIHRoZSBsb2ctc3BhbSwgSSBuZWVkIHRvIGRvIHNvbWV0aGluZyB0byBrZWVwIGNsb3N1cmUgZnJvbSBvcHRpbWl6aW5nIG91dCB0aGUgYXNzaWdubWVudCBhYm92ZS5cclxuICAgICAgICAgICAgICAgICAgICBsb2coJ05vIElFIGRvbWFpbiBzZXR0aW5nIHJlcXVpcmVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkb21haW4gPSBkb2N1bWVudC5kb21haW47XHJcbiAgICAgICAgICAgICAgICBpZnJhbWUuc3JjID1cclxuICAgICAgICAgICAgICAgICAgICBcImphdmFzY3JpcHQ6dm9pZCgoZnVuY3Rpb24oKXtkb2N1bWVudC5vcGVuKCk7ZG9jdW1lbnQuZG9tYWluPSdcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbWFpbiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiJztkb2N1bWVudC5jbG9zZSgpO30pKCkpXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIExvbmdQb2xsQ29ubmVjdGlvbiBhdHRlbXB0cyB0byBkZWxheSBpbml0aWFsaXphdGlvbiB1bnRpbCB0aGUgZG9jdW1lbnQgaXMgcmVhZHksIHNvIGhvcGVmdWxseSB0aGlzXHJcbiAgICAgICAgICAgIC8vIG5ldmVyIGdldHMgaGl0LlxyXG4gICAgICAgICAgICB0aHJvdyAnRG9jdW1lbnQgYm9keSBoYXMgbm90IGluaXRpYWxpemVkLiBXYWl0IHRvIGluaXRpYWxpemUgRmlyZWJhc2UgdW50aWwgYWZ0ZXIgdGhlIGRvY3VtZW50IGlzIHJlYWR5Lic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEdldCB0aGUgZG9jdW1lbnQgb2YgdGhlIGlmcmFtZSBpbiBhIGJyb3dzZXItc3BlY2lmaWMgd2F5LlxyXG4gICAgICAgIGlmIChpZnJhbWUuY29udGVudERvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIGlmcmFtZS5kb2MgPSBpZnJhbWUuY29udGVudERvY3VtZW50OyAvLyBGaXJlZm94LCBPcGVyYSwgU2FmYXJpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlmcmFtZS5jb250ZW50V2luZG93KSB7XHJcbiAgICAgICAgICAgIGlmcmFtZS5kb2MgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDsgLy8gSW50ZXJuZXQgRXhwbG9yZXJcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaWZyYW1lLmRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgIGlmcmFtZS5kb2MgPSBpZnJhbWUuZG9jdW1lbnQ7IC8vb3RoZXJzP1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaWZyYW1lO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FuY2VsIGFsbCBvdXRzdGFuZGluZyBxdWVyaWVzIGFuZCByZW1vdmUgdGhlIGZyYW1lLlxyXG4gICAgICovXHJcbiAgICBGaXJlYmFzZUlGcmFtZVNjcmlwdEhvbGRlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvL01hcmsgdGhpcyBpZnJhbWUgYXMgZGVhZCwgc28gbm8gbmV3IHJlcXVlc3RzIGFyZSBzZW50LlxyXG4gICAgICAgIHRoaXMuYWxpdmUgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5teUlGcmFtZSkge1xyXG4gICAgICAgICAgICAvL1dlIGhhdmUgdG8gYWN0dWFsbHkgcmVtb3ZlIGFsbCBvZiB0aGUgaHRtbCBpbnNpZGUgdGhpcyBpZnJhbWUgYmVmb3JlIHJlbW92aW5nIGl0IGZyb20gdGhlXHJcbiAgICAgICAgICAgIC8vd2luZG93LCBvciBJRSB3aWxsIGNvbnRpbnVlIGxvYWRpbmcgYW5kIGV4ZWN1dGluZyB0aGUgc2NyaXB0IHRhZ3Mgd2UndmUgYWxyZWFkeSBhZGRlZCwgd2hpY2hcclxuICAgICAgICAgICAgLy9jYW4gbGVhZCB0byBzb21lIGVycm9ycyBiZWluZyB0aHJvd24uIFNldHRpbmcgaW5uZXJIVE1MIHNlZW1zIHRvIGJlIHRoZSBlYXNpZXN0IHdheSB0byBkbyB0aGlzLlxyXG4gICAgICAgICAgICB0aGlzLm15SUZyYW1lLmRvYy5ib2R5LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5teUlGcmFtZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoX3RoaXMubXlJRnJhbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm15SUZyYW1lID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgTWF0aC5mbG9vcigwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1dGlsLmlzTm9kZVNkaygpICYmIHRoaXMubXlJRCkge1xyXG4gICAgICAgICAgICB2YXIgdXJsUGFyYW1zID0ge307XHJcbiAgICAgICAgICAgIHVybFBhcmFtc1tGSVJFQkFTRV9MT05HUE9MTF9ESVNDT05OX0ZSQU1FX1BBUkFNXSA9ICd0JztcclxuICAgICAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX0lEX1BBUkFNXSA9IHRoaXMubXlJRDtcclxuICAgICAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX1BXX1BBUkFNXSA9IHRoaXMubXlQVztcclxuICAgICAgICAgICAgdmFyIHRoZVVSTCA9IHRoaXMudXJsRm4odXJsUGFyYW1zKTtcclxuICAgICAgICAgICAgRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIubm9kZVJlc3RSZXF1ZXN0KHRoZVVSTCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFByb3RlY3QgZnJvbSBiZWluZyBjYWxsZWQgcmVjdXJzaXZlbHkuXHJcbiAgICAgICAgdmFyIG9uRGlzY29ubmVjdCA9IHRoaXMub25EaXNjb25uZWN0O1xyXG4gICAgICAgIGlmIChvbkRpc2Nvbm5lY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3QgPSBudWxsO1xyXG4gICAgICAgICAgICBvbkRpc2Nvbm5lY3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBY3R1YWxseSBzdGFydCB0aGUgbG9uZy1wb2xsaW5nIHNlc3Npb24gYnkgYWRkaW5nIHRoZSBmaXJzdCBzY3JpcHQgdGFnKHMpIHRvIHRoZSBpZnJhbWUuXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGlkIC0gVGhlIElEIG9mIHRoaXMgY29ubmVjdGlvblxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBwdyAtIFRoZSBwYXNzd29yZCBmb3IgdGhpcyBjb25uZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyLnByb3RvdHlwZS5zdGFydExvbmdQb2xsID0gZnVuY3Rpb24gKGlkLCBwdykge1xyXG4gICAgICAgIHRoaXMubXlJRCA9IGlkO1xyXG4gICAgICAgIHRoaXMubXlQVyA9IHB3O1xyXG4gICAgICAgIHRoaXMuYWxpdmUgPSB0cnVlO1xyXG4gICAgICAgIC8vc2VuZCB0aGUgaW5pdGlhbCByZXF1ZXN0LiBJZiB0aGVyZSBhcmUgcmVxdWVzdHMgcXVldWVkLCBtYWtlIHN1cmUgdGhhdCB3ZSB0cmFuc21pdCBhcyBtYW55IGFzIHdlIGFyZSBjdXJyZW50bHkgYWJsZSB0by5cclxuICAgICAgICB3aGlsZSAodGhpcy5uZXdSZXF1ZXN0XygpKSB7IH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgaXMgY2FsbGVkIGFueSB0aW1lIHNvbWVvbmUgbWlnaHQgd2FudCBhIHNjcmlwdCB0YWcgdG8gYmUgYWRkZWQuIEl0IGFkZHMgYSBzY3JpcHQgdGFnIHdoZW4gdGhlcmUgYXJlbid0XHJcbiAgICAgKiB0b28gbWFueSBvdXRzdGFuZGluZyByZXF1ZXN0cyBhbmQgd2UgYXJlIHN0aWxsIGFsaXZlLlxyXG4gICAgICpcclxuICAgICAqIElmIHRoZXJlIGFyZSBvdXRzdGFuZGluZyBwYWNrZXQgc2VnbWVudHMgdG8gc2VuZCwgaXQgc2VuZHMgb25lLiBJZiB0aGVyZSBhcmVuJ3QsIGl0IHNlbmRzIGEgbG9uZy1wb2xsIGFueXdheXMgaWZcclxuICAgICAqIG5lZWRlZC5cclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIucHJvdG90eXBlLm5ld1JlcXVlc3RfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFdlIGtlZXAgb25lIG91dHN0YW5kaW5nIHJlcXVlc3Qgb3BlbiBhbGwgdGhlIHRpbWUgdG8gcmVjZWl2ZSBkYXRhLCBidXQgaWYgd2UgbmVlZCB0byBzZW5kIGRhdGFcclxuICAgICAgICAvLyAocGVuZGluZ1NlZ3MubGVuZ3RoID4gMCkgdGhlbiB3ZSBjcmVhdGUgYSBuZXcgcmVxdWVzdCB0byBzZW5kIHRoZSBkYXRhLiAgVGhlIHNlcnZlciB3aWxsIGF1dG9tYXRpY2FsbHlcclxuICAgICAgICAvLyBjbG9zZSB0aGUgb2xkIHJlcXVlc3QuXHJcbiAgICAgICAgaWYgKHRoaXMuYWxpdmUgJiZcclxuICAgICAgICAgICAgdGhpcy5zZW5kTmV3UG9sbHMgJiZcclxuICAgICAgICAgICAgdGhpcy5vdXRzdGFuZGluZ1JlcXVlc3RzLmNvdW50KCkgPCAodGhpcy5wZW5kaW5nU2Vncy5sZW5ndGggPiAwID8gMiA6IDEpKSB7XHJcbiAgICAgICAgICAgIC8vY29uc3RydWN0IG91ciB1cmxcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2VyaWFsKys7XHJcbiAgICAgICAgICAgIHZhciB1cmxQYXJhbXMgPSB7fTtcclxuICAgICAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX0lEX1BBUkFNXSA9IHRoaXMubXlJRDtcclxuICAgICAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX1BXX1BBUkFNXSA9IHRoaXMubXlQVztcclxuICAgICAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX1NFUklBTF9QQVJBTV0gPSB0aGlzLmN1cnJlbnRTZXJpYWw7XHJcbiAgICAgICAgICAgIHZhciB0aGVVUkwgPSB0aGlzLnVybEZuKHVybFBhcmFtcyk7XHJcbiAgICAgICAgICAgIC8vTm93IGFkZCBhcyBtdWNoIGRhdGEgYXMgd2UgY2FuLlxyXG4gICAgICAgICAgICB2YXIgY3VyRGF0YVN0cmluZyA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnBlbmRpbmdTZWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIC8vZmlyc3QsIGxldHMgc2VlIGlmIHRoZSBuZXh0IHNlZ21lbnQgd2lsbCBmaXQuXHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dFNlZyA9IHRoaXMucGVuZGluZ1NlZ3NbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dFNlZy5kLmxlbmd0aCArIFNFR19IRUFERVJfU0laRSArIGN1ckRhdGFTdHJpbmcubGVuZ3RoIDw9XHJcbiAgICAgICAgICAgICAgICAgICAgTUFYX1VSTF9EQVRBX1NJWkUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2dyZWF0LCB0aGUgc2VnbWVudCB3aWxsIGZpdC4gTGV0cyBhcHBlbmQgaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVNlZyA9IHRoaXMucGVuZGluZ1NlZ3Muc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJEYXRhU3RyaW5nID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyRGF0YVN0cmluZyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklSRUJBU0VfTE9OR1BPTExfU0VHTUVOVF9OVU1fUEFSQU0gK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPScgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlU2VnLnNlZyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklSRUJBU0VfTE9OR1BPTExfU0VHTUVOVFNfSU5fUEFDS0VUICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJz0nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZVNlZy50cyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklSRUJBU0VfTE9OR1BPTExfREFUQV9QQVJBTSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc9JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVTZWcuZDtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGVVUkwgPSB0aGVVUkwgKyBjdXJEYXRhU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmFkZExvbmdQb2xsVGFnXyh0aGVVUkwsIHRoaXMuY3VycmVudFNlcmlhbCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFF1ZXVlIGEgcGFja2V0IGZvciB0cmFuc21pc3Npb24gdG8gdGhlIHNlcnZlci5cclxuICAgICAqIEBwYXJhbSBzZWdudW0gLSBBIHNlcXVlbnRpYWwgaWQgZm9yIHRoaXMgcGFja2V0IHNlZ21lbnQgdXNlZCBmb3IgcmVhc3NlbWJseVxyXG4gICAgICogQHBhcmFtIHRvdGFsc2VncyAtIFRoZSB0b3RhbCBudW1iZXIgb2Ygc2VnbWVudHMgaW4gdGhpcyBwYWNrZXRcclxuICAgICAqIEBwYXJhbSBkYXRhIC0gVGhlIGRhdGEgZm9yIHRoaXMgc2VnbWVudC5cclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIucHJvdG90eXBlLmVucXVldWVTZWdtZW50ID0gZnVuY3Rpb24gKHNlZ251bSwgdG90YWxzZWdzLCBkYXRhKSB7XHJcbiAgICAgICAgLy9hZGQgdGhpcyB0byB0aGUgcXVldWUgb2Ygc2VnbWVudHMgdG8gc2VuZC5cclxuICAgICAgICB0aGlzLnBlbmRpbmdTZWdzLnB1c2goeyBzZWc6IHNlZ251bSwgdHM6IHRvdGFsc2VncywgZDogZGF0YSB9KTtcclxuICAgICAgICAvL3NlbmQgdGhlIGRhdGEgaW1tZWRpYXRlbHkgaWYgdGhlcmUgaXNuJ3QgYWxyZWFkeSBkYXRhIGJlaW5nIHRyYW5zbWl0dGVkLCB1bmxlc3NcclxuICAgICAgICAvL3N0YXJ0TG9uZ1BvbGwgaGFzbid0IGJlZW4gY2FsbGVkIHlldC5cclxuICAgICAgICBpZiAodGhpcy5hbGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm5ld1JlcXVlc3RfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgc2NyaXB0IHRhZyBmb3IgYSByZWd1bGFyIGxvbmctcG9sbCByZXF1ZXN0LlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSB1cmwgLSBUaGUgVVJMIG9mIHRoZSBzY3JpcHQgdGFnLlxyXG4gICAgICogQHBhcmFtIHshbnVtYmVyfSBzZXJpYWwgLSBUaGUgc2VyaWFsIG51bWJlciBvZiB0aGUgcmVxdWVzdC5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyLnByb3RvdHlwZS5hZGRMb25nUG9sbFRhZ18gPSBmdW5jdGlvbiAodXJsLCBzZXJpYWwpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vcmVtZW1iZXIgdGhhdCB3ZSBzZW50IHRoaXMgcmVxdWVzdC5cclxuICAgICAgICB0aGlzLm91dHN0YW5kaW5nUmVxdWVzdHMuYWRkKHNlcmlhbCwgMSk7XHJcbiAgICAgICAgdmFyIGRvTmV3UmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMub3V0c3RhbmRpbmdSZXF1ZXN0cy5yZW1vdmUoc2VyaWFsKTtcclxuICAgICAgICAgICAgX3RoaXMubmV3UmVxdWVzdF8oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIElmIHRoaXMgcmVxdWVzdCBkb2Vzbid0IHJldHVybiBvbiBpdHMgb3duIGFjY29yZCAoYnkgdGhlIHNlcnZlciBzZW5kaW5nIHVzIHNvbWUgZGF0YSksIHdlJ2xsXHJcbiAgICAgICAgLy8gY3JlYXRlIGEgbmV3IG9uZSBhZnRlciB0aGUgS0VFUEFMSVZFIGludGVydmFsIHRvIG1ha2Ugc3VyZSB3ZSBhbHdheXMga2VlcCBhIGZyZXNoIHJlcXVlc3Qgb3Blbi5cclxuICAgICAgICB2YXIga2VlcGFsaXZlVGltZW91dCA9IHNldFRpbWVvdXQoZG9OZXdSZXF1ZXN0LCBNYXRoLmZsb29yKEtFRVBBTElWRV9SRVFVRVNUX0lOVEVSVkFMKSk7XHJcbiAgICAgICAgdmFyIHJlYWR5U3RhdGVDQiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gUmVxdWVzdCBjb21wbGV0ZWQuICBDYW5jZWwgdGhlIGtlZXBhbGl2ZS5cclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGtlZXBhbGl2ZVRpbWVvdXQpO1xyXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGEgbmV3IHJlcXVlc3Qgc28gd2UgY2FuIGNvbnRpbnVlIHJlY2VpdmluZyBkYXRhLlxyXG4gICAgICAgICAgICBkb05ld1JlcXVlc3QoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuYWRkVGFnKHVybCwgcmVhZHlTdGF0ZUNCKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhbiBhcmJpdHJhcnkgc2NyaXB0IHRhZyB0byB0aGUgaWZyYW1lLlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSB1cmwgLSBUaGUgVVJMIGZvciB0aGUgc2NyaXB0IHRhZyBzb3VyY2UuXHJcbiAgICAgKiBAcGFyYW0geyFmdW5jdGlvbigpfSBsb2FkQ0IgLSBBIGNhbGxiYWNrIHRvIGJlIHRyaWdnZXJlZCBvbmNlIHRoZSBzY3JpcHQgaGFzIGxvYWRlZC5cclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIucHJvdG90eXBlLmFkZFRhZyA9IGZ1bmN0aW9uICh1cmwsIGxvYWRDQikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNOb2RlU2RrKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kb05vZGVMb25nUG9sbCh1cmwsIGxvYWRDQik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UncmUgYWxyZWFkeSBjbG9zZWQsIGRvbid0IGFkZCB0aGlzIHBvbGxcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnNlbmROZXdQb2xscylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdTY3JpcHRfMSA9IF90aGlzLm15SUZyYW1lLmRvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdTY3JpcHRfMS50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2NyaXB0XzEuYXN5bmMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdF8xLnNyYyA9IHVybDtcclxuICAgICAgICAgICAgICAgICAgICBuZXdTY3JpcHRfMS5vbmxvYWQgPSBuZXdTY3JpcHRfMS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByc3RhdGUgPSBuZXdTY3JpcHRfMS5yZWFkeVN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJzdGF0ZSB8fCByc3RhdGUgPT09ICdsb2FkZWQnIHx8IHJzdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2NyaXB0XzEub25sb2FkID0gbmV3U2NyaXB0XzEub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdTY3JpcHRfMS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2NyaXB0XzEucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuZXdTY3JpcHRfMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkQ0IoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2NyaXB0XzEub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nKCdMb25nLXBvbGwgc2NyaXB0IGZhaWxlZCB0byBsb2FkOiAnICsgdXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2VuZE5ld1BvbGxzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5teUlGcmFtZS5kb2MuYm9keS5hcHBlbmRDaGlsZChuZXdTY3JpcHRfMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHdlIHNob3VsZCBtYWtlIHRoaXMgZXJyb3IgdmlzaWJsZSBzb21laG93XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIE1hdGguZmxvb3IoMSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgV0VCU09DS0VUX01BWF9GUkFNRV9TSVpFID0gMTYzODQ7XHJcbnZhciBXRUJTT0NLRVRfS0VFUEFMSVZFX0lOVEVSVkFMID0gNDUwMDA7XHJcbnZhciBXZWJTb2NrZXRJbXBsID0gbnVsbDtcclxuaWYgKHR5cGVvZiBNb3pXZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBXZWJTb2NrZXRJbXBsID0gTW96V2ViU29ja2V0O1xyXG59XHJcbmVsc2UgaWYgKHR5cGVvZiBXZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBXZWJTb2NrZXRJbXBsID0gV2ViU29ja2V0O1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBuZXcgd2Vic29ja2V0IGNvbm5lY3Rpb24gd2l0aCB0aGUgZ2l2ZW4gY2FsbGJhY2tzLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGltcGxlbWVudHMge1RyYW5zcG9ydH1cclxuICovXHJcbnZhciBXZWJTb2NrZXRDb25uZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29ubklkIGlkZW50aWZpZXIgZm9yIHRoaXMgdHJhbnNwb3J0XHJcbiAgICAgKiBAcGFyYW0ge1JlcG9JbmZvfSByZXBvSW5mbyBUaGUgaW5mbyBmb3IgdGhlIHdlYnNvY2tldCBlbmRwb2ludC5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHJhbnNwb3J0U2Vzc2lvbklkIE9wdGlvbmFsIHRyYW5zcG9ydFNlc3Npb25JZCBpZiB0aGlzIGlzIGNvbm5lY3RpbmcgdG8gYW4gZXhpc3RpbmcgdHJhbnNwb3J0XHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBsYXN0U2Vzc2lvbklkIE9wdGlvbmFsIGxhc3RTZXNzaW9uSWQgaWYgdGhlcmUgd2FzIGEgcHJldmlvdXMgY29ubmVjdGlvblxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBXZWJTb2NrZXRDb25uZWN0aW9uKGNvbm5JZCwgcmVwb0luZm8sIHRyYW5zcG9ydFNlc3Npb25JZCwgbGFzdFNlc3Npb25JZCkge1xyXG4gICAgICAgIHRoaXMuY29ubklkID0gY29ubklkO1xyXG4gICAgICAgIHRoaXMua2VlcGFsaXZlVGltZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZnJhbWVzID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRvdGFsRnJhbWVzID0gMDtcclxuICAgICAgICB0aGlzLmJ5dGVzU2VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5ieXRlc1JlY2VpdmVkID0gMDtcclxuICAgICAgICB0aGlzLmxvZ18gPSBsb2dXcmFwcGVyKHRoaXMuY29ubklkKTtcclxuICAgICAgICB0aGlzLnN0YXRzXyA9IFN0YXRzTWFuYWdlci5nZXRDb2xsZWN0aW9uKHJlcG9JbmZvKTtcclxuICAgICAgICB0aGlzLmNvbm5VUkwgPSBXZWJTb2NrZXRDb25uZWN0aW9uLmNvbm5lY3Rpb25VUkxfKHJlcG9JbmZvLCB0cmFuc3BvcnRTZXNzaW9uSWQsIGxhc3RTZXNzaW9uSWQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1JlcG9JbmZvfSByZXBvSW5mbyBUaGUgaW5mbyBmb3IgdGhlIHdlYnNvY2tldCBlbmRwb2ludC5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHJhbnNwb3J0U2Vzc2lvbklkIE9wdGlvbmFsIHRyYW5zcG9ydFNlc3Npb25JZCBpZiB0aGlzIGlzIGNvbm5lY3RpbmcgdG8gYW4gZXhpc3RpbmcgdHJhbnNwb3J0XHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBsYXN0U2Vzc2lvbklkIE9wdGlvbmFsIGxhc3RTZXNzaW9uSWQgaWYgdGhlcmUgd2FzIGEgcHJldmlvdXMgY29ubmVjdGlvblxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBjb25uZWN0aW9uIHVybFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5jb25uZWN0aW9uVVJMXyA9IGZ1bmN0aW9uIChyZXBvSW5mbywgdHJhbnNwb3J0U2Vzc2lvbklkLCBsYXN0U2Vzc2lvbklkKSB7XHJcbiAgICAgICAgdmFyIHVybFBhcmFtcyA9IHt9O1xyXG4gICAgICAgIHVybFBhcmFtc1tWRVJTSU9OX1BBUkFNXSA9IFBST1RPQ09MX1ZFUlNJT047XHJcbiAgICAgICAgaWYgKCF1dGlsLmlzTm9kZVNkaygpICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAgICAgbG9jYXRpb24uaHJlZiAmJlxyXG4gICAgICAgICAgICBsb2NhdGlvbi5ocmVmLmluZGV4T2YoRk9SR0VfRE9NQUlOKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgdXJsUGFyYW1zW1JFRkVSRVJfUEFSQU1dID0gRk9SR0VfUkVGO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHJhbnNwb3J0U2Vzc2lvbklkKSB7XHJcbiAgICAgICAgICAgIHVybFBhcmFtc1tUUkFOU1BPUlRfU0VTU0lPTl9QQVJBTV0gPSB0cmFuc3BvcnRTZXNzaW9uSWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYXN0U2Vzc2lvbklkKSB7XHJcbiAgICAgICAgICAgIHVybFBhcmFtc1tMQVNUX1NFU1NJT05fUEFSQU1dID0gbGFzdFNlc3Npb25JZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcG9JbmZvLmNvbm5lY3Rpb25VUkwoV0VCU09DS0VULCB1cmxQYXJhbXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBvbk1lc3NhZ2UgQ2FsbGJhY2sgd2hlbiBtZXNzYWdlcyBhcnJpdmVcclxuICAgICAqIEBwYXJhbSBvbkRpc2Nvbm5lY3QgQ2FsbGJhY2sgd2l0aCBjb25uZWN0aW9uIGxvc3QuXHJcbiAgICAgKi9cclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAob25NZXNzYWdlLCBvbkRpc2Nvbm5lY3QpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0ID0gb25EaXNjb25uZWN0O1xyXG4gICAgICAgIHRoaXMub25NZXNzYWdlID0gb25NZXNzYWdlO1xyXG4gICAgICAgIHRoaXMubG9nXygnV2Vic29ja2V0IGNvbm5lY3RpbmcgdG8gJyArIHRoaXMuY29ublVSTCk7XHJcbiAgICAgICAgdGhpcy5ldmVyQ29ubmVjdGVkXyA9IGZhbHNlO1xyXG4gICAgICAgIC8vIEFzc3VtZSBmYWlsdXJlIHVudGlsIHByb3ZlbiBvdGhlcndpc2UuXHJcbiAgICAgICAgUGVyc2lzdGVudFN0b3JhZ2Uuc2V0KCdwcmV2aW91c193ZWJzb2NrZXRfZmFpbHVyZScsIHRydWUpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzTm9kZVNkaygpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGV2aWNlID0gdXRpbC5DT05TVEFOVFMuTk9ERV9BRE1JTiA/ICdBZG1pbk5vZGUnIDogJ05vZGUnO1xyXG4gICAgICAgICAgICAgICAgLy8gVUEgRm9ybWF0OiBGaXJlYmFzZS88d2lyZV9wcm90b2NvbD4vPHNka192ZXJzaW9uPi88cGxhdGZvcm0+LzxkZXZpY2U+XHJcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogXCJGaXJlYmFzZS9cIiArIFBST1RPQ09MX1ZFUlNJT04gKyBcIi9cIiArIGZpcmViYXNlLlNES19WRVJTSU9OICsgXCIvXCIgKyBwcm9jZXNzLnBsYXRmb3JtICsgXCIvXCIgKyBkZXZpY2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8gUGx1bWIgYXBwcm9wcmlhdGUgaHR0cF9wcm94eSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpbnRvIGZheWUtd2Vic29ja2V0IGlmIGl0IGV4aXN0cy5cclxuICAgICAgICAgICAgICAgIHZhciBlbnYgPSBwcm9jZXNzWydlbnYnXTtcclxuICAgICAgICAgICAgICAgIHZhciBwcm94eSA9IHRoaXMuY29ublVSTC5pbmRleE9mKCd3c3M6Ly8nKSA9PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgPyBlbnZbJ0hUVFBTX1BST1hZJ10gfHwgZW52WydodHRwc19wcm94eSddXHJcbiAgICAgICAgICAgICAgICAgICAgOiBlbnZbJ0hUVFBfUFJPWFknXSB8fCBlbnZbJ2h0dHBfcHJveHknXTtcclxuICAgICAgICAgICAgICAgIGlmIChwcm94eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbJ3Byb3h5J10gPSB7IG9yaWdpbjogcHJveHkgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubXlTb2NrID0gbmV3IFdlYlNvY2tldEltcGwodGhpcy5jb25uVVJMLCBbXSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm15U29jayA9IG5ldyBXZWJTb2NrZXRJbXBsKHRoaXMuY29ublVSTCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdFcnJvciBpbnN0YW50aWF0aW5nIFdlYlNvY2tldC4nKTtcclxuICAgICAgICAgICAgdmFyIGVycm9yID0gZS5tZXNzYWdlIHx8IGUuZGF0YTtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ18oZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub25DbG9zZWRfKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5teVNvY2sub25vcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5sb2dfKCdXZWJzb2NrZXQgY29ubmVjdGVkLicpO1xyXG4gICAgICAgICAgICBfdGhpcy5ldmVyQ29ubmVjdGVkXyA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm15U29jay5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5sb2dfKCdXZWJzb2NrZXQgY29ubmVjdGlvbiB3YXMgZGlzY29ubmVjdGVkLicpO1xyXG4gICAgICAgICAgICBfdGhpcy5teVNvY2sgPSBudWxsO1xyXG4gICAgICAgICAgICBfdGhpcy5vbkNsb3NlZF8oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubXlTb2NrLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZUluY29taW5nRnJhbWUobSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm15U29jay5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgX3RoaXMubG9nXygnV2ViU29ja2V0IGVycm9yLiAgQ2xvc2luZyBjb25uZWN0aW9uLicpO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBlLm1lc3NhZ2UgfHwgZS5kYXRhO1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxvZ18oZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLm9uQ2xvc2VkXygpO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBOby1vcCBmb3Igd2Vic29ja2V0cywgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBvbmNlIHRoZSBjb25uZWN0aW9uIGlzIGNvbmZpcm1lZCBhcyBvcGVuXHJcbiAgICAgKi9cclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5mb3JjZURpc2FsbG93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFdlYlNvY2tldENvbm5lY3Rpb24uZm9yY2VEaXNhbGxvd18gPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24uaXNBdmFpbGFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlzT2xkQW5kcm9pZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBvbGRBbmRyb2lkUmVnZXggPSAvQW5kcm9pZCAoWzAtOV17MCx9XFwuWzAtOV17MCx9KS87XHJcbiAgICAgICAgICAgIHZhciBvbGRBbmRyb2lkTWF0Y2ggPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKG9sZEFuZHJvaWRSZWdleCk7XHJcbiAgICAgICAgICAgIGlmIChvbGRBbmRyb2lkTWF0Y2ggJiYgb2xkQW5kcm9pZE1hdGNoLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG9sZEFuZHJvaWRNYXRjaFsxXSkgPCA0LjQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc09sZEFuZHJvaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoIWlzT2xkQW5kcm9pZCAmJlxyXG4gICAgICAgICAgICBXZWJTb2NrZXRJbXBsICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgICFXZWJTb2NrZXRDb25uZWN0aW9uLmZvcmNlRGlzYWxsb3dfKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBwcmV2aW91c2x5IGZhaWxlZCB0byBjb25uZWN0IHdpdGggdGhpcyB0cmFuc3BvcnQuXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByZXZpb3VzbHlGYWlsZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gSWYgb3VyIHBlcnNpc3RlbnQgc3RvcmFnZSBpcyBhY3R1YWxseSBvbmx5IGluLW1lbW9yeSBzdG9yYWdlLFxyXG4gICAgICAgIC8vIHdlIGRlZmF1bHQgdG8gYXNzdW1pbmcgdGhhdCBpdCBwcmV2aW91c2x5IGZhaWxlZCB0byBiZSBzYWZlLlxyXG4gICAgICAgIHJldHVybiAoUGVyc2lzdGVudFN0b3JhZ2UuaXNJbk1lbW9yeVN0b3JhZ2UgfHxcclxuICAgICAgICAgICAgUGVyc2lzdGVudFN0b3JhZ2UuZ2V0KCdwcmV2aW91c193ZWJzb2NrZXRfZmFpbHVyZScpID09PSB0cnVlKTtcclxuICAgIH07XHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5tYXJrQ29ubmVjdGlvbkhlYWx0aHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgUGVyc2lzdGVudFN0b3JhZ2UucmVtb3ZlKCdwcmV2aW91c193ZWJzb2NrZXRfZmFpbHVyZScpO1xyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLmFwcGVuZEZyYW1lXyA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5mcmFtZXMucHVzaChkYXRhKTtcclxuICAgICAgICBpZiAodGhpcy5mcmFtZXMubGVuZ3RoID09IHRoaXMudG90YWxGcmFtZXMpIHtcclxuICAgICAgICAgICAgdmFyIGZ1bGxNZXNzID0gdGhpcy5mcmFtZXMuam9pbignJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVzID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIGpzb25NZXNzID0gdXRpbC5qc29uRXZhbChmdWxsTWVzcyk7XHJcbiAgICAgICAgICAgIC8vaGFuZGxlIHRoZSBtZXNzYWdlXHJcbiAgICAgICAgICAgIHRoaXMub25NZXNzYWdlKGpzb25NZXNzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZnJhbWVDb3VudCBUaGUgbnVtYmVyIG9mIGZyYW1lcyB3ZSBhcmUgZXhwZWN0aW5nIGZyb20gdGhlIHNlcnZlclxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuaGFuZGxlTmV3RnJhbWVDb3VudF8gPSBmdW5jdGlvbiAoZnJhbWVDb3VudCkge1xyXG4gICAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBmcmFtZUNvdW50O1xyXG4gICAgICAgIHRoaXMuZnJhbWVzID0gW107XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRlbXB0cyB0byBwYXJzZSBhIGZyYW1lIGNvdW50IG91dCBvZiBzb21lIHRleHQuIElmIGl0IGNhbid0LCBhc3N1bWVzIGEgdmFsdWUgb2YgMVxyXG4gICAgICogQHBhcmFtIHshU3RyaW5nfSBkYXRhXHJcbiAgICAgKiBAcmV0dXJuIHs/U3RyaW5nfSBBbnkgcmVtYWluaW5nIGRhdGEgdG8gYmUgcHJvY2Vzcywgb3IgbnVsbCBpZiB0aGVyZSBpcyBub25lXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5leHRyYWN0RnJhbWVDb3VudF8gPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHRoaXMuZnJhbWVzID09PSBudWxsLCAnV2UgYWxyZWFkeSBoYXZlIGEgZnJhbWUgYnVmZmVyJyk7XHJcbiAgICAgICAgLy8gVE9ETzogVGhlIHNlcnZlciBpcyBvbmx5IHN1cHBvc2VkIHRvIHNlbmQgdXAgdG8gOTk5OSBmcmFtZXMgKGkuZS4gbGVuZ3RoIDw9IDQpLCBidXQgdGhhdCBpc24ndCBiZWluZyBlbmZvcmNlZFxyXG4gICAgICAgIC8vIGN1cnJlbnRseS4gIFNvIGFsbG93aW5nIGxhcmdlciBmcmFtZSBjb3VudHMgKGxlbmd0aCA8PSA2KS4gIFNlZSBodHRwczovL2FwcC5hc2FuYS5jb20vMC9zZWFyY2gvODY4ODU5ODk5ODM4MC84MjM3NjA4MDQyNTA4XHJcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDw9IDYpIHtcclxuICAgICAgICAgICAgdmFyIGZyYW1lQ291bnQgPSBOdW1iZXIoZGF0YSk7XHJcbiAgICAgICAgICAgIGlmICghaXNOYU4oZnJhbWVDb3VudCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlTmV3RnJhbWVDb3VudF8oZnJhbWVDb3VudCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhhbmRsZU5ld0ZyYW1lQ291bnRfKDEpO1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyBhIHdlYnNvY2tldCBmcmFtZSB0aGF0IGhhcyBhcnJpdmVkIGZyb20gdGhlIHNlcnZlci5cclxuICAgICAqIEBwYXJhbSBtZXNzIFRoZSBmcmFtZSBkYXRhXHJcbiAgICAgKi9cclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLmhhbmRsZUluY29taW5nRnJhbWUgPSBmdW5jdGlvbiAobWVzcykge1xyXG4gICAgICAgIGlmICh0aGlzLm15U29jayA9PT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuOyAvLyBDaHJvbWUgYXBwYXJlbnRseSBkZWxpdmVycyBpbmNvbWluZyBwYWNrZXRzIGV2ZW4gYWZ0ZXIgd2UgLmNsb3NlKCkgdGhlIGNvbm5lY3Rpb24gc29tZXRpbWVzLlxyXG4gICAgICAgIHZhciBkYXRhID0gbWVzc1snZGF0YSddO1xyXG4gICAgICAgIHRoaXMuYnl0ZXNSZWNlaXZlZCArPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICB0aGlzLnN0YXRzXy5pbmNyZW1lbnRDb3VudGVyKCdieXRlc19yZWNlaXZlZCcsIGRhdGEubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnJlc2V0S2VlcEFsaXZlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhbWVzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIHdlJ3JlIGJ1ZmZlcmluZ1xyXG4gICAgICAgICAgICB0aGlzLmFwcGVuZEZyYW1lXyhkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRyeSB0byBwYXJzZSBvdXQgYSBmcmFtZSBjb3VudCwgb3RoZXJ3aXNlLCBhc3N1bWUgMSBhbmQgcHJvY2VzcyBpdFxyXG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nRGF0YSA9IHRoaXMuZXh0cmFjdEZyYW1lQ291bnRfKGRhdGEpO1xyXG4gICAgICAgICAgICBpZiAocmVtYWluaW5nRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRGcmFtZV8ocmVtYWluaW5nRGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgbWVzc2FnZSB0byB0aGUgc2VydmVyXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgSlNPTiBvYmplY3QgdG8gdHJhbnNtaXRcclxuICAgICAqL1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5yZXNldEtlZXBBbGl2ZSgpO1xyXG4gICAgICAgIHZhciBkYXRhU3RyID0gdXRpbC5zdHJpbmdpZnkoZGF0YSk7XHJcbiAgICAgICAgdGhpcy5ieXRlc1NlbnQgKz0gZGF0YVN0ci5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5zdGF0c18uaW5jcmVtZW50Q291bnRlcignYnl0ZXNfc2VudCcsIGRhdGFTdHIubGVuZ3RoKTtcclxuICAgICAgICAvL1dlIGNhbiBvbmx5IGZpdCBhIGNlcnRhaW4gYW1vdW50IGluIGVhY2ggd2Vic29ja2V0IGZyYW1lLCBzbyB3ZSBuZWVkIHRvIHNwbGl0IHRoaXMgcmVxdWVzdFxyXG4gICAgICAgIC8vdXAgaW50byBtdWx0aXBsZSBwaWVjZXMgaWYgaXQgZG9lc24ndCBmaXQgaW4gb25lIHJlcXVlc3QuXHJcbiAgICAgICAgdmFyIGRhdGFTZWdzID0gc3BsaXRTdHJpbmdCeVNpemUoZGF0YVN0ciwgV0VCU09DS0VUX01BWF9GUkFNRV9TSVpFKTtcclxuICAgICAgICAvL1NlbmQgdGhlIGxlbmd0aCBoZWFkZXJcclxuICAgICAgICBpZiAoZGF0YVNlZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRTdHJpbmdfKFN0cmluZyhkYXRhU2Vncy5sZW5ndGgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9TZW5kIHRoZSBhY3R1YWwgZGF0YSBpbiBzZWdtZW50cy5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFTZWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZFN0cmluZ18oZGF0YVNlZ3NbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5zaHV0ZG93bl8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pc0Nsb3NlZF8gPSB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLmtlZXBhbGl2ZVRpbWVyKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5rZWVwYWxpdmVUaW1lcik7XHJcbiAgICAgICAgICAgIHRoaXMua2VlcGFsaXZlVGltZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5teVNvY2spIHtcclxuICAgICAgICAgICAgdGhpcy5teVNvY2suY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5teVNvY2sgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5vbkNsb3NlZF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQ2xvc2VkXykge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ1dlYlNvY2tldCBpcyBjbG9zaW5nIGl0c2VsZicpO1xyXG4gICAgICAgICAgICB0aGlzLnNodXRkb3duXygpO1xyXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGlzIGlzIGFuIGludGVybmFsIGNsb3NlLCB0cmlnZ2VyIHRoZSBjbG9zZSBsaXN0ZW5lclxyXG4gICAgICAgICAgICBpZiAodGhpcy5vbkRpc2Nvbm5lY3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0KHRoaXMuZXZlckNvbm5lY3RlZF8pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3QgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRXh0ZXJuYWwtZmFjaW5nIGNsb3NlIGhhbmRsZXIuXHJcbiAgICAgKiBDbG9zZSB0aGUgd2Vic29ja2V0IGFuZCBraWxsIHRoZSBjb25uZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNDbG9zZWRfKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnV2ViU29ja2V0IGlzIGJlaW5nIGNsb3NlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLnNodXRkb3duXygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEtpbGwgdGhlIGN1cnJlbnQga2VlcGFsaXZlIHRpbWVyIGFuZCBzdGFydCBhIG5ldyBvbmUsIHRvIGVuc3VyZSB0aGF0IGl0IGFsd2F5cyBmaXJlcyBOIHNlY29uZHMgYWZ0ZXJcclxuICAgICAqIHRoZSBsYXN0IGFjdGl2aXR5LlxyXG4gICAgICovXHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5yZXNldEtlZXBBbGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5rZWVwYWxpdmVUaW1lcik7XHJcbiAgICAgICAgdGhpcy5rZWVwYWxpdmVUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9JZiB0aGVyZSBoYXMgYmVlbiBubyB3ZWJzb2NrZXQgYWN0aXZpdHkgZm9yIGEgd2hpbGUsIHNlbmQgYSBuby1vcFxyXG4gICAgICAgICAgICBpZiAoX3RoaXMubXlTb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZW5kU3RyaW5nXygnMCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLnJlc2V0S2VlcEFsaXZlKCk7XHJcbiAgICAgICAgfSwgTWF0aC5mbG9vcihXRUJTT0NLRVRfS0VFUEFMSVZFX0lOVEVSVkFMKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgc3RyaW5nIG92ZXIgdGhlIHdlYnNvY2tldC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBzZW5kLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZFN0cmluZ18gPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgICAgLy8gRmlyZWZveCBzZWVtcyB0byBzb21ldGltZXMgdGhyb3cgZXhjZXB0aW9ucyAoTlNfRVJST1JfVU5FWFBFQ1RFRCkgZnJvbSB3ZWJzb2NrZXQgLnNlbmQoKVxyXG4gICAgICAgIC8vIGNhbGxzIGZvciBzb21lIHVua25vd24gcmVhc29uLiAgV2UgdHJlYXQgdGhlc2UgYXMgYW4gZXJyb3IgYW5kIGRpc2Nvbm5lY3QuXHJcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vYXBwLmFzYW5hLmNvbS8wLzU4OTI2MTExNDAyMjkyLzY4MDIxMzQwMjUwNDEwXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5teVNvY2suc2VuZChzdHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ0V4Y2VwdGlvbiB0aHJvd24gZnJvbSBXZWJTb2NrZXQuc2VuZCgpOicsIGUubWVzc2FnZSB8fCBlLmRhdGEsICdDbG9zaW5nIGNvbm5lY3Rpb24uJyk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5vbkNsb3NlZF8uYmluZCh0aGlzKSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTnVtYmVyIG9mIHJlc3BvbnNlIGJlZm9yZSB3ZSBjb25zaWRlciB0aGUgY29ubmVjdGlvbiBcImhlYWx0aHkuXCJcclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24ucmVzcG9uc2VzUmVxdWlyZWRUb0JlSGVhbHRoeSA9IDI7XHJcbiAgICAvKipcclxuICAgICAqIFRpbWUgdG8gd2FpdCBmb3IgdGhlIGNvbm5lY3Rpb24gdGUgYmVjb21lIGhlYWx0aHkgYmVmb3JlIGdpdmluZyB1cC5cclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24uaGVhbHRoeVRpbWVvdXQgPSAzMDAwMDtcclxuICAgIHJldHVybiBXZWJTb2NrZXRDb25uZWN0aW9uO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEN1cnJlbnRseSBzaW1wbGlzdGljLCB0aGlzIGNsYXNzIG1hbmFnZXMgd2hhdCB0cmFuc3BvcnQgYSBDb25uZWN0aW9uIHNob3VsZCB1c2UgYXQgdmFyaW91cyBzdGFnZXMgb2YgaXRzXHJcbiAqIGxpZmVjeWNsZS5cclxuICpcclxuICogSXQgc3RhcnRzIHdpdGggbG9uZ3BvbGxpbmcgaW4gYSBicm93c2VyLCBhbmQgaHR0cHBvbGxpbmcgb24gbm9kZS4gSXQgdGhlbiB1cGdyYWRlcyB0byB3ZWJzb2NrZXRzIGlmXHJcbiAqIHRoZXkgYXJlIGF2YWlsYWJsZS5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgVHJhbnNwb3J0TWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUmVwb0luZm99IHJlcG9JbmZvIE1ldGFkYXRhIGFyb3VuZCB0aGUgbmFtZXNwYWNlIHdlJ3JlIGNvbm5lY3RpbmcgdG9cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVHJhbnNwb3J0TWFuYWdlcihyZXBvSW5mbykge1xyXG4gICAgICAgIHRoaXMuaW5pdFRyYW5zcG9ydHNfKHJlcG9JbmZvKTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc3BvcnRNYW5hZ2VyLCBcIkFMTF9UUkFOU1BPUlRTXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAY29uc3RcclxuICAgICAgICAgKiBAdHlwZSB7IUFycmF5LjxmdW5jdGlvbihuZXc6VHJhbnNwb3J0LCBzdHJpbmcsIFJlcG9JbmZvLCBzdHJpbmc9KT59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbQnJvd3NlclBvbGxDb25uZWN0aW9uLCBXZWJTb2NrZXRDb25uZWN0aW9uXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUmVwb0luZm99IHJlcG9JbmZvXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBUcmFuc3BvcnRNYW5hZ2VyLnByb3RvdHlwZS5pbml0VHJhbnNwb3J0c18gPSBmdW5jdGlvbiAocmVwb0luZm8pIHtcclxuICAgICAgICB2YXIgaXNXZWJTb2NrZXRzQXZhaWxhYmxlID0gV2ViU29ja2V0Q29ubmVjdGlvbiAmJiBXZWJTb2NrZXRDb25uZWN0aW9uWydpc0F2YWlsYWJsZSddKCk7XHJcbiAgICAgICAgdmFyIGlzU2tpcFBvbGxDb25uZWN0aW9uID0gaXNXZWJTb2NrZXRzQXZhaWxhYmxlICYmICFXZWJTb2NrZXRDb25uZWN0aW9uLnByZXZpb3VzbHlGYWlsZWQoKTtcclxuICAgICAgICBpZiAocmVwb0luZm8ud2ViU29ja2V0T25seSkge1xyXG4gICAgICAgICAgICBpZiAoIWlzV2ViU29ja2V0c0F2YWlsYWJsZSlcclxuICAgICAgICAgICAgICAgIHdhcm4oXCJ3c3M6Ly8gVVJMIHVzZWQsIGJ1dCBicm93c2VyIGlzbid0IGtub3duIHRvIHN1cHBvcnQgd2Vic29ja2V0cy4gIFRyeWluZyBhbnl3YXkuXCIpO1xyXG4gICAgICAgICAgICBpc1NraXBQb2xsQ29ubmVjdGlvbiA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1NraXBQb2xsQ29ubmVjdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydHNfID0gW1dlYlNvY2tldENvbm5lY3Rpb25dO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHRyYW5zcG9ydHNfMSA9ICh0aGlzLnRyYW5zcG9ydHNfID0gW10pO1xyXG4gICAgICAgICAgICBlYWNoKFRyYW5zcG9ydE1hbmFnZXIuQUxMX1RSQU5TUE9SVFMsIGZ1bmN0aW9uIChpLCB0cmFuc3BvcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0cmFuc3BvcnQgJiYgdHJhbnNwb3J0Wydpc0F2YWlsYWJsZSddKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRzXzEucHVzaCh0cmFuc3BvcnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VHJhbnNwb3J0LCAhc3RyaW5nLCAhUmVwb0luZm8sIHN0cmluZz0sIHN0cmluZz0pfSBUaGUgY29uc3RydWN0b3IgZm9yIHRoZVxyXG4gICAgICogaW5pdGlhbCB0cmFuc3BvcnQgdG8gdXNlXHJcbiAgICAgKi9cclxuICAgIFRyYW5zcG9ydE1hbmFnZXIucHJvdG90eXBlLmluaXRpYWxUcmFuc3BvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0c18ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BvcnRzX1swXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdHJhbnNwb3J0cyBhdmFpbGFibGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb24obmV3OlRyYW5zcG9ydCwgZnVuY3Rpb24oKSxmdW5jdGlvbigpLCBzdHJpbmc9KX0gVGhlIGNvbnN0cnVjdG9yIGZvciB0aGUgbmV4dFxyXG4gICAgICogdHJhbnNwb3J0LCBvciBudWxsXHJcbiAgICAgKi9cclxuICAgIFRyYW5zcG9ydE1hbmFnZXIucHJvdG90eXBlLnVwZ3JhZGVUcmFuc3BvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0c18ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BvcnRzX1sxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gVHJhbnNwb3J0TWFuYWdlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIEFib3J0IHVwZ3JhZGUgYXR0ZW1wdCBpZiBpdCB0YWtlcyBsb25nZXIgdGhhbiA2MHMuXHJcbnZhciBVUEdSQURFX1RJTUVPVVQgPSA2MDAwMDtcclxuLy8gRm9yIHNvbWUgdHJhbnNwb3J0cyAoV2ViU29ja2V0cyksIHdlIG5lZWQgdG8gXCJ2YWxpZGF0ZVwiIHRoZSB0cmFuc3BvcnQgYnkgZXhjaGFuZ2luZyBhIGZldyByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzLlxyXG4vLyBJZiB3ZSBoYXZlbid0IHNlbnQgZW5vdWdoIHJlcXVlc3RzIHdpdGhpbiA1cywgd2UnbGwgc3RhcnQgc2VuZGluZyBub29wIHBpbmcgcmVxdWVzdHMuXHJcbnZhciBERUxBWV9CRUZPUkVfU0VORElOR19FWFRSQV9SRVFVRVNUUyA9IDUwMDA7XHJcbi8vIElmIHRoZSBpbml0aWFsIGRhdGEgc2VudCB0cmlnZ2VycyBhIGxvdCBvZiBiYW5kd2lkdGggKGkuZS4gaXQncyBhIGxhcmdlIHB1dCBvciBhIGxpc3RlbiBmb3IgYSBsYXJnZSBhbW91bnQgb2YgZGF0YSlcclxuLy8gdGhlbiB3ZSBtYXkgbm90IGJlIGFibGUgdG8gZXhjaGFuZ2Ugb3VyIHBpbmcvcG9uZyByZXF1ZXN0cyB3aXRoaW4gdGhlIGhlYWx0aHkgdGltZW91dC4gIFNvIGlmIHdlIHJlYWNoIHRoZSB0aW1lb3V0XHJcbi8vIGJ1dCB3ZSd2ZSBzZW50L3JlY2VpdmVkIGVub3VnaCBieXRlcywgd2UgZG9uJ3QgY2FuY2VsIHRoZSBjb25uZWN0aW9uLlxyXG52YXIgQllURVNfU0VOVF9IRUFMVEhZX09WRVJSSURFID0gMTAgKiAxMDI0O1xyXG52YXIgQllURVNfUkVDRUlWRURfSEVBTFRIWV9PVkVSUklERSA9IDEwMCAqIDEwMjQ7XHJcbnZhciBNRVNTQUdFX1RZUEUgPSAndCc7XHJcbnZhciBNRVNTQUdFX0RBVEEgPSAnZCc7XHJcbnZhciBDT05UUk9MX1NIVVRET1dOID0gJ3MnO1xyXG52YXIgQ09OVFJPTF9SRVNFVCA9ICdyJztcclxudmFyIENPTlRST0xfRVJST1IgPSAnZSc7XHJcbnZhciBDT05UUk9MX1BPTkcgPSAnbyc7XHJcbnZhciBTV0lUQ0hfQUNLID0gJ2EnO1xyXG52YXIgRU5EX1RSQU5TTUlTU0lPTiA9ICduJztcclxudmFyIFBJTkcgPSAncCc7XHJcbnZhciBTRVJWRVJfSEVMTE8gPSAnaCc7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHJlYWwtdGltZSBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2ZXIgdXNpbmcgd2hpY2hldmVyIG1ldGhvZCB3b3Jrc1xyXG4gKiBiZXN0IGluIHRoZSBjdXJyZW50IGJyb3dzZXIuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIENvbm5lY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gaWQgLSBhbiBpZCBmb3IgdGhpcyBjb25uZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFSZXBvSW5mb30gcmVwb0luZm9fIC0gdGhlIGluZm8gZm9yIHRoZSBlbmRwb2ludCB0byBjb25uZWN0IHRvXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKE9iamVjdCl9IG9uTWVzc2FnZV8gLSB0aGUgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gYSBzZXJ2ZXItcHVzaCBtZXNzYWdlIGFycml2ZXNcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obnVtYmVyLCBzdHJpbmcpfSBvblJlYWR5XyAtIHRoZSBjYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiB0aGlzIGNvbm5lY3Rpb24gaXMgcmVhZHkgdG8gc2VuZCBtZXNzYWdlcy5cclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gb25EaXNjb25uZWN0XyAtIHRoZSBjYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiBhIGNvbm5lY3Rpb24gd2FzIGxvc3RcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nKX0gb25LaWxsXyAtIHRoZSBjYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiB0aGlzIGNvbm5lY3Rpb24gaGFzIHBlcm1hbmVudGx5IHNodXQgZG93bi5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbGFzdFNlc3Npb25JZCAtIGxhc3Qgc2Vzc2lvbiBpZCBpbiBwZXJzaXN0ZW50IGNvbm5lY3Rpb24uIGlzIHVzZWQgdG8gY2xlYW4gdXAgb2xkIHNlc3Npb24gaW4gcmVhbC10aW1lIHNlcnZlclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBDb25uZWN0aW9uKGlkLCByZXBvSW5mb18sIG9uTWVzc2FnZV8sIG9uUmVhZHlfLCBvbkRpc2Nvbm5lY3RfLCBvbktpbGxfLCBsYXN0U2Vzc2lvbklkKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMucmVwb0luZm9fID0gcmVwb0luZm9fO1xyXG4gICAgICAgIHRoaXMub25NZXNzYWdlXyA9IG9uTWVzc2FnZV87XHJcbiAgICAgICAgdGhpcy5vblJlYWR5XyA9IG9uUmVhZHlfO1xyXG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0XyA9IG9uRGlzY29ubmVjdF87XHJcbiAgICAgICAgdGhpcy5vbktpbGxfID0gb25LaWxsXztcclxuICAgICAgICB0aGlzLmxhc3RTZXNzaW9uSWQgPSBsYXN0U2Vzc2lvbklkO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbkNvdW50ID0gMDtcclxuICAgICAgICB0aGlzLnBlbmRpbmdEYXRhTWVzc2FnZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnN0YXRlXyA9IDAgLyogQ09OTkVDVElORyAqLztcclxuICAgICAgICB0aGlzLmxvZ18gPSBsb2dXcmFwcGVyKCdjOicgKyB0aGlzLmlkICsgJzonKTtcclxuICAgICAgICB0aGlzLnRyYW5zcG9ydE1hbmFnZXJfID0gbmV3IFRyYW5zcG9ydE1hbmFnZXIocmVwb0luZm9fKTtcclxuICAgICAgICB0aGlzLmxvZ18oJ0Nvbm5lY3Rpb24gY3JlYXRlZCcpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRfKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0cyBhIGNvbm5lY3Rpb24gYXR0ZW1wdFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnRfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNvbm4gPSB0aGlzLnRyYW5zcG9ydE1hbmFnZXJfLmluaXRpYWxUcmFuc3BvcnQoKTtcclxuICAgICAgICB0aGlzLmNvbm5fID0gbmV3IGNvbm4odGhpcy5uZXh0VHJhbnNwb3J0SWRfKCksIHRoaXMucmVwb0luZm9fLCB1bmRlZmluZWQsIHRoaXMubGFzdFNlc3Npb25JZCk7XHJcbiAgICAgICAgLy8gRm9yIGNlcnRhaW4gdHJhbnNwb3J0cyAoV2ViU29ja2V0cyksIHdlIG5lZWQgdG8gc2VuZCBhbmQgcmVjZWl2ZSBzZXZlcmFsIG1lc3NhZ2VzIGJhY2sgYW5kIGZvcnRoIGJlZm9yZSB3ZVxyXG4gICAgICAgIC8vIGNhbiBjb25zaWRlciB0aGUgdHJhbnNwb3J0IGhlYWx0aHkuXHJcbiAgICAgICAgdGhpcy5wcmltYXJ5UmVzcG9uc2VzUmVxdWlyZWRfID0gY29ublsncmVzcG9uc2VzUmVxdWlyZWRUb0JlSGVhbHRoeSddIHx8IDA7XHJcbiAgICAgICAgdmFyIG9uTWVzc2FnZVJlY2VpdmVkID0gdGhpcy5jb25uUmVjZWl2ZXJfKHRoaXMuY29ubl8pO1xyXG4gICAgICAgIHZhciBvbkNvbm5lY3Rpb25Mb3N0ID0gdGhpcy5kaXNjb25uUmVjZWl2ZXJfKHRoaXMuY29ubl8pO1xyXG4gICAgICAgIHRoaXMudHhfID0gdGhpcy5jb25uXztcclxuICAgICAgICB0aGlzLnJ4XyA9IHRoaXMuY29ubl87XHJcbiAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc0hlYWx0aHlfID0gZmFsc2U7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBGaXJlZm94IGRvZXNuJ3QgbGlrZSB3aGVuIGNvZGUgZnJvbSBvbmUgaWZyYW1lIHRyaWVzIHRvIGNyZWF0ZSBhbm90aGVyIGlmcmFtZSBieSB3YXkgb2YgdGhlIHBhcmVudCBmcmFtZS5cclxuICAgICAgICAgKiBUaGlzIGNhbiBvY2N1ciBpbiB0aGUgY2FzZSBvZiBhIHJlZGlyZWN0LCBpLmUuIHdlIGd1ZXNzZWQgd3Jvbmcgb24gd2hhdCBzZXJ2ZXIgdG8gY29ubmVjdCB0byBhbmQgcmVjZWl2ZWQgYSByZXNldC5cclxuICAgICAgICAgKiBTb21laG93LCBzZXRUaW1lb3V0IHNlZW1zIHRvIG1ha2UgdGhpcyBvay4gVGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2UgZnJvbSBhIHNlY3VyaXR5IHBlcnNwZWN0aXZlLCBzaW5jZSB5b3Ugc2hvdWxkXHJcbiAgICAgICAgICogc3RpbGwgaGF2ZSB0aGUgY29udGV4dCBvZiB5b3VyIG9yaWdpbmF0aW5nIGZyYW1lLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyB0aGlzLmNvbm5fIGdldHMgc2V0IHRvIG51bGwgaW4gc29tZSBvZiB0aGUgdGVzdHMuIENoZWNrIHRvIG1ha2Ugc3VyZSBpdCBzdGlsbCBleGlzdHMgYmVmb3JlIHVzaW5nIGl0XHJcbiAgICAgICAgICAgIF90aGlzLmNvbm5fICYmIF90aGlzLmNvbm5fLm9wZW4ob25NZXNzYWdlUmVjZWl2ZWQsIG9uQ29ubmVjdGlvbkxvc3QpO1xyXG4gICAgICAgIH0sIE1hdGguZmxvb3IoMCkpO1xyXG4gICAgICAgIHZhciBoZWFsdGh5VGltZW91dF9tcyA9IGNvbm5bJ2hlYWx0aHlUaW1lb3V0J10gfHwgMDtcclxuICAgICAgICBpZiAoaGVhbHRoeVRpbWVvdXRfbXMgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhbHRoeVRpbWVvdXRfID0gc2V0VGltZW91dE5vbkJsb2NraW5nKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmhlYWx0aHlUaW1lb3V0XyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmlzSGVhbHRoeV8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY29ubl8gJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29ubl8uYnl0ZXNSZWNlaXZlZCA+IEJZVEVTX1JFQ0VJVkVEX0hFQUxUSFlfT1ZFUlJJREUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nXygnQ29ubmVjdGlvbiBleGNlZWRlZCBoZWFsdGh5IHRpbWVvdXQgYnV0IGhhcyByZWNlaXZlZCAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNvbm5fLmJ5dGVzUmVjZWl2ZWQgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBieXRlcy4gIE1hcmtpbmcgY29ubmVjdGlvbiBoZWFsdGh5LicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5pc0hlYWx0aHlfID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29ubl8ubWFya0Nvbm5lY3Rpb25IZWFsdGh5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKF90aGlzLmNvbm5fICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNvbm5fLmJ5dGVzU2VudCA+IEJZVEVTX1NFTlRfSEVBTFRIWV9PVkVSUklERSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dfKCdDb25uZWN0aW9uIGV4Y2VlZGVkIGhlYWx0aHkgdGltZW91dCBidXQgaGFzIHNlbnQgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb25uXy5ieXRlc1NlbnQgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBieXRlcy4gIExlYXZpbmcgY29ubmVjdGlvbiBhbGl2ZS4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogV2UgZG9uJ3Qgd2FudCB0byBtYXJrIGl0IGhlYWx0aHksIHNpbmNlIHdlIGhhdmUgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIGJ5dGVzIGhhdmUgbWFkZSBpdCB0b1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nXygnQ2xvc2luZyB1bmhlYWx0aHkgY29ubmVjdGlvbiBhZnRlciB0aW1lb3V0LicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgTWF0aC5mbG9vcihoZWFsdGh5VGltZW91dF9tcykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFzdHJpbmd9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5uZXh0VHJhbnNwb3J0SWRfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAnYzonICsgdGhpcy5pZCArICc6JyArIHRoaXMuY29ubmVjdGlvbkNvdW50Kys7XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuZGlzY29ublJlY2VpdmVyXyA9IGZ1bmN0aW9uIChjb25uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZXJDb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgaWYgKGNvbm4gPT09IF90aGlzLmNvbm5fKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkNvbm5lY3Rpb25Mb3N0XyhldmVyQ29ubmVjdGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb25uID09PSBfdGhpcy5zZWNvbmRhcnlDb25uXykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubG9nXygnU2Vjb25kYXJ5IGNvbm5lY3Rpb24gbG9zdC4nKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9uU2Vjb25kYXJ5Q29ubmVjdGlvbkxvc3RfKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2dfKCdjbG9zaW5nIGFuIG9sZCBjb25uZWN0aW9uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmNvbm5SZWNlaXZlcl8gPSBmdW5jdGlvbiAoY29ubikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZV8gIT0gMiAvKiBESVNDT05ORUNURUQgKi8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb25uID09PSBfdGhpcy5yeF8pIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vblByaW1hcnlNZXNzYWdlUmVjZWl2ZWRfKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29ubiA9PT0gX3RoaXMuc2Vjb25kYXJ5Q29ubl8pIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vblNlY29uZGFyeU1lc3NhZ2VSZWNlaXZlZF8obWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dfKCdtZXNzYWdlIG9uIG9sZCBjb25uZWN0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhTXNnIEFuIGFyYml0cmFyeSBkYXRhIG1lc3NhZ2UgdG8gYmUgc2VudCB0byB0aGUgc2VydmVyXHJcbiAgICAgKi9cclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRSZXF1ZXN0ID0gZnVuY3Rpb24gKGRhdGFNc2cpIHtcclxuICAgICAgICAvLyB3cmFwIGluIGEgZGF0YSBtZXNzYWdlIGVudmVsb3BlIGFuZCBzZW5kIGl0IG9uXHJcbiAgICAgICAgdmFyIG1zZyA9IHsgdDogJ2QnLCBkOiBkYXRhTXNnIH07XHJcbiAgICAgICAgdGhpcy5zZW5kRGF0YV8obXNnKTtcclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS50cnlDbGVhbnVwQ29ubmVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy50eF8gPT09IHRoaXMuc2Vjb25kYXJ5Q29ubl8gJiYgdGhpcy5yeF8gPT09IHRoaXMuc2Vjb25kYXJ5Q29ubl8pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdjbGVhbmluZyB1cCBhbmQgcHJvbW90aW5nIGEgY29ubmVjdGlvbjogJyArIHRoaXMuc2Vjb25kYXJ5Q29ubl8uY29ubklkKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uXyA9IHRoaXMuc2Vjb25kYXJ5Q29ubl87XHJcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8gPSBudWxsO1xyXG4gICAgICAgICAgICAvLyB0aGUgc2VydmVyIHdpbGwgc2h1dGRvd24gdGhlIG9sZCBjb25uZWN0aW9uXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLm9uU2Vjb25kYXJ5Q29udHJvbF8gPSBmdW5jdGlvbiAoY29udHJvbERhdGEpIHtcclxuICAgICAgICBpZiAoTUVTU0FHRV9UWVBFIGluIGNvbnRyb2xEYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBjbWQgPSBjb250cm9sRGF0YVtNRVNTQUdFX1RZUEVdO1xyXG4gICAgICAgICAgICBpZiAoY21kID09PSBTV0lUQ0hfQUNLKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZ3JhZGVJZlNlY29uZGFyeUhlYWx0aHlfKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX1JFU0VUKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBNb3N0IGxpa2VseSB0aGUgc2Vzc2lvbiB3YXNuJ3QgdmFsaWQuIEFiYW5kb24gdGhlIHN3aXRjaCBhdHRlbXB0XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ18oJ0dvdCBhIHJlc2V0IG9uIHNlY29uZGFyeSwgY2xvc2luZyBpdCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgd2Ugd2VyZSBhbHJlYWR5IHVzaW5nIHRoaXMgY29ubmVjdGlvbiBmb3Igc29tZXRoaW5nLCB0aGFuIHdlIG5lZWQgdG8gZnVsbHkgY2xvc2VcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR4XyA9PT0gdGhpcy5zZWNvbmRhcnlDb25uXyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucnhfID09PSB0aGlzLnNlY29uZGFyeUNvbm5fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNtZCA9PT0gQ09OVFJPTF9QT05HKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ18oJ2dvdCBwb25nIG9uIHNlY29uZGFyeS4nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5UmVzcG9uc2VzUmVxdWlyZWRfLS07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZ3JhZGVJZlNlY29uZGFyeUhlYWx0aHlfKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub25TZWNvbmRhcnlNZXNzYWdlUmVjZWl2ZWRfID0gZnVuY3Rpb24gKHBhcnNlZERhdGEpIHtcclxuICAgICAgICB2YXIgbGF5ZXIgPSByZXF1aXJlS2V5KCd0JywgcGFyc2VkRGF0YSk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSByZXF1aXJlS2V5KCdkJywgcGFyc2VkRGF0YSk7XHJcbiAgICAgICAgaWYgKGxheWVyID09ICdjJykge1xyXG4gICAgICAgICAgICB0aGlzLm9uU2Vjb25kYXJ5Q29udHJvbF8oZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxheWVyID09ICdkJykge1xyXG4gICAgICAgICAgICAvLyBnb3QgYSBkYXRhIG1lc3NhZ2UsIGJ1dCB3ZSdyZSBzdGlsbCBzZWNvbmQgY29ubmVjdGlvbi4gTmVlZCB0byBidWZmZXIgaXQgdXBcclxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nRGF0YU1lc3NhZ2VzLnB1c2goZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJvdG9jb2wgbGF5ZXI6ICcgKyBsYXllcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnVwZ3JhZGVJZlNlY29uZGFyeUhlYWx0aHlfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNlY29uZGFyeVJlc3BvbnNlc1JlcXVpcmVkXyA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnU2Vjb25kYXJ5IGNvbm5lY3Rpb24gaXMgaGVhbHRoeS4nKTtcclxuICAgICAgICAgICAgdGhpcy5pc0hlYWx0aHlfID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXy5tYXJrQ29ubmVjdGlvbkhlYWx0aHkoKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZWVkV2l0aFVwZ3JhZGVfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBTZW5kIGEgcGluZyB0byBtYWtlIHN1cmUgdGhlIGNvbm5lY3Rpb24gaXMgaGVhbHRoeS5cclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdzZW5kaW5nIHBpbmcgb24gc2Vjb25kYXJ5LicpO1xyXG4gICAgICAgICAgICB0aGlzLnNlY29uZGFyeUNvbm5fLnNlbmQoeyB0OiAnYycsIGQ6IHsgdDogUElORywgZDoge30gfSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUucHJvY2VlZFdpdGhVcGdyYWRlXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyB0ZWxsIHRoaXMgY29ubmVjdGlvbiB0byBjb25zaWRlciBpdHNlbGYgb3BlblxyXG4gICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8uc3RhcnQoKTtcclxuICAgICAgICAvLyBzZW5kIGFja1xyXG4gICAgICAgIHRoaXMubG9nXygnc2VuZGluZyBjbGllbnQgYWNrIG9uIHNlY29uZGFyeScpO1xyXG4gICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8uc2VuZCh7IHQ6ICdjJywgZDogeyB0OiBTV0lUQ0hfQUNLLCBkOiB7fSB9IH0pO1xyXG4gICAgICAgIC8vIHNlbmQgZW5kIHBhY2tldCBvbiBwcmltYXJ5IHRyYW5zcG9ydCwgc3dpdGNoIHRvIHNlbmRpbmcgb24gdGhpcyBvbmVcclxuICAgICAgICAvLyBjYW4gcmVjZWl2ZSBvbiB0aGlzIG9uZSwgYnVmZmVyIHJlc3BvbnNlcyB1bnRpbCBlbmQgcmVjZWl2ZWQgb24gcHJpbWFyeSB0cmFuc3BvcnRcclxuICAgICAgICB0aGlzLmxvZ18oJ0VuZGluZyB0cmFuc21pc3Npb24gb24gcHJpbWFyeScpO1xyXG4gICAgICAgIHRoaXMuY29ubl8uc2VuZCh7IHQ6ICdjJywgZDogeyB0OiBFTkRfVFJBTlNNSVNTSU9OLCBkOiB7fSB9IH0pO1xyXG4gICAgICAgIHRoaXMudHhfID0gdGhpcy5zZWNvbmRhcnlDb25uXztcclxuICAgICAgICB0aGlzLnRyeUNsZWFudXBDb25uZWN0aW9uKCk7XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub25QcmltYXJ5TWVzc2FnZVJlY2VpdmVkXyA9IGZ1bmN0aW9uIChwYXJzZWREYXRhKSB7XHJcbiAgICAgICAgLy8gTXVzdCByZWZlciB0byBwYXJzZWREYXRhIHByb3BlcnRpZXMgaW4gcXVvdGVzLCBzbyBjbG9zdXJlIGRvZXNuJ3QgdG91Y2ggdGhlbS5cclxuICAgICAgICB2YXIgbGF5ZXIgPSByZXF1aXJlS2V5KCd0JywgcGFyc2VkRGF0YSk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSByZXF1aXJlS2V5KCdkJywgcGFyc2VkRGF0YSk7XHJcbiAgICAgICAgaWYgKGxheWVyID09ICdjJykge1xyXG4gICAgICAgICAgICB0aGlzLm9uQ29udHJvbF8oZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxheWVyID09ICdkJykge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGF0YU1lc3NhZ2VfKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5vbkRhdGFNZXNzYWdlXyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5vblByaW1hcnlSZXNwb25zZV8oKTtcclxuICAgICAgICAvLyBXZSBkb24ndCBkbyBhbnl0aGluZyB3aXRoIGRhdGEgbWVzc2FnZXMsIGp1c3Qga2ljayB0aGVtIHVwIGEgbGV2ZWxcclxuICAgICAgICB0aGlzLm9uTWVzc2FnZV8obWVzc2FnZSk7XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub25QcmltYXJ5UmVzcG9uc2VfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0hlYWx0aHlfKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJpbWFyeVJlc3BvbnNlc1JlcXVpcmVkXy0tO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcmltYXJ5UmVzcG9uc2VzUmVxdWlyZWRfIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nXygnUHJpbWFyeSBjb25uZWN0aW9uIGlzIGhlYWx0aHkuJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzSGVhbHRoeV8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25uXy5tYXJrQ29ubmVjdGlvbkhlYWx0aHkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5vbkNvbnRyb2xfID0gZnVuY3Rpb24gKGNvbnRyb2xEYXRhKSB7XHJcbiAgICAgICAgdmFyIGNtZCA9IHJlcXVpcmVLZXkoTUVTU0FHRV9UWVBFLCBjb250cm9sRGF0YSk7XHJcbiAgICAgICAgaWYgKE1FU1NBR0VfREFUQSBpbiBjb250cm9sRGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IGNvbnRyb2xEYXRhW01FU1NBR0VfREFUQV07XHJcbiAgICAgICAgICAgIGlmIChjbWQgPT09IFNFUlZFUl9IRUxMTykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkhhbmRzaGFrZV8ocGF5bG9hZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBFTkRfVFJBTlNNSVNTSU9OKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ18oJ3JlY3ZkIGVuZCB0cmFuc21pc3Npb24gb24gcHJpbWFyeScpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yeF8gPSB0aGlzLnNlY29uZGFyeUNvbm5fO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBlbmRpbmdEYXRhTWVzc2FnZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRGF0YU1lc3NhZ2VfKHRoaXMucGVuZGluZ0RhdGFNZXNzYWdlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdEYXRhTWVzc2FnZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJ5Q2xlYW51cENvbm5lY3Rpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjbWQgPT09IENPTlRST0xfU0hVVERPV04pIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgd2FzIHByZXZpb3VzbHkgdGhlICdvbktpbGwnIGNhbGxiYWNrIHBhc3NlZCB0byB0aGUgbG93ZXItbGV2ZWwgY29ubmVjdGlvblxyXG4gICAgICAgICAgICAgICAgLy8gcGF5bG9hZCBpbiB0aGlzIGNhc2UgaXMgdGhlIHJlYXNvbiBmb3IgdGhlIHNodXRkb3duLiBHZW5lcmFsbHkgYSBodW1hbi1yZWFkYWJsZSBlcnJvclxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25TaHV0ZG93bl8ocGF5bG9hZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX1JFU0VUKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwYXlsb2FkIGluIHRoaXMgY2FzZSBpcyB0aGUgaG9zdCB3ZSBzaG91bGQgY29udGFjdFxyXG4gICAgICAgICAgICAgICAgdGhpcy5vblJlc2V0XyhwYXlsb2FkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjbWQgPT09IENPTlRST0xfRVJST1IpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yKCdTZXJ2ZXIgRXJyb3I6ICcgKyBwYXlsb2FkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjbWQgPT09IENPTlRST0xfUE9ORykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dfKCdnb3QgcG9uZyBvbiBwcmltYXJ5LicpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblByaW1hcnlSZXNwb25zZV8oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFBpbmdPblByaW1hcnlJZk5lY2Vzc2FyeV8oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVycm9yKCdVbmtub3duIGNvbnRyb2wgcGFja2V0IGNvbW1hbmQ6ICcgKyBjbWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kc2hha2UgVGhlIGhhbmRzaGFrZSBkYXRhIHJldHVybmVkIGZyb20gdGhlIHNlcnZlclxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub25IYW5kc2hha2VfID0gZnVuY3Rpb24gKGhhbmRzaGFrZSkge1xyXG4gICAgICAgIHZhciB0aW1lc3RhbXAgPSBoYW5kc2hha2UudHM7XHJcbiAgICAgICAgdmFyIHZlcnNpb24gPSBoYW5kc2hha2UudjtcclxuICAgICAgICB2YXIgaG9zdCA9IGhhbmRzaGFrZS5oO1xyXG4gICAgICAgIHRoaXMuc2Vzc2lvbklkID0gaGFuZHNoYWtlLnM7XHJcbiAgICAgICAgdGhpcy5yZXBvSW5mb18udXBkYXRlSG9zdChob3N0KTtcclxuICAgICAgICAvLyBpZiB3ZSd2ZSBhbHJlYWR5IGNsb3NlZCB0aGUgY29ubmVjdGlvbiwgdGhlbiBkb24ndCBib3RoZXIgdHJ5aW5nIHRvIHByb2dyZXNzIGZ1cnRoZXJcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZV8gPT0gMCAvKiBDT05ORUNUSU5HICovKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29ubl8uc3RhcnQoKTtcclxuICAgICAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25Fc3RhYmxpc2hlZF8odGhpcy5jb25uXywgdGltZXN0YW1wKTtcclxuICAgICAgICAgICAgaWYgKFBST1RPQ09MX1ZFUlNJT04gIT09IHZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ1Byb3RvY29sIHZlcnNpb24gbWlzbWF0Y2ggZGV0ZWN0ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBUT0RPOiBkbyB3ZSB3YW50IHRvIHVwZ3JhZGU/IHdoZW4/IG1heWJlIGEgZGVsYXk/XHJcbiAgICAgICAgICAgIHRoaXMudHJ5U3RhcnRVcGdyYWRlXygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS50cnlTdGFydFVwZ3JhZGVfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjb25uID0gdGhpcy50cmFuc3BvcnRNYW5hZ2VyXy51cGdyYWRlVHJhbnNwb3J0KCk7XHJcbiAgICAgICAgaWYgKGNvbm4pIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFVwZ3JhZGVfKGNvbm4pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5zdGFydFVwZ3JhZGVfID0gZnVuY3Rpb24gKGNvbm4pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8gPSBuZXcgY29ubih0aGlzLm5leHRUcmFuc3BvcnRJZF8oKSwgdGhpcy5yZXBvSW5mb18sIHRoaXMuc2Vzc2lvbklkKTtcclxuICAgICAgICAvLyBGb3IgY2VydGFpbiB0cmFuc3BvcnRzIChXZWJTb2NrZXRzKSwgd2UgbmVlZCB0byBzZW5kIGFuZCByZWNlaXZlIHNldmVyYWwgbWVzc2FnZXMgYmFjayBhbmQgZm9ydGggYmVmb3JlIHdlXHJcbiAgICAgICAgLy8gY2FuIGNvbnNpZGVyIHRoZSB0cmFuc3BvcnQgaGVhbHRoeS5cclxuICAgICAgICB0aGlzLnNlY29uZGFyeVJlc3BvbnNlc1JlcXVpcmVkXyA9XHJcbiAgICAgICAgICAgIGNvbm5bJ3Jlc3BvbnNlc1JlcXVpcmVkVG9CZUhlYWx0aHknXSB8fCAwO1xyXG4gICAgICAgIHZhciBvbk1lc3NhZ2UgPSB0aGlzLmNvbm5SZWNlaXZlcl8odGhpcy5zZWNvbmRhcnlDb25uXyk7XHJcbiAgICAgICAgdmFyIG9uRGlzY29ubmVjdCA9IHRoaXMuZGlzY29ublJlY2VpdmVyXyh0aGlzLnNlY29uZGFyeUNvbm5fKTtcclxuICAgICAgICB0aGlzLnNlY29uZGFyeUNvbm5fLm9wZW4ob25NZXNzYWdlLCBvbkRpc2Nvbm5lY3QpO1xyXG4gICAgICAgIC8vIElmIHdlIGhhdmVuJ3Qgc3VjY2Vzc2Z1bGx5IHVwZ3JhZGVkIGFmdGVyIFVQR1JBREVfVElNRU9VVCwgZ2l2ZSB1cCBhbmQga2lsbCB0aGUgc2Vjb25kYXJ5LlxyXG4gICAgICAgIHNldFRpbWVvdXROb25CbG9ja2luZyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5zZWNvbmRhcnlDb25uXykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubG9nXygnVGltZWQgb3V0IHRyeWluZyB0byB1cGdyYWRlLicpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2Vjb25kYXJ5Q29ubl8uY2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIE1hdGguZmxvb3IoVVBHUkFERV9USU1FT1VUKSk7XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub25SZXNldF8gPSBmdW5jdGlvbiAoaG9zdCkge1xyXG4gICAgICAgIHRoaXMubG9nXygnUmVzZXQgcGFja2V0IHJlY2VpdmVkLiAgTmV3IGhvc3Q6ICcgKyBob3N0KTtcclxuICAgICAgICB0aGlzLnJlcG9JbmZvXy51cGRhdGVIb3N0KGhvc3QpO1xyXG4gICAgICAgIC8vIFRPRE86IGlmIHdlJ3JlIGFscmVhZHkgXCJjb25uZWN0ZWRcIiwgd2UgbmVlZCB0byB0cmlnZ2VyIGEgZGlzY29ubmVjdCBhdCB0aGUgbmV4dCBsYXllciB1cC5cclxuICAgICAgICAvLyBXZSBkb24ndCBjdXJyZW50bHkgc3VwcG9ydCByZXNldHMgYWZ0ZXIgdGhlIGNvbm5lY3Rpb24gaGFzIGFscmVhZHkgYmVlbiBlc3RhYmxpc2hlZFxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlXyA9PT0gMSAvKiBDT05ORUNURUQgKi8pIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gQ2xvc2Ugd2hhdGV2ZXIgY29ubmVjdGlvbnMgd2UgaGF2ZSBvcGVuIGFuZCBzdGFydCBhZ2Fpbi5cclxuICAgICAgICAgICAgdGhpcy5jbG9zZUNvbm5lY3Rpb25zXygpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0XygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5vbkNvbm5lY3Rpb25Fc3RhYmxpc2hlZF8gPSBmdW5jdGlvbiAoY29ubiwgdGltZXN0YW1wKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmxvZ18oJ1JlYWx0aW1lIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQuJyk7XHJcbiAgICAgICAgdGhpcy5jb25uXyA9IGNvbm47XHJcbiAgICAgICAgdGhpcy5zdGF0ZV8gPSAxIC8qIENPTk5FQ1RFRCAqLztcclxuICAgICAgICBpZiAodGhpcy5vblJlYWR5Xykge1xyXG4gICAgICAgICAgICB0aGlzLm9uUmVhZHlfKHRpbWVzdGFtcCwgdGhpcy5zZXNzaW9uSWQpO1xyXG4gICAgICAgICAgICB0aGlzLm9uUmVhZHlfID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgYWZ0ZXIgNSBzZWNvbmRzIHdlIGhhdmVuJ3Qgc2VudCBlbm91Z2ggcmVxdWVzdHMgdG8gdGhlIHNlcnZlciB0byBnZXQgdGhlIGNvbm5lY3Rpb24gaGVhbHRoeSxcclxuICAgICAgICAvLyBzZW5kIHNvbWUgcGluZ3MuXHJcbiAgICAgICAgaWYgKHRoaXMucHJpbWFyeVJlc3BvbnNlc1JlcXVpcmVkXyA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ1ByaW1hcnkgY29ubmVjdGlvbiBpcyBoZWFsdGh5LicpO1xyXG4gICAgICAgICAgICB0aGlzLmlzSGVhbHRoeV8gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dE5vbkJsb2NraW5nKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNlbmRQaW5nT25QcmltYXJ5SWZOZWNlc3NhcnlfKCk7XHJcbiAgICAgICAgICAgIH0sIE1hdGguZmxvb3IoREVMQVlfQkVGT1JFX1NFTkRJTkdfRVhUUkFfUkVRVUVTVFMpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZFBpbmdPblByaW1hcnlJZk5lY2Vzc2FyeV8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gSWYgdGhlIGNvbm5lY3Rpb24gaXNuJ3QgY29uc2lkZXJlZCBoZWFsdGh5IHlldCwgd2UnbGwgc2VuZCBhIG5vb3AgcGluZyBwYWNrZXQgcmVxdWVzdC5cclxuICAgICAgICBpZiAoIXRoaXMuaXNIZWFsdGh5XyAmJiB0aGlzLnN0YXRlXyA9PT0gMSAvKiBDT05ORUNURUQgKi8pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdzZW5kaW5nIHBpbmcgb24gcHJpbWFyeS4nKTtcclxuICAgICAgICAgICAgdGhpcy5zZW5kRGF0YV8oeyB0OiAnYycsIGQ6IHsgdDogUElORywgZDoge30gfSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub25TZWNvbmRhcnlDb25uZWN0aW9uTG9zdF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbm4gPSB0aGlzLnNlY29uZGFyeUNvbm5fO1xyXG4gICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8gPSBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLnR4XyA9PT0gY29ubiB8fCB0aGlzLnJ4XyA9PT0gY29ubikge1xyXG4gICAgICAgICAgICAvLyB3ZSBhcmUgcmVseWluZyBvbiB0aGlzIGNvbm5lY3Rpb24gYWxyZWFkeSBpbiBzb21lIGNhcGFjaXR5LiBUaGVyZWZvcmUsIGEgZmFpbHVyZSBpcyByZWFsXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBldmVyQ29ubmVjdGVkIFdoZXRoZXIgb3Igbm90IHRoZSBjb25uZWN0aW9uIGV2ZXIgcmVhY2hlZCBhIHNlcnZlci4gVXNlZCB0byBkZXRlcm1pbmUgaWZcclxuICAgICAqIHdlIHNob3VsZCBmbHVzaCB0aGUgaG9zdCBjYWNoZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub25Db25uZWN0aW9uTG9zdF8gPSBmdW5jdGlvbiAoZXZlckNvbm5lY3RlZCkge1xyXG4gICAgICAgIHRoaXMuY29ubl8gPSBudWxsO1xyXG4gICAgICAgIC8vIE5PVEU6IElGIHlvdSdyZSBzZWVpbmcgYSBGaXJlZm94IGVycm9yIGZvciB0aGlzIGxpbmUsIEkgdGhpbmsgaXQgbWlnaHQgYmUgYmVjYXVzZSBpdCdzIGdldHRpbmdcclxuICAgICAgICAvLyBjYWxsZWQgb24gd2luZG93IGNsb3NlIGFuZCBSZWFsdGltZVN0YXRlLkNPTk5FQ1RJTkcgaXMgbm8gbG9uZ2VyIGRlZmluZWQuICBKdXN0IGEgZ3Vlc3MuXHJcbiAgICAgICAgaWYgKCFldmVyQ29ubmVjdGVkICYmIHRoaXMuc3RhdGVfID09PSAwIC8qIENPTk5FQ1RJTkcgKi8pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdSZWFsdGltZSBjb25uZWN0aW9uIGZhaWxlZC4nKTtcclxuICAgICAgICAgICAgLy8gU2luY2Ugd2UgZmFpbGVkIHRvIGNvbm5lY3QgYXQgYWxsLCBjbGVhciBhbnkgY2FjaGVkIGVudHJ5IGZvciB0aGlzIG5hbWVzcGFjZSBpbiBjYXNlIHRoZSBtYWNoaW5lIHdlbnQgYXdheVxyXG4gICAgICAgICAgICBpZiAodGhpcy5yZXBvSW5mb18uaXNDYWNoZWFibGVIb3N0KCkpIHtcclxuICAgICAgICAgICAgICAgIFBlcnNpc3RlbnRTdG9yYWdlLnJlbW92ZSgnaG9zdDonICsgdGhpcy5yZXBvSW5mb18uaG9zdCk7XHJcbiAgICAgICAgICAgICAgICAvLyByZXNldCB0aGUgaW50ZXJuYWwgaG9zdCB0byB3aGF0IHdlIHdvdWxkIHNob3cgdGhlIHVzZXIsIGkuZS4gPG5zPi5maXJlYmFzZWlvLmNvbVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXBvSW5mb18uaW50ZXJuYWxIb3N0ID0gdGhpcy5yZXBvSW5mb18uaG9zdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlXyA9PT0gMSAvKiBDT05ORUNURUQgKi8pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdSZWFsdGltZSBjb25uZWN0aW9uIGxvc3QuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5vbkNvbm5lY3Rpb25TaHV0ZG93bl8gPSBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdDb25uZWN0aW9uIHNodXRkb3duIGNvbW1hbmQgcmVjZWl2ZWQuIFNodXR0aW5nIGRvd24uLi4nKTtcclxuICAgICAgICBpZiAodGhpcy5vbktpbGxfKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25LaWxsXyhyZWFzb24pO1xyXG4gICAgICAgICAgICB0aGlzLm9uS2lsbF8gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBXZSBpbnRlbnRpb25hbGx5IGRvbid0IHdhbnQgdG8gZmlyZSBvbkRpc2Nvbm5lY3QgKGtpbGwgaXMgYSBkaWZmZXJlbnQgY2FzZSksXHJcbiAgICAgICAgLy8gc28gY2xlYXIgdGhlIGNhbGxiYWNrLlxyXG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0XyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfTtcclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmREYXRhXyA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVfICE9PSAxIC8qIENPTk5FQ1RFRCAqLykge1xyXG4gICAgICAgICAgICB0aHJvdyAnQ29ubmVjdGlvbiBpcyBub3QgY29ubmVjdGVkJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudHhfLnNlbmQoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xlYW5zIHVwIHRoaXMgY29ubmVjdGlvbiwgY2FsbGluZyB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXHJcbiAgICAgKi9cclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlXyAhPT0gMiAvKiBESVNDT05ORUNURUQgKi8pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdDbG9zaW5nIHJlYWx0aW1lIGNvbm5lY3Rpb24uJyk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfID0gMiAvKiBESVNDT05ORUNURUQgKi87XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VDb25uZWN0aW9uc18oKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub25EaXNjb25uZWN0Xykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RfKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmNsb3NlQ29ubmVjdGlvbnNfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubG9nXygnU2h1dHRpbmcgZG93biBhbGwgY29ubmVjdGlvbnMnKTtcclxuICAgICAgICBpZiAodGhpcy5jb25uXykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5fLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29ubl8gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZWNvbmRhcnlDb25uXykge1xyXG4gICAgICAgICAgICB0aGlzLnNlY29uZGFyeUNvbm5fLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5oZWFsdGh5VGltZW91dF8pIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhbHRoeVRpbWVvdXRfKTtcclxuICAgICAgICAgICAgdGhpcy5oZWFsdGh5VGltZW91dF8gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29ubmVjdGlvbjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgZGVmaW5pbmcgdGhlIHNldCBvZiBhY3Rpb25zIHRoYXQgY2FuIGJlIHBlcmZvcm1lZCBhZ2FpbnN0IHRoZSBGaXJlYmFzZSBzZXJ2ZXJcclxuICogKGJhc2ljYWxseSBjb3JyZXNwb25kcyB0byBvdXIgd2lyZSBwcm90b2NvbCkuXHJcbiAqXHJcbiAqIEBpbnRlcmZhY2VcclxuICovXHJcbnZhciBTZXJ2ZXJBY3Rpb25zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2VydmVyQWN0aW9ucygpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhTdHJpbmdcclxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcsIHN0cmluZyk9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGhhc2hcclxuICAgICAqL1xyXG4gICAgU2VydmVyQWN0aW9ucy5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUsIGhhc2gpIHsgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhTdHJpbmdcclxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcsID9zdHJpbmcpfSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGhhc2hcclxuICAgICAqL1xyXG4gICAgU2VydmVyQWN0aW9ucy5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSwgaGFzaCkgeyB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWZyZXNoZXMgdGhlIGF1dGggdG9rZW4gZm9yIHRoZSBjdXJyZW50IGNvbm5lY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG9rZW4gVGhlIGF1dGhlbnRpY2F0aW9uIHRva2VuXHJcbiAgICAgKi9cclxuICAgIFNlcnZlckFjdGlvbnMucHJvdG90eXBlLnJlZnJlc2hBdXRoVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHsgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhTdHJpbmdcclxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcsIHN0cmluZyk9fSBvbkNvbXBsZXRlXHJcbiAgICAgKi9cclxuICAgIFNlcnZlckFjdGlvbnMucHJvdG90eXBlLm9uRGlzY29ubmVjdFB1dCA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlKSB7IH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoU3RyaW5nXHJcbiAgICAgKiBAcGFyYW0geyp9IGRhdGFcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCBzdHJpbmcpPX0gb25Db21wbGV0ZVxyXG4gICAgICovXHJcbiAgICBTZXJ2ZXJBY3Rpb25zLnByb3RvdHlwZS5vbkRpc2Nvbm5lY3RNZXJnZSA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlKSB7IH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoU3RyaW5nXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgc3RyaW5nKT19IG9uQ29tcGxldGVcclxuICAgICAqL1xyXG4gICAgU2VydmVyQWN0aW9ucy5wcm90b3R5cGUub25EaXNjb25uZWN0Q2FuY2VsID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIG9uQ29tcGxldGUpIHsgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj59IHN0YXRzXHJcbiAgICAgKi9cclxuICAgIFNlcnZlckFjdGlvbnMucHJvdG90eXBlLnJlcG9ydFN0YXRzID0gZnVuY3Rpb24gKHN0YXRzKSB7IH07XHJcbiAgICByZXR1cm4gU2VydmVyQWN0aW9ucztcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBSRUNPTk5FQ1RfTUlOX0RFTEFZID0gMTAwMDtcclxudmFyIFJFQ09OTkVDVF9NQVhfREVMQVlfREVGQVVMVCA9IDYwICogNSAqIDEwMDA7IC8vIDUgbWludXRlcyBpbiBtaWxsaXNlY29uZHMgKENhc2U6IDE4NTgpXHJcbnZhciBSRUNPTk5FQ1RfTUFYX0RFTEFZX0ZPUl9BRE1JTlMgPSAzMCAqIDEwMDA7IC8vIDMwIHNlY29uZHMgZm9yIGFkbWluIGNsaWVudHMgKGxpa2VseSB0byBiZSBhIGJhY2tlbmQgc2VydmVyKVxyXG52YXIgUkVDT05ORUNUX0RFTEFZX01VTFRJUExJRVIgPSAxLjM7XHJcbnZhciBSRUNPTk5FQ1RfREVMQVlfUkVTRVRfVElNRU9VVCA9IDMwMDAwOyAvLyBSZXNldCBkZWxheSBiYWNrIHRvIE1JTl9ERUxBWSBhZnRlciBiZWluZyBjb25uZWN0ZWQgZm9yIDMwc2VjLlxyXG52YXIgU0VSVkVSX0tJTExfSU5URVJSVVBUX1JFQVNPTiA9ICdzZXJ2ZXJfa2lsbCc7XHJcbi8vIElmIGF1dGggZmFpbHMgcmVwZWF0ZWRseSwgd2UnbGwgYXNzdW1lIHNvbWV0aGluZyBpcyB3cm9uZyBhbmQgbG9nIGEgd2FybmluZyAvIGJhY2sgb2ZmLlxyXG52YXIgSU5WQUxJRF9BVVRIX1RPS0VOX1RIUkVTSE9MRCA9IDM7XHJcbi8qKlxyXG4gKiBGaXJlYmFzZSBjb25uZWN0aW9uLiAgQWJzdHJhY3RzIHdpcmUgcHJvdG9jb2wgYW5kIGhhbmRsZXMgcmVjb25uZWN0aW5nLlxyXG4gKlxyXG4gKiBOT1RFOiBBbGwgSlNPTiBvYmplY3RzIHNlbnQgdG8gdGhlIHJlYWx0aW1lIGNvbm5lY3Rpb24gbXVzdCBoYXZlIHByb3BlcnR5IG5hbWVzIGVuY2xvc2VkXHJcbiAqIGluIHF1b3RlcyB0byBtYWtlIHN1cmUgdGhlIGNsb3N1cmUgY29tcGlsZXIgZG9lcyBub3QgbWluaWZ5IHRoZW0uXHJcbiAqL1xyXG52YXIgUGVyc2lzdGVudENvbm5lY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhQZXJzaXN0ZW50Q29ubmVjdGlvbiwgX3N1cGVyKTtcclxuICAgIC8qKlxyXG4gICAgICogQGltcGxlbWVudHMge1NlcnZlckFjdGlvbnN9XHJcbiAgICAgKiBAcGFyYW0geyFSZXBvSW5mb30gcmVwb0luZm9fIERhdGEgYWJvdXQgdGhlIG5hbWVzcGFjZSB3ZSBhcmUgY29ubmVjdGluZyB0b1xyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcsICosIGJvb2xlYW4sID9udW1iZXIpfSBvbkRhdGFVcGRhdGVfIEEgY2FsbGJhY2sgZm9yIG5ldyBkYXRhIGZyb20gdGhlIHNlcnZlclxyXG4gICAgICogQHBhcmFtIG9uQ29ubmVjdFN0YXR1c19cclxuICAgICAqIEBwYXJhbSBvblNlcnZlckluZm9VcGRhdGVfXHJcbiAgICAgKiBAcGFyYW0gYXV0aFRva2VuUHJvdmlkZXJfXHJcbiAgICAgKiBAcGFyYW0gYXV0aE92ZXJyaWRlX1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBQZXJzaXN0ZW50Q29ubmVjdGlvbihyZXBvSW5mb18sIG9uRGF0YVVwZGF0ZV8sIG9uQ29ubmVjdFN0YXR1c18sIG9uU2VydmVySW5mb1VwZGF0ZV8sIGF1dGhUb2tlblByb3ZpZGVyXywgYXV0aE92ZXJyaWRlXykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMucmVwb0luZm9fID0gcmVwb0luZm9fO1xyXG4gICAgICAgIF90aGlzLm9uRGF0YVVwZGF0ZV8gPSBvbkRhdGFVcGRhdGVfO1xyXG4gICAgICAgIF90aGlzLm9uQ29ubmVjdFN0YXR1c18gPSBvbkNvbm5lY3RTdGF0dXNfO1xyXG4gICAgICAgIF90aGlzLm9uU2VydmVySW5mb1VwZGF0ZV8gPSBvblNlcnZlckluZm9VcGRhdGVfO1xyXG4gICAgICAgIF90aGlzLmF1dGhUb2tlblByb3ZpZGVyXyA9IGF1dGhUb2tlblByb3ZpZGVyXztcclxuICAgICAgICBfdGhpcy5hdXRoT3ZlcnJpZGVfID0gYXV0aE92ZXJyaWRlXztcclxuICAgICAgICAvLyBVc2VkIGZvciBkaWFnbm9zdGljIGxvZ2dpbmcuXHJcbiAgICAgICAgX3RoaXMuaWQgPSBQZXJzaXN0ZW50Q29ubmVjdGlvbi5uZXh0UGVyc2lzdGVudENvbm5lY3Rpb25JZF8rKztcclxuICAgICAgICBfdGhpcy5sb2dfID0gbG9nV3JhcHBlcigncDonICsgX3RoaXMuaWQgKyAnOicpO1xyXG4gICAgICAgIC8qKiBAcHJpdmF0ZSB7T2JqZWN0fSAqL1xyXG4gICAgICAgIF90aGlzLmludGVycnVwdFJlYXNvbnNfID0ge307XHJcbiAgICAgICAgX3RoaXMubGlzdGVuc18gPSB7fTtcclxuICAgICAgICBfdGhpcy5vdXRzdGFuZGluZ1B1dHNfID0gW107XHJcbiAgICAgICAgX3RoaXMub3V0c3RhbmRpbmdQdXRDb3VudF8gPSAwO1xyXG4gICAgICAgIF90aGlzLm9uRGlzY29ubmVjdFJlcXVlc3RRdWV1ZV8gPSBbXTtcclxuICAgICAgICBfdGhpcy5jb25uZWN0ZWRfID0gZmFsc2U7XHJcbiAgICAgICAgX3RoaXMucmVjb25uZWN0RGVsYXlfID0gUkVDT05ORUNUX01JTl9ERUxBWTtcclxuICAgICAgICBfdGhpcy5tYXhSZWNvbm5lY3REZWxheV8gPSBSRUNPTk5FQ1RfTUFYX0RFTEFZX0RFRkFVTFQ7XHJcbiAgICAgICAgX3RoaXMuc2VjdXJpdHlEZWJ1Z0NhbGxiYWNrXyA9IG51bGw7XHJcbiAgICAgICAgX3RoaXMubGFzdFNlc3Npb25JZCA9IG51bGw7XHJcbiAgICAgICAgLyoqIEBwcml2YXRlIHtudW1iZXJ8bnVsbH0gKi9cclxuICAgICAgICBfdGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfID0gbnVsbDtcclxuICAgICAgICAvKiogQHByaXZhdGUge2Jvb2xlYW59ICovXHJcbiAgICAgICAgX3RoaXMudmlzaWJsZV8gPSBmYWxzZTtcclxuICAgICAgICAvLyBCZWZvcmUgd2UgZ2V0IGNvbm5lY3RlZCwgd2Uga2VlcCBhIHF1ZXVlIG9mIHBlbmRpbmcgbWVzc2FnZXMgdG8gc2VuZC5cclxuICAgICAgICBfdGhpcy5yZXF1ZXN0Q0JIYXNoXyA9IHt9O1xyXG4gICAgICAgIF90aGlzLnJlcXVlc3ROdW1iZXJfID0gMDtcclxuICAgICAgICAvKiogQHByaXZhdGUgez97XHJcbiAgICAgICAgICogICBzZW5kUmVxdWVzdChPYmplY3QpLFxyXG4gICAgICAgICAqICAgY2xvc2UoKVxyXG4gICAgICAgICAqIH19ICovXHJcbiAgICAgICAgX3RoaXMucmVhbHRpbWVfID0gbnVsbDtcclxuICAgICAgICAvKiogQHByaXZhdGUge3N0cmluZ3xudWxsfSAqL1xyXG4gICAgICAgIF90aGlzLmF1dGhUb2tlbl8gPSBudWxsO1xyXG4gICAgICAgIF90aGlzLmZvcmNlVG9rZW5SZWZyZXNoXyA9IGZhbHNlO1xyXG4gICAgICAgIF90aGlzLmludmFsaWRBdXRoVG9rZW5Db3VudF8gPSAwO1xyXG4gICAgICAgIF90aGlzLmZpcnN0Q29ubmVjdGlvbl8gPSB0cnVlO1xyXG4gICAgICAgIF90aGlzLmxhc3RDb25uZWN0aW9uQXR0ZW1wdFRpbWVfID0gbnVsbDtcclxuICAgICAgICBfdGhpcy5sYXN0Q29ubmVjdGlvbkVzdGFibGlzaGVkVGltZV8gPSBudWxsO1xyXG4gICAgICAgIGlmIChhdXRoT3ZlcnJpZGVfICYmICF1dGlsLmlzTm9kZVNkaygpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXV0aCBvdmVycmlkZSBzcGVjaWZpZWQgaW4gb3B0aW9ucywgYnV0IG5vdCBzdXBwb3J0ZWQgb24gbm9uIE5vZGUuanMgcGxhdGZvcm1zJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF90aGlzLnNjaGVkdWxlQ29ubmVjdF8oMCk7XHJcbiAgICAgICAgVmlzaWJpbGl0eU1vbml0b3IuZ2V0SW5zdGFuY2UoKS5vbigndmlzaWJsZScsIF90aGlzLm9uVmlzaWJsZV8sIF90aGlzKTtcclxuICAgICAgICBpZiAocmVwb0luZm9fLmhvc3QuaW5kZXhPZignZmJsb2NhbCcpID09PSAtMSkge1xyXG4gICAgICAgICAgICBPbmxpbmVNb25pdG9yLmdldEluc3RhbmNlKCkub24oJ29ubGluZScsIF90aGlzLm9uT25saW5lXywgX3RoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gYWN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyp9IGJvZHlcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKik9fSBvblJlc3BvbnNlXHJcbiAgICAgKiBAcHJvdGVjdGVkXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kUmVxdWVzdCA9IGZ1bmN0aW9uIChhY3Rpb24sIGJvZHksIG9uUmVzcG9uc2UpIHtcclxuICAgICAgICB2YXIgY3VyUmVxTnVtID0gKyt0aGlzLnJlcXVlc3ROdW1iZXJfO1xyXG4gICAgICAgIHZhciBtc2cgPSB7IHI6IGN1clJlcU51bSwgYTogYWN0aW9uLCBiOiBib2R5IH07XHJcbiAgICAgICAgdGhpcy5sb2dfKHV0aWwuc3RyaW5naWZ5KG1zZykpO1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHRoaXMuY29ubmVjdGVkXywgXCJzZW5kUmVxdWVzdCBjYWxsIHdoZW4gd2UncmUgbm90IGNvbm5lY3RlZCBub3QgYWxsb3dlZC5cIik7XHJcbiAgICAgICAgdGhpcy5yZWFsdGltZV8uc2VuZFJlcXVlc3QobXNnKTtcclxuICAgICAgICBpZiAob25SZXNwb25zZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RDQkhhc2hfW2N1clJlcU51bV0gPSBvblJlc3BvbnNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiAocXVlcnksIGN1cnJlbnRIYXNoRm4sIHRhZywgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBxdWVyeUlkID0gcXVlcnkucXVlcnlJZGVudGlmaWVyKCk7XHJcbiAgICAgICAgdmFyIHBhdGhTdHJpbmcgPSBxdWVyeS5wYXRoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdMaXN0ZW4gY2FsbGVkIGZvciAnICsgcGF0aFN0cmluZyArICcgJyArIHF1ZXJ5SWQpO1xyXG4gICAgICAgIHRoaXMubGlzdGVuc19bcGF0aFN0cmluZ10gPSB0aGlzLmxpc3RlbnNfW3BhdGhTdHJpbmddIHx8IHt9O1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHF1ZXJ5LmdldFF1ZXJ5UGFyYW1zKCkuaXNEZWZhdWx0KCkgfHxcclxuICAgICAgICAgICAgIXF1ZXJ5LmdldFF1ZXJ5UGFyYW1zKCkubG9hZHNBbGxEYXRhKCksICdsaXN0ZW4oKSBjYWxsZWQgZm9yIG5vbi1kZWZhdWx0IGJ1dCBjb21wbGV0ZSBxdWVyeScpO1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KCF0aGlzLmxpc3RlbnNfW3BhdGhTdHJpbmddW3F1ZXJ5SWRdLCAnbGlzdGVuKCkgY2FsbGVkIHR3aWNlIGZvciBzYW1lIHBhdGgvcXVlcnlJZC4nKTtcclxuICAgICAgICB2YXIgbGlzdGVuU3BlYyA9IHtcclxuICAgICAgICAgICAgb25Db21wbGV0ZTogb25Db21wbGV0ZSxcclxuICAgICAgICAgICAgaGFzaEZuOiBjdXJyZW50SGFzaEZuLFxyXG4gICAgICAgICAgICBxdWVyeTogcXVlcnksXHJcbiAgICAgICAgICAgIHRhZzogdGFnXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmxpc3RlbnNfW3BhdGhTdHJpbmddW3F1ZXJ5SWRdID0gbGlzdGVuU3BlYztcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZExpc3Rlbl8obGlzdGVuU3BlYyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshe29uQ29tcGxldGUoKSxcclxuICAgICAqICAgICAgICAgICBoYXNoRm4oKTohc3RyaW5nLFxyXG4gICAgICogICAgICAgICAgIHF1ZXJ5OiAhUXVlcnksXHJcbiAgICAgKiAgICAgICAgICAgdGFnOiA/bnVtYmVyfX0gbGlzdGVuU3BlY1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRMaXN0ZW5fID0gZnVuY3Rpb24gKGxpc3RlblNwZWMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBxdWVyeSA9IGxpc3RlblNwZWMucXVlcnk7XHJcbiAgICAgICAgdmFyIHBhdGhTdHJpbmcgPSBxdWVyeS5wYXRoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgdmFyIHF1ZXJ5SWQgPSBxdWVyeS5xdWVyeUlkZW50aWZpZXIoKTtcclxuICAgICAgICB0aGlzLmxvZ18oJ0xpc3RlbiBvbiAnICsgcGF0aFN0cmluZyArICcgZm9yICcgKyBxdWVyeUlkKTtcclxuICAgICAgICB2YXIgcmVxID0geyAvKnBhdGgqLyBwOiBwYXRoU3RyaW5nIH07XHJcbiAgICAgICAgdmFyIGFjdGlvbiA9ICdxJztcclxuICAgICAgICAvLyBPbmx5IGJvdGhlciB0byBzZW5kIHF1ZXJ5IGlmIGl0J3Mgbm9uLWRlZmF1bHQuXHJcbiAgICAgICAgaWYgKGxpc3RlblNwZWMudGFnKSB7XHJcbiAgICAgICAgICAgIHJlcVsncSddID0gcXVlcnkucXVlcnlPYmplY3QoKTtcclxuICAgICAgICAgICAgcmVxWyd0J10gPSBsaXN0ZW5TcGVjLnRhZztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVxWyAvKmhhc2gqLydoJ10gPSBsaXN0ZW5TcGVjLmhhc2hGbigpO1xyXG4gICAgICAgIHRoaXMuc2VuZFJlcXVlc3QoYWN0aW9uLCByZXEsIGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXlsb2FkID0gbWVzc2FnZVsgLypkYXRhKi8nZCddO1xyXG4gICAgICAgICAgICB2YXIgc3RhdHVzID0gbWVzc2FnZVsgLypzdGF0dXMqLydzJ107XHJcbiAgICAgICAgICAgIC8vIHByaW50IHdhcm5pbmdzIGluIGFueSBjYXNlLi4uXHJcbiAgICAgICAgICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLndhcm5Pbkxpc3Rlbldhcm5pbmdzXyhwYXlsb2FkLCBxdWVyeSk7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50TGlzdGVuU3BlYyA9IF90aGlzLmxpc3RlbnNfW3BhdGhTdHJpbmddICYmIF90aGlzLmxpc3RlbnNfW3BhdGhTdHJpbmddW3F1ZXJ5SWRdO1xyXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYWN0aW9ucyBpZiB0aGUgbGlzdGVuIGhhc24ndCBiZWVuIHJlbW92ZWQgYW5kIHJlYWRkZWRcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRMaXN0ZW5TcGVjID09PSBsaXN0ZW5TcGVjKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2dfKCdsaXN0ZW4gcmVzcG9uc2UnLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgIT09ICdvaycpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmVMaXN0ZW5fKHBhdGhTdHJpbmcsIHF1ZXJ5SWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlblNwZWMub25Db21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlblNwZWMub25Db21wbGV0ZShzdGF0dXMsIHBheWxvYWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5fSBxdWVyeVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ud2Fybk9uTGlzdGVuV2FybmluZ3NfID0gZnVuY3Rpb24gKHBheWxvYWQsIHF1ZXJ5KSB7XHJcbiAgICAgICAgaWYgKHBheWxvYWQgJiYgdHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnICYmIHV0aWwuY29udGFpbnMocGF5bG9hZCwgJ3cnKSkge1xyXG4gICAgICAgICAgICB2YXIgd2FybmluZ3MgPSB1dGlsLnNhZmVHZXQocGF5bG9hZCwgJ3cnKTtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkod2FybmluZ3MpICYmIH53YXJuaW5ncy5pbmRleE9mKCdub19pbmRleCcpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhTcGVjID0gJ1wiLmluZGV4T25cIjogXCInICtcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0UXVlcnlQYXJhbXMoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0SW5kZXgoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudG9TdHJpbmcoKSArXHJcbiAgICAgICAgICAgICAgICAgICAgJ1wiJztcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleFBhdGggPSBxdWVyeS5wYXRoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB3YXJuKFwiVXNpbmcgYW4gdW5zcGVjaWZpZWQgaW5kZXguIFlvdXIgZGF0YSB3aWxsIGJlIGRvd25sb2FkZWQgYW5kIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAoXCJmaWx0ZXJlZCBvbiB0aGUgY2xpZW50LiBDb25zaWRlciBhZGRpbmcgXCIgKyBpbmRleFNwZWMgKyBcIiBhdCBcIikgK1xyXG4gICAgICAgICAgICAgICAgICAgIChpbmRleFBhdGggKyBcIiB0byB5b3VyIHNlY3VyaXR5IHJ1bGVzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5yZWZyZXNoQXV0aFRva2VuID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICAgICAgdGhpcy5hdXRoVG9rZW5fID0gdG9rZW47XHJcbiAgICAgICAgdGhpcy5sb2dfKCdBdXRoIHRva2VuIHJlZnJlc2hlZCcpO1xyXG4gICAgICAgIGlmICh0aGlzLmF1dGhUb2tlbl8pIHtcclxuICAgICAgICAgICAgdGhpcy50cnlBdXRoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvL0lmIHdlJ3JlIGNvbm5lY3RlZCB3ZSB3YW50IHRvIGxldCB0aGUgc2VydmVyIGtub3cgdG8gdW5hdXRoZW50aWNhdGUgdXMuIElmIHdlJ3JlIG5vdCBjb25uZWN0ZWQsIHNpbXBseSBkZWxldGVcclxuICAgICAgICAgICAgLy90aGUgY3JlZGVudGlhbCBzbyB3ZSBkb250IGJlY29tZSBhdXRoZW50aWNhdGVkIG5leHQgdGltZSB3ZSBjb25uZWN0LlxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRSZXF1ZXN0KCd1bmF1dGgnLCB7fSwgZnVuY3Rpb24gKCkgeyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlZHVjZVJlY29ubmVjdERlbGF5SWZBZG1pbkNyZWRlbnRpYWxfKHRva2VuKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gY3JlZGVudGlhbFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnJlZHVjZVJlY29ubmVjdERlbGF5SWZBZG1pbkNyZWRlbnRpYWxfID0gZnVuY3Rpb24gKGNyZWRlbnRpYWwpIHtcclxuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzbid0IGludGVuZGVkIHRvIGJlIGJ1bGxldHByb29mIChhIG1hbGljaW91cyBkZXZlbG9wZXIgY2FuIGFsd2F5cyBqdXN0IG1vZGlmeSB0aGUgY2xpZW50KS5cclxuICAgICAgICAvLyBBZGRpdGlvbmFsbHksIHdlIGRvbid0IGJvdGhlciByZXNldHRpbmcgdGhlIG1heCBkZWxheSBiYWNrIHRvIHRoZSBkZWZhdWx0IGlmIGF1dGggZmFpbHMgLyBleHBpcmVzLlxyXG4gICAgICAgIHZhciBpc0ZpcmViYXNlU2VjcmV0ID0gY3JlZGVudGlhbCAmJiBjcmVkZW50aWFsLmxlbmd0aCA9PT0gNDA7XHJcbiAgICAgICAgaWYgKGlzRmlyZWJhc2VTZWNyZXQgfHwgdXRpbC5pc0FkbWluKGNyZWRlbnRpYWwpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnQWRtaW4gYXV0aCBjcmVkZW50aWFsIGRldGVjdGVkLiAgUmVkdWNpbmcgbWF4IHJlY29ubmVjdCB0aW1lLicpO1xyXG4gICAgICAgICAgICB0aGlzLm1heFJlY29ubmVjdERlbGF5XyA9IFJFQ09OTkVDVF9NQVhfREVMQVlfRk9SX0FETUlOUztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRlbXB0cyB0byBhdXRoZW50aWNhdGUgd2l0aCB0aGUgZ2l2ZW4gY3JlZGVudGlhbHMuIElmIHRoZSBhdXRoZW50aWNhdGlvbiBhdHRlbXB0IGZhaWxzLCBpdCdzIHRyaWdnZXJlZCBsaWtlXHJcbiAgICAgKiBhIGF1dGggcmV2b2tlZCAodGhlIGNvbm5lY3Rpb24gaXMgY2xvc2VkKS5cclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnRyeUF1dGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfICYmIHRoaXMuYXV0aFRva2VuXykge1xyXG4gICAgICAgICAgICB2YXIgdG9rZW5fMSA9IHRoaXMuYXV0aFRva2VuXztcclxuICAgICAgICAgICAgdmFyIGF1dGhNZXRob2QgPSB1dGlsLmlzVmFsaWRGb3JtYXQodG9rZW5fMSkgPyAnYXV0aCcgOiAnZ2F1dGgnO1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdERhdGEgPSB7IGNyZWQ6IHRva2VuXzEgfTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXV0aE92ZXJyaWRlXyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdERhdGFbJ25vYXV0aCddID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy5hdXRoT3ZlcnJpZGVfID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdERhdGFbJ2F1dGh2YXInXSA9IHRoaXMuYXV0aE92ZXJyaWRlXztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNlbmRSZXF1ZXN0KGF1dGhNZXRob2QsIHJlcXVlc3REYXRhLCBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gcmVzWyAvKnN0YXR1cyovJ3MnXTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcmVzWyAvKmRhdGEqLydkJ10gfHwgJ2Vycm9yJztcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5hdXRoVG9rZW5fID09PSB0b2tlbl8xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5pbnZhbGlkQXV0aFRva2VuQ291bnRfID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXJzIHJlY29ubmVjdCBhbmQgZm9yY2UgcmVmcmVzaCBmb3IgYXV0aCB0b2tlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbkF1dGhSZXZva2VkXyhzdGF0dXMsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24gKHF1ZXJ5LCB0YWcpIHtcclxuICAgICAgICB2YXIgcGF0aFN0cmluZyA9IHF1ZXJ5LnBhdGgudG9TdHJpbmcoKTtcclxuICAgICAgICB2YXIgcXVlcnlJZCA9IHF1ZXJ5LnF1ZXJ5SWRlbnRpZmllcigpO1xyXG4gICAgICAgIHRoaXMubG9nXygnVW5saXN0ZW4gY2FsbGVkIGZvciAnICsgcGF0aFN0cmluZyArICcgJyArIHF1ZXJ5SWQpO1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHF1ZXJ5LmdldFF1ZXJ5UGFyYW1zKCkuaXNEZWZhdWx0KCkgfHxcclxuICAgICAgICAgICAgIXF1ZXJ5LmdldFF1ZXJ5UGFyYW1zKCkubG9hZHNBbGxEYXRhKCksICd1bmxpc3RlbigpIGNhbGxlZCBmb3Igbm9uLWRlZmF1bHQgYnV0IGNvbXBsZXRlIHF1ZXJ5Jyk7XHJcbiAgICAgICAgdmFyIGxpc3RlbiA9IHRoaXMucmVtb3ZlTGlzdGVuXyhwYXRoU3RyaW5nLCBxdWVyeUlkKTtcclxuICAgICAgICBpZiAobGlzdGVuICYmIHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRVbmxpc3Rlbl8ocGF0aFN0cmluZywgcXVlcnlJZCwgcXVlcnkucXVlcnlPYmplY3QoKSwgdGFnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRVbmxpc3Rlbl8gPSBmdW5jdGlvbiAocGF0aFN0cmluZywgcXVlcnlJZCwgcXVlcnlPYmosIHRhZykge1xyXG4gICAgICAgIHRoaXMubG9nXygnVW5saXN0ZW4gb24gJyArIHBhdGhTdHJpbmcgKyAnIGZvciAnICsgcXVlcnlJZCk7XHJcbiAgICAgICAgdmFyIHJlcSA9IHsgLypwYXRoKi8gcDogcGF0aFN0cmluZyB9O1xyXG4gICAgICAgIHZhciBhY3Rpb24gPSAnbic7XHJcbiAgICAgICAgLy8gT25seSBib3RoZXIgc2VuZGluZyBxdWVyeUlkIGlmIGl0J3Mgbm9uLWRlZmF1bHQuXHJcbiAgICAgICAgaWYgKHRhZykge1xyXG4gICAgICAgICAgICByZXFbJ3EnXSA9IHF1ZXJ5T2JqO1xyXG4gICAgICAgICAgICByZXFbJ3QnXSA9IHRhZztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChhY3Rpb24sIHJlcSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUub25EaXNjb25uZWN0UHV0ID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE9uRGlzY29ubmVjdF8oJ28nLCBwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0UmVxdWVzdFF1ZXVlXy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHBhdGhTdHJpbmc6IHBhdGhTdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdvJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBvbkNvbXBsZXRlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5vbkRpc2Nvbm5lY3RNZXJnZSA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRPbkRpc2Nvbm5lY3RfKCdvbScsIHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RSZXF1ZXN0UXVldWVfLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgcGF0aFN0cmluZzogcGF0aFN0cmluZyxcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ29tJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBvbkNvbXBsZXRlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5vbkRpc2Nvbm5lY3RDYW5jZWwgPSBmdW5jdGlvbiAocGF0aFN0cmluZywgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kT25EaXNjb25uZWN0Xygnb2MnLCBwYXRoU3RyaW5nLCBudWxsLCBvbkNvbXBsZXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0UmVxdWVzdFF1ZXVlXy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHBhdGhTdHJpbmc6IHBhdGhTdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdvYycsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogb25Db21wbGV0ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRPbkRpc2Nvbm5lY3RfID0gZnVuY3Rpb24gKGFjdGlvbiwgcGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciByZXF1ZXN0ID0geyAvKnBhdGgqLyBwOiBwYXRoU3RyaW5nLCAvKmRhdGEqLyBkOiBkYXRhIH07XHJcbiAgICAgICAgdGhpcy5sb2dfKCdvbkRpc2Nvbm5lY3QgJyArIGFjdGlvbiwgcmVxdWVzdCk7XHJcbiAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChhY3Rpb24sIHJlcXVlc3QsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICBpZiAob25Db21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZShyZXNwb25zZVsgLypzdGF0dXMqLydzJ10sIHJlc3BvbnNlWyAvKiBkYXRhICovJ2QnXSk7XHJcbiAgICAgICAgICAgICAgICB9LCBNYXRoLmZsb29yKDApKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlLCBoYXNoKSB7XHJcbiAgICAgICAgdGhpcy5wdXRJbnRlcm5hbCgncCcsIHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUsIGhhc2gpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUsIGhhc2gpIHtcclxuICAgICAgICB0aGlzLnB1dEludGVybmFsKCdtJywgcGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSwgaGFzaCk7XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnB1dEludGVybmFsID0gZnVuY3Rpb24gKGFjdGlvbiwgcGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSwgaGFzaCkge1xyXG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xyXG4gICAgICAgICAgICAvKnBhdGgqLyBwOiBwYXRoU3RyaW5nLFxyXG4gICAgICAgICAgICAvKmRhdGEqLyBkOiBkYXRhXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXF1ZXN0WyAvKmhhc2gqLydoJ10gPSBoYXNoO1xyXG4gICAgICAgIC8vIFRPRE86IE9ubHkga2VlcCB0cmFjayBvZiB0aGUgbW9zdCByZWNlbnQgcHV0IGZvciBhIGdpdmVuIHBhdGg/XHJcbiAgICAgICAgdGhpcy5vdXRzdGFuZGluZ1B1dHNfLnB1c2goe1xyXG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcclxuICAgICAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcclxuICAgICAgICAgICAgb25Db21wbGV0ZTogb25Db21wbGV0ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMub3V0c3RhbmRpbmdQdXRDb3VudF8rKztcclxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLm91dHN0YW5kaW5nUHV0c18ubGVuZ3RoIC0gMTtcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZFB1dF8oaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdCdWZmZXJpbmcgcHV0OiAnICsgcGF0aFN0cmluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kUHV0XyA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGFjdGlvbiA9IHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpbmRleF0uYWN0aW9uO1xyXG4gICAgICAgIHZhciByZXF1ZXN0ID0gdGhpcy5vdXRzdGFuZGluZ1B1dHNfW2luZGV4XS5yZXF1ZXN0O1xyXG4gICAgICAgIHZhciBvbkNvbXBsZXRlID0gdGhpcy5vdXRzdGFuZGluZ1B1dHNfW2luZGV4XS5vbkNvbXBsZXRlO1xyXG4gICAgICAgIHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpbmRleF0ucXVldWVkID0gdGhpcy5jb25uZWN0ZWRfO1xyXG4gICAgICAgIHRoaXMuc2VuZFJlcXVlc3QoYWN0aW9uLCByZXF1ZXN0LCBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5sb2dfKGFjdGlvbiArICcgcmVzcG9uc2UnLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgZGVsZXRlIF90aGlzLm91dHN0YW5kaW5nUHV0c19baW5kZXhdO1xyXG4gICAgICAgICAgICBfdGhpcy5vdXRzdGFuZGluZ1B1dENvdW50Xy0tO1xyXG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBhcnJheSBvY2Nhc2lvbmFsbHkuXHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5vdXRzdGFuZGluZ1B1dENvdW50XyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub3V0c3RhbmRpbmdQdXRzXyA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvbkNvbXBsZXRlKVxyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZShtZXNzYWdlWyAvKnN0YXR1cyovJ3MnXSwgbWVzc2FnZVsgLyogZGF0YSAqLydkJ10pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnJlcG9ydFN0YXRzID0gZnVuY3Rpb24gKHN0YXRzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBJZiB3ZSdyZSBub3QgY29ubmVjdGVkLCB3ZSBqdXN0IGRyb3AgdGhlIHN0YXRzLlxyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSB7IC8qY291bnRlcnMqLyBjOiBzdGF0cyB9O1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ3JlcG9ydFN0YXRzJywgcmVxdWVzdCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZFJlcXVlc3QoLypzdGF0cyovICdzJywgcmVxdWVzdCwgZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHJlc3VsdFsgLypzdGF0dXMqLydzJ107XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAnb2snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yUmVhc29uID0gcmVzdWx0WyAvKiBkYXRhICovJ2QnXTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dfKCdyZXBvcnRTdGF0cycsICdFcnJvciBzZW5kaW5nIHN0YXRzOiAnICsgZXJyb3JSZWFzb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyp9IG1lc3NhZ2VcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5vbkRhdGFNZXNzYWdlXyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgaWYgKCdyJyBpbiBtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgYSByZXNwb25zZVxyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ2Zyb20gc2VydmVyOiAnICsgdXRpbC5zdHJpbmdpZnkobWVzc2FnZSkpO1xyXG4gICAgICAgICAgICB2YXIgcmVxTnVtID0gbWVzc2FnZVsnciddO1xyXG4gICAgICAgICAgICB2YXIgb25SZXNwb25zZSA9IHRoaXMucmVxdWVzdENCSGFzaF9bcmVxTnVtXTtcclxuICAgICAgICAgICAgaWYgKG9uUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlcXVlc3RDQkhhc2hfW3JlcU51bV07XHJcbiAgICAgICAgICAgICAgICBvblJlc3BvbnNlKG1lc3NhZ2VbIC8qYm9keSovJ2InXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoJ2Vycm9yJyBpbiBtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIHRocm93ICdBIHNlcnZlci1zaWRlIGVycm9yIGhhcyBvY2N1cnJlZDogJyArIG1lc3NhZ2VbJ2Vycm9yJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCdhJyBpbiBtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIC8vIGEgYW5kIGIgYXJlIGFjdGlvbiBhbmQgYm9keSwgcmVzcGVjdGl2ZWx5XHJcbiAgICAgICAgICAgIHRoaXMub25EYXRhUHVzaF8obWVzc2FnZVsnYSddLCBtZXNzYWdlWydiJ10pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUub25EYXRhUHVzaF8gPSBmdW5jdGlvbiAoYWN0aW9uLCBib2R5KSB7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdoYW5kbGVTZXJ2ZXJNZXNzYWdlJywgYWN0aW9uLCBib2R5KTtcclxuICAgICAgICBpZiAoYWN0aW9uID09PSAnZCcpXHJcbiAgICAgICAgICAgIHRoaXMub25EYXRhVXBkYXRlXyhib2R5WyAvKnBhdGgqLydwJ10sIGJvZHlbIC8qZGF0YSovJ2QnXSwgXHJcbiAgICAgICAgICAgIC8qaXNNZXJnZSovIGZhbHNlLCBib2R5Wyd0J10pO1xyXG4gICAgICAgIGVsc2UgaWYgKGFjdGlvbiA9PT0gJ20nKVxyXG4gICAgICAgICAgICB0aGlzLm9uRGF0YVVwZGF0ZV8oYm9keVsgLypwYXRoKi8ncCddLCBib2R5WyAvKmRhdGEqLydkJ10sIFxyXG4gICAgICAgICAgICAvKmlzTWVyZ2U9Ki8gdHJ1ZSwgYm9keVsndCddKTtcclxuICAgICAgICBlbHNlIGlmIChhY3Rpb24gPT09ICdjJylcclxuICAgICAgICAgICAgdGhpcy5vbkxpc3RlblJldm9rZWRfKGJvZHlbIC8qcGF0aCovJ3AnXSwgYm9keVsgLypxdWVyeSovJ3EnXSk7XHJcbiAgICAgICAgZWxzZSBpZiAoYWN0aW9uID09PSAnYWMnKVxyXG4gICAgICAgICAgICB0aGlzLm9uQXV0aFJldm9rZWRfKGJvZHlbIC8qc3RhdHVzIGNvZGUqLydzJ10sIGJvZHlbIC8qIGV4cGxhbmF0aW9uICovJ2QnXSk7XHJcbiAgICAgICAgZWxzZSBpZiAoYWN0aW9uID09PSAnc2QnKVxyXG4gICAgICAgICAgICB0aGlzLm9uU2VjdXJpdHlEZWJ1Z1BhY2tldF8oYm9keSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBlcnJvcignVW5yZWNvZ25pemVkIGFjdGlvbiByZWNlaXZlZCBmcm9tIHNlcnZlcjogJyArXHJcbiAgICAgICAgICAgICAgICB1dGlsLnN0cmluZ2lmeShhY3Rpb24pICtcclxuICAgICAgICAgICAgICAgICdcXG5BcmUgeW91IHVzaW5nIHRoZSBsYXRlc3QgY2xpZW50PycpO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5vblJlYWR5XyA9IGZ1bmN0aW9uICh0aW1lc3RhbXAsIHNlc3Npb25JZCkge1xyXG4gICAgICAgIHRoaXMubG9nXygnY29ubmVjdGlvbiByZWFkeScpO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGVkXyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGlvbkVzdGFibGlzaGVkVGltZV8gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZVRpbWVzdGFtcF8odGltZXN0YW1wKTtcclxuICAgICAgICB0aGlzLmxhc3RTZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlyc3RDb25uZWN0aW9uXykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRDb25uZWN0U3RhdHNfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzdG9yZVN0YXRlXygpO1xyXG4gICAgICAgIHRoaXMuZmlyc3RDb25uZWN0aW9uXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMub25Db25uZWN0U3RhdHVzXyh0cnVlKTtcclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGVDb25uZWN0XyA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB1dGlsLmFzc2VydCghdGhpcy5yZWFsdGltZV8sIFwiU2NoZWR1bGluZyBhIGNvbm5lY3Qgd2hlbiB3ZSdyZSBhbHJlYWR5IGNvbm5lY3RlZC9pbmc/XCIpO1xyXG4gICAgICAgIGlmICh0aGlzLmVzdGFibGlzaENvbm5lY3Rpb25UaW1lcl8pIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZXN0YWJsaXNoQ29ubmVjdGlvblRpbWVyXyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5PVEU6IEV2ZW4gd2hlbiB0aW1lb3V0IGlzIDAsIGl0J3MgaW1wb3J0YW50IHRvIGRvIGEgc2V0VGltZW91dCB0byB3b3JrIGFyb3VuZCBhbiBpbmZ1cmlhdGluZyBcIlNlY3VyaXR5IEVycm9yXCIgaW5cclxuICAgICAgICAvLyBGaXJlZm94IHdoZW4gdHJ5aW5nIHRvIHdyaXRlIHRvIG91ciBsb25nLXBvbGxpbmcgaWZyYW1lIGluIHNvbWUgc2NlbmFyaW9zIChlLmcuIEZvcmdlIG9yIG91ciB1bml0IHRlc3RzKS5cclxuICAgICAgICB0aGlzLmVzdGFibGlzaENvbm5lY3Rpb25UaW1lcl8gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZXN0YWJsaXNoQ29ubmVjdGlvblRpbWVyXyA9IG51bGw7XHJcbiAgICAgICAgICAgIF90aGlzLmVzdGFibGlzaENvbm5lY3Rpb25fKCk7XHJcbiAgICAgICAgfSwgTWF0aC5mbG9vcih0aW1lb3V0KSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZpc2libGVcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5vblZpc2libGVfID0gZnVuY3Rpb24gKHZpc2libGUpIHtcclxuICAgICAgICAvLyBOT1RFOiBUYWJiaW5nIGF3YXkgYW5kIGJhY2sgdG8gYSB3aW5kb3cgd2lsbCBkZWZlYXQgb3VyIHJlY29ubmVjdCBiYWNrb2ZmLCBidXQgSSB0aGluayB0aGF0J3MgZmluZS5cclxuICAgICAgICBpZiAodmlzaWJsZSAmJlxyXG4gICAgICAgICAgICAhdGhpcy52aXNpYmxlXyAmJlxyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5XyA9PT0gdGhpcy5tYXhSZWNvbm5lY3REZWxheV8pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdXaW5kb3cgYmVjYW1lIHZpc2libGUuICBSZWR1Y2luZyBkZWxheS4nKTtcclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheV8gPSBSRUNPTk5FQ1RfTUlOX0RFTEFZO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVhbHRpbWVfKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlQ29ubmVjdF8oMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52aXNpYmxlXyA9IHZpc2libGU7XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLm9uT25saW5lXyA9IGZ1bmN0aW9uIChvbmxpbmUpIHtcclxuICAgICAgICBpZiAob25saW5lKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnQnJvd3NlciB3ZW50IG9ubGluZS4nKTtcclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheV8gPSBSRUNPTk5FQ1RfTUlOX0RFTEFZO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVhbHRpbWVfKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlQ29ubmVjdF8oMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnQnJvd3NlciB3ZW50IG9mZmxpbmUuICBLaWxsaW5nIGNvbm5lY3Rpb24uJyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlYWx0aW1lXykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWFsdGltZV8uY2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUub25SZWFsdGltZURpc2Nvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubG9nXygnZGF0YSBjbGllbnQgZGlzY29ubmVjdGVkJyk7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRfID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZWFsdGltZV8gPSBudWxsO1xyXG4gICAgICAgIC8vIFNpbmNlIHdlIGRvbid0IGtub3cgaWYgb3VyIHNlbnQgdHJhbnNhY3Rpb25zIHN1Y2NlZWRlZCBvciBub3QsIHdlIG5lZWQgdG8gY2FuY2VsIHRoZW0uXHJcbiAgICAgICAgdGhpcy5jYW5jZWxTZW50VHJhbnNhY3Rpb25zXygpO1xyXG4gICAgICAgIC8vIENsZWFyIG91dCB0aGUgcGVuZGluZyByZXF1ZXN0cy5cclxuICAgICAgICB0aGlzLnJlcXVlc3RDQkhhc2hfID0ge307XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkUmVjb25uZWN0XygpKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy52aXNpYmxlXykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dfKFwiV2luZG93IGlzbid0IHZpc2libGUuICBEZWxheWluZyByZWNvbm5lY3QuXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheV8gPSB0aGlzLm1heFJlY29ubmVjdERlbGF5XztcclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdENvbm5lY3Rpb25BdHRlbXB0VGltZV8gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxhc3RDb25uZWN0aW9uRXN0YWJsaXNoZWRUaW1lXykge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UndmUgYmVlbiBjb25uZWN0ZWQgbG9uZyBlbm91Z2gsIHJlc2V0IHJlY29ubmVjdCBkZWxheSB0byBtaW5pbXVtLlxyXG4gICAgICAgICAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDb25uZWN0U3VjY2VlZGVkID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLmxhc3RDb25uZWN0aW9uRXN0YWJsaXNoZWRUaW1lXztcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lU2luY2VMYXN0Q29ubmVjdFN1Y2NlZWRlZCA+IFJFQ09OTkVDVF9ERUxBWV9SRVNFVF9USU1FT1VUKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0RGVsYXlfID0gUkVDT05ORUNUX01JTl9ERUxBWTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdENvbm5lY3Rpb25Fc3RhYmxpc2hlZFRpbWVfID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENvbm5lY3RBdHRlbXB0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLmxhc3RDb25uZWN0aW9uQXR0ZW1wdFRpbWVfO1xyXG4gICAgICAgICAgICB2YXIgcmVjb25uZWN0RGVsYXkgPSBNYXRoLm1heCgwLCB0aGlzLnJlY29ubmVjdERlbGF5XyAtIHRpbWVTaW5jZUxhc3RDb25uZWN0QXR0ZW1wdCk7XHJcbiAgICAgICAgICAgIHJlY29ubmVjdERlbGF5ID0gTWF0aC5yYW5kb20oKSAqIHJlY29ubmVjdERlbGF5O1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ1RyeWluZyB0byByZWNvbm5lY3QgaW4gJyArIHJlY29ubmVjdERlbGF5ICsgJ21zJyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVDb25uZWN0XyhyZWNvbm5lY3REZWxheSk7XHJcbiAgICAgICAgICAgIC8vIEFkanVzdCByZWNvbm5lY3QgZGVsYXkgZm9yIG5leHQgdGltZS5cclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheV8gPSBNYXRoLm1pbih0aGlzLm1heFJlY29ubmVjdERlbGF5XywgdGhpcy5yZWNvbm5lY3REZWxheV8gKiBSRUNPTk5FQ1RfREVMQVlfTVVMVElQTElFUik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub25Db25uZWN0U3RhdHVzXyhmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLmVzdGFibGlzaENvbm5lY3Rpb25fID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFJlY29ubmVjdF8oKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ01ha2luZyBhIGNvbm5lY3Rpb24gYXR0ZW1wdCcpO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RDb25uZWN0aW9uQXR0ZW1wdFRpbWVfID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdENvbm5lY3Rpb25Fc3RhYmxpc2hlZFRpbWVfID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIG9uRGF0YU1lc3NhZ2VfMSA9IHRoaXMub25EYXRhTWVzc2FnZV8uYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIG9uUmVhZHlfMSA9IHRoaXMub25SZWFkeV8uYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIG9uRGlzY29ubmVjdF8xID0gdGhpcy5vblJlYWx0aW1lRGlzY29ubmVjdF8uYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIGNvbm5JZF8xID0gdGhpcy5pZCArICc6JyArIFBlcnNpc3RlbnRDb25uZWN0aW9uLm5leHRDb25uZWN0aW9uSWRfKys7XHJcbiAgICAgICAgICAgIHZhciBzZWxmXzEgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgbGFzdFNlc3Npb25JZF8xID0gdGhpcy5sYXN0U2Vzc2lvbklkO1xyXG4gICAgICAgICAgICB2YXIgY2FuY2VsZWRfMSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbl8xID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIGNsb3NlRm5fMSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb25uZWN0aW9uXzEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uXzEuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGVkXzEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRGlzY29ubmVjdF8xKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBzZW5kUmVxdWVzdEZuID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnQoY29ubmVjdGlvbl8xLCBcInNlbmRSZXF1ZXN0IGNhbGwgd2hlbiB3ZSdyZSBub3QgY29ubmVjdGVkIG5vdCBhbGxvd2VkLlwiKTtcclxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25fMS5zZW5kUmVxdWVzdChtc2cpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLnJlYWx0aW1lXyA9IHtcclxuICAgICAgICAgICAgICAgIGNsb3NlOiBjbG9zZUZuXzEsXHJcbiAgICAgICAgICAgICAgICBzZW5kUmVxdWVzdDogc2VuZFJlcXVlc3RGblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgZm9yY2VSZWZyZXNoID0gdGhpcy5mb3JjZVRva2VuUmVmcmVzaF87XHJcbiAgICAgICAgICAgIHRoaXMuZm9yY2VUb2tlblJlZnJlc2hfID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIEZpcnN0IGZldGNoIGF1dGggdG9rZW4sIGFuZCBlc3RhYmxpc2ggY29ubmVjdGlvbiBhZnRlciBmZXRjaGluZyB0aGUgdG9rZW4gd2FzIHN1Y2Nlc3NmdWxcclxuICAgICAgICAgICAgdGhpcy5hdXRoVG9rZW5Qcm92aWRlcl9cclxuICAgICAgICAgICAgICAgIC5nZXRUb2tlbihmb3JjZVJlZnJlc2gpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNhbmNlbGVkXzEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2coJ2dldFRva2VuKCkgY29tcGxldGVkLiBDcmVhdGluZyBjb25uZWN0aW9uLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGZfMS5hdXRoVG9rZW5fID0gcmVzdWx0ICYmIHJlc3VsdC5hY2Nlc3NUb2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uXzEgPSBuZXcgQ29ubmVjdGlvbihjb25uSWRfMSwgc2VsZl8xLnJlcG9JbmZvXywgb25EYXRhTWVzc2FnZV8xLCBvblJlYWR5XzEsIG9uRGlzY29ubmVjdF8xLCBcclxuICAgICAgICAgICAgICAgICAgICAvKiBvbktpbGw9ICovIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihyZWFzb24gKyAnICgnICsgc2VsZl8xLnJlcG9JbmZvXy50b1N0cmluZygpICsgJyknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZl8xLmludGVycnVwdChTRVJWRVJfS0lMTF9JTlRFUlJVUFRfUkVBU09OKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBsYXN0U2Vzc2lvbklkXzEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nKCdnZXRUb2tlbigpIGNvbXBsZXRlZCBidXQgd2FzIGNhbmNlbGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihudWxsLCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHNlbGZfMS5sb2dfKCdGYWlsZWQgdG8gZ2V0IHRva2VuOiAnICsgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjYW5jZWxlZF8xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuQ09OU1RBTlRTLk5PREVfQURNSU4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBtYXkgYmUgYSBjcml0aWNhbCBlcnJvciBmb3IgdGhlIEFkbWluIE5vZGUuanMgU0RLLCBzbyBsb2cgYSB3YXJuaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCdXQgZ2V0VG9rZW4oKSBtYXkgYWxzbyBqdXN0IGhhdmUgdGVtcG9yYXJpbHkgZmFpbGVkLCBzbyB3ZSBzdGlsbCB3YW50IHRvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnRpbnVlIHJldHJ5aW5nLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VGbl8xKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICBsb2coJ0ludGVycnVwdGluZyBjb25uZWN0aW9uIGZvciByZWFzb246ICcgKyByZWFzb24pO1xyXG4gICAgICAgIHRoaXMuaW50ZXJydXB0UmVhc29uc19bcmVhc29uXSA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMucmVhbHRpbWVfKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVhbHRpbWVfLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXN0YWJsaXNoQ29ubmVjdGlvblRpbWVyXyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblJlYWx0aW1lRGlzY29ubmVjdF8oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICBsb2coJ1Jlc3VtaW5nIGNvbm5lY3Rpb24gZm9yIHJlYXNvbjogJyArIHJlYXNvbik7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuaW50ZXJydXB0UmVhc29uc19bcmVhc29uXTtcclxuICAgICAgICBpZiAodXRpbC5pc0VtcHR5KHRoaXMuaW50ZXJydXB0UmVhc29uc18pKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0RGVsYXlfID0gUkVDT05ORUNUX01JTl9ERUxBWTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnJlYWx0aW1lXykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUNvbm5lY3RfKDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVUaW1lc3RhbXBfID0gZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xyXG4gICAgICAgIHZhciBkZWx0YSA9IHRpbWVzdGFtcCAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIHRoaXMub25TZXJ2ZXJJbmZvVXBkYXRlXyh7IHNlcnZlclRpbWVPZmZzZXQ6IGRlbHRhIH0pO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5jYW5jZWxTZW50VHJhbnNhY3Rpb25zXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub3V0c3RhbmRpbmdQdXRzXy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgcHV0ID0gdGhpcy5vdXRzdGFuZGluZ1B1dHNfW2ldO1xyXG4gICAgICAgICAgICBpZiAocHV0ICYmIC8qaGFzaCovICdoJyBpbiBwdXQucmVxdWVzdCAmJiBwdXQucXVldWVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHV0Lm9uQ29tcGxldGUpXHJcbiAgICAgICAgICAgICAgICAgICAgcHV0Lm9uQ29tcGxldGUoJ2Rpc2Nvbm5lY3QnKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm91dHN0YW5kaW5nUHV0c19baV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dHN0YW5kaW5nUHV0Q291bnRfLS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ2xlYW4gdXAgYXJyYXkgb2NjYXNpb25hbGx5LlxyXG4gICAgICAgIGlmICh0aGlzLm91dHN0YW5kaW5nUHV0Q291bnRfID09PSAwKVxyXG4gICAgICAgICAgICB0aGlzLm91dHN0YW5kaW5nUHV0c18gPSBbXTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gcGF0aFN0cmluZ1xyXG4gICAgICogQHBhcmFtIHtBcnJheS48Kj49fSBxdWVyeVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLm9uTGlzdGVuUmV2b2tlZF8gPSBmdW5jdGlvbiAocGF0aFN0cmluZywgcXVlcnkpIHtcclxuICAgICAgICAvLyBSZW1vdmUgdGhlIGxpc3RlbiBhbmQgbWFudWZhY3R1cmUgYSBcInBlcm1pc3Npb25fZGVuaWVkXCIgZXJyb3IgZm9yIHRoZSBmYWlsZWQgbGlzdGVuLlxyXG4gICAgICAgIHZhciBxdWVyeUlkO1xyXG4gICAgICAgIGlmICghcXVlcnkpIHtcclxuICAgICAgICAgICAgcXVlcnlJZCA9ICdkZWZhdWx0JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5SWQgPSBxdWVyeS5tYXAoZnVuY3Rpb24gKHEpIHsgcmV0dXJuIE9iamVjdFRvVW5pcXVlS2V5KHEpOyB9KS5qb2luKCckJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBsaXN0ZW4gPSB0aGlzLnJlbW92ZUxpc3Rlbl8ocGF0aFN0cmluZywgcXVlcnlJZCk7XHJcbiAgICAgICAgaWYgKGxpc3RlbiAmJiBsaXN0ZW4ub25Db21wbGV0ZSlcclxuICAgICAgICAgICAgbGlzdGVuLm9uQ29tcGxldGUoJ3Blcm1pc3Npb25fZGVuaWVkJyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGhTdHJpbmdcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gcXVlcnlJZFxyXG4gICAgICogQHJldHVybiB7e3F1ZXJpZXM6QXJyYXkuPFF1ZXJ5Piwgb25Db21wbGV0ZTpmdW5jdGlvbihzdHJpbmcpfX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5fID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIHF1ZXJ5SWQpIHtcclxuICAgICAgICB2YXIgbm9ybWFsaXplZFBhdGhTdHJpbmcgPSBuZXcgUGF0aChwYXRoU3RyaW5nKS50b1N0cmluZygpOyAvLyBub3JtYWxpemUgcGF0aC5cclxuICAgICAgICB2YXIgbGlzdGVuO1xyXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbnNfW25vcm1hbGl6ZWRQYXRoU3RyaW5nXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGxpc3RlbiA9IHRoaXMubGlzdGVuc19bbm9ybWFsaXplZFBhdGhTdHJpbmddW3F1ZXJ5SWRdO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5saXN0ZW5zX1tub3JtYWxpemVkUGF0aFN0cmluZ11bcXVlcnlJZF07XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmdldENvdW50KHRoaXMubGlzdGVuc19bbm9ybWFsaXplZFBhdGhTdHJpbmddKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubGlzdGVuc19bbm9ybWFsaXplZFBhdGhTdHJpbmddO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBhbGwgbGlzdGVucyBmb3IgdGhpcyBwYXRoIGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxyXG4gICAgICAgICAgICBsaXN0ZW4gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsaXN0ZW47XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLm9uQXV0aFJldm9rZWRfID0gZnVuY3Rpb24gKHN0YXR1c0NvZGUsIGV4cGxhbmF0aW9uKSB7XHJcbiAgICAgICAgbG9nKCdBdXRoIHRva2VuIHJldm9rZWQ6ICcgKyBzdGF0dXNDb2RlICsgJy8nICsgZXhwbGFuYXRpb24pO1xyXG4gICAgICAgIHRoaXMuYXV0aFRva2VuXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5mb3JjZVRva2VuUmVmcmVzaF8gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucmVhbHRpbWVfLmNsb3NlKCk7XHJcbiAgICAgICAgaWYgKHN0YXR1c0NvZGUgPT09ICdpbnZhbGlkX3Rva2VuJyB8fCBzdGF0dXNDb2RlID09PSAncGVybWlzc2lvbl9kZW5pZWQnKSB7XHJcbiAgICAgICAgICAgIC8vIFdlJ2xsIHdhaXQgYSBjb3VwbGUgdGltZXMgYmVmb3JlIGxvZ2dpbmcgdGhlIHdhcm5pbmcgLyBpbmNyZWFzaW5nIHRoZVxyXG4gICAgICAgICAgICAvLyByZXRyeSBwZXJpb2Qgc2luY2Ugb2F1dGggdG9rZW5zIHdpbGwgcmVwb3J0IGFzIFwiaW52YWxpZFwiIGlmIHRoZXkncmVcclxuICAgICAgICAgICAgLy8ganVzdCBleHBpcmVkLiBQbHVzIHRoZXJlIG1heSBiZSB0cmFuc2llbnQgaXNzdWVzIHRoYXQgcmVzb2x2ZSB0aGVtc2VsdmVzLlxyXG4gICAgICAgICAgICB0aGlzLmludmFsaWRBdXRoVG9rZW5Db3VudF8rKztcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW52YWxpZEF1dGhUb2tlbkNvdW50XyA+PSBJTlZBTElEX0FVVEhfVE9LRU5fVEhSRVNIT0xEKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTZXQgYSBsb25nIHJlY29ubmVjdCBkZWxheSBiZWNhdXNlIHJlY292ZXJ5IGlzIHVubGlrZWx5XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5XyA9IFJFQ09OTkVDVF9NQVhfREVMQVlfRk9SX0FETUlOUztcclxuICAgICAgICAgICAgICAgIC8vIE5vdGlmeSB0aGUgYXV0aCB0b2tlbiBwcm92aWRlciB0aGF0IHRoZSB0b2tlbiBpcyBpbnZhbGlkLCB3aGljaCB3aWxsIGxvZ1xyXG4gICAgICAgICAgICAgICAgLy8gYSB3YXJuaW5nXHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1dGhUb2tlblByb3ZpZGVyXy5ub3RpZnlGb3JJbnZhbGlkVG9rZW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUub25TZWN1cml0eURlYnVnUGFja2V0XyA9IGZ1bmN0aW9uIChib2R5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VjdXJpdHlEZWJ1Z0NhbGxiYWNrXykge1xyXG4gICAgICAgICAgICB0aGlzLnNlY3VyaXR5RGVidWdDYWxsYmFja18oYm9keSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoJ21zZycgaW4gYm9keSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZJUkVCQVNFOiAnICsgYm9keVsnbXNnJ10ucmVwbGFjZSgnXFxuJywgJ1xcbkZJUkVCQVNFOiAnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnJlc3RvcmVTdGF0ZV8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvL1JlLWF1dGhlbnRpY2F0ZSBvdXJzZWx2ZXMgaWYgd2UgaGF2ZSBhIGNyZWRlbnRpYWwgc3RvcmVkLlxyXG4gICAgICAgIHRoaXMudHJ5QXV0aCgpO1xyXG4gICAgICAgIC8vIFB1dHMgZGVwZW5kIG9uIGhhdmluZyByZWNlaXZlZCB0aGUgY29ycmVzcG9uZGluZyBkYXRhIHVwZGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgYmVmb3JlIHRoZXkgY29tcGxldGUsIHNvIHdlIG11c3RcclxuICAgICAgICAvLyBtYWtlIHN1cmUgdG8gc2VuZCBsaXN0ZW5zIGJlZm9yZSBwdXRzLlxyXG4gICAgICAgIHV0aWwuZm9yRWFjaCh0aGlzLmxpc3RlbnNfLCBmdW5jdGlvbiAocGF0aFN0cmluZywgcXVlcmllcykge1xyXG4gICAgICAgICAgICB1dGlsLmZvckVhY2gocXVlcmllcywgZnVuY3Rpb24gKGtleSwgbGlzdGVuU3BlYykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2VuZExpc3Rlbl8obGlzdGVuU3BlYyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vdXRzdGFuZGluZ1B1dHNfLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm91dHN0YW5kaW5nUHV0c19baV0pXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRQdXRfKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAodGhpcy5vbkRpc2Nvbm5lY3RSZXF1ZXN0UXVldWVfLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdCA9IHRoaXMub25EaXNjb25uZWN0UmVxdWVzdFF1ZXVlXy5zaGlmdCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRPbkRpc2Nvbm5lY3RfKHJlcXVlc3QuYWN0aW9uLCByZXF1ZXN0LnBhdGhTdHJpbmcsIHJlcXVlc3QuZGF0YSwgcmVxdWVzdC5vbkNvbXBsZXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBjbGllbnQgc3RhdHMgZm9yIGZpcnN0IGNvbm5lY3Rpb25cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kQ29ubmVjdFN0YXRzXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc3RhdHMgPSB7fTtcclxuICAgICAgICB2YXIgY2xpZW50TmFtZSA9ICdqcyc7XHJcbiAgICAgICAgaWYgKHV0aWwuQ09OU1RBTlRTLk5PREVfQURNSU4pIHtcclxuICAgICAgICAgICAgY2xpZW50TmFtZSA9ICdhZG1pbl9ub2RlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodXRpbC5DT05TVEFOVFMuTk9ERV9DTElFTlQpIHtcclxuICAgICAgICAgICAgY2xpZW50TmFtZSA9ICdub2RlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdHNbJ3Nkay4nICsgY2xpZW50TmFtZSArICcuJyArIGZpcmViYXNlLlNES19WRVJTSU9OLnJlcGxhY2UoL1xcLi9nLCAnLScpXSA9IDE7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNNb2JpbGVDb3Jkb3ZhKCkpIHtcclxuICAgICAgICAgICAgc3RhdHNbJ2ZyYW1ld29yay5jb3Jkb3ZhJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh1dGlsLmlzUmVhY3ROYXRpdmUoKSkge1xyXG4gICAgICAgICAgICBzdGF0c1snZnJhbWV3b3JrLnJlYWN0bmF0aXZlJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlcG9ydFN0YXRzKHN0YXRzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUuc2hvdWxkUmVjb25uZWN0XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb25saW5lID0gT25saW5lTW9uaXRvci5nZXRJbnN0YW5jZSgpLmN1cnJlbnRseU9ubGluZSgpO1xyXG4gICAgICAgIHJldHVybiB1dGlsLmlzRW1wdHkodGhpcy5pbnRlcnJ1cHRSZWFzb25zXykgJiYgb25saW5lO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ubmV4dFBlcnNpc3RlbnRDb25uZWN0aW9uSWRfID0gMDtcclxuICAgIC8qKlxyXG4gICAgICogQ291bnRlciBmb3IgbnVtYmVyIG9mIGNvbm5lY3Rpb25zIGNyZWF0ZWQuIE1haW5seSB1c2VkIGZvciB0YWdnaW5nIGluIHRoZSBsb2dzXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ubmV4dENvbm5lY3Rpb25JZF8gPSAwO1xyXG4gICAgcmV0dXJuIFBlcnNpc3RlbnRDb25uZWN0aW9uO1xyXG59KFNlcnZlckFjdGlvbnMpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBTZXJ2ZXJBY3Rpb25zIHRoYXQgY29tbXVuaWNhdGVzIHdpdGggdGhlIHNlcnZlciB2aWEgUkVTVCByZXF1ZXN0cy5cclxuICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIGZvciBjb21wYXRpYmlsaXR5IHdpdGggY3Jhd2xlcnMsIHdoZXJlIHdlIGRvbid0IHdhbnQgdG8gc3BpbiB1cCBhIGZ1bGxcclxuICogcGVyc2lzdGVudCBjb25uZWN0aW9uICh1c2luZyBXZWJTb2NrZXRzIG9yIGxvbmctcG9sbGluZylcclxuICovXHJcbnZhciBSZWFkb25seVJlc3RDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhSZWFkb25seVJlc3RDbGllbnQsIF9zdXBlcik7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVJlcG9JbmZvfSByZXBvSW5mb18gRGF0YSBhYm91dCB0aGUgbmFtZXNwYWNlIHdlIGFyZSBjb25uZWN0aW5nIHRvXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgKiwgYm9vbGVhbiwgP251bWJlcil9IG9uRGF0YVVwZGF0ZV8gQSBjYWxsYmFjayBmb3IgbmV3IGRhdGEgZnJvbSB0aGUgc2VydmVyXHJcbiAgICAgKiBAcGFyYW0ge0F1dGhUb2tlblByb3ZpZGVyfSBhdXRoVG9rZW5Qcm92aWRlcl9cclxuICAgICAqIEBpbXBsZW1lbnRzIHtTZXJ2ZXJBY3Rpb25zfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZWFkb25seVJlc3RDbGllbnQocmVwb0luZm9fLCBvbkRhdGFVcGRhdGVfLCBhdXRoVG9rZW5Qcm92aWRlcl8pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnJlcG9JbmZvXyA9IHJlcG9JbmZvXztcclxuICAgICAgICBfdGhpcy5vbkRhdGFVcGRhdGVfID0gb25EYXRhVXBkYXRlXztcclxuICAgICAgICBfdGhpcy5hdXRoVG9rZW5Qcm92aWRlcl8gPSBhdXRoVG9rZW5Qcm92aWRlcl87XHJcbiAgICAgICAgLyoqIEBwcml2YXRlIHtmdW5jdGlvbiguLi5bKl0pfSAqL1xyXG4gICAgICAgIF90aGlzLmxvZ18gPSBsb2dXcmFwcGVyKCdwOnJlc3Q6Jyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2UgZG9uJ3QgYWN0dWFsbHkgbmVlZCB0byB0cmFjayBsaXN0ZW5zLCBleGNlcHQgdG8gcHJldmVudCB1cyBjYWxsaW5nIGFuIG9uQ29tcGxldGUgZm9yIGEgbGlzdGVuXHJcbiAgICAgICAgICogdGhhdCdzIGJlZW4gcmVtb3ZlZC4gOi0vXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7IU9iamVjdC48c3RyaW5nLCAhT2JqZWN0Pn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBfdGhpcy5saXN0ZW5zXyA9IHt9O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIFJlYWRvbmx5UmVzdENsaWVudC5wcm90b3R5cGUucmVwb3J0U3RhdHMgPSBmdW5jdGlvbiAoc3RhdHMpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlcclxuICAgICAqIEBwYXJhbSB7P251bWJlcj19IHRhZ1xyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUmVhZG9ubHlSZXN0Q2xpZW50LmdldExpc3RlbklkXyA9IGZ1bmN0aW9uIChxdWVyeSwgdGFnKSB7XHJcbiAgICAgICAgaWYgKHRhZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAndGFnJCcgKyB0YWc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydChxdWVyeS5nZXRRdWVyeVBhcmFtcygpLmlzRGVmYXVsdCgpLCBcInNob3VsZCBoYXZlIGEgdGFnIGlmIGl0J3Mgbm90IGEgZGVmYXVsdCBxdWVyeS5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBxdWVyeS5wYXRoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgUmVhZG9ubHlSZXN0Q2xpZW50LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiAocXVlcnksIGN1cnJlbnRIYXNoRm4sIHRhZywgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHBhdGhTdHJpbmcgPSBxdWVyeS5wYXRoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdMaXN0ZW4gY2FsbGVkIGZvciAnICsgcGF0aFN0cmluZyArICcgJyArIHF1ZXJ5LnF1ZXJ5SWRlbnRpZmllcigpKTtcclxuICAgICAgICAvLyBNYXJrIHRoaXMgbGlzdGVuZXIgc28gd2UgY2FuIHRlbGwgaWYgaXQncyByZW1vdmVkLlxyXG4gICAgICAgIHZhciBsaXN0ZW5JZCA9IFJlYWRvbmx5UmVzdENsaWVudC5nZXRMaXN0ZW5JZF8ocXVlcnksIHRhZyk7XHJcbiAgICAgICAgdmFyIHRoaXNMaXN0ZW4gPSB7fTtcclxuICAgICAgICB0aGlzLmxpc3RlbnNfW2xpc3RlbklkXSA9IHRoaXNMaXN0ZW47XHJcbiAgICAgICAgdmFyIHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyA9IHF1ZXJ5XHJcbiAgICAgICAgICAgIC5nZXRRdWVyeVBhcmFtcygpXHJcbiAgICAgICAgICAgIC50b1Jlc3RRdWVyeVN0cmluZ1BhcmFtZXRlcnMoKTtcclxuICAgICAgICB0aGlzLnJlc3RSZXF1ZXN0XyhwYXRoU3RyaW5nICsgJy5qc29uJywgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzLCBmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgaWYgKGVycm9yID09PSA0MDQpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub25EYXRhVXBkYXRlXyhwYXRoU3RyaW5nLCBkYXRhLCAvKmlzTWVyZ2U9Ki8gZmFsc2UsIHRhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuc2FmZUdldChfdGhpcy5saXN0ZW5zXywgbGlzdGVuSWQpID09PSB0aGlzTGlzdGVuKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzXzE7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzXzEgPSAnb2snO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3IgPT0gNDAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzXzEgPSAncGVybWlzc2lvbl9kZW5pZWQnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzXzEgPSAncmVzdF9lcnJvcjonICsgZXJyb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKHN0YXR1c18xLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgUmVhZG9ubHlSZXN0Q2xpZW50LnByb3RvdHlwZS51bmxpc3RlbiA9IGZ1bmN0aW9uIChxdWVyeSwgdGFnKSB7XHJcbiAgICAgICAgdmFyIGxpc3RlbklkID0gUmVhZG9ubHlSZXN0Q2xpZW50LmdldExpc3RlbklkXyhxdWVyeSwgdGFnKTtcclxuICAgICAgICBkZWxldGUgdGhpcy5saXN0ZW5zX1tsaXN0ZW5JZF07XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBSZWFkb25seVJlc3RDbGllbnQucHJvdG90eXBlLnJlZnJlc2hBdXRoVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICAgICAvLyBuby1vcCBzaW5jZSB3ZSBqdXN0IGFsd2F5cyBjYWxsIGdldFRva2VuLlxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgYSBSRVNUIHJlcXVlc3QgdG8gdGhlIGdpdmVuIHBhdGgsIHdpdGggdGhlIHByb3ZpZGVkIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXJzLFxyXG4gICAgICogYW5kIGFueSBhdXRoIGNyZWRlbnRpYWxzIHdlIGhhdmUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBwYXRoU3RyaW5nXHJcbiAgICAgKiBAcGFyYW0geyFPYmplY3QuPHN0cmluZywgKj59IHF1ZXJ5U3RyaW5nUGFyYW1ldGVyc1xyXG4gICAgICogQHBhcmFtIHs/ZnVuY3Rpb24oP251bWJlciwgKj0pfSBjYWxsYmFja1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUmVhZG9ubHlSZXN0Q2xpZW50LnByb3RvdHlwZS5yZXN0UmVxdWVzdF8gPSBmdW5jdGlvbiAocGF0aFN0cmluZywgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyA9PT0gdm9pZCAwKSB7IHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyA9IHt9OyB9XHJcbiAgICAgICAgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzWydmb3JtYXQnXSA9ICdleHBvcnQnO1xyXG4gICAgICAgIHRoaXMuYXV0aFRva2VuUHJvdmlkZXJfXHJcbiAgICAgICAgICAgIC5nZXRUb2tlbigvKmZvcmNlUmVmcmVzaD0qLyBmYWxzZSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGF1dGhUb2tlbkRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIGF1dGhUb2tlbiA9IGF1dGhUb2tlbkRhdGEgJiYgYXV0aFRva2VuRGF0YS5hY2Nlc3NUb2tlbjtcclxuICAgICAgICAgICAgaWYgKGF1dGhUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzWydhdXRoJ10gPSBhdXRoVG9rZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHVybCA9IChfdGhpcy5yZXBvSW5mb18uc2VjdXJlID8gJ2h0dHBzOi8vJyA6ICdodHRwOi8vJykgK1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucmVwb0luZm9fLmhvc3QgK1xyXG4gICAgICAgICAgICAgICAgcGF0aFN0cmluZyArXHJcbiAgICAgICAgICAgICAgICAnPycgK1xyXG4gICAgICAgICAgICAgICAgJ25zPScgK1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucmVwb0luZm9fLm5hbWVzcGFjZSArXHJcbiAgICAgICAgICAgICAgICB1dGlsLnF1ZXJ5c3RyaW5nKHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyk7XHJcbiAgICAgICAgICAgIF90aGlzLmxvZ18oJ1NlbmRpbmcgUkVTVCByZXF1ZXN0IGZvciAnICsgdXJsKTtcclxuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIHhoci5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nXygnUkVTVCBSZXNwb25zZSBmb3IgJyArIHVybCArICcgcmVjZWl2ZWQuIHN0YXR1czonLCB4aHIuc3RhdHVzLCAncmVzcG9uc2U6JywgeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IHV0aWwuanNvbkV2YWwoeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ZhaWxlZCB0byBwYXJzZSBKU09OIHJlc3BvbnNlIGZvciAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA0MDEgYW5kIDQwNCBhcmUgZXhwZWN0ZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSA0MDEgJiYgeGhyLnN0YXR1cyAhPT0gNDA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdHb3QgdW5zdWNjZXNzZnVsIFJFU1QgcmVzcG9uc2UgZm9yICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBTdGF0dXM6ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5zdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHhoci5zdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIC8qYXN5bmNocm9ub3VzPSovIHRydWUpO1xyXG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZWFkb25seVJlc3RDbGllbnQ7XHJcbn0oU2VydmVyQWN0aW9ucykpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIElOVEVSUlVQVF9SRUFTT04gPSAncmVwb19pbnRlcnJ1cHQnO1xyXG4vKipcclxuICogQSBjb25uZWN0aW9uIHRvIGEgc2luZ2xlIGRhdGEgcmVwb3NpdG9yeS5cclxuICovXHJcbnZhciBSZXBvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFSZXBvSW5mb30gcmVwb0luZm9fXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlUmVzdENsaWVudFxyXG4gICAgICogQHBhcmFtIHshRmlyZWJhc2VBcHB9IGFwcFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXBvKHJlcG9JbmZvXywgZm9yY2VSZXN0Q2xpZW50LCBhcHApIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucmVwb0luZm9fID0gcmVwb0luZm9fO1xyXG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xyXG4gICAgICAgIHRoaXMuZGF0YVVwZGF0ZUNvdW50ID0gMDtcclxuICAgICAgICB0aGlzLnN0YXRzTGlzdGVuZXJfID0gbnVsbDtcclxuICAgICAgICB0aGlzLmV2ZW50UXVldWVfID0gbmV3IEV2ZW50UXVldWUoKTtcclxuICAgICAgICB0aGlzLm5leHRXcml0ZUlkXyA9IDE7XHJcbiAgICAgICAgdGhpcy5pbnRlcmNlcHRTZXJ2ZXJEYXRhQ2FsbGJhY2tfID0gbnVsbDtcclxuICAgICAgICAvLyBBIGxpc3Qgb2YgZGF0YSBwaWVjZXMgYW5kIHBhdGhzIHRvIGJlIHNldCB3aGVuIHRoaXMgY2xpZW50IGRpc2Nvbm5lY3RzLlxyXG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0XyA9IG5ldyBTcGFyc2VTbmFwc2hvdFRyZWUoKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUT0RPOiBUaGlzIHNob3VsZCBiZSBAcHJpdmF0ZSBidXQgaXQncyB1c2VkIGJ5IHRlc3RfYWNjZXNzLmpzIGFuZCBpbnRlcm5hbC5qc1xyXG4gICAgICAgICAqIEB0eXBlIHs/UGVyc2lzdGVudENvbm5lY3Rpb259XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW50Q29ubmVjdGlvbl8gPSBudWxsO1xyXG4gICAgICAgIC8qKiBAdHlwZSB7IUF1dGhUb2tlblByb3ZpZGVyfSAqL1xyXG4gICAgICAgIHZhciBhdXRoVG9rZW5Qcm92aWRlciA9IG5ldyBBdXRoVG9rZW5Qcm92aWRlcihhcHApO1xyXG4gICAgICAgIHRoaXMuc3RhdHNfID0gU3RhdHNNYW5hZ2VyLmdldENvbGxlY3Rpb24ocmVwb0luZm9fKTtcclxuICAgICAgICBpZiAoZm9yY2VSZXN0Q2xpZW50IHx8IGJlaW5nQ3Jhd2xlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VydmVyXyA9IG5ldyBSZWFkb25seVJlc3RDbGllbnQodGhpcy5yZXBvSW5mb18sIHRoaXMub25EYXRhVXBkYXRlXy5iaW5kKHRoaXMpLCBhdXRoVG9rZW5Qcm92aWRlcik7XHJcbiAgICAgICAgICAgIC8vIE1pbm9yIGhhY2s6IEZpcmUgb25Db25uZWN0IGltbWVkaWF0ZWx5LCBzaW5jZSB0aGVyZSdzIG5vIGFjdHVhbCBjb25uZWN0aW9uLlxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMub25Db25uZWN0U3RhdHVzXy5iaW5kKHRoaXMsIHRydWUpLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBhdXRoT3ZlcnJpZGUgPSBhcHAub3B0aW9uc1snZGF0YWJhc2VBdXRoVmFyaWFibGVPdmVycmlkZSddO1xyXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBhdXRoT3ZlcnJpZGVcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhdXRoT3ZlcnJpZGUgIT09ICd1bmRlZmluZWQnICYmIGF1dGhPdmVycmlkZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhdXRoT3ZlcnJpZGUgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IG9iamVjdHMgYXJlIHN1cHBvcnRlZCBmb3Igb3B0aW9uIGRhdGFiYXNlQXV0aFZhcmlhYmxlT3ZlcnJpZGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5zdHJpbmdpZnkoYXV0aE92ZXJyaWRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGF1dGhPdmVycmlkZSBwcm92aWRlZDogJyArIGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGVyc2lzdGVudENvbm5lY3Rpb25fID0gbmV3IFBlcnNpc3RlbnRDb25uZWN0aW9uKHRoaXMucmVwb0luZm9fLCB0aGlzLm9uRGF0YVVwZGF0ZV8uYmluZCh0aGlzKSwgdGhpcy5vbkNvbm5lY3RTdGF0dXNfLmJpbmQodGhpcyksIHRoaXMub25TZXJ2ZXJJbmZvVXBkYXRlXy5iaW5kKHRoaXMpLCBhdXRoVG9rZW5Qcm92aWRlciwgYXV0aE92ZXJyaWRlKTtcclxuICAgICAgICAgICAgdGhpcy5zZXJ2ZXJfID0gdGhpcy5wZXJzaXN0ZW50Q29ubmVjdGlvbl87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF1dGhUb2tlblByb3ZpZGVyLmFkZFRva2VuQ2hhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNlcnZlcl8ucmVmcmVzaEF1dGhUb2tlbih0b2tlbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgbXVsdGlwbGUgUmVwb3MgZm9yIHRoZSBzYW1lIHJlcG9JbmZvIChpLmUuIHRoZXJlIGFyZSBtdWx0aXBsZSBGaXJlYmFzZS5Db250ZXh0cyBiZWluZyB1c2VkKSxcclxuICAgICAgICAvLyB3ZSBvbmx5IHdhbnQgdG8gY3JlYXRlIG9uZSBTdGF0c1JlcG9ydGVyLiAgQXMgc3VjaCwgd2UnbGwgcmVwb3J0IHN0YXRzIG92ZXIgdGhlIGZpcnN0IFJlcG8gY3JlYXRlZC5cclxuICAgICAgICB0aGlzLnN0YXRzUmVwb3J0ZXJfID0gU3RhdHNNYW5hZ2VyLmdldE9yQ3JlYXRlUmVwb3J0ZXIocmVwb0luZm9fLCBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgU3RhdHNSZXBvcnRlcihfdGhpcy5zdGF0c18sIF90aGlzLnNlcnZlcl8pOyB9KTtcclxuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uc19pbml0XygpO1xyXG4gICAgICAgIC8vIFVzZWQgZm9yIC5pbmZvLlxyXG4gICAgICAgIHRoaXMuaW5mb0RhdGFfID0gbmV3IFNuYXBzaG90SG9sZGVyKCk7XHJcbiAgICAgICAgdGhpcy5pbmZvU3luY1RyZWVfID0gbmV3IFN5bmNUcmVlKHtcclxuICAgICAgICAgICAgc3RhcnRMaXN0ZW5pbmc6IGZ1bmN0aW9uIChxdWVyeSwgdGFnLCBjdXJyZW50SGFzaEZuLCBvbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5mb0V2ZW50cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBfdGhpcy5pbmZvRGF0YV8uZ2V0Tm9kZShxdWVyeS5wYXRoKTtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgcG9zc2libHkgYSBoYWNrLCBidXQgd2UgaGF2ZSBkaWZmZXJlbnQgc2VtYW50aWNzIGZvciAuaW5mbyBlbmRwb2ludHMuIFdlIGRvbid0IHJhaXNlIG51bGwgZXZlbnRzXHJcbiAgICAgICAgICAgICAgICAvLyBvbiBpbml0aWFsIGRhdGEuLi5cclxuICAgICAgICAgICAgICAgIGlmICghbm9kZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmZvRXZlbnRzID0gX3RoaXMuaW5mb1N5bmNUcmVlXy5hcHBseVNlcnZlck92ZXJ3cml0ZShxdWVyeS5wYXRoLCBub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgnb2snKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBpbmZvRXZlbnRzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdG9wTGlzdGVuaW5nOiBmdW5jdGlvbiAoKSB7IH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUluZm9fKCdjb25uZWN0ZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5zZXJ2ZXJTeW5jVHJlZV8gPSBuZXcgU3luY1RyZWUoe1xyXG4gICAgICAgICAgICBzdGFydExpc3RlbmluZzogZnVuY3Rpb24gKHF1ZXJ5LCB0YWcsIGN1cnJlbnRIYXNoRm4sIG9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNlcnZlcl8ubGlzdGVuKHF1ZXJ5LCBjdXJyZW50SGFzaEZuLCB0YWcsIGZ1bmN0aW9uIChzdGF0dXMsIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gb25Db21wbGV0ZShzdGF0dXMsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmV2ZW50UXVldWVfLnJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocXVlcnkucGF0aCwgZXZlbnRzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gTm8gc3luY2hyb25vdXMgZXZlbnRzIGZvciBuZXR3b3JrLWJhY2tlZCBzeW5jIHRyZWVzXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0b3BMaXN0ZW5pbmc6IGZ1bmN0aW9uIChxdWVyeSwgdGFnKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXJ2ZXJfLnVubGlzdGVuKHF1ZXJ5LCB0YWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gIFRoZSBVUkwgY29ycmVzcG9uZGluZyB0byB0aGUgcm9vdCBvZiB0aGlzIEZpcmViYXNlLlxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKCh0aGlzLnJlcG9JbmZvXy5zZWN1cmUgPyAnaHR0cHM6Ly8nIDogJ2h0dHA6Ly8nKSArIHRoaXMucmVwb0luZm9fLmhvc3QpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IXN0cmluZ30gVGhlIG5hbWVzcGFjZSByZXByZXNlbnRlZCBieSB0aGUgcmVwby5cclxuICAgICAqL1xyXG4gICAgUmVwby5wcm90b3R5cGUubmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBvSW5mb18ubmFtZXNwYWNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IW51bWJlcn0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzLCB0YWtpbmcgdGhlIHNlcnZlciBvZmZzZXQgaW50byBhY2NvdW50IGlmIHdlIGhhdmUgb25lLlxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5zZXJ2ZXJUaW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvZmZzZXROb2RlID0gdGhpcy5pbmZvRGF0YV8uZ2V0Tm9kZShuZXcgUGF0aCgnLmluZm8vc2VydmVyVGltZU9mZnNldCcpKTtcclxuICAgICAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0Tm9kZS52YWwoKSB8fCAwO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIG9mZnNldDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIFNlcnZlclZhbHVlcyB1c2luZyBzb21lIHZhcmlhYmxlcyBmcm9tIHRoZSByZXBvIG9iamVjdC5cclxuICAgICAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIFJlcG8ucHJvdG90eXBlLmdlbmVyYXRlU2VydmVyVmFsdWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBnZW5lcmF0ZVdpdGhWYWx1ZXMoe1xyXG4gICAgICAgICAgICB0aW1lc3RhbXA6IHRoaXMuc2VydmVyVGltZSgpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgYnkgcmVhbHRpbWUgd2hlbiB3ZSBnZXQgbmV3IG1lc3NhZ2VzIGZyb20gdGhlIHNlcnZlci5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhTdHJpbmdcclxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc01lcmdlXHJcbiAgICAgKiBAcGFyYW0gez9udW1iZXJ9IHRhZ1xyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5vbkRhdGFVcGRhdGVfID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIGRhdGEsIGlzTWVyZ2UsIHRhZykge1xyXG4gICAgICAgIC8vIEZvciB0ZXN0aW5nLlxyXG4gICAgICAgIHRoaXMuZGF0YVVwZGF0ZUNvdW50Kys7XHJcbiAgICAgICAgdmFyIHBhdGggPSBuZXcgUGF0aChwYXRoU3RyaW5nKTtcclxuICAgICAgICBkYXRhID0gdGhpcy5pbnRlcmNlcHRTZXJ2ZXJEYXRhQ2FsbGJhY2tfXHJcbiAgICAgICAgICAgID8gdGhpcy5pbnRlcmNlcHRTZXJ2ZXJEYXRhQ2FsbGJhY2tfKHBhdGhTdHJpbmcsIGRhdGEpXHJcbiAgICAgICAgICAgIDogZGF0YTtcclxuICAgICAgICB2YXIgZXZlbnRzID0gW107XHJcbiAgICAgICAgaWYgKHRhZykge1xyXG4gICAgICAgICAgICBpZiAoaXNNZXJnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhZ2dlZENoaWxkcmVuID0gdXRpbC5tYXAoZGF0YSwgZnVuY3Rpb24gKHJhdykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlRnJvbUpTT04kMShyYXcpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBldmVudHMgPSB0aGlzLnNlcnZlclN5bmNUcmVlXy5hcHBseVRhZ2dlZFF1ZXJ5TWVyZ2UocGF0aCwgdGFnZ2VkQ2hpbGRyZW4sIHRhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFnZ2VkU25hcCA9IG5vZGVGcm9tSlNPTiQxKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzID0gdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYXBwbHlUYWdnZWRRdWVyeU92ZXJ3cml0ZShwYXRoLCB0YWdnZWRTbmFwLCB0YWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzTWVyZ2UpIHtcclxuICAgICAgICAgICAgdmFyIGNoYW5nZWRDaGlsZHJlbiA9IHV0aWwubWFwKGRhdGEsIGZ1bmN0aW9uIChyYXcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlRnJvbUpTT04kMShyYXcpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZXZlbnRzID0gdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYXBwbHlTZXJ2ZXJNZXJnZShwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHNuYXAgPSBub2RlRnJvbUpTT04kMShkYXRhKTtcclxuICAgICAgICAgICAgZXZlbnRzID0gdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYXBwbHlTZXJ2ZXJPdmVyd3JpdGUocGF0aCwgc25hcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhZmZlY3RlZFBhdGggPSBwYXRoO1xyXG4gICAgICAgIGlmIChldmVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSBoYXZlIGEgbGlzdGVuZXIgb3V0c3RhbmRpbmcgZm9yIGVhY2ggdHJhbnNhY3Rpb24sIHJlY2VpdmluZyBhbnkgZXZlbnRzXHJcbiAgICAgICAgICAgIC8vIGlzIGEgcHJveHkgZm9yIHNvbWUgY2hhbmdlIGhhdmluZyBvY2N1cnJlZC5cclxuICAgICAgICAgICAgYWZmZWN0ZWRQYXRoID0gdGhpcy5yZXJ1blRyYW5zYWN0aW9uc18ocGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZXZlbnRRdWV1ZV8ucmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChhZmZlY3RlZFBhdGgsIGV2ZW50cyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUT0RPOiBUaGlzIHNob3VsZCBiZSBAcHJpdmF0ZSBidXQgaXQncyB1c2VkIGJ5IHRlc3RfYWNjZXNzLmpzIGFuZCBpbnRlcm5hbC5qc1xyXG4gICAgICogQHBhcmFtIHs/ZnVuY3Rpb24oIXN0cmluZywgKik6Kn0gY2FsbGJhY2tcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFJlcG8ucHJvdG90eXBlLmludGVyY2VwdFNlcnZlckRhdGFfID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5pbnRlcmNlcHRTZXJ2ZXJEYXRhQ2FsbGJhY2tfID0gY2FsbGJhY2s7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFib29sZWFufSBjb25uZWN0U3RhdHVzXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5vbkNvbm5lY3RTdGF0dXNfID0gZnVuY3Rpb24gKGNvbm5lY3RTdGF0dXMpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUluZm9fKCdjb25uZWN0ZWQnLCBjb25uZWN0U3RhdHVzKTtcclxuICAgICAgICBpZiAoY29ubmVjdFN0YXR1cyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5ydW5PbkRpc2Nvbm5lY3RFdmVudHNfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSB1cGRhdGVzXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5vblNlcnZlckluZm9VcGRhdGVfID0gZnVuY3Rpb24gKHVwZGF0ZXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGVhY2godXBkYXRlcywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgX3RoaXMudXBkYXRlSW5mb18oa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBwYXRoU3RyaW5nXHJcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS51cGRhdGVJbmZvXyA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBwYXRoID0gbmV3IFBhdGgoJy8uaW5mby8nICsgcGF0aFN0cmluZyk7XHJcbiAgICAgICAgdmFyIG5ld05vZGUgPSBub2RlRnJvbUpTT04kMSh2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5pbmZvRGF0YV8udXBkYXRlU25hcHNob3QocGF0aCwgbmV3Tm9kZSk7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuaW5mb1N5bmNUcmVlXy5hcHBseVNlcnZlck92ZXJ3cml0ZShwYXRoLCBuZXdOb2RlKTtcclxuICAgICAgICB0aGlzLmV2ZW50UXVldWVfLnJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocGF0aCwgZXZlbnRzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFudW1iZXJ9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5nZXROZXh0V3JpdGVJZF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dFdyaXRlSWRfKys7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfG51bGx9IG5ld1ByaW9yaXR5XHJcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbig/RXJyb3IsICo9KX0gb25Db21wbGV0ZVxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5zZXRXaXRoUHJpb3JpdHkgPSBmdW5jdGlvbiAocGF0aCwgbmV3VmFsLCBuZXdQcmlvcml0eSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdzZXQnLCB7XHJcbiAgICAgICAgICAgIHBhdGg6IHBhdGgudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbCxcclxuICAgICAgICAgICAgcHJpb3JpdHk6IG5ld1ByaW9yaXR5XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gVE9ETzogT3B0aW1pemUgdGhpcyBiZWhhdmlvciB0byBlaXRoZXIgKGEpIHN0b3JlIGZsYWcgdG8gc2tpcCByZXNvbHZpbmcgd2hlcmUgcG9zc2libGUgYW5kIC8gb3JcclxuICAgICAgICAvLyAoYikgc3RvcmUgdW5yZXNvbHZlZCBwYXRocyBvbiBKU09OIHBhcnNlXHJcbiAgICAgICAgdmFyIHNlcnZlclZhbHVlcyA9IHRoaXMuZ2VuZXJhdGVTZXJ2ZXJWYWx1ZXMoKTtcclxuICAgICAgICB2YXIgbmV3Tm9kZVVucmVzb2x2ZWQgPSBub2RlRnJvbUpTT04kMShuZXdWYWwsIG5ld1ByaW9yaXR5KTtcclxuICAgICAgICB2YXIgbmV3Tm9kZSA9IHJlc29sdmVEZWZlcnJlZFZhbHVlU25hcHNob3QobmV3Tm9kZVVucmVzb2x2ZWQsIHNlcnZlclZhbHVlcyk7XHJcbiAgICAgICAgdmFyIHdyaXRlSWQgPSB0aGlzLmdldE5leHRXcml0ZUlkXygpO1xyXG4gICAgICAgIHZhciBldmVudHMgPSB0aGlzLnNlcnZlclN5bmNUcmVlXy5hcHBseVVzZXJPdmVyd3JpdGUocGF0aCwgbmV3Tm9kZSwgd3JpdGVJZCwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5xdWV1ZUV2ZW50cyhldmVudHMpO1xyXG4gICAgICAgIHRoaXMuc2VydmVyXy5wdXQocGF0aC50b1N0cmluZygpLCBuZXdOb2RlVW5yZXNvbHZlZC52YWwoLypleHBvcnQ9Ki8gdHJ1ZSksIGZ1bmN0aW9uIChzdGF0dXMsIGVycm9yUmVhc29uKSB7XHJcbiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gc3RhdHVzID09PSAnb2snO1xyXG4gICAgICAgICAgICBpZiAoIXN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ3NldCBhdCAnICsgcGF0aCArICcgZmFpbGVkOiAnICsgc3RhdHVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY2xlYXJFdmVudHMgPSBfdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYWNrVXNlcldyaXRlKHdyaXRlSWQsICFzdWNjZXNzKTtcclxuICAgICAgICAgICAgX3RoaXMuZXZlbnRRdWV1ZV8ucmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChwYXRoLCBjbGVhckV2ZW50cyk7XHJcbiAgICAgICAgICAgIF90aGlzLmNhbGxPbkNvbXBsZXRlQ2FsbGJhY2sob25Db21wbGV0ZSwgc3RhdHVzLCBlcnJvclJlYXNvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGFmZmVjdGVkUGF0aCA9IHRoaXMuYWJvcnRUcmFuc2FjdGlvbnNfKHBhdGgpO1xyXG4gICAgICAgIHRoaXMucmVydW5UcmFuc2FjdGlvbnNfKGFmZmVjdGVkUGF0aCk7XHJcbiAgICAgICAgLy8gV2UgcXVldWVkIHRoZSBldmVudHMgYWJvdmUsIHNvIGp1c3QgZmx1c2ggdGhlIHF1ZXVlIGhlcmVcclxuICAgICAgICB0aGlzLmV2ZW50UXVldWVfLnJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgoYWZmZWN0ZWRQYXRoLCBbXSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IGNoaWxkcmVuVG9NZXJnZVxyXG4gICAgICogQHBhcmFtIHs/ZnVuY3Rpb24oP0Vycm9yLCAqPSl9IG9uQ29tcGxldGVcclxuICAgICAqL1xyXG4gICAgUmVwby5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHBhdGgsIGNoaWxkcmVuVG9NZXJnZSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5sb2dfKCd1cGRhdGUnLCB7IHBhdGg6IHBhdGgudG9TdHJpbmcoKSwgdmFsdWU6IGNoaWxkcmVuVG9NZXJnZSB9KTtcclxuICAgICAgICAvLyBTdGFydCB3aXRoIG91ciBleGlzdGluZyBkYXRhIGFuZCBtZXJnZSBlYWNoIGNoaWxkIGludG8gaXQuXHJcbiAgICAgICAgdmFyIGVtcHR5ID0gdHJ1ZTtcclxuICAgICAgICB2YXIgc2VydmVyVmFsdWVzID0gdGhpcy5nZW5lcmF0ZVNlcnZlclZhbHVlcygpO1xyXG4gICAgICAgIHZhciBjaGFuZ2VkQ2hpbGRyZW4gPSB7fTtcclxuICAgICAgICB1dGlsLmZvckVhY2goY2hpbGRyZW5Ub01lcmdlLCBmdW5jdGlvbiAoY2hhbmdlZEtleSwgY2hhbmdlZFZhbHVlKSB7XHJcbiAgICAgICAgICAgIGVtcHR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBuZXdOb2RlVW5yZXNvbHZlZCA9IG5vZGVGcm9tSlNPTiQxKGNoYW5nZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGNoYW5nZWRDaGlsZHJlbltjaGFuZ2VkS2V5XSA9IHJlc29sdmVEZWZlcnJlZFZhbHVlU25hcHNob3QobmV3Tm9kZVVucmVzb2x2ZWQsIHNlcnZlclZhbHVlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKCFlbXB0eSkge1xyXG4gICAgICAgICAgICB2YXIgd3JpdGVJZF8xID0gdGhpcy5nZXROZXh0V3JpdGVJZF8oKTtcclxuICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuc2VydmVyU3luY1RyZWVfLmFwcGx5VXNlck1lcmdlKHBhdGgsIGNoYW5nZWRDaGlsZHJlbiwgd3JpdGVJZF8xKTtcclxuICAgICAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5xdWV1ZUV2ZW50cyhldmVudHMpO1xyXG4gICAgICAgICAgICB0aGlzLnNlcnZlcl8ubWVyZ2UocGF0aC50b1N0cmluZygpLCBjaGlsZHJlblRvTWVyZ2UsIGZ1bmN0aW9uIChzdGF0dXMsIGVycm9yUmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3VjY2VzcyA9IHN0YXR1cyA9PT0gJ29rJztcclxuICAgICAgICAgICAgICAgIGlmICghc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ3VwZGF0ZSBhdCAnICsgcGF0aCArICcgZmFpbGVkOiAnICsgc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBjbGVhckV2ZW50cyA9IF90aGlzLnNlcnZlclN5bmNUcmVlXy5hY2tVc2VyV3JpdGUod3JpdGVJZF8xLCAhc3VjY2Vzcyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWZmZWN0ZWRQYXRoID0gY2xlYXJFdmVudHMubGVuZ3RoID4gMCA/IF90aGlzLnJlcnVuVHJhbnNhY3Rpb25zXyhwYXRoKSA6IHBhdGg7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5ldmVudFF1ZXVlXy5yYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoKGFmZmVjdGVkUGF0aCwgY2xlYXJFdmVudHMpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2FsbE9uQ29tcGxldGVDYWxsYmFjayhvbkNvbXBsZXRlLCBzdGF0dXMsIGVycm9yUmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHV0aWwuZm9yRWFjaChjaGlsZHJlblRvTWVyZ2UsIGZ1bmN0aW9uIChjaGFuZ2VkUGF0aCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFmZmVjdGVkUGF0aCA9IF90aGlzLmFib3J0VHJhbnNhY3Rpb25zXyhwYXRoLmNoaWxkKGNoYW5nZWRQYXRoKSk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXJ1blRyYW5zYWN0aW9uc18oYWZmZWN0ZWRQYXRoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIFdlIHF1ZXVlZCB0aGUgZXZlbnRzIGFib3ZlLCBzbyBqdXN0IGZsdXNoIHRoZSBxdWV1ZSBoZXJlXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRRdWV1ZV8ucmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChwYXRoLCBbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsb2coXCJ1cGRhdGUoKSBjYWxsZWQgd2l0aCBlbXB0eSBkYXRhLiAgRG9uJ3QgZG8gYW55dGhpbmcuXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxPbkNvbXBsZXRlQ2FsbGJhY2sob25Db21wbGV0ZSwgJ29rJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXBwbGllcyBhbGwgb2YgdGhlIGNoYW5nZXMgc3RvcmVkIHVwIGluIHRoZSBvbkRpc2Nvbm5lY3RfIHRyZWUuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5ydW5PbkRpc2Nvbm5lY3RFdmVudHNfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdvbkRpc2Nvbm5lY3RFdmVudHMnKTtcclxuICAgICAgICB2YXIgc2VydmVyVmFsdWVzID0gdGhpcy5nZW5lcmF0ZVNlcnZlclZhbHVlcygpO1xyXG4gICAgICAgIHZhciByZXNvbHZlZE9uRGlzY29ubmVjdFRyZWUgPSByZXNvbHZlRGVmZXJyZWRWYWx1ZVRyZWUodGhpcy5vbkRpc2Nvbm5lY3RfLCBzZXJ2ZXJWYWx1ZXMpO1xyXG4gICAgICAgIHZhciBldmVudHMgPSBbXTtcclxuICAgICAgICByZXNvbHZlZE9uRGlzY29ubmVjdFRyZWUuZm9yRWFjaFRyZWUoUGF0aC5FbXB0eSwgZnVuY3Rpb24gKHBhdGgsIHNuYXApIHtcclxuICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdChfdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYXBwbHlTZXJ2ZXJPdmVyd3JpdGUocGF0aCwgc25hcCkpO1xyXG4gICAgICAgICAgICB2YXIgYWZmZWN0ZWRQYXRoID0gX3RoaXMuYWJvcnRUcmFuc2FjdGlvbnNfKHBhdGgpO1xyXG4gICAgICAgICAgICBfdGhpcy5yZXJ1blRyYW5zYWN0aW9uc18oYWZmZWN0ZWRQYXRoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8gPSBuZXcgU3BhcnNlU25hcHNob3RUcmVlKCk7XHJcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5yYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoKFBhdGguRW1wdHksIGV2ZW50cyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbig/RXJyb3IsICo9KX0gb25Db21wbGV0ZVxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5vbkRpc2Nvbm5lY3RDYW5jZWwgPSBmdW5jdGlvbiAocGF0aCwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5zZXJ2ZXJfLm9uRGlzY29ubmVjdENhbmNlbChwYXRoLnRvU3RyaW5nKCksIGZ1bmN0aW9uIChzdGF0dXMsIGVycm9yUmVhc29uKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdvaycpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9uRGlzY29ubmVjdF8uZm9yZ2V0KHBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLmNhbGxPbkNvbXBsZXRlQ2FsbGJhY2sob25Db21wbGV0ZSwgc3RhdHVzLCBlcnJvclJlYXNvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXHJcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbig/RXJyb3IsICo9KX0gb25Db21wbGV0ZVxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5vbkRpc2Nvbm5lY3RTZXQgPSBmdW5jdGlvbiAocGF0aCwgdmFsdWUsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBuZXdOb2RlID0gbm9kZUZyb21KU09OJDEodmFsdWUpO1xyXG4gICAgICAgIHRoaXMuc2VydmVyXy5vbkRpc2Nvbm5lY3RQdXQocGF0aC50b1N0cmluZygpLCBuZXdOb2RlLnZhbCgvKmV4cG9ydD0qLyB0cnVlKSwgZnVuY3Rpb24gKHN0YXR1cywgZXJyb3JSZWFzb24pIHtcclxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub25EaXNjb25uZWN0Xy5yZW1lbWJlcihwYXRoLCBuZXdOb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5jYWxsT25Db21wbGV0ZUNhbGxiYWNrKG9uQ29tcGxldGUsIHN0YXR1cywgZXJyb3JSZWFzb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHsqfSBwcmlvcml0eVxyXG4gICAgICogQHBhcmFtIHs/ZnVuY3Rpb24oP0Vycm9yLCAqPSl9IG9uQ29tcGxldGVcclxuICAgICAqL1xyXG4gICAgUmVwby5wcm90b3R5cGUub25EaXNjb25uZWN0U2V0V2l0aFByaW9yaXR5ID0gZnVuY3Rpb24gKHBhdGgsIHZhbHVlLCBwcmlvcml0eSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG5ld05vZGUgPSBub2RlRnJvbUpTT04kMSh2YWx1ZSwgcHJpb3JpdHkpO1xyXG4gICAgICAgIHRoaXMuc2VydmVyXy5vbkRpc2Nvbm5lY3RQdXQocGF0aC50b1N0cmluZygpLCBuZXdOb2RlLnZhbCgvKmV4cG9ydD0qLyB0cnVlKSwgZnVuY3Rpb24gKHN0YXR1cywgZXJyb3JSZWFzb24pIHtcclxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub25EaXNjb25uZWN0Xy5yZW1lbWJlcihwYXRoLCBuZXdOb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5jYWxsT25Db21wbGV0ZUNhbGxiYWNrKG9uQ29tcGxldGUsIHN0YXR1cywgZXJyb3JSZWFzb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHsqfSBjaGlsZHJlblRvTWVyZ2VcclxuICAgICAqIEBwYXJhbSB7P2Z1bmN0aW9uKD9FcnJvciwgKj0pfSBvbkNvbXBsZXRlXHJcbiAgICAgKi9cclxuICAgIFJlcG8ucHJvdG90eXBlLm9uRGlzY29ubmVjdFVwZGF0ZSA9IGZ1bmN0aW9uIChwYXRoLCBjaGlsZHJlblRvTWVyZ2UsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh1dGlsLmlzRW1wdHkoY2hpbGRyZW5Ub01lcmdlKSkge1xyXG4gICAgICAgICAgICBsb2coXCJvbkRpc2Nvbm5lY3QoKS51cGRhdGUoKSBjYWxsZWQgd2l0aCBlbXB0eSBkYXRhLiAgRG9uJ3QgZG8gYW55dGhpbmcuXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxPbkNvbXBsZXRlQ2FsbGJhY2sob25Db21wbGV0ZSwgJ29rJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXJ2ZXJfLm9uRGlzY29ubmVjdE1lcmdlKHBhdGgudG9TdHJpbmcoKSwgY2hpbGRyZW5Ub01lcmdlLCBmdW5jdGlvbiAoc3RhdHVzLCBlcnJvclJlYXNvbikge1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnb2snKSB7XHJcbiAgICAgICAgICAgICAgICB1dGlsLmZvckVhY2goY2hpbGRyZW5Ub01lcmdlLCBmdW5jdGlvbiAoY2hpbGROYW1lLCBjaGlsZE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2hpbGROb2RlID0gbm9kZUZyb21KU09OJDEoY2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbkRpc2Nvbm5lY3RfLnJlbWVtYmVyKHBhdGguY2hpbGQoY2hpbGROYW1lKSwgbmV3Q2hpbGROb2RlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLmNhbGxPbkNvbXBsZXRlQ2FsbGJhY2sob25Db21wbGV0ZSwgc3RhdHVzLCBlcnJvclJlYXNvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlcclxuICAgICAqIEBwYXJhbSB7IUV2ZW50UmVnaXN0cmF0aW9ufSBldmVudFJlZ2lzdHJhdGlvblxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5hZGRFdmVudENhbGxiYWNrRm9yUXVlcnkgPSBmdW5jdGlvbiAocXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50cztcclxuICAgICAgICBpZiAocXVlcnkucGF0aC5nZXRGcm9udCgpID09PSAnLmluZm8nKSB7XHJcbiAgICAgICAgICAgIGV2ZW50cyA9IHRoaXMuaW5mb1N5bmNUcmVlXy5hZGRFdmVudFJlZ2lzdHJhdGlvbihxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZXZlbnRzID0gdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYWRkRXZlbnRSZWdpc3RyYXRpb24ocXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5yYWlzZUV2ZW50c0F0UGF0aChxdWVyeS5wYXRoLCBldmVudHMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUXVlcnl9IHF1ZXJ5XHJcbiAgICAgKiBAcGFyYW0gez9FdmVudFJlZ2lzdHJhdGlvbn0gZXZlbnRSZWdpc3RyYXRpb25cclxuICAgICAqL1xyXG4gICAgUmVwby5wcm90b3R5cGUucmVtb3ZlRXZlbnRDYWxsYmFja0ZvclF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbikge1xyXG4gICAgICAgIC8vIFRoZXNlIGFyZSBndWFyYW50ZWVkIG5vdCB0byByYWlzZSBldmVudHMsIHNpbmNlIHdlJ3JlIG5vdCBwYXNzaW5nIGluIGEgY2FuY2VsRXJyb3IuIEhvd2V2ZXIsIHdlIGNhbiBmdXR1cmUtcHJvb2ZcclxuICAgICAgICAvLyBhIGxpdHRsZSBiaXQgYnkgaGFuZGxpbmcgdGhlIHJldHVybiB2YWx1ZXMgYW55d2F5cy5cclxuICAgICAgICB2YXIgZXZlbnRzO1xyXG4gICAgICAgIGlmIChxdWVyeS5wYXRoLmdldEZyb250KCkgPT09ICcuaW5mbycpIHtcclxuICAgICAgICAgICAgZXZlbnRzID0gdGhpcy5pbmZvU3luY1RyZWVfLnJlbW92ZUV2ZW50UmVnaXN0cmF0aW9uKHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBldmVudHMgPSB0aGlzLnNlcnZlclN5bmNUcmVlXy5yZW1vdmVFdmVudFJlZ2lzdHJhdGlvbihxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmV2ZW50UXVldWVfLnJhaXNlRXZlbnRzQXRQYXRoKHF1ZXJ5LnBhdGgsIGV2ZW50cyk7XHJcbiAgICB9O1xyXG4gICAgUmVwby5wcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBlcnNpc3RlbnRDb25uZWN0aW9uXykge1xyXG4gICAgICAgICAgICB0aGlzLnBlcnNpc3RlbnRDb25uZWN0aW9uXy5pbnRlcnJ1cHQoSU5URVJSVVBUX1JFQVNPTik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5wZXJzaXN0ZW50Q29ubmVjdGlvbl8pIHtcclxuICAgICAgICAgICAgdGhpcy5wZXJzaXN0ZW50Q29ubmVjdGlvbl8ucmVzdW1lKElOVEVSUlVQVF9SRUFTT04pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZXBvLnByb3RvdHlwZS5zdGF0cyA9IGZ1bmN0aW9uIChzaG93RGVsdGEpIHtcclxuICAgICAgICBpZiAoc2hvd0RlbHRhID09PSB2b2lkIDApIHsgc2hvd0RlbHRhID0gZmFsc2U7IH1cclxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIHN0YXRzO1xyXG4gICAgICAgIGlmIChzaG93RGVsdGEpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRzTGlzdGVuZXJfKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c0xpc3RlbmVyXyA9IG5ldyBTdGF0c0xpc3RlbmVyKHRoaXMuc3RhdHNfKTtcclxuICAgICAgICAgICAgc3RhdHMgPSB0aGlzLnN0YXRzTGlzdGVuZXJfLmdldCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3RhdHMgPSB0aGlzLnN0YXRzXy5nZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGxvbmdlc3ROYW1lID0gT2JqZWN0LmtleXMoc3RhdHMpLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChjdXJyZW50VmFsdWUubGVuZ3RoLCBwcmV2aW91c1ZhbHVlKTtcclxuICAgICAgICB9LCAwKTtcclxuICAgICAgICB1dGlsLmZvckVhY2goc3RhdHMsIGZ1bmN0aW9uIChzdGF0LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAvLyBwYWQgc3RhdCBuYW1lcyB0byBiZSB0aGUgc2FtZSBsZW5ndGggKHBsdXMgMiBleHRyYSBzcGFjZXMpLlxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhdC5sZW5ndGg7IGkgPCBsb25nZXN0TmFtZSArIDI7IGkrKylcclxuICAgICAgICAgICAgICAgIHN0YXQgKz0gJyAnO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0ICsgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLnN0YXRzSW5jcmVtZW50Q291bnRlciA9IGZ1bmN0aW9uIChtZXRyaWMpIHtcclxuICAgICAgICB0aGlzLnN0YXRzXy5pbmNyZW1lbnRDb3VudGVyKG1ldHJpYyk7XHJcbiAgICAgICAgdGhpcy5zdGF0c1JlcG9ydGVyXy5pbmNsdWRlU3RhdChtZXRyaWMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHsuLi4qfSB2YXJfYXJnc1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUmVwby5wcm90b3R5cGUubG9nXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmFyX2FyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXJfYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcHJlZml4ID0gJyc7XHJcbiAgICAgICAgaWYgKHRoaXMucGVyc2lzdGVudENvbm5lY3Rpb25fKSB7XHJcbiAgICAgICAgICAgIHByZWZpeCA9IHRoaXMucGVyc2lzdGVudENvbm5lY3Rpb25fLmlkICsgJzonO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2cuYXBwbHkodm9pZCAwLCBbcHJlZml4XS5jb25jYXQodmFyX2FyZ3MpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7P2Z1bmN0aW9uKD9FcnJvciwgKj0pfSBjYWxsYmFja1xyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBzdGF0dXNcclxuICAgICAqIEBwYXJhbSB7P3N0cmluZz19IGVycm9yUmVhc29uXHJcbiAgICAgKi9cclxuICAgIFJlcG8ucHJvdG90eXBlLmNhbGxPbkNvbXBsZXRlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHN0YXR1cywgZXJyb3JSZWFzb24pIHtcclxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgZXhjZXB0aW9uR3VhcmQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAnb2snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29kZSA9IChzdGF0dXMgfHwgJ2Vycm9yJykudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yUmVhc29uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9ICc6ICcgKyBlcnJvclJlYXNvbjtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlcG8ucHJvdG90eXBlLCBcImRhdGFiYXNlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhYmFzZSB8fCAodGhpcy5fX2RhdGFiYXNlID0gbmV3IERhdGFiYXNlKHRoaXMpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBSZXBvO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEZpbHRlcnMgbm9kZXMgYnkgcmFuZ2UgYW5kIHVzZXMgYW4gSW5kZXhGaWx0ZXIgdG8gdHJhY2sgYW55IGNoYW5nZXMgYWZ0ZXIgZmlsdGVyaW5nIHRoZSBub2RlXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAaW1wbGVtZW50cyB7Tm9kZUZpbHRlcn1cclxuICovXHJcbnZhciBSYW5nZWRGaWx0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5UGFyYW1zfSBwYXJhbXNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmFuZ2VkRmlsdGVyKHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMuaW5kZXhlZEZpbHRlcl8gPSBuZXcgSW5kZXhlZEZpbHRlcihwYXJhbXMuZ2V0SW5kZXgoKSk7XHJcbiAgICAgICAgdGhpcy5pbmRleF8gPSBwYXJhbXMuZ2V0SW5kZXgoKTtcclxuICAgICAgICB0aGlzLnN0YXJ0UG9zdF8gPSBSYW5nZWRGaWx0ZXIuZ2V0U3RhcnRQb3N0XyhwYXJhbXMpO1xyXG4gICAgICAgIHRoaXMuZW5kUG9zdF8gPSBSYW5nZWRGaWx0ZXIuZ2V0RW5kUG9zdF8ocGFyYW1zKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IU5hbWVkTm9kZX1cclxuICAgICAqL1xyXG4gICAgUmFuZ2VkRmlsdGVyLnByb3RvdHlwZS5nZXRTdGFydFBvc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRQb3N0XztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFOYW1lZE5vZGV9XHJcbiAgICAgKi9cclxuICAgIFJhbmdlZEZpbHRlci5wcm90b3R5cGUuZ2V0RW5kUG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbmRQb3N0XztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU5hbWVkTm9kZX0gbm9kZVxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgUmFuZ2VkRmlsdGVyLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuaW5kZXhfLmNvbXBhcmUodGhpcy5nZXRTdGFydFBvc3QoKSwgbm9kZSkgPD0gMCAmJlxyXG4gICAgICAgICAgICB0aGlzLmluZGV4Xy5jb21wYXJlKG5vZGUsIHRoaXMuZ2V0RW5kUG9zdCgpKSA8PSAwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFJhbmdlZEZpbHRlci5wcm90b3R5cGUudXBkYXRlQ2hpbGQgPSBmdW5jdGlvbiAoc25hcCwga2V5LCBuZXdDaGlsZCwgYWZmZWN0ZWRQYXRoLCBzb3VyY2UsIG9wdENoYW5nZUFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1hdGNoZXMobmV3IE5hbWVkTm9kZShrZXksIG5ld0NoaWxkKSkpIHtcclxuICAgICAgICAgICAgbmV3Q2hpbGQgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhlZEZpbHRlcl8udXBkYXRlQ2hpbGQoc25hcCwga2V5LCBuZXdDaGlsZCwgYWZmZWN0ZWRQYXRoLCBzb3VyY2UsIG9wdENoYW5nZUFjY3VtdWxhdG9yKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFJhbmdlZEZpbHRlci5wcm90b3R5cGUudXBkYXRlRnVsbE5vZGUgPSBmdW5jdGlvbiAob2xkU25hcCwgbmV3U25hcCwgb3B0Q2hhbmdlQWNjdW11bGF0b3IpIHtcclxuICAgICAgICBpZiAobmV3U25hcC5pc0xlYWZOb2RlKCkpIHtcclxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBjaGlsZHJlbiBub2RlIHdpdGggdGhlIGNvcnJlY3QgaW5kZXgsIG5vdCBhIGxlYWYgbm9kZTtcclxuICAgICAgICAgICAgbmV3U25hcCA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZmlsdGVyZWQgPSBuZXdTbmFwLndpdGhJbmRleCh0aGlzLmluZGV4Xyk7XHJcbiAgICAgICAgLy8gRG9uJ3Qgc3VwcG9ydCBwcmlvcml0aWVzIG9uIHF1ZXJpZXNcclxuICAgICAgICBmaWx0ZXJlZCA9IGZpbHRlcmVkLnVwZGF0ZVByaW9yaXR5KENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFKTtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgbmV3U25hcC5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIGZ1bmN0aW9uIChrZXksIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICBpZiAoIXNlbGYubWF0Y2hlcyhuZXcgTmFtZWROb2RlKGtleSwgY2hpbGROb2RlKSkpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlcmVkID0gZmlsdGVyZWQudXBkYXRlSW1tZWRpYXRlQ2hpbGQoa2V5LCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleGVkRmlsdGVyXy51cGRhdGVGdWxsTm9kZShvbGRTbmFwLCBmaWx0ZXJlZCwgb3B0Q2hhbmdlQWNjdW11bGF0b3IpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUmFuZ2VkRmlsdGVyLnByb3RvdHlwZS51cGRhdGVQcmlvcml0eSA9IGZ1bmN0aW9uIChvbGRTbmFwLCBuZXdQcmlvcml0eSkge1xyXG4gICAgICAgIC8vIERvbid0IHN1cHBvcnQgcHJpb3JpdGllcyBvbiBxdWVyaWVzXHJcbiAgICAgICAgcmV0dXJuIG9sZFNuYXA7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBSYW5nZWRGaWx0ZXIucHJvdG90eXBlLmZpbHRlcnNOb2RlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFJhbmdlZEZpbHRlci5wcm90b3R5cGUuZ2V0SW5kZXhlZEZpbHRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleGVkRmlsdGVyXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFJhbmdlZEZpbHRlci5wcm90b3R5cGUuZ2V0SW5kZXggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUXVlcnlQYXJhbXN9IHBhcmFtc1xyXG4gICAgICogQHJldHVybiB7IU5hbWVkTm9kZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFJhbmdlZEZpbHRlci5nZXRTdGFydFBvc3RfID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICAgIGlmIChwYXJhbXMuaGFzU3RhcnQoKSkge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnROYW1lID0gcGFyYW1zLmdldEluZGV4U3RhcnROYW1lKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXMuZ2V0SW5kZXgoKS5tYWtlUG9zdChwYXJhbXMuZ2V0SW5kZXhTdGFydFZhbHVlKCksIHN0YXJ0TmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLmdldEluZGV4KCkubWluUG9zdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5UGFyYW1zfSBwYXJhbXNcclxuICAgICAqIEByZXR1cm4geyFOYW1lZE5vZGV9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBSYW5nZWRGaWx0ZXIuZ2V0RW5kUG9zdF8gPSBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgICAgaWYgKHBhcmFtcy5oYXNFbmQoKSkge1xyXG4gICAgICAgICAgICB2YXIgZW5kTmFtZSA9IHBhcmFtcy5nZXRJbmRleEVuZE5hbWUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcy5nZXRJbmRleCgpLm1ha2VQb3N0KHBhcmFtcy5nZXRJbmRleEVuZFZhbHVlKCksIGVuZE5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcy5nZXRJbmRleCgpLm1heFBvc3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJhbmdlZEZpbHRlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBcHBsaWVzIGEgbGltaXQgYW5kIGEgcmFuZ2UgdG8gYSBub2RlIGFuZCB1c2VzIFJhbmdlZEZpbHRlciB0byBkbyB0aGUgaGVhdnkgbGlmdGluZyB3aGVyZSBwb3NzaWJsZVxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGltcGxlbWVudHMge05vZGVGaWx0ZXJ9XHJcbiAqL1xyXG52YXIgTGltaXRlZEZpbHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUXVlcnlQYXJhbXN9IHBhcmFtc1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBMaW1pdGVkRmlsdGVyKHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMucmFuZ2VkRmlsdGVyXyA9IG5ldyBSYW5nZWRGaWx0ZXIocGFyYW1zKTtcclxuICAgICAgICB0aGlzLmluZGV4XyA9IHBhcmFtcy5nZXRJbmRleCgpO1xyXG4gICAgICAgIHRoaXMubGltaXRfID0gcGFyYW1zLmdldExpbWl0KCk7XHJcbiAgICAgICAgdGhpcy5yZXZlcnNlXyA9ICFwYXJhbXMuaXNWaWV3RnJvbUxlZnQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTGltaXRlZEZpbHRlci5wcm90b3R5cGUudXBkYXRlQ2hpbGQgPSBmdW5jdGlvbiAoc25hcCwga2V5LCBuZXdDaGlsZCwgYWZmZWN0ZWRQYXRoLCBzb3VyY2UsIG9wdENoYW5nZUFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJhbmdlZEZpbHRlcl8ubWF0Y2hlcyhuZXcgTmFtZWROb2RlKGtleSwgbmV3Q2hpbGQpKSkge1xyXG4gICAgICAgICAgICBuZXdDaGlsZCA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc25hcC5nZXRJbW1lZGlhdGVDaGlsZChrZXkpLmVxdWFscyhuZXdDaGlsZCkpIHtcclxuICAgICAgICAgICAgLy8gTm8gY2hhbmdlXHJcbiAgICAgICAgICAgIHJldHVybiBzbmFwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzbmFwLm51bUNoaWxkcmVuKCkgPCB0aGlzLmxpbWl0Xykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yYW5nZWRGaWx0ZXJfXHJcbiAgICAgICAgICAgICAgICAuZ2V0SW5kZXhlZEZpbHRlcigpXHJcbiAgICAgICAgICAgICAgICAudXBkYXRlQ2hpbGQoc25hcCwga2V5LCBuZXdDaGlsZCwgYWZmZWN0ZWRQYXRoLCBzb3VyY2UsIG9wdENoYW5nZUFjY3VtdWxhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZ1bGxMaW1pdFVwZGF0ZUNoaWxkXyhzbmFwLCBrZXksIG5ld0NoaWxkLCBzb3VyY2UsIG9wdENoYW5nZUFjY3VtdWxhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBMaW1pdGVkRmlsdGVyLnByb3RvdHlwZS51cGRhdGVGdWxsTm9kZSA9IGZ1bmN0aW9uIChvbGRTbmFwLCBuZXdTbmFwLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcikge1xyXG4gICAgICAgIHZhciBmaWx0ZXJlZDtcclxuICAgICAgICBpZiAobmV3U25hcC5pc0xlYWZOb2RlKCkgfHwgbmV3U25hcC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBjaGlsZHJlbiBub2RlIHdpdGggdGhlIGNvcnJlY3QgaW5kZXgsIG5vdCBhIGxlYWYgbm9kZTtcclxuICAgICAgICAgICAgZmlsdGVyZWQgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERS53aXRoSW5kZXgodGhpcy5pbmRleF8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGltaXRfICogMiA8IG5ld1NuYXAubnVtQ2hpbGRyZW4oKSAmJlxyXG4gICAgICAgICAgICAgICAgbmV3U25hcC5pc0luZGV4ZWQodGhpcy5pbmRleF8pKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBFYXNpZXIgdG8gYnVpbGQgdXAgYSBzbmFwc2hvdCwgc2luY2Ugd2hhdCB3ZSdyZSBnaXZlbiBoYXMgbW9yZSB0aGFuIHR3aWNlIHRoZSBlbGVtZW50cyB3ZSB3YW50XHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZCA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFLndpdGhJbmRleCh0aGlzLmluZGV4Xyk7XHJcbiAgICAgICAgICAgICAgICAvLyBhbmNob3IgdG8gdGhlIHN0YXJ0UG9zdCwgZW5kUG9zdCwgb3IgbGFzdCBlbGVtZW50IGFzIGFwcHJvcHJpYXRlXHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXZlcnNlXykge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yID0gbmV3U25hcC5nZXRSZXZlcnNlSXRlcmF0b3JGcm9tKHRoaXMucmFuZ2VkRmlsdGVyXy5nZXRFbmRQb3N0KCksIHRoaXMuaW5kZXhfKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yID0gbmV3U25hcC5nZXRJdGVyYXRvckZyb20odGhpcy5yYW5nZWRGaWx0ZXJfLmdldFN0YXJ0UG9zdCgpLCB0aGlzLmluZGV4Xyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGl0ZXJhdG9yLmhhc05leHQoKSAmJiBjb3VudCA8IHRoaXMubGltaXRfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBpdGVyYXRvci5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluUmFuZ2UgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmV2ZXJzZV8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5SYW5nZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4Xy5jb21wYXJlKHRoaXMucmFuZ2VkRmlsdGVyXy5nZXRTdGFydFBvc3QoKSwgbmV4dCkgPD0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluUmFuZ2UgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleF8uY29tcGFyZShuZXh0LCB0aGlzLnJhbmdlZEZpbHRlcl8uZ2V0RW5kUG9zdCgpKSA8PSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5SYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZCA9IGZpbHRlcmVkLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKG5leHQubmFtZSwgbmV4dC5ub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgcmVhY2hlZCB0aGUgZW5kIHBvc3QsIHdlIGNhbm5vdCBrZWVwIGFkZGluZyBlbGVtbWVudHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlIHNuYXAgY29udGFpbnMgbGVzcyB0aGFuIHR3aWNlIHRoZSBsaW1pdC4gRmFzdGVyIHRvIGRlbGV0ZSBmcm9tIHRoZSBzbmFwIHRoYW4gYnVpbGQgdXAgYSBuZXcgb25lXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZCA9IG5ld1NuYXAud2l0aEluZGV4KHRoaXMuaW5kZXhfKTtcclxuICAgICAgICAgICAgICAgIC8vIERvbid0IHN1cHBvcnQgcHJpb3JpdGllcyBvbiBxdWVyaWVzXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZCA9IGZpbHRlcmVkLnVwZGF0ZVByaW9yaXR5KENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFKTtcclxuICAgICAgICAgICAgICAgIHZhciBzdGFydFBvc3QgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW5kUG9zdCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIHZhciBjbXAgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXZlcnNlXykge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yID0gZmlsdGVyZWQuZ2V0UmV2ZXJzZUl0ZXJhdG9yKHRoaXMuaW5kZXhfKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFBvc3QgPSB0aGlzLnJhbmdlZEZpbHRlcl8uZ2V0RW5kUG9zdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZFBvc3QgPSB0aGlzLnJhbmdlZEZpbHRlcl8uZ2V0U3RhcnRQb3N0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4Q29tcGFyZV8xID0gdGhpcy5pbmRleF8uZ2V0Q29tcGFyZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNtcCA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBpbmRleENvbXBhcmVfMShiLCBhKTsgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yID0gZmlsdGVyZWQuZ2V0SXRlcmF0b3IodGhpcy5pbmRleF8pO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zdCA9IHRoaXMucmFuZ2VkRmlsdGVyXy5nZXRTdGFydFBvc3QoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbmRQb3N0ID0gdGhpcy5yYW5nZWRGaWx0ZXJfLmdldEVuZFBvc3QoKTtcclxuICAgICAgICAgICAgICAgICAgICBjbXAgPSB0aGlzLmluZGV4Xy5nZXRDb21wYXJlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kU3RhcnRQb3N0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaXRlcmF0b3IuaGFzTmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBpdGVyYXRvci5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3VuZFN0YXJ0UG9zdCAmJiBjbXAoc3RhcnRQb3N0LCBuZXh0KSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGFkZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZFN0YXJ0UG9zdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpblJhbmdlID0gZm91bmRTdGFydFBvc3QgJiYgY291bnQgPCB0aGlzLmxpbWl0XyAmJiBjbXAobmV4dCwgZW5kUG9zdCkgPD0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5SYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBmaWx0ZXJlZC51cGRhdGVJbW1lZGlhdGVDaGlsZChuZXh0Lm5hbWUsIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VkRmlsdGVyX1xyXG4gICAgICAgICAgICAuZ2V0SW5kZXhlZEZpbHRlcigpXHJcbiAgICAgICAgICAgIC51cGRhdGVGdWxsTm9kZShvbGRTbmFwLCBmaWx0ZXJlZCwgb3B0Q2hhbmdlQWNjdW11bGF0b3IpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTGltaXRlZEZpbHRlci5wcm90b3R5cGUudXBkYXRlUHJpb3JpdHkgPSBmdW5jdGlvbiAob2xkU25hcCwgbmV3UHJpb3JpdHkpIHtcclxuICAgICAgICAvLyBEb24ndCBzdXBwb3J0IHByaW9yaXRpZXMgb24gcXVlcmllc1xyXG4gICAgICAgIHJldHVybiBvbGRTbmFwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTGltaXRlZEZpbHRlci5wcm90b3R5cGUuZmlsdGVyc05vZGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTGltaXRlZEZpbHRlci5wcm90b3R5cGUuZ2V0SW5kZXhlZEZpbHRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZWRGaWx0ZXJfLmdldEluZGV4ZWRGaWx0ZXIoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIExpbWl0ZWRGaWx0ZXIucHJvdG90eXBlLmdldEluZGV4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4XztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IHNuYXBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjaGlsZEtleVxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gY2hpbGRTbmFwXHJcbiAgICAgKiBAcGFyYW0geyFDb21wbGV0ZUNoaWxkU291cmNlfSBzb3VyY2VcclxuICAgICAqIEBwYXJhbSB7P0NoaWxkQ2hhbmdlQWNjdW11bGF0b3J9IGNoYW5nZUFjY3VtdWxhdG9yXHJcbiAgICAgKiBAcmV0dXJuIHshTm9kZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIExpbWl0ZWRGaWx0ZXIucHJvdG90eXBlLmZ1bGxMaW1pdFVwZGF0ZUNoaWxkXyA9IGZ1bmN0aW9uIChzbmFwLCBjaGlsZEtleSwgY2hpbGRTbmFwLCBzb3VyY2UsIGNoYW5nZUFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgLy8gVE9ETzogcmVuYW1lIGFsbCBjYWNoZSBzdHVmZiBldGMgdG8gZ2VuZXJhbCBzbmFwIHRlcm1pbm9sb2d5XHJcbiAgICAgICAgdmFyIGNtcDtcclxuICAgICAgICBpZiAodGhpcy5yZXZlcnNlXykge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXhDbXBfMSA9IHRoaXMuaW5kZXhfLmdldENvbXBhcmUoKTtcclxuICAgICAgICAgICAgY21wID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGluZGV4Q21wXzEoYiwgYSk7IH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjbXAgPSB0aGlzLmluZGV4Xy5nZXRDb21wYXJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvbGRFdmVudENhY2hlID0gc25hcDtcclxuICAgICAgICB1dGlsLmFzc2VydChvbGRFdmVudENhY2hlLm51bUNoaWxkcmVuKCkgPT0gdGhpcy5saW1pdF8sICcnKTtcclxuICAgICAgICB2YXIgbmV3Q2hpbGROYW1lZE5vZGUgPSBuZXcgTmFtZWROb2RlKGNoaWxkS2V5LCBjaGlsZFNuYXApO1xyXG4gICAgICAgIHZhciB3aW5kb3dCb3VuZGFyeSA9IHRoaXMucmV2ZXJzZV9cclxuICAgICAgICAgICAgPyBvbGRFdmVudENhY2hlLmdldEZpcnN0Q2hpbGQodGhpcy5pbmRleF8pXHJcbiAgICAgICAgICAgIDogb2xkRXZlbnRDYWNoZS5nZXRMYXN0Q2hpbGQodGhpcy5pbmRleF8pO1xyXG4gICAgICAgIHZhciBpblJhbmdlID0gdGhpcy5yYW5nZWRGaWx0ZXJfLm1hdGNoZXMobmV3Q2hpbGROYW1lZE5vZGUpO1xyXG4gICAgICAgIGlmIChvbGRFdmVudENhY2hlLmhhc0NoaWxkKGNoaWxkS2V5KSkge1xyXG4gICAgICAgICAgICB2YXIgb2xkQ2hpbGRTbmFwID0gb2xkRXZlbnRDYWNoZS5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZEtleSk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0Q2hpbGQgPSBzb3VyY2UuZ2V0Q2hpbGRBZnRlckNoaWxkKHRoaXMuaW5kZXhfLCB3aW5kb3dCb3VuZGFyeSwgdGhpcy5yZXZlcnNlXyk7XHJcbiAgICAgICAgICAgIHdoaWxlIChuZXh0Q2hpbGQgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgKG5leHRDaGlsZC5uYW1lID09IGNoaWxkS2V5IHx8IG9sZEV2ZW50Q2FjaGUuaGFzQ2hpbGQobmV4dENoaWxkLm5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgYSB3ZWlyZCBlZGdlIGNhc2Ugd2hlcmUgYSBub2RlIGlzIHVwZGF0ZWQgYXMgcGFydCBvZiBhIG1lcmdlIGluIHRoZSB3cml0ZSB0cmVlLCBidXQgaGFzbid0XHJcbiAgICAgICAgICAgICAgICAvLyBiZWVuIGFwcGxpZWQgdG8gdGhlIGxpbWl0ZWQgZmlsdGVyIHlldC4gSWdub3JlIHRoaXMgbmV4dCBjaGlsZCB3aGljaCB3aWxsIGJlIHVwZGF0ZWQgbGF0ZXIgaW5cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBsaW1pdGVkIGZpbHRlci4uLlxyXG4gICAgICAgICAgICAgICAgbmV4dENoaWxkID0gc291cmNlLmdldENoaWxkQWZ0ZXJDaGlsZCh0aGlzLmluZGV4XywgbmV4dENoaWxkLCB0aGlzLnJldmVyc2VfKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY29tcGFyZU5leHQgPSBuZXh0Q2hpbGQgPT0gbnVsbCA/IDEgOiBjbXAobmV4dENoaWxkLCBuZXdDaGlsZE5hbWVkTm9kZSk7XHJcbiAgICAgICAgICAgIHZhciByZW1haW5zSW5XaW5kb3cgPSBpblJhbmdlICYmICFjaGlsZFNuYXAuaXNFbXB0eSgpICYmIGNvbXBhcmVOZXh0ID49IDA7XHJcbiAgICAgICAgICAgIGlmIChyZW1haW5zSW5XaW5kb3cpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VBY2N1bXVsYXRvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShDaGFuZ2UuY2hpbGRDaGFuZ2VkQ2hhbmdlKGNoaWxkS2V5LCBjaGlsZFNuYXAsIG9sZENoaWxkU25hcCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9sZEV2ZW50Q2FjaGUudXBkYXRlSW1tZWRpYXRlQ2hpbGQoY2hpbGRLZXksIGNoaWxkU25hcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlQWNjdW11bGF0b3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZUFjY3VtdWxhdG9yLnRyYWNrQ2hpbGRDaGFuZ2UoQ2hhbmdlLmNoaWxkUmVtb3ZlZENoYW5nZShjaGlsZEtleSwgb2xkQ2hpbGRTbmFwKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3RXZlbnRDYWNoZSA9IG9sZEV2ZW50Q2FjaGUudXBkYXRlSW1tZWRpYXRlQ2hpbGQoY2hpbGRLZXksIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXh0Q2hpbGRJblJhbmdlID0gbmV4dENoaWxkICE9IG51bGwgJiYgdGhpcy5yYW5nZWRGaWx0ZXJfLm1hdGNoZXMobmV4dENoaWxkKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0Q2hpbGRJblJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZUFjY3VtdWxhdG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShDaGFuZ2UuY2hpbGRBZGRlZENoYW5nZShuZXh0Q2hpbGQubmFtZSwgbmV4dENoaWxkLm5vZGUpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld0V2ZW50Q2FjaGUudXBkYXRlSW1tZWRpYXRlQ2hpbGQobmV4dENoaWxkLm5hbWUsIG5leHRDaGlsZC5ub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdFdmVudENhY2hlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNoaWxkU25hcC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgLy8gd2UncmUgZGVsZXRpbmcgYSBub2RlLCBidXQgaXQgd2FzIG5vdCBpbiB0aGUgd2luZG93LCBzbyBpZ25vcmUgaXRcclxuICAgICAgICAgICAgcmV0dXJuIHNuYXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluUmFuZ2UpIHtcclxuICAgICAgICAgICAgaWYgKGNtcCh3aW5kb3dCb3VuZGFyeSwgbmV3Q2hpbGROYW1lZE5vZGUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VBY2N1bXVsYXRvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShDaGFuZ2UuY2hpbGRSZW1vdmVkQ2hhbmdlKHdpbmRvd0JvdW5kYXJ5Lm5hbWUsIHdpbmRvd0JvdW5kYXJ5Lm5vZGUpKTtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VBY2N1bXVsYXRvci50cmFja0NoaWxkQ2hhbmdlKENoYW5nZS5jaGlsZEFkZGVkQ2hhbmdlKGNoaWxkS2V5LCBjaGlsZFNuYXApKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBvbGRFdmVudENhY2hlXHJcbiAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5LCBjaGlsZFNuYXApXHJcbiAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKHdpbmRvd0JvdW5kYXJ5Lm5hbWUsIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzbmFwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gc25hcDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIExpbWl0ZWRGaWx0ZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhpcyBjbGFzcyBpcyBhbiBpbW11dGFibGUtZnJvbS10aGUtcHVibGljLWFwaSBzdHJ1Y3QgY29udGFpbmluZyBhIHNldCBvZiBxdWVyeSBwYXJhbWV0ZXJzIGRlZmluaW5nIGFcclxuICogcmFuZ2UgdG8gYmUgcmV0dXJuZWQgZm9yIGEgcGFydGljdWxhciBsb2NhdGlvbi4gSXQgaXMgYXNzdW1lZCB0aGF0IHZhbGlkYXRpb24gb2YgcGFyYW1ldGVycyBpcyBkb25lIGF0IHRoZVxyXG4gKiB1c2VyLWZhY2luZyBBUEkgbGV2ZWwsIHNvIGl0IGlzIG5vdCBkb25lIGhlcmUuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFF1ZXJ5UGFyYW1zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUXVlcnlQYXJhbXMoKSB7XHJcbiAgICAgICAgdGhpcy5saW1pdFNldF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN0YXJ0U2V0XyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RhcnROYW1lU2V0XyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZW5kU2V0XyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZW5kTmFtZVNldF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxpbWl0XyA9IDA7XHJcbiAgICAgICAgdGhpcy52aWV3RnJvbV8gPSAnJztcclxuICAgICAgICB0aGlzLmluZGV4U3RhcnRWYWx1ZV8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW5kZXhTdGFydE5hbWVfID0gJyc7XHJcbiAgICAgICAgdGhpcy5pbmRleEVuZFZhbHVlXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pbmRleEVuZE5hbWVfID0gJyc7XHJcbiAgICAgICAgdGhpcy5pbmRleF8gPSBQUklPUklUWV9JTkRFWDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmhhc1N0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0U2V0XztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgaXQgd291bGQgcmV0dXJuIGZyb20gbGVmdC5cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmlzVmlld0Zyb21MZWZ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZpZXdGcm9tXyA9PT0gJycpIHtcclxuICAgICAgICAgICAgLy8gbGltaXQoKSwgcmF0aGVyIHRoYW4gbGltaXRUb0ZpcnN0IG9yIGxpbWl0VG9MYXN0IHdhcyBjYWxsZWQuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCBvbmx5IG9uZSBvZiBzdGFydFNldF8gYW5kIGVuZFNldF8gaXMgdHJ1ZS4gVXNlIHRoZW1cclxuICAgICAgICAgICAgLy8gdG8gY2FsY3VsYXRlIHdoaWNoIHNpZGUgb2YgdGhlIHZpZXcgdG8gYW5jaG9yIHRvLiBJZiBuZWl0aGVyIGlzIHNldCxcclxuICAgICAgICAgICAgLy8gYW5jaG9yIHRvIHRoZSBlbmQuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0U2V0XztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy52aWV3RnJvbV8gPT09IFF1ZXJ5UGFyYW1zLldJUkVfUFJPVE9DT0xfQ09OU1RBTlRTXy5WSUVXX0ZST01fTEVGVCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogT25seSB2YWxpZCB0byBjYWxsIGlmIGhhc1N0YXJ0KCkgcmV0dXJucyB0cnVlXHJcbiAgICAgKiBAcmV0dXJuIHsqfVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuZ2V0SW5kZXhTdGFydFZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHRoaXMuc3RhcnRTZXRfLCAnT25seSB2YWxpZCBpZiBzdGFydCBoYXMgYmVlbiBzZXQnKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleFN0YXJ0VmFsdWVfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogT25seSB2YWxpZCB0byBjYWxsIGlmIGhhc1N0YXJ0KCkgcmV0dXJucyB0cnVlLlxyXG4gICAgICogUmV0dXJucyB0aGUgc3RhcnRpbmcga2V5IG5hbWUgZm9yIHRoZSByYW5nZSBkZWZpbmVkIGJ5IHRoZXNlIHF1ZXJ5IHBhcmFtZXRlcnNcclxuICAgICAqIEByZXR1cm4geyFzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5nZXRJbmRleFN0YXJ0TmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1dGlsLmFzc2VydCh0aGlzLnN0YXJ0U2V0XywgJ09ubHkgdmFsaWQgaWYgc3RhcnQgaGFzIGJlZW4gc2V0Jyk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhcnROYW1lU2V0Xykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbmRleFN0YXJ0TmFtZV87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gTUlOX05BTUU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmhhc0VuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbmRTZXRfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogT25seSB2YWxpZCB0byBjYWxsIGlmIGhhc0VuZCgpIHJldHVybnMgdHJ1ZS5cclxuICAgICAqIEByZXR1cm4geyp9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5nZXRJbmRleEVuZFZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHRoaXMuZW5kU2V0XywgJ09ubHkgdmFsaWQgaWYgZW5kIGhhcyBiZWVuIHNldCcpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4RW5kVmFsdWVfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogT25seSB2YWxpZCB0byBjYWxsIGlmIGhhc0VuZCgpIHJldHVybnMgdHJ1ZS5cclxuICAgICAqIFJldHVybnMgdGhlIGVuZCBrZXkgbmFtZSBmb3IgdGhlIHJhbmdlIGRlZmluZWQgYnkgdGhlc2UgcXVlcnkgcGFyYW1ldGVyc1xyXG4gICAgICogQHJldHVybiB7IXN0cmluZ31cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmdldEluZGV4RW5kTmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1dGlsLmFzc2VydCh0aGlzLmVuZFNldF8sICdPbmx5IHZhbGlkIGlmIGVuZCBoYXMgYmVlbiBzZXQnKTtcclxuICAgICAgICBpZiAodGhpcy5lbmROYW1lU2V0Xykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbmRleEVuZE5hbWVfO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1BWF9OQU1FO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5oYXNMaW1pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5saW1pdFNldF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgbGltaXQgaGFzIGJlZW4gc2V0IGFuZCBpdCBoYXMgYmVlbiBleHBsaWNpdGx5IGFuY2hvcmVkXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5oYXNBbmNob3JlZExpbWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpbWl0U2V0XyAmJiB0aGlzLnZpZXdGcm9tXyAhPT0gJyc7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBPbmx5IHZhbGlkIHRvIGNhbGwgaWYgaGFzTGltaXQoKSByZXR1cm5zIHRydWVcclxuICAgICAqIEByZXR1cm4geyFudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5nZXRMaW1pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1dGlsLmFzc2VydCh0aGlzLmxpbWl0U2V0XywgJ09ubHkgdmFsaWQgaWYgbGltaXQgaGFzIGJlZW4gc2V0Jyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGltaXRfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IUluZGV4fVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuZ2V0SW5kZXggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5UGFyYW1zfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmNvcHlfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjb3B5ID0gbmV3IFF1ZXJ5UGFyYW1zKCk7XHJcbiAgICAgICAgY29weS5saW1pdFNldF8gPSB0aGlzLmxpbWl0U2V0XztcclxuICAgICAgICBjb3B5LmxpbWl0XyA9IHRoaXMubGltaXRfO1xyXG4gICAgICAgIGNvcHkuc3RhcnRTZXRfID0gdGhpcy5zdGFydFNldF87XHJcbiAgICAgICAgY29weS5pbmRleFN0YXJ0VmFsdWVfID0gdGhpcy5pbmRleFN0YXJ0VmFsdWVfO1xyXG4gICAgICAgIGNvcHkuc3RhcnROYW1lU2V0XyA9IHRoaXMuc3RhcnROYW1lU2V0XztcclxuICAgICAgICBjb3B5LmluZGV4U3RhcnROYW1lXyA9IHRoaXMuaW5kZXhTdGFydE5hbWVfO1xyXG4gICAgICAgIGNvcHkuZW5kU2V0XyA9IHRoaXMuZW5kU2V0XztcclxuICAgICAgICBjb3B5LmluZGV4RW5kVmFsdWVfID0gdGhpcy5pbmRleEVuZFZhbHVlXztcclxuICAgICAgICBjb3B5LmVuZE5hbWVTZXRfID0gdGhpcy5lbmROYW1lU2V0XztcclxuICAgICAgICBjb3B5LmluZGV4RW5kTmFtZV8gPSB0aGlzLmluZGV4RW5kTmFtZV87XHJcbiAgICAgICAgY29weS5pbmRleF8gPSB0aGlzLmluZGV4XztcclxuICAgICAgICBjb3B5LnZpZXdGcm9tXyA9IHRoaXMudmlld0Zyb21fO1xyXG4gICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshbnVtYmVyfSBuZXdMaW1pdFxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5UGFyYW1zfVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUubGltaXQgPSBmdW5jdGlvbiAobmV3TGltaXQpIHtcclxuICAgICAgICB2YXIgbmV3UGFyYW1zID0gdGhpcy5jb3B5XygpO1xyXG4gICAgICAgIG5ld1BhcmFtcy5saW1pdFNldF8gPSB0cnVlO1xyXG4gICAgICAgIG5ld1BhcmFtcy5saW1pdF8gPSBuZXdMaW1pdDtcclxuICAgICAgICBuZXdQYXJhbXMudmlld0Zyb21fID0gJyc7XHJcbiAgICAgICAgcmV0dXJuIG5ld1BhcmFtcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IW51bWJlcn0gbmV3TGltaXRcclxuICAgICAqIEByZXR1cm4geyFRdWVyeVBhcmFtc31cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmxpbWl0VG9GaXJzdCA9IGZ1bmN0aW9uIChuZXdMaW1pdCkge1xyXG4gICAgICAgIHZhciBuZXdQYXJhbXMgPSB0aGlzLmNvcHlfKCk7XHJcbiAgICAgICAgbmV3UGFyYW1zLmxpbWl0U2V0XyA9IHRydWU7XHJcbiAgICAgICAgbmV3UGFyYW1zLmxpbWl0XyA9IG5ld0xpbWl0O1xyXG4gICAgICAgIG5ld1BhcmFtcy52aWV3RnJvbV8gPSBRdWVyeVBhcmFtcy5XSVJFX1BST1RPQ09MX0NPTlNUQU5UU18uVklFV19GUk9NX0xFRlQ7XHJcbiAgICAgICAgcmV0dXJuIG5ld1BhcmFtcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IW51bWJlcn0gbmV3TGltaXRcclxuICAgICAqIEByZXR1cm4geyFRdWVyeVBhcmFtc31cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmxpbWl0VG9MYXN0ID0gZnVuY3Rpb24gKG5ld0xpbWl0KSB7XHJcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMuY29weV8oKTtcclxuICAgICAgICBuZXdQYXJhbXMubGltaXRTZXRfID0gdHJ1ZTtcclxuICAgICAgICBuZXdQYXJhbXMubGltaXRfID0gbmV3TGltaXQ7XHJcbiAgICAgICAgbmV3UGFyYW1zLnZpZXdGcm9tXyA9IFF1ZXJ5UGFyYW1zLldJUkVfUFJPVE9DT0xfQ09OU1RBTlRTXy5WSUVXX0ZST01fUklHSFQ7XHJcbiAgICAgICAgcmV0dXJuIG5ld1BhcmFtcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXhWYWx1ZVxyXG4gICAgICogQHBhcmFtIHs/c3RyaW5nPX0ga2V5XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnlQYXJhbXN9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5zdGFydEF0ID0gZnVuY3Rpb24gKGluZGV4VmFsdWUsIGtleSkge1xyXG4gICAgICAgIHZhciBuZXdQYXJhbXMgPSB0aGlzLmNvcHlfKCk7XHJcbiAgICAgICAgbmV3UGFyYW1zLnN0YXJ0U2V0XyA9IHRydWU7XHJcbiAgICAgICAgaWYgKCEoaW5kZXhWYWx1ZSAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICBpbmRleFZhbHVlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3UGFyYW1zLmluZGV4U3RhcnRWYWx1ZV8gPSBpbmRleFZhbHVlO1xyXG4gICAgICAgIGlmIChrZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBuZXdQYXJhbXMuc3RhcnROYW1lU2V0XyA9IHRydWU7XHJcbiAgICAgICAgICAgIG5ld1BhcmFtcy5pbmRleFN0YXJ0TmFtZV8gPSBrZXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuZXdQYXJhbXMuc3RhcnROYW1lU2V0XyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBuZXdQYXJhbXMuaW5kZXhTdGFydE5hbWVfID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdQYXJhbXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyp9IGluZGV4VmFsdWVcclxuICAgICAqIEBwYXJhbSB7P3N0cmluZz19IGtleVxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5UGFyYW1zfVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuZW5kQXQgPSBmdW5jdGlvbiAoaW5kZXhWYWx1ZSwga2V5KSB7XHJcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMuY29weV8oKTtcclxuICAgICAgICBuZXdQYXJhbXMuZW5kU2V0XyA9IHRydWU7XHJcbiAgICAgICAgaWYgKCEoaW5kZXhWYWx1ZSAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICBpbmRleFZhbHVlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3UGFyYW1zLmluZGV4RW5kVmFsdWVfID0gaW5kZXhWYWx1ZTtcclxuICAgICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbmV3UGFyYW1zLmVuZE5hbWVTZXRfID0gdHJ1ZTtcclxuICAgICAgICAgICAgbmV3UGFyYW1zLmluZGV4RW5kTmFtZV8gPSBrZXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuZXdQYXJhbXMuZW5kTmFtZVNldF8gPSBmYWxzZTtcclxuICAgICAgICAgICAgbmV3UGFyYW1zLmluZGV4RW5kTmFtZV8gPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld1BhcmFtcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUluZGV4fSBpbmRleFxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5UGFyYW1zfVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUub3JkZXJCeSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHZhciBuZXdQYXJhbXMgPSB0aGlzLmNvcHlfKCk7XHJcbiAgICAgICAgbmV3UGFyYW1zLmluZGV4XyA9IGluZGV4O1xyXG4gICAgICAgIHJldHVybiBuZXdQYXJhbXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuZ2V0UXVlcnlPYmplY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTID0gUXVlcnlQYXJhbXMuV0lSRV9QUk9UT0NPTF9DT05TVEFOVFNfO1xyXG4gICAgICAgIHZhciBvYmogPSB7fTtcclxuICAgICAgICBpZiAodGhpcy5zdGFydFNldF8pIHtcclxuICAgICAgICAgICAgb2JqW1dJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLklOREVYX1NUQVJUX1ZBTFVFXSA9IHRoaXMuaW5kZXhTdGFydFZhbHVlXztcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnROYW1lU2V0Xykge1xyXG4gICAgICAgICAgICAgICAgb2JqW1dJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLklOREVYX1NUQVJUX05BTUVdID0gdGhpcy5pbmRleFN0YXJ0TmFtZV87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZW5kU2V0Xykge1xyXG4gICAgICAgICAgICBvYmpbV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuSU5ERVhfRU5EX1ZBTFVFXSA9IHRoaXMuaW5kZXhFbmRWYWx1ZV87XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuZE5hbWVTZXRfKSB7XHJcbiAgICAgICAgICAgICAgICBvYmpbV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuSU5ERVhfRU5EX05BTUVdID0gdGhpcy5pbmRleEVuZE5hbWVfO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmxpbWl0U2V0Xykge1xyXG4gICAgICAgICAgICBvYmpbV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuTElNSVRdID0gdGhpcy5saW1pdF87XHJcbiAgICAgICAgICAgIHZhciB2aWV3RnJvbSA9IHRoaXMudmlld0Zyb21fO1xyXG4gICAgICAgICAgICBpZiAodmlld0Zyb20gPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZpZXdGcm9tTGVmdCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlld0Zyb20gPSBXSVJFX1BST1RPQ09MX0NPTlNUQU5UUy5WSUVXX0ZST01fTEVGVDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdGcm9tID0gV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuVklFV19GUk9NX1JJR0hUO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9ialtXSVJFX1BST1RPQ09MX0NPTlNUQU5UUy5WSUVXX0ZST01dID0gdmlld0Zyb207XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZvciBub3csIHByaW9yaXR5IGluZGV4IGlzIHRoZSBkZWZhdWx0LCBzbyB3ZSBvbmx5IHNwZWNpZnkgaWYgaXQncyBzb21lIG90aGVyIGluZGV4XHJcbiAgICAgICAgaWYgKHRoaXMuaW5kZXhfICE9PSBQUklPUklUWV9JTkRFWCkge1xyXG4gICAgICAgICAgICBvYmpbV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuSU5ERVhdID0gdGhpcy5pbmRleF8udG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5sb2Fkc0FsbERhdGEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICEodGhpcy5zdGFydFNldF8gfHwgdGhpcy5lbmRTZXRfIHx8IHRoaXMubGltaXRTZXRfKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5pc0RlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZHNBbGxEYXRhKCkgJiYgdGhpcy5pbmRleF8gPT0gUFJJT1JJVFlfSU5ERVg7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshTm9kZUZpbHRlcn1cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmdldE5vZGVGaWx0ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9hZHNBbGxEYXRhKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbmRleGVkRmlsdGVyKHRoaXMuZ2V0SW5kZXgoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaGFzTGltaXQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IExpbWl0ZWRGaWx0ZXIodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJhbmdlZEZpbHRlcih0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgc2V0IG9mIFJFU1QgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnMgcmVwcmVzZW50aW5nIHRoaXMgcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7IU9iamVjdC48c3RyaW5nLCo+fSBxdWVyeSBzdHJpbmcgcGFyYW1ldGVyc1xyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUudG9SZXN0UXVlcnlTdHJpbmdQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBSRVNUX0NPTlNUQU5UUyA9IFF1ZXJ5UGFyYW1zLlJFU1RfUVVFUllfQ09OU1RBTlRTXztcclxuICAgICAgICB2YXIgcXMgPSB7fTtcclxuICAgICAgICBpZiAodGhpcy5pc0RlZmF1bHQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvcmRlckJ5O1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4XyA9PT0gUFJJT1JJVFlfSU5ERVgpIHtcclxuICAgICAgICAgICAgb3JkZXJCeSA9IFJFU1RfQ09OU1RBTlRTLlBSSU9SSVRZX0lOREVYO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmluZGV4XyA9PT0gVkFMVUVfSU5ERVgpIHtcclxuICAgICAgICAgICAgb3JkZXJCeSA9IFJFU1RfQ09OU1RBTlRTLlZBTFVFX0lOREVYO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmluZGV4XyA9PT0gS0VZX0lOREVYKSB7XHJcbiAgICAgICAgICAgIG9yZGVyQnkgPSBSRVNUX0NPTlNUQU5UUy5LRVlfSU5ERVg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1dGlsLmFzc2VydCh0aGlzLmluZGV4XyBpbnN0YW5jZW9mIFBhdGhJbmRleCwgJ1VucmVjb2duaXplZCBpbmRleCB0eXBlIScpO1xyXG4gICAgICAgICAgICBvcmRlckJ5ID0gdGhpcy5pbmRleF8udG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcXNbUkVTVF9DT05TVEFOVFMuT1JERVJfQlldID0gdXRpbC5zdHJpbmdpZnkob3JkZXJCeSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRTZXRfKSB7XHJcbiAgICAgICAgICAgIHFzW1JFU1RfQ09OU1RBTlRTLlNUQVJUX0FUXSA9IHV0aWwuc3RyaW5naWZ5KHRoaXMuaW5kZXhTdGFydFZhbHVlXyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0TmFtZVNldF8pIHtcclxuICAgICAgICAgICAgICAgIHFzW1JFU1RfQ09OU1RBTlRTLlNUQVJUX0FUXSArPSAnLCcgKyB1dGlsLnN0cmluZ2lmeSh0aGlzLmluZGV4U3RhcnROYW1lXyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZW5kU2V0Xykge1xyXG4gICAgICAgICAgICBxc1tSRVNUX0NPTlNUQU5UUy5FTkRfQVRdID0gdXRpbC5zdHJpbmdpZnkodGhpcy5pbmRleEVuZFZhbHVlXyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuZE5hbWVTZXRfKSB7XHJcbiAgICAgICAgICAgICAgICBxc1tSRVNUX0NPTlNUQU5UUy5FTkRfQVRdICs9ICcsJyArIHV0aWwuc3RyaW5naWZ5KHRoaXMuaW5kZXhFbmROYW1lXyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubGltaXRTZXRfKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmlld0Zyb21MZWZ0KCkpIHtcclxuICAgICAgICAgICAgICAgIHFzW1JFU1RfQ09OU1RBTlRTLkxJTUlUX1RPX0ZJUlNUXSA9IHRoaXMubGltaXRfO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcXNbUkVTVF9DT05TVEFOVFMuTElNSVRfVE9fTEFTVF0gPSB0aGlzLmxpbWl0XztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaXJlIFByb3RvY29sIENvbnN0YW50c1xyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZW51bSB7c3RyaW5nfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMuV0lSRV9QUk9UT0NPTF9DT05TVEFOVFNfID0ge1xyXG4gICAgICAgIElOREVYX1NUQVJUX1ZBTFVFOiAnc3AnLFxyXG4gICAgICAgIElOREVYX1NUQVJUX05BTUU6ICdzbicsXHJcbiAgICAgICAgSU5ERVhfRU5EX1ZBTFVFOiAnZXAnLFxyXG4gICAgICAgIElOREVYX0VORF9OQU1FOiAnZW4nLFxyXG4gICAgICAgIExJTUlUOiAnbCcsXHJcbiAgICAgICAgVklFV19GUk9NOiAndmYnLFxyXG4gICAgICAgIFZJRVdfRlJPTV9MRUZUOiAnbCcsXHJcbiAgICAgICAgVklFV19GUk9NX1JJR0hUOiAncicsXHJcbiAgICAgICAgSU5ERVg6ICdpJ1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUkVTVCBRdWVyeSBDb25zdGFudHNcclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGVudW0ge3N0cmluZ31cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLlJFU1RfUVVFUllfQ09OU1RBTlRTXyA9IHtcclxuICAgICAgICBPUkRFUl9CWTogJ29yZGVyQnknLFxyXG4gICAgICAgIFBSSU9SSVRZX0lOREVYOiAnJHByaW9yaXR5JyxcclxuICAgICAgICBWQUxVRV9JTkRFWDogJyR2YWx1ZScsXHJcbiAgICAgICAgS0VZX0lOREVYOiAnJGtleScsXHJcbiAgICAgICAgU1RBUlRfQVQ6ICdzdGFydEF0JyxcclxuICAgICAgICBFTkRfQVQ6ICdlbmRBdCcsXHJcbiAgICAgICAgTElNSVRfVE9fRklSU1Q6ICdsaW1pdFRvRmlyc3QnLFxyXG4gICAgICAgIExJTUlUX1RPX0xBU1Q6ICdsaW1pdFRvTGFzdCdcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQsIGVtcHR5IHF1ZXJ5IHBhcmFtZXRlcnNcclxuICAgICAqIEB0eXBlIHshUXVlcnlQYXJhbXN9XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMuREVGQVVMVCA9IG5ldyBRdWVyeVBhcmFtcygpO1xyXG4gICAgcmV0dXJuIFF1ZXJ5UGFyYW1zO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIFJlZmVyZW5jZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFJlZmVyZW5jZSwgX3N1cGVyKTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbCBvcHRpb25zOlxyXG4gICAgICogICBuZXcgUmVmZXJlbmNlKFJlcG8sIFBhdGgpIG9yXHJcbiAgICAgKiAgIG5ldyBSZWZlcmVuY2UodXJsOiBzdHJpbmcsIHN0cmluZ3xSZXBvTWFuYWdlcilcclxuICAgICAqXHJcbiAgICAgKiBFeHRlcm5hbGx5IC0gdGhpcyBpcyB0aGUgZmlyZWJhc2UuZGF0YWJhc2UuUmVmZXJlbmNlIHR5cGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUmVwb30gcmVwb1xyXG4gICAgICogQHBhcmFtIHsoIVBhdGgpfSBwYXRoXHJcbiAgICAgKiBAZXh0ZW5kcyB7UXVlcnl9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlZmVyZW5jZShyZXBvLCBwYXRoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIShyZXBvIGluc3RhbmNlb2YgUmVwbykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduZXcgUmVmZXJlbmNlKCkgbm8gbG9uZ2VyIHN1cHBvcnRlZCAtIHVzZSBhcHAuZGF0YWJhc2UoKS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2FsbCBRdWVyeSdzIGNvbnN0cnVjdG9yLCBwYXNzaW5nIGluIHRoZSByZXBvIGFuZCBwYXRoLlxyXG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcmVwbywgcGF0aCwgUXVlcnlQYXJhbXMuREVGQVVMVCwgZmFsc2UpIHx8IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqIEByZXR1cm4gez9zdHJpbmd9ICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLmdldEtleSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ1JlZmVyZW5jZS5rZXknLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICBpZiAodGhpcy5wYXRoLmlzRW1wdHkoKSlcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoLmdldEJhY2soKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IShzdHJpbmd8UGF0aCl9IHBhdGhTdHJpbmdcclxuICAgICAqIEByZXR1cm4geyFSZWZlcmVuY2V9XHJcbiAgICAgKi9cclxuICAgIFJlZmVyZW5jZS5wcm90b3R5cGUuY2hpbGQgPSBmdW5jdGlvbiAocGF0aFN0cmluZykge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUmVmZXJlbmNlLmNoaWxkJywgMSwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwYXRoU3RyaW5nID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBwYXRoU3RyaW5nID0gU3RyaW5nKHBhdGhTdHJpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghKHBhdGhTdHJpbmcgaW5zdGFuY2VvZiBQYXRoKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXRoLmdldEZyb250KCkgPT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVJvb3RQYXRoU3RyaW5nKCdSZWZlcmVuY2UuY2hpbGQnLCAxLCBwYXRoU3RyaW5nLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlUGF0aFN0cmluZygnUmVmZXJlbmNlLmNoaWxkJywgMSwgcGF0aFN0cmluZywgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFJlZmVyZW5jZSh0aGlzLnJlcG8sIHRoaXMucGF0aC5jaGlsZChwYXRoU3RyaW5nKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEByZXR1cm4gez9SZWZlcmVuY2V9ICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ1JlZmVyZW5jZS5wYXJlbnQnLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YXIgcGFyZW50UGF0aCA9IHRoaXMucGF0aC5wYXJlbnQoKTtcclxuICAgICAgICByZXR1cm4gcGFyZW50UGF0aCA9PT0gbnVsbCA/IG51bGwgOiBuZXcgUmVmZXJlbmNlKHRoaXMucmVwbywgcGFyZW50UGF0aCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEByZXR1cm4geyFSZWZlcmVuY2V9ICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLmdldFJvb3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdSZWZlcmVuY2Uucm9vdCcsIDAsIDAsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xyXG4gICAgICAgIHdoaWxlIChyZWYuZ2V0UGFyZW50KCkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmVmID0gcmVmLmdldFBhcmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVmO1xyXG4gICAgfTtcclxuICAgIC8qKiBAcmV0dXJuIHshRGF0YWJhc2V9ICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLmRhdGFiYXNlUHJvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBvLmRhdGFiYXNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHsqfSBuZXdWYWxcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oP0Vycm9yKT19IG9uQ29tcGxldGVcclxuICAgICAqIEByZXR1cm4geyFQcm9taXNlfVxyXG4gICAgICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChuZXdWYWwsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ1JlZmVyZW5jZS5zZXQnLCAxLCAyLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnUmVmZXJlbmNlLnNldCcsIHRoaXMucGF0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGFBcmcoJ1JlZmVyZW5jZS5zZXQnLCAxLCBuZXdWYWwsIHRoaXMucGF0aCwgZmFsc2UpO1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVDYWxsYmFjaygnUmVmZXJlbmNlLnNldCcsIDIsIG9uQ29tcGxldGUsIHRydWUpO1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyB1dGlsLkRlZmVycmVkKCk7XHJcbiAgICAgICAgdGhpcy5yZXBvLnNldFdpdGhQcmlvcml0eSh0aGlzLnBhdGgsIG5ld1ZhbCwgXHJcbiAgICAgICAgLypwcmlvcml0eT0qLyBudWxsLCBkZWZlcnJlZC53cmFwQ2FsbGJhY2sob25Db21wbGV0ZSkpO1xyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBvYmplY3RUb01lcmdlXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgUmVmZXJlbmNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAob2JqZWN0VG9NZXJnZSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUmVmZXJlbmNlLnVwZGF0ZScsIDEsIDIsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhbGlkYXRlV3JpdGFibGVQYXRoKCdSZWZlcmVuY2UudXBkYXRlJywgdGhpcy5wYXRoKTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3RUb01lcmdlKSkge1xyXG4gICAgICAgICAgICB2YXIgbmV3T2JqZWN0VG9NZXJnZSA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdFRvTWVyZ2UubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIG5ld09iamVjdFRvTWVyZ2VbJycgKyBpXSA9IG9iamVjdFRvTWVyZ2VbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2JqZWN0VG9NZXJnZSA9IG5ld09iamVjdFRvTWVyZ2U7XHJcbiAgICAgICAgICAgIHdhcm4oJ1Bhc3NpbmcgYW4gQXJyYXkgdG8gRmlyZWJhc2UudXBkYXRlKCkgaXMgZGVwcmVjYXRlZC4gJyArXHJcbiAgICAgICAgICAgICAgICAnVXNlIHNldCgpIGlmIHlvdSB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgZXhpc3RpbmcgZGF0YSwgb3IgJyArXHJcbiAgICAgICAgICAgICAgICAnYW4gT2JqZWN0IHdpdGggaW50ZWdlciBrZXlzIGlmIHlvdSByZWFsbHkgZG8gd2FudCB0byAnICtcclxuICAgICAgICAgICAgICAgICdvbmx5IHVwZGF0ZSBzb21lIG9mIHRoZSBjaGlsZHJlbi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZU1lcmdlRGF0YUFyZygnUmVmZXJlbmNlLnVwZGF0ZScsIDEsIG9iamVjdFRvTWVyZ2UsIHRoaXMucGF0aCwgZmFsc2UpO1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVDYWxsYmFjaygnUmVmZXJlbmNlLnVwZGF0ZScsIDIsIG9uQ29tcGxldGUsIHRydWUpO1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyB1dGlsLkRlZmVycmVkKCk7XHJcbiAgICAgICAgdGhpcy5yZXBvLnVwZGF0ZSh0aGlzLnBhdGgsIG9iamVjdFRvTWVyZ2UsIGRlZmVycmVkLndyYXBDYWxsYmFjayhvbkNvbXBsZXRlKSk7XHJcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfG51bGx9IG5ld1ByaW9yaXR5XHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgUmVmZXJlbmNlLnByb3RvdHlwZS5zZXRXaXRoUHJpb3JpdHkgPSBmdW5jdGlvbiAobmV3VmFsLCBuZXdQcmlvcml0eSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUmVmZXJlbmNlLnNldFdpdGhQcmlvcml0eScsIDIsIDMsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhbGlkYXRlV3JpdGFibGVQYXRoKCdSZWZlcmVuY2Uuc2V0V2l0aFByaW9yaXR5JywgdGhpcy5wYXRoKTtcclxuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZygnUmVmZXJlbmNlLnNldFdpdGhQcmlvcml0eScsIDEsIG5ld1ZhbCwgdGhpcy5wYXRoLCBmYWxzZSk7XHJcbiAgICAgICAgdmFsaWRhdGVQcmlvcml0eSgnUmVmZXJlbmNlLnNldFdpdGhQcmlvcml0eScsIDIsIG5ld1ByaW9yaXR5LCBmYWxzZSk7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUNhbGxiYWNrKCdSZWZlcmVuY2Uuc2V0V2l0aFByaW9yaXR5JywgMywgb25Db21wbGV0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0S2V5KCkgPT09ICcubGVuZ3RoJyB8fCB0aGlzLmdldEtleSgpID09PSAnLmtleXMnKVxyXG4gICAgICAgICAgICB0aHJvdyAnUmVmZXJlbmNlLnNldFdpdGhQcmlvcml0eSBmYWlsZWQ6ICcgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRLZXkoKSArXHJcbiAgICAgICAgICAgICAgICAnIGlzIGEgcmVhZC1vbmx5IG9iamVjdC4nO1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyB1dGlsLkRlZmVycmVkKCk7XHJcbiAgICAgICAgdGhpcy5yZXBvLnNldFdpdGhQcmlvcml0eSh0aGlzLnBhdGgsIG5ld1ZhbCwgbmV3UHJpb3JpdHksIGRlZmVycmVkLndyYXBDYWxsYmFjayhvbkNvbXBsZXRlKSk7XHJcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgUmVmZXJlbmNlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAob25Db21wbGV0ZSkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUmVmZXJlbmNlLnJlbW92ZScsIDAsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhbGlkYXRlV3JpdGFibGVQYXRoKCdSZWZlcmVuY2UucmVtb3ZlJywgdGhpcy5wYXRoKTtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQ2FsbGJhY2soJ1JlZmVyZW5jZS5yZW1vdmUnLCAxLCBvbkNvbXBsZXRlLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXQobnVsbCwgb25Db21wbGV0ZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCopOip9IHRyYW5zYWN0aW9uVXBkYXRlXHJcbiAgICAgKiBAcGFyYW0geyhmdW5jdGlvbig/RXJyb3IsIGJvb2xlYW4sID9EYXRhU25hcHNob3QpKT19IG9uQ29tcGxldGVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGFwcGx5TG9jYWxseVxyXG4gICAgICogQHJldHVybiB7IVByb21pc2V9XHJcbiAgICAgKi9cclxuICAgIFJlZmVyZW5jZS5wcm90b3R5cGUudHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAodHJhbnNhY3Rpb25VcGRhdGUsIG9uQ29tcGxldGUsIGFwcGx5TG9jYWxseSkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUmVmZXJlbmNlLnRyYW5zYWN0aW9uJywgMSwgMywgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVXcml0YWJsZVBhdGgoJ1JlZmVyZW5jZS50cmFuc2FjdGlvbicsIHRoaXMucGF0aCk7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUNhbGxiYWNrKCdSZWZlcmVuY2UudHJhbnNhY3Rpb24nLCAxLCB0cmFuc2FjdGlvblVwZGF0ZSwgZmFsc2UpO1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVDYWxsYmFjaygnUmVmZXJlbmNlLnRyYW5zYWN0aW9uJywgMiwgb25Db21wbGV0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgLy8gTk9URTogYXBwbHlMb2NhbGx5IGlzIGFuIGludGVybmFsLW9ubHkgb3B0aW9uIGZvciBub3cuICBXZSBuZWVkIHRvIGRlY2lkZSBpZiB3ZSB3YW50IHRvIGtlZXAgaXQgYW5kIGhvd1xyXG4gICAgICAgIC8vIHRvIGV4cG9zZSBpdC5cclxuICAgICAgICB2YWxpZGF0ZUJvb2xlYW4oJ1JlZmVyZW5jZS50cmFuc2FjdGlvbicsIDMsIGFwcGx5TG9jYWxseSwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0S2V5KCkgPT09ICcubGVuZ3RoJyB8fCB0aGlzLmdldEtleSgpID09PSAnLmtleXMnKVxyXG4gICAgICAgICAgICB0aHJvdyAnUmVmZXJlbmNlLnRyYW5zYWN0aW9uIGZhaWxlZDogJyArXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldEtleSgpICtcclxuICAgICAgICAgICAgICAgICcgaXMgYSByZWFkLW9ubHkgb2JqZWN0Lic7XHJcbiAgICAgICAgaWYgKGFwcGx5TG9jYWxseSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBhcHBseUxvY2FsbHkgPSB0cnVlO1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyB1dGlsLkRlZmVycmVkKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvbkNvbXBsZXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGRlZmVycmVkLnByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkgeyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHByb21pc2VDb21wbGV0ZSA9IGZ1bmN0aW9uIChlcnJvciwgY29tbWl0dGVkLCBzbmFwc2hvdCkge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG5ldyBUcmFuc2FjdGlvblJlc3VsdChjb21taXR0ZWQsIHNuYXBzaG90KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvbkNvbXBsZXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKGVycm9yLCBjb21taXR0ZWQsIHNuYXBzaG90KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5yZXBvLnN0YXJ0VHJhbnNhY3Rpb24odGhpcy5wYXRoLCB0cmFuc2FjdGlvblVwZGF0ZSwgcHJvbWlzZUNvbXBsZXRlLCBhcHBseUxvY2FsbHkpO1xyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfG51bGx9IHByaW9yaXR5XHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgUmVmZXJlbmNlLnByb3RvdHlwZS5zZXRQcmlvcml0eSA9IGZ1bmN0aW9uIChwcmlvcml0eSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnUmVmZXJlbmNlLnNldFByaW9yaXR5JywgMSwgMiwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVXcml0YWJsZVBhdGgoJ1JlZmVyZW5jZS5zZXRQcmlvcml0eScsIHRoaXMucGF0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVQcmlvcml0eSgnUmVmZXJlbmNlLnNldFByaW9yaXR5JywgMSwgcHJpb3JpdHksIGZhbHNlKTtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQ2FsbGJhY2soJ1JlZmVyZW5jZS5zZXRQcmlvcml0eScsIDIsIG9uQ29tcGxldGUsIHRydWUpO1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyB1dGlsLkRlZmVycmVkKCk7XHJcbiAgICAgICAgdGhpcy5yZXBvLnNldFdpdGhQcmlvcml0eSh0aGlzLnBhdGguY2hpbGQoJy5wcmlvcml0eScpLCBwcmlvcml0eSwgbnVsbCwgZGVmZXJyZWQud3JhcENhbGxiYWNrKG9uQ29tcGxldGUpKTtcclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7Kj19IHZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshUmVmZXJlbmNlfVxyXG4gICAgICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAodmFsdWUsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQXJnQ291bnQoJ1JlZmVyZW5jZS5wdXNoJywgMCwgMiwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVXcml0YWJsZVBhdGgoJ1JlZmVyZW5jZS5wdXNoJywgdGhpcy5wYXRoKTtcclxuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZygnUmVmZXJlbmNlLnB1c2gnLCAxLCB2YWx1ZSwgdGhpcy5wYXRoLCB0cnVlKTtcclxuICAgICAgICB1dGlsLnZhbGlkYXRlQ2FsbGJhY2soJ1JlZmVyZW5jZS5wdXNoJywgMiwgb25Db21wbGV0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIG5vdyA9IHRoaXMucmVwby5zZXJ2ZXJUaW1lKCk7XHJcbiAgICAgICAgdmFyIG5hbWUgPSBuZXh0UHVzaElkKG5vdyk7XHJcbiAgICAgICAgLy8gcHVzaCgpIHJldHVybnMgYSBUaGVubmFibGVSZWZlcmVuY2Ugd2hvc2UgcHJvbWlzZSBpcyBmdWxmaWxsZWQgd2l0aCBhIHJlZ3VsYXIgUmVmZXJlbmNlLlxyXG4gICAgICAgIC8vIFdlIHVzZSBjaGlsZCgpIHRvIGNyZWF0ZSBoYW5kbGVzIHRvIHR3byBkaWZmZXJlbnQgcmVmZXJlbmNlcy4gVGhlIGZpcnN0IGlzIHR1cm5lZCBpbnRvIGFcclxuICAgICAgICAvLyBUaGVubmFibGVSZWZlcmVuY2UgYmVsb3cgYnkgYWRkaW5nIHRoZW4oKSBhbmQgY2F0Y2goKSBtZXRob2RzIGFuZCBpcyB1c2VkIGFzIHRoZVxyXG4gICAgICAgIC8vIHJldHVybiB2YWx1ZSBvZiBwdXNoKCkuIFRoZSBzZWNvbmQgcmVtYWlucyBhIHJlZ3VsYXIgUmVmZXJlbmNlIGFuZCBpcyB1c2VkIGFzIHRoZSBmdWxmaWxsZWRcclxuICAgICAgICAvLyB2YWx1ZSBvZiB0aGUgZmlyc3QgVGhlbm5hYmxlUmVmZXJlbmNlLlxyXG4gICAgICAgIHZhciB0aGVubmFibGVQdXNoUmVmID0gdGhpcy5jaGlsZChuYW1lKTtcclxuICAgICAgICB2YXIgcHVzaFJlZiA9IHRoaXMuY2hpbGQobmFtZSk7XHJcbiAgICAgICAgdmFyIHByb21pc2U7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcHJvbWlzZSA9IHRoZW5uYWJsZVB1c2hSZWYuc2V0KHZhbHVlLCBvbkNvbXBsZXRlKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHB1c2hSZWY7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShwdXNoUmVmKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhlbm5hYmxlUHVzaFJlZi50aGVuID0gcHJvbWlzZS50aGVuLmJpbmQocHJvbWlzZSk7XHJcbiAgICAgICAgdGhlbm5hYmxlUHVzaFJlZi5jYXRjaCA9IHByb21pc2UudGhlbi5iaW5kKHByb21pc2UsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvbkNvbXBsZXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkgeyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoZW5uYWJsZVB1c2hSZWY7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshT25EaXNjb25uZWN0fVxyXG4gICAgICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLm9uRGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnUmVmZXJlbmNlLm9uRGlzY29ubmVjdCcsIHRoaXMucGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPbkRpc2Nvbm5lY3QodGhpcy5yZXBvLCB0aGlzLnBhdGgpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWZlcmVuY2UucHJvdG90eXBlLCBcImRhdGFiYXNlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YWJhc2VQcm9wKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVmZXJlbmNlLnByb3RvdHlwZSwgXCJrZXlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRLZXkoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWZlcmVuY2UucHJvdG90eXBlLCBcInBhcmVudFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBhcmVudCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlZmVyZW5jZS5wcm90b3R5cGUsIFwicm9vdFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJvb3QoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBSZWZlcmVuY2U7XHJcbn0oUXVlcnkpKTtcclxuLyoqXHJcbiAqIERlZmluZSByZWZlcmVuY2UgY29uc3RydWN0b3IgaW4gdmFyaW91cyBtb2R1bGVzXHJcbiAqXHJcbiAqIFdlIGFyZSBkb2luZyB0aGlzIGhlcmUgdG8gYXZvaWQgc2V2ZXJhbCBjaXJjdWxhclxyXG4gKiBkZXBlbmRlbmN5IGlzc3Vlc1xyXG4gKi9cclxuUXVlcnkuX19yZWZlcmVuY2VDb25zdHJ1Y3RvciA9IFJlZmVyZW5jZTtcclxuU3luY1BvaW50Ll9fcmVmZXJlbmNlQ29uc3RydWN0b3IgPSBSZWZlcmVuY2U7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogTm9kZSBpbiBhIFRyZWUuXHJcbiAqL1xyXG52YXIgVHJlZU5vZGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUcmVlTm9kZSgpIHtcclxuICAgICAgICAvLyBUT0RPOiBDb25zaWRlciBtYWtpbmcgYWNjZXNzb3JzIHRoYXQgY3JlYXRlIGNoaWxkcmVuIGFuZCB2YWx1ZSBsYXppbHkgb3JcclxuICAgICAgICAvLyBzZXBhcmF0ZSBJbnRlcm5hbCAvIExlYWYgJ3R5cGVzJy5cclxuICAgICAgICB0aGlzLmNoaWxkcmVuID0ge307XHJcbiAgICAgICAgdGhpcy5jaGlsZENvdW50ID0gMDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBUcmVlTm9kZTtcclxufSgpKTtcclxuLyoqXHJcbiAqIEEgbGlnaHQtd2VpZ2h0IHRyZWUsIHRyYXZlcnNhYmxlIGJ5IHBhdGguICBOb2RlcyBjYW4gaGF2ZSBib3RoIHZhbHVlcyBhbmQgY2hpbGRyZW4uXHJcbiAqIE5vZGVzIGFyZSBub3QgZW51bWVyYXRlZCAoYnkgZm9yRWFjaENoaWxkKSB1bmxlc3MgdGhleSBoYXZlIGEgdmFsdWUgb3Igbm9uLWVtcHR5XHJcbiAqIGNoaWxkcmVuLlxyXG4gKi9cclxudmFyIFRyZWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEB0ZW1wbGF0ZSBUXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWVfIE9wdGlvbmFsIG5hbWUgb2YgdGhlIG5vZGUuXHJcbiAgICAgKiBAcGFyYW0ge1RyZWU9fSBwYXJlbnRfIE9wdGlvbmFsIHBhcmVudCBub2RlLlxyXG4gICAgICogQHBhcmFtIHtUcmVlTm9kZT19IG5vZGVfIE9wdGlvbmFsIG5vZGUgdG8gd3JhcC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVHJlZShuYW1lXywgcGFyZW50Xywgbm9kZV8pIHtcclxuICAgICAgICBpZiAobmFtZV8gPT09IHZvaWQgMCkgeyBuYW1lXyA9ICcnOyB9XHJcbiAgICAgICAgaWYgKHBhcmVudF8gPT09IHZvaWQgMCkgeyBwYXJlbnRfID0gbnVsbDsgfVxyXG4gICAgICAgIGlmIChub2RlXyA9PT0gdm9pZCAwKSB7IG5vZGVfID0gbmV3IFRyZWVOb2RlKCk7IH1cclxuICAgICAgICB0aGlzLm5hbWVfID0gbmFtZV87XHJcbiAgICAgICAgdGhpcy5wYXJlbnRfID0gcGFyZW50XztcclxuICAgICAgICB0aGlzLm5vZGVfID0gbm9kZV87XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBzdWItVHJlZSBmb3IgdGhlIGdpdmVuIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshKHN0cmluZ3xQYXRoKX0gcGF0aE9iaiBQYXRoIHRvIGxvb2sgdXAuXHJcbiAgICAgKiBAcmV0dXJuIHshVHJlZS48VD59IFRyZWUgZm9yIHBhdGguXHJcbiAgICAgKi9cclxuICAgIFRyZWUucHJvdG90eXBlLnN1YlRyZWUgPSBmdW5jdGlvbiAocGF0aE9iaikge1xyXG4gICAgICAgIC8vIFRPRE86IFJlcXVpcmUgcGF0aE9iaiB0byBiZSBQYXRoP1xyXG4gICAgICAgIHZhciBwYXRoID0gcGF0aE9iaiBpbnN0YW5jZW9mIFBhdGggPyBwYXRoT2JqIDogbmV3IFBhdGgocGF0aE9iaik7XHJcbiAgICAgICAgdmFyIGNoaWxkID0gdGhpcywgbmV4dDtcclxuICAgICAgICB3aGlsZSAoKG5leHQgPSBwYXRoLmdldEZyb250KCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSB1dGlsLnNhZmVHZXQoY2hpbGQubm9kZV8uY2hpbGRyZW4sIG5leHQpIHx8IG5ldyBUcmVlTm9kZSgpO1xyXG4gICAgICAgICAgICBjaGlsZCA9IG5ldyBUcmVlKG5leHQsIGNoaWxkLCBjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICBwYXRoID0gcGF0aC5wb3BGcm9udCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRyZWUgbm9kZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHs/VH0gVGhlIGRhdGEgb3IgbnVsbCBpZiBubyBkYXRhIGV4aXN0cy5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZV8udmFsdWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIGRhdGEgdG8gdGhpcyB0cmVlIG5vZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshVH0gdmFsdWUgVmFsdWUgdG8gc2V0LlxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcsICdDYW5ub3Qgc2V0IHZhbHVlIHRvIHVuZGVmaW5lZCcpO1xyXG4gICAgICAgIHRoaXMubm9kZV8udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVBhcmVudHNfKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgdGhlIGNvbnRlbnRzIG9mIHRoZSB0cmVlIG5vZGUgKGl0cyB2YWx1ZSBhbmQgYWxsIGNoaWxkcmVuKS5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlXy52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5ub2RlXy5jaGlsZHJlbiA9IHt9O1xyXG4gICAgICAgIHRoaXMubm9kZV8uY2hpbGRDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQYXJlbnRzXygpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdHJlZSBoYXMgYW55IGNoaWxkcmVuLlxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS5oYXNDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ub2RlXy5jaGlsZENvdW50ID4gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHRyZWUgaXMgZW1wdHkgKG5vIHZhbHVlIG9yIGNoaWxkcmVuKS5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgpID09PSBudWxsICYmICF0aGlzLmhhc0NoaWxkcmVuKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxscyBhY3Rpb24gZm9yIGVhY2ggY2hpbGQgb2YgdGhpcyB0cmVlIG5vZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighVHJlZS48VD4pfSBhY3Rpb24gQWN0aW9uIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCBjaGlsZC5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdXRpbC5mb3JFYWNoKHRoaXMubm9kZV8uY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgY2hpbGRUcmVlKSB7XHJcbiAgICAgICAgICAgIGFjdGlvbihuZXcgVHJlZShjaGlsZCwgX3RoaXMsIGNoaWxkVHJlZSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRG9lcyBhIGRlcHRoLWZpcnN0IHRyYXZlcnNhbCBvZiB0aGlzIG5vZGUncyBkZXNjZW5kYW50cywgY2FsbGluZyBhY3Rpb24gZm9yIGVhY2ggb25lLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIVRyZWUuPFQ+KX0gYWN0aW9uIEFjdGlvbiB0byBiZSBjYWxsZWQgZm9yIGVhY2ggY2hpbGQuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBpbmNsdWRlU2VsZiBXaGV0aGVyIHRvIGNhbGwgYWN0aW9uIG9uIHRoaXMgbm9kZSBhcyB3ZWxsLiBEZWZhdWx0cyB0b1xyXG4gICAgICogICBmYWxzZS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGNoaWxkcmVuRmlyc3QgV2hldGhlciB0byBjYWxsIGFjdGlvbiBvbiBjaGlsZHJlbiBiZWZvcmUgY2FsbGluZyBpdCBvblxyXG4gICAgICogICBwYXJlbnQuXHJcbiAgICAgKi9cclxuICAgIFRyZWUucHJvdG90eXBlLmZvckVhY2hEZXNjZW5kYW50ID0gZnVuY3Rpb24gKGFjdGlvbiwgaW5jbHVkZVNlbGYsIGNoaWxkcmVuRmlyc3QpIHtcclxuICAgICAgICBpZiAoaW5jbHVkZVNlbGYgJiYgIWNoaWxkcmVuRmlyc3QpXHJcbiAgICAgICAgICAgIGFjdGlvbih0aGlzKTtcclxuICAgICAgICB0aGlzLmZvckVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGQpIHtcclxuICAgICAgICAgICAgY2hpbGQuZm9yRWFjaERlc2NlbmRhbnQoYWN0aW9uLCAvKmluY2x1ZGVTZWxmPSovIHRydWUsIGNoaWxkcmVuRmlyc3QpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChpbmNsdWRlU2VsZiAmJiBjaGlsZHJlbkZpcnN0KVxyXG4gICAgICAgICAgICBhY3Rpb24odGhpcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxscyBhY3Rpb24gb24gZWFjaCBhbmNlc3RvciBub2RlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIVRyZWUuPFQ+KX0gYWN0aW9uIEFjdGlvbiB0byBiZSBjYWxsZWQgb24gZWFjaCBwYXJlbnQ7IHJldHVyblxyXG4gICAgICogICB0cnVlIHRvIGFib3J0LlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gaW5jbHVkZVNlbGYgV2hldGhlciB0byBjYWxsIGFjdGlvbiBvbiB0aGlzIG5vZGUgYXMgd2VsbC5cclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIGFjdGlvbiBjYWxsYmFjayByZXR1cm5lZCB0cnVlLlxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS5mb3JFYWNoQW5jZXN0b3IgPSBmdW5jdGlvbiAoYWN0aW9uLCBpbmNsdWRlU2VsZikge1xyXG4gICAgICAgIHZhciBub2RlID0gaW5jbHVkZVNlbGYgPyB0aGlzIDogdGhpcy5wYXJlbnQoKTtcclxuICAgICAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoYWN0aW9uKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRG9lcyBhIGRlcHRoLWZpcnN0IHRyYXZlcnNhbCBvZiB0aGlzIG5vZGUncyBkZXNjZW5kYW50cy4gIFdoZW4gYSBkZXNjZW5kYW50IHdpdGggYSB2YWx1ZVxyXG4gICAgICogaXMgZm91bmQsIGFjdGlvbiBpcyBjYWxsZWQgb24gaXQgYW5kIHRyYXZlcnNhbCBkb2VzIG5vdCBjb250aW51ZSBpbnNpZGUgdGhlIG5vZGUuXHJcbiAgICAgKiBBY3Rpb24gaXMgKm5vdCogY2FsbGVkIG9uIHRoaXMgbm9kZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFUcmVlLjxUPil9IGFjdGlvbiBBY3Rpb24gdG8gYmUgY2FsbGVkIGZvciBlYWNoIGNoaWxkLlxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS5mb3JFYWNoSW1tZWRpYXRlRGVzY2VuZGFudFdpdGhWYWx1ZSA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGQpIHtcclxuICAgICAgICAgICAgaWYgKGNoaWxkLmdldFZhbHVlKCkgIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICBhY3Rpb24oY2hpbGQpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBjaGlsZC5mb3JFYWNoSW1tZWRpYXRlRGVzY2VuZGFudFdpdGhWYWx1ZShhY3Rpb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IVBhdGh9IFRoZSBwYXRoIG9mIHRoaXMgdHJlZSBub2RlLCBhcyBhIFBhdGguXHJcbiAgICAgKi9cclxuICAgIFRyZWUucHJvdG90eXBlLnBhdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYXRoKHRoaXMucGFyZW50XyA9PT0gbnVsbFxyXG4gICAgICAgICAgICA/IHRoaXMubmFtZV9cclxuICAgICAgICAgICAgOiB0aGlzLnBhcmVudF8ucGF0aCgpICsgJy8nICsgdGhpcy5uYW1lXyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSB0cmVlIG5vZGUuXHJcbiAgICAgKi9cclxuICAgIFRyZWUucHJvdG90eXBlLm5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZV87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/VHJlZX0gVGhlIHBhcmVudCB0cmVlIG5vZGUsIG9yIG51bGwgaWYgdGhpcyBpcyB0aGUgcm9vdCBvZiB0aGUgdHJlZS5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUucGFyZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIG9yIHJlbW92ZXMgdGhpcyBjaGlsZCBmcm9tIGl0cyBwYXJlbnQgYmFzZWQgb24gd2hldGhlciBpdCdzIGVtcHR5IG9yIG5vdC5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS51cGRhdGVQYXJlbnRzXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJlbnRfICE9PSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLnBhcmVudF8udXBkYXRlQ2hpbGRfKHRoaXMubmFtZV8sIHRoaXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBvciByZW1vdmVzIHRoZSBwYXNzZWQgY2hpbGQgdG8gdGhpcyB0cmVlIG5vZGUsIGRlcGVuZGluZyBvbiB3aGV0aGVyIGl0J3MgZW1wdHkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNoaWxkTmFtZSBUaGUgbmFtZSBvZiB0aGUgY2hpbGQgdG8gdXBkYXRlLlxyXG4gICAgICogQHBhcmFtIHshVHJlZS48VD59IGNoaWxkIFRoZSBjaGlsZCB0byB1cGRhdGUuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS51cGRhdGVDaGlsZF8gPSBmdW5jdGlvbiAoY2hpbGROYW1lLCBjaGlsZCkge1xyXG4gICAgICAgIHZhciBjaGlsZEVtcHR5ID0gY2hpbGQuaXNFbXB0eSgpO1xyXG4gICAgICAgIHZhciBjaGlsZEV4aXN0cyA9IHV0aWwuY29udGFpbnModGhpcy5ub2RlXy5jaGlsZHJlbiwgY2hpbGROYW1lKTtcclxuICAgICAgICBpZiAoY2hpbGRFbXB0eSAmJiBjaGlsZEV4aXN0cykge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5ub2RlXy5jaGlsZHJlbltjaGlsZE5hbWVdO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGVfLmNoaWxkQ291bnQtLTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVQYXJlbnRzXygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghY2hpbGRFbXB0eSAmJiAhY2hpbGRFeGlzdHMpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlXy5jaGlsZHJlbltjaGlsZE5hbWVdID0gY2hpbGQubm9kZV87XHJcbiAgICAgICAgICAgIHRoaXMubm9kZV8uY2hpbGRDb3VudCsrO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBhcmVudHNfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBUcmVlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gVE9ETzogVGhpcyBpcyBwcmV0dHkgbWVzc3kuICBJZGVhbGx5LCBhIGxvdCBvZiB0aGlzIHdvdWxkIG1vdmUgaW50byBGaXJlYmFzZURhdGEsIG9yIGEgdHJhbnNhY3Rpb24tc3BlY2lmaWNcclxuLy8gY29tcG9uZW50IHVzZWQgYnkgRmlyZWJhc2VEYXRhLCBidXQgaXQgaGFzIHRpZXMgdG8gdXNlciBjYWxsYmFja3MgKHRyYW5zYWN0aW9uIHVwZGF0ZSBhbmQgb25Db21wbGV0ZSkgYXMgd2VsbFxyXG4vLyBhcyB0aGUgcmVhbHRpbWUgY29ubmVjdGlvbiAodG8gc2VuZCB0cmFuc2FjdGlvbnMgdG8gdGhlIHNlcnZlcikuICBTbyB0aGF0IGFsbCBuZWVkcyB0byBiZSBkZWNvdXBsZWQgZmlyc3QuXHJcbi8vIEZvciBub3cgaXQncyBwYXJ0IG9mIFJlcG8sIGJ1dCBpbiBpdHMgb3duIGZpbGUuXHJcbi8qKlxyXG4gKiBAZW51bSB7bnVtYmVyfVxyXG4gKi9cclxudmFyIFRyYW5zYWN0aW9uU3RhdHVzO1xyXG4oZnVuY3Rpb24gKFRyYW5zYWN0aW9uU3RhdHVzKSB7XHJcbiAgICAvLyBXZSd2ZSBydW4gdGhlIHRyYW5zYWN0aW9uIGFuZCB1cGRhdGVkIHRyYW5zYWN0aW9uUmVzdWx0RGF0YV8gd2l0aCB0aGUgcmVzdWx0LCBidXQgaXQgaXNuJ3QgY3VycmVudGx5IHNlbnQgdG8gdGhlXHJcbiAgICAvLyBzZXJ2ZXIuIEEgdHJhbnNhY3Rpb24gd2lsbCBnbyBmcm9tIFJVTiAtPiBTRU5UIC0+IFJVTiBpZiBpdCBjb21lcyBiYWNrIGZyb20gdGhlIHNlcnZlciBhcyByZWplY3RlZCBkdWUgdG9cclxuICAgIC8vIG1pc21hdGNoZWQgaGFzaC5cclxuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1RyYW5zYWN0aW9uU3RhdHVzW1wiUlVOXCJdID0gMF0gPSBcIlJVTlwiO1xyXG4gICAgLy8gV2UndmUgcnVuIHRoZSB0cmFuc2FjdGlvbiBhbmQgc2VudCBpdCB0byB0aGUgc2VydmVyIGFuZCBpdCdzIGN1cnJlbnRseSBvdXRzdGFuZGluZyAoaGFzbid0IGNvbWUgYmFjayBhcyBhY2NlcHRlZFxyXG4gICAgLy8gb3IgcmVqZWN0ZWQgeWV0KS5cclxuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1RyYW5zYWN0aW9uU3RhdHVzW1wiU0VOVFwiXSA9IDFdID0gXCJTRU5UXCI7XHJcbiAgICAvLyBUZW1wb3Jhcnkgc3RhdGUgdXNlZCB0byBtYXJrIGNvbXBsZXRlZCB0cmFuc2FjdGlvbnMgKHdoZXRoZXIgc3VjY2Vzc2Z1bCBvciBhYm9ydGVkKS4gIFRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlXHJcbiAgICAvLyByZW1vdmVkIHdoZW4gd2UgZ2V0IGEgY2hhbmNlIHRvIHBydW5lIGNvbXBsZXRlZCBvbmVzLlxyXG4gICAgVHJhbnNhY3Rpb25TdGF0dXNbVHJhbnNhY3Rpb25TdGF0dXNbXCJDT01QTEVURURcIl0gPSAyXSA9IFwiQ09NUExFVEVEXCI7XHJcbiAgICAvLyBVc2VkIHdoZW4gYW4gYWxyZWFkeS1zZW50IHRyYW5zYWN0aW9uIG5lZWRzIHRvIGJlIGFib3J0ZWQgKGUuZy4gZHVlIHRvIGEgY29uZmxpY3Rpbmcgc2V0KCkgY2FsbCB0aGF0IHdhcyBtYWRlKS5cclxuICAgIC8vIElmIGl0IGNvbWVzIGJhY2sgYXMgdW5zdWNjZXNzZnVsLCB3ZSdsbCBhYm9ydCBpdC5cclxuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1RyYW5zYWN0aW9uU3RhdHVzW1wiU0VOVF9ORUVEU19BQk9SVFwiXSA9IDNdID0gXCJTRU5UX05FRURTX0FCT1JUXCI7XHJcbiAgICAvLyBUZW1wb3Jhcnkgc3RhdGUgdXNlZCB0byBtYXJrIHRyYW5zYWN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgYWJvcnRlZC5cclxuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1RyYW5zYWN0aW9uU3RhdHVzW1wiTkVFRFNfQUJPUlRcIl0gPSA0XSA9IFwiTkVFRFNfQUJPUlRcIjtcclxufSkoVHJhbnNhY3Rpb25TdGF0dXMgfHwgKFRyYW5zYWN0aW9uU3RhdHVzID0ge30pKTtcclxuLyoqXHJcbiAqIElmIGEgdHJhbnNhY3Rpb24gZG9lcyBub3Qgc3VjY2VlZCBhZnRlciAyNSByZXRyaWVzLCB3ZSBhYm9ydCBpdC4gIEFtb25nIG90aGVyIHRoaW5ncyB0aGlzIGVuc3VyZSB0aGF0IGlmIHRoZXJlJ3NcclxuICogZXZlciBhIGJ1ZyBjYXVzaW5nIGEgbWlzbWF0Y2ggYmV0d2VlbiBjbGllbnQgLyBzZXJ2ZXIgaGFzaGVzIGZvciBzb21lIGRhdGEsIHdlIHdvbid0IHJldHJ5IGluZGVmaW5pdGVseS5cclxuICogQHR5cGUge251bWJlcn1cclxuICogQGNvbnN0XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5SZXBvLk1BWF9UUkFOU0FDVElPTl9SRVRSSUVTXyA9IDI1O1xyXG4vKipcclxuICogU2V0dXAgdGhlIHRyYW5zYWN0aW9uIGRhdGEgc3RydWN0dXJlc1xyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuUmVwby5wcm90b3R5cGUudHJhbnNhY3Rpb25zX2luaXRfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZXMgcXVldWVzIG9mIG91dHN0YW5kaW5nIHRyYW5zYWN0aW9ucyBmb3IgRmlyZWJhc2UgbG9jYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEB0eXBlIHshVHJlZS48QXJyYXkuPCFUcmFuc2FjdGlvbj4+fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy50cmFuc2FjdGlvblF1ZXVlVHJlZV8gPSBuZXcgVHJlZSgpO1xyXG59O1xyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyB0cmFuc2FjdGlvbiwgYWRkcyBpdCB0byB0aGUgdHJhbnNhY3Rpb25zIHdlJ3JlIHRyYWNraW5nLCBhbmQgc2VuZHMgaXQgdG8gdGhlIHNlcnZlciBpZiBwb3NzaWJsZS5cclxuICpcclxuICogQHBhcmFtIHshUGF0aH0gcGF0aCBQYXRoIGF0IHdoaWNoIHRvIGRvIHRyYW5zYWN0aW9uLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCopOip9IHRyYW5zYWN0aW9uVXBkYXRlIFVwZGF0ZSBjYWxsYmFjay5cclxuICogQHBhcmFtIHs/ZnVuY3Rpb24oP0Vycm9yLCBib29sZWFuLCA/RGF0YVNuYXBzaG90KX0gb25Db21wbGV0ZSBDb21wbGV0aW9uIGNhbGxiYWNrLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFwcGx5TG9jYWxseSBXaGV0aGVyIG9yIG5vdCB0byBtYWtlIGludGVybWVkaWF0ZSByZXN1bHRzIHZpc2libGVcclxuICovXHJcblJlcG8ucHJvdG90eXBlLnN0YXJ0VHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAocGF0aCwgdHJhbnNhY3Rpb25VcGRhdGUsIG9uQ29tcGxldGUsIGFwcGx5TG9jYWxseSkge1xyXG4gICAgdGhpcy5sb2dfKCd0cmFuc2FjdGlvbiBvbiAnICsgcGF0aCk7XHJcbiAgICAvLyBBZGQgYSB3YXRjaCB0byBtYWtlIHN1cmUgd2UgZ2V0IHNlcnZlciB1cGRhdGVzLlxyXG4gICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICB2YXIgd2F0Y2hSZWYgPSBuZXcgUmVmZXJlbmNlKHRoaXMsIHBhdGgpO1xyXG4gICAgd2F0Y2hSZWYub24oJ3ZhbHVlJywgdmFsdWVDYWxsYmFjayk7XHJcbiAgICB2YXIgdW53YXRjaGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHdhdGNoUmVmLm9mZigndmFsdWUnLCB2YWx1ZUNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICAvLyBJbml0aWFsaXplIHRyYW5zYWN0aW9uLlxyXG4gICAgdmFyIHRyYW5zYWN0aW9uID0ge1xyXG4gICAgICAgIHBhdGg6IHBhdGgsXHJcbiAgICAgICAgdXBkYXRlOiB0cmFuc2FjdGlvblVwZGF0ZSxcclxuICAgICAgICBvbkNvbXBsZXRlOiBvbkNvbXBsZXRlLFxyXG4gICAgICAgIC8vIE9uZSBvZiBUcmFuc2FjdGlvblN0YXR1cyBlbnVtcy5cclxuICAgICAgICBzdGF0dXM6IG51bGwsXHJcbiAgICAgICAgLy8gVXNlZCB3aGVuIGNvbWJpbmluZyB0cmFuc2FjdGlvbnMgYXQgZGlmZmVyZW50IGxvY2F0aW9ucyB0byBmaWd1cmUgb3V0IHdoaWNoIG9uZSBnb2VzIGZpcnN0LlxyXG4gICAgICAgIG9yZGVyOiBMVUlER2VuZXJhdG9yKCksXHJcbiAgICAgICAgLy8gV2hldGhlciB0byByYWlzZSBsb2NhbCBldmVudHMgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXHJcbiAgICAgICAgYXBwbHlMb2NhbGx5OiBhcHBseUxvY2FsbHksXHJcbiAgICAgICAgLy8gQ291bnQgb2YgaG93IG1hbnkgdGltZXMgd2UndmUgcmV0cmllZCB0aGUgdHJhbnNhY3Rpb24uXHJcbiAgICAgICAgcmV0cnlDb3VudDogMCxcclxuICAgICAgICAvLyBGdW5jdGlvbiB0byBjYWxsIHRvIGNsZWFuIHVwIG91ciAub24oKSBsaXN0ZW5lci5cclxuICAgICAgICB1bndhdGNoZXI6IHVud2F0Y2hlcixcclxuICAgICAgICAvLyBTdG9yZXMgd2h5IGEgdHJhbnNhY3Rpb24gd2FzIGFib3J0ZWQuXHJcbiAgICAgICAgYWJvcnRSZWFzb246IG51bGwsXHJcbiAgICAgICAgY3VycmVudFdyaXRlSWQ6IG51bGwsXHJcbiAgICAgICAgY3VycmVudElucHV0U25hcHNob3Q6IG51bGwsXHJcbiAgICAgICAgY3VycmVudE91dHB1dFNuYXBzaG90UmF3OiBudWxsLFxyXG4gICAgICAgIGN1cnJlbnRPdXRwdXRTbmFwc2hvdFJlc29sdmVkOiBudWxsXHJcbiAgICB9O1xyXG4gICAgLy8gUnVuIHRyYW5zYWN0aW9uIGluaXRpYWxseS5cclxuICAgIHZhciBjdXJyZW50U3RhdGUgPSB0aGlzLmdldExhdGVzdFN0YXRlXyhwYXRoKTtcclxuICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRJbnB1dFNuYXBzaG90ID0gY3VycmVudFN0YXRlO1xyXG4gICAgdmFyIG5ld1ZhbCA9IHRyYW5zYWN0aW9uLnVwZGF0ZShjdXJyZW50U3RhdGUudmFsKCkpO1xyXG4gICAgaWYgKG5ld1ZhbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgLy8gQWJvcnQgdHJhbnNhY3Rpb24uXHJcbiAgICAgICAgdHJhbnNhY3Rpb24udW53YXRjaGVyKCk7XHJcbiAgICAgICAgdHJhbnNhY3Rpb24uY3VycmVudE91dHB1dFNuYXBzaG90UmF3ID0gbnVsbDtcclxuICAgICAgICB0cmFuc2FjdGlvbi5jdXJyZW50T3V0cHV0U25hcHNob3RSZXNvbHZlZCA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLm9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgLy8gV2UganVzdCBzZXQgdGhlIGlucHV0IHNuYXBzaG90LCBzbyB0aGlzIGNhc3Qgc2hvdWxkIGJlIHNhZmVcclxuICAgICAgICAgICAgdmFyIHNuYXBzaG90ID0gbmV3IERhdGFTbmFwc2hvdCh0cmFuc2FjdGlvbi5jdXJyZW50SW5wdXRTbmFwc2hvdCwgbmV3IFJlZmVyZW5jZSh0aGlzLCB0cmFuc2FjdGlvbi5wYXRoKSwgUFJJT1JJVFlfSU5ERVgpO1xyXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5vbkNvbXBsZXRlKG51bGwsIGZhbHNlLCBzbmFwc2hvdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGEoJ3RyYW5zYWN0aW9uIGZhaWxlZDogRGF0YSByZXR1cm5lZCAnLCBuZXdWYWwsIHRyYW5zYWN0aW9uLnBhdGgpO1xyXG4gICAgICAgIC8vIE1hcmsgYXMgcnVuIGFuZCBhZGQgdG8gb3VyIHF1ZXVlLlxyXG4gICAgICAgIHRyYW5zYWN0aW9uLnN0YXR1cyA9IFRyYW5zYWN0aW9uU3RhdHVzLlJVTjtcclxuICAgICAgICB2YXIgcXVldWVOb2RlID0gdGhpcy50cmFuc2FjdGlvblF1ZXVlVHJlZV8uc3ViVHJlZShwYXRoKTtcclxuICAgICAgICB2YXIgbm9kZVF1ZXVlID0gcXVldWVOb2RlLmdldFZhbHVlKCkgfHwgW107XHJcbiAgICAgICAgbm9kZVF1ZXVlLnB1c2godHJhbnNhY3Rpb24pO1xyXG4gICAgICAgIHF1ZXVlTm9kZS5zZXRWYWx1ZShub2RlUXVldWUpO1xyXG4gICAgICAgIC8vIFVwZGF0ZSB2aXNpYmxlRGF0YSBhbmQgcmFpc2UgZXZlbnRzXHJcbiAgICAgICAgLy8gTm90ZTogV2UgaW50ZW50aW9uYWxseSByYWlzZSBldmVudHMgYWZ0ZXIgdXBkYXRpbmcgYWxsIG9mIG91ciB0cmFuc2FjdGlvbiBzdGF0ZSwgc2luY2UgdGhlIHVzZXIgY291bGRcclxuICAgICAgICAvLyBzdGFydCBuZXcgdHJhbnNhY3Rpb25zIGZyb20gdGhlIGV2ZW50IGNhbGxiYWNrcy5cclxuICAgICAgICB2YXIgcHJpb3JpdHlGb3JOb2RlID0gdm9pZCAwO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbmV3VmFsID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgICAgICBuZXdWYWwgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgdXRpbC5jb250YWlucyhuZXdWYWwsICcucHJpb3JpdHknKSkge1xyXG4gICAgICAgICAgICBwcmlvcml0eUZvck5vZGUgPSB1dGlsLnNhZmVHZXQobmV3VmFsLCAnLnByaW9yaXR5Jyk7XHJcbiAgICAgICAgICAgIHV0aWwuYXNzZXJ0KGlzVmFsaWRQcmlvcml0eShwcmlvcml0eUZvck5vZGUpLCAnSW52YWxpZCBwcmlvcml0eSByZXR1cm5lZCBieSB0cmFuc2FjdGlvbi4gJyArXHJcbiAgICAgICAgICAgICAgICAnUHJpb3JpdHkgbXVzdCBiZSBhIHZhbGlkIHN0cmluZywgZmluaXRlIG51bWJlciwgc2VydmVyIHZhbHVlLCBvciBudWxsLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uY2FsY0NvbXBsZXRlRXZlbnRDYWNoZShwYXRoKSB8fFxyXG4gICAgICAgICAgICAgICAgQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICAgICAgICAgIHByaW9yaXR5Rm9yTm9kZSA9IGN1cnJlbnROb2RlLmdldFByaW9yaXR5KCkudmFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaW9yaXR5Rm9yTm9kZSAvKiogQHR5cGUge251bGx8bnVtYmVyfHN0cmluZ30gKi8gPSBwcmlvcml0eUZvck5vZGU7XHJcbiAgICAgICAgdmFyIHNlcnZlclZhbHVlcyA9IHRoaXMuZ2VuZXJhdGVTZXJ2ZXJWYWx1ZXMoKTtcclxuICAgICAgICB2YXIgbmV3Tm9kZVVucmVzb2x2ZWQgPSBub2RlRnJvbUpTT04kMShuZXdWYWwsIHByaW9yaXR5Rm9yTm9kZSk7XHJcbiAgICAgICAgdmFyIG5ld05vZGUgPSByZXNvbHZlRGVmZXJyZWRWYWx1ZVNuYXBzaG90KG5ld05vZGVVbnJlc29sdmVkLCBzZXJ2ZXJWYWx1ZXMpO1xyXG4gICAgICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRPdXRwdXRTbmFwc2hvdFJhdyA9IG5ld05vZGVVbnJlc29sdmVkO1xyXG4gICAgICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRPdXRwdXRTbmFwc2hvdFJlc29sdmVkID0gbmV3Tm9kZTtcclxuICAgICAgICB0cmFuc2FjdGlvbi5jdXJyZW50V3JpdGVJZCA9IHRoaXMuZ2V0TmV4dFdyaXRlSWRfKCk7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuc2VydmVyU3luY1RyZWVfLmFwcGx5VXNlck92ZXJ3cml0ZShwYXRoLCBuZXdOb2RlLCB0cmFuc2FjdGlvbi5jdXJyZW50V3JpdGVJZCwgdHJhbnNhY3Rpb24uYXBwbHlMb2NhbGx5KTtcclxuICAgICAgICB0aGlzLmV2ZW50UXVldWVfLnJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocGF0aCwgZXZlbnRzKTtcclxuICAgICAgICB0aGlzLnNlbmRSZWFkeVRyYW5zYWN0aW9uc18oKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPj19IGV4Y2x1ZGVTZXRzIEEgc3BlY2lmaWMgc2V0IHRvIGV4Y2x1ZGVcclxuICogQHJldHVybiB7Tm9kZX1cclxuICogQHByaXZhdGVcclxuICovXHJcblJlcG8ucHJvdG90eXBlLmdldExhdGVzdFN0YXRlXyA9IGZ1bmN0aW9uIChwYXRoLCBleGNsdWRlU2V0cykge1xyXG4gICAgcmV0dXJuICh0aGlzLnNlcnZlclN5bmNUcmVlXy5jYWxjQ29tcGxldGVFdmVudENhY2hlKHBhdGgsIGV4Y2x1ZGVTZXRzKSB8fFxyXG4gICAgICAgIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFKTtcclxufTtcclxuLyoqXHJcbiAqIFNlbmRzIGFueSBhbHJlYWR5LXJ1biB0cmFuc2FjdGlvbnMgdGhhdCBhcmVuJ3Qgd2FpdGluZyBmb3Igb3V0c3RhbmRpbmcgdHJhbnNhY3Rpb25zIHRvXHJcbiAqIGNvbXBsZXRlLlxyXG4gKlxyXG4gKiBFeHRlcm5hbGx5IGl0J3MgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzLCBidXQgaXQgY2FsbHMgaXRzZWxmIHJlY3Vyc2l2ZWx5IHdpdGggYSBwYXJ0aWN1bGFyXHJcbiAqIHRyYW5zYWN0aW9uUXVldWVUcmVlIG5vZGUgdG8gcmVjdXJzZSB0aHJvdWdoIHRoZSB0cmVlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1RyZWUuPEFycmF5LjxUcmFuc2FjdGlvbj4+PX0gbm9kZSAgdHJhbnNhY3Rpb25RdWV1ZVRyZWUgbm9kZSB0byBzdGFydCBhdC5cclxuICogQHByaXZhdGVcclxuICovXHJcblJlcG8ucHJvdG90eXBlLnNlbmRSZWFkeVRyYW5zYWN0aW9uc18gPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIGlmIChub2RlID09PSB2b2lkIDApIHsgbm9kZSA9IHRoaXMudHJhbnNhY3Rpb25RdWV1ZVRyZWVfOyB9XHJcbiAgICAvLyBCZWZvcmUgcmVjdXJzaW5nLCBtYWtlIHN1cmUgYW55IGNvbXBsZXRlZCB0cmFuc2FjdGlvbnMgYXJlIHJlbW92ZWQuXHJcbiAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgICB0aGlzLnBydW5lQ29tcGxldGVkVHJhbnNhY3Rpb25zQmVsb3dOb2RlXyhub2RlKTtcclxuICAgIH1cclxuICAgIGlmIChub2RlLmdldFZhbHVlKCkgIT09IG51bGwpIHtcclxuICAgICAgICB2YXIgcXVldWUgPSB0aGlzLmJ1aWxkVHJhbnNhY3Rpb25RdWV1ZV8obm9kZSk7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQocXVldWUubGVuZ3RoID4gMCwgJ1NlbmRpbmcgemVybyBsZW5ndGggdHJhbnNhY3Rpb24gcXVldWUnKTtcclxuICAgICAgICB2YXIgYWxsUnVuID0gcXVldWUuZXZlcnkoZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7IHJldHVybiB0cmFuc2FjdGlvbi5zdGF0dXMgPT09IFRyYW5zYWN0aW9uU3RhdHVzLlJVTjsgfSk7XHJcbiAgICAgICAgLy8gSWYgdGhleSdyZSBhbGwgcnVuIChhbmQgbm90IHNlbnQpLCB3ZSBjYW4gc2VuZCB0aGVtLiAgRWxzZSwgd2UgbXVzdCB3YWl0LlxyXG4gICAgICAgIGlmIChhbGxSdW4pIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kVHJhbnNhY3Rpb25RdWV1ZV8obm9kZS5wYXRoKCksIHF1ZXVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChub2RlLmhhc0NoaWxkcmVuKCkpIHtcclxuICAgICAgICBub2RlLmZvckVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNlbmRSZWFkeVRyYW5zYWN0aW9uc18oY2hpbGROb2RlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEdpdmVuIGEgbGlzdCBvZiBydW4gdHJhbnNhY3Rpb25zLCBzZW5kIHRoZW0gdG8gdGhlIHNlcnZlciBhbmQgdGhlbiBoYW5kbGUgdGhlIHJlc3VsdCAoc3VjY2VzcyBvciBmYWlsdXJlKS5cclxuICpcclxuICogQHBhcmFtIHshUGF0aH0gcGF0aCBUaGUgbG9jYXRpb24gb2YgdGhlIHF1ZXVlLlxyXG4gKiBAcGFyYW0geyFBcnJheS48VHJhbnNhY3Rpb24+fSBxdWV1ZSBRdWV1ZSBvZiB0cmFuc2FjdGlvbnMgdW5kZXIgdGhlIHNwZWNpZmllZCBsb2NhdGlvbi5cclxuICogQHByaXZhdGVcclxuICovXHJcblJlcG8ucHJvdG90eXBlLnNlbmRUcmFuc2FjdGlvblF1ZXVlXyA9IGZ1bmN0aW9uIChwYXRoLCBxdWV1ZSkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIC8vIE1hcmsgdHJhbnNhY3Rpb25zIGFzIHNlbnQgYW5kIGluY3JlbWVudCByZXRyeSBjb3VudCFcclxuICAgIHZhciBzZXRzVG9JZ25vcmUgPSBxdWV1ZS5tYXAoZnVuY3Rpb24gKHR4bikge1xyXG4gICAgICAgIHJldHVybiB0eG4uY3VycmVudFdyaXRlSWQ7XHJcbiAgICB9KTtcclxuICAgIHZhciBsYXRlc3RTdGF0ZSA9IHRoaXMuZ2V0TGF0ZXN0U3RhdGVfKHBhdGgsIHNldHNUb0lnbm9yZSk7XHJcbiAgICB2YXIgc25hcFRvU2VuZCA9IGxhdGVzdFN0YXRlO1xyXG4gICAgdmFyIGxhdGVzdEhhc2ggPSBsYXRlc3RTdGF0ZS5oYXNoKCk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHR4biA9IHF1ZXVlW2ldO1xyXG4gICAgICAgIHV0aWwuYXNzZXJ0KHR4bi5zdGF0dXMgPT09IFRyYW5zYWN0aW9uU3RhdHVzLlJVTiwgJ3RyeVRvU2VuZFRyYW5zYWN0aW9uUXVldWVfOiBpdGVtcyBpbiBxdWV1ZSBzaG91bGQgYWxsIGJlIHJ1bi4nKTtcclxuICAgICAgICB0eG4uc3RhdHVzID0gVHJhbnNhY3Rpb25TdGF0dXMuU0VOVDtcclxuICAgICAgICB0eG4ucmV0cnlDb3VudCsrO1xyXG4gICAgICAgIHZhciByZWxhdGl2ZVBhdGggPSBQYXRoLnJlbGF0aXZlUGF0aChwYXRoLCB0eG4ucGF0aCk7XHJcbiAgICAgICAgLy8gSWYgd2UndmUgZ290dGVuIHRvIHRoaXMgcG9pbnQsIHRoZSBvdXRwdXQgc25hcHNob3QgbXVzdCBiZSBkZWZpbmVkLlxyXG4gICAgICAgIHNuYXBUb1NlbmQgPSBzbmFwVG9TZW5kLnVwZGF0ZUNoaWxkKHJlbGF0aXZlUGF0aCAvKipAdHlwZSB7IU5vZGV9ICovLCB0eG4uY3VycmVudE91dHB1dFNuYXBzaG90UmF3KTtcclxuICAgIH1cclxuICAgIHZhciBkYXRhVG9TZW5kID0gc25hcFRvU2VuZC52YWwodHJ1ZSk7XHJcbiAgICB2YXIgcGF0aFRvU2VuZCA9IHBhdGg7XHJcbiAgICAvLyBTZW5kIHRoZSBwdXQuXHJcbiAgICB0aGlzLnNlcnZlcl8ucHV0KHBhdGhUb1NlbmQudG9TdHJpbmcoKSwgZGF0YVRvU2VuZCwgZnVuY3Rpb24gKHN0YXR1cykge1xyXG4gICAgICAgIF90aGlzLmxvZ18oJ3RyYW5zYWN0aW9uIHB1dCByZXNwb25zZScsIHtcclxuICAgICAgICAgICAgcGF0aDogcGF0aFRvU2VuZC50b1N0cmluZygpLFxyXG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1c1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBldmVudHMgPSBbXTtcclxuICAgICAgICBpZiAoc3RhdHVzID09PSAnb2snKSB7XHJcbiAgICAgICAgICAgIC8vIFF1ZXVlIHVwIHRoZSBjYWxsYmFja3MgYW5kIGZpcmUgdGhlbSBhZnRlciBjbGVhbmluZyB1cCBhbGwgb2Ygb3VyIHRyYW5zYWN0aW9uIHN0YXRlLCBzaW5jZVxyXG4gICAgICAgICAgICAvLyB0aGUgY2FsbGJhY2sgY291bGQgdHJpZ2dlciBtb3JlIHRyYW5zYWN0aW9ucyBvciBzZXRzLlxyXG4gICAgICAgICAgICB2YXIgY2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlW2ldLnN0YXR1cyA9IFRyYW5zYWN0aW9uU3RhdHVzLkNPTVBMRVRFRDtcclxuICAgICAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQoX3RoaXMuc2VydmVyU3luY1RyZWVfLmFja1VzZXJXcml0ZShxdWV1ZVtpXS5jdXJyZW50V3JpdGVJZCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlW2ldLm9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBuZXZlciB1bnNldCB0aGUgb3V0cHV0IHNuYXBzaG90LCBhbmQgZ2l2ZW4gdGhhdCB0aGlzIHRyYW5zYWN0aW9uIGlzIGNvbXBsZXRlLCBpdCBzaG91bGQgYmUgc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBxdWV1ZVtpXS5jdXJyZW50T3V0cHV0U25hcHNob3RSZXNvbHZlZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gbmV3IFJlZmVyZW5jZShfdGhpcywgcXVldWVbaV0ucGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNuYXBzaG90ID0gbmV3IERhdGFTbmFwc2hvdChub2RlLCByZWYsIFBSSU9SSVRZX0lOREVYKTtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MucHVzaChxdWV1ZVtpXS5vbkNvbXBsZXRlLmJpbmQobnVsbCwgbnVsbCwgdHJ1ZSwgc25hcHNob3QpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHF1ZXVlW2ldLnVud2F0Y2hlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE5vdyByZW1vdmUgdGhlIGNvbXBsZXRlZCB0cmFuc2FjdGlvbnMuXHJcbiAgICAgICAgICAgIF90aGlzLnBydW5lQ29tcGxldGVkVHJhbnNhY3Rpb25zQmVsb3dOb2RlXyhfdGhpcy50cmFuc2FjdGlvblF1ZXVlVHJlZV8uc3ViVHJlZShwYXRoKSk7XHJcbiAgICAgICAgICAgIC8vIFRoZXJlIG1heSBiZSBwZW5kaW5nIHRyYW5zYWN0aW9ucyB0aGF0IHdlIGNhbiBub3cgc2VuZC5cclxuICAgICAgICAgICAgX3RoaXMuc2VuZFJlYWR5VHJhbnNhY3Rpb25zXygpO1xyXG4gICAgICAgICAgICBfdGhpcy5ldmVudFF1ZXVlXy5yYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoKHBhdGgsIGV2ZW50cyk7XHJcbiAgICAgICAgICAgIC8vIEZpbmFsbHksIHRyaWdnZXIgb25Db21wbGV0ZSBjYWxsYmFja3MuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBleGNlcHRpb25HdWFyZChjYWxsYmFja3NbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0cmFuc2FjdGlvbnMgYXJlIG5vIGxvbmdlciBzZW50LiAgVXBkYXRlIHRoZWlyIHN0YXR1cyBhcHByb3ByaWF0ZWx5LlxyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnZGF0YXN0YWxlJykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChxdWV1ZVtpXS5zdGF0dXMgPT09IFRyYW5zYWN0aW9uU3RhdHVzLlNFTlRfTkVFRFNfQUJPUlQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlW2ldLnN0YXR1cyA9IFRyYW5zYWN0aW9uU3RhdHVzLk5FRURTX0FCT1JUO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVldWVbaV0uc3RhdHVzID0gVHJhbnNhY3Rpb25TdGF0dXMuUlVOO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2FybigndHJhbnNhY3Rpb24gYXQgJyArIHBhdGhUb1NlbmQudG9TdHJpbmcoKSArICcgZmFpbGVkOiAnICsgc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVtpXS5zdGF0dXMgPSBUcmFuc2FjdGlvblN0YXR1cy5ORUVEU19BQk9SVDtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVtpXS5hYm9ydFJlYXNvbiA9IHN0YXR1cztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5yZXJ1blRyYW5zYWN0aW9uc18ocGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgbGF0ZXN0SGFzaCk7XHJcbn07XHJcbi8qKlxyXG4gKiBGaW5kcyBhbGwgdHJhbnNhY3Rpb25zIGRlcGVuZGVudCBvbiB0aGUgZGF0YSBhdCBjaGFuZ2VkUGF0aCBhbmQgcmVydW5zIHRoZW0uXHJcbiAqXHJcbiAqIFNob3VsZCBiZSBjYWxsZWQgYW55IHRpbWUgY2FjaGVkIGRhdGEgY2hhbmdlcy5cclxuICpcclxuICogUmV0dXJuIHRoZSBoaWdoZXN0IHBhdGggdGhhdCB3YXMgYWZmZWN0ZWQgYnkgcmVydW5uaW5nIHRyYW5zYWN0aW9ucy4gIFRoaXMgaXMgdGhlIHBhdGggYXQgd2hpY2ggZXZlbnRzIG5lZWQgdG9cclxuICogYmUgcmFpc2VkIGZvci5cclxuICpcclxuICogQHBhcmFtIHshUGF0aH0gY2hhbmdlZFBhdGggVGhlIHBhdGggaW4gbWVyZ2VkRGF0YSB0aGF0IGNoYW5nZWQuXHJcbiAqIEByZXR1cm4geyFQYXRofSBUaGUgcm9vdG1vc3QgcGF0aCB0aGF0IHdhcyBhZmZlY3RlZCBieSByZXJ1bm5pbmcgdHJhbnNhY3Rpb25zLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuUmVwby5wcm90b3R5cGUucmVydW5UcmFuc2FjdGlvbnNfID0gZnVuY3Rpb24gKGNoYW5nZWRQYXRoKSB7XHJcbiAgICB2YXIgcm9vdE1vc3RUcmFuc2FjdGlvbk5vZGUgPSB0aGlzLmdldEFuY2VzdG9yVHJhbnNhY3Rpb25Ob2RlXyhjaGFuZ2VkUGF0aCk7XHJcbiAgICB2YXIgcGF0aCA9IHJvb3RNb3N0VHJhbnNhY3Rpb25Ob2RlLnBhdGgoKTtcclxuICAgIHZhciBxdWV1ZSA9IHRoaXMuYnVpbGRUcmFuc2FjdGlvblF1ZXVlXyhyb290TW9zdFRyYW5zYWN0aW9uTm9kZSk7XHJcbiAgICB0aGlzLnJlcnVuVHJhbnNhY3Rpb25RdWV1ZV8ocXVldWUsIHBhdGgpO1xyXG4gICAgcmV0dXJuIHBhdGg7XHJcbn07XHJcbi8qKlxyXG4gKiBEb2VzIGFsbCB0aGUgd29yayBvZiByZXJ1bm5pbmcgdHJhbnNhY3Rpb25zIChhcyB3ZWxsIGFzIGNsZWFucyB1cCBhYm9ydGVkIHRyYW5zYWN0aW9ucyBhbmQgd2hhdG5vdCkuXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXkuPFRyYW5zYWN0aW9uPn0gcXVldWUgVGhlIHF1ZXVlIG9mIHRyYW5zYWN0aW9ucyB0byBydW4uXHJcbiAqIEBwYXJhbSB7IVBhdGh9IHBhdGggVGhlIHBhdGggdGhlIHF1ZXVlIGlzIGZvci5cclxuICogQHByaXZhdGVcclxuICovXHJcblJlcG8ucHJvdG90eXBlLnJlcnVuVHJhbnNhY3Rpb25RdWV1ZV8gPSBmdW5jdGlvbiAocXVldWUsIHBhdGgpIHtcclxuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm47IC8vIE5vdGhpbmcgdG8gZG8hXHJcbiAgICB9XHJcbiAgICAvLyBRdWV1ZSB1cCB0aGUgY2FsbGJhY2tzIGFuZCBmaXJlIHRoZW0gYWZ0ZXIgY2xlYW5pbmcgdXAgYWxsIG9mIG91ciB0cmFuc2FjdGlvbiBzdGF0ZSwgc2luY2VcclxuICAgIC8vIHRoZSBjYWxsYmFjayBjb3VsZCB0cmlnZ2VyIG1vcmUgdHJhbnNhY3Rpb25zIG9yIHNldHMuXHJcbiAgICB2YXIgY2FsbGJhY2tzID0gW107XHJcbiAgICB2YXIgZXZlbnRzID0gW107XHJcbiAgICAvLyBJZ25vcmUgYWxsIG9mIHRoZSBzZXRzIHdlJ3JlIGdvaW5nIHRvIHJlLXJ1bi5cclxuICAgIHZhciB0eG5zVG9SZXJ1biA9IHF1ZXVlLmZpbHRlcihmdW5jdGlvbiAocSkge1xyXG4gICAgICAgIHJldHVybiBxLnN0YXR1cyA9PT0gVHJhbnNhY3Rpb25TdGF0dXMuUlVOO1xyXG4gICAgfSk7XHJcbiAgICB2YXIgc2V0c1RvSWdub3JlID0gdHhuc1RvUmVydW4ubWFwKGZ1bmN0aW9uIChxKSB7XHJcbiAgICAgICAgcmV0dXJuIHEuY3VycmVudFdyaXRlSWQ7XHJcbiAgICB9KTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBxdWV1ZVtpXTtcclxuICAgICAgICB2YXIgcmVsYXRpdmVQYXRoID0gUGF0aC5yZWxhdGl2ZVBhdGgocGF0aCwgdHJhbnNhY3Rpb24ucGF0aCk7XHJcbiAgICAgICAgdmFyIGFib3J0VHJhbnNhY3Rpb24gPSBmYWxzZSwgYWJvcnRSZWFzb24gPSB2b2lkIDA7XHJcbiAgICAgICAgdXRpbC5hc3NlcnQocmVsYXRpdmVQYXRoICE9PSBudWxsLCAncmVydW5UcmFuc2FjdGlvbnNVbmRlck5vZGVfOiByZWxhdGl2ZVBhdGggc2hvdWxkIG5vdCBiZSBudWxsLicpO1xyXG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi5zdGF0dXMgPT09IFRyYW5zYWN0aW9uU3RhdHVzLk5FRURTX0FCT1JUKSB7XHJcbiAgICAgICAgICAgIGFib3J0VHJhbnNhY3Rpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICBhYm9ydFJlYXNvbiA9IHRyYW5zYWN0aW9uLmFib3J0UmVhc29uO1xyXG4gICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHRoaXMuc2VydmVyU3luY1RyZWVfLmFja1VzZXJXcml0ZSh0cmFuc2FjdGlvbi5jdXJyZW50V3JpdGVJZCwgdHJ1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0cmFuc2FjdGlvbi5zdGF0dXMgPT09IFRyYW5zYWN0aW9uU3RhdHVzLlJVTikge1xyXG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb24ucmV0cnlDb3VudCA+PSBSZXBvLk1BWF9UUkFOU0FDVElPTl9SRVRSSUVTXykge1xyXG4gICAgICAgICAgICAgICAgYWJvcnRUcmFuc2FjdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBhYm9ydFJlYXNvbiA9ICdtYXhyZXRyeSc7XHJcbiAgICAgICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHRoaXMuc2VydmVyU3luY1RyZWVfLmFja1VzZXJXcml0ZSh0cmFuc2FjdGlvbi5jdXJyZW50V3JpdGVJZCwgdHJ1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBjb2RlIHJlcnVucyBhIHRyYW5zYWN0aW9uXHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5vZGUgPSB0aGlzLmdldExhdGVzdFN0YXRlXyh0cmFuc2FjdGlvbi5wYXRoLCBzZXRzVG9JZ25vcmUpO1xyXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uY3VycmVudElucHV0U25hcHNob3QgPSBjdXJyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdEYXRhID0gcXVldWVbaV0udXBkYXRlKGN1cnJlbnROb2RlLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdEYXRhICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YSgndHJhbnNhY3Rpb24gZmFpbGVkOiBEYXRhIHJldHVybmVkICcsIG5ld0RhdGEsIHRyYW5zYWN0aW9uLnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdEYXRhTm9kZSA9IG5vZGVGcm9tSlNPTiQxKG5ld0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNFeHBsaWNpdFByaW9yaXR5ID0gdHlwZW9mIG5ld0RhdGEgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGEgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvbnRhaW5zKG5ld0RhdGEsICcucHJpb3JpdHknKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0V4cGxpY2l0UHJpb3JpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2VlcCB0aGUgb2xkIHByaW9yaXR5IGlmIHRoZXJlIHdhc24ndCBhIHByaW9yaXR5IGV4cGxpY2l0bHkgc3BlY2lmaWVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEYXRhTm9kZSA9IG5ld0RhdGFOb2RlLnVwZGF0ZVByaW9yaXR5KGN1cnJlbnROb2RlLmdldFByaW9yaXR5KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkV3JpdGVJZCA9IHRyYW5zYWN0aW9uLmN1cnJlbnRXcml0ZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJ2ZXJWYWx1ZXMgPSB0aGlzLmdlbmVyYXRlU2VydmVyVmFsdWVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld05vZGVSZXNvbHZlZCA9IHJlc29sdmVEZWZlcnJlZFZhbHVlU25hcHNob3QobmV3RGF0YU5vZGUsIHNlcnZlclZhbHVlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uY3VycmVudE91dHB1dFNuYXBzaG90UmF3ID0gbmV3RGF0YU5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uY3VycmVudE91dHB1dFNuYXBzaG90UmVzb2x2ZWQgPSBuZXdOb2RlUmVzb2x2ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uY3VycmVudFdyaXRlSWQgPSB0aGlzLmdldE5leHRXcml0ZUlkXygpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE11dGF0ZXMgc2V0c1RvSWdub3JlIGluIHBsYWNlXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0c1RvSWdub3JlLnNwbGljZShzZXRzVG9JZ25vcmUuaW5kZXhPZihvbGRXcml0ZUlkKSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdCh0aGlzLnNlcnZlclN5bmNUcmVlXy5hcHBseVVzZXJPdmVyd3JpdGUodHJhbnNhY3Rpb24ucGF0aCwgbmV3Tm9kZVJlc29sdmVkLCB0cmFuc2FjdGlvbi5jdXJyZW50V3JpdGVJZCwgdHJhbnNhY3Rpb24uYXBwbHlMb2NhbGx5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdCh0aGlzLnNlcnZlclN5bmNUcmVlXy5hY2tVc2VyV3JpdGUob2xkV3JpdGVJZCwgdHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRUcmFuc2FjdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRSZWFzb24gPSAnbm9kYXRhJztcclxuICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHRoaXMuc2VydmVyU3luY1RyZWVfLmFja1VzZXJXcml0ZSh0cmFuc2FjdGlvbi5jdXJyZW50V3JpdGVJZCwgdHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZXZlbnRRdWV1ZV8ucmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChwYXRoLCBldmVudHMpO1xyXG4gICAgICAgIGV2ZW50cyA9IFtdO1xyXG4gICAgICAgIGlmIChhYm9ydFRyYW5zYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIC8vIEFib3J0LlxyXG4gICAgICAgICAgICBxdWV1ZVtpXS5zdGF0dXMgPSBUcmFuc2FjdGlvblN0YXR1cy5DT01QTEVURUQ7XHJcbiAgICAgICAgICAgIC8vIFJlbW92aW5nIGEgbGlzdGVuZXIgY2FuIHRyaWdnZXIgcHJ1bmluZyB3aGljaCBjYW4gbXVjayB3aXRoIG1lcmdlZERhdGEvdmlzaWJsZURhdGEgKGFzIGl0IHBydW5lcyBkYXRhKS5cclxuICAgICAgICAgICAgLy8gU28gZGVmZXIgdGhlIHVud2F0Y2hlciB1bnRpbCB3ZSdyZSBkb25lLlxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gKHVud2F0Y2hlcikge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCh1bndhdGNoZXIsIE1hdGguZmxvb3IoMCkpO1xyXG4gICAgICAgICAgICB9KShxdWV1ZVtpXS51bndhdGNoZXIpO1xyXG4gICAgICAgICAgICBpZiAocXVldWVbaV0ub25Db21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFib3J0UmVhc29uID09PSAnbm9kYXRhJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSBuZXcgUmVmZXJlbmNlKHRoaXMsIHF1ZXVlW2ldLnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHNldCB0aGlzIGZpZWxkIGltbWVkaWF0ZWx5LCBzbyBpdCdzIHNhZmUgdG8gY2FzdCB0byBhbiBhY3R1YWwgc25hcHNob3RcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdElucHV0IC8qKiBAdHlwZSB7IU5vZGV9ICovID0gcXVldWVbaV0uY3VycmVudElucHV0U25hcHNob3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNuYXBzaG90ID0gbmV3IERhdGFTbmFwc2hvdChsYXN0SW5wdXQsIHJlZiwgUFJJT1JJVFlfSU5ERVgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKHF1ZXVlW2ldLm9uQ29tcGxldGUuYmluZChudWxsLCBudWxsLCBmYWxzZSwgc25hcHNob3QpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKHF1ZXVlW2ldLm9uQ29tcGxldGUuYmluZChudWxsLCBuZXcgRXJyb3IoYWJvcnRSZWFzb24pLCBmYWxzZSwgbnVsbCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2xlYW4gdXAgY29tcGxldGVkIHRyYW5zYWN0aW9ucy5cclxuICAgIHRoaXMucHJ1bmVDb21wbGV0ZWRUcmFuc2FjdGlvbnNCZWxvd05vZGVfKHRoaXMudHJhbnNhY3Rpb25RdWV1ZVRyZWVfKTtcclxuICAgIC8vIE5vdyBmaXJlIGNhbGxiYWNrcywgbm93IHRoYXQgd2UncmUgaW4gYSBnb29kLCBrbm93biBzdGF0ZS5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZXhjZXB0aW9uR3VhcmQoY2FsbGJhY2tzW2ldKTtcclxuICAgIH1cclxuICAgIC8vIFRyeSB0byBzZW5kIHRoZSB0cmFuc2FjdGlvbiByZXN1bHQgdG8gdGhlIHNlcnZlci5cclxuICAgIHRoaXMuc2VuZFJlYWR5VHJhbnNhY3Rpb25zXygpO1xyXG59O1xyXG4vKipcclxuICogUmV0dXJucyB0aGUgcm9vdG1vc3QgYW5jZXN0b3Igbm9kZSBvZiB0aGUgc3BlY2lmaWVkIHBhdGggdGhhdCBoYXMgYSBwZW5kaW5nIHRyYW5zYWN0aW9uIG9uIGl0LCBvciBqdXN0IHJldHVybnNcclxuICogdGhlIG5vZGUgZm9yIHRoZSBnaXZlbiBwYXRoIGlmIHRoZXJlIGFyZSBubyBwZW5kaW5nIHRyYW5zYWN0aW9ucyBvbiBhbnkgYW5jZXN0b3IuXHJcbiAqXHJcbiAqIEBwYXJhbSB7IVBhdGh9IHBhdGggVGhlIGxvY2F0aW9uIHRvIHN0YXJ0IGF0LlxyXG4gKiBAcmV0dXJuIHshVHJlZS48QXJyYXkuPCFUcmFuc2FjdGlvbj4+fSBUaGUgcm9vdG1vc3Qgbm9kZSB3aXRoIGEgdHJhbnNhY3Rpb24uXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5SZXBvLnByb3RvdHlwZS5nZXRBbmNlc3RvclRyYW5zYWN0aW9uTm9kZV8gPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgdmFyIGZyb250O1xyXG4gICAgLy8gU3RhcnQgYXQgdGhlIHJvb3QgYW5kIHdhbGsgZGVlcGVyIGludG8gdGhlIHRyZWUgdG93YXJkcyBwYXRoIHVudGlsIHdlIGZpbmQgYSBub2RlIHdpdGggcGVuZGluZyB0cmFuc2FjdGlvbnMuXHJcbiAgICB2YXIgdHJhbnNhY3Rpb25Ob2RlID0gdGhpcy50cmFuc2FjdGlvblF1ZXVlVHJlZV87XHJcbiAgICB3aGlsZSAoKGZyb250ID0gcGF0aC5nZXRGcm9udCgpKSAhPT0gbnVsbCAmJlxyXG4gICAgICAgIHRyYW5zYWN0aW9uTm9kZS5nZXRWYWx1ZSgpID09PSBudWxsKSB7XHJcbiAgICAgICAgdHJhbnNhY3Rpb25Ob2RlID0gdHJhbnNhY3Rpb25Ob2RlLnN1YlRyZWUoZnJvbnQpO1xyXG4gICAgICAgIHBhdGggPSBwYXRoLnBvcEZyb250KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25Ob2RlO1xyXG59O1xyXG4vKipcclxuICogQnVpbGRzIHRoZSBxdWV1ZSBvZiBhbGwgdHJhbnNhY3Rpb25zIGF0IG9yIGJlbG93IHRoZSBzcGVjaWZpZWQgdHJhbnNhY3Rpb25Ob2RlLlxyXG4gKlxyXG4gKiBAcGFyYW0geyFUcmVlLjxBcnJheS48VHJhbnNhY3Rpb24+Pn0gdHJhbnNhY3Rpb25Ob2RlXHJcbiAqIEByZXR1cm4ge0FycmF5LjxUcmFuc2FjdGlvbj59IFRoZSBnZW5lcmF0ZWQgcXVldWUuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5SZXBvLnByb3RvdHlwZS5idWlsZFRyYW5zYWN0aW9uUXVldWVfID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uTm9kZSkge1xyXG4gICAgLy8gV2FsayBhbnkgY2hpbGQgdHJhbnNhY3Rpb24gcXVldWVzIGFuZCBhZ2dyZWdhdGUgdGhlbSBpbnRvIGEgc2luZ2xlIHF1ZXVlLlxyXG4gICAgdmFyIHRyYW5zYWN0aW9uUXVldWUgPSBbXTtcclxuICAgIHRoaXMuYWdncmVnYXRlVHJhbnNhY3Rpb25RdWV1ZXNGb3JOb2RlXyh0cmFuc2FjdGlvbk5vZGUsIHRyYW5zYWN0aW9uUXVldWUpO1xyXG4gICAgLy8gU29ydCB0aGVtIGJ5IHRoZSBvcmRlciB0aGUgdHJhbnNhY3Rpb25zIHdlcmUgY3JlYXRlZC5cclxuICAgIHRyYW5zYWN0aW9uUXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uUXVldWU7XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0geyFUcmVlLjxBcnJheS48VHJhbnNhY3Rpb24+Pn0gbm9kZVxyXG4gKiBAcGFyYW0ge0FycmF5LjxUcmFuc2FjdGlvbj59IHF1ZXVlXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5SZXBvLnByb3RvdHlwZS5hZ2dyZWdhdGVUcmFuc2FjdGlvblF1ZXVlc0Zvck5vZGVfID0gZnVuY3Rpb24gKG5vZGUsIHF1ZXVlKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIG5vZGVRdWV1ZSA9IG5vZGUuZ2V0VmFsdWUoKTtcclxuICAgIGlmIChub2RlUXVldWUgIT09IG51bGwpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVRdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBxdWV1ZS5wdXNoKG5vZGVRdWV1ZVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbm9kZS5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgX3RoaXMuYWdncmVnYXRlVHJhbnNhY3Rpb25RdWV1ZXNGb3JOb2RlXyhjaGlsZCwgcXVldWUpO1xyXG4gICAgfSk7XHJcbn07XHJcbi8qKlxyXG4gKiBSZW1vdmUgQ09NUExFVEVEIHRyYW5zYWN0aW9ucyBhdCBvciBiZWxvdyB0aGlzIG5vZGUgaW4gdGhlIHRyYW5zYWN0aW9uUXVldWVUcmVlXy5cclxuICpcclxuICogQHBhcmFtIHshVHJlZS48QXJyYXkuPCFUcmFuc2FjdGlvbj4+fSBub2RlXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5SZXBvLnByb3RvdHlwZS5wcnVuZUNvbXBsZXRlZFRyYW5zYWN0aW9uc0JlbG93Tm9kZV8gPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBxdWV1ZSA9IG5vZGUuZ2V0VmFsdWUoKTtcclxuICAgIGlmIChxdWV1ZSkge1xyXG4gICAgICAgIHZhciB0byA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgZnJvbSA9IDA7IGZyb20gPCBxdWV1ZS5sZW5ndGg7IGZyb20rKykge1xyXG4gICAgICAgICAgICBpZiAocXVldWVbZnJvbV0uc3RhdHVzICE9PSBUcmFuc2FjdGlvblN0YXR1cy5DT01QTEVURUQpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlW3RvXSA9IHF1ZXVlW2Zyb21dO1xyXG4gICAgICAgICAgICAgICAgdG8rKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBxdWV1ZS5sZW5ndGggPSB0bztcclxuICAgICAgICBub2RlLnNldFZhbHVlKHF1ZXVlLmxlbmd0aCA+IDAgPyBxdWV1ZSA6IG51bGwpO1xyXG4gICAgfVxyXG4gICAgbm9kZS5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkTm9kZSkge1xyXG4gICAgICAgIF90aGlzLnBydW5lQ29tcGxldGVkVHJhbnNhY3Rpb25zQmVsb3dOb2RlXyhjaGlsZE5vZGUpO1xyXG4gICAgfSk7XHJcbn07XHJcbi8qKlxyXG4gKiBBYm9ydHMgYWxsIHRyYW5zYWN0aW9ucyBvbiBhbmNlc3RvcnMgb3IgZGVzY2VuZGFudHMgb2YgdGhlIHNwZWNpZmllZCBwYXRoLiAgQ2FsbGVkIHdoZW4gZG9pbmcgYSBzZXQoKSBvciB1cGRhdGUoKVxyXG4gKiBzaW5jZSB3ZSBjb25zaWRlciB0aGVtIGluY29tcGF0aWJsZSB3aXRoIHRyYW5zYWN0aW9ucy5cclxuICpcclxuICogQHBhcmFtIHshUGF0aH0gcGF0aCBQYXRoIGZvciB3aGljaCB3ZSB3YW50IHRvIGFib3J0IHJlbGF0ZWQgdHJhbnNhY3Rpb25zLlxyXG4gKiBAcmV0dXJuIHshUGF0aH1cclxuICogQHByaXZhdGVcclxuICovXHJcblJlcG8ucHJvdG90eXBlLmFib3J0VHJhbnNhY3Rpb25zXyA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGFmZmVjdGVkUGF0aCA9IHRoaXMuZ2V0QW5jZXN0b3JUcmFuc2FjdGlvbk5vZGVfKHBhdGgpLnBhdGgoKTtcclxuICAgIHZhciB0cmFuc2FjdGlvbk5vZGUgPSB0aGlzLnRyYW5zYWN0aW9uUXVldWVUcmVlXy5zdWJUcmVlKHBhdGgpO1xyXG4gICAgdHJhbnNhY3Rpb25Ob2RlLmZvckVhY2hBbmNlc3RvcihmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIF90aGlzLmFib3J0VHJhbnNhY3Rpb25zT25Ob2RlXyhub2RlKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5hYm9ydFRyYW5zYWN0aW9uc09uTm9kZV8odHJhbnNhY3Rpb25Ob2RlKTtcclxuICAgIHRyYW5zYWN0aW9uTm9kZS5mb3JFYWNoRGVzY2VuZGFudChmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIF90aGlzLmFib3J0VHJhbnNhY3Rpb25zT25Ob2RlXyhub2RlKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGFmZmVjdGVkUGF0aDtcclxufTtcclxuLyoqXHJcbiAqIEFib3J0IHRyYW5zYWN0aW9ucyBzdG9yZWQgaW4gdGhpcyB0cmFuc2FjdGlvbiBxdWV1ZSBub2RlLlxyXG4gKlxyXG4gKiBAcGFyYW0geyFUcmVlLjxBcnJheS48VHJhbnNhY3Rpb24+Pn0gbm9kZSBOb2RlIHRvIGFib3J0IHRyYW5zYWN0aW9ucyBmb3IuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5SZXBvLnByb3RvdHlwZS5hYm9ydFRyYW5zYWN0aW9uc09uTm9kZV8gPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgdmFyIHF1ZXVlID0gbm9kZS5nZXRWYWx1ZSgpO1xyXG4gICAgaWYgKHF1ZXVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgLy8gUXVldWUgdXAgdGhlIGNhbGxiYWNrcyBhbmQgZmlyZSB0aGVtIGFmdGVyIGNsZWFuaW5nIHVwIGFsbCBvZiBvdXIgdHJhbnNhY3Rpb24gc3RhdGUsIHNpbmNlXHJcbiAgICAgICAgLy8gdGhlIGNhbGxiYWNrIGNvdWxkIHRyaWdnZXIgbW9yZSB0cmFuc2FjdGlvbnMgb3Igc2V0cy5cclxuICAgICAgICB2YXIgY2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgLy8gR28gdGhyb3VnaCBxdWV1ZS4gIEFueSBhbHJlYWR5LXNlbnQgdHJhbnNhY3Rpb25zIG11c3QgYmUgbWFya2VkIGZvciBhYm9ydCwgd2hpbGUgdGhlIHVuc2VudCBvbmVzXHJcbiAgICAgICAgLy8gY2FuIGJlIGltbWVkaWF0ZWx5IGFib3J0ZWQgYW5kIHJlbW92ZWQuXHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IFtdO1xyXG4gICAgICAgIHZhciBsYXN0U2VudCA9IC0xO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHF1ZXVlW2ldLnN0YXR1cyA9PT0gVHJhbnNhY3Rpb25TdGF0dXMuU0VOVF9ORUVEU19BQk9SVCkgO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChxdWV1ZVtpXS5zdGF0dXMgPT09IFRyYW5zYWN0aW9uU3RhdHVzLlNFTlQpIHtcclxuICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0KGxhc3RTZW50ID09PSBpIC0gMSwgJ0FsbCBTRU5UIGl0ZW1zIHNob3VsZCBiZSBhdCBiZWdpbm5pbmcgb2YgcXVldWUuJyk7XHJcbiAgICAgICAgICAgICAgICBsYXN0U2VudCA9IGk7XHJcbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRyYW5zYWN0aW9uIGZvciBhYm9ydCB3aGVuIGl0IGNvbWVzIGJhY2suXHJcbiAgICAgICAgICAgICAgICBxdWV1ZVtpXS5zdGF0dXMgPSBUcmFuc2FjdGlvblN0YXR1cy5TRU5UX05FRURTX0FCT1JUO1xyXG4gICAgICAgICAgICAgICAgcXVldWVbaV0uYWJvcnRSZWFzb24gPSAnc2V0JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0KHF1ZXVlW2ldLnN0YXR1cyA9PT0gVHJhbnNhY3Rpb25TdGF0dXMuUlVOLCAnVW5leHBlY3RlZCB0cmFuc2FjdGlvbiBzdGF0dXMgaW4gYWJvcnQnKTtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGNhbiBhYm9ydCBpdCBpbW1lZGlhdGVseS5cclxuICAgICAgICAgICAgICAgIHF1ZXVlW2ldLnVud2F0Y2hlcigpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdCh0aGlzLnNlcnZlclN5bmNUcmVlXy5hY2tVc2VyV3JpdGUocXVldWVbaV0uY3VycmVudFdyaXRlSWQsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgIGlmIChxdWV1ZVtpXS5vbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNuYXBzaG90ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MucHVzaChxdWV1ZVtpXS5vbkNvbXBsZXRlLmJpbmQobnVsbCwgbmV3IEVycm9yKCdzZXQnKSwgZmFsc2UsIHNuYXBzaG90KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhc3RTZW50ID09PSAtMSkge1xyXG4gICAgICAgICAgICAvLyBXZSdyZSBub3Qgd2FpdGluZyBmb3IgYW55IHNlbnQgdHJhbnNhY3Rpb25zLiAgV2UgY2FuIGNsZWFyIHRoZSBxdWV1ZS5cclxuICAgICAgICAgICAgbm9kZS5zZXRWYWx1ZShudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgdHJhbnNhY3Rpb25zIHdlIGFib3J0ZWQuXHJcbiAgICAgICAgICAgIHF1ZXVlLmxlbmd0aCA9IGxhc3RTZW50ICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTm93IGZpcmUgdGhlIGNhbGxiYWNrcy5cclxuICAgICAgICB0aGlzLmV2ZW50UXVldWVfLnJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgobm9kZS5wYXRoKCksIGV2ZW50cyk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZXhjZXB0aW9uR3VhcmQoY2FsbGJhY2tzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKiogQGNvbnN0IHtzdHJpbmd9ICovXHJcbnZhciBEQVRBQkFTRV9VUkxfT1BUSU9OID0gJ2RhdGFiYXNlVVJMJztcclxudmFyIF9zdGF0aWNJbnN0YW5jZTtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYW5kIGNhY2hlcyBSZXBvIGluc3RhbmNlcy5cclxuICovXHJcbnZhciBSZXBvTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlcG9NYW5hZ2VyKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHshT2JqZWN0LjxzdHJpbmcsIE9iamVjdDxzdHJpbmcsICFmYi5jb3JlLlJlcG8+Pn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnJlcG9zXyA9IHt9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElmIHRydWUsIG5ldyBSZXBvcyB3aWxsIGJlIGNyZWF0ZWQgdG8gdXNlIFJlYWRvbmx5UmVzdENsaWVudCAoZm9yIHRlc3RpbmcgcHVycG9zZXMpLlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudXNlUmVzdENsaWVudF8gPSBmYWxzZTtcclxuICAgIH1cclxuICAgIFJlcG9NYW5hZ2VyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghX3N0YXRpY0luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIF9zdGF0aWNJbnN0YW5jZSA9IG5ldyBSZXBvTWFuYWdlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3N0YXRpY0luc3RhbmNlO1xyXG4gICAgfTtcclxuICAgIC8vIFRPRE8oa29zcyk6IFJlbW92ZSB0aGVzZSBmdW5jdGlvbnMgdW5sZXNzIHVzZWQgaW4gdGVzdHM/XHJcbiAgICBSZXBvTWFuYWdlci5wcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIGFwcE5hbWUgaW4gdGhpcy5yZXBvc18pIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgZGJVcmwgaW4gdGhpcy5yZXBvc19bYXBwTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwb3NfW2FwcE5hbWVdW2RiVXJsXS5pbnRlcnJ1cHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZXBvTWFuYWdlci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIGFwcE5hbWUgaW4gdGhpcy5yZXBvc18pIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgZGJVcmwgaW4gdGhpcy5yZXBvc19bYXBwTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwb3NfW2FwcE5hbWVdW2RiVXJsXS5yZXN1bWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIG9ubHkgZXZlciBiZSBjYWxsZWQgdG8gQ1JFQVRFIGEgbmV3IGRhdGFiYXNlIGluc3RhbmNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IUZpcmViYXNlQXBwfSBhcHBcclxuICAgICAqIEByZXR1cm4geyFEYXRhYmFzZX1cclxuICAgICAqL1xyXG4gICAgUmVwb01hbmFnZXIucHJvdG90eXBlLmRhdGFiYXNlRnJvbUFwcCA9IGZ1bmN0aW9uIChhcHAsIHVybCkge1xyXG4gICAgICAgIHZhciBkYlVybCA9IHVybCB8fCBhcHAub3B0aW9uc1tEQVRBQkFTRV9VUkxfT1BUSU9OXTtcclxuICAgICAgICBpZiAoZGJVcmwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBmYXRhbChcIkNhbid0IGRldGVybWluZSBGaXJlYmFzZSBEYXRhYmFzZSBVUkwuICBCZSBzdXJlIHRvIGluY2x1ZGUgXCIgK1xyXG4gICAgICAgICAgICAgICAgREFUQUJBU0VfVVJMX09QVElPTiArXHJcbiAgICAgICAgICAgICAgICAnIG9wdGlvbiB3aGVuIGNhbGxpbmcgZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCgpLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcGFyc2VkVXJsID0gcGFyc2VSZXBvSW5mbyhkYlVybCk7XHJcbiAgICAgICAgdmFyIHJlcG9JbmZvID0gcGFyc2VkVXJsLnJlcG9JbmZvO1xyXG4gICAgICAgIHZhbGlkYXRlVXJsKCdJbnZhbGlkIEZpcmViYXNlIERhdGFiYXNlIFVSTCcsIDEsIHBhcnNlZFVybCk7XHJcbiAgICAgICAgaWYgKCFwYXJzZWRVcmwucGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgZmF0YWwoJ0RhdGFiYXNlIFVSTCBtdXN0IHBvaW50IHRvIHRoZSByb290IG9mIGEgRmlyZWJhc2UgRGF0YWJhc2UgJyArXHJcbiAgICAgICAgICAgICAgICAnKG5vdCBpbmNsdWRpbmcgYSBjaGlsZCBwYXRoKS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlcG8gPSB0aGlzLmNyZWF0ZVJlcG8ocmVwb0luZm8sIGFwcCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcG8uZGF0YWJhc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgdGhlIHJlcG8gYW5kIG1ha2Ugc3VyZSBpdCBpcyBkaXNjb25uZWN0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUmVwb30gcmVwb1xyXG4gICAgICovXHJcbiAgICBSZXBvTWFuYWdlci5wcm90b3R5cGUuZGVsZXRlUmVwbyA9IGZ1bmN0aW9uIChyZXBvKSB7XHJcbiAgICAgICAgdmFyIGFwcFJlcG9zID0gdXRpbC5zYWZlR2V0KHRoaXMucmVwb3NfLCByZXBvLmFwcC5uYW1lKTtcclxuICAgICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4uLi5cclxuICAgICAgICBpZiAoIWFwcFJlcG9zIHx8IHV0aWwuc2FmZUdldChhcHBSZXBvcywgcmVwby5yZXBvSW5mb18udG9VUkxTdHJpbmcoKSkgIT09IHJlcG8pIHtcclxuICAgICAgICAgICAgZmF0YWwoXCJEYXRhYmFzZSBcIiArIHJlcG8uYXBwLm5hbWUgKyBcIihcIiArIHJlcG8ucmVwb0luZm9fICsgXCIpIGhhcyBhbHJlYWR5IGJlZW4gZGVsZXRlZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcG8uaW50ZXJydXB0KCk7XHJcbiAgICAgICAgZGVsZXRlIGFwcFJlcG9zW3JlcG8ucmVwb0luZm9fLnRvVVJMU3RyaW5nKCldO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRW5zdXJlcyBhIHJlcG8gZG9lc24ndCBhbHJlYWR5IGV4aXN0IGFuZCB0aGVuIGNyZWF0ZXMgb25lIHVzaW5nIHRoZVxyXG4gICAgICogcHJvdmlkZWQgYXBwLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVJlcG9JbmZvfSByZXBvSW5mbyBUaGUgbWV0YWRhdGEgYWJvdXQgdGhlIFJlcG9cclxuICAgICAqIEBwYXJhbSB7IUZpcmViYXNlQXBwfSBhcHBcclxuICAgICAqIEByZXR1cm4geyFSZXBvfSBUaGUgUmVwbyBvYmplY3QgZm9yIHRoZSBzcGVjaWZpZWQgc2VydmVyIC8gcmVwb05hbWUuXHJcbiAgICAgKi9cclxuICAgIFJlcG9NYW5hZ2VyLnByb3RvdHlwZS5jcmVhdGVSZXBvID0gZnVuY3Rpb24gKHJlcG9JbmZvLCBhcHApIHtcclxuICAgICAgICB2YXIgYXBwUmVwb3MgPSB1dGlsLnNhZmVHZXQodGhpcy5yZXBvc18sIGFwcC5uYW1lKTtcclxuICAgICAgICBpZiAoIWFwcFJlcG9zKSB7XHJcbiAgICAgICAgICAgIGFwcFJlcG9zID0ge307XHJcbiAgICAgICAgICAgIHRoaXMucmVwb3NfW2FwcC5uYW1lXSA9IGFwcFJlcG9zO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVwbyA9IHV0aWwuc2FmZUdldChhcHBSZXBvcywgcmVwb0luZm8udG9VUkxTdHJpbmcoKSk7XHJcbiAgICAgICAgaWYgKHJlcG8pIHtcclxuICAgICAgICAgICAgZmF0YWwoJ0RhdGFiYXNlIGluaXRpYWxpemVkIG11bHRpcGxlIHRpbWVzLiBQbGVhc2UgbWFrZSBzdXJlIHRoZSBmb3JtYXQgb2YgdGhlIGRhdGFiYXNlIFVSTCBtYXRjaGVzIHdpdGggZWFjaCBkYXRhYmFzZSgpIGNhbGwuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcG8gPSBuZXcgUmVwbyhyZXBvSW5mbywgdGhpcy51c2VSZXN0Q2xpZW50XywgYXBwKTtcclxuICAgICAgICBhcHBSZXBvc1tyZXBvSW5mby50b1VSTFN0cmluZygpXSA9IHJlcG87XHJcbiAgICAgICAgcmV0dXJuIHJlcG87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JjZXMgdXMgdG8gdXNlIFJlYWRvbmx5UmVzdENsaWVudCBpbnN0ZWFkIG9mIFBlcnNpc3RlbnRDb25uZWN0aW9uIGZvciBuZXcgUmVwb3MuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlUmVzdENsaWVudFxyXG4gICAgICovXHJcbiAgICBSZXBvTWFuYWdlci5wcm90b3R5cGUuZm9yY2VSZXN0Q2xpZW50ID0gZnVuY3Rpb24gKGZvcmNlUmVzdENsaWVudCkge1xyXG4gICAgICAgIHRoaXMudXNlUmVzdENsaWVudF8gPSBmb3JjZVJlc3RDbGllbnQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlcG9NYW5hZ2VyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIGZpcmViYXNlIGRhdGFiYXNlLlxyXG4gKiBAaW1wbGVtZW50cyB7RmlyZWJhc2VTZXJ2aWNlfVxyXG4gKi9cclxudmFyIERhdGFiYXNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgY29uc3RydWN0b3Igc2hvdWxkIG5vdCBiZSBjYWxsZWQgYnkgdXNlcnMgb2Ygb3VyIHB1YmxpYyBBUEkuXHJcbiAgICAgKiBAcGFyYW0geyFSZXBvfSByZXBvX1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBEYXRhYmFzZShyZXBvXykge1xyXG4gICAgICAgIHRoaXMucmVwb18gPSByZXBvXztcclxuICAgICAgICBpZiAoIShyZXBvXyBpbnN0YW5jZW9mIFJlcG8pKSB7XHJcbiAgICAgICAgICAgIGZhdGFsKFwiRG9uJ3QgY2FsbCBuZXcgRGF0YWJhc2UoKSBkaXJlY3RseSAtIHBsZWFzZSB1c2UgZmlyZWJhc2UuZGF0YWJhc2UoKS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKiBAdHlwZSB7UmVmZXJlbmNlfSAqL1xyXG4gICAgICAgIHRoaXMucm9vdF8gPSBuZXcgUmVmZXJlbmNlKHJlcG9fLCBQYXRoLkVtcHR5KTtcclxuICAgICAgICB0aGlzLklOVEVSTkFMID0gbmV3IERhdGFiYXNlSW50ZXJuYWxzKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERhdGFiYXNlLnByb3RvdHlwZSwgXCJhcHBcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBvXy5hcHA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBEYXRhYmFzZS5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRGVsZXRlZF8oJ3JlZicpO1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnZGF0YWJhc2UucmVmJywgMCwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWZlcmVuY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmRnJvbVVSTChwYXRoLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGF0aCAhPT0gdW5kZWZpbmVkID8gdGhpcy5yb290Xy5jaGlsZChwYXRoKSA6IHRoaXMucm9vdF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSByb290IG9yIHRoZSBwYXRoIHNwZWNpZmllZCBpbiB1cmwuXHJcbiAgICAgKiBXZSB0aHJvdyBhIGV4Y2VwdGlvbiBpZiB0aGUgdXJsIGlzIG5vdCBpbiB0aGUgc2FtZSBkb21haW4gYXMgdGhlXHJcbiAgICAgKiBjdXJyZW50IHJlcG8uXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXHJcbiAgICAgKiBAcmV0dXJuIHshUmVmZXJlbmNlfSBGaXJlYmFzZSByZWZlcmVuY2UuXHJcbiAgICAgKi9cclxuICAgIERhdGFiYXNlLnByb3RvdHlwZS5yZWZGcm9tVVJMID0gZnVuY3Rpb24gKHVybCkge1xyXG4gICAgICAgIC8qKiBAY29uc3Qge3N0cmluZ30gKi9cclxuICAgICAgICB2YXIgYXBpTmFtZSA9ICdkYXRhYmFzZS5yZWZGcm9tVVJMJztcclxuICAgICAgICB0aGlzLmNoZWNrRGVsZXRlZF8oYXBpTmFtZSk7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KGFwaU5hbWUsIDEsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciBwYXJzZWRVUkwgPSBwYXJzZVJlcG9JbmZvKHVybCk7XHJcbiAgICAgICAgdmFsaWRhdGVVcmwoYXBpTmFtZSwgMSwgcGFyc2VkVVJMKTtcclxuICAgICAgICB2YXIgcmVwb0luZm8gPSBwYXJzZWRVUkwucmVwb0luZm87XHJcbiAgICAgICAgaWYgKHJlcG9JbmZvLmhvc3QgIT09IHRoaXMucmVwb18ucmVwb0luZm9fLmhvc3QpIHtcclxuICAgICAgICAgICAgZmF0YWwoYXBpTmFtZSArXHJcbiAgICAgICAgICAgICAgICAnOiBIb3N0IG5hbWUgZG9lcyBub3QgbWF0Y2ggdGhlIGN1cnJlbnQgZGF0YWJhc2U6ICcgK1xyXG4gICAgICAgICAgICAgICAgJyhmb3VuZCAnICtcclxuICAgICAgICAgICAgICAgIHJlcG9JbmZvLmhvc3QgK1xyXG4gICAgICAgICAgICAgICAgJyBidXQgZXhwZWN0ZWQgJyArXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcG9fLnJlcG9JbmZvXy5ob3N0ICtcclxuICAgICAgICAgICAgICAgICcpJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZihwYXJzZWRVUkwucGF0aC50b1N0cmluZygpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhcGlOYW1lXHJcbiAgICAgKi9cclxuICAgIERhdGFiYXNlLnByb3RvdHlwZS5jaGVja0RlbGV0ZWRfID0gZnVuY3Rpb24gKGFwaU5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5yZXBvXyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBmYXRhbCgnQ2Fubm90IGNhbGwgJyArIGFwaU5hbWUgKyAnIG9uIGEgZGVsZXRlZCBkYXRhYmFzZS4nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gTWFrZSBpbmRpdmlkdWFsIHJlcG8gZ28gb2ZmbGluZS5cclxuICAgIERhdGFiYXNlLnByb3RvdHlwZS5nb09mZmxpbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdXRpbC52YWxpZGF0ZUFyZ0NvdW50KCdkYXRhYmFzZS5nb09mZmxpbmUnLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLmNoZWNrRGVsZXRlZF8oJ2dvT2ZmbGluZScpO1xyXG4gICAgICAgIHRoaXMucmVwb18uaW50ZXJydXB0KCk7XHJcbiAgICB9O1xyXG4gICAgRGF0YWJhc2UucHJvdG90eXBlLmdvT25saW5lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHV0aWwudmFsaWRhdGVBcmdDb3VudCgnZGF0YWJhc2UuZ29PbmxpbmUnLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLmNoZWNrRGVsZXRlZF8oJ2dvT25saW5lJyk7XHJcbiAgICAgICAgdGhpcy5yZXBvXy5yZXN1bWUoKTtcclxuICAgIH07XHJcbiAgICBEYXRhYmFzZS5TZXJ2ZXJWYWx1ZSA9IHtcclxuICAgICAgICBUSU1FU1RBTVA6IHtcclxuICAgICAgICAgICAgJy5zdic6ICd0aW1lc3RhbXAnXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBEYXRhYmFzZTtcclxufSgpKTtcclxudmFyIERhdGFiYXNlSW50ZXJuYWxzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqIEBwYXJhbSB7IURhdGFiYXNlfSBkYXRhYmFzZSAqL1xyXG4gICAgZnVuY3Rpb24gRGF0YWJhc2VJbnRlcm5hbHMoZGF0YWJhc2UpIHtcclxuICAgICAgICB0aGlzLmRhdGFiYXNlID0gZGF0YWJhc2U7XHJcbiAgICB9XHJcbiAgICAvKiogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gKi9cclxuICAgIERhdGFiYXNlSW50ZXJuYWxzLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZS5jaGVja0RlbGV0ZWRfKCdkZWxldGUnKTtcclxuICAgICAgICAgICAgICAgIFJlcG9NYW5hZ2VyLmdldEluc3RhbmNlKCkuZGVsZXRlUmVwbyh0aGlzLmRhdGFiYXNlLnJlcG9fKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UucmVwb18gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZS5yb290XyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFiYXNlLklOVEVSTkFMID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGF0YWJhc2VJbnRlcm5hbHM7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogSU5URVJOQUwgbWV0aG9kcyBmb3IgaW50ZXJuYWwtdXNlIG9ubHkgKHRlc3RzLCBldGMuKS5cclxuICpcclxuICogQ3VzdG9tZXJzIHNob3VsZG4ndCB1c2UgdGhlc2Ugb3IgZWxzZSBzaG91bGQgYmUgYXdhcmUgdGhhdCB0aGV5IGNvdWxkIGJyZWFrIGF0IGFueSB0aW1lLlxyXG4gKlxyXG4gKiBAY29uc3RcclxuICovXHJcbnZhciBmb3JjZUxvbmdQb2xsaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5mb3JjZURpc2FsbG93KCk7XHJcbiAgICBCcm93c2VyUG9sbENvbm5lY3Rpb24uZm9yY2VBbGxvdygpO1xyXG59O1xyXG52YXIgZm9yY2VXZWJTb2NrZXRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLmZvcmNlRGlzYWxsb3coKTtcclxufTtcclxuLyogVXNlZCBieSBBcHAgTWFuYWdlciAqL1xyXG52YXIgaXNXZWJTb2NrZXRzQXZhaWxhYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIFdlYlNvY2tldENvbm5lY3Rpb25bJ2lzQXZhaWxhYmxlJ10oKTtcclxufTtcclxudmFyIHNldFNlY3VyaXR5RGVidWdDYWxsYmFjayA9IGZ1bmN0aW9uIChyZWYsIGNhbGxiYWNrKSB7XHJcbiAgICByZWYucmVwby5wZXJzaXN0ZW50Q29ubmVjdGlvbl8uc2VjdXJpdHlEZWJ1Z0NhbGxiYWNrXyA9IGNhbGxiYWNrO1xyXG59O1xyXG52YXIgc3RhdHMgPSBmdW5jdGlvbiAocmVmLCBzaG93RGVsdGEpIHtcclxuICAgIHJlZi5yZXBvLnN0YXRzKHNob3dEZWx0YSk7XHJcbn07XHJcbnZhciBzdGF0c0luY3JlbWVudENvdW50ZXIgPSBmdW5jdGlvbiAocmVmLCBtZXRyaWMpIHtcclxuICAgIHJlZi5yZXBvLnN0YXRzSW5jcmVtZW50Q291bnRlcihtZXRyaWMpO1xyXG59O1xyXG52YXIgZGF0YVVwZGF0ZUNvdW50ID0gZnVuY3Rpb24gKHJlZikge1xyXG4gICAgcmV0dXJuIHJlZi5yZXBvLmRhdGFVcGRhdGVDb3VudDtcclxufTtcclxudmFyIGludGVyY2VwdFNlcnZlckRhdGEgPSBmdW5jdGlvbiAocmVmLCBjYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIHJlZi5yZXBvLmludGVyY2VwdFNlcnZlckRhdGFfKGNhbGxiYWNrKTtcclxufTtcblxudmFyIElOVEVSTkFMID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBmb3JjZUxvbmdQb2xsaW5nOiBmb3JjZUxvbmdQb2xsaW5nLFxuICBmb3JjZVdlYlNvY2tldHM6IGZvcmNlV2ViU29ja2V0cyxcbiAgaXNXZWJTb2NrZXRzQXZhaWxhYmxlOiBpc1dlYlNvY2tldHNBdmFpbGFibGUsXG4gIHNldFNlY3VyaXR5RGVidWdDYWxsYmFjazogc2V0U2VjdXJpdHlEZWJ1Z0NhbGxiYWNrLFxuICBzdGF0czogc3RhdHMsXG4gIHN0YXRzSW5jcmVtZW50Q291bnRlcjogc3RhdHNJbmNyZW1lbnRDb3VudGVyLFxuICBkYXRhVXBkYXRlQ291bnQ6IGRhdGFVcGRhdGVDb3VudCxcbiAgaW50ZXJjZXB0U2VydmVyRGF0YTogaW50ZXJjZXB0U2VydmVyRGF0YVxufSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgRGF0YUNvbm5lY3Rpb24gPSBQZXJzaXN0ZW50Q29ubmVjdGlvbjtcclxuLyoqXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gcGF0aFN0cmluZ1xyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCopfSBvbkNvbXBsZXRlXHJcbiAqL1xyXG5QZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUuc2ltcGxlTGlzdGVuID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIG9uQ29tcGxldGUpIHtcclxuICAgIHRoaXMuc2VuZFJlcXVlc3QoJ3EnLCB7IHA6IHBhdGhTdHJpbmcgfSwgb25Db21wbGV0ZSk7XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0geyp9IGRhdGFcclxuICogQHBhcmFtIHtmdW5jdGlvbigqKX0gb25FY2hvXHJcbiAqL1xyXG5QZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUuZWNobyA9IGZ1bmN0aW9uIChkYXRhLCBvbkVjaG8pIHtcclxuICAgIHRoaXMuc2VuZFJlcXVlc3QoJ2VjaG8nLCB7IGQ6IGRhdGEgfSwgb25FY2hvKTtcclxufTtcclxuLy8gUmVhbFRpbWVDb25uZWN0aW9uIHByb3BlcnRpZXMgdGhhdCB3ZSB1c2UgaW4gdGVzdHMuXHJcbnZhciBSZWFsVGltZUNvbm5lY3Rpb24gPSBDb25uZWN0aW9uO1xyXG4vKipcclxuICogQHBhcmFtIHtmdW5jdGlvbigpOiBzdHJpbmd9IG5ld0hhc2hcclxuICogQHJldHVybiB7ZnVuY3Rpb24oKX1cclxuICovXHJcbnZhciBoaWphY2tIYXNoID0gZnVuY3Rpb24gKG5ld0hhc2gpIHtcclxuICAgIHZhciBvbGRQdXQgPSBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUucHV0O1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBkYXRhLCBvcHRfb25Db21wbGV0ZSwgb3B0X2hhc2gpIHtcclxuICAgICAgICBpZiAob3B0X2hhc2ggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvcHRfaGFzaCA9IG5ld0hhc2goKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2xkUHV0LmNhbGwodGhpcywgcGF0aFN0cmluZywgZGF0YSwgb3B0X29uQ29tcGxldGUsIG9wdF9oYXNoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5wdXQgPSBvbGRQdXQ7XHJcbiAgICB9O1xyXG59O1xyXG4vKipcclxuICogQHR5cGUge2Z1bmN0aW9uKG5ldzpSZXBvSW5mbywgIXN0cmluZywgYm9vbGVhbiwgIXN0cmluZywgYm9vbGVhbik6IHVuZGVmaW5lZH1cclxuICovXHJcbnZhciBDb25uZWN0aW9uVGFyZ2V0ID0gUmVwb0luZm87XHJcbi8qKlxyXG4gKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlcclxuICogQHJldHVybiB7IXN0cmluZ31cclxuICovXHJcbnZhciBxdWVyeUlkZW50aWZpZXIgPSBmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgIHJldHVybiBxdWVyeS5xdWVyeUlkZW50aWZpZXIoKTtcclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7IVF1ZXJ5fSBmaXJlYmFzZVJlZlxyXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxyXG4gKi9cclxudmFyIGxpc3RlbnMgPSBmdW5jdGlvbiAoZmlyZWJhc2VSZWYpIHtcclxuICAgIHJldHVybiBmaXJlYmFzZVJlZi5yZXBvLnBlcnNpc3RlbnRDb25uZWN0aW9uXy5saXN0ZW5zXztcclxufTtcclxuLyoqXHJcbiAqIEZvcmNlcyB0aGUgUmVwb01hbmFnZXIgdG8gY3JlYXRlIFJlcG9zIHRoYXQgdXNlIFJlYWRvbmx5UmVzdENsaWVudCBpbnN0ZWFkIG9mIFBlcnNpc3RlbnRDb25uZWN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlUmVzdENsaWVudFxyXG4gKi9cclxudmFyIGZvcmNlUmVzdENsaWVudCA9IGZ1bmN0aW9uIChmb3JjZVJlc3RDbGllbnQpIHtcclxuICAgIFJlcG9NYW5hZ2VyLmdldEluc3RhbmNlKCkuZm9yY2VSZXN0Q2xpZW50KGZvcmNlUmVzdENsaWVudCk7XHJcbn07XG5cbnZhciBURVNUX0FDQ0VTUyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgRGF0YUNvbm5lY3Rpb246IERhdGFDb25uZWN0aW9uLFxuICBSZWFsVGltZUNvbm5lY3Rpb246IFJlYWxUaW1lQ29ubmVjdGlvbixcbiAgaGlqYWNrSGFzaDogaGlqYWNrSGFzaCxcbiAgQ29ubmVjdGlvblRhcmdldDogQ29ubmVjdGlvblRhcmdldCxcbiAgcXVlcnlJZGVudGlmaWVyOiBxdWVyeUlkZW50aWZpZXIsXG4gIGxpc3RlbnM6IGxpc3RlbnMsXG4gIGZvcmNlUmVzdENsaWVudDogZm9yY2VSZXN0Q2xpZW50XG59KTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBTZXJ2ZXJWYWx1ZSA9IERhdGFiYXNlLlNlcnZlclZhbHVlO1xyXG5mdW5jdGlvbiByZWdpc3RlckRhdGFiYXNlKGluc3RhbmNlKSB7XHJcbiAgICAvLyBSZWdpc3RlciB0aGUgRGF0YWJhc2UgU2VydmljZSB3aXRoIHRoZSAnZmlyZWJhc2UnIG5hbWVzcGFjZS5cclxuICAgIHZhciBuYW1lc3BhY2UgPSBpbnN0YW5jZS5JTlRFUk5BTC5yZWdpc3RlclNlcnZpY2UoJ2RhdGFiYXNlJywgZnVuY3Rpb24gKGFwcCwgdW51c2VkLCB1cmwpIHsgcmV0dXJuIFJlcG9NYW5hZ2VyLmdldEluc3RhbmNlKCkuZGF0YWJhc2VGcm9tQXBwKGFwcCwgdXJsKTsgfSwgXHJcbiAgICAvLyBmaXJlYmFzZS5kYXRhYmFzZSBuYW1lc3BhY2UgcHJvcGVydGllc1xyXG4gICAge1xyXG4gICAgICAgIFJlZmVyZW5jZTogUmVmZXJlbmNlLFxyXG4gICAgICAgIFF1ZXJ5OiBRdWVyeSxcclxuICAgICAgICBEYXRhYmFzZTogRGF0YWJhc2UsXHJcbiAgICAgICAgZW5hYmxlTG9nZ2luZzogZW5hYmxlTG9nZ2luZyxcclxuICAgICAgICBJTlRFUk5BTDogSU5URVJOQUwsXHJcbiAgICAgICAgU2VydmVyVmFsdWU6IFNlcnZlclZhbHVlLFxyXG4gICAgICAgIFRFU1RfQUNDRVNTOiBURVNUX0FDQ0VTU1xyXG4gICAgfSwgbnVsbCwgdHJ1ZSk7XHJcbiAgICBpZiAodXRpbC5pc05vZGVTZGsoKSkge1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gbmFtZXNwYWNlO1xyXG4gICAgfVxyXG59XHJcbnJlZ2lzdGVyRGF0YWJhc2UoZmlyZWJhc2UpO1xuXG5leHBvcnRzLnJlZ2lzdGVyRGF0YWJhc2UgPSByZWdpc3RlckRhdGFiYXNlO1xuZXhwb3J0cy5EYXRhYmFzZSA9IERhdGFiYXNlO1xuZXhwb3J0cy5RdWVyeSA9IFF1ZXJ5O1xuZXhwb3J0cy5SZWZlcmVuY2UgPSBSZWZlcmVuY2U7XG5leHBvcnRzLmVuYWJsZUxvZ2dpbmcgPSBlbmFibGVMb2dnaW5nO1xuZXhwb3J0cy5TZXJ2ZXJWYWx1ZSA9IFNlcnZlclZhbHVlO1xuZXhwb3J0cy5EYXRhU25hcHNob3QgPSBEYXRhU25hcHNob3Q7XG5leHBvcnRzLk9uRGlzY29ubmVjdCA9IE9uRGlzY29ubmVjdDtcbiIsIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQSBjb250YWluZXIgZm9yIGFsbCBvZiB0aGUgTG9nZ2VyIGluc3RhbmNlc1xyXG4gKi9cclxudmFyIGluc3RhbmNlcyA9IFtdO1xyXG4vKipcclxuICogVGhlIEpTIFNESyBzdXBwb3J0cyA1IGxvZyBsZXZlbHMgYW5kIGFsc28gYWxsb3dzIGEgdXNlciB0aGUgYWJpbGl0eSB0b1xyXG4gKiBzaWxlbmNlIHRoZSBsb2dzIGFsdG9nZXRoZXIuXHJcbiAqXHJcbiAqIFRoZSBvcmRlciBpcyBhIGZvbGxvd3M6XHJcbiAqIERFQlVHIDwgVkVSQk9TRSA8IElORk8gPCBXQVJOIDwgRVJST1JcclxuICpcclxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIHdpbGwgYmUgY2FwdHVyZWQgKGkuZS4gaWZcclxuICogeW91IHNldCB0aGUgbG9nIGxldmVsIHRvIGBJTkZPYCwgZXJyb3JzIHdpbGwgc3RpbGwgYmUgbG9nZ2VkLCBidXQgYERFQlVHYCBhbmRcclxuICogYFZFUkJPU0VgIGxvZ3Mgd2lsbCBub3QpXHJcbiAqL1xyXG52YXIgTG9nTGV2ZWw7XHJcbihmdW5jdGlvbiAoTG9nTGV2ZWwpIHtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiREVCVUdcIl0gPSAwXSA9IFwiREVCVUdcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiVkVSQk9TRVwiXSA9IDFdID0gXCJWRVJCT1NFXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIklORk9cIl0gPSAyXSA9IFwiSU5GT1wiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJXQVJOXCJdID0gM10gPSBcIldBUk5cIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiRVJST1JcIl0gPSA0XSA9IFwiRVJST1JcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiU0lMRU5UXCJdID0gNV0gPSBcIlNJTEVOVFwiO1xyXG59KShMb2dMZXZlbCB8fCAoTG9nTGV2ZWwgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgbG9nIGxldmVsXHJcbiAqL1xyXG52YXIgZGVmYXVsdExvZ0xldmVsID0gTG9nTGV2ZWwuSU5GTztcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGxvZyBoYW5kbGVyIHdpbGwgZm9yd2FyZCBERUJVRywgVkVSQk9TRSwgSU5GTywgV0FSTiwgYW5kIEVSUk9SXHJcbiAqIG1lc3NhZ2VzIG9uIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgY29uc29sZSBjb3VudGVycGFydHMgKGlmIHRoZSBsb2cgbWV0aG9kXHJcbiAqIGlzIHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCBsb2cgbGV2ZWwpXHJcbiAqL1xyXG52YXIgZGVmYXVsdExvZ0hhbmRsZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGxvZ1R5cGUpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAobG9nVHlwZSA8IGluc3RhbmNlLmxvZ0xldmVsKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICBzd2l0Y2ggKGxvZ1R5cGUpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBCeSBkZWZhdWx0LCBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGRpc3BsYXllZCBpbiB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgKGluXHJcbiAgICAgICAgICogY2hyb21lKS4gVG8gYXZvaWQgZm9yY2luZyB1c2VycyB0byBoYXZlIHRvIG9wdC1pbiB0byB0aGVzZSBsb2dzIHR3aWNlXHJcbiAgICAgICAgICogKGkuZS4gb25jZSBmb3IgZmlyZWJhc2UsIGFuZCBvbmNlIGluIHRoZSBjb25zb2xlKSwgd2UgYXJlIHNlbmRpbmcgYERFQlVHYFxyXG4gICAgICAgICAqIGxvZ3MgdG8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5ERUJVRzpcclxuICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgW1wiW1wiICsgbm93ICsgXCJdICBcIiArIGluc3RhbmNlLm5hbWUgKyBcIjpcIl0uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5WRVJCT1NFOlxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBbXCJbXCIgKyBub3cgKyBcIl0gIFwiICsgaW5zdGFuY2UubmFtZSArIFwiOlwiXS5jb25jYXQoYXJncykpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIExvZ0xldmVsLklORk86XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mby5hcHBseShjb25zb2xlLCBbXCJbXCIgKyBub3cgKyBcIl0gIFwiICsgaW5zdGFuY2UubmFtZSArIFwiOlwiXS5jb25jYXQoYXJncykpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIExvZ0xldmVsLldBUk46XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBbXCJbXCIgKyBub3cgKyBcIl0gIFwiICsgaW5zdGFuY2UubmFtZSArIFwiOlwiXS5jb25jYXQoYXJncykpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIExvZ0xldmVsLkVSUk9SOlxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIFtcIltcIiArIG5vdyArIFwiXSAgXCIgKyBpbnN0YW5jZS5uYW1lICsgXCI6XCJdLmNvbmNhdChhcmdzKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byBsb2cgYSBtZXNzYWdlIHdpdGggYW4gaW52YWxpZCBsb2dUeXBlICh2YWx1ZTogXCIgKyBsb2dUeXBlICsgXCIpXCIpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgTG9nZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlcyB5b3UgYW4gaW5zdGFuY2Ugb2YgYSBMb2dnZXIgdG8gY2FwdHVyZSBtZXNzYWdlcyBhY2NvcmRpbmcgdG9cclxuICAgICAqIEZpcmViYXNlJ3MgbG9nZ2luZyBzY2hlbWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgdGhhdCB0aGUgbG9ncyB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBMb2dnZXIobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxvZyBsZXZlbCBvZiB0aGUgZ2l2ZW4gTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gZGVmYXVsdExvZ0xldmVsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsb2cgaGFuZGxlciBmb3IgdGhlIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyID0gZGVmYXVsdExvZ0hhbmRsZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FwdHVyZSB0aGUgY3VycmVudCBpbnN0YW5jZSBmb3IgbGF0ZXIgdXNlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zdGFuY2VzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTG9nZ2VyLnByb3RvdHlwZSwgXCJsb2dMZXZlbFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2dMZXZlbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBpZiAoISh2YWwgaW4gTG9nTGV2ZWwpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHZhbHVlIGFzc2lnbmVkIHRvIGBsb2dMZXZlbGAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IHZhbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMb2dnZXIucHJvdG90eXBlLCBcImxvZ0hhbmRsZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9nSGFuZGxlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgYXNzaWduZWQgdG8gYGxvZ0hhbmRsZXJgIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBmdW5jdGlvbnMgYmVsb3cgYXJlIGFsbCBiYXNlZCBvbiB0aGUgYGNvbnNvbGVgIGludGVyZmFjZVxyXG4gICAgICovXHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmRlYnVnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyLmFwcGx5KHRoaXMsIFt0aGlzLCBMb2dMZXZlbC5ERUJVR10uY29uY2F0KGFyZ3MpKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlci5hcHBseSh0aGlzLCBbdGhpcywgTG9nTGV2ZWwuVkVSQk9TRV0uY29uY2F0KGFyZ3MpKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmluZm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIuYXBwbHkodGhpcywgW3RoaXMsIExvZ0xldmVsLklORk9dLmNvbmNhdChhcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyLmFwcGx5KHRoaXMsIFt0aGlzLCBMb2dMZXZlbC5XQVJOXS5jb25jYXQoYXJncykpO1xyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIuYXBwbHkodGhpcywgW3RoaXMsIExvZ0xldmVsLkVSUk9SXS5jb25jYXQoYXJncykpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBMb2dnZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xyXG4gICAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3QpIHtcclxuICAgICAgICBpbnN0LmxvZ0xldmVsID0gbGV2ZWw7XHJcbiAgICB9KTtcclxufVxuXG5leHBvcnQgeyBzZXRMb2dMZXZlbCwgTG9nZ2VyLCBMb2dMZXZlbCB9O1xuIiwiaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5pbXBvcnQgJ2ZpcmViYXNlL2F1dGgnO1xuaW1wb3J0ICdmaXJlYmFzZS9kYXRhYmFzZSc7XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgYXBpS2V5OiAnQUl6YVN5REIxaUpFU0VkNWk0MDJ2WVdmemhGVzZQdVd1QjM4eW1JJyxcbiAgYXV0aERvbWFpbjogJ2VzcG9ydHMtcGxhdGZvcm0tMjBkODIuZmlyZWJhc2VhcHAuY29tJyxcbiAgZGF0YWJhc2VVUkw6ICdodHRwczovL2VzcG9ydHMtcGxhdGZvcm0tMjBkODIuZmlyZWJhc2Vpby5jb20nLFxuICBwcm9qZWN0SWQ6ICdlc3BvcnRzLXBsYXRmb3JtLTIwZDgyJyxcbiAgc3RvcmFnZUJ1Y2tldDogJ2VzcG9ydHMtcGxhdGZvcm0tMjBkODIuYXBwc3BvdC5jb20nLFxuICBtZXNzYWdpbmdTZW5kZXJJZDogJzUxOTI1NDg2MTA4OCcsXG59O1xuXG5jbGFzcyBGaXJlYmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGZpcmViYXNlLmluaXRpYWxpemVBcHAoY29uZmlnKTtcbiAgICB0aGlzLmF1dGggPSBmaXJlYmFzZS5hdXRoKCk7XG4gICAgdGhpcy5kYXRhYmFzZSA9IGZpcmViYXNlLmRhdGFiYXNlKCk7XG4gICAgLy8gdGhpcy5hdXRoLm9uQXV0aFN0YXRlQ2hhbmdlZCgodXNlcikgPT4geyB0aGlzLnVzZXIgPSB1c2VyOyB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGaXJlYmFzZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IENvb2tpZXNQcm92aWRlciB9IGZyb20gJ3JlYWN0LWNvb2tpZSc7XG5pbXBvcnQgRmlyZWJhc2UgZnJvbSAnc3JjL2ZpcmViYXNlJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuaW1wb3J0ICdib290c3RyYXAvZGlzdC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MnO1xuaW1wb3J0ICdzcmMvYXNzZXRzL2Nzcy9zdHlsZS5jc3MnO1xuXG5SZWFjdERPTS5yZW5kZXIoPENvb2tpZXNQcm92aWRlcj48QXBwIGZpcmViYXNlPXtuZXcgRmlyZWJhc2UoKX0gLz48L0Nvb2tpZXNQcm92aWRlcj4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKSk7XG4iXSwic291cmNlUm9vdCI6IiJ9